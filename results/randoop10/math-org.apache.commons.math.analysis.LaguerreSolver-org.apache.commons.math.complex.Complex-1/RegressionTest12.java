import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest12 {

    public static boolean debug = false;

    @Test
    public void test06001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06001");
        double[] doubleArray2 = new double[] { (byte) 1, 100 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) (short) 100);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver6 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction3);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction7 = laguerreSolver6.getPolynomialFunction();
        double double8 = laguerreSolver6.getRelativeAccuracy();
        laguerreSolver6.resetRelativeAccuracy();
        double double10 = laguerreSolver6.getFunctionValueAccuracy();
        laguerreSolver6.resetRelativeAccuracy();
        laguerreSolver6.setAbsoluteAccuracy((-1.6365376E7d));
        int int14 = laguerreSolver6.getMaximalIterationCount();
        // The following exception was thrown during execution in test generation
        try {
            double double18 = laguerreSolver6.solve(52701.0d, (-0.999999999999965d), 7954.981633974483d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Endpoints do not specify an interval: [52701.0,-0.999999999999965]");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 10001.0d + "'", double5 == 10001.0d);
        org.junit.Assert.assertNotNull(polynomialFunction7);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 1.0E-14d + "'", double8 == 1.0E-14d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0E-15d + "'", double10 == 1.0E-15d);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 100 + "'", int14 == 100);
    }

    @Test
    public void test06002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06002");
        double[] doubleArray2 = new double[] { (byte) 1, 100 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) (short) 100);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver6 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction3);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction7 = laguerreSolver6.getPolynomialFunction();
        double double8 = laguerreSolver6.getRelativeAccuracy();
        laguerreSolver6.resetRelativeAccuracy();
        double double10 = laguerreSolver6.getFunctionValueAccuracy();
        laguerreSolver6.resetRelativeAccuracy();
        laguerreSolver6.resetMaximalIterationCount();
        double double13 = laguerreSolver6.getFunctionValueAccuracy();
        laguerreSolver6.setMaximalIterationCount((int) (byte) 1);
        laguerreSolver6.setMaximalIterationCount(5);
        laguerreSolver6.resetMaximalIterationCount();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 10001.0d + "'", double5 == 10001.0d);
        org.junit.Assert.assertNotNull(polynomialFunction7);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 1.0E-14d + "'", double8 == 1.0E-14d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0E-15d + "'", double10 == 1.0E-15d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 1.0E-15d + "'", double13 == 1.0E-15d);
    }

    @Test
    public void test06003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06003");
        double[] doubleArray2 = new double[] { (byte) 1, 100 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) (short) 100);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver6 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction3);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction7 = laguerreSolver6.getPolynomialFunction();
        laguerreSolver6.resetRelativeAccuracy();
        double[] doubleArray14 = new double[] { 0L, '#', 100.0f, 0L, (-1.0d) };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction15 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray14);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction16 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray14);
        org.apache.commons.math.complex.Complex[] complexArray18 = laguerreSolver6.solveAll(doubleArray14, 101.0d);
        double double19 = laguerreSolver6.getRelativeAccuracy();
        int int20 = laguerreSolver6.getIterationCount();
        // The following exception was thrown during execution in test generation
        try {
            double double23 = laguerreSolver6.solve(0.5403023058681398d, (-2.842052136E9d));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Endpoints do not specify an interval: [0.5403023058681398,-2.842052136E9]");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 10001.0d + "'", double5 == 10001.0d);
        org.junit.Assert.assertNotNull(polynomialFunction7);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[0.0, 35.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(complexArray18);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 1.0E-14d + "'", double19 == 1.0E-14d);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 18 + "'", int20 == 18);
    }

    @Test
    public void test06004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06004");
        double[] doubleArray2 = new double[] { (byte) 1, 100 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) (short) 100);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver6 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction3);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction7 = laguerreSolver6.getPolynomialFunction();
        double double8 = laguerreSolver6.getRelativeAccuracy();
        double double9 = laguerreSolver6.getAbsoluteAccuracy();
        laguerreSolver6.setAbsoluteAccuracy(0.0d);
        laguerreSolver6.setRelativeAccuracy(349.0d);
        laguerreSolver6.setRelativeAccuracy((-0.3533630315721405d));
        laguerreSolver6.resetAbsoluteAccuracy();
        double[] doubleArray21 = new double[] { (byte) 1, 100 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction22 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray21);
        double double24 = polynomialFunction22.value((double) (short) 100);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver25 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction22);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction26 = laguerreSolver25.getPolynomialFunction();
        laguerreSolver25.resetRelativeAccuracy();
        double[] doubleArray33 = new double[] { 0L, '#', 100.0f, 0L, (-1.0d) };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction34 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray33);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction35 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray33);
        org.apache.commons.math.complex.Complex[] complexArray37 = laguerreSolver25.solveAll(doubleArray33, 101.0d);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException38 = new org.apache.commons.math.MaxIterationsExceededException(1, "org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: Convergence failed", (java.lang.Object[]) complexArray37);
        org.apache.commons.math.complex.Complex complex41 = new org.apache.commons.math.complex.Complex(350.0d, (-1.03036766E8d));
        org.apache.commons.math.complex.Complex[] complexArray42 = laguerreSolver6.solveAll(complexArray37, complex41);
        laguerreSolver6.setAbsoluteAccuracy(0.0d);
        laguerreSolver6.resetFunctionValueAccuracy();
        double double46 = laguerreSolver6.getFunctionValueAccuracy();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 10001.0d + "'", double5 == 10001.0d);
        org.junit.Assert.assertNotNull(polynomialFunction7);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 1.0E-14d + "'", double8 == 1.0E-14d);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0E-6d + "'", double9 == 1.0E-6d);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 10001.0d + "'", double24 == 10001.0d);
        org.junit.Assert.assertNotNull(polynomialFunction26);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[0.0, 35.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(complexArray37);
        org.junit.Assert.assertNotNull(complexArray42);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 1.0E-15d + "'", double46 == 1.0E-15d);
    }

    @Test
    public void test06005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06005");
        org.apache.commons.math.ConvergenceException convergenceException1 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.FunctionEvaluationException: Evaluation failed for argument = 10,101");
        java.lang.String str2 = convergenceException1.toString();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.FunctionEvaluationException: Evaluation failed for argument = 10,101" + "'", str2, "org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.FunctionEvaluationException: Evaluation failed for argument = 10,101");
    }

    @Test
    public void test06006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06006");
        double[] doubleArray5 = new double[] { 0L, '#', 100.0f, 0L, (-1.0d) };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray5);
        double double8 = polynomialFunction6.value((double) 0);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver9 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        double[] doubleArray12 = new double[] { (byte) 1, 100 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction13 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray12);
        double double15 = polynomialFunction13.value((double) (short) 100);
        double[] doubleArray16 = polynomialFunction13.getCoefficients();
        org.apache.commons.math.complex.Complex[] complexArray18 = laguerreSolver9.solveAll(doubleArray16, (double) (short) 10);
        laguerreSolver9.setMaximalIterationCount((int) (byte) 10);
        laguerreSolver9.resetRelativeAccuracy();
        laguerreSolver9.resetMaximalIterationCount();
        int int23 = laguerreSolver9.getMaximalIterationCount();
        laguerreSolver9.resetRelativeAccuracy();
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[0.0, 35.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 10001.0d + "'", double15 == 10001.0d);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(complexArray18);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 100 + "'", int23 == 100);
    }

    @Test
    public void test06007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06007");
        double[] doubleArray2 = new double[] { (byte) 1, 100 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) (short) 100);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver6 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction3);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction7 = laguerreSolver6.getPolynomialFunction();
        laguerreSolver6.setRelativeAccuracy((double) 0);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction10 = laguerreSolver6.getPolynomialFunction();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction11 = laguerreSolver6.getPolynomialFunction();
        double double12 = laguerreSolver6.getFunctionValueAccuracy();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction13 = laguerreSolver6.getPolynomialFunction();
        laguerreSolver6.setRelativeAccuracy(131.67847730989726d);
        laguerreSolver6.resetAbsoluteAccuracy();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 10001.0d + "'", double5 == 10001.0d);
        org.junit.Assert.assertNotNull(polynomialFunction7);
        org.junit.Assert.assertNotNull(polynomialFunction10);
        org.junit.Assert.assertNotNull(polynomialFunction11);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 1.0E-15d + "'", double12 == 1.0E-15d);
        org.junit.Assert.assertNotNull(polynomialFunction13);
    }

    @Test
    public void test06008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06008");
        double[] doubleArray2 = new double[] { (byte) 1, 100 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) (short) 100);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver6 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction3);
        double double10 = laguerreSolver6.solve((double) (-1L), 349.0d, (double) (short) 10);
        int int11 = laguerreSolver6.getIterationCount();
        laguerreSolver6.setRelativeAccuracy(0.0d);
        double double14 = laguerreSolver6.getAbsoluteAccuracy();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 10001.0d + "'", double5 == 10001.0d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + (-0.01d) + "'", double10 == (-0.01d));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 3 + "'", int11 == 3);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 1.0E-6d + "'", double14 == 1.0E-6d);
    }

    @Test
    public void test06009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06009");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex1 = complex0.cosh();
        org.apache.commons.math.complex.Complex complex2 = complex0.log();
        org.apache.commons.math.complex.Complex complex3 = complex2.cos();
        double double4 = complex3.abs();
        org.apache.commons.math.complex.Complex complex5 = complex3.tanh();
        org.apache.commons.math.complex.Complex complex6 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex7 = complex6.sqrt();
        org.apache.commons.math.complex.Complex complex8 = complex7.asin();
        org.apache.commons.math.complex.Complex complex9 = complex5.add(complex7);
        org.apache.commons.math.complex.Complex complex10 = complex7.cos();
        double double11 = complex10.getReal();
        org.apache.commons.math.complex.Complex complex12 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex13 = complex12.tan();
        org.apache.commons.math.complex.Complex complex14 = complex10.divide(complex12);
        org.apache.commons.math.complex.Complex complex15 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex16 = complex15.cosh();
        double double17 = complex15.abs();
        org.apache.commons.math.complex.Complex complex18 = complex15.conjugate();
        org.apache.commons.math.complex.Complex complex19 = complex15.exp();
        org.apache.commons.math.complex.Complex complex20 = complex15.conjugate();
        org.apache.commons.math.complex.Complex complex21 = complex20.sqrt1z();
        org.apache.commons.math.complex.Complex complex22 = complex12.subtract(complex20);
        org.apache.commons.math.complex.Complex complex23 = complex20.conjugate();
        boolean boolean24 = complex20.isInfinite();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + Double.POSITIVE_INFINITY + "'", double17 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
    }

    @Test
    public void test06010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06010");
        java.lang.Object[] objArray2 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException3 = new org.apache.commons.math.MaxIterationsExceededException((int) (short) 10, "org.apache.commons.math.MaxIterationsExceededException: Maximal number of iterations (52) exceeded", objArray2);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test06011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06011");
        double[] doubleArray2 = new double[] { (byte) -1, '#' };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction4 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver5 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction4);
        laguerreSolver5.setAbsoluteAccuracy(0.0d);
        double double8 = laguerreSolver5.getFunctionValueAccuracy();
        laguerreSolver5.setFunctionValueAccuracy((double) 100);
        laguerreSolver5.setFunctionValueAccuracy(349.0d);
        laguerreSolver5.resetRelativeAccuracy();
        laguerreSolver5.setAbsoluteAccuracy((-0.7853981633974483d));
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[-1.0, 35.0]");
        org.junit.Assert.assertNotNull(polynomialFunction4);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 1.0E-15d + "'", double8 == 1.0E-15d);
    }

    @Test
    public void test06012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06012");
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException7 = new org.apache.commons.math.FunctionEvaluationException((double) 100);
        java.lang.Object[] objArray8 = functionEvaluationException7.getArguments();
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException9 = new org.apache.commons.math.MaxIterationsExceededException((int) (short) -1, "", objArray8);
        java.lang.Object[] objArray20 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException21 = new org.apache.commons.math.ConvergenceException("", objArray20);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException22 = new org.apache.commons.math.FunctionEvaluationException((double) (short) 10, "hi!", objArray20);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException23 = new org.apache.commons.math.FunctionEvaluationException(0.0d, "org.apache.commons.math.FunctionEvaluationException: ", objArray20);
        java.lang.Object[] objArray25 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException26 = new org.apache.commons.math.ConvergenceException("", objArray25);
        java.lang.Object[] objArray31 = new java.lang.Object[] { 0.0f, (short) 1 };
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException32 = new org.apache.commons.math.MaxIterationsExceededException(100, "", objArray31);
        convergenceException26.addSuppressed((java.lang.Throwable) maxIterationsExceededException32);
        org.apache.commons.math.ConvergenceException convergenceException34 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.FunctionEvaluationException: ", objArray20, (java.lang.Throwable) maxIterationsExceededException32);
        org.apache.commons.math.ConvergenceException convergenceException35 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.MaxIterationsExceededException: org.apache.commons.math.FunctionEvaluationException: ", objArray20);
        org.apache.commons.math.ConvergenceException convergenceException36 = new org.apache.commons.math.ConvergenceException("", objArray20);
        java.lang.Object[] objArray45 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException46 = new org.apache.commons.math.ConvergenceException("", objArray45);
        java.lang.Object[] objArray48 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException49 = new org.apache.commons.math.ConvergenceException("", objArray48);
        org.apache.commons.math.ConvergenceException convergenceException50 = new org.apache.commons.math.ConvergenceException("", objArray45, (java.lang.Throwable) convergenceException49);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException52 = new org.apache.commons.math.FunctionEvaluationException((double) 100);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException53 = new org.apache.commons.math.FunctionEvaluationException(100.0d, "org.apache.commons.math.ConvergenceException: hi!", objArray45, (java.lang.Throwable) functionEvaluationException52);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException54 = new org.apache.commons.math.MaxIterationsExceededException((int) (short) 100, "", objArray45);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException55 = new org.apache.commons.math.FunctionEvaluationException((double) 1L, (java.lang.Throwable) maxIterationsExceededException54);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException56 = new org.apache.commons.math.FunctionEvaluationException(0.0d, (java.lang.Throwable) maxIterationsExceededException54);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException57 = new org.apache.commons.math.FunctionEvaluationException((-99999.0d), "org.apache.commons.math.MaxIterationsExceededException: ", objArray20, (java.lang.Throwable) functionEvaluationException56);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException58 = new org.apache.commons.math.FunctionEvaluationException((-1.0d), "org.apache.commons.math.MaxIterationsExceededException: org.apache.commons.math.MaxIterationsExceededException: ", objArray8, (java.lang.Throwable) functionEvaluationException56);
        org.apache.commons.math.ConvergenceException convergenceException62 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.MaxIterationsExceededException: org.apache.commons.math.FunctionEvaluationException: ");
        java.lang.Object[] objArray63 = convergenceException62.getArguments();
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException64 = new org.apache.commons.math.FunctionEvaluationException(88.60844767819809d, "org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: ", (java.lang.Throwable) convergenceException62);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException65 = new org.apache.commons.math.FunctionEvaluationException(33.81558752604622d, "", objArray8, (java.lang.Throwable) functionEvaluationException64);
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[100.0]");
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray20), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray20), "[]");
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[]");
        org.junit.Assert.assertNotNull(objArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray31), "[0.0, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray31), "[0.0, 1]");
        org.junit.Assert.assertNotNull(objArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray45), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray45), "[]");
        org.junit.Assert.assertNotNull(objArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray48), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray48), "[]");
        org.junit.Assert.assertNotNull(objArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray63), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray63), "[]");
    }

    @Test
    public void test06013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06013");
        double[] doubleArray2 = new double[] { (byte) 1, 100 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) (short) 100);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver6 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction3);
        double double10 = laguerreSolver6.solve((double) (-1L), 349.0d, (double) (short) 10);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction11 = laguerreSolver6.getPolynomialFunction();
        double double13 = polynomialFunction11.value((double) (short) 1);
        double double15 = polynomialFunction11.value(101.0d);
        int int16 = polynomialFunction11.degree();
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction17 = polynomialFunction11.derivative();
        double[] doubleArray18 = polynomialFunction11.getCoefficients();
        int int19 = polynomialFunction11.degree();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 10001.0d + "'", double5 == 10001.0d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + (-0.01d) + "'", double10 == (-0.01d));
        org.junit.Assert.assertNotNull(polynomialFunction11);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 101.0d + "'", double13 == 101.0d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 10101.0d + "'", double15 == 10101.0d);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(univariateRealFunction17);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
    }

    @Test
    public void test06014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06014");
        org.apache.commons.math.ConvergenceException convergenceException6 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.MaxIterationsExceededException: org.apache.commons.math.FunctionEvaluationException: ");
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException7 = new org.apache.commons.math.FunctionEvaluationException(Double.POSITIVE_INFINITY, (java.lang.Throwable) convergenceException6);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException8 = new org.apache.commons.math.FunctionEvaluationException(350.0d, "org.apache.commons.math.MaxIterationsExceededException: hi!", (java.lang.Throwable) convergenceException6);
        org.apache.commons.math.ConvergenceException convergenceException9 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.FunctionEvaluationException: org.apache.commons.math.FunctionEvaluationException: org.apache.commons.math.FunctionEvaluationException: ", (java.lang.Throwable) convergenceException6);
        java.lang.String str10 = convergenceException6.getPattern();
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException11 = new org.apache.commons.math.FunctionEvaluationException((double) (byte) 1, (java.lang.Throwable) convergenceException6);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException15 = new org.apache.commons.math.FunctionEvaluationException((double) (-1L), "org.apache.commons.math.MaxIterationsExceededException: ");
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException16 = new org.apache.commons.math.FunctionEvaluationException(10.0d, (java.lang.Throwable) functionEvaluationException15);
        functionEvaluationException11.addSuppressed((java.lang.Throwable) functionEvaluationException16);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "org.apache.commons.math.MaxIterationsExceededException: org.apache.commons.math.FunctionEvaluationException: " + "'", str10, "org.apache.commons.math.MaxIterationsExceededException: org.apache.commons.math.FunctionEvaluationException: ");
    }

    @Test
    public void test06015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06015");
        double[] doubleArray2 = new double[] { (byte) 1, 100 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) (short) 100);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver6 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction3);
        double double7 = laguerreSolver6.getAbsoluteAccuracy();
        laguerreSolver6.resetAbsoluteAccuracy();
        double[] doubleArray13 = new double[] { (byte) 1, 100 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction14 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray13);
        double double16 = polynomialFunction14.value((double) (short) 100);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver17 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction14);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction18 = laguerreSolver17.getPolynomialFunction();
        laguerreSolver17.resetRelativeAccuracy();
        double[] doubleArray25 = new double[] { 0L, '#', 100.0f, 0L, (-1.0d) };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction26 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray25);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction27 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray25);
        org.apache.commons.math.complex.Complex[] complexArray29 = laguerreSolver17.solveAll(doubleArray25, 101.0d);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException30 = new org.apache.commons.math.MaxIterationsExceededException((int) (byte) 1, "org.apache.commons.math.FunctionEvaluationException: ", (java.lang.Object[]) complexArray29);
        org.apache.commons.math.complex.Complex complex33 = new org.apache.commons.math.complex.Complex((double) 10L, (double) 'a');
        org.apache.commons.math.complex.Complex complex34 = laguerreSolver6.solve(complexArray29, complex33);
        org.apache.commons.math.complex.Complex complex35 = complex34.tanh();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 10001.0d + "'", double5 == 10001.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 1.0E-6d + "'", double7 == 1.0E-6d);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 10001.0d + "'", double16 == 10001.0d);
        org.junit.Assert.assertNotNull(polynomialFunction18);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[0.0, 35.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(complexArray29);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
    }

    @Test
    public void test06016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06016");
        java.lang.Object[] objArray13 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException14 = new org.apache.commons.math.ConvergenceException("", objArray13);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException15 = new org.apache.commons.math.MaxIterationsExceededException(0, "hi!", objArray13);
        org.apache.commons.math.ConvergenceException convergenceException17 = new org.apache.commons.math.ConvergenceException("");
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException18 = new org.apache.commons.math.FunctionEvaluationException((double) (short) 0, "hi!", objArray13, (java.lang.Throwable) convergenceException17);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException20 = new org.apache.commons.math.MaxIterationsExceededException((int) (short) 100);
        org.apache.commons.math.ConvergenceException convergenceException21 = new org.apache.commons.math.ConvergenceException("Maximal number of iterations ({0}) exceeded", objArray13, (java.lang.Throwable) maxIterationsExceededException20);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException22 = new org.apache.commons.math.FunctionEvaluationException((-1.0303676605150726E8d), "org.apache.commons.math.FunctionEvaluationException: Maximal number of iterations ({0}) exceeded", objArray13);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException23 = new org.apache.commons.math.FunctionEvaluationException((-8.808275266783596E15d), "org.apache.commons.math.FunctionEvaluationException: Evaluation failed for argument = 10,001", objArray13);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException24 = new org.apache.commons.math.FunctionEvaluationException((-196499.0d), "org.apache.commons.math.FunctionEvaluationException: Evaluation failed for argument = 52", objArray13);
        org.apache.commons.math.ConvergenceException convergenceException25 = new org.apache.commons.math.ConvergenceException("Evaluation failed for argument = {0}", objArray13);
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[]");
    }

    @Test
    public void test06017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06017");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex(0.0d, (double) 3);
        org.apache.commons.math.complex.Complex complex3 = complex2.conjugate();
        org.junit.Assert.assertNotNull(complex3);
    }

    @Test
    public void test06018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06018");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex1 = complex0.sqrt();
        boolean boolean2 = complex0.isNaN();
        org.apache.commons.math.complex.Complex complex3 = complex0.tanh();
        boolean boolean4 = complex3.isInfinite();
        boolean boolean5 = complex3.isInfinite();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test06019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06019");
        java.lang.Object[] objArray7 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException8 = new org.apache.commons.math.ConvergenceException("", objArray7);
        java.lang.Object[] objArray10 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException11 = new org.apache.commons.math.ConvergenceException("", objArray10);
        org.apache.commons.math.ConvergenceException convergenceException12 = new org.apache.commons.math.ConvergenceException("", objArray7, (java.lang.Throwable) convergenceException11);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException13 = new org.apache.commons.math.MaxIterationsExceededException((int) (short) 0, "org.apache.commons.math.FunctionEvaluationException: ", objArray7);
        java.lang.Object[] objArray20 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException21 = new org.apache.commons.math.ConvergenceException("", objArray20);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException22 = new org.apache.commons.math.FunctionEvaluationException((double) (short) 10, "hi!", objArray20);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException23 = new org.apache.commons.math.MaxIterationsExceededException((int) (byte) 0, "org.apache.commons.math.ConvergenceException: hi!", objArray20);
        java.lang.Object[] objArray30 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException31 = new org.apache.commons.math.ConvergenceException("", objArray30);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException32 = new org.apache.commons.math.FunctionEvaluationException((double) (short) 10, "hi!", objArray30);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException33 = new org.apache.commons.math.MaxIterationsExceededException((int) (byte) 0, "org.apache.commons.math.ConvergenceException: hi!", objArray30);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException34 = new org.apache.commons.math.FunctionEvaluationException(0.0d, (java.lang.Throwable) maxIterationsExceededException33);
        org.apache.commons.math.ConvergenceException convergenceException35 = new org.apache.commons.math.ConvergenceException("", objArray20, (java.lang.Throwable) functionEvaluationException34);
        org.apache.commons.math.ConvergenceException convergenceException36 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: Convergence failed", objArray7, (java.lang.Throwable) convergenceException35);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException37 = new org.apache.commons.math.FunctionEvaluationException(100.0d, "org.apache.commons.math.MaxIterationsExceededException: org.apache.commons.math.FunctionEvaluationException: ", (java.lang.Throwable) convergenceException36);
        java.lang.String str38 = functionEvaluationException37.getPattern();
        org.apache.commons.math.ConvergenceException convergenceException39 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) functionEvaluationException37);
        java.lang.String str40 = functionEvaluationException37.toString();
        org.junit.Assert.assertNotNull(objArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray7), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray7), "[]");
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray20), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray20), "[]");
        org.junit.Assert.assertNotNull(objArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray30), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray30), "[]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "org.apache.commons.math.MaxIterationsExceededException: org.apache.commons.math.FunctionEvaluationException: " + "'", str38, "org.apache.commons.math.MaxIterationsExceededException: org.apache.commons.math.FunctionEvaluationException: ");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "org.apache.commons.math.FunctionEvaluationException: org.apache.commons.math.MaxIterationsExceededException: org.apache.commons.math.FunctionEvaluationException: " + "'", str40, "org.apache.commons.math.FunctionEvaluationException: org.apache.commons.math.MaxIterationsExceededException: org.apache.commons.math.FunctionEvaluationException: ");
    }

    @Test
    public void test06020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06020");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex1 = complex0.cosh();
        org.apache.commons.math.complex.Complex complex2 = complex0.log();
        org.apache.commons.math.complex.Complex complex3 = complex0.sin();
        org.apache.commons.math.complex.Complex complex4 = complex0.log();
        org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex6 = complex5.sqrt();
        org.apache.commons.math.complex.Complex complex7 = complex0.divide(complex6);
        org.apache.commons.math.complex.Complex complex8 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex9 = complex8.cosh();
        double double10 = complex8.abs();
        org.apache.commons.math.complex.Complex complex11 = complex8.conjugate();
        org.apache.commons.math.complex.Complex complex12 = complex11.conjugate();
        org.apache.commons.math.complex.Complex complex13 = complex7.subtract(complex12);
        org.apache.commons.math.complex.Complex complex14 = complex7.exp();
        org.apache.commons.math.complex.Complex complex15 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex16 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex17 = complex16.sqrt();
        org.apache.commons.math.complex.Complex complex18 = complex17.sin();
        org.apache.commons.math.complex.Complex complex19 = complex15.pow(complex17);
        org.apache.commons.math.complex.Complex complex20 = complex19.asin();
        org.apache.commons.math.complex.Complex complex21 = complex20.atan();
        org.apache.commons.math.complex.Complex complex22 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex23 = complex22.cosh();
        boolean boolean24 = complex21.equals((java.lang.Object) complex22);
        org.apache.commons.math.complex.Complex complex25 = complex7.divide(complex22);
        org.apache.commons.math.complex.Complex complex26 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex27 = complex26.cosh();
        org.apache.commons.math.complex.Complex complex28 = complex27.acos();
        org.apache.commons.math.complex.Complex complex29 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex30 = complex29.cosh();
        org.apache.commons.math.complex.Complex complex31 = complex29.log();
        org.apache.commons.math.complex.Complex complex32 = complex29.sin();
        org.apache.commons.math.complex.Complex complex33 = complex32.tanh();
        org.apache.commons.math.complex.Complex complex34 = complex27.add(complex33);
        org.apache.commons.math.complex.Complex complex35 = complex34.exp();
        org.apache.commons.math.complex.Complex complex36 = complex7.multiply(complex35);
        double double37 = complex35.getImaginary();
        org.apache.commons.math.complex.Complex complex38 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex39 = complex38.cosh();
        double double40 = complex38.abs();
        org.apache.commons.math.complex.Complex complex41 = complex38.conjugate();
        org.apache.commons.math.complex.Complex complex42 = complex41.conjugate();
        org.apache.commons.math.complex.Complex complex43 = complex41.tanh();
        org.apache.commons.math.complex.Complex complex44 = complex43.tan();
        org.apache.commons.math.complex.Complex complex45 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex46 = complex45.cosh();
        double double47 = complex45.abs();
        org.apache.commons.math.complex.Complex complex48 = complex45.conjugate();
        org.apache.commons.math.complex.Complex complex49 = complex48.conjugate();
        org.apache.commons.math.complex.Complex complex50 = complex44.subtract(complex48);
        org.apache.commons.math.complex.Complex complex51 = complex48.negate();
        org.apache.commons.math.complex.Complex complex52 = complex48.tanh();
        org.apache.commons.math.complex.Complex complex53 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex54 = complex53.cosh();
        org.apache.commons.math.complex.Complex complex55 = complex53.log();
        org.apache.commons.math.complex.Complex complex56 = complex55.cos();
        double double57 = complex56.abs();
        org.apache.commons.math.complex.Complex complex58 = complex56.sqrt();
        org.apache.commons.math.complex.Complex complex59 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex60 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex61 = complex60.sqrt();
        org.apache.commons.math.complex.Complex complex62 = complex61.sin();
        org.apache.commons.math.complex.Complex complex63 = complex59.pow(complex61);
        org.apache.commons.math.complex.Complex complex64 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex65 = complex64.cosh();
        org.apache.commons.math.complex.Complex complex66 = complex64.log();
        org.apache.commons.math.complex.Complex complex67 = complex59.divide(complex66);
        org.apache.commons.math.complex.Complex complex68 = complex58.subtract(complex67);
        org.apache.commons.math.complex.Complex complex69 = complex58.conjugate();
        org.apache.commons.math.complex.Complex complex70 = complex58.cos();
        org.apache.commons.math.complex.Complex complex71 = complex70.negate();
        boolean boolean72 = complex48.equals((java.lang.Object) complex70);
        org.apache.commons.math.complex.Complex complex73 = complex35.subtract(complex48);
        org.apache.commons.math.complex.Complex complex74 = complex48.sqrt();
        boolean boolean75 = complex48.isInfinite();
        org.apache.commons.math.complex.Complex complex76 = complex48.sinh();
        org.apache.commons.math.complex.Complex complex77 = complex48.acos();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + Double.POSITIVE_INFINITY + "'", double10 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertTrue(Double.isNaN(double37));
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + Double.POSITIVE_INFINITY + "'", double40 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + Double.POSITIVE_INFINITY + "'", double47 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertTrue(Double.isNaN(double57));
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertNotNull(complex76);
        org.junit.Assert.assertNotNull(complex77);
    }

    @Test
    public void test06021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06021");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex1 = complex0.cosh();
        org.apache.commons.math.complex.Complex complex2 = complex0.log();
        org.apache.commons.math.complex.Complex complex3 = complex0.sin();
        org.apache.commons.math.complex.Complex complex4 = complex3.tanh();
        org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex6 = complex5.cosh();
        org.apache.commons.math.complex.Complex complex7 = complex5.log();
        org.apache.commons.math.complex.Complex complex8 = complex5.sin();
        org.apache.commons.math.complex.Complex complex9 = complex5.log();
        org.apache.commons.math.complex.Complex complex10 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex11 = complex10.sqrt();
        org.apache.commons.math.complex.Complex complex12 = complex5.divide(complex11);
        org.apache.commons.math.complex.Complex complex13 = complex3.pow(complex5);
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex15 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex16 = complex15.sqrt();
        org.apache.commons.math.complex.Complex complex17 = complex16.sin();
        org.apache.commons.math.complex.Complex complex18 = complex14.pow(complex16);
        org.apache.commons.math.complex.Complex complex19 = complex18.asin();
        org.apache.commons.math.complex.Complex complex20 = complex18.tan();
        org.apache.commons.math.complex.Complex complex21 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex22 = complex21.cosh();
        double double23 = complex21.abs();
        org.apache.commons.math.complex.Complex complex24 = complex21.conjugate();
        org.apache.commons.math.complex.Complex complex25 = complex24.conjugate();
        boolean boolean26 = complex24.isInfinite();
        org.apache.commons.math.complex.Complex complex27 = complex24.asin();
        boolean boolean28 = complex24.isNaN();
        org.apache.commons.math.complex.Complex complex29 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex30 = complex29.cosh();
        org.apache.commons.math.complex.Complex complex31 = complex24.divide(complex29);
        org.apache.commons.math.complex.Complex complex32 = complex20.pow(complex29);
        org.apache.commons.math.complex.Complex complex33 = complex20.sinh();
        org.apache.commons.math.complex.Complex complex34 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex35 = complex34.cosh();
        double double36 = complex34.abs();
        org.apache.commons.math.complex.Complex complex37 = complex34.conjugate();
        org.apache.commons.math.complex.Complex complex38 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex39 = complex38.sqrt();
        boolean boolean40 = complex38.isNaN();
        org.apache.commons.math.complex.Complex complex41 = complex38.sin();
        org.apache.commons.math.complex.Complex complex42 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex43 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex44 = complex43.sqrt();
        org.apache.commons.math.complex.Complex complex45 = complex44.sin();
        org.apache.commons.math.complex.Complex complex46 = complex42.pow(complex44);
        org.apache.commons.math.complex.Complex complex47 = complex46.asin();
        org.apache.commons.math.complex.Complex complex48 = complex47.atan();
        boolean boolean49 = complex48.isInfinite();
        org.apache.commons.math.complex.Complex complex50 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex51 = complex48.subtract(complex50);
        org.apache.commons.math.complex.Complex complex52 = complex51.sin();
        org.apache.commons.math.complex.Complex complex53 = complex38.divide(complex52);
        org.apache.commons.math.complex.Complex complex54 = complex34.subtract(complex52);
        boolean boolean55 = complex54.isNaN();
        org.apache.commons.math.complex.Complex complex56 = complex33.subtract(complex54);
        org.apache.commons.math.complex.Complex complex57 = complex13.divide(complex54);
        org.apache.commons.math.complex.Complex complex58 = complex54.negate();
        org.apache.commons.math.complex.Complex complex59 = complex58.atan();
        double double60 = complex59.getImaginary();
        org.apache.commons.math.complex.Complex complex61 = complex59.cos();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + Double.POSITIVE_INFINITY + "'", double23 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + Double.POSITIVE_INFINITY + "'", double36 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertTrue(Double.isNaN(double60));
        org.junit.Assert.assertNotNull(complex61);
    }

    @Test
    public void test06022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06022");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) 100, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex3 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex4 = complex3.sqrt();
        org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex6 = complex5.cosh();
        double double7 = complex5.abs();
        org.apache.commons.math.complex.Complex complex8 = complex5.conjugate();
        org.apache.commons.math.complex.Complex complex9 = complex3.divide(complex8);
        org.apache.commons.math.complex.Complex complex10 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex11 = complex10.cosh();
        org.apache.commons.math.complex.Complex complex12 = complex10.log();
        org.apache.commons.math.complex.Complex complex13 = complex10.sin();
        org.apache.commons.math.complex.Complex complex14 = complex10.log();
        org.apache.commons.math.complex.Complex complex15 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex16 = complex15.sqrt();
        org.apache.commons.math.complex.Complex complex17 = complex10.divide(complex16);
        org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex19 = complex18.cosh();
        double double20 = complex18.abs();
        org.apache.commons.math.complex.Complex complex21 = complex18.conjugate();
        org.apache.commons.math.complex.Complex complex22 = complex21.conjugate();
        org.apache.commons.math.complex.Complex complex23 = complex17.subtract(complex22);
        org.apache.commons.math.complex.Complex complex24 = complex9.multiply(complex17);
        org.apache.commons.math.complex.Complex complex25 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex26 = complex25.cosh();
        org.apache.commons.math.complex.Complex complex27 = complex25.log();
        org.apache.commons.math.complex.Complex complex28 = complex27.cos();
        double double29 = complex28.abs();
        org.apache.commons.math.complex.Complex complex30 = complex28.sqrt();
        org.apache.commons.math.complex.Complex complex31 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex32 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex33 = complex32.sqrt();
        org.apache.commons.math.complex.Complex complex34 = complex33.sin();
        org.apache.commons.math.complex.Complex complex35 = complex31.pow(complex33);
        org.apache.commons.math.complex.Complex complex36 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex37 = complex36.cosh();
        org.apache.commons.math.complex.Complex complex38 = complex36.log();
        org.apache.commons.math.complex.Complex complex39 = complex31.divide(complex38);
        org.apache.commons.math.complex.Complex complex40 = complex30.subtract(complex39);
        org.apache.commons.math.complex.Complex complex41 = complex17.pow(complex30);
        org.apache.commons.math.complex.Complex complex42 = complex17.tanh();
        org.apache.commons.math.complex.Complex complex43 = complex42.tan();
        org.apache.commons.math.complex.Complex complex44 = complex2.add(complex42);
        org.apache.commons.math.complex.Complex complex45 = complex2.asin();
        org.apache.commons.math.complex.Complex complex46 = complex2.exp();
        double double47 = complex2.abs();
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + Double.POSITIVE_INFINITY + "'", double7 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + Double.POSITIVE_INFINITY + "'", double20 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 100.4987562112089d + "'", double47 == 100.4987562112089d);
    }

    @Test
    public void test06023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06023");
        double[] doubleArray2 = new double[] { (byte) -1, '#' };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) (byte) 10);
        double double7 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction8 = polynomialFunction3.derivative();
        double double10 = polynomialFunction3.value((-0.7853981633974483d));
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction11 = polynomialFunction3.derivative();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[-1.0, 35.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 349.0d + "'", double5 == 349.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 349.0d + "'", double7 == 349.0d);
        org.junit.Assert.assertNotNull(univariateRealFunction8);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + (-28.48893571891069d) + "'", double10 == (-28.48893571891069d));
        org.junit.Assert.assertNotNull(univariateRealFunction11);
    }

    @Test
    public void test06024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06024");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex1 = complex0.sqrt();
        org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex3 = complex2.cosh();
        double double4 = complex2.abs();
        org.apache.commons.math.complex.Complex complex5 = complex2.conjugate();
        org.apache.commons.math.complex.Complex complex6 = complex0.divide(complex5);
        org.apache.commons.math.complex.Complex complex7 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex8 = complex7.cosh();
        org.apache.commons.math.complex.Complex complex9 = complex7.log();
        org.apache.commons.math.complex.Complex complex10 = complex7.sin();
        org.apache.commons.math.complex.Complex complex11 = complex7.log();
        org.apache.commons.math.complex.Complex complex12 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex13 = complex12.sqrt();
        org.apache.commons.math.complex.Complex complex14 = complex7.divide(complex13);
        org.apache.commons.math.complex.Complex complex15 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex16 = complex15.cosh();
        double double17 = complex15.abs();
        org.apache.commons.math.complex.Complex complex18 = complex15.conjugate();
        org.apache.commons.math.complex.Complex complex19 = complex18.conjugate();
        org.apache.commons.math.complex.Complex complex20 = complex14.subtract(complex19);
        org.apache.commons.math.complex.Complex complex21 = complex6.multiply(complex14);
        boolean boolean22 = complex14.isInfinite();
        org.apache.commons.math.complex.Complex complex23 = complex14.negate();
        org.apache.commons.math.complex.Complex complex24 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex25 = complex24.cosh();
        double double26 = complex24.abs();
        org.apache.commons.math.complex.Complex complex27 = complex24.conjugate();
        org.apache.commons.math.complex.Complex complex28 = complex27.conjugate();
        boolean boolean29 = complex27.isInfinite();
        org.apache.commons.math.complex.Complex complex30 = complex27.sqrt();
        org.apache.commons.math.complex.Complex complex31 = complex14.add(complex30);
        org.apache.commons.math.complex.Complex complex32 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex33 = complex32.cosh();
        double double34 = complex32.abs();
        org.apache.commons.math.complex.Complex complex35 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex36 = complex35.cosh();
        double double37 = complex35.abs();
        org.apache.commons.math.complex.Complex complex38 = complex35.conjugate();
        org.apache.commons.math.complex.Complex complex39 = complex38.conjugate();
        org.apache.commons.math.complex.Complex complex40 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex41 = complex40.tan();
        org.apache.commons.math.complex.Complex complex42 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex43 = complex42.cosh();
        org.apache.commons.math.complex.Complex complex44 = complex43.acos();
        double double45 = complex43.getReal();
        boolean boolean46 = complex41.equals((java.lang.Object) complex43);
        org.apache.commons.math.complex.Complex complex47 = complex39.subtract(complex43);
        org.apache.commons.math.complex.Complex complex48 = complex43.exp();
        org.apache.commons.math.complex.Complex complex49 = complex32.divide(complex43);
        org.apache.commons.math.complex.Complex complex50 = complex32.tan();
        double double51 = complex32.abs();
        org.apache.commons.math.complex.Complex complex52 = complex14.subtract(complex32);
        org.apache.commons.math.complex.Complex complex53 = complex52.sin();
        org.apache.commons.math.complex.Complex complex54 = complex52.atan();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + Double.POSITIVE_INFINITY + "'", double4 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + Double.POSITIVE_INFINITY + "'", double17 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + Double.POSITIVE_INFINITY + "'", double26 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + Double.POSITIVE_INFINITY + "'", double34 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + Double.POSITIVE_INFINITY + "'", double37 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertTrue(Double.isNaN(double45));
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + Double.POSITIVE_INFINITY + "'", double51 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
    }

    @Test
    public void test06025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06025");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex1 = complex0.tan();
        org.apache.commons.math.complex.Complex complex2 = complex0.cos();
        org.apache.commons.math.complex.Complex complex3 = complex0.tanh();
        org.apache.commons.math.complex.Complex complex4 = complex0.log();
        org.apache.commons.math.complex.Complex complex5 = complex0.atan();
        org.apache.commons.math.complex.Complex complex6 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex7 = complex6.cosh();
        org.apache.commons.math.complex.Complex complex8 = complex6.log();
        org.apache.commons.math.complex.Complex complex9 = complex8.cos();
        double double10 = complex9.abs();
        org.apache.commons.math.complex.Complex complex11 = complex9.sqrt();
        org.apache.commons.math.complex.Complex complex12 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex14 = complex13.sqrt();
        org.apache.commons.math.complex.Complex complex15 = complex14.sin();
        org.apache.commons.math.complex.Complex complex16 = complex12.pow(complex14);
        org.apache.commons.math.complex.Complex complex17 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex18 = complex17.cosh();
        org.apache.commons.math.complex.Complex complex19 = complex17.log();
        org.apache.commons.math.complex.Complex complex20 = complex12.divide(complex19);
        org.apache.commons.math.complex.Complex complex21 = complex11.subtract(complex20);
        org.apache.commons.math.complex.Complex complex22 = complex11.conjugate();
        org.apache.commons.math.complex.Complex complex23 = complex22.cosh();
        org.apache.commons.math.complex.Complex complex24 = complex5.pow(complex22);
        org.apache.commons.math.complex.Complex complex25 = complex5.sqrt1z();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
    }

    @Test
    public void test06026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06026");
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException1 = new org.apache.commons.math.MaxIterationsExceededException((int) '#');
        int int2 = maxIterationsExceededException1.getMaxIterations();
        int int3 = maxIterationsExceededException1.getMaxIterations();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 35 + "'", int2 == 35);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 35 + "'", int3 == 35);
    }

    @Test
    public void test06027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06027");
        java.lang.Object[] objArray11 = new java.lang.Object[] { 0.0f, (short) 1 };
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException12 = new org.apache.commons.math.MaxIterationsExceededException(100, "", objArray11);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException13 = new org.apache.commons.math.FunctionEvaluationException(35.0d, "hi!", objArray11);
        java.lang.Throwable throwable14 = null;
        org.apache.commons.math.ConvergenceException convergenceException15 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.MaxIterationsExceededException: org.apache.commons.math.FunctionEvaluationException: ", objArray11, throwable14);
        org.apache.commons.math.ConvergenceException convergenceException16 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: hi!", objArray11);
        java.lang.Object[] objArray29 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException30 = new org.apache.commons.math.ConvergenceException("", objArray29);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException31 = new org.apache.commons.math.MaxIterationsExceededException(0, "hi!", objArray29);
        org.apache.commons.math.ConvergenceException convergenceException33 = new org.apache.commons.math.ConvergenceException("");
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException34 = new org.apache.commons.math.FunctionEvaluationException((double) (short) 0, "hi!", objArray29, (java.lang.Throwable) convergenceException33);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException36 = new org.apache.commons.math.MaxIterationsExceededException((int) (short) 100);
        org.apache.commons.math.ConvergenceException convergenceException37 = new org.apache.commons.math.ConvergenceException("Maximal number of iterations ({0}) exceeded", objArray29, (java.lang.Throwable) maxIterationsExceededException36);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException38 = new org.apache.commons.math.FunctionEvaluationException((-1.0303676605150726E8d), "org.apache.commons.math.FunctionEvaluationException: Maximal number of iterations ({0}) exceeded", objArray29);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException39 = new org.apache.commons.math.FunctionEvaluationException((-8.808275266783596E15d), "org.apache.commons.math.FunctionEvaluationException: Evaluation failed for argument = 10,001", objArray29);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException40 = new org.apache.commons.math.FunctionEvaluationException((-196499.0d), "org.apache.commons.math.FunctionEvaluationException: Evaluation failed for argument = 52", objArray29);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException41 = new org.apache.commons.math.FunctionEvaluationException((double) 4, "org.apache.commons.math.MaxIterationsExceededException: org.apache.commons.math.FunctionEvaluationException: ", objArray11, (java.lang.Throwable) functionEvaluationException40);
        org.apache.commons.math.ConvergenceException convergenceException42 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: Evaluation failed for argument = 52", objArray11);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[0.0, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[0.0, 1]");
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray29), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray29), "[]");
    }

    @Test
    public void test06028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06028");
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException1 = new org.apache.commons.math.FunctionEvaluationException(Double.POSITIVE_INFINITY);
        org.apache.commons.math.ConvergenceException convergenceException2 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) functionEvaluationException1);
        org.apache.commons.math.ConvergenceException convergenceException3 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) functionEvaluationException1);
        java.lang.String str4 = functionEvaluationException1.toString();
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u221e" + "'", str4, "\u221e");
    }

    @Test
    public void test06029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06029");
        java.lang.Object[] objArray16 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException17 = new org.apache.commons.math.ConvergenceException("", objArray16);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException18 = new org.apache.commons.math.MaxIterationsExceededException(0, "hi!", objArray16);
        org.apache.commons.math.ConvergenceException convergenceException20 = new org.apache.commons.math.ConvergenceException("");
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException21 = new org.apache.commons.math.FunctionEvaluationException((double) (short) 0, "hi!", objArray16, (java.lang.Throwable) convergenceException20);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException22 = new org.apache.commons.math.MaxIterationsExceededException((int) (byte) 100, "", objArray16);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException23 = new org.apache.commons.math.FunctionEvaluationException(1.0d, "", objArray16);
        java.lang.Object[] objArray33 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException34 = new org.apache.commons.math.ConvergenceException("", objArray33);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException35 = new org.apache.commons.math.MaxIterationsExceededException(0, "hi!", objArray33);
        org.apache.commons.math.ConvergenceException convergenceException37 = new org.apache.commons.math.ConvergenceException("");
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException38 = new org.apache.commons.math.FunctionEvaluationException((double) (short) 0, "hi!", objArray33, (java.lang.Throwable) convergenceException37);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException39 = new org.apache.commons.math.MaxIterationsExceededException((int) (byte) 100, "", objArray33);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException40 = new org.apache.commons.math.FunctionEvaluationException(1.0d, "", objArray33);
        org.apache.commons.math.ConvergenceException convergenceException41 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.MaxIterationsExceededException: ", objArray16, (java.lang.Throwable) functionEvaluationException40);
        java.lang.Throwable[] throwableArray42 = functionEvaluationException40.getSuppressed();
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException43 = new org.apache.commons.math.FunctionEvaluationException((double) 100.0f, "org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: Convergence failed", (java.lang.Object[]) throwableArray42);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException44 = new org.apache.commons.math.FunctionEvaluationException((-0.0d), "org.apache.commons.math.ConvergenceException: org.apache.commons.math.MaxIterationsExceededException: ", (java.lang.Object[]) throwableArray42);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException45 = new org.apache.commons.math.FunctionEvaluationException(13403.310093999602d, "org.apache.commons.math.MaxIterationsExceededException: org.apache.commons.math.FunctionEvaluationException: org.apache.commons.math.FunctionEvaluationException: ", (java.lang.Object[]) throwableArray42);
        double double46 = functionEvaluationException45.getArgument();
        org.junit.Assert.assertNotNull(objArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray16), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray16), "[]");
        org.junit.Assert.assertNotNull(objArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray33), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray33), "[]");
        org.junit.Assert.assertNotNull(throwableArray42);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 13403.310093999602d + "'", double46 == 13403.310093999602d);
    }

    @Test
    public void test06030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06030");
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException2 = new org.apache.commons.math.FunctionEvaluationException((double) (byte) 0, "org.apache.commons.math.FunctionEvaluationException: Evaluation failed for argument = -161");
    }

    @Test
    public void test06031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06031");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex1 = complex0.cosh();
        org.apache.commons.math.complex.Complex complex2 = complex0.log();
        double double3 = complex0.getImaginary();
        double double4 = complex0.getImaginary();
        org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex6 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex7 = complex6.sqrt();
        org.apache.commons.math.complex.Complex complex8 = complex7.sin();
        org.apache.commons.math.complex.Complex complex9 = complex5.pow(complex7);
        org.apache.commons.math.complex.Complex complex10 = complex9.asin();
        org.apache.commons.math.complex.Complex complex11 = complex10.atan();
        boolean boolean12 = complex11.isInfinite();
        org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex14 = complex11.subtract(complex13);
        org.apache.commons.math.complex.Complex complex15 = complex14.sqrt();
        org.apache.commons.math.complex.Complex complex16 = complex0.divide(complex15);
        org.apache.commons.math.complex.Complex complex17 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex18 = complex17.cosh();
        double double19 = complex17.abs();
        org.apache.commons.math.complex.Complex complex20 = complex17.conjugate();
        org.apache.commons.math.complex.Complex complex21 = complex20.conjugate();
        org.apache.commons.math.complex.Complex complex22 = complex20.tanh();
        org.apache.commons.math.complex.Complex complex23 = complex22.tan();
        org.apache.commons.math.complex.Complex complex24 = complex23.conjugate();
        org.apache.commons.math.complex.Complex complex25 = complex24.cos();
        org.apache.commons.math.complex.Complex complex26 = complex25.exp();
        org.apache.commons.math.complex.Complex complex27 = complex25.sqrt();
        org.apache.commons.math.complex.Complex complex28 = complex16.add(complex25);
        org.apache.commons.math.complex.Complex complex29 = complex25.sqrt();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + Double.POSITIVE_INFINITY + "'", double3 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + Double.POSITIVE_INFINITY + "'", double4 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + Double.POSITIVE_INFINITY + "'", double19 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
    }

    @Test
    public void test06032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06032");
        java.lang.Object[] objArray4 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException5 = new org.apache.commons.math.ConvergenceException("", objArray4);
        java.lang.Object[] objArray7 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException8 = new org.apache.commons.math.ConvergenceException("", objArray7);
        org.apache.commons.math.ConvergenceException convergenceException9 = new org.apache.commons.math.ConvergenceException("", objArray4, (java.lang.Throwable) convergenceException8);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException10 = new org.apache.commons.math.FunctionEvaluationException(0.0d, "", (java.lang.Throwable) convergenceException9);
        java.lang.Object[] objArray19 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException20 = new org.apache.commons.math.ConvergenceException("", objArray19);
        java.lang.Object[] objArray22 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException23 = new org.apache.commons.math.ConvergenceException("", objArray22);
        org.apache.commons.math.ConvergenceException convergenceException24 = new org.apache.commons.math.ConvergenceException("", objArray19, (java.lang.Throwable) convergenceException23);
        org.apache.commons.math.ConvergenceException convergenceException25 = new org.apache.commons.math.ConvergenceException("", objArray19);
        org.apache.commons.math.ConvergenceException convergenceException26 = new org.apache.commons.math.ConvergenceException("hi!", objArray19);
        java.lang.Object[] objArray27 = convergenceException26.getArguments();
        java.lang.Throwable throwable28 = null;
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException29 = new org.apache.commons.math.FunctionEvaluationException((double) (byte) 0, "org.apache.commons.math.ConvergenceException: ", objArray27, throwable28);
        java.lang.Object[] objArray31 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException32 = new org.apache.commons.math.ConvergenceException("", objArray31);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException33 = new org.apache.commons.math.FunctionEvaluationException((double) (byte) 0, "Evaluation failed for argument = {0}", objArray27, (java.lang.Throwable) convergenceException32);
        functionEvaluationException10.addSuppressed((java.lang.Throwable) functionEvaluationException33);
        java.lang.String str35 = functionEvaluationException33.toString();
        org.junit.Assert.assertNotNull(objArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray4), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray4), "[]");
        org.junit.Assert.assertNotNull(objArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray7), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray7), "[]");
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[]");
        org.junit.Assert.assertNotNull(objArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray22), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray22), "[]");
        org.junit.Assert.assertNotNull(objArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray27), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray27), "[]");
        org.junit.Assert.assertNotNull(objArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray31), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray31), "[]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "org.apache.commons.math.FunctionEvaluationException: Evaluation failed for argument = {0}" + "'", str35, "org.apache.commons.math.FunctionEvaluationException: Evaluation failed for argument = {0}");
    }

    @Test
    public void test06033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06033");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex1 = complex0.cosh();
        double double2 = complex0.abs();
        org.apache.commons.math.complex.Complex complex3 = complex0.conjugate();
        org.apache.commons.math.complex.Complex complex4 = complex3.conjugate();
        org.apache.commons.math.complex.Complex complex5 = complex3.tanh();
        org.apache.commons.math.complex.Complex complex6 = complex5.sqrt();
        org.apache.commons.math.complex.Complex complex7 = complex5.conjugate();
        org.apache.commons.math.complex.Complex complex8 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex9 = complex8.cosh();
        double double10 = complex8.abs();
        org.apache.commons.math.complex.Complex complex11 = complex8.conjugate();
        org.apache.commons.math.complex.Complex complex12 = complex11.conjugate();
        org.apache.commons.math.complex.Complex complex13 = complex11.tanh();
        org.apache.commons.math.complex.Complex complex14 = complex11.asin();
        org.apache.commons.math.complex.Complex complex15 = complex14.exp();
        org.apache.commons.math.complex.Complex complex16 = complex5.subtract(complex14);
        org.apache.commons.math.complex.Complex complex17 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex18 = complex17.sqrt();
        org.apache.commons.math.complex.Complex complex19 = complex18.sin();
        org.apache.commons.math.complex.Complex complex20 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex21 = complex20.sqrt();
        org.apache.commons.math.complex.Complex complex22 = complex21.sin();
        org.apache.commons.math.complex.Complex complex23 = complex18.multiply(complex21);
        org.apache.commons.math.complex.Complex complex24 = complex21.negate();
        org.apache.commons.math.complex.Complex complex25 = complex24.sin();
        org.apache.commons.math.complex.Complex complex26 = complex5.add(complex25);
        org.apache.commons.math.complex.Complex complex27 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex28 = complex27.exp();
        org.apache.commons.math.complex.Complex complex29 = complex27.negate();
        org.apache.commons.math.complex.Complex complex30 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex31 = complex30.cosh();
        double double32 = complex30.abs();
        org.apache.commons.math.complex.Complex complex33 = complex30.conjugate();
        org.apache.commons.math.complex.Complex complex34 = complex33.conjugate();
        org.apache.commons.math.complex.Complex complex35 = complex33.tanh();
        org.apache.commons.math.complex.Complex complex36 = complex35.tan();
        org.apache.commons.math.complex.Complex complex37 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex38 = complex37.cosh();
        double double39 = complex37.abs();
        org.apache.commons.math.complex.Complex complex40 = complex37.conjugate();
        org.apache.commons.math.complex.Complex complex41 = complex40.conjugate();
        org.apache.commons.math.complex.Complex complex42 = complex36.subtract(complex40);
        org.apache.commons.math.complex.Complex complex43 = complex40.negate();
        java.lang.Object[] objArray47 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException48 = new org.apache.commons.math.ConvergenceException("", objArray47);
        java.lang.Object[] objArray53 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException54 = new org.apache.commons.math.ConvergenceException("", objArray53);
        java.lang.Object[] objArray56 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException57 = new org.apache.commons.math.ConvergenceException("", objArray56);
        org.apache.commons.math.ConvergenceException convergenceException58 = new org.apache.commons.math.ConvergenceException("", objArray53, (java.lang.Throwable) convergenceException57);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException60 = new org.apache.commons.math.FunctionEvaluationException((double) 100);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException61 = new org.apache.commons.math.FunctionEvaluationException(100.0d, "org.apache.commons.math.ConvergenceException: hi!", objArray53, (java.lang.Throwable) functionEvaluationException60);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException62 = new org.apache.commons.math.FunctionEvaluationException((double) '#', "", objArray47, (java.lang.Throwable) functionEvaluationException61);
        java.lang.String str63 = functionEvaluationException62.getPattern();
        boolean boolean64 = complex43.equals((java.lang.Object) functionEvaluationException62);
        double double65 = complex43.getReal();
        org.apache.commons.math.complex.Complex complex66 = complex43.exp();
        org.apache.commons.math.complex.Complex complex67 = complex66.acos();
        org.apache.commons.math.complex.Complex complex68 = complex29.subtract(complex67);
        org.apache.commons.math.complex.Complex complex69 = complex25.subtract(complex68);
        double double70 = complex69.getReal();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + Double.POSITIVE_INFINITY + "'", double2 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + Double.POSITIVE_INFINITY + "'", double10 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + Double.POSITIVE_INFINITY + "'", double32 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + Double.POSITIVE_INFINITY + "'", double39 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(objArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray47), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray47), "[]");
        org.junit.Assert.assertNotNull(objArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray53), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray53), "[]");
        org.junit.Assert.assertNotNull(objArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray56), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray56), "[]");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "" + "'", str63, "");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + Double.NEGATIVE_INFINITY + "'", double65 == Double.NEGATIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertTrue(Double.isNaN(double70));
    }

    @Test
    public void test06034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06034");
        double[] doubleArray5 = new double[] { 0L, '#', 100.0f, 0L, (-1.0d) };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray5);
        int int7 = polynomialFunction6.degree();
        int int8 = polynomialFunction6.degree();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction9 = polynomialFunction6.polynomialDerivative();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction10 = polynomialFunction9.polynomialDerivative();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction11 = polynomialFunction9.polynomialDerivative();
        double double13 = polynomialFunction9.value(3.573947685493632E41d);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[0.0, 35.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 4 + "'", int7 == 4);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 4 + "'", int8 == 4);
        org.junit.Assert.assertNotNull(polynomialFunction9);
        org.junit.Assert.assertNotNull(polynomialFunction10);
        org.junit.Assert.assertNotNull(polynomialFunction11);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + (-1.8260159415627717E125d) + "'", double13 == (-1.8260159415627717E125d));
    }

    @Test
    public void test06035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06035");
        double[] doubleArray2 = new double[] { (byte) -1, '#' };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction4 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction5 = polynomialFunction4.derivative();
        int int6 = polynomialFunction4.degree();
        int int7 = polynomialFunction4.degree();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction8 = polynomialFunction4.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver9 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction8);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[-1.0, 35.0]");
        org.junit.Assert.assertNotNull(polynomialFunction4);
        org.junit.Assert.assertNotNull(univariateRealFunction5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(polynomialFunction8);
    }

    @Test
    public void test06036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06036");
        double[] doubleArray2 = new double[] { (byte) 1, 100 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) (short) 100);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver6 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction3);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction7 = laguerreSolver6.getPolynomialFunction();
        double double8 = laguerreSolver6.getAbsoluteAccuracy();
        double[] doubleArray14 = new double[] { 0L, '#', 100.0f, 0L, (-1.0d) };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction15 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray14);
        org.apache.commons.math.complex.Complex[] complexArray17 = laguerreSolver6.solveAll(doubleArray14, 10001.0d);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction18 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray14);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction19 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray14);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver20 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction19);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction21 = polynomialFunction19.polynomialDerivative();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction22 = polynomialFunction19.polynomialDerivative();
        double double24 = polynomialFunction22.value(349901.0d);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 10001.0d + "'", double5 == 10001.0d);
        org.junit.Assert.assertNotNull(polynomialFunction7);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 1.0E-6d + "'", double8 == 1.0E-6d);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[0.0, 35.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(complexArray17);
        org.junit.Assert.assertNotNull(polynomialFunction21);
        org.junit.Assert.assertNotNull(polynomialFunction22);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + (-1.7135451109033856E17d) + "'", double24 == (-1.7135451109033856E17d));
    }

    @Test
    public void test06037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06037");
        org.apache.commons.math.ConvergenceException convergenceException1 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.FunctionEvaluationException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.FunctionEvaluationException: org.apache.commons.math.ConvergenceException: Convergence failed");
    }

    @Test
    public void test06038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06038");
        double[] doubleArray2 = new double[] { (byte) 1, 100 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) (short) 100);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver6 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction3);
        double double10 = laguerreSolver6.solve((double) (-1L), 349.0d, (double) (short) 10);
        laguerreSolver6.setMaximalIterationCount((int) '#');
        laguerreSolver6.setMaximalIterationCount((int) ' ');
        laguerreSolver6.resetAbsoluteAccuracy();
        laguerreSolver6.setFunctionValueAccuracy((-161.0d));
        laguerreSolver6.setMaximalIterationCount((int) (short) 10);
        laguerreSolver6.setRelativeAccuracy(1.0E-6d);
        laguerreSolver6.resetRelativeAccuracy();
        double[] doubleArray25 = new double[] { (byte) 1, 100 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction26 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray25);
        double[] doubleArray27 = polynomialFunction26.getCoefficients();
        org.apache.commons.math.complex.Complex[] complexArray29 = laguerreSolver6.solveAll(doubleArray27, 1.0300000099E10d);
        double[] doubleArray32 = new double[] { (byte) 1, 100 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction33 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray32);
        double double35 = polynomialFunction33.value((double) (short) 100);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver36 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction33);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction37 = laguerreSolver36.getPolynomialFunction();
        double double38 = laguerreSolver36.getAbsoluteAccuracy();
        laguerreSolver36.setAbsoluteAccuracy(Double.NEGATIVE_INFINITY);
        laguerreSolver36.setFunctionValueAccuracy((double) (byte) 10);
        double[] doubleArray45 = new double[] { (byte) 1, 100 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction46 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray45);
        double double48 = polynomialFunction46.value((double) (short) 100);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver49 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction46);
        double double53 = laguerreSolver49.solve((double) (-1L), 349.0d, (double) (short) 10);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction54 = laguerreSolver49.getPolynomialFunction();
        double double56 = polynomialFunction54.value((double) (short) 1);
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction57 = polynomialFunction54.derivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver58 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction54);
        int int59 = polynomialFunction54.degree();
        double double61 = polynomialFunction54.value((double) '4');
        double[] doubleArray62 = polynomialFunction54.getCoefficients();
        org.apache.commons.math.complex.Complex[] complexArray64 = laguerreSolver36.solveAll(doubleArray62, 1.0000000000001d);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.complex.Complex[] complexArray66 = laguerreSolver6.solveAll(doubleArray62, (-1.0920036681097296E52d));
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.MaxIterationsExceededException; message: Maximal number of iterations (10) exceeded");
        } catch (org.apache.commons.math.MaxIterationsExceededException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 10001.0d + "'", double5 == 10001.0d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + (-0.01d) + "'", double10 == (-0.01d));
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(complexArray29);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 10001.0d + "'", double35 == 10001.0d);
        org.junit.Assert.assertNotNull(polynomialFunction37);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 1.0E-6d + "'", double38 == 1.0E-6d);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 10001.0d + "'", double48 == 10001.0d);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + (-0.01d) + "'", double53 == (-0.01d));
        org.junit.Assert.assertNotNull(polynomialFunction54);
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 101.0d + "'", double56 == 101.0d);
        org.junit.Assert.assertNotNull(univariateRealFunction57);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1 + "'", int59 == 1);
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 5201.0d + "'", double61 == 5201.0d);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(complexArray64);
    }

    @Test
    public void test06039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06039");
        java.lang.Object[] objArray11 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException12 = new org.apache.commons.math.ConvergenceException("", objArray11);
        java.lang.Object[] objArray14 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException15 = new org.apache.commons.math.ConvergenceException("", objArray14);
        org.apache.commons.math.ConvergenceException convergenceException16 = new org.apache.commons.math.ConvergenceException("", objArray11, (java.lang.Throwable) convergenceException15);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException17 = new org.apache.commons.math.MaxIterationsExceededException((int) (short) 0, "org.apache.commons.math.FunctionEvaluationException: ", objArray11);
        java.lang.Object[] objArray22 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException23 = new org.apache.commons.math.ConvergenceException("", objArray22);
        java.lang.Object[] objArray28 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException29 = new org.apache.commons.math.ConvergenceException("", objArray28);
        java.lang.Object[] objArray31 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException32 = new org.apache.commons.math.ConvergenceException("", objArray31);
        org.apache.commons.math.ConvergenceException convergenceException33 = new org.apache.commons.math.ConvergenceException("", objArray28, (java.lang.Throwable) convergenceException32);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException35 = new org.apache.commons.math.FunctionEvaluationException((double) 100);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException36 = new org.apache.commons.math.FunctionEvaluationException(100.0d, "org.apache.commons.math.ConvergenceException: hi!", objArray28, (java.lang.Throwable) functionEvaluationException35);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException37 = new org.apache.commons.math.FunctionEvaluationException((double) '#', "", objArray22, (java.lang.Throwable) functionEvaluationException36);
        java.lang.String str38 = functionEvaluationException37.getPattern();
        double double39 = functionEvaluationException37.getArgument();
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException40 = new org.apache.commons.math.FunctionEvaluationException((double) (byte) 0, (java.lang.Throwable) functionEvaluationException37);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException41 = new org.apache.commons.math.FunctionEvaluationException(349.0d, "org.apache.commons.math.ConvergenceException: hi!", objArray11, (java.lang.Throwable) functionEvaluationException37);
        java.lang.Throwable[] throwableArray42 = functionEvaluationException41.getSuppressed();
        org.apache.commons.math.ConvergenceException convergenceException44 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.MaxIterationsExceededException: ");
        org.apache.commons.math.ConvergenceException convergenceException45 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: Convergence failed", (java.lang.Object[]) throwableArray42, (java.lang.Throwable) convergenceException44);
        java.lang.Throwable throwable48 = null;
        org.apache.commons.math.ConvergenceException convergenceException49 = new org.apache.commons.math.ConvergenceException(throwable48);
        org.apache.commons.math.complex.Complex complex50 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex51 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex52 = complex51.sqrt();
        org.apache.commons.math.complex.Complex complex53 = complex52.sin();
        org.apache.commons.math.complex.Complex complex54 = complex50.pow(complex52);
        org.apache.commons.math.complex.Complex complex55 = complex54.asin();
        org.apache.commons.math.complex.Complex complex56 = complex54.tan();
        java.lang.Object[] objArray60 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException61 = new org.apache.commons.math.ConvergenceException("", objArray60);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException62 = new org.apache.commons.math.MaxIterationsExceededException(0, "hi!", objArray60);
        int int63 = maxIterationsExceededException62.getMaxIterations();
        boolean boolean64 = complex56.equals((java.lang.Object) maxIterationsExceededException62);
        java.lang.String str65 = maxIterationsExceededException62.getPattern();
        convergenceException49.addSuppressed((java.lang.Throwable) maxIterationsExceededException62);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException67 = new org.apache.commons.math.FunctionEvaluationException((double) (byte) 10, "", (java.lang.Throwable) convergenceException49);
        org.apache.commons.math.ConvergenceException convergenceException68 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.FunctionEvaluationException: Evaluation failed for argument = 10,001", (java.lang.Object[]) throwableArray42, (java.lang.Throwable) convergenceException49);
        org.apache.commons.math.ConvergenceException convergenceException76 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.MaxIterationsExceededException: org.apache.commons.math.FunctionEvaluationException: ");
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException77 = new org.apache.commons.math.FunctionEvaluationException(Double.POSITIVE_INFINITY, (java.lang.Throwable) convergenceException76);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException78 = new org.apache.commons.math.FunctionEvaluationException(350.0d, "org.apache.commons.math.MaxIterationsExceededException: hi!", (java.lang.Throwable) convergenceException76);
        java.lang.Object[] objArray79 = convergenceException76.getArguments();
        java.lang.Throwable throwable80 = null;
        org.apache.commons.math.ConvergenceException convergenceException81 = new org.apache.commons.math.ConvergenceException("Evaluation failed for argument = 100", objArray79, throwable80);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException82 = new org.apache.commons.math.MaxIterationsExceededException((int) '4', "org.apache.commons.math.ConvergenceException: org.apache.commons.math.FunctionEvaluationException: ", objArray79);
        java.lang.String str83 = maxIterationsExceededException82.getPattern();
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException84 = new org.apache.commons.math.FunctionEvaluationException((-1000.0d), "org.apache.commons.math.ConvergenceException: org.apache.commons.math.MaxIterationsExceededException: ", (java.lang.Object[]) throwableArray42, (java.lang.Throwable) maxIterationsExceededException82);
        org.apache.commons.math.ConvergenceException convergenceException85 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.FunctionEvaluationException: org.apache.commons.math.MaxIterationsExceededException: org.apache.commons.math.ConvergenceException: Evaluation failed for argument = {0}", (java.lang.Object[]) throwableArray42);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[]");
        org.junit.Assert.assertNotNull(objArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray14), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray14), "[]");
        org.junit.Assert.assertNotNull(objArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray22), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray22), "[]");
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[]");
        org.junit.Assert.assertNotNull(objArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray31), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray31), "[]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 35.0d + "'", double39 == 35.0d);
        org.junit.Assert.assertNotNull(throwableArray42);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(objArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray60), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray60), "[]");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "hi!" + "'", str65, "hi!");
        org.junit.Assert.assertNotNull(objArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray79), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray79), "[]");
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "org.apache.commons.math.ConvergenceException: org.apache.commons.math.FunctionEvaluationException: " + "'", str83, "org.apache.commons.math.ConvergenceException: org.apache.commons.math.FunctionEvaluationException: ");
    }

    @Test
    public void test06040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06040");
        double[] doubleArray2 = new double[] { (byte) 1, 100 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) (short) 100);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver6 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction3);
        double double10 = laguerreSolver6.solve((double) (-1L), 349.0d, (double) (short) 10);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction11 = laguerreSolver6.getPolynomialFunction();
        double double13 = polynomialFunction11.value((double) (short) 1);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver14 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction11);
        double double15 = laguerreSolver14.getRelativeAccuracy();
        // The following exception was thrown during execution in test generation
        try {
            double double18 = laguerreSolver14.solve(4.5126449834479465E48d, (-215599.0d));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Endpoints do not specify an interval: [4.5126449834479465E48,-215599.0]");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 10001.0d + "'", double5 == 10001.0d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + (-0.01d) + "'", double10 == (-0.01d));
        org.junit.Assert.assertNotNull(polynomialFunction11);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 101.0d + "'", double13 == 101.0d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 1.0E-14d + "'", double15 == 1.0E-14d);
    }

    @Test
    public void test06041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06041");
        double[] doubleArray2 = new double[] { (byte) -1, '#' };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction4 = polynomialFunction3.polynomialDerivative();
        double[] doubleArray5 = polynomialFunction3.getCoefficients();
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction6 = polynomialFunction3.derivative();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction7 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver8 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction3);
        double[] doubleArray11 = new double[] { (byte) 1, 100 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction12 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray11);
        double double14 = polynomialFunction12.value((double) (short) 100);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver15 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction12);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction16 = laguerreSolver15.getPolynomialFunction();
        double double17 = laguerreSolver15.getRelativeAccuracy();
        laguerreSolver15.resetRelativeAccuracy();
        double double19 = laguerreSolver15.getFunctionValueAccuracy();
        laguerreSolver15.resetRelativeAccuracy();
        laguerreSolver15.setMaximalIterationCount((int) (short) 10);
        double[] doubleArray25 = new double[] { (byte) 1, 100 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction26 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray25);
        double double28 = polynomialFunction26.value((double) (short) 100);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver29 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction26);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction30 = laguerreSolver29.getPolynomialFunction();
        double double31 = laguerreSolver29.getAbsoluteAccuracy();
        double[] doubleArray37 = new double[] { 0L, '#', 100.0f, 0L, (-1.0d) };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction38 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray37);
        org.apache.commons.math.complex.Complex[] complexArray40 = laguerreSolver29.solveAll(doubleArray37, 10001.0d);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction41 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray37);
        org.apache.commons.math.complex.Complex[] complexArray43 = laguerreSolver15.solveAll(doubleArray37, 349.0d);
        org.apache.commons.math.complex.Complex[] complexArray45 = laguerreSolver8.solveAll(doubleArray37, (-99.0d));
        double double46 = laguerreSolver8.getRelativeAccuracy();
        laguerreSolver8.resetFunctionValueAccuracy();
        int int48 = laguerreSolver8.getMaximalIterationCount();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[-1.0, 35.0]");
        org.junit.Assert.assertNotNull(polynomialFunction4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[-1.0, 35.0]");
        org.junit.Assert.assertNotNull(univariateRealFunction6);
        org.junit.Assert.assertNotNull(polynomialFunction7);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 10001.0d + "'", double14 == 10001.0d);
        org.junit.Assert.assertNotNull(polynomialFunction16);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 1.0E-14d + "'", double17 == 1.0E-14d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 1.0E-15d + "'", double19 == 1.0E-15d);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 10001.0d + "'", double28 == 10001.0d);
        org.junit.Assert.assertNotNull(polynomialFunction30);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 1.0E-6d + "'", double31 == 1.0E-6d);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[0.0, 35.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(complexArray40);
        org.junit.Assert.assertNotNull(complexArray43);
        org.junit.Assert.assertNotNull(complexArray45);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 1.0E-14d + "'", double46 == 1.0E-14d);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 100 + "'", int48 == 100);
    }

    @Test
    public void test06042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06042");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex1 = complex0.cosh();
        double double2 = complex0.abs();
        org.apache.commons.math.complex.Complex complex3 = complex0.conjugate();
        boolean boolean4 = complex0.isNaN();
        boolean boolean5 = complex0.isInfinite();
        org.apache.commons.math.complex.Complex complex6 = complex0.log();
        org.apache.commons.math.complex.Complex complex7 = complex6.sqrt1z();
        org.apache.commons.math.complex.Complex complex8 = complex6.sin();
        org.apache.commons.math.complex.Complex complex9 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex10 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex11 = complex9.pow(complex10);
        org.apache.commons.math.complex.Complex complex12 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex13 = complex12.cosh();
        org.apache.commons.math.complex.Complex complex14 = complex12.log();
        org.apache.commons.math.complex.Complex complex15 = complex12.sin();
        org.apache.commons.math.complex.Complex complex16 = complex12.log();
        org.apache.commons.math.complex.Complex complex17 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex19 = complex18.sqrt();
        org.apache.commons.math.complex.Complex complex20 = complex19.sin();
        org.apache.commons.math.complex.Complex complex21 = complex17.pow(complex19);
        org.apache.commons.math.complex.Complex complex22 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex23 = complex22.cosh();
        org.apache.commons.math.complex.Complex complex24 = complex22.log();
        org.apache.commons.math.complex.Complex complex25 = complex17.divide(complex24);
        org.apache.commons.math.complex.Complex complex26 = complex12.subtract(complex24);
        org.apache.commons.math.complex.Complex complex27 = complex26.cosh();
        org.apache.commons.math.complex.Complex complex28 = complex10.multiply(complex26);
        org.apache.commons.math.complex.Complex complex29 = complex28.conjugate();
        org.apache.commons.math.complex.Complex complex30 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex31 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex32 = complex31.sqrt();
        org.apache.commons.math.complex.Complex complex33 = complex32.sin();
        org.apache.commons.math.complex.Complex complex34 = complex30.pow(complex32);
        org.apache.commons.math.complex.Complex complex35 = complex34.asin();
        org.apache.commons.math.complex.Complex complex36 = complex35.atan();
        boolean boolean37 = complex36.isInfinite();
        org.apache.commons.math.complex.Complex complex38 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex39 = complex36.subtract(complex38);
        org.apache.commons.math.complex.Complex complex40 = complex39.sqrt();
        org.apache.commons.math.complex.Complex complex41 = complex39.sqrt1z();
        org.apache.commons.math.complex.Complex complex42 = complex39.cos();
        org.apache.commons.math.complex.Complex complex43 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex44 = complex43.cosh();
        org.apache.commons.math.complex.Complex complex45 = complex43.log();
        org.apache.commons.math.complex.Complex complex46 = complex43.sin();
        boolean boolean47 = complex43.isNaN();
        org.apache.commons.math.complex.Complex complex48 = complex39.multiply(complex43);
        org.apache.commons.math.complex.Complex complex49 = complex29.multiply(complex39);
        org.apache.commons.math.complex.Complex complex50 = complex39.negate();
        org.apache.commons.math.complex.Complex complex51 = complex50.acos();
        org.apache.commons.math.complex.Complex complex52 = complex6.add(complex50);
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + Double.POSITIVE_INFINITY + "'", double2 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
    }

    @Test
    public void test06043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06043");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex1 = complex0.cosh();
        double double2 = complex0.abs();
        org.apache.commons.math.complex.Complex complex3 = complex0.conjugate();
        org.apache.commons.math.complex.Complex complex4 = complex3.conjugate();
        boolean boolean5 = complex3.isInfinite();
        org.apache.commons.math.complex.Complex complex6 = complex3.cos();
        org.apache.commons.math.complex.Complex complex7 = complex3.conjugate();
        org.apache.commons.math.complex.Complex complex8 = complex3.sin();
        boolean boolean9 = complex3.isNaN();
        org.apache.commons.math.complex.Complex complex10 = complex3.atan();
        org.apache.commons.math.complex.Complex complex11 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex12 = complex11.cosh();
        org.apache.commons.math.complex.Complex complex13 = complex12.acos();
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex15 = complex14.cosh();
        org.apache.commons.math.complex.Complex complex16 = complex14.log();
        org.apache.commons.math.complex.Complex complex17 = complex14.sin();
        org.apache.commons.math.complex.Complex complex18 = complex17.tanh();
        org.apache.commons.math.complex.Complex complex19 = complex12.add(complex18);
        org.apache.commons.math.complex.Complex complex20 = complex18.acos();
        org.apache.commons.math.complex.Complex complex21 = complex18.sin();
        org.apache.commons.math.complex.Complex complex22 = complex3.subtract(complex21);
        org.apache.commons.math.complex.Complex complex23 = complex22.exp();
        org.apache.commons.math.complex.Complex complex24 = complex23.atan();
        boolean boolean25 = complex23.isNaN();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + Double.POSITIVE_INFINITY + "'", double2 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
    }

    @Test
    public void test06044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06044");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex1 = complex0.cosh();
        org.apache.commons.math.complex.Complex complex2 = complex1.acos();
        double double3 = complex1.getReal();
        org.apache.commons.math.complex.Complex complex4 = complex1.sqrt();
        org.apache.commons.math.complex.Complex complex5 = complex4.tan();
        org.apache.commons.math.complex.Complex complex6 = complex4.exp();
        org.apache.commons.math.complex.Complex complex7 = complex6.negate();
        org.apache.commons.math.complex.Complex complex8 = complex6.sinh();
        org.apache.commons.math.complex.Complex complex9 = complex8.log();
        boolean boolean10 = complex9.isInfinite();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test06045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06045");
        double[] doubleArray2 = new double[] { (byte) -1, '#' };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction4 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver5 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction4);
        laguerreSolver5.setAbsoluteAccuracy(0.0d);
        laguerreSolver5.resetRelativeAccuracy();
        laguerreSolver5.setAbsoluteAccuracy((double) 0.0f);
        double double11 = laguerreSolver5.getRelativeAccuracy();
        laguerreSolver5.setMaximalIterationCount(4);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[-1.0, 35.0]");
        org.junit.Assert.assertNotNull(polynomialFunction4);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 1.0E-14d + "'", double11 == 1.0E-14d);
    }

    @Test
    public void test06046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06046");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex1 = complex0.cosh();
        double double2 = complex0.abs();
        org.apache.commons.math.complex.Complex complex3 = complex0.conjugate();
        org.apache.commons.math.complex.Complex complex4 = complex3.conjugate();
        boolean boolean5 = complex3.isInfinite();
        org.apache.commons.math.complex.Complex complex6 = complex3.cosh();
        org.apache.commons.math.complex.Complex complex7 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex8 = complex7.cosh();
        org.apache.commons.math.complex.Complex complex9 = complex7.log();
        org.apache.commons.math.complex.Complex complex10 = complex9.cos();
        org.apache.commons.math.complex.Complex complex11 = complex9.exp();
        boolean boolean12 = complex9.isNaN();
        org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex14 = complex13.cosh();
        double double15 = complex13.abs();
        org.apache.commons.math.complex.Complex complex16 = complex13.conjugate();
        org.apache.commons.math.complex.Complex complex17 = complex16.conjugate();
        org.apache.commons.math.complex.Complex complex18 = complex16.tanh();
        org.apache.commons.math.complex.Complex complex19 = complex9.multiply(complex16);
        org.apache.commons.math.complex.Complex complex20 = complex9.cos();
        org.apache.commons.math.complex.Complex complex21 = complex3.add(complex9);
        org.apache.commons.math.complex.Complex complex22 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex23 = complex22.cosh();
        org.apache.commons.math.complex.Complex complex24 = complex22.log();
        org.apache.commons.math.complex.Complex complex25 = complex22.sin();
        org.apache.commons.math.complex.Complex complex26 = complex25.tanh();
        org.apache.commons.math.complex.Complex complex27 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex28 = complex27.cosh();
        org.apache.commons.math.complex.Complex complex29 = complex27.log();
        org.apache.commons.math.complex.Complex complex30 = complex27.sin();
        org.apache.commons.math.complex.Complex complex31 = complex27.log();
        org.apache.commons.math.complex.Complex complex32 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex33 = complex32.sqrt();
        org.apache.commons.math.complex.Complex complex34 = complex27.divide(complex33);
        org.apache.commons.math.complex.Complex complex35 = complex25.pow(complex27);
        org.apache.commons.math.complex.Complex complex36 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex37 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex38 = complex37.sqrt();
        org.apache.commons.math.complex.Complex complex39 = complex38.sin();
        org.apache.commons.math.complex.Complex complex40 = complex36.pow(complex38);
        org.apache.commons.math.complex.Complex complex41 = complex40.asin();
        org.apache.commons.math.complex.Complex complex42 = complex40.tan();
        org.apache.commons.math.complex.Complex complex43 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex44 = complex43.cosh();
        double double45 = complex43.abs();
        org.apache.commons.math.complex.Complex complex46 = complex43.conjugate();
        org.apache.commons.math.complex.Complex complex47 = complex46.conjugate();
        boolean boolean48 = complex46.isInfinite();
        org.apache.commons.math.complex.Complex complex49 = complex46.asin();
        boolean boolean50 = complex46.isNaN();
        org.apache.commons.math.complex.Complex complex51 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex52 = complex51.cosh();
        org.apache.commons.math.complex.Complex complex53 = complex46.divide(complex51);
        org.apache.commons.math.complex.Complex complex54 = complex42.pow(complex51);
        org.apache.commons.math.complex.Complex complex55 = complex42.sinh();
        org.apache.commons.math.complex.Complex complex56 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex57 = complex56.cosh();
        double double58 = complex56.abs();
        org.apache.commons.math.complex.Complex complex59 = complex56.conjugate();
        org.apache.commons.math.complex.Complex complex60 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex61 = complex60.sqrt();
        boolean boolean62 = complex60.isNaN();
        org.apache.commons.math.complex.Complex complex63 = complex60.sin();
        org.apache.commons.math.complex.Complex complex64 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex65 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex66 = complex65.sqrt();
        org.apache.commons.math.complex.Complex complex67 = complex66.sin();
        org.apache.commons.math.complex.Complex complex68 = complex64.pow(complex66);
        org.apache.commons.math.complex.Complex complex69 = complex68.asin();
        org.apache.commons.math.complex.Complex complex70 = complex69.atan();
        boolean boolean71 = complex70.isInfinite();
        org.apache.commons.math.complex.Complex complex72 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex73 = complex70.subtract(complex72);
        org.apache.commons.math.complex.Complex complex74 = complex73.sin();
        org.apache.commons.math.complex.Complex complex75 = complex60.divide(complex74);
        org.apache.commons.math.complex.Complex complex76 = complex56.subtract(complex74);
        boolean boolean77 = complex76.isNaN();
        org.apache.commons.math.complex.Complex complex78 = complex55.subtract(complex76);
        org.apache.commons.math.complex.Complex complex79 = complex35.divide(complex76);
        org.apache.commons.math.complex.Complex complex80 = complex76.negate();
        org.apache.commons.math.complex.Complex complex81 = complex21.pow(complex76);
        boolean boolean82 = complex76.isNaN();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + Double.POSITIVE_INFINITY + "'", double2 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + Double.POSITIVE_INFINITY + "'", double15 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + Double.POSITIVE_INFINITY + "'", double45 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + Double.POSITIVE_INFINITY + "'", double58 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertNotNull(complex75);
        org.junit.Assert.assertNotNull(complex76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(complex78);
        org.junit.Assert.assertNotNull(complex79);
        org.junit.Assert.assertNotNull(complex80);
        org.junit.Assert.assertNotNull(complex81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
    }

    @Test
    public void test06047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06047");
        java.lang.Object[] objArray11 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException12 = new org.apache.commons.math.ConvergenceException("", objArray11);
        java.lang.Object[] objArray14 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException15 = new org.apache.commons.math.ConvergenceException("", objArray14);
        org.apache.commons.math.ConvergenceException convergenceException16 = new org.apache.commons.math.ConvergenceException("", objArray11, (java.lang.Throwable) convergenceException15);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException17 = new org.apache.commons.math.MaxIterationsExceededException((int) (short) 0, "org.apache.commons.math.FunctionEvaluationException: ", objArray11);
        java.lang.Object[] objArray24 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException25 = new org.apache.commons.math.ConvergenceException("", objArray24);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException26 = new org.apache.commons.math.FunctionEvaluationException((double) (short) 10, "hi!", objArray24);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException27 = new org.apache.commons.math.MaxIterationsExceededException((int) (byte) 0, "org.apache.commons.math.ConvergenceException: hi!", objArray24);
        java.lang.Object[] objArray34 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException35 = new org.apache.commons.math.ConvergenceException("", objArray34);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException36 = new org.apache.commons.math.FunctionEvaluationException((double) (short) 10, "hi!", objArray34);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException37 = new org.apache.commons.math.MaxIterationsExceededException((int) (byte) 0, "org.apache.commons.math.ConvergenceException: hi!", objArray34);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException38 = new org.apache.commons.math.FunctionEvaluationException(0.0d, (java.lang.Throwable) maxIterationsExceededException37);
        org.apache.commons.math.ConvergenceException convergenceException39 = new org.apache.commons.math.ConvergenceException("", objArray24, (java.lang.Throwable) functionEvaluationException38);
        org.apache.commons.math.ConvergenceException convergenceException40 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: Convergence failed", objArray11, (java.lang.Throwable) convergenceException39);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException41 = new org.apache.commons.math.FunctionEvaluationException(100.0d, "org.apache.commons.math.MaxIterationsExceededException: org.apache.commons.math.FunctionEvaluationException: ", (java.lang.Throwable) convergenceException40);
        org.apache.commons.math.ConvergenceException convergenceException42 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.MaxIterationsExceededException: hi!", (java.lang.Throwable) convergenceException40);
        java.lang.Object[] objArray43 = convergenceException40.getArguments();
        org.apache.commons.math.ConvergenceException convergenceException44 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.FunctionEvaluationException: ", objArray43);
        java.lang.Object[] objArray49 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException50 = new org.apache.commons.math.ConvergenceException("", objArray49);
        java.lang.Object[] objArray52 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException53 = new org.apache.commons.math.ConvergenceException("", objArray52);
        org.apache.commons.math.ConvergenceException convergenceException54 = new org.apache.commons.math.ConvergenceException("", objArray49, (java.lang.Throwable) convergenceException53);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException55 = new org.apache.commons.math.FunctionEvaluationException(0.0d, "", (java.lang.Throwable) convergenceException54);
        org.apache.commons.math.ConvergenceException convergenceException56 = new org.apache.commons.math.ConvergenceException("", objArray43, (java.lang.Throwable) convergenceException54);
        java.lang.Object[] objArray69 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException70 = new org.apache.commons.math.ConvergenceException("", objArray69);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException71 = new org.apache.commons.math.MaxIterationsExceededException(0, "hi!", objArray69);
        org.apache.commons.math.ConvergenceException convergenceException73 = new org.apache.commons.math.ConvergenceException("");
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException74 = new org.apache.commons.math.FunctionEvaluationException((double) (short) 0, "hi!", objArray69, (java.lang.Throwable) convergenceException73);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException75 = new org.apache.commons.math.MaxIterationsExceededException((int) (byte) 100, "", objArray69);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException76 = new org.apache.commons.math.FunctionEvaluationException(1.0d, "", objArray69);
        java.lang.Object[] objArray86 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException87 = new org.apache.commons.math.ConvergenceException("", objArray86);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException88 = new org.apache.commons.math.MaxIterationsExceededException(0, "hi!", objArray86);
        org.apache.commons.math.ConvergenceException convergenceException90 = new org.apache.commons.math.ConvergenceException("");
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException91 = new org.apache.commons.math.FunctionEvaluationException((double) (short) 0, "hi!", objArray86, (java.lang.Throwable) convergenceException90);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException92 = new org.apache.commons.math.MaxIterationsExceededException((int) (byte) 100, "", objArray86);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException93 = new org.apache.commons.math.FunctionEvaluationException(1.0d, "", objArray86);
        org.apache.commons.math.ConvergenceException convergenceException94 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.MaxIterationsExceededException: ", objArray69, (java.lang.Throwable) functionEvaluationException93);
        java.lang.Throwable[] throwableArray95 = functionEvaluationException93.getSuppressed();
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException96 = new org.apache.commons.math.MaxIterationsExceededException(10, "", (java.lang.Object[]) throwableArray95);
        convergenceException56.addSuppressed((java.lang.Throwable) maxIterationsExceededException96);
        org.apache.commons.math.ConvergenceException convergenceException98 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.FunctionEvaluationException: Maximal number of iterations ({0}) exceeded", (java.lang.Throwable) maxIterationsExceededException96);
        java.lang.Object[] objArray99 = maxIterationsExceededException96.getArguments();
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[]");
        org.junit.Assert.assertNotNull(objArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray14), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray14), "[]");
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[]");
        org.junit.Assert.assertNotNull(objArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray34), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray34), "[]");
        org.junit.Assert.assertNotNull(objArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray43), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray43), "[]");
        org.junit.Assert.assertNotNull(objArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray49), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray49), "[]");
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[]");
        org.junit.Assert.assertNotNull(objArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray69), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray69), "[]");
        org.junit.Assert.assertNotNull(objArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray86), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray86), "[]");
        org.junit.Assert.assertNotNull(throwableArray95);
        org.junit.Assert.assertNotNull(objArray99);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray99), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray99), "[]");
    }

    @Test
    public void test06048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06048");
        double[] doubleArray2 = new double[] { (byte) 1, 100 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) (short) 100);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver6 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction3);
        double double10 = laguerreSolver6.solve((double) (-1L), 349.0d, (double) (short) 10);
        laguerreSolver6.resetMaximalIterationCount();
        laguerreSolver6.resetMaximalIterationCount();
        laguerreSolver6.resetFunctionValueAccuracy();
        int int14 = laguerreSolver6.getIterationCount();
        laguerreSolver6.resetFunctionValueAccuracy();
        double double18 = laguerreSolver6.solve((-5.62755502169E11d), 18.0d);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 10001.0d + "'", double5 == 10001.0d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + (-0.01d) + "'", double10 == (-0.01d));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 3 + "'", int14 == 3);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + (-0.01d) + "'", double18 == (-0.01d));
    }

    @Test
    public void test06049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06049");
        java.lang.Object[] objArray5 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException6 = new org.apache.commons.math.ConvergenceException("", objArray5);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException7 = new org.apache.commons.math.FunctionEvaluationException(10.0d, (java.lang.Throwable) convergenceException6);
        java.lang.Object[] objArray8 = functionEvaluationException7.getArguments();
        org.apache.commons.math.ConvergenceException convergenceException9 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: Convergence failed", objArray8);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException10 = new org.apache.commons.math.FunctionEvaluationException((-0.34000000999999996d), "org.apache.commons.math.ConvergenceException: org.apache.commons.math.FunctionEvaluationException: Evaluation failed for argument = 10,222,474,227,427", (java.lang.Throwable) convergenceException9);
        java.lang.String str11 = convergenceException9.getPattern();
        org.junit.Assert.assertNotNull(objArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray5), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray5), "[]");
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "org.apache.commons.math.ConvergenceException: Convergence failed" + "'", str11, "org.apache.commons.math.ConvergenceException: Convergence failed");
    }

    @Test
    public void test06050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06050");
        double[] doubleArray3 = new double[] { (byte) 1, 100 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction4 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray3);
        double double6 = polynomialFunction4.value((double) (short) 100);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction4);
        double double11 = laguerreSolver7.solve((double) (-1L), 349.0d, (double) (short) 10);
        laguerreSolver7.setMaximalIterationCount((int) '#');
        laguerreSolver7.setMaximalIterationCount((int) ' ');
        laguerreSolver7.setRelativeAccuracy((double) (short) 10);
        laguerreSolver7.setAbsoluteAccuracy((double) (byte) 10);
        double double20 = laguerreSolver7.getRelativeAccuracy();
        int int21 = laguerreSolver7.getMaximalIterationCount();
        double[] doubleArray24 = new double[] { (byte) -1, '#' };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction25 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray24);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction26 = polynomialFunction25.polynomialDerivative();
        double[] doubleArray27 = polynomialFunction25.getCoefficients();
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction28 = polynomialFunction25.derivative();
        int int29 = polynomialFunction25.degree();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction30 = polynomialFunction25.polynomialDerivative();
        double double32 = polynomialFunction30.value((double) (byte) 100);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver33 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction30);
        double[] doubleArray36 = new double[] { (byte) 1, 100 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction37 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray36);
        double double39 = polynomialFunction37.value((double) (short) 100);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver40 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction37);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction41 = laguerreSolver40.getPolynomialFunction();
        double double42 = laguerreSolver40.getRelativeAccuracy();
        laguerreSolver40.resetRelativeAccuracy();
        laguerreSolver40.setFunctionValueAccuracy((double) (-1.0f));
        laguerreSolver40.resetRelativeAccuracy();
        double[] doubleArray52 = new double[] { 0L, '#', 100.0f, 0L, (-1.0d) };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction53 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray52);
        int int54 = polynomialFunction53.degree();
        int int55 = polynomialFunction53.degree();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction56 = polynomialFunction53.polynomialDerivative();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction57 = polynomialFunction56.polynomialDerivative();
        double double59 = polynomialFunction57.value((double) (byte) 10);
        double[] doubleArray60 = polynomialFunction57.getCoefficients();
        org.apache.commons.math.complex.Complex[] complexArray62 = laguerreSolver40.solveAll(doubleArray60, (-99999.0d));
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction63 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray60);
        org.apache.commons.math.complex.Complex[] complexArray65 = laguerreSolver33.solveAll(doubleArray60, (double) 0.0f);
        org.apache.commons.math.complex.Complex[] complexArray67 = laguerreSolver7.solveAll(doubleArray60, (double) 10.0f);
        java.lang.Object[] objArray75 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException76 = new org.apache.commons.math.ConvergenceException("", objArray75);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException77 = new org.apache.commons.math.FunctionEvaluationException((double) (short) 10, "hi!", objArray75);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException78 = new org.apache.commons.math.MaxIterationsExceededException((int) (short) 0, "org.apache.commons.math.FunctionEvaluationException: org.apache.commons.math.FunctionEvaluationException: ", objArray75);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException79 = new org.apache.commons.math.MaxIterationsExceededException(0, "org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.MaxIterationsExceededException: ", objArray75);
        org.apache.commons.math.ConvergenceException convergenceException80 = new org.apache.commons.math.ConvergenceException("Maximal number of iterations ({0}) exceeded", (java.lang.Object[]) complexArray67, (java.lang.Throwable) maxIterationsExceededException79);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 10001.0d + "'", double6 == 10001.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + (-0.01d) + "'", double11 == (-0.01d));
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 10.0d + "'", double20 == 10.0d);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 32 + "'", int21 == 32);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[-1.0, 35.0]");
        org.junit.Assert.assertNotNull(polynomialFunction26);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[-1.0, 35.0]");
        org.junit.Assert.assertNotNull(univariateRealFunction28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertNotNull(polynomialFunction30);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 35.0d + "'", double32 == 35.0d);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 10001.0d + "'", double39 == 10001.0d);
        org.junit.Assert.assertNotNull(polynomialFunction41);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 1.0E-14d + "'", double42 == 1.0E-14d);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[0.0, 35.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 4 + "'", int54 == 4);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 4 + "'", int55 == 4);
        org.junit.Assert.assertNotNull(polynomialFunction56);
        org.junit.Assert.assertNotNull(polynomialFunction57);
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + (-1000.0d) + "'", double59 == (-1000.0d));
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[200.0, 0.0, -12.0]");
        org.junit.Assert.assertNotNull(complexArray62);
        org.junit.Assert.assertNotNull(complexArray65);
        org.junit.Assert.assertNotNull(complexArray67);
        org.junit.Assert.assertNotNull(objArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray75), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray75), "[]");
    }

    @Test
    public void test06051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06051");
        double[] doubleArray4 = new double[] { (byte) 1, 100 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction5 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray4);
        double double7 = polynomialFunction5.value((double) (short) 100);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver8 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction5);
        double double12 = laguerreSolver8.solve((double) (-1L), 349.0d, (double) (short) 10);
        laguerreSolver8.setMaximalIterationCount((int) '#');
        laguerreSolver8.setMaximalIterationCount((int) ' ');
        double double17 = laguerreSolver8.getRelativeAccuracy();
        laguerreSolver8.setMaximalIterationCount(100);
        double[] doubleArray22 = new double[] { (byte) 1, 100 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction23 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray22);
        double double25 = polynomialFunction23.value((double) (short) 100);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver26 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction23);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction27 = laguerreSolver26.getPolynomialFunction();
        laguerreSolver26.setRelativeAccuracy((double) 0);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction30 = laguerreSolver26.getPolynomialFunction();
        double[] doubleArray31 = polynomialFunction30.getCoefficients();
        org.apache.commons.math.complex.Complex[] complexArray33 = laguerreSolver8.solveAll(doubleArray31, (double) 0.0f);
        org.apache.commons.math.ConvergenceException convergenceException34 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.MaxIterationsExceededException: Maximal number of iterations (52) exceeded", (java.lang.Object[]) complexArray33);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException35 = new org.apache.commons.math.FunctionEvaluationException((-1.441290552272185E46d), (java.lang.Throwable) convergenceException34);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 10001.0d + "'", double7 == 10001.0d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + (-0.01d) + "'", double12 == (-0.01d));
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 1.0E-14d + "'", double17 == 1.0E-14d);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 10001.0d + "'", double25 == 10001.0d);
        org.junit.Assert.assertNotNull(polynomialFunction27);
        org.junit.Assert.assertNotNull(polynomialFunction30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(complexArray33);
    }

    @Test
    public void test06052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06052");
        double[] doubleArray5 = new double[] { 0L, '#', 100.0f, 0L, (-1.0d) };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray5);
        double double8 = polynomialFunction6.value((double) 0);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver9 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        double[] doubleArray12 = new double[] { (byte) 1, 100 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction13 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray12);
        double double15 = polynomialFunction13.value((double) (short) 100);
        double[] doubleArray16 = polynomialFunction13.getCoefficients();
        org.apache.commons.math.complex.Complex[] complexArray18 = laguerreSolver9.solveAll(doubleArray16, (double) (short) 10);
        int int19 = laguerreSolver9.getMaximalIterationCount();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction20 = laguerreSolver9.getPolynomialFunction();
        double double22 = polynomialFunction20.value((double) (byte) 0);
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction23 = polynomialFunction20.derivative();
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction24 = polynomialFunction20.derivative();
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[0.0, 35.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 10001.0d + "'", double15 == 10001.0d);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(complexArray18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 100 + "'", int19 == 100);
        org.junit.Assert.assertNotNull(polynomialFunction20);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d);
        org.junit.Assert.assertNotNull(univariateRealFunction23);
        org.junit.Assert.assertNotNull(univariateRealFunction24);
    }

    @Test
    public void test06053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06053");
        org.apache.commons.math.ConvergenceException convergenceException4 = new org.apache.commons.math.ConvergenceException("");
        java.lang.Object[] objArray5 = convergenceException4.getArguments();
        java.lang.Object[] objArray9 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException10 = new org.apache.commons.math.ConvergenceException("", objArray9);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException11 = new org.apache.commons.math.MaxIterationsExceededException(0, "hi!", objArray9);
        int int12 = maxIterationsExceededException11.getMaxIterations();
        org.apache.commons.math.ConvergenceException convergenceException13 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.FunctionEvaluationException: org.apache.commons.math.FunctionEvaluationException: ", objArray5, (java.lang.Throwable) maxIterationsExceededException11);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException14 = new org.apache.commons.math.FunctionEvaluationException((double) (short) 1, "org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.MaxIterationsExceededException: ", objArray5);
        double double15 = functionEvaluationException14.getArgument();
        double double16 = functionEvaluationException14.getArgument();
        org.junit.Assert.assertNotNull(objArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray5), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray5), "[]");
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 1.0d + "'", double15 == 1.0d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 1.0d + "'", double16 == 1.0d);
    }

    @Test
    public void test06054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06054");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex1 = complex0.cosh();
        double double2 = complex0.abs();
        org.apache.commons.math.complex.Complex complex3 = complex0.conjugate();
        org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex5 = complex4.cosh();
        double double6 = complex4.abs();
        org.apache.commons.math.complex.Complex complex7 = complex4.conjugate();
        org.apache.commons.math.complex.Complex complex8 = complex7.conjugate();
        org.apache.commons.math.complex.Complex complex9 = complex7.tanh();
        org.apache.commons.math.complex.Complex complex10 = complex7.atan();
        org.apache.commons.math.complex.Complex complex11 = complex0.subtract(complex7);
        org.apache.commons.math.complex.Complex complex12 = complex0.tanh();
        org.apache.commons.math.complex.Complex complex13 = complex0.asin();
        org.apache.commons.math.complex.Complex complex14 = complex0.conjugate();
        org.apache.commons.math.complex.Complex complex15 = complex0.tanh();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + Double.POSITIVE_INFINITY + "'", double2 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + Double.POSITIVE_INFINITY + "'", double6 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
    }

    @Test
    public void test06055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06055");
        double[] doubleArray2 = new double[] { (byte) 1, 100 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) (short) 100);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver6 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction3);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction7 = laguerreSolver6.getPolynomialFunction();
        double[] doubleArray10 = new double[] { (byte) -1, '#' };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction11 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray10);
        org.apache.commons.math.complex.Complex[] complexArray13 = laguerreSolver6.solveAll(doubleArray10, 1.0d);
        double double14 = laguerreSolver6.getRelativeAccuracy();
        laguerreSolver6.setFunctionValueAccuracy((double) 1.0f);
        laguerreSolver6.resetAbsoluteAccuracy();
        double double18 = laguerreSolver6.getAbsoluteAccuracy();
        double double19 = laguerreSolver6.getRelativeAccuracy();
        // The following exception was thrown during execution in test generation
        try {
            double double23 = laguerreSolver6.solve(1000101.0d, 1.00010101E8d, 7954.981633974483d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Function values at endpoints do not have different signs.  Endpoints: [1000101.0,1.00010101E8]  Values: [1.00010101E8,1.0001010101E10]");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 10001.0d + "'", double5 == 10001.0d);
        org.junit.Assert.assertNotNull(polynomialFunction7);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[-1.0, 35.0]");
        org.junit.Assert.assertNotNull(complexArray13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 1.0E-14d + "'", double14 == 1.0E-14d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 1.0E-6d + "'", double18 == 1.0E-6d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 1.0E-14d + "'", double19 == 1.0E-14d);
    }

    @Test
    public void test06056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06056");
        double[] doubleArray2 = new double[] { (byte) 1, 100 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) (short) 100);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver6 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction3);
        double double10 = laguerreSolver6.solve((double) (-1L), 349.0d, (double) (short) 10);
        laguerreSolver6.setMaximalIterationCount((int) '#');
        double double13 = laguerreSolver6.getAbsoluteAccuracy();
        laguerreSolver6.setFunctionValueAccuracy((double) (short) -1);
        laguerreSolver6.setRelativeAccuracy((double) (short) 100);
        laguerreSolver6.resetMaximalIterationCount();
        laguerreSolver6.setRelativeAccuracy((-1.03036766E8d));
        laguerreSolver6.resetFunctionValueAccuracy();
        laguerreSolver6.resetMaximalIterationCount();
        int int23 = laguerreSolver6.getMaximalIterationCount();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 10001.0d + "'", double5 == 10001.0d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + (-0.01d) + "'", double10 == (-0.01d));
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 1.0E-6d + "'", double13 == 1.0E-6d);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 100 + "'", int23 == 100);
    }

    @Test
    public void test06057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06057");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex1 = complex0.cosh();
        double double2 = complex0.abs();
        org.apache.commons.math.complex.Complex complex3 = complex0.conjugate();
        org.apache.commons.math.complex.Complex complex4 = complex3.conjugate();
        boolean boolean5 = complex3.isInfinite();
        org.apache.commons.math.complex.Complex complex6 = complex3.cos();
        org.apache.commons.math.complex.Complex complex7 = complex3.conjugate();
        org.apache.commons.math.complex.Complex complex8 = complex3.log();
        org.apache.commons.math.complex.Complex complex9 = complex3.exp();
        org.apache.commons.math.complex.Complex complex10 = complex9.negate();
        java.lang.Object[] objArray17 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException18 = new org.apache.commons.math.ConvergenceException("", objArray17);
        java.lang.Object[] objArray20 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException21 = new org.apache.commons.math.ConvergenceException("", objArray20);
        org.apache.commons.math.ConvergenceException convergenceException22 = new org.apache.commons.math.ConvergenceException("", objArray17, (java.lang.Throwable) convergenceException21);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException24 = new org.apache.commons.math.FunctionEvaluationException((double) 100);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException25 = new org.apache.commons.math.FunctionEvaluationException(100.0d, "org.apache.commons.math.ConvergenceException: hi!", objArray17, (java.lang.Throwable) functionEvaluationException24);
        org.apache.commons.math.ConvergenceException convergenceException26 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.FunctionEvaluationException: ", (java.lang.Throwable) functionEvaluationException24);
        org.apache.commons.math.ConvergenceException convergenceException27 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.FunctionEvaluationException: hi!", (java.lang.Throwable) functionEvaluationException24);
        boolean boolean28 = complex10.equals((java.lang.Object) "org.apache.commons.math.FunctionEvaluationException: hi!");
        org.apache.commons.math.complex.Complex complex29 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex30 = complex29.cosh();
        org.apache.commons.math.complex.Complex complex31 = complex29.log();
        org.apache.commons.math.complex.Complex complex32 = complex29.sin();
        org.apache.commons.math.complex.Complex complex33 = complex32.tanh();
        org.apache.commons.math.complex.Complex complex34 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex35 = complex34.cosh();
        org.apache.commons.math.complex.Complex complex36 = complex34.log();
        org.apache.commons.math.complex.Complex complex37 = complex34.sin();
        org.apache.commons.math.complex.Complex complex38 = complex34.log();
        org.apache.commons.math.complex.Complex complex39 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex40 = complex39.sqrt();
        org.apache.commons.math.complex.Complex complex41 = complex34.divide(complex40);
        org.apache.commons.math.complex.Complex complex42 = complex32.pow(complex34);
        org.apache.commons.math.complex.Complex complex43 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex44 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex45 = complex44.sqrt();
        org.apache.commons.math.complex.Complex complex46 = complex45.sin();
        org.apache.commons.math.complex.Complex complex47 = complex43.pow(complex45);
        org.apache.commons.math.complex.Complex complex48 = complex47.asin();
        org.apache.commons.math.complex.Complex complex49 = complex47.tan();
        org.apache.commons.math.complex.Complex complex50 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex51 = complex50.cosh();
        double double52 = complex50.abs();
        org.apache.commons.math.complex.Complex complex53 = complex50.conjugate();
        org.apache.commons.math.complex.Complex complex54 = complex53.conjugate();
        boolean boolean55 = complex53.isInfinite();
        org.apache.commons.math.complex.Complex complex56 = complex53.asin();
        boolean boolean57 = complex53.isNaN();
        org.apache.commons.math.complex.Complex complex58 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex59 = complex58.cosh();
        org.apache.commons.math.complex.Complex complex60 = complex53.divide(complex58);
        org.apache.commons.math.complex.Complex complex61 = complex49.pow(complex58);
        org.apache.commons.math.complex.Complex complex62 = complex49.sinh();
        org.apache.commons.math.complex.Complex complex63 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex64 = complex63.cosh();
        double double65 = complex63.abs();
        org.apache.commons.math.complex.Complex complex66 = complex63.conjugate();
        org.apache.commons.math.complex.Complex complex67 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex68 = complex67.sqrt();
        boolean boolean69 = complex67.isNaN();
        org.apache.commons.math.complex.Complex complex70 = complex67.sin();
        org.apache.commons.math.complex.Complex complex71 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex72 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex73 = complex72.sqrt();
        org.apache.commons.math.complex.Complex complex74 = complex73.sin();
        org.apache.commons.math.complex.Complex complex75 = complex71.pow(complex73);
        org.apache.commons.math.complex.Complex complex76 = complex75.asin();
        org.apache.commons.math.complex.Complex complex77 = complex76.atan();
        boolean boolean78 = complex77.isInfinite();
        org.apache.commons.math.complex.Complex complex79 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex80 = complex77.subtract(complex79);
        org.apache.commons.math.complex.Complex complex81 = complex80.sin();
        org.apache.commons.math.complex.Complex complex82 = complex67.divide(complex81);
        org.apache.commons.math.complex.Complex complex83 = complex63.subtract(complex81);
        boolean boolean84 = complex83.isNaN();
        org.apache.commons.math.complex.Complex complex85 = complex62.subtract(complex83);
        org.apache.commons.math.complex.Complex complex86 = complex42.divide(complex83);
        org.apache.commons.math.complex.Complex complex87 = complex10.pow(complex42);
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + Double.POSITIVE_INFINITY + "'", double2 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray17), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray17), "[]");
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray20), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray20), "[]");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + Double.POSITIVE_INFINITY + "'", double52 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + Double.POSITIVE_INFINITY + "'", double65 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertNotNull(complex75);
        org.junit.Assert.assertNotNull(complex76);
        org.junit.Assert.assertNotNull(complex77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(complex79);
        org.junit.Assert.assertNotNull(complex80);
        org.junit.Assert.assertNotNull(complex81);
        org.junit.Assert.assertNotNull(complex82);
        org.junit.Assert.assertNotNull(complex83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertNotNull(complex85);
        org.junit.Assert.assertNotNull(complex86);
        org.junit.Assert.assertNotNull(complex87);
    }

    @Test
    public void test06058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06058");
        double[] doubleArray2 = new double[] { (byte) 1, 100 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) (short) 100);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver6 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction3);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction7 = laguerreSolver6.getPolynomialFunction();
        double double8 = laguerreSolver6.getRelativeAccuracy();
        laguerreSolver6.resetRelativeAccuracy();
        laguerreSolver6.setRelativeAccuracy((double) (short) 1);
        laguerreSolver6.setMaximalIterationCount((int) ' ');
        // The following exception was thrown during execution in test generation
        try {
            double double17 = laguerreSolver6.solve(3201.0d, (-2.647377083281663E115d), 374.7745989258077d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Endpoints do not specify an interval: [3201.0,-2.647377083281663E115]");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 10001.0d + "'", double5 == 10001.0d);
        org.junit.Assert.assertNotNull(polynomialFunction7);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 1.0E-14d + "'", double8 == 1.0E-14d);
    }

    @Test
    public void test06059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06059");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex1 = complex0.cosh();
        org.apache.commons.math.complex.Complex complex2 = complex0.log();
        org.apache.commons.math.complex.Complex complex3 = complex0.sin();
        org.apache.commons.math.complex.Complex complex4 = complex0.log();
        org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex6 = complex5.sqrt();
        org.apache.commons.math.complex.Complex complex7 = complex0.divide(complex6);
        org.apache.commons.math.complex.Complex complex8 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex9 = complex8.cosh();
        double double10 = complex8.abs();
        org.apache.commons.math.complex.Complex complex11 = complex8.conjugate();
        org.apache.commons.math.complex.Complex complex12 = complex11.conjugate();
        org.apache.commons.math.complex.Complex complex13 = complex7.subtract(complex12);
        org.apache.commons.math.complex.Complex complex14 = complex7.exp();
        org.apache.commons.math.complex.Complex complex17 = new org.apache.commons.math.complex.Complex((double) 100, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex19 = complex18.sqrt();
        org.apache.commons.math.complex.Complex complex20 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex21 = complex20.cosh();
        double double22 = complex20.abs();
        org.apache.commons.math.complex.Complex complex23 = complex20.conjugate();
        org.apache.commons.math.complex.Complex complex24 = complex18.divide(complex23);
        org.apache.commons.math.complex.Complex complex25 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex26 = complex25.cosh();
        org.apache.commons.math.complex.Complex complex27 = complex25.log();
        org.apache.commons.math.complex.Complex complex28 = complex25.sin();
        org.apache.commons.math.complex.Complex complex29 = complex25.log();
        org.apache.commons.math.complex.Complex complex30 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex31 = complex30.sqrt();
        org.apache.commons.math.complex.Complex complex32 = complex25.divide(complex31);
        org.apache.commons.math.complex.Complex complex33 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex34 = complex33.cosh();
        double double35 = complex33.abs();
        org.apache.commons.math.complex.Complex complex36 = complex33.conjugate();
        org.apache.commons.math.complex.Complex complex37 = complex36.conjugate();
        org.apache.commons.math.complex.Complex complex38 = complex32.subtract(complex37);
        org.apache.commons.math.complex.Complex complex39 = complex24.multiply(complex32);
        org.apache.commons.math.complex.Complex complex40 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex41 = complex40.cosh();
        org.apache.commons.math.complex.Complex complex42 = complex40.log();
        org.apache.commons.math.complex.Complex complex43 = complex42.cos();
        double double44 = complex43.abs();
        org.apache.commons.math.complex.Complex complex45 = complex43.sqrt();
        org.apache.commons.math.complex.Complex complex46 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex47 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex48 = complex47.sqrt();
        org.apache.commons.math.complex.Complex complex49 = complex48.sin();
        org.apache.commons.math.complex.Complex complex50 = complex46.pow(complex48);
        org.apache.commons.math.complex.Complex complex51 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex52 = complex51.cosh();
        org.apache.commons.math.complex.Complex complex53 = complex51.log();
        org.apache.commons.math.complex.Complex complex54 = complex46.divide(complex53);
        org.apache.commons.math.complex.Complex complex55 = complex45.subtract(complex54);
        org.apache.commons.math.complex.Complex complex56 = complex32.pow(complex45);
        org.apache.commons.math.complex.Complex complex57 = complex32.tanh();
        org.apache.commons.math.complex.Complex complex58 = complex57.tan();
        org.apache.commons.math.complex.Complex complex59 = complex17.add(complex57);
        org.apache.commons.math.complex.Complex complex60 = complex17.tanh();
        org.apache.commons.math.complex.Complex complex61 = complex7.subtract(complex17);
        org.apache.commons.math.complex.Complex complex62 = complex17.acos();
        org.apache.commons.math.complex.Complex complex63 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex64 = complex63.cosh();
        double double65 = complex63.abs();
        org.apache.commons.math.complex.Complex complex66 = complex63.conjugate();
        org.apache.commons.math.complex.Complex complex67 = complex66.conjugate();
        boolean boolean68 = complex66.isInfinite();
        org.apache.commons.math.complex.Complex complex69 = complex66.cos();
        org.apache.commons.math.complex.Complex complex70 = complex66.conjugate();
        org.apache.commons.math.complex.Complex complex71 = complex66.sin();
        org.apache.commons.math.complex.Complex complex72 = complex71.negate();
        org.apache.commons.math.complex.Complex complex73 = complex72.sinh();
        org.apache.commons.math.complex.Complex complex74 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex75 = complex74.cosh();
        org.apache.commons.math.complex.Complex complex76 = complex74.log();
        org.apache.commons.math.complex.Complex complex77 = complex74.sin();
        org.apache.commons.math.complex.Complex complex78 = complex77.tanh();
        org.apache.commons.math.complex.Complex complex79 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex80 = complex79.cosh();
        org.apache.commons.math.complex.Complex complex81 = complex79.log();
        org.apache.commons.math.complex.Complex complex82 = complex79.sin();
        org.apache.commons.math.complex.Complex complex83 = complex79.log();
        org.apache.commons.math.complex.Complex complex84 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex85 = complex84.sqrt();
        org.apache.commons.math.complex.Complex complex86 = complex79.divide(complex85);
        org.apache.commons.math.complex.Complex complex87 = complex77.pow(complex79);
        org.apache.commons.math.complex.Complex complex88 = complex72.add(complex87);
        org.apache.commons.math.complex.Complex complex89 = complex17.divide(complex87);
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + Double.POSITIVE_INFINITY + "'", double10 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + Double.POSITIVE_INFINITY + "'", double22 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + Double.POSITIVE_INFINITY + "'", double35 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertTrue(Double.isNaN(double44));
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + Double.POSITIVE_INFINITY + "'", double65 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertNotNull(complex75);
        org.junit.Assert.assertNotNull(complex76);
        org.junit.Assert.assertNotNull(complex77);
        org.junit.Assert.assertNotNull(complex78);
        org.junit.Assert.assertNotNull(complex79);
        org.junit.Assert.assertNotNull(complex80);
        org.junit.Assert.assertNotNull(complex81);
        org.junit.Assert.assertNotNull(complex82);
        org.junit.Assert.assertNotNull(complex83);
        org.junit.Assert.assertNotNull(complex84);
        org.junit.Assert.assertNotNull(complex85);
        org.junit.Assert.assertNotNull(complex86);
        org.junit.Assert.assertNotNull(complex87);
        org.junit.Assert.assertNotNull(complex88);
        org.junit.Assert.assertNotNull(complex89);
    }

    @Test
    public void test06060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06060");
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException4 = new org.apache.commons.math.MaxIterationsExceededException((int) 'a');
        org.apache.commons.math.ConvergenceException convergenceException5 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: Convergence failed", (java.lang.Throwable) maxIterationsExceededException4);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException6 = new org.apache.commons.math.FunctionEvaluationException(100.0d, (java.lang.Throwable) convergenceException5);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException7 = new org.apache.commons.math.FunctionEvaluationException((-2.24308280799E11d), (java.lang.Throwable) functionEvaluationException6);
    }

    @Test
    public void test06061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06061");
        double[] doubleArray2 = new double[] { (byte) 1, 100 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) (short) 100);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver6 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction3);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction7 = laguerreSolver6.getPolynomialFunction();
        double double8 = laguerreSolver6.getRelativeAccuracy();
        laguerreSolver6.resetRelativeAccuracy();
        double double10 = laguerreSolver6.getFunctionValueAccuracy();
        laguerreSolver6.resetRelativeAccuracy();
        double double14 = laguerreSolver6.solve((-1.0d), 10.170609052699179d);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction15 = laguerreSolver6.getPolynomialFunction();
        double double18 = laguerreSolver6.solve((double) 10, (-0.01d));
        laguerreSolver6.setRelativeAccuracy((-99.0d));
        int int21 = laguerreSolver6.getIterationCount();
        laguerreSolver6.resetRelativeAccuracy();
        laguerreSolver6.resetRelativeAccuracy();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 10001.0d + "'", double5 == 10001.0d);
        org.junit.Assert.assertNotNull(polynomialFunction7);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 1.0E-14d + "'", double8 == 1.0E-14d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0E-15d + "'", double10 == 1.0E-15d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + (-0.01d) + "'", double14 == (-0.01d));
        org.junit.Assert.assertNotNull(polynomialFunction15);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + (-0.01d) + "'", double18 == (-0.01d));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 3 + "'", int21 == 3);
    }

    @Test
    public void test06062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06062");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex1 = complex0.sqrt();
        boolean boolean2 = complex0.isNaN();
        org.apache.commons.math.complex.Complex complex3 = complex0.sin();
        org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex6 = complex5.sqrt();
        org.apache.commons.math.complex.Complex complex7 = complex6.sin();
        org.apache.commons.math.complex.Complex complex8 = complex4.pow(complex6);
        org.apache.commons.math.complex.Complex complex9 = complex8.asin();
        org.apache.commons.math.complex.Complex complex10 = complex9.atan();
        boolean boolean11 = complex10.isInfinite();
        org.apache.commons.math.complex.Complex complex12 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex13 = complex10.subtract(complex12);
        org.apache.commons.math.complex.Complex complex14 = complex13.sin();
        org.apache.commons.math.complex.Complex complex15 = complex0.divide(complex14);
        org.apache.commons.math.complex.Complex complex16 = complex0.cosh();
        org.apache.commons.math.complex.Complex complex17 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex18 = complex17.cosh();
        org.apache.commons.math.complex.Complex complex19 = complex17.log();
        org.apache.commons.math.complex.Complex complex20 = complex19.cos();
        org.apache.commons.math.complex.Complex complex21 = complex20.atan();
        org.apache.commons.math.complex.Complex complex22 = complex21.sinh();
        org.apache.commons.math.complex.Complex complex23 = complex16.add(complex21);
        org.apache.commons.math.complex.Complex complex24 = complex16.sqrt();
        org.apache.commons.math.complex.Complex complex25 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex26 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex27 = complex26.sqrt();
        org.apache.commons.math.complex.Complex complex28 = complex27.sin();
        org.apache.commons.math.complex.Complex complex29 = complex25.pow(complex27);
        org.apache.commons.math.complex.Complex complex30 = complex29.asin();
        org.apache.commons.math.complex.Complex complex31 = complex29.tan();
        org.apache.commons.math.complex.Complex complex32 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex33 = complex32.cosh();
        double double34 = complex32.abs();
        org.apache.commons.math.complex.Complex complex35 = complex32.conjugate();
        org.apache.commons.math.complex.Complex complex36 = complex35.conjugate();
        boolean boolean37 = complex35.isInfinite();
        org.apache.commons.math.complex.Complex complex38 = complex35.asin();
        boolean boolean39 = complex35.isNaN();
        org.apache.commons.math.complex.Complex complex40 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex41 = complex40.cosh();
        org.apache.commons.math.complex.Complex complex42 = complex35.divide(complex40);
        org.apache.commons.math.complex.Complex complex43 = complex31.pow(complex40);
        org.apache.commons.math.complex.Complex complex44 = complex31.sinh();
        double[] doubleArray50 = new double[] { 0L, '#', 100.0f, 0L, (-1.0d) };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction51 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray50);
        double double53 = polynomialFunction51.value((double) 0);
        double double55 = polynomialFunction51.value((double) (byte) 0);
        double[] doubleArray56 = polynomialFunction51.getCoefficients();
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction57 = polynomialFunction51.derivative();
        boolean boolean58 = complex44.equals((java.lang.Object) polynomialFunction51);
        org.apache.commons.math.complex.Complex complex59 = complex16.add(complex44);
        org.apache.commons.math.complex.Complex complex60 = complex44.sin();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + Double.POSITIVE_INFINITY + "'", double34 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[0.0, 35.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 0.0d + "'", double53 == 0.0d);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.0d + "'", double55 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[0.0, 35.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(univariateRealFunction57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
    }

    @Test
    public void test06063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06063");
        org.apache.commons.math.ConvergenceException convergenceException4 = new org.apache.commons.math.ConvergenceException("");
        java.lang.Object[] objArray5 = convergenceException4.getArguments();
        java.lang.Object[] objArray13 = new java.lang.Object[] { 0.0f, (short) 1 };
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException14 = new org.apache.commons.math.MaxIterationsExceededException(100, "", objArray13);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException15 = new org.apache.commons.math.MaxIterationsExceededException((int) ' ', "hi!", objArray13);
        java.lang.Object[] objArray18 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException19 = new org.apache.commons.math.ConvergenceException("", objArray18);
        java.lang.Object[] objArray21 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException22 = new org.apache.commons.math.ConvergenceException("", objArray21);
        org.apache.commons.math.ConvergenceException convergenceException23 = new org.apache.commons.math.ConvergenceException("", objArray18, (java.lang.Throwable) convergenceException22);
        org.apache.commons.math.ConvergenceException convergenceException24 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.FunctionEvaluationException: ", objArray13, (java.lang.Throwable) convergenceException22);
        org.apache.commons.math.ConvergenceException convergenceException25 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: Convergence failed", objArray5, (java.lang.Throwable) convergenceException24);
        java.lang.String str26 = convergenceException24.getPattern();
        org.apache.commons.math.ConvergenceException convergenceException27 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException24);
        java.lang.Object[] objArray28 = convergenceException24.getArguments();
        java.lang.Object[] objArray36 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException37 = new org.apache.commons.math.ConvergenceException("", objArray36);
        java.lang.Object[] objArray42 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException43 = new org.apache.commons.math.ConvergenceException("", objArray42);
        java.lang.Object[] objArray45 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException46 = new org.apache.commons.math.ConvergenceException("", objArray45);
        org.apache.commons.math.ConvergenceException convergenceException47 = new org.apache.commons.math.ConvergenceException("", objArray42, (java.lang.Throwable) convergenceException46);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException49 = new org.apache.commons.math.FunctionEvaluationException((double) 100);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException50 = new org.apache.commons.math.FunctionEvaluationException(100.0d, "org.apache.commons.math.ConvergenceException: hi!", objArray42, (java.lang.Throwable) functionEvaluationException49);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException51 = new org.apache.commons.math.FunctionEvaluationException((double) '#', "", objArray36, (java.lang.Throwable) functionEvaluationException50);
        java.lang.Object[] objArray59 = new java.lang.Object[] { 0.0f, (short) 1 };
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException60 = new org.apache.commons.math.MaxIterationsExceededException(100, "", objArray59);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException61 = new org.apache.commons.math.MaxIterationsExceededException((int) ' ', "hi!", objArray59);
        org.apache.commons.math.ConvergenceException convergenceException62 = new org.apache.commons.math.ConvergenceException("", (java.lang.Throwable) maxIterationsExceededException61);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException63 = new org.apache.commons.math.FunctionEvaluationException(10.0d, "", objArray36, (java.lang.Throwable) maxIterationsExceededException61);
        java.lang.Object[] objArray64 = functionEvaluationException63.getArguments();
        org.apache.commons.math.ConvergenceException convergenceException65 = new org.apache.commons.math.ConvergenceException("", objArray64);
        org.apache.commons.math.ConvergenceException convergenceException66 = new org.apache.commons.math.ConvergenceException("", objArray64);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException67 = new org.apache.commons.math.FunctionEvaluationException((double) 1, "org.apache.commons.math.ConvergenceException: ", objArray28, (java.lang.Throwable) convergenceException66);
        double double68 = functionEvaluationException67.getArgument();
        org.junit.Assert.assertNotNull(objArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray5), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray5), "[]");
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[0.0, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[0.0, 1]");
        org.junit.Assert.assertNotNull(objArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray18), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray18), "[]");
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray21), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray21), "[]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "org.apache.commons.math.FunctionEvaluationException: " + "'", str26, "org.apache.commons.math.FunctionEvaluationException: ");
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[0.0, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[0.0, 1]");
        org.junit.Assert.assertNotNull(objArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray36), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray36), "[]");
        org.junit.Assert.assertNotNull(objArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray42), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray42), "[]");
        org.junit.Assert.assertNotNull(objArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray45), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray45), "[]");
        org.junit.Assert.assertNotNull(objArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray59), "[0.0, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray59), "[0.0, 1]");
        org.junit.Assert.assertNotNull(objArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray64), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray64), "[]");
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 1.0d + "'", double68 == 1.0d);
    }

    @Test
    public void test06064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06064");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex1 = complex0.cosh();
        org.apache.commons.math.complex.Complex complex2 = complex0.log();
        org.apache.commons.math.complex.Complex complex3 = complex2.cos();
        org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex5 = complex4.cosh();
        double double6 = complex4.abs();
        org.apache.commons.math.complex.Complex complex7 = complex4.conjugate();
        org.apache.commons.math.complex.Complex complex8 = complex7.conjugate();
        boolean boolean9 = complex7.isInfinite();
        org.apache.commons.math.complex.Complex complex10 = complex7.asin();
        boolean boolean11 = complex7.isNaN();
        org.apache.commons.math.complex.Complex complex12 = complex7.negate();
        org.apache.commons.math.complex.Complex complex13 = complex12.sqrt1z();
        org.apache.commons.math.complex.Complex complex14 = complex2.multiply(complex12);
        org.apache.commons.math.complex.Complex complex15 = complex12.sqrt();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + Double.POSITIVE_INFINITY + "'", double6 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
    }

    @Test
    public void test06065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06065");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex1 = complex0.cosh();
        org.apache.commons.math.complex.Complex complex2 = complex0.log();
        org.apache.commons.math.complex.Complex complex3 = complex2.cos();
        org.apache.commons.math.complex.Complex complex4 = complex2.exp();
        org.apache.commons.math.complex.Complex complex5 = complex2.atan();
        org.apache.commons.math.complex.Complex complex6 = complex5.negate();
        org.apache.commons.math.complex.Complex complex7 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex8 = complex7.cosh();
        org.apache.commons.math.complex.Complex complex9 = complex7.log();
        org.apache.commons.math.complex.Complex complex10 = complex9.cos();
        double double11 = complex10.abs();
        org.apache.commons.math.complex.Complex complex12 = complex10.sqrt();
        org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex15 = complex14.sqrt();
        org.apache.commons.math.complex.Complex complex16 = complex15.sin();
        org.apache.commons.math.complex.Complex complex17 = complex13.pow(complex15);
        org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex19 = complex18.cosh();
        org.apache.commons.math.complex.Complex complex20 = complex18.log();
        org.apache.commons.math.complex.Complex complex21 = complex13.divide(complex20);
        org.apache.commons.math.complex.Complex complex22 = complex12.subtract(complex21);
        org.apache.commons.math.complex.Complex complex23 = complex12.conjugate();
        boolean boolean24 = complex23.isNaN();
        org.apache.commons.math.complex.Complex complex25 = complex23.sin();
        org.apache.commons.math.complex.Complex complex26 = complex23.cos();
        org.apache.commons.math.complex.Complex complex27 = complex23.tan();
        org.apache.commons.math.complex.Complex complex28 = complex6.divide(complex27);
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
    }

    @Test
    public void test06066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06066");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex1 = complex0.cosh();
        double double2 = complex0.abs();
        org.apache.commons.math.complex.Complex complex3 = complex0.conjugate();
        org.apache.commons.math.complex.Complex complex4 = complex3.conjugate();
        org.apache.commons.math.complex.Complex complex5 = complex3.tanh();
        org.apache.commons.math.complex.Complex complex6 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex7 = complex6.sqrt();
        org.apache.commons.math.complex.Complex complex8 = complex7.sin();
        org.apache.commons.math.complex.Complex complex9 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex10 = complex9.sqrt();
        org.apache.commons.math.complex.Complex complex11 = complex10.sin();
        org.apache.commons.math.complex.Complex complex12 = complex7.multiply(complex10);
        org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex14 = complex13.exp();
        org.apache.commons.math.complex.Complex complex15 = complex7.subtract(complex13);
        org.apache.commons.math.complex.Complex complex16 = complex5.add(complex7);
        org.apache.commons.math.complex.Complex complex17 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex18 = complex17.cosh();
        double double19 = complex17.abs();
        org.apache.commons.math.complex.Complex complex20 = complex17.conjugate();
        org.apache.commons.math.complex.Complex complex21 = complex20.conjugate();
        org.apache.commons.math.complex.Complex complex22 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex23 = complex22.tan();
        org.apache.commons.math.complex.Complex complex24 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex25 = complex24.cosh();
        org.apache.commons.math.complex.Complex complex26 = complex25.acos();
        double double27 = complex25.getReal();
        boolean boolean28 = complex23.equals((java.lang.Object) complex25);
        org.apache.commons.math.complex.Complex complex29 = complex21.subtract(complex25);
        org.apache.commons.math.complex.Complex complex30 = complex25.tanh();
        org.apache.commons.math.complex.Complex complex31 = complex30.exp();
        org.apache.commons.math.complex.Complex complex32 = complex5.subtract(complex31);
        org.apache.commons.math.complex.Complex complex33 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex34 = complex33.cosh();
        double double35 = complex33.abs();
        org.apache.commons.math.complex.Complex complex36 = complex33.conjugate();
        org.apache.commons.math.complex.Complex complex37 = complex36.conjugate();
        org.apache.commons.math.complex.Complex complex38 = complex36.tanh();
        boolean boolean39 = complex38.isNaN();
        org.apache.commons.math.complex.Complex complex40 = complex38.asin();
        org.apache.commons.math.complex.Complex complex41 = complex31.multiply(complex38);
        org.apache.commons.math.complex.Complex complex42 = complex41.atan();
        org.apache.commons.math.complex.Complex complex43 = complex42.sinh();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + Double.POSITIVE_INFINITY + "'", double2 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + Double.POSITIVE_INFINITY + "'", double19 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + Double.POSITIVE_INFINITY + "'", double35 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
    }

    @Test
    public void test06067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06067");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex1 = complex0.sqrt();
        org.apache.commons.math.complex.Complex complex2 = complex1.sin();
        org.apache.commons.math.complex.Complex complex3 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex4 = complex3.cosh();
        double double5 = complex3.abs();
        org.apache.commons.math.complex.Complex complex6 = complex3.conjugate();
        org.apache.commons.math.complex.Complex complex7 = complex6.conjugate();
        boolean boolean8 = complex6.isInfinite();
        org.apache.commons.math.complex.Complex complex9 = complex6.cos();
        org.apache.commons.math.complex.Complex complex10 = complex2.add(complex6);
        org.apache.commons.math.complex.Complex complex11 = complex2.conjugate();
        org.apache.commons.math.complex.Complex complex12 = complex11.sin();
        org.apache.commons.math.complex.Complex complex13 = complex12.cosh();
        org.apache.commons.math.complex.Complex complex14 = complex13.sqrt();
        java.lang.Object[] objArray20 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException21 = new org.apache.commons.math.ConvergenceException("", objArray20);
        java.lang.Object[] objArray26 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException27 = new org.apache.commons.math.ConvergenceException("", objArray26);
        java.lang.Object[] objArray29 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException30 = new org.apache.commons.math.ConvergenceException("", objArray29);
        org.apache.commons.math.ConvergenceException convergenceException31 = new org.apache.commons.math.ConvergenceException("", objArray26, (java.lang.Throwable) convergenceException30);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException33 = new org.apache.commons.math.FunctionEvaluationException((double) 100);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException34 = new org.apache.commons.math.FunctionEvaluationException(100.0d, "org.apache.commons.math.ConvergenceException: hi!", objArray26, (java.lang.Throwable) functionEvaluationException33);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException35 = new org.apache.commons.math.FunctionEvaluationException((double) '#', "", objArray20, (java.lang.Throwable) functionEvaluationException34);
        java.lang.String str36 = functionEvaluationException35.getPattern();
        double double37 = functionEvaluationException35.getArgument();
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException38 = new org.apache.commons.math.FunctionEvaluationException((double) (byte) 0, (java.lang.Throwable) functionEvaluationException35);
        org.apache.commons.math.ConvergenceException convergenceException39 = new org.apache.commons.math.ConvergenceException("hi!", (java.lang.Throwable) functionEvaluationException38);
        java.lang.Object[] objArray40 = convergenceException39.getArguments();
        boolean boolean41 = complex14.equals((java.lang.Object) objArray40);
        java.lang.Class<?> wildcardClass42 = complex14.getClass();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + Double.POSITIVE_INFINITY + "'", double5 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray20), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray20), "[]");
        org.junit.Assert.assertNotNull(objArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray26), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray26), "[]");
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray29), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray29), "[]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 35.0d + "'", double37 == 35.0d);
        org.junit.Assert.assertNotNull(objArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray40), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray40), "[]");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(wildcardClass42);
    }

    @Test
    public void test06068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06068");
        double[] doubleArray5 = new double[] { 0L, '#', 100.0f, 0L, (-1.0d) };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray5);
        double double8 = polynomialFunction6.value((double) 0);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver9 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        double[] doubleArray12 = new double[] { (byte) 1, 100 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction13 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray12);
        double double15 = polynomialFunction13.value((double) (short) 100);
        double[] doubleArray16 = polynomialFunction13.getCoefficients();
        org.apache.commons.math.complex.Complex[] complexArray18 = laguerreSolver9.solveAll(doubleArray16, (double) (short) 10);
        laguerreSolver9.setMaximalIterationCount((int) (byte) 10);
        laguerreSolver9.resetRelativeAccuracy();
        laguerreSolver9.resetRelativeAccuracy();
        laguerreSolver9.resetFunctionValueAccuracy();
        // The following exception was thrown during execution in test generation
        try {
            double double27 = laguerreSolver9.solve((-5.62755502169E11d), (-1.9649899E7d), (-1.0410151717904442E16d));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Function values at endpoints do not have different signs.  Endpoints: [-5.62755502169E11,-1.9649899E7]  Values: [-1.002949345962848E47,-1.4908751975776582E29]");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[0.0, 35.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 10001.0d + "'", double15 == 10001.0d);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(complexArray18);
    }

    @Test
    public void test06069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06069");
        double[] doubleArray2 = new double[] { (byte) 1, 100 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) (short) 100);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver6 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction3);
        double double10 = laguerreSolver6.solve((double) (-1L), 349.0d, (double) (short) 10);
        laguerreSolver6.setMaximalIterationCount((int) '#');
        laguerreSolver6.setMaximalIterationCount((int) ' ');
        laguerreSolver6.resetAbsoluteAccuracy();
        laguerreSolver6.setFunctionValueAccuracy((-161.0d));
        laguerreSolver6.setMaximalIterationCount((int) (short) -1);
        double double20 = laguerreSolver6.getRelativeAccuracy();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 10001.0d + "'", double5 == 10001.0d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + (-0.01d) + "'", double10 == (-0.01d));
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 1.0E-14d + "'", double20 == 1.0E-14d);
    }

    @Test
    public void test06070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06070");
        double[] doubleArray5 = new double[] { 0L, '#', 100.0f, 0L, (-1.0d) };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray5);
        double double8 = polynomialFunction6.value((double) 0);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver9 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver9.resetMaximalIterationCount();
        int int11 = laguerreSolver9.getMaximalIterationCount();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction12 = laguerreSolver9.getPolynomialFunction();
        // The following exception was thrown during execution in test generation
        try {
            double double16 = laguerreSolver9.solve((double) 12, 21.0d, (-1219546.0d));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Function values at endpoints do not have different signs.  Endpoints: [12.0,21.0]  Values: [-5916.0,-149646.0]");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[0.0, 35.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 100 + "'", int11 == 100);
        org.junit.Assert.assertNotNull(polynomialFunction12);
    }

    @Test
    public void test06071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06071");
        double[] doubleArray2 = new double[] { (byte) 1, 100 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) (short) 100);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver6 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction3);
        double double10 = laguerreSolver6.solve((double) (-1L), 349.0d, (double) (short) 10);
        double double11 = laguerreSolver6.getResult();
        double double12 = laguerreSolver6.getFunctionValueAccuracy();
        laguerreSolver6.resetRelativeAccuracy();
        laguerreSolver6.resetMaximalIterationCount();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction15 = laguerreSolver6.getPolynomialFunction();
        laguerreSolver6.setFunctionValueAccuracy((-1.6365376E7d));
        int int18 = laguerreSolver6.getIterationCount();
        laguerreSolver6.setRelativeAccuracy(13168.847730989726d);
        laguerreSolver6.resetFunctionValueAccuracy();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 10001.0d + "'", double5 == 10001.0d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + (-0.01d) + "'", double10 == (-0.01d));
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + (-0.01d) + "'", double11 == (-0.01d));
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 1.0E-15d + "'", double12 == 1.0E-15d);
        org.junit.Assert.assertNotNull(polynomialFunction15);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 3 + "'", int18 == 3);
    }

    @Test
    public void test06072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06072");
        java.lang.Object[] objArray5 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException6 = new org.apache.commons.math.ConvergenceException("", objArray5);
        java.lang.Object[] objArray11 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException12 = new org.apache.commons.math.ConvergenceException("", objArray11);
        java.lang.Object[] objArray14 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException15 = new org.apache.commons.math.ConvergenceException("", objArray14);
        org.apache.commons.math.ConvergenceException convergenceException16 = new org.apache.commons.math.ConvergenceException("", objArray11, (java.lang.Throwable) convergenceException15);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException18 = new org.apache.commons.math.FunctionEvaluationException((double) 100);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException19 = new org.apache.commons.math.FunctionEvaluationException(100.0d, "org.apache.commons.math.ConvergenceException: hi!", objArray11, (java.lang.Throwable) functionEvaluationException18);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException20 = new org.apache.commons.math.FunctionEvaluationException((double) '#', "", objArray5, (java.lang.Throwable) functionEvaluationException19);
        java.lang.Object[] objArray28 = new java.lang.Object[] { 0.0f, (short) 1 };
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException29 = new org.apache.commons.math.MaxIterationsExceededException(100, "", objArray28);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException30 = new org.apache.commons.math.MaxIterationsExceededException((int) ' ', "hi!", objArray28);
        org.apache.commons.math.ConvergenceException convergenceException31 = new org.apache.commons.math.ConvergenceException("", (java.lang.Throwable) maxIterationsExceededException30);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException32 = new org.apache.commons.math.FunctionEvaluationException(10.0d, "", objArray5, (java.lang.Throwable) maxIterationsExceededException30);
        org.apache.commons.math.ConvergenceException convergenceException33 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) maxIterationsExceededException30);
        java.lang.String str34 = maxIterationsExceededException30.getPattern();
        java.lang.Object[] objArray35 = maxIterationsExceededException30.getArguments();
        org.junit.Assert.assertNotNull(objArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray5), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray5), "[]");
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[]");
        org.junit.Assert.assertNotNull(objArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray14), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray14), "[]");
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[0.0, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[0.0, 1]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "hi!" + "'", str34, "hi!");
        org.junit.Assert.assertNotNull(objArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray35), "[0.0, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray35), "[0.0, 1]");
    }

    @Test
    public void test06073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06073");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex1 = complex0.sqrt();
        org.apache.commons.math.complex.Complex complex2 = complex1.sin();
        org.apache.commons.math.complex.Complex complex3 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex4 = complex3.sqrt();
        org.apache.commons.math.complex.Complex complex5 = complex4.sin();
        org.apache.commons.math.complex.Complex complex6 = complex1.multiply(complex4);
        org.apache.commons.math.complex.Complex complex7 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex8 = complex7.exp();
        org.apache.commons.math.complex.Complex complex9 = complex1.subtract(complex7);
        org.apache.commons.math.complex.Complex complex10 = complex9.sqrt1z();
        org.apache.commons.math.complex.Complex complex11 = null;
        org.apache.commons.math.complex.Complex complex12 = complex10.divide(complex11);
        org.apache.commons.math.complex.Complex complex13 = complex10.negate();
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex15 = complex14.cosh();
        org.apache.commons.math.complex.Complex complex16 = complex14.log();
        org.apache.commons.math.complex.Complex complex17 = complex14.sin();
        org.apache.commons.math.complex.Complex complex18 = complex14.log();
        org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex20 = complex19.sqrt();
        org.apache.commons.math.complex.Complex complex21 = complex14.divide(complex20);
        org.apache.commons.math.complex.Complex complex22 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex23 = complex22.cosh();
        double double24 = complex22.abs();
        org.apache.commons.math.complex.Complex complex25 = complex22.conjugate();
        org.apache.commons.math.complex.Complex complex26 = complex25.conjugate();
        org.apache.commons.math.complex.Complex complex27 = complex21.subtract(complex26);
        org.apache.commons.math.complex.Complex complex28 = complex21.exp();
        org.apache.commons.math.complex.Complex complex29 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex30 = complex29.cosh();
        org.apache.commons.math.complex.Complex complex31 = complex30.acos();
        org.apache.commons.math.complex.Complex complex32 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex33 = complex32.cosh();
        org.apache.commons.math.complex.Complex complex34 = complex32.log();
        org.apache.commons.math.complex.Complex complex35 = complex32.sin();
        org.apache.commons.math.complex.Complex complex36 = complex35.tanh();
        org.apache.commons.math.complex.Complex complex37 = complex30.add(complex36);
        boolean boolean38 = complex21.equals((java.lang.Object) complex30);
        org.apache.commons.math.complex.Complex complex39 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex40 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex41 = complex40.sqrt();
        org.apache.commons.math.complex.Complex complex42 = complex41.sin();
        org.apache.commons.math.complex.Complex complex43 = complex39.pow(complex41);
        org.apache.commons.math.complex.Complex complex44 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex45 = complex44.cosh();
        org.apache.commons.math.complex.Complex complex46 = complex44.log();
        org.apache.commons.math.complex.Complex complex47 = complex39.divide(complex46);
        org.apache.commons.math.complex.Complex complex48 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex49 = complex48.sqrt();
        org.apache.commons.math.complex.Complex complex50 = complex48.sin();
        org.apache.commons.math.complex.Complex complex51 = complex47.pow(complex48);
        org.apache.commons.math.complex.Complex complex52 = complex30.pow(complex51);
        org.apache.commons.math.complex.Complex complex53 = complex30.tanh();
        boolean boolean54 = complex10.equals((java.lang.Object) complex53);
        boolean boolean55 = complex10.isInfinite();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + Double.POSITIVE_INFINITY + "'", double24 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
    }

    @Test
    public void test06074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06074");
        java.lang.Object[] objArray10 = new java.lang.Object[] { 0.0f, (short) 1 };
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException11 = new org.apache.commons.math.MaxIterationsExceededException(100, "", objArray10);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException12 = new org.apache.commons.math.MaxIterationsExceededException((int) ' ', "hi!", objArray10);
        java.lang.Object[] objArray17 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException18 = new org.apache.commons.math.ConvergenceException("", objArray17);
        java.lang.Object[] objArray20 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException21 = new org.apache.commons.math.ConvergenceException("", objArray20);
        org.apache.commons.math.ConvergenceException convergenceException22 = new org.apache.commons.math.ConvergenceException("", objArray17, (java.lang.Throwable) convergenceException21);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException24 = new org.apache.commons.math.FunctionEvaluationException((double) 100);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException25 = new org.apache.commons.math.FunctionEvaluationException(100.0d, "org.apache.commons.math.ConvergenceException: hi!", objArray17, (java.lang.Throwable) functionEvaluationException24);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException26 = new org.apache.commons.math.FunctionEvaluationException((double) 100L, "org.apache.commons.math.ConvergenceException: hi!", objArray10, (java.lang.Throwable) functionEvaluationException25);
        double double27 = functionEvaluationException25.getArgument();
        org.apache.commons.math.ConvergenceException convergenceException28 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.MaxIterationsExceededException: ", (java.lang.Throwable) functionEvaluationException25);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException30 = new org.apache.commons.math.MaxIterationsExceededException((int) '4');
        functionEvaluationException25.addSuppressed((java.lang.Throwable) maxIterationsExceededException30);
        org.apache.commons.math.ConvergenceException convergenceException33 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.FunctionEvaluationException: ");
        maxIterationsExceededException30.addSuppressed((java.lang.Throwable) convergenceException33);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException35 = new org.apache.commons.math.FunctionEvaluationException(349.0d, (java.lang.Throwable) maxIterationsExceededException30);
        java.lang.String str36 = functionEvaluationException35.getPattern();
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[0.0, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[0.0, 1]");
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray17), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray17), "[]");
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray20), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray20), "[]");
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 100.0d + "'", double27 == 100.0d);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "Maximal number of iterations (52) exceeded" + "'", str36, "Maximal number of iterations (52) exceeded");
    }

    @Test
    public void test06075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06075");
        org.apache.commons.math.ConvergenceException convergenceException1 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.FunctionEvaluationException: org.apache.commons.math.FunctionEvaluationException: ");
        java.lang.String str2 = convergenceException1.getPattern();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "org.apache.commons.math.FunctionEvaluationException: org.apache.commons.math.FunctionEvaluationException: " + "'", str2, "org.apache.commons.math.FunctionEvaluationException: org.apache.commons.math.FunctionEvaluationException: ");
    }

    @Test
    public void test06076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06076");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex1 = complex0.tan();
        double double2 = complex0.getReal();
        org.apache.commons.math.complex.Complex complex3 = complex0.asin();
        org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex5 = complex4.cosh();
        double double6 = complex4.abs();
        org.apache.commons.math.complex.Complex complex7 = complex4.conjugate();
        org.apache.commons.math.complex.Complex complex8 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex9 = complex8.sqrt();
        boolean boolean10 = complex8.isNaN();
        org.apache.commons.math.complex.Complex complex11 = complex8.sin();
        org.apache.commons.math.complex.Complex complex12 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex14 = complex13.sqrt();
        org.apache.commons.math.complex.Complex complex15 = complex14.sin();
        org.apache.commons.math.complex.Complex complex16 = complex12.pow(complex14);
        org.apache.commons.math.complex.Complex complex17 = complex16.asin();
        org.apache.commons.math.complex.Complex complex18 = complex17.atan();
        boolean boolean19 = complex18.isInfinite();
        org.apache.commons.math.complex.Complex complex20 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex21 = complex18.subtract(complex20);
        org.apache.commons.math.complex.Complex complex22 = complex21.sin();
        org.apache.commons.math.complex.Complex complex23 = complex8.divide(complex22);
        org.apache.commons.math.complex.Complex complex24 = complex4.subtract(complex22);
        org.apache.commons.math.complex.Complex complex25 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex26 = complex25.cosh();
        org.apache.commons.math.complex.Complex complex27 = complex25.log();
        org.apache.commons.math.complex.Complex complex28 = complex25.sin();
        org.apache.commons.math.complex.Complex complex29 = complex25.log();
        org.apache.commons.math.complex.Complex complex30 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex31 = complex30.sqrt();
        org.apache.commons.math.complex.Complex complex32 = complex25.divide(complex31);
        org.apache.commons.math.complex.Complex complex33 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex34 = complex33.cosh();
        double double35 = complex33.abs();
        org.apache.commons.math.complex.Complex complex36 = complex33.conjugate();
        org.apache.commons.math.complex.Complex complex37 = complex36.conjugate();
        org.apache.commons.math.complex.Complex complex38 = complex32.subtract(complex37);
        org.apache.commons.math.complex.Complex complex39 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex40 = complex39.cosh();
        org.apache.commons.math.complex.Complex complex41 = complex39.log();
        org.apache.commons.math.complex.Complex complex42 = complex39.sin();
        org.apache.commons.math.complex.Complex complex43 = complex39.log();
        org.apache.commons.math.complex.Complex complex44 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex45 = complex44.sqrt();
        org.apache.commons.math.complex.Complex complex46 = complex39.divide(complex45);
        org.apache.commons.math.complex.Complex complex47 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex48 = complex47.cosh();
        double double49 = complex47.abs();
        org.apache.commons.math.complex.Complex complex50 = complex47.conjugate();
        org.apache.commons.math.complex.Complex complex51 = complex50.conjugate();
        org.apache.commons.math.complex.Complex complex52 = complex46.subtract(complex51);
        org.apache.commons.math.complex.Complex complex53 = complex46.exp();
        org.apache.commons.math.complex.Complex complex54 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex55 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex56 = complex55.sqrt();
        org.apache.commons.math.complex.Complex complex57 = complex56.sin();
        org.apache.commons.math.complex.Complex complex58 = complex54.pow(complex56);
        org.apache.commons.math.complex.Complex complex59 = complex58.asin();
        org.apache.commons.math.complex.Complex complex60 = complex59.atan();
        org.apache.commons.math.complex.Complex complex61 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex62 = complex61.cosh();
        boolean boolean63 = complex60.equals((java.lang.Object) complex61);
        org.apache.commons.math.complex.Complex complex64 = complex46.divide(complex61);
        org.apache.commons.math.complex.Complex complex65 = complex32.add(complex61);
        boolean boolean66 = complex24.equals((java.lang.Object) complex65);
        double double67 = complex65.getImaginary();
        org.apache.commons.math.complex.Complex complex68 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex69 = complex68.cosh();
        double double70 = complex68.abs();
        org.apache.commons.math.complex.Complex complex71 = complex68.conjugate();
        org.apache.commons.math.complex.Complex complex72 = complex71.conjugate();
        boolean boolean73 = complex71.isInfinite();
        org.apache.commons.math.complex.Complex complex74 = complex71.cos();
        org.apache.commons.math.complex.Complex complex75 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex76 = complex75.cosh();
        double double77 = complex75.abs();
        org.apache.commons.math.complex.Complex complex78 = complex75.conjugate();
        org.apache.commons.math.complex.Complex complex79 = complex78.conjugate();
        boolean boolean80 = complex78.isInfinite();
        org.apache.commons.math.complex.Complex complex81 = complex78.asin();
        boolean boolean82 = complex78.isNaN();
        org.apache.commons.math.complex.Complex complex83 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex84 = complex83.cosh();
        org.apache.commons.math.complex.Complex complex85 = complex78.divide(complex83);
        org.apache.commons.math.complex.Complex complex86 = complex74.divide(complex83);
        org.apache.commons.math.complex.Complex complex87 = complex83.sinh();
        org.apache.commons.math.complex.Complex complex88 = complex87.conjugate();
        org.apache.commons.math.complex.Complex complex89 = complex87.acos();
        org.apache.commons.math.complex.Complex complex90 = complex65.multiply(complex87);
        org.apache.commons.math.complex.Complex complex91 = complex65.conjugate();
        org.apache.commons.math.complex.Complex complex92 = complex3.add(complex91);
        double double93 = complex92.abs();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + Double.POSITIVE_INFINITY + "'", double2 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + Double.POSITIVE_INFINITY + "'", double6 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + Double.POSITIVE_INFINITY + "'", double35 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + Double.POSITIVE_INFINITY + "'", double49 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double67));
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + Double.POSITIVE_INFINITY + "'", double70 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertNotNull(complex75);
        org.junit.Assert.assertNotNull(complex76);
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + Double.POSITIVE_INFINITY + "'", double77 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex78);
        org.junit.Assert.assertNotNull(complex79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertNotNull(complex81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(complex83);
        org.junit.Assert.assertNotNull(complex84);
        org.junit.Assert.assertNotNull(complex85);
        org.junit.Assert.assertNotNull(complex86);
        org.junit.Assert.assertNotNull(complex87);
        org.junit.Assert.assertNotNull(complex88);
        org.junit.Assert.assertNotNull(complex89);
        org.junit.Assert.assertNotNull(complex90);
        org.junit.Assert.assertNotNull(complex91);
        org.junit.Assert.assertNotNull(complex92);
        org.junit.Assert.assertTrue(Double.isNaN(double93));
    }

    @Test
    public void test06077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06077");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex1 = complex0.cosh();
        org.apache.commons.math.complex.Complex complex2 = complex0.log();
        org.apache.commons.math.complex.Complex complex3 = complex0.sin();
        org.apache.commons.math.complex.Complex complex4 = complex0.log();
        org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex6 = complex5.sqrt();
        org.apache.commons.math.complex.Complex complex7 = complex0.divide(complex6);
        org.apache.commons.math.complex.Complex complex8 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex9 = complex8.cosh();
        double double10 = complex8.abs();
        org.apache.commons.math.complex.Complex complex11 = complex8.conjugate();
        org.apache.commons.math.complex.Complex complex12 = complex11.conjugate();
        org.apache.commons.math.complex.Complex complex13 = complex7.subtract(complex12);
        org.apache.commons.math.complex.Complex complex14 = complex7.exp();
        org.apache.commons.math.complex.Complex complex15 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex16 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex17 = complex16.sqrt();
        org.apache.commons.math.complex.Complex complex18 = complex17.sin();
        org.apache.commons.math.complex.Complex complex19 = complex15.pow(complex17);
        org.apache.commons.math.complex.Complex complex20 = complex19.asin();
        org.apache.commons.math.complex.Complex complex21 = complex20.atan();
        org.apache.commons.math.complex.Complex complex22 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex23 = complex22.cosh();
        boolean boolean24 = complex21.equals((java.lang.Object) complex22);
        org.apache.commons.math.complex.Complex complex25 = complex7.divide(complex22);
        org.apache.commons.math.complex.Complex complex26 = complex25.acos();
        org.apache.commons.math.complex.Complex complex27 = complex25.acos();
        org.apache.commons.math.complex.Complex complex28 = complex27.sin();
        org.apache.commons.math.complex.Complex complex29 = complex27.log();
        org.apache.commons.math.complex.Complex complex30 = complex27.sinh();
        org.apache.commons.math.complex.Complex complex31 = complex27.tan();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + Double.POSITIVE_INFINITY + "'", double10 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
    }

    @Test
    public void test06078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06078");
        double[] doubleArray2 = new double[] { (byte) 1, 100 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) (short) 100);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver6 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction3);
        double double7 = laguerreSolver6.getAbsoluteAccuracy();
        laguerreSolver6.resetAbsoluteAccuracy();
        laguerreSolver6.setAbsoluteAccuracy(100.0d);
        int int11 = laguerreSolver6.getMaximalIterationCount();
        double double12 = laguerreSolver6.getRelativeAccuracy();
        laguerreSolver6.setMaximalIterationCount(5);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 10001.0d + "'", double5 == 10001.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 1.0E-6d + "'", double7 == 1.0E-6d);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 100 + "'", int11 == 100);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 1.0E-14d + "'", double12 == 1.0E-14d);
    }

    @Test
    public void test06079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06079");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex1 = complex0.cosh();
        org.apache.commons.math.complex.Complex complex2 = complex0.log();
        org.apache.commons.math.complex.Complex complex3 = complex2.cos();
        org.apache.commons.math.complex.Complex complex4 = complex2.exp();
        boolean boolean5 = complex2.isNaN();
        org.apache.commons.math.complex.Complex complex6 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex7 = complex6.cosh();
        double double8 = complex6.abs();
        org.apache.commons.math.complex.Complex complex9 = complex6.conjugate();
        org.apache.commons.math.complex.Complex complex10 = complex9.conjugate();
        org.apache.commons.math.complex.Complex complex11 = complex9.tanh();
        org.apache.commons.math.complex.Complex complex12 = complex2.multiply(complex9);
        org.apache.commons.math.complex.Complex complex13 = complex9.acos();
        org.apache.commons.math.complex.Complex complex14 = complex13.cosh();
        org.apache.commons.math.complex.Complex complex15 = complex13.sqrt1z();
        java.lang.Object[] objArray21 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException22 = new org.apache.commons.math.ConvergenceException("", objArray21);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException23 = new org.apache.commons.math.FunctionEvaluationException((double) (short) 10, "hi!", objArray21);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException24 = new org.apache.commons.math.MaxIterationsExceededException((int) (byte) 0, "org.apache.commons.math.ConvergenceException: hi!", objArray21);
        java.lang.Object[] objArray25 = maxIterationsExceededException24.getArguments();
        int int26 = maxIterationsExceededException24.getMaxIterations();
        boolean boolean27 = complex13.equals((java.lang.Object) int26);
        org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex29 = complex28.tan();
        org.apache.commons.math.complex.Complex complex30 = complex29.sinh();
        org.apache.commons.math.complex.Complex complex31 = complex29.tanh();
        org.apache.commons.math.complex.Complex complex32 = complex13.multiply(complex31);
        org.apache.commons.math.complex.Complex complex33 = complex32.sqrt();
        org.apache.commons.math.complex.Complex complex34 = complex32.exp();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + Double.POSITIVE_INFINITY + "'", double8 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray21), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray21), "[]");
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
    }

    @Test
    public void test06080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06080");
        double[] doubleArray2 = new double[] { (byte) 1, 100 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) (short) 100);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver6 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction3);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction7 = laguerreSolver6.getPolynomialFunction();
        double double8 = laguerreSolver6.getRelativeAccuracy();
        laguerreSolver6.resetRelativeAccuracy();
        laguerreSolver6.resetFunctionValueAccuracy();
        laguerreSolver6.resetFunctionValueAccuracy();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction12 = laguerreSolver6.getPolynomialFunction();
        laguerreSolver6.setRelativeAccuracy(52.0d);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 10001.0d + "'", double5 == 10001.0d);
        org.junit.Assert.assertNotNull(polynomialFunction7);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 1.0E-14d + "'", double8 == 1.0E-14d);
        org.junit.Assert.assertNotNull(polynomialFunction12);
    }

    @Test
    public void test06081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06081");
        double[] doubleArray2 = new double[] { (byte) 1, 100 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) (short) 100);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver6 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction3);
        double double10 = laguerreSolver6.solve((double) (-1L), 349.0d, (double) (short) 10);
        laguerreSolver6.setMaximalIterationCount((int) '#');
        laguerreSolver6.setMaximalIterationCount((int) ' ');
        laguerreSolver6.resetAbsoluteAccuracy();
        laguerreSolver6.setFunctionValueAccuracy((-161.0d));
        laguerreSolver6.resetAbsoluteAccuracy();
        laguerreSolver6.setAbsoluteAccuracy((-161.0d));
        laguerreSolver6.resetAbsoluteAccuracy();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 10001.0d + "'", double5 == 10001.0d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + (-0.01d) + "'", double10 == (-0.01d));
    }

    @Test
    public void test06082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06082");
        double[] doubleArray5 = new double[] { 0L, '#', 100.0f, 0L, (-1.0d) };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray5);
        double double8 = polynomialFunction6.value((double) 0);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver9 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        double[] doubleArray12 = new double[] { (byte) 1, 100 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction13 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray12);
        double double15 = polynomialFunction13.value((double) (short) 100);
        double[] doubleArray16 = polynomialFunction13.getCoefficients();
        org.apache.commons.math.complex.Complex[] complexArray18 = laguerreSolver9.solveAll(doubleArray16, (double) (short) 10);
        laguerreSolver9.setMaximalIterationCount((int) (byte) 10);
        laguerreSolver9.resetRelativeAccuracy();
        double double25 = laguerreSolver9.solve(1.0E-6d, (double) 32, 0.0d);
        int int26 = laguerreSolver9.getIterationCount();
        double double27 = laguerreSolver9.getFunctionValueAccuracy();
        int int28 = laguerreSolver9.getIterationCount();
        laguerreSolver9.resetFunctionValueAccuracy();
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[0.0, 35.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 10001.0d + "'", double15 == 10001.0d);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(complexArray18);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.0d + "'", double25 == 0.0d);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 3 + "'", int26 == 3);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 1.0E-15d + "'", double27 == 1.0E-15d);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 3 + "'", int28 == 3);
    }

    @Test
    public void test06083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06083");
        double[] doubleArray2 = new double[] { (byte) 1, 100 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) (short) 100);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver6 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction3);
        double double10 = laguerreSolver6.solve((double) (-1L), 349.0d, (double) (short) 10);
        laguerreSolver6.setMaximalIterationCount((int) '#');
        laguerreSolver6.setMaximalIterationCount((int) ' ');
        laguerreSolver6.resetAbsoluteAccuracy();
        laguerreSolver6.setFunctionValueAccuracy((-161.0d));
        laguerreSolver6.setMaximalIterationCount((int) (short) 10);
        int int20 = laguerreSolver6.getMaximalIterationCount();
        // The following exception was thrown during execution in test generation
        try {
            double double24 = laguerreSolver6.solve((double) '#', (-2.036018575079906E69d), 1.0300000099E10d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Endpoints do not specify an interval: [35.0,-2.036018575079906E69]");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 10001.0d + "'", double5 == 10001.0d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + (-0.01d) + "'", double10 == (-0.01d));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 10 + "'", int20 == 10);
    }

    @Test
    public void test06084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06084");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex2 = complex1.sqrt();
        org.apache.commons.math.complex.Complex complex3 = complex2.sin();
        org.apache.commons.math.complex.Complex complex4 = complex0.pow(complex2);
        org.apache.commons.math.complex.Complex complex5 = complex4.asin();
        org.apache.commons.math.complex.Complex complex6 = complex4.sinh();
        double double7 = complex4.abs();
        org.apache.commons.math.complex.Complex complex8 = complex4.sin();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertNotNull(complex8);
    }

    @Test
    public void test06085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06085");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex1 = complex0.cosh();
        double double2 = complex0.abs();
        org.apache.commons.math.complex.Complex complex3 = complex0.conjugate();
        org.apache.commons.math.complex.Complex complex4 = complex3.conjugate();
        org.apache.commons.math.complex.Complex complex5 = complex3.tanh();
        org.apache.commons.math.complex.Complex complex6 = complex5.tan();
        org.apache.commons.math.complex.Complex complex7 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex8 = complex7.cosh();
        double double9 = complex7.abs();
        org.apache.commons.math.complex.Complex complex10 = complex7.conjugate();
        org.apache.commons.math.complex.Complex complex11 = complex10.conjugate();
        org.apache.commons.math.complex.Complex complex12 = complex6.subtract(complex10);
        org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex15 = complex14.sqrt();
        org.apache.commons.math.complex.Complex complex16 = complex15.sin();
        org.apache.commons.math.complex.Complex complex17 = complex13.pow(complex15);
        org.apache.commons.math.complex.Complex complex18 = complex17.asin();
        org.apache.commons.math.complex.Complex complex19 = complex17.tan();
        org.apache.commons.math.complex.Complex complex20 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex21 = complex20.cosh();
        double double22 = complex20.abs();
        org.apache.commons.math.complex.Complex complex23 = complex20.conjugate();
        org.apache.commons.math.complex.Complex complex24 = complex23.conjugate();
        boolean boolean25 = complex23.isInfinite();
        org.apache.commons.math.complex.Complex complex26 = complex23.asin();
        boolean boolean27 = complex23.isNaN();
        org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex29 = complex28.cosh();
        org.apache.commons.math.complex.Complex complex30 = complex23.divide(complex28);
        org.apache.commons.math.complex.Complex complex31 = complex19.pow(complex28);
        org.apache.commons.math.complex.Complex complex32 = complex12.divide(complex19);
        org.apache.commons.math.complex.Complex complex33 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex34 = complex33.cosh();
        double double35 = complex33.abs();
        org.apache.commons.math.complex.Complex complex36 = complex33.conjugate();
        org.apache.commons.math.complex.Complex complex37 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex38 = complex37.sqrt();
        boolean boolean39 = complex37.isNaN();
        org.apache.commons.math.complex.Complex complex40 = complex37.sin();
        org.apache.commons.math.complex.Complex complex41 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex42 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex43 = complex42.sqrt();
        org.apache.commons.math.complex.Complex complex44 = complex43.sin();
        org.apache.commons.math.complex.Complex complex45 = complex41.pow(complex43);
        org.apache.commons.math.complex.Complex complex46 = complex45.asin();
        org.apache.commons.math.complex.Complex complex47 = complex46.atan();
        boolean boolean48 = complex47.isInfinite();
        org.apache.commons.math.complex.Complex complex49 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex50 = complex47.subtract(complex49);
        org.apache.commons.math.complex.Complex complex51 = complex50.sin();
        org.apache.commons.math.complex.Complex complex52 = complex37.divide(complex51);
        org.apache.commons.math.complex.Complex complex53 = complex33.subtract(complex51);
        double double54 = complex53.abs();
        org.apache.commons.math.complex.Complex complex55 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex56 = complex55.cosh();
        double double57 = complex55.abs();
        org.apache.commons.math.complex.Complex complex58 = complex55.conjugate();
        org.apache.commons.math.complex.Complex complex59 = complex58.conjugate();
        boolean boolean60 = complex58.isInfinite();
        org.apache.commons.math.complex.Complex complex61 = complex58.cos();
        org.apache.commons.math.complex.Complex complex62 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex63 = complex62.cosh();
        double double64 = complex62.abs();
        org.apache.commons.math.complex.Complex complex65 = complex62.conjugate();
        org.apache.commons.math.complex.Complex complex66 = complex65.conjugate();
        boolean boolean67 = complex65.isInfinite();
        org.apache.commons.math.complex.Complex complex68 = complex65.asin();
        boolean boolean69 = complex65.isNaN();
        org.apache.commons.math.complex.Complex complex70 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex71 = complex70.cosh();
        org.apache.commons.math.complex.Complex complex72 = complex65.divide(complex70);
        org.apache.commons.math.complex.Complex complex73 = complex61.divide(complex70);
        org.apache.commons.math.complex.Complex complex74 = complex70.sinh();
        org.apache.commons.math.complex.Complex complex75 = complex74.conjugate();
        org.apache.commons.math.complex.Complex complex76 = complex74.acos();
        org.apache.commons.math.complex.Complex complex77 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex78 = complex77.cosh();
        org.apache.commons.math.complex.Complex complex79 = complex78.acos();
        org.apache.commons.math.complex.Complex complex80 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex81 = complex80.cosh();
        org.apache.commons.math.complex.Complex complex82 = complex80.log();
        org.apache.commons.math.complex.Complex complex83 = complex80.sin();
        org.apache.commons.math.complex.Complex complex84 = complex83.tanh();
        org.apache.commons.math.complex.Complex complex85 = complex78.add(complex84);
        org.apache.commons.math.complex.Complex complex86 = complex76.pow(complex84);
        org.apache.commons.math.complex.Complex complex87 = complex53.multiply(complex84);
        org.apache.commons.math.complex.Complex complex88 = complex12.add(complex53);
        org.apache.commons.math.complex.Complex complex89 = complex12.tanh();
        org.apache.commons.math.complex.Complex complex90 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex91 = complex90.tan();
        org.apache.commons.math.complex.Complex complex92 = complex90.cos();
        org.apache.commons.math.complex.Complex complex93 = complex90.tanh();
        org.apache.commons.math.complex.Complex complex94 = complex93.sin();
        org.apache.commons.math.complex.Complex complex95 = complex89.pow(complex94);
        org.apache.commons.math.complex.Complex complex96 = complex89.tanh();
        org.apache.commons.math.complex.Complex complex97 = complex96.sinh();
        org.apache.commons.math.complex.Complex complex98 = complex96.cosh();
        double double99 = complex98.getReal();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + Double.POSITIVE_INFINITY + "'", double2 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + Double.POSITIVE_INFINITY + "'", double9 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + Double.POSITIVE_INFINITY + "'", double22 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + Double.POSITIVE_INFINITY + "'", double35 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertTrue(Double.isNaN(double54));
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + Double.POSITIVE_INFINITY + "'", double57 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + Double.POSITIVE_INFINITY + "'", double64 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertNotNull(complex75);
        org.junit.Assert.assertNotNull(complex76);
        org.junit.Assert.assertNotNull(complex77);
        org.junit.Assert.assertNotNull(complex78);
        org.junit.Assert.assertNotNull(complex79);
        org.junit.Assert.assertNotNull(complex80);
        org.junit.Assert.assertNotNull(complex81);
        org.junit.Assert.assertNotNull(complex82);
        org.junit.Assert.assertNotNull(complex83);
        org.junit.Assert.assertNotNull(complex84);
        org.junit.Assert.assertNotNull(complex85);
        org.junit.Assert.assertNotNull(complex86);
        org.junit.Assert.assertNotNull(complex87);
        org.junit.Assert.assertNotNull(complex88);
        org.junit.Assert.assertNotNull(complex89);
        org.junit.Assert.assertNotNull(complex90);
        org.junit.Assert.assertNotNull(complex91);
        org.junit.Assert.assertNotNull(complex92);
        org.junit.Assert.assertNotNull(complex93);
        org.junit.Assert.assertNotNull(complex94);
        org.junit.Assert.assertNotNull(complex95);
        org.junit.Assert.assertNotNull(complex96);
        org.junit.Assert.assertNotNull(complex97);
        org.junit.Assert.assertNotNull(complex98);
        org.junit.Assert.assertTrue(Double.isNaN(double99));
    }

    @Test
    public void test06086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06086");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex1 = complex0.cosh();
        org.apache.commons.math.complex.Complex complex2 = complex1.acos();
        org.apache.commons.math.complex.Complex complex3 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex4 = complex3.cosh();
        org.apache.commons.math.complex.Complex complex5 = complex3.log();
        org.apache.commons.math.complex.Complex complex6 = complex3.sin();
        org.apache.commons.math.complex.Complex complex7 = complex6.tanh();
        org.apache.commons.math.complex.Complex complex8 = complex1.add(complex7);
        org.apache.commons.math.complex.Complex complex9 = org.apache.commons.math.complex.Complex.INF;
        boolean boolean10 = complex9.isInfinite();
        org.apache.commons.math.complex.Complex complex11 = complex1.divide(complex9);
        org.apache.commons.math.complex.Complex complex12 = complex9.cos();
        org.apache.commons.math.complex.Complex complex13 = complex9.asin();
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex15 = complex14.cosh();
        org.apache.commons.math.complex.Complex complex16 = complex14.log();
        org.apache.commons.math.complex.Complex complex17 = complex14.sin();
        org.apache.commons.math.complex.Complex complex18 = complex14.log();
        org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex20 = complex19.sqrt();
        org.apache.commons.math.complex.Complex complex21 = complex14.divide(complex20);
        org.apache.commons.math.complex.Complex complex22 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex23 = complex22.cosh();
        org.apache.commons.math.complex.Complex complex24 = complex23.acos();
        double double25 = complex23.getReal();
        org.apache.commons.math.complex.Complex complex26 = complex23.sqrt();
        org.apache.commons.math.complex.Complex complex27 = complex14.pow(complex23);
        org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex29 = complex28.cosh();
        org.apache.commons.math.complex.Complex complex30 = complex28.log();
        org.apache.commons.math.complex.Complex complex31 = complex30.cos();
        org.apache.commons.math.complex.Complex complex32 = complex23.multiply(complex30);
        org.apache.commons.math.complex.Complex complex33 = complex30.tanh();
        org.apache.commons.math.complex.Complex complex34 = complex33.asin();
        org.apache.commons.math.complex.Complex complex35 = complex33.acos();
        org.apache.commons.math.complex.Complex complex36 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex37 = complex36.cosh();
        double double38 = complex36.abs();
        org.apache.commons.math.complex.Complex complex39 = complex36.conjugate();
        org.apache.commons.math.complex.Complex complex40 = complex39.conjugate();
        boolean boolean41 = complex39.isInfinite();
        org.apache.commons.math.complex.Complex complex42 = complex39.cos();
        org.apache.commons.math.complex.Complex complex43 = complex35.subtract(complex39);
        org.apache.commons.math.complex.Complex complex44 = complex35.sin();
        org.apache.commons.math.complex.Complex complex45 = complex35.sqrt();
        org.apache.commons.math.complex.Complex complex46 = complex45.sqrt1z();
        org.apache.commons.math.complex.Complex complex47 = complex13.add(complex46);
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + Double.POSITIVE_INFINITY + "'", double38 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
    }

    @Test
    public void test06087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06087");
        double[] doubleArray2 = new double[] { (byte) 1, 100 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) (short) 100);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver6 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction3);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction7 = laguerreSolver6.getPolynomialFunction();
        laguerreSolver6.setRelativeAccuracy((double) 0);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction10 = laguerreSolver6.getPolynomialFunction();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction11 = polynomialFunction10.polynomialDerivative();
        int int12 = polynomialFunction10.degree();
        double double14 = polynomialFunction10.value(454.0d);
        double double16 = polynomialFunction10.value((-4.5613214195472375E24d));
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction17 = polynomialFunction10.derivative();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 10001.0d + "'", double5 == 10001.0d);
        org.junit.Assert.assertNotNull(polynomialFunction7);
        org.junit.Assert.assertNotNull(polynomialFunction10);
        org.junit.Assert.assertNotNull(polynomialFunction11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 45401.0d + "'", double14 == 45401.0d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + (-4.5613214195472374E26d) + "'", double16 == (-4.5613214195472374E26d));
        org.junit.Assert.assertNotNull(univariateRealFunction17);
    }

    @Test
    public void test06088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06088");
        org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex3 = complex2.cosh();
        double double4 = complex2.abs();
        org.apache.commons.math.complex.Complex complex5 = complex2.conjugate();
        org.apache.commons.math.complex.Complex complex6 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex7 = complex6.sqrt();
        boolean boolean8 = complex6.isNaN();
        org.apache.commons.math.complex.Complex complex9 = complex6.sin();
        org.apache.commons.math.complex.Complex complex10 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex11 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex12 = complex11.sqrt();
        org.apache.commons.math.complex.Complex complex13 = complex12.sin();
        org.apache.commons.math.complex.Complex complex14 = complex10.pow(complex12);
        org.apache.commons.math.complex.Complex complex15 = complex14.asin();
        org.apache.commons.math.complex.Complex complex16 = complex15.atan();
        boolean boolean17 = complex16.isInfinite();
        org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex19 = complex16.subtract(complex18);
        org.apache.commons.math.complex.Complex complex20 = complex19.sin();
        org.apache.commons.math.complex.Complex complex21 = complex6.divide(complex20);
        org.apache.commons.math.complex.Complex complex22 = complex2.subtract(complex20);
        org.apache.commons.math.complex.Complex complex23 = complex2.tanh();
        double double24 = complex2.getReal();
        org.apache.commons.math.complex.Complex complex25 = complex2.atan();
        java.lang.Object[] objArray33 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException34 = new org.apache.commons.math.ConvergenceException("", objArray33);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException35 = new org.apache.commons.math.FunctionEvaluationException((double) (short) 10, "hi!", objArray33);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException36 = new org.apache.commons.math.FunctionEvaluationException(0.0d, "org.apache.commons.math.FunctionEvaluationException: ", objArray33);
        java.lang.Object[] objArray38 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException39 = new org.apache.commons.math.ConvergenceException("", objArray38);
        java.lang.Object[] objArray44 = new java.lang.Object[] { 0.0f, (short) 1 };
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException45 = new org.apache.commons.math.MaxIterationsExceededException(100, "", objArray44);
        convergenceException39.addSuppressed((java.lang.Throwable) maxIterationsExceededException45);
        org.apache.commons.math.ConvergenceException convergenceException47 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.FunctionEvaluationException: ", objArray33, (java.lang.Throwable) maxIterationsExceededException45);
        org.apache.commons.math.ConvergenceException convergenceException48 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.MaxIterationsExceededException: org.apache.commons.math.FunctionEvaluationException: ", objArray33);
        java.lang.Throwable[] throwableArray49 = convergenceException48.getSuppressed();
        boolean boolean50 = complex2.equals((java.lang.Object) throwableArray49);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException51 = new org.apache.commons.math.MaxIterationsExceededException((int) (byte) 10, "org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: ", (java.lang.Object[]) throwableArray49);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + Double.POSITIVE_INFINITY + "'", double4 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + Double.POSITIVE_INFINITY + "'", double24 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(objArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray33), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray33), "[]");
        org.junit.Assert.assertNotNull(objArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray38), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray38), "[]");
        org.junit.Assert.assertNotNull(objArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray44), "[0.0, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray44), "[0.0, 1]");
        org.junit.Assert.assertNotNull(throwableArray49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
    }

    @Test
    public void test06089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06089");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex1 = complex0.cosh();
        org.apache.commons.math.complex.Complex complex2 = complex0.log();
        org.apache.commons.math.complex.Complex complex3 = complex2.cos();
        double double4 = complex3.abs();
        org.apache.commons.math.complex.Complex complex5 = complex3.tanh();
        org.apache.commons.math.complex.Complex complex6 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex7 = complex6.sqrt();
        org.apache.commons.math.complex.Complex complex8 = complex7.asin();
        org.apache.commons.math.complex.Complex complex9 = complex5.add(complex7);
        org.apache.commons.math.complex.Complex complex10 = complex7.cos();
        double double11 = complex10.getReal();
        org.apache.commons.math.complex.Complex complex12 = complex10.negate();
        org.apache.commons.math.complex.Complex complex13 = complex10.sqrt1z();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
    }

    @Test
    public void test06090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06090");
        double[] doubleArray2 = new double[] { (byte) -1, '#' };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction4 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver5 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction4);
        laguerreSolver5.setAbsoluteAccuracy(0.0d);
        double double8 = laguerreSolver5.getFunctionValueAccuracy();
        double double9 = laguerreSolver5.getAbsoluteAccuracy();
        laguerreSolver5.setMaximalIterationCount(5);
        laguerreSolver5.resetAbsoluteAccuracy();
        double double13 = laguerreSolver5.getRelativeAccuracy();
        // The following exception was thrown during execution in test generation
        try {
            double double17 = laguerreSolver5.solve(64.0d, 1401.0d, (-1.0157148442098152E48d));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Function values at endpoints do not have different signs.  Endpoints: [64.0,1401.0]  Values: [35.0,35.0]");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[-1.0, 35.0]");
        org.junit.Assert.assertNotNull(polynomialFunction4);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 1.0E-15d + "'", double8 == 1.0E-15d);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 1.0E-14d + "'", double13 == 1.0E-14d);
    }

    @Test
    public void test06091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06091");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex1 = complex0.sqrt();
        org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex3 = complex2.cosh();
        double double4 = complex2.abs();
        org.apache.commons.math.complex.Complex complex5 = complex2.conjugate();
        org.apache.commons.math.complex.Complex complex6 = complex0.divide(complex5);
        org.apache.commons.math.complex.Complex complex7 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex8 = complex7.cosh();
        org.apache.commons.math.complex.Complex complex9 = complex7.log();
        org.apache.commons.math.complex.Complex complex10 = complex7.sin();
        org.apache.commons.math.complex.Complex complex11 = complex7.log();
        org.apache.commons.math.complex.Complex complex12 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex13 = complex12.sqrt();
        org.apache.commons.math.complex.Complex complex14 = complex7.divide(complex13);
        org.apache.commons.math.complex.Complex complex15 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex16 = complex15.cosh();
        double double17 = complex15.abs();
        org.apache.commons.math.complex.Complex complex18 = complex15.conjugate();
        org.apache.commons.math.complex.Complex complex19 = complex18.conjugate();
        org.apache.commons.math.complex.Complex complex20 = complex14.subtract(complex19);
        org.apache.commons.math.complex.Complex complex21 = complex6.multiply(complex14);
        org.apache.commons.math.complex.Complex complex22 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex23 = complex22.cosh();
        org.apache.commons.math.complex.Complex complex24 = complex22.log();
        org.apache.commons.math.complex.Complex complex25 = complex24.cos();
        double double26 = complex25.abs();
        org.apache.commons.math.complex.Complex complex27 = complex25.sqrt();
        org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex29 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex30 = complex29.sqrt();
        org.apache.commons.math.complex.Complex complex31 = complex30.sin();
        org.apache.commons.math.complex.Complex complex32 = complex28.pow(complex30);
        org.apache.commons.math.complex.Complex complex33 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex34 = complex33.cosh();
        org.apache.commons.math.complex.Complex complex35 = complex33.log();
        org.apache.commons.math.complex.Complex complex36 = complex28.divide(complex35);
        org.apache.commons.math.complex.Complex complex37 = complex27.subtract(complex36);
        org.apache.commons.math.complex.Complex complex38 = complex14.pow(complex27);
        org.apache.commons.math.complex.Complex complex39 = complex27.exp();
        org.apache.commons.math.complex.Complex complex40 = complex27.sinh();
        org.apache.commons.math.complex.Complex complex41 = complex40.acos();
        org.apache.commons.math.complex.Complex complex42 = complex41.negate();
        org.apache.commons.math.complex.Complex complex43 = complex41.log();
        org.apache.commons.math.complex.Complex complex44 = complex43.negate();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + Double.POSITIVE_INFINITY + "'", double4 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + Double.POSITIVE_INFINITY + "'", double17 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
    }

    @Test
    public void test06092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06092");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex1 = complex0.cosh();
        double double2 = complex0.abs();
        org.apache.commons.math.complex.Complex complex3 = complex0.conjugate();
        org.apache.commons.math.complex.Complex complex4 = complex3.conjugate();
        org.apache.commons.math.complex.Complex complex5 = complex3.tanh();
        org.apache.commons.math.complex.Complex complex6 = complex5.tan();
        org.apache.commons.math.complex.Complex complex7 = complex6.conjugate();
        double double8 = complex6.getReal();
        org.apache.commons.math.complex.Complex complex9 = complex6.cosh();
        org.apache.commons.math.complex.Complex complex10 = complex6.negate();
        java.lang.Object[] objArray19 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException20 = new org.apache.commons.math.ConvergenceException("", objArray19);
        java.lang.Object[] objArray22 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException23 = new org.apache.commons.math.ConvergenceException("", objArray22);
        org.apache.commons.math.ConvergenceException convergenceException24 = new org.apache.commons.math.ConvergenceException("", objArray19, (java.lang.Throwable) convergenceException23);
        org.apache.commons.math.ConvergenceException convergenceException25 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.FunctionEvaluationException: ", objArray19);
        org.apache.commons.math.ConvergenceException convergenceException26 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.FunctionEvaluationException: Evaluation failed for argument = 100", objArray19);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException27 = new org.apache.commons.math.MaxIterationsExceededException((int) (byte) 100, "org.apache.commons.math.ConvergenceException: ", objArray19);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException28 = new org.apache.commons.math.MaxIterationsExceededException(5, "org.apache.commons.math.FunctionEvaluationException: org.apache.commons.math.ConvergenceException: hi!", objArray19);
        boolean boolean29 = complex6.equals((java.lang.Object) objArray19);
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + Double.POSITIVE_INFINITY + "'", double2 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[]");
        org.junit.Assert.assertNotNull(objArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray22), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray22), "[]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
    }

    @Test
    public void test06093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06093");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex1 = complex0.cosh();
        org.apache.commons.math.complex.Complex complex2 = complex0.log();
        org.apache.commons.math.complex.Complex complex3 = complex0.sin();
        org.apache.commons.math.complex.Complex complex4 = complex0.log();
        org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex6 = complex5.sqrt();
        org.apache.commons.math.complex.Complex complex7 = complex0.divide(complex6);
        org.apache.commons.math.complex.Complex complex8 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex9 = complex8.cosh();
        org.apache.commons.math.complex.Complex complex10 = complex9.acos();
        double double11 = complex9.getReal();
        org.apache.commons.math.complex.Complex complex12 = complex9.sqrt();
        org.apache.commons.math.complex.Complex complex13 = complex0.pow(complex9);
        org.apache.commons.math.complex.Complex complex14 = complex13.sqrt1z();
        org.apache.commons.math.complex.Complex complex15 = complex13.negate();
        org.apache.commons.math.complex.Complex complex16 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex17 = complex16.cosh();
        double double18 = complex16.abs();
        org.apache.commons.math.complex.Complex complex19 = complex16.conjugate();
        org.apache.commons.math.complex.Complex complex20 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex21 = complex20.cosh();
        double double22 = complex20.abs();
        org.apache.commons.math.complex.Complex complex23 = complex20.conjugate();
        org.apache.commons.math.complex.Complex complex24 = complex23.conjugate();
        org.apache.commons.math.complex.Complex complex25 = complex23.tanh();
        org.apache.commons.math.complex.Complex complex26 = complex23.atan();
        org.apache.commons.math.complex.Complex complex27 = complex16.subtract(complex23);
        org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex29 = complex28.cosh();
        org.apache.commons.math.complex.Complex complex30 = complex28.log();
        org.apache.commons.math.complex.Complex complex31 = complex30.cos();
        double double32 = complex31.abs();
        org.apache.commons.math.complex.Complex complex33 = complex31.tanh();
        org.apache.commons.math.complex.Complex complex34 = complex23.pow(complex31);
        org.apache.commons.math.complex.Complex complex35 = complex15.subtract(complex31);
        boolean boolean36 = complex35.isNaN();
        org.apache.commons.math.complex.Complex complex37 = complex35.negate();
        org.apache.commons.math.complex.Complex complex38 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex39 = complex38.cosh();
        org.apache.commons.math.complex.Complex complex40 = complex38.log();
        org.apache.commons.math.complex.Complex complex41 = complex40.cos();
        double double42 = complex41.abs();
        org.apache.commons.math.complex.Complex complex43 = complex41.sqrt();
        org.apache.commons.math.complex.Complex complex44 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex45 = complex44.sqrt();
        boolean boolean46 = complex44.isNaN();
        double double47 = complex44.getReal();
        boolean boolean48 = complex44.isNaN();
        org.apache.commons.math.complex.Complex complex49 = complex44.asin();
        org.apache.commons.math.complex.Complex complex50 = complex43.pow(complex49);
        org.apache.commons.math.complex.Complex complex51 = complex50.tan();
        org.apache.commons.math.complex.Complex complex52 = complex51.negate();
        org.apache.commons.math.complex.Complex complex53 = complex37.multiply(complex51);
        double double54 = complex37.getImaginary();
        org.apache.commons.math.complex.Complex complex55 = complex37.sin();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + Double.POSITIVE_INFINITY + "'", double18 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + Double.POSITIVE_INFINITY + "'", double22 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertTrue(Double.isNaN(double32));
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertTrue(Double.isNaN(double42));
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + Double.POSITIVE_INFINITY + "'", double47 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertTrue(Double.isNaN(double54));
        org.junit.Assert.assertNotNull(complex55);
    }

    @Test
    public void test06094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06094");
        java.lang.Object[] objArray8 = new java.lang.Object[] { 0.0f, (short) 1 };
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException9 = new org.apache.commons.math.MaxIterationsExceededException(100, "", objArray8);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException10 = new org.apache.commons.math.FunctionEvaluationException(35.0d, "hi!", objArray8);
        java.lang.Object[] objArray16 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException17 = new org.apache.commons.math.ConvergenceException("", objArray16);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException18 = new org.apache.commons.math.FunctionEvaluationException(10.0d, (java.lang.Throwable) convergenceException17);
        java.lang.Object[] objArray19 = functionEvaluationException18.getArguments();
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException20 = new org.apache.commons.math.MaxIterationsExceededException(0, "org.apache.commons.math.MaxIterationsExceededException: org.apache.commons.math.FunctionEvaluationException: ", objArray19);
        java.lang.Throwable[] throwableArray21 = maxIterationsExceededException20.getSuppressed();
        int int22 = maxIterationsExceededException20.getMaxIterations();
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException23 = new org.apache.commons.math.FunctionEvaluationException((double) (short) 1, (java.lang.Throwable) maxIterationsExceededException20);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException24 = new org.apache.commons.math.FunctionEvaluationException((double) (short) 1, "org.apache.commons.math.FunctionEvaluationException: org.apache.commons.math.ConvergenceException: hi!", objArray8, (java.lang.Throwable) maxIterationsExceededException20);
        java.lang.String str25 = functionEvaluationException24.toString();
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[0.0, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[0.0, 1]");
        org.junit.Assert.assertNotNull(objArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray16), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray16), "[]");
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[]");
        org.junit.Assert.assertNotNull(throwableArray21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "org.apache.commons.math.FunctionEvaluationException: org.apache.commons.math.FunctionEvaluationException: org.apache.commons.math.ConvergenceException: hi!" + "'", str25, "org.apache.commons.math.FunctionEvaluationException: org.apache.commons.math.FunctionEvaluationException: org.apache.commons.math.ConvergenceException: hi!");
    }

    @Test
    public void test06095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06095");
        java.lang.Object[] objArray12 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException13 = new org.apache.commons.math.ConvergenceException("", objArray12);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException14 = new org.apache.commons.math.FunctionEvaluationException((double) (short) 10, "hi!", objArray12);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException15 = new org.apache.commons.math.FunctionEvaluationException(0.0d, "org.apache.commons.math.FunctionEvaluationException: ", objArray12);
        java.lang.Object[] objArray17 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException18 = new org.apache.commons.math.ConvergenceException("", objArray17);
        java.lang.Object[] objArray23 = new java.lang.Object[] { 0.0f, (short) 1 };
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException24 = new org.apache.commons.math.MaxIterationsExceededException(100, "", objArray23);
        convergenceException18.addSuppressed((java.lang.Throwable) maxIterationsExceededException24);
        org.apache.commons.math.ConvergenceException convergenceException26 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.FunctionEvaluationException: ", objArray12, (java.lang.Throwable) maxIterationsExceededException24);
        org.apache.commons.math.ConvergenceException convergenceException27 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.MaxIterationsExceededException: org.apache.commons.math.FunctionEvaluationException: ", objArray12);
        org.apache.commons.math.ConvergenceException convergenceException28 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: hi!", objArray12);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException29 = new org.apache.commons.math.FunctionEvaluationException(10001.0d, "Maximal number of iterations ({0}) exceeded", (java.lang.Throwable) convergenceException28);
        java.lang.Throwable[] throwableArray30 = convergenceException28.getSuppressed();
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException35 = new org.apache.commons.math.FunctionEvaluationException(1.0E-6d);
        java.lang.Object[] objArray36 = functionEvaluationException35.getArguments();
        java.lang.Object[] objArray43 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException44 = new org.apache.commons.math.ConvergenceException("", objArray43);
        java.lang.Object[] objArray49 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException50 = new org.apache.commons.math.ConvergenceException("", objArray49);
        java.lang.Object[] objArray52 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException53 = new org.apache.commons.math.ConvergenceException("", objArray52);
        org.apache.commons.math.ConvergenceException convergenceException54 = new org.apache.commons.math.ConvergenceException("", objArray49, (java.lang.Throwable) convergenceException53);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException56 = new org.apache.commons.math.FunctionEvaluationException((double) 100);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException57 = new org.apache.commons.math.FunctionEvaluationException(100.0d, "org.apache.commons.math.ConvergenceException: hi!", objArray49, (java.lang.Throwable) functionEvaluationException56);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException58 = new org.apache.commons.math.FunctionEvaluationException((double) '#', "", objArray43, (java.lang.Throwable) functionEvaluationException57);
        java.lang.String str59 = functionEvaluationException58.getPattern();
        double double60 = functionEvaluationException58.getArgument();
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException61 = new org.apache.commons.math.FunctionEvaluationException((double) (byte) 0, (java.lang.Throwable) functionEvaluationException58);
        java.lang.Object[] objArray64 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException65 = new org.apache.commons.math.ConvergenceException("", objArray64);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException66 = new org.apache.commons.math.FunctionEvaluationException(10.0d, (java.lang.Throwable) convergenceException65);
        functionEvaluationException61.addSuppressed((java.lang.Throwable) functionEvaluationException66);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException68 = new org.apache.commons.math.FunctionEvaluationException((-99.0d), "org.apache.commons.math.FunctionEvaluationException: org.apache.commons.math.ConvergenceException: Convergence failed", (java.lang.Throwable) functionEvaluationException61);
        java.lang.Object[] objArray69 = functionEvaluationException61.getArguments();
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException72 = new org.apache.commons.math.FunctionEvaluationException((-99999.0d), "org.apache.commons.math.MaxIterationsExceededException: org.apache.commons.math.FunctionEvaluationException: ");
        functionEvaluationException61.addSuppressed((java.lang.Throwable) functionEvaluationException72);
        org.apache.commons.math.ConvergenceException convergenceException74 = new org.apache.commons.math.ConvergenceException("", objArray36, (java.lang.Throwable) functionEvaluationException61);
        java.lang.Object[] objArray82 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException83 = new org.apache.commons.math.ConvergenceException("", objArray82);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException84 = new org.apache.commons.math.MaxIterationsExceededException(0, "hi!", objArray82);
        org.apache.commons.math.ConvergenceException convergenceException86 = new org.apache.commons.math.ConvergenceException("");
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException87 = new org.apache.commons.math.FunctionEvaluationException((double) (short) 0, "hi!", objArray82, (java.lang.Throwable) convergenceException86);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException89 = new org.apache.commons.math.MaxIterationsExceededException((int) (short) 100);
        org.apache.commons.math.ConvergenceException convergenceException90 = new org.apache.commons.math.ConvergenceException("Maximal number of iterations ({0}) exceeded", objArray82, (java.lang.Throwable) maxIterationsExceededException89);
        org.apache.commons.math.ConvergenceException convergenceException91 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: hi!", (java.lang.Throwable) convergenceException90);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException92 = new org.apache.commons.math.FunctionEvaluationException(101.00000001255978d, "org.apache.commons.math.MaxIterationsExceededException: ", objArray36, (java.lang.Throwable) convergenceException91);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException93 = new org.apache.commons.math.FunctionEvaluationException((-3.251247082355822E42d), "org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.FunctionEvaluationException: Evaluation failed for argument = 10,101", (java.lang.Object[]) throwableArray30, (java.lang.Throwable) convergenceException91);
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12), "[]");
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray17), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray17), "[]");
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[0.0, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[0.0, 1]");
        org.junit.Assert.assertNotNull(throwableArray30);
        org.junit.Assert.assertNotNull(objArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray36), "[1.0E-6]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray36), "[1.0E-6]");
        org.junit.Assert.assertNotNull(objArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray43), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray43), "[]");
        org.junit.Assert.assertNotNull(objArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray49), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray49), "[]");
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[]");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 35.0d + "'", double60 == 35.0d);
        org.junit.Assert.assertNotNull(objArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray64), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray64), "[]");
        org.junit.Assert.assertNotNull(objArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray69), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray69), "[]");
        org.junit.Assert.assertNotNull(objArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray82), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray82), "[]");
    }

    @Test
    public void test06096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06096");
        double[] doubleArray5 = new double[] { 0L, '#', 100.0f, 0L, (-1.0d) };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray5);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction7 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray5);
        double[] doubleArray8 = polynomialFunction7.getCoefficients();
        int int9 = polynomialFunction7.degree();
        double[] doubleArray10 = polynomialFunction7.getCoefficients();
        double double12 = polynomialFunction7.value((-0.010000000000000009d));
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction13 = polynomialFunction7.derivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver14 = new org.apache.commons.math.analysis.LaguerreSolver(univariateRealFunction13);
        double double15 = laguerreSolver14.getRelativeAccuracy();
        // The following exception was thrown during execution in test generation
        try {
            double double16 = laguerreSolver14.getResult();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: No result available");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[0.0, 35.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.0, 35.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 4 + "'", int9 == 4);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[0.0, 35.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + (-0.3400000100000003d) + "'", double12 == (-0.3400000100000003d));
        org.junit.Assert.assertNotNull(univariateRealFunction13);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 1.0E-14d + "'", double15 == 1.0E-14d);
    }

    @Test
    public void test06097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06097");
        double[] doubleArray2 = new double[] { (byte) 1, 100 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) (short) 100);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver6 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction3);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction7 = laguerreSolver6.getPolynomialFunction();
        double double8 = laguerreSolver6.getAbsoluteAccuracy();
        double[] doubleArray14 = new double[] { 0L, '#', 100.0f, 0L, (-1.0d) };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction15 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray14);
        org.apache.commons.math.complex.Complex[] complexArray17 = laguerreSolver6.solveAll(doubleArray14, 10001.0d);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction18 = laguerreSolver6.getPolynomialFunction();
        laguerreSolver6.setRelativeAccuracy(1.0E-14d);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction21 = laguerreSolver6.getPolynomialFunction();
        double double22 = laguerreSolver6.getFunctionValueAccuracy();
        // The following exception was thrown during execution in test generation
        try {
            double double26 = laguerreSolver6.solve(100101.0d, (-2.559616086392961E31d), (-1.0410151717904442E16d));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Endpoints do not specify an interval: [100101.0,-2.559616086392961E31]");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 10001.0d + "'", double5 == 10001.0d);
        org.junit.Assert.assertNotNull(polynomialFunction7);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 1.0E-6d + "'", double8 == 1.0E-6d);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[0.0, 35.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(complexArray17);
        org.junit.Assert.assertNotNull(polynomialFunction18);
        org.junit.Assert.assertNotNull(polynomialFunction21);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 1.0E-15d + "'", double22 == 1.0E-15d);
    }

    @Test
    public void test06098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06098");
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException7 = new org.apache.commons.math.MaxIterationsExceededException((int) (byte) 1);
        java.lang.Object[] objArray8 = maxIterationsExceededException7.getArguments();
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException9 = new org.apache.commons.math.FunctionEvaluationException((double) 32, "org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: ", (java.lang.Throwable) maxIterationsExceededException7);
        double double10 = functionEvaluationException9.getArgument();
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException11 = new org.apache.commons.math.FunctionEvaluationException(1.2250000000001261E-12d, (java.lang.Throwable) functionEvaluationException9);
        org.apache.commons.math.ConvergenceException convergenceException12 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.MaxIterationsExceededException: ", (java.lang.Throwable) functionEvaluationException9);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException13 = new org.apache.commons.math.FunctionEvaluationException((-18326.0d), "org.apache.commons.math.MaxIterationsExceededException: Convergence failed", (java.lang.Throwable) convergenceException12);
        java.lang.Object[] objArray14 = functionEvaluationException13.getArguments();
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[1]");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 32.0d + "'", double10 == 32.0d);
        org.junit.Assert.assertNotNull(objArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray14), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray14), "[]");
    }

    @Test
    public void test06099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06099");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex1 = complex0.cosh();
        double double2 = complex0.abs();
        org.apache.commons.math.complex.Complex complex3 = complex0.conjugate();
        org.apache.commons.math.complex.Complex complex4 = complex3.conjugate();
        org.apache.commons.math.complex.Complex complex5 = complex3.tanh();
        org.apache.commons.math.complex.Complex complex6 = complex3.sqrt1z();
        org.apache.commons.math.complex.Complex complex7 = complex6.log();
        org.apache.commons.math.complex.Complex complex8 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex9 = complex8.cosh();
        double double10 = complex8.abs();
        org.apache.commons.math.complex.Complex complex11 = complex8.conjugate();
        org.apache.commons.math.complex.Complex complex12 = complex11.conjugate();
        boolean boolean13 = complex11.isInfinite();
        org.apache.commons.math.complex.Complex complex14 = complex11.cos();
        org.apache.commons.math.complex.Complex complex15 = complex11.conjugate();
        org.apache.commons.math.complex.Complex complex16 = complex11.sin();
        boolean boolean17 = complex11.isNaN();
        org.apache.commons.math.complex.Complex complex18 = complex6.add(complex11);
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + Double.POSITIVE_INFINITY + "'", double2 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + Double.POSITIVE_INFINITY + "'", double10 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(complex18);
    }

    @Test
    public void test06100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06100");
        org.apache.commons.math.ConvergenceException convergenceException1 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.FunctionEvaluationException: hi!");
        java.lang.String str2 = convergenceException1.toString();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "org.apache.commons.math.ConvergenceException: org.apache.commons.math.FunctionEvaluationException: hi!" + "'", str2, "org.apache.commons.math.ConvergenceException: org.apache.commons.math.FunctionEvaluationException: hi!");
    }

    @Test
    public void test06101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06101");
        double[] doubleArray2 = new double[] { (byte) 1, 100 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) (short) 100);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver6 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction3);
        double double10 = laguerreSolver6.solve((double) (-1L), 349.0d, (double) (short) 10);
        laguerreSolver6.setMaximalIterationCount((int) '#');
        double double13 = laguerreSolver6.getAbsoluteAccuracy();
        double double14 = laguerreSolver6.getAbsoluteAccuracy();
        laguerreSolver6.resetAbsoluteAccuracy();
        int int16 = laguerreSolver6.getIterationCount();
        int int17 = laguerreSolver6.getMaximalIterationCount();
        laguerreSolver6.resetAbsoluteAccuracy();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction19 = laguerreSolver6.getPolynomialFunction();
        int int20 = polynomialFunction19.degree();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 10001.0d + "'", double5 == 10001.0d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + (-0.01d) + "'", double10 == (-0.01d));
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 1.0E-6d + "'", double13 == 1.0E-6d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 1.0E-6d + "'", double14 == 1.0E-6d);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 3 + "'", int16 == 3);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 35 + "'", int17 == 35);
        org.junit.Assert.assertNotNull(polynomialFunction19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
    }

    @Test
    public void test06102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06102");
        double[] doubleArray5 = new double[] { 0L, '#', 100.0f, 0L, (-1.0d) };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray5);
        int int7 = polynomialFunction6.degree();
        int int8 = polynomialFunction6.degree();
        double double10 = polynomialFunction6.value((double) (-1.0f));
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction11 = polynomialFunction6.polynomialDerivative();
        double double13 = polynomialFunction6.value((-1.0303676599E10d));
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction14 = polynomialFunction6.derivative();
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[0.0, 35.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 4 + "'", int7 == 4);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 4 + "'", int8 == 4);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 64.0d + "'", double10 == 64.0d);
        org.junit.Assert.assertNotNull(polynomialFunction11);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + (-1.1271166782382828E40d) + "'", double13 == (-1.1271166782382828E40d));
        org.junit.Assert.assertNotNull(univariateRealFunction14);
    }

    @Test
    public void test06103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06103");
        org.apache.commons.math.ConvergenceException convergenceException1 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.FunctionEvaluationException: org.apache.commons.math.FunctionEvaluationException: org.apache.commons.math.FunctionEvaluationException: org.apache.commons.math.MaxIterationsExceededException: hi!");
    }

    @Test
    public void test06104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06104");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex1 = complex0.cosh();
        double double2 = complex0.abs();
        org.apache.commons.math.complex.Complex complex3 = complex0.conjugate();
        org.apache.commons.math.complex.Complex complex4 = complex3.conjugate();
        org.apache.commons.math.complex.Complex complex5 = complex3.tanh();
        org.apache.commons.math.complex.Complex complex6 = complex5.tan();
        org.apache.commons.math.complex.Complex complex7 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex8 = complex7.cosh();
        double double9 = complex7.abs();
        org.apache.commons.math.complex.Complex complex10 = complex7.conjugate();
        org.apache.commons.math.complex.Complex complex11 = complex10.conjugate();
        org.apache.commons.math.complex.Complex complex12 = complex6.subtract(complex10);
        org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex15 = complex14.sqrt();
        org.apache.commons.math.complex.Complex complex16 = complex15.sin();
        org.apache.commons.math.complex.Complex complex17 = complex13.pow(complex15);
        org.apache.commons.math.complex.Complex complex18 = complex17.asin();
        org.apache.commons.math.complex.Complex complex19 = complex17.tan();
        org.apache.commons.math.complex.Complex complex20 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex21 = complex20.cosh();
        double double22 = complex20.abs();
        org.apache.commons.math.complex.Complex complex23 = complex20.conjugate();
        org.apache.commons.math.complex.Complex complex24 = complex23.conjugate();
        boolean boolean25 = complex23.isInfinite();
        org.apache.commons.math.complex.Complex complex26 = complex23.asin();
        boolean boolean27 = complex23.isNaN();
        org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex29 = complex28.cosh();
        org.apache.commons.math.complex.Complex complex30 = complex23.divide(complex28);
        org.apache.commons.math.complex.Complex complex31 = complex19.pow(complex28);
        org.apache.commons.math.complex.Complex complex32 = complex12.divide(complex19);
        org.apache.commons.math.complex.Complex complex33 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex34 = complex33.cosh();
        double double35 = complex33.abs();
        org.apache.commons.math.complex.Complex complex36 = complex33.conjugate();
        org.apache.commons.math.complex.Complex complex37 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex38 = complex37.sqrt();
        boolean boolean39 = complex37.isNaN();
        org.apache.commons.math.complex.Complex complex40 = complex37.sin();
        org.apache.commons.math.complex.Complex complex41 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex42 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex43 = complex42.sqrt();
        org.apache.commons.math.complex.Complex complex44 = complex43.sin();
        org.apache.commons.math.complex.Complex complex45 = complex41.pow(complex43);
        org.apache.commons.math.complex.Complex complex46 = complex45.asin();
        org.apache.commons.math.complex.Complex complex47 = complex46.atan();
        boolean boolean48 = complex47.isInfinite();
        org.apache.commons.math.complex.Complex complex49 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex50 = complex47.subtract(complex49);
        org.apache.commons.math.complex.Complex complex51 = complex50.sin();
        org.apache.commons.math.complex.Complex complex52 = complex37.divide(complex51);
        org.apache.commons.math.complex.Complex complex53 = complex33.subtract(complex51);
        double double54 = complex53.abs();
        org.apache.commons.math.complex.Complex complex55 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex56 = complex55.cosh();
        double double57 = complex55.abs();
        org.apache.commons.math.complex.Complex complex58 = complex55.conjugate();
        org.apache.commons.math.complex.Complex complex59 = complex58.conjugate();
        boolean boolean60 = complex58.isInfinite();
        org.apache.commons.math.complex.Complex complex61 = complex58.cos();
        org.apache.commons.math.complex.Complex complex62 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex63 = complex62.cosh();
        double double64 = complex62.abs();
        org.apache.commons.math.complex.Complex complex65 = complex62.conjugate();
        org.apache.commons.math.complex.Complex complex66 = complex65.conjugate();
        boolean boolean67 = complex65.isInfinite();
        org.apache.commons.math.complex.Complex complex68 = complex65.asin();
        boolean boolean69 = complex65.isNaN();
        org.apache.commons.math.complex.Complex complex70 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex71 = complex70.cosh();
        org.apache.commons.math.complex.Complex complex72 = complex65.divide(complex70);
        org.apache.commons.math.complex.Complex complex73 = complex61.divide(complex70);
        org.apache.commons.math.complex.Complex complex74 = complex70.sinh();
        org.apache.commons.math.complex.Complex complex75 = complex74.conjugate();
        org.apache.commons.math.complex.Complex complex76 = complex74.acos();
        org.apache.commons.math.complex.Complex complex77 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex78 = complex77.cosh();
        org.apache.commons.math.complex.Complex complex79 = complex78.acos();
        org.apache.commons.math.complex.Complex complex80 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex81 = complex80.cosh();
        org.apache.commons.math.complex.Complex complex82 = complex80.log();
        org.apache.commons.math.complex.Complex complex83 = complex80.sin();
        org.apache.commons.math.complex.Complex complex84 = complex83.tanh();
        org.apache.commons.math.complex.Complex complex85 = complex78.add(complex84);
        org.apache.commons.math.complex.Complex complex86 = complex76.pow(complex84);
        org.apache.commons.math.complex.Complex complex87 = complex53.multiply(complex84);
        org.apache.commons.math.complex.Complex complex88 = complex12.add(complex53);
        org.apache.commons.math.complex.Complex complex89 = complex53.tan();
        org.apache.commons.math.complex.Complex complex90 = complex89.acos();
        double double91 = complex89.getReal();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + Double.POSITIVE_INFINITY + "'", double2 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + Double.POSITIVE_INFINITY + "'", double9 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + Double.POSITIVE_INFINITY + "'", double22 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + Double.POSITIVE_INFINITY + "'", double35 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertTrue(Double.isNaN(double54));
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + Double.POSITIVE_INFINITY + "'", double57 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + Double.POSITIVE_INFINITY + "'", double64 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertNotNull(complex75);
        org.junit.Assert.assertNotNull(complex76);
        org.junit.Assert.assertNotNull(complex77);
        org.junit.Assert.assertNotNull(complex78);
        org.junit.Assert.assertNotNull(complex79);
        org.junit.Assert.assertNotNull(complex80);
        org.junit.Assert.assertNotNull(complex81);
        org.junit.Assert.assertNotNull(complex82);
        org.junit.Assert.assertNotNull(complex83);
        org.junit.Assert.assertNotNull(complex84);
        org.junit.Assert.assertNotNull(complex85);
        org.junit.Assert.assertNotNull(complex86);
        org.junit.Assert.assertNotNull(complex87);
        org.junit.Assert.assertNotNull(complex88);
        org.junit.Assert.assertNotNull(complex89);
        org.junit.Assert.assertNotNull(complex90);
        org.junit.Assert.assertTrue(Double.isNaN(double91));
    }

    @Test
    public void test06105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06105");
        double[] doubleArray2 = new double[] { (byte) 1, 100 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) (short) 100);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver6 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction3);
        double double7 = laguerreSolver6.getAbsoluteAccuracy();
        double[] doubleArray14 = new double[] { (-1.0f), (short) 1, 1L, 10L, 0.7853981633974483d, (-1.6365376E7d) };
        org.apache.commons.math.complex.Complex[] complexArray16 = laguerreSolver6.solveAll(doubleArray14, (-1.0d));
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction17 = laguerreSolver6.getPolynomialFunction();
        laguerreSolver6.setFunctionValueAccuracy(Double.NEGATIVE_INFINITY);
        laguerreSolver6.resetMaximalIterationCount();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 10001.0d + "'", double5 == 10001.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 1.0E-6d + "'", double7 == 1.0E-6d);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[-1.0, 1.0, 1.0, 10.0, 0.7853981633974483, -1.6365376E7]");
        org.junit.Assert.assertNotNull(complexArray16);
        org.junit.Assert.assertNotNull(polynomialFunction17);
    }

    @Test
    public void test06106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06106");
        double[] doubleArray5 = new double[] { 0L, '#', 100.0f, 0L, (-1.0d) };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray5);
        double double8 = polynomialFunction6.value((double) 0);
        int int9 = polynomialFunction6.degree();
        double double11 = polynomialFunction6.value(Double.NaN);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver12 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver13 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        int int14 = polynomialFunction6.degree();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver15 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[0.0, 35.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 4 + "'", int9 == 4);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 4 + "'", int14 == 4);
    }

    @Test
    public void test06107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06107");
        double[] doubleArray2 = new double[] { (byte) 1, 100 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) (short) 100);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver6 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction3);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction7 = laguerreSolver6.getPolynomialFunction();
        double double8 = laguerreSolver6.getAbsoluteAccuracy();
        double[] doubleArray14 = new double[] { 0L, '#', 100.0f, 0L, (-1.0d) };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction15 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray14);
        org.apache.commons.math.complex.Complex[] complexArray17 = laguerreSolver6.solveAll(doubleArray14, 10001.0d);
        laguerreSolver6.setAbsoluteAccuracy((double) 3);
        double double20 = laguerreSolver6.getFunctionValueAccuracy();
        laguerreSolver6.setAbsoluteAccuracy((double) 1L);
        // The following exception was thrown during execution in test generation
        try {
            double double25 = laguerreSolver6.solve(52701.0d, 3.573947685493632E39d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Function values at endpoints do not have different signs.  Endpoints: [52701.0,3.573947685493632E39]  Values: [5270101.0,3.573947685493632E41]");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 10001.0d + "'", double5 == 10001.0d);
        org.junit.Assert.assertNotNull(polynomialFunction7);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 1.0E-6d + "'", double8 == 1.0E-6d);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[0.0, 35.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(complexArray17);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 1.0E-15d + "'", double20 == 1.0E-15d);
    }

    @Test
    public void test06108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06108");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex(0.0d, (-2.9891006740999806E8d));
    }

    @Test
    public void test06109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06109");
        double[] doubleArray2 = new double[] { (byte) 1, 100 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) (short) 100);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver6 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction3);
        double[] doubleArray7 = polynomialFunction3.getCoefficients();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction8 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray7);
        double double10 = polynomialFunction8.value((double) (-1));
        double double12 = polynomialFunction8.value(1.0001d);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver13 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction8);
        laguerreSolver13.setAbsoluteAccuracy((-3.213906379456312E15d));
        double[] doubleArray18 = new double[] { (byte) 1, 100 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction19 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray18);
        double double21 = polynomialFunction19.value((double) (short) 100);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver22 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction19);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction23 = laguerreSolver22.getPolynomialFunction();
        laguerreSolver22.setRelativeAccuracy((double) 0);
        laguerreSolver22.setFunctionValueAccuracy((double) (byte) -1);
        laguerreSolver22.resetMaximalIterationCount();
        laguerreSolver22.resetRelativeAccuracy();
        double double30 = laguerreSolver22.getAbsoluteAccuracy();
        int int31 = laguerreSolver22.getMaximalIterationCount();
        double[] doubleArray34 = new double[] { (byte) 1, 100 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction35 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray34);
        double double37 = polynomialFunction35.value((double) (short) 100);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver38 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction35);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction39 = laguerreSolver38.getPolynomialFunction();
        double double40 = laguerreSolver38.getRelativeAccuracy();
        laguerreSolver38.resetRelativeAccuracy();
        double double42 = laguerreSolver38.getAbsoluteAccuracy();
        laguerreSolver38.resetMaximalIterationCount();
        double double46 = laguerreSolver38.solve((-0.01d), (double) (byte) -1);
        int int47 = laguerreSolver38.getMaximalIterationCount();
        laguerreSolver38.setAbsoluteAccuracy((double) 32);
        laguerreSolver38.resetAbsoluteAccuracy();
        double[] doubleArray53 = new double[] { (byte) 1, 100 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction54 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray53);
        double double56 = polynomialFunction54.value((double) (short) 100);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver57 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction54);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction58 = laguerreSolver57.getPolynomialFunction();
        laguerreSolver57.setRelativeAccuracy((double) 0);
        double[] doubleArray63 = new double[] { (byte) -1, '#' };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction64 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray63);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction65 = polynomialFunction64.polynomialDerivative();
        double[] doubleArray66 = polynomialFunction64.getCoefficients();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction67 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray66);
        org.apache.commons.math.complex.Complex[] complexArray69 = laguerreSolver57.solveAll(doubleArray66, (double) 4);
        laguerreSolver57.setAbsoluteAccuracy((double) 1);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction72 = laguerreSolver57.getPolynomialFunction();
        int int73 = laguerreSolver57.getMaximalIterationCount();
        laguerreSolver57.setAbsoluteAccuracy(Double.POSITIVE_INFINITY);
        laguerreSolver57.resetMaximalIterationCount();
        double double77 = laguerreSolver57.getAbsoluteAccuracy();
        double[] doubleArray80 = new double[] { (byte) 1, 100 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction81 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray80);
        double double83 = polynomialFunction81.value((double) (short) 100);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver84 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction81);
        double[] doubleArray85 = polynomialFunction81.getCoefficients();
        org.apache.commons.math.complex.Complex[] complexArray87 = laguerreSolver57.solveAll(doubleArray85, 350.0d);
        org.apache.commons.math.complex.Complex[] complexArray89 = laguerreSolver38.solveAll(doubleArray85, (double) (-1L));
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction90 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray85);
        org.apache.commons.math.complex.Complex[] complexArray92 = laguerreSolver22.solveAll(doubleArray85, (double) 35);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction93 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray85);
        org.apache.commons.math.complex.Complex[] complexArray95 = laguerreSolver13.solveAll(doubleArray85, (-32.999994115662645d));
        double double99 = laguerreSolver13.solve((-1.3716580925304711E31d), 112034.0d, (-7.173051538824589E28d));
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 10001.0d + "'", double5 == 10001.0d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + (-99.0d) + "'", double10 == (-99.0d));
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 101.01d + "'", double12 == 101.01d);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 10001.0d + "'", double21 == 10001.0d);
        org.junit.Assert.assertNotNull(polynomialFunction23);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 1.0E-6d + "'", double30 == 1.0E-6d);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 100 + "'", int31 == 100);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 10001.0d + "'", double37 == 10001.0d);
        org.junit.Assert.assertNotNull(polynomialFunction39);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 1.0E-14d + "'", double40 == 1.0E-14d);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 1.0E-6d + "'", double42 == 1.0E-6d);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + (-0.01d) + "'", double46 == (-0.01d));
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 100 + "'", int47 == 100);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 10001.0d + "'", double56 == 10001.0d);
        org.junit.Assert.assertNotNull(polynomialFunction58);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[-1.0, 35.0]");
        org.junit.Assert.assertNotNull(polynomialFunction65);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[-1.0, 35.0]");
        org.junit.Assert.assertNotNull(complexArray69);
        org.junit.Assert.assertNotNull(polynomialFunction72);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 100 + "'", int73 == 100);
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + Double.POSITIVE_INFINITY + "'", double77 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + 10001.0d + "'", double83 == 10001.0d);
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(complexArray87);
        org.junit.Assert.assertNotNull(complexArray89);
        org.junit.Assert.assertNotNull(complexArray92);
        org.junit.Assert.assertNotNull(complexArray95);
        org.junit.Assert.assertTrue("'" + double99 + "' != '" + (-0.01d) + "'", double99 == (-0.01d));
    }

    @Test
    public void test06110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06110");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((-8.400000000000025E-13d), (-4.819265226515003E7d));
    }

    @Test
    public void test06111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06111");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex1 = complex0.cosh();
        double double2 = complex0.abs();
        org.apache.commons.math.complex.Complex complex3 = complex0.conjugate();
        org.apache.commons.math.complex.Complex complex4 = complex3.conjugate();
        boolean boolean5 = complex3.isInfinite();
        org.apache.commons.math.complex.Complex complex6 = complex3.cos();
        org.apache.commons.math.complex.Complex complex7 = complex3.conjugate();
        org.apache.commons.math.complex.Complex complex8 = complex3.sin();
        org.apache.commons.math.complex.Complex complex9 = complex3.tan();
        org.apache.commons.math.complex.Complex complex10 = complex3.log();
        org.apache.commons.math.complex.Complex complex11 = complex3.acos();
        org.apache.commons.math.complex.Complex complex12 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex13 = complex12.tan();
        org.apache.commons.math.complex.Complex complex14 = complex3.add(complex13);
        org.apache.commons.math.complex.Complex complex15 = complex13.acos();
        org.apache.commons.math.complex.Complex complex16 = complex15.sqrt1z();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + Double.POSITIVE_INFINITY + "'", double2 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
    }

    @Test
    public void test06112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06112");
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException2 = new org.apache.commons.math.MaxIterationsExceededException(0);
        java.lang.Throwable[] throwableArray3 = maxIterationsExceededException2.getSuppressed();
        org.apache.commons.math.ConvergenceException convergenceException4 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.FunctionEvaluationException: ", (java.lang.Object[]) throwableArray3);
        org.junit.Assert.assertNotNull(throwableArray3);
    }

    @Test
    public void test06113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06113");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((-9.89965E7d), 1.0E-15d);
        org.apache.commons.math.complex.Complex complex3 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex4 = complex3.cosh();
        double double5 = complex3.abs();
        org.apache.commons.math.complex.Complex complex6 = complex3.conjugate();
        org.apache.commons.math.complex.Complex complex7 = complex6.conjugate();
        org.apache.commons.math.complex.Complex complex8 = complex6.tanh();
        org.apache.commons.math.complex.Complex complex9 = complex8.tan();
        org.apache.commons.math.complex.Complex complex10 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex11 = complex10.cosh();
        double double12 = complex10.abs();
        org.apache.commons.math.complex.Complex complex13 = complex10.conjugate();
        org.apache.commons.math.complex.Complex complex14 = complex13.conjugate();
        org.apache.commons.math.complex.Complex complex15 = complex9.subtract(complex13);
        org.apache.commons.math.complex.Complex complex16 = complex13.negate();
        org.apache.commons.math.complex.Complex complex17 = complex13.tanh();
        org.apache.commons.math.complex.Complex complex18 = complex2.multiply(complex17);
        org.apache.commons.math.complex.Complex complex19 = complex17.asin();
        org.apache.commons.math.complex.Complex complex20 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex21 = complex20.cosh();
        org.apache.commons.math.complex.Complex complex22 = complex20.log();
        org.apache.commons.math.complex.Complex complex23 = complex20.sin();
        org.apache.commons.math.complex.Complex complex24 = complex20.log();
        org.apache.commons.math.complex.Complex complex25 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex26 = complex25.sqrt();
        org.apache.commons.math.complex.Complex complex27 = complex20.divide(complex26);
        org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex29 = complex28.cosh();
        double double30 = complex28.abs();
        org.apache.commons.math.complex.Complex complex31 = complex28.conjugate();
        org.apache.commons.math.complex.Complex complex32 = complex31.conjugate();
        org.apache.commons.math.complex.Complex complex33 = complex27.subtract(complex32);
        org.apache.commons.math.complex.Complex complex34 = complex27.exp();
        org.apache.commons.math.complex.Complex complex35 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex36 = complex35.cosh();
        org.apache.commons.math.complex.Complex complex37 = complex36.acos();
        org.apache.commons.math.complex.Complex complex38 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex39 = complex38.cosh();
        org.apache.commons.math.complex.Complex complex40 = complex38.log();
        org.apache.commons.math.complex.Complex complex41 = complex38.sin();
        org.apache.commons.math.complex.Complex complex42 = complex41.tanh();
        org.apache.commons.math.complex.Complex complex43 = complex36.add(complex42);
        boolean boolean44 = complex27.equals((java.lang.Object) complex36);
        org.apache.commons.math.complex.Complex complex45 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex46 = complex45.cosh();
        double double47 = complex45.abs();
        org.apache.commons.math.complex.Complex complex48 = complex45.conjugate();
        org.apache.commons.math.complex.Complex complex49 = complex48.conjugate();
        boolean boolean50 = complex48.isInfinite();
        org.apache.commons.math.complex.Complex complex51 = complex48.sqrt();
        org.apache.commons.math.complex.Complex complex52 = complex27.add(complex48);
        double double53 = complex52.getReal();
        org.apache.commons.math.complex.Complex complex54 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex55 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex56 = complex55.sqrt();
        org.apache.commons.math.complex.Complex complex57 = complex56.sin();
        org.apache.commons.math.complex.Complex complex58 = complex54.pow(complex56);
        org.apache.commons.math.complex.Complex complex59 = complex58.asin();
        org.apache.commons.math.complex.Complex complex60 = complex59.atan();
        org.apache.commons.math.complex.Complex complex61 = complex59.log();
        org.apache.commons.math.complex.Complex complex62 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex63 = complex62.tan();
        org.apache.commons.math.complex.Complex complex64 = complex63.cosh();
        org.apache.commons.math.complex.Complex complex65 = complex59.pow(complex63);
        org.apache.commons.math.complex.Complex complex66 = complex65.exp();
        org.apache.commons.math.complex.Complex complex67 = complex52.add(complex66);
        org.apache.commons.math.complex.Complex complex68 = complex19.add(complex67);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + Double.POSITIVE_INFINITY + "'", double5 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + Double.POSITIVE_INFINITY + "'", double12 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + Double.POSITIVE_INFINITY + "'", double30 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + Double.POSITIVE_INFINITY + "'", double47 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertTrue(Double.isNaN(double53));
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complex68);
    }

    @Test
    public void test06114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06114");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex1 = complex0.cosh();
        double double2 = complex0.abs();
        org.apache.commons.math.complex.Complex complex3 = complex0.conjugate();
        org.apache.commons.math.complex.Complex complex4 = complex3.conjugate();
        org.apache.commons.math.complex.Complex complex5 = complex3.tanh();
        org.apache.commons.math.complex.Complex complex6 = complex3.tanh();
        org.apache.commons.math.complex.Complex complex7 = complex6.log();
        org.apache.commons.math.complex.Complex complex8 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex9 = complex8.cosh();
        org.apache.commons.math.complex.Complex complex10 = complex8.log();
        org.apache.commons.math.complex.Complex complex11 = complex8.sin();
        org.apache.commons.math.complex.Complex complex12 = complex8.log();
        org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex14 = complex13.sqrt();
        org.apache.commons.math.complex.Complex complex15 = complex8.divide(complex14);
        org.apache.commons.math.complex.Complex complex16 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex17 = complex16.cosh();
        double double18 = complex16.abs();
        org.apache.commons.math.complex.Complex complex19 = complex16.conjugate();
        org.apache.commons.math.complex.Complex complex20 = complex19.conjugate();
        org.apache.commons.math.complex.Complex complex21 = complex15.subtract(complex20);
        org.apache.commons.math.complex.Complex complex22 = complex15.exp();
        org.apache.commons.math.complex.Complex complex23 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex24 = complex23.cosh();
        org.apache.commons.math.complex.Complex complex25 = complex24.acos();
        org.apache.commons.math.complex.Complex complex26 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex27 = complex26.cosh();
        org.apache.commons.math.complex.Complex complex28 = complex26.log();
        org.apache.commons.math.complex.Complex complex29 = complex26.sin();
        org.apache.commons.math.complex.Complex complex30 = complex29.tanh();
        org.apache.commons.math.complex.Complex complex31 = complex24.add(complex30);
        boolean boolean32 = complex15.equals((java.lang.Object) complex24);
        org.apache.commons.math.complex.Complex complex33 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex34 = complex33.cosh();
        double double35 = complex33.abs();
        org.apache.commons.math.complex.Complex complex36 = complex33.conjugate();
        org.apache.commons.math.complex.Complex complex37 = complex36.conjugate();
        boolean boolean38 = complex36.isInfinite();
        org.apache.commons.math.complex.Complex complex39 = complex36.sqrt();
        org.apache.commons.math.complex.Complex complex40 = complex15.add(complex36);
        org.apache.commons.math.complex.Complex complex41 = complex40.sqrt1z();
        double double42 = complex40.abs();
        org.apache.commons.math.complex.Complex complex43 = complex7.pow(complex40);
        java.lang.Class<?> wildcardClass44 = complex43.getClass();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + Double.POSITIVE_INFINITY + "'", double2 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + Double.POSITIVE_INFINITY + "'", double18 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + Double.POSITIVE_INFINITY + "'", double35 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertTrue(Double.isNaN(double42));
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(wildcardClass44);
    }

    @Test
    public void test06115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06115");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex1 = complex0.cosh();
        org.apache.commons.math.complex.Complex complex2 = complex0.log();
        org.apache.commons.math.complex.Complex complex3 = complex0.sin();
        org.apache.commons.math.complex.Complex complex4 = complex0.log();
        org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex6 = complex5.sqrt();
        org.apache.commons.math.complex.Complex complex7 = complex0.divide(complex6);
        org.apache.commons.math.complex.Complex complex8 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex9 = complex8.cosh();
        org.apache.commons.math.complex.Complex complex10 = complex9.acos();
        double double11 = complex9.getReal();
        org.apache.commons.math.complex.Complex complex12 = complex9.sqrt();
        org.apache.commons.math.complex.Complex complex13 = complex0.pow(complex9);
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex15 = complex14.cosh();
        org.apache.commons.math.complex.Complex complex16 = complex14.log();
        org.apache.commons.math.complex.Complex complex17 = complex16.cos();
        org.apache.commons.math.complex.Complex complex18 = complex9.multiply(complex16);
        org.apache.commons.math.complex.Complex complex19 = complex16.tanh();
        org.apache.commons.math.complex.Complex complex20 = complex19.asin();
        double[] doubleArray26 = new double[] { 0L, '#', 100.0f, 0L, (-1.0d) };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction27 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray26);
        int int28 = polynomialFunction27.degree();
        boolean boolean29 = complex19.equals((java.lang.Object) polynomialFunction27);
        org.apache.commons.math.complex.Complex complex30 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex31 = complex30.cosh();
        double double32 = complex30.abs();
        org.apache.commons.math.complex.Complex complex33 = complex30.conjugate();
        org.apache.commons.math.complex.Complex complex34 = complex33.conjugate();
        boolean boolean35 = complex33.isInfinite();
        org.apache.commons.math.complex.Complex complex36 = complex33.asin();
        boolean boolean37 = complex33.isNaN();
        org.apache.commons.math.complex.Complex complex38 = complex33.negate();
        org.apache.commons.math.complex.Complex complex39 = complex19.pow(complex38);
        org.apache.commons.math.complex.Complex complex40 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex41 = complex40.cosh();
        double double42 = complex40.abs();
        org.apache.commons.math.complex.Complex complex43 = complex40.conjugate();
        org.apache.commons.math.complex.Complex complex44 = complex43.conjugate();
        org.apache.commons.math.complex.Complex complex45 = complex43.tanh();
        org.apache.commons.math.complex.Complex complex46 = complex45.tan();
        org.apache.commons.math.complex.Complex complex47 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex48 = complex47.cosh();
        double double49 = complex47.abs();
        org.apache.commons.math.complex.Complex complex50 = complex47.conjugate();
        org.apache.commons.math.complex.Complex complex51 = complex50.conjugate();
        org.apache.commons.math.complex.Complex complex52 = complex46.subtract(complex50);
        org.apache.commons.math.complex.Complex complex53 = complex50.negate();
        boolean boolean54 = complex53.isNaN();
        org.apache.commons.math.complex.Complex complex55 = complex19.pow(complex53);
        org.apache.commons.math.complex.Complex complex56 = complex19.acos();
        org.apache.commons.math.complex.Complex complex57 = complex19.sin();
        org.apache.commons.math.complex.Complex complex58 = complex19.atan();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[0.0, 35.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 4 + "'", int28 == 4);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + Double.POSITIVE_INFINITY + "'", double32 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + Double.POSITIVE_INFINITY + "'", double42 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + Double.POSITIVE_INFINITY + "'", double49 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
    }

    @Test
    public void test06116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06116");
        double[] doubleArray2 = new double[] { (byte) 1, 100 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) (short) 100);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver6 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction3);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction7 = laguerreSolver6.getPolynomialFunction();
        laguerreSolver6.setRelativeAccuracy((double) 0);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction10 = laguerreSolver6.getPolynomialFunction();
        double[] doubleArray11 = polynomialFunction10.getCoefficients();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction12 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray11);
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction13 = polynomialFunction12.derivative();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 10001.0d + "'", double5 == 10001.0d);
        org.junit.Assert.assertNotNull(polynomialFunction7);
        org.junit.Assert.assertNotNull(polynomialFunction10);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(univariateRealFunction13);
    }

    @Test
    public void test06117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06117");
        double[] doubleArray6 = new double[] { (byte) 1, 100 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction7 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray6);
        double double9 = polynomialFunction7.value((double) (short) 100);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver10 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction7);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction11 = laguerreSolver10.getPolynomialFunction();
        laguerreSolver10.setRelativeAccuracy((double) 0);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction14 = laguerreSolver10.getPolynomialFunction();
        int int15 = laguerreSolver10.getMaximalIterationCount();
        double double16 = laguerreSolver10.getFunctionValueAccuracy();
        double[] doubleArray22 = new double[] { 0L, '#', 100.0f, 0L, (-1.0d) };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction23 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray22);
        org.apache.commons.math.complex.Complex[] complexArray25 = laguerreSolver10.solveAll(doubleArray22, (double) 0);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException26 = new org.apache.commons.math.MaxIterationsExceededException(18, "", (java.lang.Object[]) complexArray25);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException27 = new org.apache.commons.math.FunctionEvaluationException(0.0d, "Evaluation failed for argument = 100", (java.lang.Object[]) complexArray25);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 10001.0d + "'", double9 == 10001.0d);
        org.junit.Assert.assertNotNull(polynomialFunction11);
        org.junit.Assert.assertNotNull(polynomialFunction14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 100 + "'", int15 == 100);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 1.0E-15d + "'", double16 == 1.0E-15d);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[0.0, 35.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(complexArray25);
    }

    @Test
    public void test06118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06118");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex1 = complex0.cosh();
        double double2 = complex0.abs();
        org.apache.commons.math.complex.Complex complex3 = complex0.conjugate();
        org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex5 = complex4.sqrt();
        boolean boolean6 = complex4.isNaN();
        org.apache.commons.math.complex.Complex complex7 = complex4.sin();
        org.apache.commons.math.complex.Complex complex8 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex9 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex10 = complex9.sqrt();
        org.apache.commons.math.complex.Complex complex11 = complex10.sin();
        org.apache.commons.math.complex.Complex complex12 = complex8.pow(complex10);
        org.apache.commons.math.complex.Complex complex13 = complex12.asin();
        org.apache.commons.math.complex.Complex complex14 = complex13.atan();
        boolean boolean15 = complex14.isInfinite();
        org.apache.commons.math.complex.Complex complex16 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex17 = complex14.subtract(complex16);
        org.apache.commons.math.complex.Complex complex18 = complex17.sin();
        org.apache.commons.math.complex.Complex complex19 = complex4.divide(complex18);
        org.apache.commons.math.complex.Complex complex20 = complex0.subtract(complex18);
        org.apache.commons.math.complex.Complex complex23 = new org.apache.commons.math.complex.Complex(1.0E-14d, (double) (byte) 1);
        org.apache.commons.math.complex.Complex complex24 = complex0.multiply(complex23);
        org.apache.commons.math.complex.Complex complex25 = complex23.sinh();
        org.apache.commons.math.ConvergenceException convergenceException29 = new org.apache.commons.math.ConvergenceException("");
        java.lang.Object[] objArray30 = convergenceException29.getArguments();
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException31 = new org.apache.commons.math.FunctionEvaluationException((-1.6365376E7d), (java.lang.Throwable) convergenceException29);
        org.apache.commons.math.ConvergenceException convergenceException32 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.FunctionEvaluationException: Evaluation failed for argument = 0", (java.lang.Throwable) functionEvaluationException31);
        java.lang.String str33 = functionEvaluationException31.getPattern();
        boolean boolean34 = complex25.equals((java.lang.Object) str33);
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + Double.POSITIVE_INFINITY + "'", double2 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(objArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray30), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray30), "[]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
    }

    @Test
    public void test06119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06119");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((-3.2273645162588406E18d), 10.0d);
    }

    @Test
    public void test06120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06120");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex1 = complex0.cosh();
        org.apache.commons.math.complex.Complex complex2 = complex0.log();
        org.apache.commons.math.complex.Complex complex3 = complex0.sin();
        org.apache.commons.math.complex.Complex complex4 = complex0.log();
        org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex6 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex7 = complex6.sqrt();
        org.apache.commons.math.complex.Complex complex8 = complex7.sin();
        org.apache.commons.math.complex.Complex complex9 = complex5.pow(complex7);
        org.apache.commons.math.complex.Complex complex10 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex11 = complex10.cosh();
        org.apache.commons.math.complex.Complex complex12 = complex10.log();
        org.apache.commons.math.complex.Complex complex13 = complex5.divide(complex12);
        org.apache.commons.math.complex.Complex complex14 = complex0.subtract(complex12);
        org.apache.commons.math.complex.Complex complex15 = complex14.cosh();
        double[] doubleArray21 = new double[] { 0L, '#', 100.0f, 0L, (-1.0d) };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction22 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray21);
        double double24 = polynomialFunction22.value((double) 0);
        int int25 = polynomialFunction22.degree();
        double double27 = polynomialFunction22.value(Double.NaN);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver28 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction22);
        boolean boolean29 = complex15.equals((java.lang.Object) laguerreSolver28);
        org.apache.commons.math.complex.Complex complex30 = complex15.cos();
        org.apache.commons.math.complex.Complex complex31 = complex30.conjugate();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[0.0, 35.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.0d + "'", double24 == 0.0d);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 4 + "'", int25 == 4);
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
    }

    @Test
    public void test06121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06121");
        java.lang.Object[] objArray5 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException6 = new org.apache.commons.math.ConvergenceException("", objArray5);
        java.lang.Object[] objArray8 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException9 = new org.apache.commons.math.ConvergenceException("", objArray8);
        org.apache.commons.math.ConvergenceException convergenceException10 = new org.apache.commons.math.ConvergenceException("", objArray5, (java.lang.Throwable) convergenceException9);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException12 = new org.apache.commons.math.FunctionEvaluationException((double) 100);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException13 = new org.apache.commons.math.FunctionEvaluationException(100.0d, "org.apache.commons.math.ConvergenceException: hi!", objArray5, (java.lang.Throwable) functionEvaluationException12);
        double double14 = functionEvaluationException13.getArgument();
        org.apache.commons.math.ConvergenceException convergenceException15 = new org.apache.commons.math.ConvergenceException("", (java.lang.Throwable) functionEvaluationException13);
        org.junit.Assert.assertNotNull(objArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray5), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray5), "[]");
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[]");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 100.0d + "'", double14 == 100.0d);
    }

    @Test
    public void test06122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06122");
        org.apache.commons.math.ConvergenceException convergenceException3 = new org.apache.commons.math.ConvergenceException("Evaluation failed for argument = {0}");
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException4 = new org.apache.commons.math.FunctionEvaluationException((double) 4, "org.apache.commons.math.ConvergenceException: ", (java.lang.Throwable) convergenceException3);
        org.apache.commons.math.ConvergenceException convergenceException5 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) functionEvaluationException4);
        java.lang.String str6 = convergenceException5.toString();
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: " + "'", str6, "org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: ");
    }

    @Test
    public void test06123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06123");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex1 = complex0.cosh();
        double double2 = complex0.abs();
        org.apache.commons.math.complex.Complex complex3 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex4 = complex3.cosh();
        double double5 = complex3.abs();
        org.apache.commons.math.complex.Complex complex6 = complex3.conjugate();
        org.apache.commons.math.complex.Complex complex7 = complex6.conjugate();
        org.apache.commons.math.complex.Complex complex8 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex9 = complex8.tan();
        org.apache.commons.math.complex.Complex complex10 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex11 = complex10.cosh();
        org.apache.commons.math.complex.Complex complex12 = complex11.acos();
        double double13 = complex11.getReal();
        boolean boolean14 = complex9.equals((java.lang.Object) complex11);
        org.apache.commons.math.complex.Complex complex15 = complex7.subtract(complex11);
        org.apache.commons.math.complex.Complex complex16 = complex11.exp();
        org.apache.commons.math.complex.Complex complex17 = complex0.divide(complex11);
        org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex19 = complex18.sqrt();
        org.apache.commons.math.complex.Complex complex20 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex21 = complex20.cosh();
        double double22 = complex20.abs();
        org.apache.commons.math.complex.Complex complex23 = complex20.conjugate();
        org.apache.commons.math.complex.Complex complex24 = complex18.divide(complex23);
        org.apache.commons.math.complex.Complex complex25 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex26 = complex25.cosh();
        org.apache.commons.math.complex.Complex complex27 = complex25.log();
        org.apache.commons.math.complex.Complex complex28 = complex25.sin();
        org.apache.commons.math.complex.Complex complex29 = complex25.log();
        org.apache.commons.math.complex.Complex complex30 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex31 = complex30.sqrt();
        org.apache.commons.math.complex.Complex complex32 = complex25.divide(complex31);
        org.apache.commons.math.complex.Complex complex33 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex34 = complex33.cosh();
        double double35 = complex33.abs();
        org.apache.commons.math.complex.Complex complex36 = complex33.conjugate();
        org.apache.commons.math.complex.Complex complex37 = complex36.conjugate();
        org.apache.commons.math.complex.Complex complex38 = complex32.subtract(complex37);
        org.apache.commons.math.complex.Complex complex39 = complex24.multiply(complex32);
        boolean boolean40 = complex32.isInfinite();
        org.apache.commons.math.complex.Complex complex41 = complex32.negate();
        org.apache.commons.math.complex.Complex complex42 = complex41.negate();
        org.apache.commons.math.complex.Complex complex43 = complex0.multiply(complex42);
        org.apache.commons.math.complex.Complex complex44 = complex42.acos();
        double double45 = complex44.getReal();
        org.apache.commons.math.complex.Complex complex46 = complex44.cos();
        org.apache.commons.math.complex.Complex complex47 = complex46.tan();
        org.apache.commons.math.complex.Complex complex48 = complex47.sqrt();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + Double.POSITIVE_INFINITY + "'", double2 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + Double.POSITIVE_INFINITY + "'", double5 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + Double.POSITIVE_INFINITY + "'", double22 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + Double.POSITIVE_INFINITY + "'", double35 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertTrue(Double.isNaN(double45));
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
    }

    @Test
    public void test06124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06124");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex2 = complex1.sqrt();
        org.apache.commons.math.complex.Complex complex3 = complex2.sin();
        org.apache.commons.math.complex.Complex complex4 = complex0.pow(complex2);
        org.apache.commons.math.complex.Complex complex5 = complex4.asin();
        org.apache.commons.math.complex.Complex complex6 = complex4.tan();
        org.apache.commons.math.complex.Complex complex7 = complex6.log();
        double double8 = complex6.getReal();
        org.apache.commons.math.complex.Complex complex9 = complex6.sqrt1z();
        org.apache.commons.math.complex.Complex complex10 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex11 = complex10.cosh();
        double double12 = complex10.abs();
        org.apache.commons.math.complex.Complex complex13 = complex10.conjugate();
        org.apache.commons.math.complex.Complex complex14 = complex13.conjugate();
        org.apache.commons.math.complex.Complex complex15 = complex13.tanh();
        org.apache.commons.math.complex.Complex complex16 = complex13.sqrt1z();
        org.apache.commons.math.complex.Complex complex17 = complex16.conjugate();
        double double18 = complex16.abs();
        org.apache.commons.math.complex.Complex complex19 = complex16.exp();
        org.apache.commons.math.complex.Complex complex20 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex21 = complex20.cosh();
        double double22 = complex20.abs();
        org.apache.commons.math.complex.Complex complex23 = complex20.conjugate();
        org.apache.commons.math.complex.Complex complex24 = complex23.conjugate();
        boolean boolean25 = complex23.isInfinite();
        org.apache.commons.math.complex.Complex complex26 = complex23.cos();
        org.apache.commons.math.complex.Complex complex27 = complex23.conjugate();
        org.apache.commons.math.complex.Complex complex28 = complex23.sin();
        org.apache.commons.math.complex.Complex complex29 = complex28.negate();
        org.apache.commons.math.complex.Complex complex30 = complex29.exp();
        org.apache.commons.math.complex.Complex complex31 = complex29.acos();
        org.apache.commons.math.complex.Complex complex32 = null;
        org.apache.commons.math.complex.Complex complex33 = complex31.divide(complex32);
        org.apache.commons.math.complex.Complex complex34 = complex16.divide(complex32);
        org.apache.commons.math.complex.Complex complex35 = complex6.pow(complex16);
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + Double.POSITIVE_INFINITY + "'", double12 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + Double.POSITIVE_INFINITY + "'", double22 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
    }

    @Test
    public void test06125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06125");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex1 = complex0.cosh();
        double double2 = complex0.abs();
        org.apache.commons.math.complex.Complex complex3 = complex0.conjugate();
        org.apache.commons.math.complex.Complex complex4 = complex3.conjugate();
        org.apache.commons.math.complex.Complex complex5 = complex3.tanh();
        org.apache.commons.math.complex.Complex complex6 = complex5.tan();
        org.apache.commons.math.complex.Complex complex7 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex8 = complex7.cosh();
        double double9 = complex7.abs();
        org.apache.commons.math.complex.Complex complex10 = complex7.conjugate();
        org.apache.commons.math.complex.Complex complex11 = complex10.conjugate();
        org.apache.commons.math.complex.Complex complex12 = complex6.subtract(complex10);
        org.apache.commons.math.complex.Complex complex13 = complex10.negate();
        org.apache.commons.math.complex.Complex complex14 = complex10.tanh();
        org.apache.commons.math.complex.Complex complex15 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex16 = complex15.cosh();
        org.apache.commons.math.complex.Complex complex17 = complex15.log();
        org.apache.commons.math.complex.Complex complex18 = complex17.cos();
        double double19 = complex18.abs();
        org.apache.commons.math.complex.Complex complex20 = complex18.sqrt();
        org.apache.commons.math.complex.Complex complex21 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex22 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex23 = complex22.sqrt();
        org.apache.commons.math.complex.Complex complex24 = complex23.sin();
        org.apache.commons.math.complex.Complex complex25 = complex21.pow(complex23);
        org.apache.commons.math.complex.Complex complex26 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex27 = complex26.cosh();
        org.apache.commons.math.complex.Complex complex28 = complex26.log();
        org.apache.commons.math.complex.Complex complex29 = complex21.divide(complex28);
        org.apache.commons.math.complex.Complex complex30 = complex20.subtract(complex29);
        org.apache.commons.math.complex.Complex complex31 = complex20.conjugate();
        org.apache.commons.math.complex.Complex complex32 = complex20.cos();
        org.apache.commons.math.complex.Complex complex33 = complex32.negate();
        boolean boolean34 = complex10.equals((java.lang.Object) complex32);
        org.apache.commons.math.complex.Complex complex35 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex36 = complex35.cosh();
        org.apache.commons.math.complex.Complex complex37 = complex35.log();
        org.apache.commons.math.complex.Complex complex38 = complex37.cos();
        org.apache.commons.math.complex.Complex complex39 = complex37.exp();
        org.apache.commons.math.complex.Complex complex40 = complex37.atan();
        org.apache.commons.math.complex.Complex complex41 = complex40.sqrt();
        org.apache.commons.math.complex.Complex complex42 = complex41.sqrt1z();
        org.apache.commons.math.complex.Complex complex43 = complex41.negate();
        org.apache.commons.math.complex.Complex complex44 = complex32.divide(complex43);
        org.apache.commons.math.complex.Complex complex45 = complex43.sqrt();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + Double.POSITIVE_INFINITY + "'", double2 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + Double.POSITIVE_INFINITY + "'", double9 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
    }

    @Test
    public void test06126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06126");
        double[] doubleArray2 = new double[] { (byte) 1, 100 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) (short) 100);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver6 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction3);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction7 = laguerreSolver6.getPolynomialFunction();
        double double8 = laguerreSolver6.getAbsoluteAccuracy();
        double[] doubleArray14 = new double[] { 0L, '#', 100.0f, 0L, (-1.0d) };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction15 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray14);
        org.apache.commons.math.complex.Complex[] complexArray17 = laguerreSolver6.solveAll(doubleArray14, 10001.0d);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction18 = laguerreSolver6.getPolynomialFunction();
        double[] doubleArray21 = new double[] { (byte) 1, 100 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction22 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray21);
        double double24 = polynomialFunction22.value((double) (short) 100);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver25 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction22);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction26 = laguerreSolver25.getPolynomialFunction();
        double double27 = laguerreSolver25.getAbsoluteAccuracy();
        double[] doubleArray33 = new double[] { 0L, '#', 100.0f, 0L, (-1.0d) };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction34 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray33);
        org.apache.commons.math.complex.Complex[] complexArray36 = laguerreSolver25.solveAll(doubleArray33, 10001.0d);
        laguerreSolver25.setFunctionValueAccuracy((double) 10.0f);
        double double39 = laguerreSolver25.getRelativeAccuracy();
        double[] doubleArray45 = new double[] { 0L, '#', 100.0f, 0L, (-1.0d) };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction46 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray45);
        double double48 = polynomialFunction46.value((double) 0);
        double double50 = polynomialFunction46.value((double) (byte) 0);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction51 = polynomialFunction46.polynomialDerivative();
        double[] doubleArray52 = polynomialFunction46.getCoefficients();
        org.apache.commons.math.complex.Complex[] complexArray54 = laguerreSolver25.solveAll(doubleArray52, (-1.6365376E7d));
        org.apache.commons.math.complex.Complex[] complexArray56 = laguerreSolver6.solveAll(doubleArray52, (double) 100L);
        double double57 = laguerreSolver6.getRelativeAccuracy();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction58 = laguerreSolver6.getPolynomialFunction();
        laguerreSolver6.resetRelativeAccuracy();
        // The following exception was thrown during execution in test generation
        try {
            double double63 = laguerreSolver6.solve((-6.780721063026763E80d), (-16099.0d), 0.0d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Function values at endpoints do not have different signs.  Endpoints: [-6.780721063026763E80,-16099.0]  Values: [-6.780721063026763E82,-1609899.0]");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 10001.0d + "'", double5 == 10001.0d);
        org.junit.Assert.assertNotNull(polynomialFunction7);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 1.0E-6d + "'", double8 == 1.0E-6d);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[0.0, 35.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(complexArray17);
        org.junit.Assert.assertNotNull(polynomialFunction18);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 10001.0d + "'", double24 == 10001.0d);
        org.junit.Assert.assertNotNull(polynomialFunction26);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 1.0E-6d + "'", double27 == 1.0E-6d);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[0.0, 35.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(complexArray36);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 1.0E-14d + "'", double39 == 1.0E-14d);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[0.0, 35.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 0.0d + "'", double48 == 0.0d);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 0.0d + "'", double50 == 0.0d);
        org.junit.Assert.assertNotNull(polynomialFunction51);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[0.0, 35.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(complexArray54);
        org.junit.Assert.assertNotNull(complexArray56);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 1.0E-14d + "'", double57 == 1.0E-14d);
        org.junit.Assert.assertNotNull(polynomialFunction58);
    }

    @Test
    public void test06127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06127");
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException7 = new org.apache.commons.math.FunctionEvaluationException((double) (-1L), "org.apache.commons.math.MaxIterationsExceededException: ");
        java.lang.String str8 = functionEvaluationException7.getPattern();
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException9 = new org.apache.commons.math.FunctionEvaluationException((-0.3533630315721405d), (java.lang.Throwable) functionEvaluationException7);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException10 = new org.apache.commons.math.FunctionEvaluationException((double) (byte) 100, "org.apache.commons.math.FunctionEvaluationException: org.apache.commons.math.MaxIterationsExceededException: org.apache.commons.math.ConvergenceException: Evaluation failed for argument = {0}", (java.lang.Throwable) functionEvaluationException7);
        java.lang.Object[] objArray11 = functionEvaluationException7.getArguments();
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException12 = new org.apache.commons.math.FunctionEvaluationException((-0.009999999999999787d), "org.apache.commons.math.ConvergenceException: org.apache.commons.math.FunctionEvaluationException: Evaluation failed for argument = 10,101", (java.lang.Throwable) functionEvaluationException7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "org.apache.commons.math.MaxIterationsExceededException: " + "'", str8, "org.apache.commons.math.MaxIterationsExceededException: ");
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[]");
    }

    @Test
    public void test06128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06128");
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException4 = new org.apache.commons.math.FunctionEvaluationException(1.0E-14d, "org.apache.commons.math.FunctionEvaluationException: org.apache.commons.math.ConvergenceException: hi!");
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException5 = new org.apache.commons.math.FunctionEvaluationException(1801.0d, "org.apache.commons.math.MaxIterationsExceededException: org.apache.commons.math.ConvergenceException: Evaluation failed for argument = {0}", (java.lang.Throwable) functionEvaluationException4);
        java.lang.Object[] objArray6 = functionEvaluationException5.getArguments();
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[]");
    }

    @Test
    public void test06129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06129");
        double[] doubleArray2 = new double[] { (byte) 1, 100 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) (short) 100);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver6 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction3);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction7 = laguerreSolver6.getPolynomialFunction();
        double double8 = laguerreSolver6.getRelativeAccuracy();
        laguerreSolver6.resetRelativeAccuracy();
        laguerreSolver6.setFunctionValueAccuracy((double) (-1.0f));
        int int12 = laguerreSolver6.getMaximalIterationCount();
        laguerreSolver6.setMaximalIterationCount(4);
        int int15 = laguerreSolver6.getMaximalIterationCount();
        laguerreSolver6.resetFunctionValueAccuracy();
        double[] doubleArray21 = new double[] { (byte) 1, 100 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction22 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray21);
        double double24 = polynomialFunction22.value((double) (short) 100);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver25 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction22);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction26 = laguerreSolver25.getPolynomialFunction();
        double double27 = laguerreSolver25.getAbsoluteAccuracy();
        double[] doubleArray33 = new double[] { 0L, '#', 100.0f, 0L, (-1.0d) };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction34 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray33);
        org.apache.commons.math.complex.Complex[] complexArray36 = laguerreSolver25.solveAll(doubleArray33, 10001.0d);
        laguerreSolver25.setFunctionValueAccuracy((double) 10.0f);
        double double39 = laguerreSolver25.getRelativeAccuracy();
        double[] doubleArray45 = new double[] { 0L, '#', 100.0f, 0L, (-1.0d) };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction46 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray45);
        double double48 = polynomialFunction46.value((double) 0);
        double double50 = polynomialFunction46.value((double) (byte) 0);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction51 = polynomialFunction46.polynomialDerivative();
        double[] doubleArray52 = polynomialFunction46.getCoefficients();
        org.apache.commons.math.complex.Complex[] complexArray54 = laguerreSolver25.solveAll(doubleArray52, (-1.6365376E7d));
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException55 = new org.apache.commons.math.MaxIterationsExceededException(3, "org.apache.commons.math.MaxIterationsExceededException: org.apache.commons.math.MaxIterationsExceededException: ", (java.lang.Object[]) complexArray54);
        org.apache.commons.math.complex.Complex complex56 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex57 = complex56.cosh();
        double double58 = complex56.abs();
        org.apache.commons.math.complex.Complex complex59 = complex56.conjugate();
        org.apache.commons.math.complex.Complex complex60 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex61 = complex60.cosh();
        double double62 = complex60.abs();
        org.apache.commons.math.complex.Complex complex63 = complex60.conjugate();
        org.apache.commons.math.complex.Complex complex64 = complex63.conjugate();
        org.apache.commons.math.complex.Complex complex65 = complex63.tanh();
        org.apache.commons.math.complex.Complex complex66 = complex63.atan();
        org.apache.commons.math.complex.Complex complex67 = complex56.subtract(complex63);
        org.apache.commons.math.complex.Complex complex68 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex69 = complex68.cosh();
        org.apache.commons.math.complex.Complex complex70 = complex68.log();
        org.apache.commons.math.complex.Complex complex71 = complex70.cos();
        double double72 = complex71.abs();
        org.apache.commons.math.complex.Complex complex73 = complex71.tanh();
        org.apache.commons.math.complex.Complex complex74 = complex63.pow(complex71);
        org.apache.commons.math.complex.Complex complex75 = complex63.sin();
        org.apache.commons.math.complex.Complex complex76 = complex63.acos();
        double double77 = complex63.getReal();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.complex.Complex complex78 = laguerreSolver6.solve(complexArray54, complex63);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.MaxIterationsExceededException; message: Maximal number of iterations (4) exceeded");
        } catch (org.apache.commons.math.MaxIterationsExceededException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 10001.0d + "'", double5 == 10001.0d);
        org.junit.Assert.assertNotNull(polynomialFunction7);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 1.0E-14d + "'", double8 == 1.0E-14d);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 100 + "'", int12 == 100);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 4 + "'", int15 == 4);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 10001.0d + "'", double24 == 10001.0d);
        org.junit.Assert.assertNotNull(polynomialFunction26);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 1.0E-6d + "'", double27 == 1.0E-6d);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[0.0, 35.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(complexArray36);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 1.0E-14d + "'", double39 == 1.0E-14d);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[0.0, 35.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 0.0d + "'", double48 == 0.0d);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 0.0d + "'", double50 == 0.0d);
        org.junit.Assert.assertNotNull(polynomialFunction51);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[0.0, 35.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(complexArray54);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + Double.POSITIVE_INFINITY + "'", double58 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + Double.POSITIVE_INFINITY + "'", double62 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertTrue(Double.isNaN(double72));
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertNotNull(complex75);
        org.junit.Assert.assertNotNull(complex76);
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + Double.POSITIVE_INFINITY + "'", double77 == Double.POSITIVE_INFINITY);
    }

    @Test
    public void test06130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06130");
        double[] doubleArray2 = new double[] { (byte) 1, 100 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) (short) 100);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver6 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction3);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction7 = laguerreSolver6.getPolynomialFunction();
        double double8 = laguerreSolver6.getRelativeAccuracy();
        laguerreSolver6.resetRelativeAccuracy();
        laguerreSolver6.setFunctionValueAccuracy((double) (-1.0f));
        laguerreSolver6.resetRelativeAccuracy();
        laguerreSolver6.resetAbsoluteAccuracy();
        laguerreSolver6.setRelativeAccuracy((double) (short) 10);
        laguerreSolver6.setAbsoluteAccuracy((double) 1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 10001.0d + "'", double5 == 10001.0d);
        org.junit.Assert.assertNotNull(polynomialFunction7);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 1.0E-14d + "'", double8 == 1.0E-14d);
    }

    @Test
    public void test06131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06131");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex1 = complex0.cosh();
        double double2 = complex0.abs();
        org.apache.commons.math.complex.Complex complex3 = complex0.conjugate();
        org.apache.commons.math.complex.Complex complex4 = complex3.conjugate();
        boolean boolean5 = complex3.isInfinite();
        org.apache.commons.math.complex.Complex complex6 = complex3.cos();
        org.apache.commons.math.complex.Complex complex7 = complex3.conjugate();
        org.apache.commons.math.complex.Complex complex8 = complex3.sin();
        boolean boolean9 = complex3.isNaN();
        org.apache.commons.math.complex.Complex complex10 = complex3.atan();
        org.apache.commons.math.complex.Complex complex11 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex12 = complex11.cosh();
        org.apache.commons.math.complex.Complex complex13 = complex12.acos();
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex15 = complex14.cosh();
        org.apache.commons.math.complex.Complex complex16 = complex14.log();
        org.apache.commons.math.complex.Complex complex17 = complex14.sin();
        org.apache.commons.math.complex.Complex complex18 = complex17.tanh();
        org.apache.commons.math.complex.Complex complex19 = complex12.add(complex18);
        org.apache.commons.math.complex.Complex complex20 = complex18.acos();
        org.apache.commons.math.complex.Complex complex21 = complex18.sin();
        org.apache.commons.math.complex.Complex complex22 = complex3.subtract(complex21);
        org.apache.commons.math.complex.Complex complex23 = complex22.exp();
        org.apache.commons.math.complex.Complex complex24 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex25 = complex24.sqrt();
        org.apache.commons.math.complex.Complex complex26 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex27 = complex26.cosh();
        double double28 = complex26.abs();
        org.apache.commons.math.complex.Complex complex29 = complex26.conjugate();
        org.apache.commons.math.complex.Complex complex30 = complex24.divide(complex29);
        org.apache.commons.math.complex.Complex complex31 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex32 = complex31.cosh();
        org.apache.commons.math.complex.Complex complex33 = complex31.log();
        org.apache.commons.math.complex.Complex complex34 = complex31.sin();
        org.apache.commons.math.complex.Complex complex35 = complex31.log();
        org.apache.commons.math.complex.Complex complex36 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex37 = complex36.sqrt();
        org.apache.commons.math.complex.Complex complex38 = complex31.divide(complex37);
        org.apache.commons.math.complex.Complex complex39 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex40 = complex39.cosh();
        double double41 = complex39.abs();
        org.apache.commons.math.complex.Complex complex42 = complex39.conjugate();
        org.apache.commons.math.complex.Complex complex43 = complex42.conjugate();
        org.apache.commons.math.complex.Complex complex44 = complex38.subtract(complex43);
        org.apache.commons.math.complex.Complex complex45 = complex30.multiply(complex38);
        org.apache.commons.math.complex.Complex complex46 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex47 = complex46.cosh();
        org.apache.commons.math.complex.Complex complex48 = complex46.log();
        org.apache.commons.math.complex.Complex complex49 = complex48.cos();
        double double50 = complex49.abs();
        org.apache.commons.math.complex.Complex complex51 = complex49.sqrt();
        org.apache.commons.math.complex.Complex complex52 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex53 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex54 = complex53.sqrt();
        org.apache.commons.math.complex.Complex complex55 = complex54.sin();
        org.apache.commons.math.complex.Complex complex56 = complex52.pow(complex54);
        org.apache.commons.math.complex.Complex complex57 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex58 = complex57.cosh();
        org.apache.commons.math.complex.Complex complex59 = complex57.log();
        org.apache.commons.math.complex.Complex complex60 = complex52.divide(complex59);
        org.apache.commons.math.complex.Complex complex61 = complex51.subtract(complex60);
        org.apache.commons.math.complex.Complex complex62 = complex38.pow(complex51);
        org.apache.commons.math.complex.Complex complex63 = complex51.exp();
        org.apache.commons.math.complex.Complex complex64 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex65 = complex64.sqrt();
        boolean boolean66 = complex64.isNaN();
        org.apache.commons.math.complex.Complex complex67 = complex64.sin();
        org.apache.commons.math.complex.Complex complex68 = complex67.exp();
        org.apache.commons.math.complex.Complex complex69 = complex67.cosh();
        org.apache.commons.math.complex.Complex complex70 = complex51.multiply(complex69);
        boolean boolean71 = complex22.equals((java.lang.Object) complex51);
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + Double.POSITIVE_INFINITY + "'", double2 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + Double.POSITIVE_INFINITY + "'", double28 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + Double.POSITIVE_INFINITY + "'", double41 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertTrue(Double.isNaN(double50));
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
    }

    @Test
    public void test06132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06132");
        double[] doubleArray2 = new double[] { (byte) 1, 100 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) (short) 100);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver6 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction3);
        double double10 = laguerreSolver6.solve((double) (-1L), 349.0d, (double) (short) 10);
        int int11 = laguerreSolver6.getIterationCount();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction12 = laguerreSolver6.getPolynomialFunction();
        laguerreSolver6.resetAbsoluteAccuracy();
        int int14 = laguerreSolver6.getIterationCount();
        double double18 = laguerreSolver6.solve((-1.0410151717904442E16d), 5201.0d, (double) 'a');
        laguerreSolver6.setRelativeAccuracy((-8.808275266783596E15d));
        double double21 = laguerreSolver6.getResult();
        int int22 = laguerreSolver6.getIterationCount();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 10001.0d + "'", double5 == 10001.0d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + (-0.01d) + "'", double10 == (-0.01d));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 3 + "'", int11 == 3);
        org.junit.Assert.assertNotNull(polynomialFunction12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 3 + "'", int14 == 3);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + (-0.01d) + "'", double18 == (-0.01d));
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + (-0.01d) + "'", double21 == (-0.01d));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 3 + "'", int22 == 3);
    }

    @Test
    public void test06133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06133");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex1 = complex0.sqrt();
        org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex3 = complex2.cosh();
        double double4 = complex2.abs();
        org.apache.commons.math.complex.Complex complex5 = complex2.conjugate();
        org.apache.commons.math.complex.Complex complex6 = complex0.divide(complex5);
        org.apache.commons.math.complex.Complex complex7 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex8 = complex7.cosh();
        org.apache.commons.math.complex.Complex complex9 = complex7.log();
        org.apache.commons.math.complex.Complex complex10 = complex7.sin();
        org.apache.commons.math.complex.Complex complex11 = complex7.log();
        org.apache.commons.math.complex.Complex complex12 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex13 = complex12.sqrt();
        org.apache.commons.math.complex.Complex complex14 = complex7.divide(complex13);
        org.apache.commons.math.complex.Complex complex15 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex16 = complex15.cosh();
        double double17 = complex15.abs();
        org.apache.commons.math.complex.Complex complex18 = complex15.conjugate();
        org.apache.commons.math.complex.Complex complex19 = complex18.conjugate();
        org.apache.commons.math.complex.Complex complex20 = complex14.subtract(complex19);
        org.apache.commons.math.complex.Complex complex21 = complex6.multiply(complex14);
        org.apache.commons.math.complex.Complex complex22 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex23 = complex22.cosh();
        org.apache.commons.math.complex.Complex complex24 = complex22.log();
        org.apache.commons.math.complex.Complex complex25 = complex24.cos();
        double double26 = complex25.abs();
        org.apache.commons.math.complex.Complex complex27 = complex25.sqrt();
        org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex29 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex30 = complex29.sqrt();
        org.apache.commons.math.complex.Complex complex31 = complex30.sin();
        org.apache.commons.math.complex.Complex complex32 = complex28.pow(complex30);
        org.apache.commons.math.complex.Complex complex33 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex34 = complex33.cosh();
        org.apache.commons.math.complex.Complex complex35 = complex33.log();
        org.apache.commons.math.complex.Complex complex36 = complex28.divide(complex35);
        org.apache.commons.math.complex.Complex complex37 = complex27.subtract(complex36);
        org.apache.commons.math.complex.Complex complex38 = complex14.pow(complex27);
        org.apache.commons.math.complex.Complex complex39 = complex27.exp();
        org.apache.commons.math.complex.Complex complex40 = complex27.sinh();
        org.apache.commons.math.complex.Complex complex41 = complex40.tanh();
        org.apache.commons.math.complex.Complex complex42 = complex41.conjugate();
        org.apache.commons.math.complex.Complex complex43 = complex41.tan();
        org.apache.commons.math.complex.Complex complex46 = new org.apache.commons.math.complex.Complex((double) 32, 1.0E-15d);
        org.apache.commons.math.complex.Complex complex47 = complex43.add(complex46);
        org.apache.commons.math.complex.Complex complex48 = complex46.conjugate();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + Double.POSITIVE_INFINITY + "'", double4 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + Double.POSITIVE_INFINITY + "'", double17 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
    }

    @Test
    public void test06134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06134");
        java.lang.Object[] objArray17 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException18 = new org.apache.commons.math.ConvergenceException("", objArray17);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException19 = new org.apache.commons.math.FunctionEvaluationException((double) (short) 10, "hi!", objArray17);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException20 = new org.apache.commons.math.MaxIterationsExceededException((int) (byte) 0, "org.apache.commons.math.ConvergenceException: hi!", objArray17);
        java.lang.Throwable throwable21 = null;
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException22 = new org.apache.commons.math.FunctionEvaluationException((double) 10L, "org.apache.commons.math.ConvergenceException: ", objArray17, throwable21);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException24 = new org.apache.commons.math.FunctionEvaluationException((double) 10L);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException25 = new org.apache.commons.math.FunctionEvaluationException((-1.0003990597689866E16d), "org.apache.commons.math.FunctionEvaluationException: org.apache.commons.math.ConvergenceException: hi!", objArray17, (java.lang.Throwable) functionEvaluationException24);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException26 = new org.apache.commons.math.FunctionEvaluationException((-8.7584986E7d), "org.apache.commons.math.ConvergenceException: Evaluation failed for argument = {0}", objArray17);
        org.apache.commons.math.ConvergenceException convergenceException27 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.MaxIterationsExceededException: hi!", objArray17);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException28 = new org.apache.commons.math.FunctionEvaluationException((-1.0d), "org.apache.commons.math.ConvergenceException: org.apache.commons.math.FunctionEvaluationException: ", objArray17);
        org.apache.commons.math.ConvergenceException convergenceException30 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.FunctionEvaluationException: org.apache.commons.math.MaxIterationsExceededException: org.apache.commons.math.FunctionEvaluationException: ");
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException31 = new org.apache.commons.math.FunctionEvaluationException((-1.613685772035768E20d), "org.apache.commons.math.ConvergenceException: Evaluation failed for argument = 100", objArray17, (java.lang.Throwable) convergenceException30);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException32 = new org.apache.commons.math.FunctionEvaluationException((-7.173051538824589E28d), (java.lang.Throwable) convergenceException30);
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray17), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray17), "[]");
    }

    @Test
    public void test06135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06135");
        double[] doubleArray2 = new double[] { (byte) -1, '#' };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction4 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver5 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction4);
        laguerreSolver5.setAbsoluteAccuracy(0.0d);
        laguerreSolver5.resetRelativeAccuracy();
        laguerreSolver5.setAbsoluteAccuracy((double) 0.0f);
        // The following exception was thrown during execution in test generation
        try {
            double double13 = laguerreSolver5.solve(10.170609052699179d, (-1.0d));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Endpoints do not specify an interval: [10.170609052699179,-1.0]");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[-1.0, 35.0]");
        org.junit.Assert.assertNotNull(polynomialFunction4);
    }

    @Test
    public void test06136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06136");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex1 = complex0.cosh();
        org.apache.commons.math.complex.Complex complex2 = complex0.log();
        org.apache.commons.math.complex.Complex complex3 = complex0.sin();
        org.apache.commons.math.complex.Complex complex4 = complex0.log();
        org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex6 = complex5.sqrt();
        org.apache.commons.math.complex.Complex complex7 = complex0.divide(complex6);
        org.apache.commons.math.complex.Complex complex8 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex9 = complex8.cosh();
        org.apache.commons.math.complex.Complex complex10 = complex9.acos();
        double double11 = complex9.getReal();
        org.apache.commons.math.complex.Complex complex12 = complex9.sqrt();
        org.apache.commons.math.complex.Complex complex13 = complex0.pow(complex9);
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex15 = complex14.cosh();
        org.apache.commons.math.complex.Complex complex16 = complex14.log();
        org.apache.commons.math.complex.Complex complex17 = complex16.cos();
        org.apache.commons.math.complex.Complex complex18 = complex9.multiply(complex16);
        org.apache.commons.math.complex.Complex complex19 = complex16.tanh();
        org.apache.commons.math.complex.Complex complex20 = complex19.asin();
        double[] doubleArray26 = new double[] { 0L, '#', 100.0f, 0L, (-1.0d) };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction27 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray26);
        int int28 = polynomialFunction27.degree();
        boolean boolean29 = complex19.equals((java.lang.Object) polynomialFunction27);
        org.apache.commons.math.complex.Complex complex30 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex31 = complex30.cosh();
        double double32 = complex30.abs();
        org.apache.commons.math.complex.Complex complex33 = complex30.conjugate();
        org.apache.commons.math.complex.Complex complex34 = complex33.conjugate();
        boolean boolean35 = complex33.isInfinite();
        org.apache.commons.math.complex.Complex complex36 = complex33.asin();
        boolean boolean37 = complex33.isNaN();
        org.apache.commons.math.complex.Complex complex38 = complex33.negate();
        org.apache.commons.math.complex.Complex complex39 = complex19.pow(complex38);
        org.apache.commons.math.complex.Complex complex40 = complex19.exp();
        org.apache.commons.math.complex.Complex complex41 = complex19.tan();
        org.apache.commons.math.complex.Complex complex42 = complex41.atan();
        org.apache.commons.math.complex.Complex complex43 = complex41.exp();
        org.apache.commons.math.complex.Complex complex44 = complex43.sqrt1z();
        org.apache.commons.math.complex.Complex complex45 = complex44.sqrt1z();
        org.apache.commons.math.complex.Complex complex46 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex47 = complex46.cosh();
        org.apache.commons.math.complex.Complex complex48 = complex46.log();
        org.apache.commons.math.complex.Complex complex49 = complex46.sin();
        org.apache.commons.math.complex.Complex complex50 = complex46.log();
        org.apache.commons.math.complex.Complex complex51 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex52 = complex51.sqrt();
        org.apache.commons.math.complex.Complex complex53 = complex46.divide(complex52);
        org.apache.commons.math.complex.Complex complex54 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex55 = complex54.cosh();
        org.apache.commons.math.complex.Complex complex56 = complex55.acos();
        double double57 = complex55.getReal();
        org.apache.commons.math.complex.Complex complex58 = complex55.sqrt();
        org.apache.commons.math.complex.Complex complex59 = complex46.pow(complex55);
        org.apache.commons.math.complex.Complex complex60 = complex59.sqrt1z();
        org.apache.commons.math.complex.Complex complex61 = complex59.atan();
        org.apache.commons.math.complex.Complex complex62 = complex59.sinh();
        org.apache.commons.math.complex.Complex complex63 = complex45.add(complex59);
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[0.0, 35.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 4 + "'", int28 == 4);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + Double.POSITIVE_INFINITY + "'", double32 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertTrue(Double.isNaN(double57));
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex63);
    }

    @Test
    public void test06137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06137");
        double[] doubleArray2 = new double[] { (byte) 1, 100 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) (short) 100);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver6 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction3);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction7 = laguerreSolver6.getPolynomialFunction();
        double double8 = laguerreSolver6.getAbsoluteAccuracy();
        laguerreSolver6.resetFunctionValueAccuracy();
        laguerreSolver6.setFunctionValueAccuracy((-0.3400000100000003d));
        double double12 = laguerreSolver6.getFunctionValueAccuracy();
        laguerreSolver6.setMaximalIterationCount((int) (short) 10);
        laguerreSolver6.resetRelativeAccuracy();
        laguerreSolver6.resetMaximalIterationCount();
        laguerreSolver6.resetFunctionValueAccuracy();
        // The following exception was thrown during execution in test generation
        try {
            int int18 = laguerreSolver6.getIterationCount();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: No result available");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 10001.0d + "'", double5 == 10001.0d);
        org.junit.Assert.assertNotNull(polynomialFunction7);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 1.0E-6d + "'", double8 == 1.0E-6d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + (-0.3400000100000003d) + "'", double12 == (-0.3400000100000003d));
    }

    @Test
    public void test06138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06138");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex2 = complex1.sqrt();
        org.apache.commons.math.complex.Complex complex3 = complex2.sin();
        org.apache.commons.math.complex.Complex complex4 = complex0.pow(complex2);
        org.apache.commons.math.complex.Complex complex5 = complex4.asin();
        org.apache.commons.math.complex.Complex complex6 = complex5.atan();
        boolean boolean7 = complex6.isInfinite();
        org.apache.commons.math.complex.Complex complex8 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex9 = complex6.subtract(complex8);
        org.apache.commons.math.complex.Complex complex10 = complex6.conjugate();
        org.apache.commons.math.complex.Complex complex11 = complex10.sqrt();
        double double12 = complex11.getReal();
        org.apache.commons.math.complex.Complex complex13 = complex11.sin();
        org.apache.commons.math.complex.Complex complex14 = complex11.sinh();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
    }

    @Test
    public void test06139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06139");
        double[] doubleArray2 = new double[] { (byte) 1, 100 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) (short) 100);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver6 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction3);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction7 = laguerreSolver6.getPolynomialFunction();
        double double8 = laguerreSolver6.getRelativeAccuracy();
        laguerreSolver6.resetRelativeAccuracy();
        laguerreSolver6.setRelativeAccuracy((double) (short) 1);
        laguerreSolver6.setMaximalIterationCount((int) ' ');
        double double14 = laguerreSolver6.getRelativeAccuracy();
        laguerreSolver6.resetRelativeAccuracy();
        laguerreSolver6.resetFunctionValueAccuracy();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 10001.0d + "'", double5 == 10001.0d);
        org.junit.Assert.assertNotNull(polynomialFunction7);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 1.0E-14d + "'", double8 == 1.0E-14d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 1.0d + "'", double14 == 1.0d);
    }

    @Test
    public void test06140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06140");
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException8 = new org.apache.commons.math.FunctionEvaluationException((double) 100);
        java.lang.Object[] objArray9 = functionEvaluationException8.getArguments();
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException10 = new org.apache.commons.math.MaxIterationsExceededException((int) (short) -1, "", objArray9);
        org.apache.commons.math.ConvergenceException convergenceException11 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: ", objArray9);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException12 = new org.apache.commons.math.MaxIterationsExceededException((int) ' ', "Maximal number of iterations ({0}) exceeded", objArray9);
        double[] doubleArray17 = new double[] { (byte) 1, 100 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction18 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray17);
        double double20 = polynomialFunction18.value((double) (short) 100);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver21 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction18);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction22 = laguerreSolver21.getPolynomialFunction();
        laguerreSolver21.setRelativeAccuracy((double) 0);
        double[] doubleArray27 = new double[] { (byte) -1, '#' };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction28 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray27);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction29 = polynomialFunction28.polynomialDerivative();
        double[] doubleArray30 = polynomialFunction28.getCoefficients();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction31 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray30);
        org.apache.commons.math.complex.Complex[] complexArray33 = laguerreSolver21.solveAll(doubleArray30, (double) 4);
        laguerreSolver21.setAbsoluteAccuracy((double) 1);
        double double36 = laguerreSolver21.getRelativeAccuracy();
        double double37 = laguerreSolver21.getResult();
        laguerreSolver21.setAbsoluteAccuracy((double) 32);
        double[] doubleArray46 = new double[] { 100.0f, (-0.01d), (byte) 0, (byte) 0, 3, 1.0f };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction47 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray46);
        org.apache.commons.math.complex.Complex[] complexArray49 = laguerreSolver21.solveAll(doubleArray46, (-1.0d));
        java.lang.Object[] objArray55 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException56 = new org.apache.commons.math.ConvergenceException("", objArray55);
        java.lang.Object[] objArray61 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException62 = new org.apache.commons.math.ConvergenceException("", objArray61);
        java.lang.Object[] objArray64 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException65 = new org.apache.commons.math.ConvergenceException("", objArray64);
        org.apache.commons.math.ConvergenceException convergenceException66 = new org.apache.commons.math.ConvergenceException("", objArray61, (java.lang.Throwable) convergenceException65);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException68 = new org.apache.commons.math.FunctionEvaluationException((double) 100);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException69 = new org.apache.commons.math.FunctionEvaluationException(100.0d, "org.apache.commons.math.ConvergenceException: hi!", objArray61, (java.lang.Throwable) functionEvaluationException68);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException70 = new org.apache.commons.math.FunctionEvaluationException((double) '#', "", objArray55, (java.lang.Throwable) functionEvaluationException69);
        java.lang.String str71 = functionEvaluationException70.getPattern();
        double double72 = functionEvaluationException70.getArgument();
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException73 = new org.apache.commons.math.FunctionEvaluationException((double) (byte) 0, (java.lang.Throwable) functionEvaluationException70);
        org.apache.commons.math.ConvergenceException convergenceException74 = new org.apache.commons.math.ConvergenceException("hi!", (java.lang.Throwable) functionEvaluationException73);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException75 = new org.apache.commons.math.FunctionEvaluationException(1.0000000000001d, "org.apache.commons.math.FunctionEvaluationException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.FunctionEvaluationException: ", (java.lang.Object[]) complexArray49, (java.lang.Throwable) convergenceException74);
        org.apache.commons.math.ConvergenceException convergenceException76 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.MaxIterationsExceededException: ", objArray9, (java.lang.Throwable) convergenceException74);
        org.apache.commons.math.ConvergenceException convergenceException77 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.FunctionEvaluationException: org.apache.commons.math.FunctionEvaluationException: org.apache.commons.math.FunctionEvaluationException: ", objArray9);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[100.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 10001.0d + "'", double20 == 10001.0d);
        org.junit.Assert.assertNotNull(polynomialFunction22);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[-1.0, 35.0]");
        org.junit.Assert.assertNotNull(polynomialFunction29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[-1.0, 35.0]");
        org.junit.Assert.assertNotNull(complexArray33);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 0.0d + "'", double36 == 0.0d);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[100.0, -0.01, 0.0, 0.0, 3.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray49);
        org.junit.Assert.assertNotNull(objArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray55), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray55), "[]");
        org.junit.Assert.assertNotNull(objArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray61), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray61), "[]");
        org.junit.Assert.assertNotNull(objArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray64), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray64), "[]");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "" + "'", str71, "");
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 35.0d + "'", double72 == 35.0d);
    }

    @Test
    public void test06141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06141");
        java.lang.Object[] objArray12 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException13 = new org.apache.commons.math.ConvergenceException("", objArray12);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException14 = new org.apache.commons.math.FunctionEvaluationException((double) (short) 10, "hi!", objArray12);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException15 = new org.apache.commons.math.MaxIterationsExceededException((int) (byte) 0, "org.apache.commons.math.ConvergenceException: hi!", objArray12);
        java.lang.Throwable throwable16 = null;
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException17 = new org.apache.commons.math.FunctionEvaluationException((double) 10L, "org.apache.commons.math.ConvergenceException: ", objArray12, throwable16);
        java.lang.Object[] objArray24 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException25 = new org.apache.commons.math.ConvergenceException("", objArray24);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException26 = new org.apache.commons.math.MaxIterationsExceededException(0, "hi!", objArray24);
        org.apache.commons.math.ConvergenceException convergenceException28 = new org.apache.commons.math.ConvergenceException("");
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException29 = new org.apache.commons.math.FunctionEvaluationException((double) (short) 0, "hi!", objArray24, (java.lang.Throwable) convergenceException28);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException31 = new org.apache.commons.math.MaxIterationsExceededException((int) (short) 100);
        org.apache.commons.math.ConvergenceException convergenceException32 = new org.apache.commons.math.ConvergenceException("Maximal number of iterations ({0}) exceeded", objArray24, (java.lang.Throwable) maxIterationsExceededException31);
        int int33 = maxIterationsExceededException31.getMaxIterations();
        int int34 = maxIterationsExceededException31.getMaxIterations();
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException35 = new org.apache.commons.math.FunctionEvaluationException((double) 3, "org.apache.commons.math.ConvergenceException: hi!", objArray12, (java.lang.Throwable) maxIterationsExceededException31);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException36 = new org.apache.commons.math.MaxIterationsExceededException((int) (short) 0, "org.apache.commons.math.FunctionEvaluationException: Evaluation failed for argument = 350", objArray12);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException38 = new org.apache.commons.math.FunctionEvaluationException(10.170609052699179d);
        org.apache.commons.math.ConvergenceException convergenceException39 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.MaxIterationsExceededException: ", objArray12, (java.lang.Throwable) functionEvaluationException38);
        java.lang.String str40 = functionEvaluationException38.getPattern();
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12), "[]");
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 100 + "'", int33 == 100);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 100 + "'", int34 == 100);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "Evaluation failed for argument = {0}" + "'", str40, "Evaluation failed for argument = {0}");
    }

    @Test
    public void test06142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06142");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex1 = complex0.cosh();
        org.apache.commons.math.complex.Complex complex2 = complex1.acos();
        org.apache.commons.math.complex.Complex complex3 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex4 = complex3.cosh();
        org.apache.commons.math.complex.Complex complex5 = complex3.log();
        org.apache.commons.math.complex.Complex complex6 = complex3.sin();
        org.apache.commons.math.complex.Complex complex7 = complex6.tanh();
        org.apache.commons.math.complex.Complex complex8 = complex1.add(complex7);
        org.apache.commons.math.complex.Complex complex9 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex10 = complex9.cosh();
        double double11 = complex9.abs();
        org.apache.commons.math.complex.Complex complex12 = complex9.conjugate();
        org.apache.commons.math.complex.Complex complex13 = complex12.conjugate();
        boolean boolean14 = complex12.isInfinite();
        org.apache.commons.math.complex.Complex complex15 = complex12.asin();
        boolean boolean16 = complex12.isNaN();
        org.apache.commons.math.complex.Complex complex17 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex18 = complex17.cosh();
        org.apache.commons.math.complex.Complex complex19 = complex12.divide(complex17);
        org.apache.commons.math.complex.Complex complex20 = complex19.cos();
        org.apache.commons.math.complex.Complex complex21 = complex7.add(complex20);
        org.apache.commons.math.complex.Complex complex22 = complex21.sqrt();
        double double23 = complex21.getReal();
        boolean boolean24 = complex21.isInfinite();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + Double.POSITIVE_INFINITY + "'", double11 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test06143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06143");
        java.lang.Object[] objArray6 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException7 = new org.apache.commons.math.ConvergenceException("", objArray6);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException8 = new org.apache.commons.math.FunctionEvaluationException((double) (short) 10, "hi!", objArray6);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException9 = new org.apache.commons.math.FunctionEvaluationException(0.0d, "org.apache.commons.math.FunctionEvaluationException: ", objArray6);
        java.lang.Object[] objArray11 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException12 = new org.apache.commons.math.ConvergenceException("", objArray11);
        java.lang.Object[] objArray17 = new java.lang.Object[] { 0.0f, (short) 1 };
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException18 = new org.apache.commons.math.MaxIterationsExceededException(100, "", objArray17);
        convergenceException12.addSuppressed((java.lang.Throwable) maxIterationsExceededException18);
        org.apache.commons.math.ConvergenceException convergenceException20 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.FunctionEvaluationException: ", objArray6, (java.lang.Throwable) maxIterationsExceededException18);
        java.lang.Object[] objArray21 = maxIterationsExceededException18.getArguments();
        int int22 = maxIterationsExceededException18.getMaxIterations();
        java.lang.String str23 = maxIterationsExceededException18.getPattern();
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[]");
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[]");
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray17), "[0.0, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray17), "[0.0, 1]");
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray21), "[0.0, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray21), "[0.0, 1]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 100 + "'", int22 == 100);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
    }

    @Test
    public void test06144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06144");
        double[] doubleArray2 = new double[] { (byte) 1, 100 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) (short) 100);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver6 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction3);
        double double10 = laguerreSolver6.solve((double) (-1L), 349.0d, (double) (short) 10);
        double double11 = laguerreSolver6.getResult();
        double double12 = laguerreSolver6.getFunctionValueAccuracy();
        laguerreSolver6.resetRelativeAccuracy();
        laguerreSolver6.resetMaximalIterationCount();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction15 = laguerreSolver6.getPolynomialFunction();
        laguerreSolver6.resetRelativeAccuracy();
        laguerreSolver6.setAbsoluteAccuracy((-0.34000000999999996d));
        java.lang.Class<?> wildcardClass19 = laguerreSolver6.getClass();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 10001.0d + "'", double5 == 10001.0d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + (-0.01d) + "'", double10 == (-0.01d));
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + (-0.01d) + "'", double11 == (-0.01d));
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 1.0E-15d + "'", double12 == 1.0E-15d);
        org.junit.Assert.assertNotNull(polynomialFunction15);
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test06145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06145");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex1 = complex0.sqrt();
        org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex3 = complex2.cosh();
        double double4 = complex2.abs();
        org.apache.commons.math.complex.Complex complex5 = complex2.conjugate();
        org.apache.commons.math.complex.Complex complex6 = complex0.divide(complex5);
        org.apache.commons.math.complex.Complex complex7 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex8 = complex7.cosh();
        org.apache.commons.math.complex.Complex complex9 = complex7.log();
        org.apache.commons.math.complex.Complex complex10 = complex7.sin();
        org.apache.commons.math.complex.Complex complex11 = complex7.log();
        org.apache.commons.math.complex.Complex complex12 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex13 = complex12.sqrt();
        org.apache.commons.math.complex.Complex complex14 = complex7.divide(complex13);
        org.apache.commons.math.complex.Complex complex15 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex16 = complex15.cosh();
        double double17 = complex15.abs();
        org.apache.commons.math.complex.Complex complex18 = complex15.conjugate();
        org.apache.commons.math.complex.Complex complex19 = complex18.conjugate();
        org.apache.commons.math.complex.Complex complex20 = complex14.subtract(complex19);
        org.apache.commons.math.complex.Complex complex21 = complex6.multiply(complex14);
        org.apache.commons.math.complex.Complex complex22 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex23 = complex22.cosh();
        org.apache.commons.math.complex.Complex complex24 = complex22.log();
        org.apache.commons.math.complex.Complex complex25 = complex24.cos();
        double double26 = complex25.abs();
        org.apache.commons.math.complex.Complex complex27 = complex25.sqrt();
        org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex29 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex30 = complex29.sqrt();
        org.apache.commons.math.complex.Complex complex31 = complex30.sin();
        org.apache.commons.math.complex.Complex complex32 = complex28.pow(complex30);
        org.apache.commons.math.complex.Complex complex33 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex34 = complex33.cosh();
        org.apache.commons.math.complex.Complex complex35 = complex33.log();
        org.apache.commons.math.complex.Complex complex36 = complex28.divide(complex35);
        org.apache.commons.math.complex.Complex complex37 = complex27.subtract(complex36);
        org.apache.commons.math.complex.Complex complex38 = complex14.pow(complex27);
        org.apache.commons.math.complex.Complex complex39 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex40 = complex39.cosh();
        org.apache.commons.math.complex.Complex complex41 = complex40.acos();
        org.apache.commons.math.complex.Complex complex42 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex43 = complex42.cosh();
        org.apache.commons.math.complex.Complex complex44 = complex42.log();
        org.apache.commons.math.complex.Complex complex45 = complex42.sin();
        org.apache.commons.math.complex.Complex complex46 = complex45.tanh();
        org.apache.commons.math.complex.Complex complex47 = complex40.add(complex46);
        org.apache.commons.math.complex.Complex complex48 = complex47.exp();
        org.apache.commons.math.complex.Complex complex49 = complex27.divide(complex47);
        double double50 = complex47.getReal();
        org.apache.commons.math.complex.Complex complex51 = complex47.conjugate();
        org.apache.commons.math.complex.Complex complex52 = complex51.sinh();
        org.apache.commons.math.complex.Complex complex53 = complex51.log();
        org.apache.commons.math.complex.Complex complex54 = complex53.tanh();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + Double.POSITIVE_INFINITY + "'", double4 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + Double.POSITIVE_INFINITY + "'", double17 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertTrue(Double.isNaN(double50));
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
    }

    @Test
    public void test06146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06146");
        double[] doubleArray2 = new double[] { (byte) 1, 100 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) (short) 100);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver6 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction3);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction7 = laguerreSolver6.getPolynomialFunction();
        laguerreSolver6.setRelativeAccuracy((double) 0);
        double[] doubleArray12 = new double[] { (byte) -1, '#' };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction13 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray12);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction14 = polynomialFunction13.polynomialDerivative();
        double[] doubleArray15 = polynomialFunction13.getCoefficients();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction16 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray15);
        org.apache.commons.math.complex.Complex[] complexArray18 = laguerreSolver6.solveAll(doubleArray15, (double) 4);
        double double19 = laguerreSolver6.getAbsoluteAccuracy();
        laguerreSolver6.resetRelativeAccuracy();
        int int21 = laguerreSolver6.getMaximalIterationCount();
        laguerreSolver6.setMaximalIterationCount((-1));
        laguerreSolver6.setRelativeAccuracy((double) ' ');
        laguerreSolver6.setAbsoluteAccuracy((-1.49086724469E13d));
        java.lang.Class<?> wildcardClass28 = laguerreSolver6.getClass();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 10001.0d + "'", double5 == 10001.0d);
        org.junit.Assert.assertNotNull(polynomialFunction7);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[-1.0, 35.0]");
        org.junit.Assert.assertNotNull(polynomialFunction14);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[-1.0, 35.0]");
        org.junit.Assert.assertNotNull(complexArray18);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 1.0E-6d + "'", double19 == 1.0E-6d);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 100 + "'", int21 == 100);
        org.junit.Assert.assertNotNull(wildcardClass28);
    }

    @Test
    public void test06147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06147");
        double[] doubleArray2 = new double[] { (byte) 1, 100 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) (short) 100);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver6 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction3);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction7 = laguerreSolver6.getPolynomialFunction();
        laguerreSolver6.setRelativeAccuracy((double) 0);
        double[] doubleArray12 = new double[] { (byte) -1, '#' };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction13 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray12);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction14 = polynomialFunction13.polynomialDerivative();
        double[] doubleArray15 = polynomialFunction13.getCoefficients();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction16 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray15);
        org.apache.commons.math.complex.Complex[] complexArray18 = laguerreSolver6.solveAll(doubleArray15, (double) 4);
        laguerreSolver6.setAbsoluteAccuracy((double) 1);
        double double21 = laguerreSolver6.getRelativeAccuracy();
        double double22 = laguerreSolver6.getResult();
        laguerreSolver6.resetFunctionValueAccuracy();
        int int24 = laguerreSolver6.getIterationCount();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 10001.0d + "'", double5 == 10001.0d);
        org.junit.Assert.assertNotNull(polynomialFunction7);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[-1.0, 35.0]");
        org.junit.Assert.assertNotNull(polynomialFunction14);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[-1.0, 35.0]");
        org.junit.Assert.assertNotNull(complexArray18);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 3 + "'", int24 == 3);
    }

    @Test
    public void test06148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06148");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex2 = complex1.sqrt();
        org.apache.commons.math.complex.Complex complex3 = complex2.sin();
        org.apache.commons.math.complex.Complex complex4 = complex0.pow(complex2);
        org.apache.commons.math.complex.Complex complex5 = complex0.exp();
        org.apache.commons.math.complex.Complex complex6 = complex5.exp();
        boolean boolean7 = complex6.isInfinite();
        double[] doubleArray13 = new double[] { 0L, '#', 100.0f, 0L, (-1.0d) };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction14 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray13);
        double double16 = polynomialFunction14.value((double) 0);
        int int17 = polynomialFunction14.degree();
        double double19 = polynomialFunction14.value(64.0d);
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction20 = polynomialFunction14.derivative();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction21 = polynomialFunction14.polynomialDerivative();
        boolean boolean22 = complex6.equals((java.lang.Object) polynomialFunction14);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction23 = polynomialFunction14.polynomialDerivative();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[0.0, 35.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 4 + "'", int17 == 4);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + (-1.6365376E7d) + "'", double19 == (-1.6365376E7d));
        org.junit.Assert.assertNotNull(univariateRealFunction20);
        org.junit.Assert.assertNotNull(polynomialFunction21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(polynomialFunction23);
    }

    @Test
    public void test06149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06149");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex1 = complex0.cosh();
        org.apache.commons.math.complex.Complex complex2 = complex0.log();
        org.apache.commons.math.complex.Complex complex3 = complex0.sin();
        org.apache.commons.math.complex.Complex complex4 = complex0.log();
        org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex6 = complex5.sqrt();
        org.apache.commons.math.complex.Complex complex7 = complex0.divide(complex6);
        org.apache.commons.math.complex.Complex complex8 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex9 = complex8.cosh();
        org.apache.commons.math.complex.Complex complex10 = complex9.acos();
        double double11 = complex9.getReal();
        org.apache.commons.math.complex.Complex complex12 = complex9.sqrt();
        org.apache.commons.math.complex.Complex complex13 = complex0.pow(complex9);
        org.apache.commons.math.complex.Complex complex14 = complex13.sqrt1z();
        org.apache.commons.math.complex.Complex complex15 = complex13.negate();
        org.apache.commons.math.complex.Complex complex16 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex17 = complex16.cosh();
        double double18 = complex16.abs();
        org.apache.commons.math.complex.Complex complex19 = complex16.conjugate();
        org.apache.commons.math.complex.Complex complex20 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex21 = complex20.cosh();
        double double22 = complex20.abs();
        org.apache.commons.math.complex.Complex complex23 = complex20.conjugate();
        org.apache.commons.math.complex.Complex complex24 = complex23.conjugate();
        org.apache.commons.math.complex.Complex complex25 = complex23.tanh();
        org.apache.commons.math.complex.Complex complex26 = complex23.atan();
        org.apache.commons.math.complex.Complex complex27 = complex16.subtract(complex23);
        org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex29 = complex28.cosh();
        org.apache.commons.math.complex.Complex complex30 = complex28.log();
        org.apache.commons.math.complex.Complex complex31 = complex30.cos();
        double double32 = complex31.abs();
        org.apache.commons.math.complex.Complex complex33 = complex31.tanh();
        org.apache.commons.math.complex.Complex complex34 = complex23.pow(complex31);
        org.apache.commons.math.complex.Complex complex35 = complex15.subtract(complex31);
        org.apache.commons.math.complex.Complex complex36 = complex35.cosh();
        org.apache.commons.math.complex.Complex complex37 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex38 = complex37.cosh();
        double double39 = complex37.abs();
        org.apache.commons.math.complex.Complex complex40 = complex37.conjugate();
        org.apache.commons.math.complex.Complex complex41 = complex40.conjugate();
        org.apache.commons.math.complex.Complex complex42 = complex40.tanh();
        org.apache.commons.math.complex.Complex complex43 = complex42.tan();
        org.apache.commons.math.complex.Complex complex44 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex45 = complex44.cosh();
        double double46 = complex44.abs();
        org.apache.commons.math.complex.Complex complex47 = complex44.conjugate();
        org.apache.commons.math.complex.Complex complex48 = complex47.conjugate();
        org.apache.commons.math.complex.Complex complex49 = complex43.subtract(complex47);
        org.apache.commons.math.complex.Complex complex50 = complex47.negate();
        org.apache.commons.math.complex.Complex complex51 = complex47.tanh();
        org.apache.commons.math.complex.Complex complex52 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex53 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex54 = complex53.sqrt();
        org.apache.commons.math.complex.Complex complex55 = complex54.sin();
        org.apache.commons.math.complex.Complex complex56 = complex52.pow(complex54);
        org.apache.commons.math.complex.Complex complex57 = complex56.asin();
        org.apache.commons.math.complex.Complex complex58 = complex57.atan();
        boolean boolean59 = complex58.isInfinite();
        org.apache.commons.math.complex.Complex complex60 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex61 = complex58.subtract(complex60);
        org.apache.commons.math.complex.Complex complex62 = complex60.tan();
        org.apache.commons.math.complex.Complex complex63 = complex47.pow(complex60);
        org.apache.commons.math.complex.Complex complex64 = complex47.cos();
        org.apache.commons.math.complex.Complex complex65 = complex64.acos();
        org.apache.commons.math.complex.Complex complex66 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex67 = complex66.cosh();
        org.apache.commons.math.complex.Complex complex68 = complex66.log();
        org.apache.commons.math.complex.Complex complex69 = complex66.sin();
        org.apache.commons.math.complex.Complex complex70 = complex66.log();
        org.apache.commons.math.complex.Complex complex71 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex72 = complex71.sqrt();
        org.apache.commons.math.complex.Complex complex73 = complex66.divide(complex72);
        org.apache.commons.math.complex.Complex complex74 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex75 = complex74.cosh();
        double double76 = complex74.abs();
        org.apache.commons.math.complex.Complex complex77 = complex74.conjugate();
        org.apache.commons.math.complex.Complex complex78 = complex77.conjugate();
        org.apache.commons.math.complex.Complex complex79 = complex73.subtract(complex78);
        org.apache.commons.math.complex.Complex complex80 = complex73.exp();
        org.apache.commons.math.complex.Complex complex81 = complex80.cos();
        org.apache.commons.math.complex.Complex complex82 = complex64.subtract(complex81);
        org.apache.commons.math.complex.Complex complex83 = complex81.negate();
        org.apache.commons.math.complex.Complex complex84 = complex35.multiply(complex81);
        double double85 = complex84.getImaginary();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + Double.POSITIVE_INFINITY + "'", double18 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + Double.POSITIVE_INFINITY + "'", double22 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertTrue(Double.isNaN(double32));
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + Double.POSITIVE_INFINITY + "'", double39 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + Double.POSITIVE_INFINITY + "'", double46 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertNotNull(complex75);
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + Double.POSITIVE_INFINITY + "'", double76 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex77);
        org.junit.Assert.assertNotNull(complex78);
        org.junit.Assert.assertNotNull(complex79);
        org.junit.Assert.assertNotNull(complex80);
        org.junit.Assert.assertNotNull(complex81);
        org.junit.Assert.assertNotNull(complex82);
        org.junit.Assert.assertNotNull(complex83);
        org.junit.Assert.assertNotNull(complex84);
        org.junit.Assert.assertTrue(Double.isNaN(double85));
    }

    @Test
    public void test06150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06150");
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException4 = new org.apache.commons.math.FunctionEvaluationException((double) 1L, "org.apache.commons.math.FunctionEvaluationException: org.apache.commons.math.FunctionEvaluationException: ");
        java.lang.Object[] objArray5 = functionEvaluationException4.getArguments();
        java.lang.Object[] objArray10 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException11 = new org.apache.commons.math.ConvergenceException("", objArray10);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException12 = new org.apache.commons.math.FunctionEvaluationException(10.0d, (java.lang.Throwable) convergenceException11);
        java.lang.Object[] objArray13 = functionEvaluationException12.getArguments();
        org.apache.commons.math.ConvergenceException convergenceException14 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: Convergence failed", objArray13);
        org.apache.commons.math.ConvergenceException convergenceException15 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException14);
        java.lang.Throwable[] throwableArray16 = convergenceException14.getSuppressed();
        org.apache.commons.math.ConvergenceException convergenceException17 = new org.apache.commons.math.ConvergenceException("Evaluation failed for argument = {0}", (java.lang.Object[]) throwableArray16);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException18 = new org.apache.commons.math.FunctionEvaluationException((double) 1L, "org.apache.commons.math.FunctionEvaluationException: Evaluation failed for argument = 0", objArray5, (java.lang.Throwable) convergenceException17);
        org.junit.Assert.assertNotNull(objArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray5), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray5), "[]");
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[]");
        org.junit.Assert.assertNotNull(throwableArray16);
    }

    @Test
    public void test06151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06151");
        double[] doubleArray2 = new double[] { (byte) 1, 100 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) (short) 100);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver6 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction3);
        double double7 = laguerreSolver6.getAbsoluteAccuracy();
        laguerreSolver6.resetAbsoluteAccuracy();
        laguerreSolver6.setAbsoluteAccuracy(100.0d);
        int int11 = laguerreSolver6.getMaximalIterationCount();
        double double12 = laguerreSolver6.getAbsoluteAccuracy();
        double double13 = laguerreSolver6.getFunctionValueAccuracy();
        laguerreSolver6.resetAbsoluteAccuracy();
        double double15 = laguerreSolver6.getFunctionValueAccuracy();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 10001.0d + "'", double5 == 10001.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 1.0E-6d + "'", double7 == 1.0E-6d);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 100 + "'", int11 == 100);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 100.0d + "'", double12 == 100.0d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 1.0E-15d + "'", double13 == 1.0E-15d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 1.0E-15d + "'", double15 == 1.0E-15d);
    }

    @Test
    public void test06152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06152");
        double[] doubleArray5 = new double[] { 0L, '#', 100.0f, 0L, (-1.0d) };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray5);
        double double8 = polynomialFunction6.value((double) 0);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver9 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        double[] doubleArray12 = new double[] { (byte) 1, 100 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction13 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray12);
        double double15 = polynomialFunction13.value((double) (short) 100);
        double[] doubleArray16 = polynomialFunction13.getCoefficients();
        org.apache.commons.math.complex.Complex[] complexArray18 = laguerreSolver9.solveAll(doubleArray16, (double) (short) 10);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction19 = laguerreSolver9.getPolynomialFunction();
        laguerreSolver9.setMaximalIterationCount(0);
        laguerreSolver9.resetFunctionValueAccuracy();
        double[] doubleArray25 = new double[] { (byte) 1, 100 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction26 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray25);
        double double28 = polynomialFunction26.value((double) (short) 100);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver29 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction26);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction30 = laguerreSolver29.getPolynomialFunction();
        double double31 = laguerreSolver29.getRelativeAccuracy();
        laguerreSolver29.resetRelativeAccuracy();
        laguerreSolver29.setRelativeAccuracy((double) (short) 1);
        double[] doubleArray37 = new double[] { (byte) 1, 100 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction38 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray37);
        double double40 = polynomialFunction38.value((double) (short) 100);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver41 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction38);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction42 = laguerreSolver41.getPolynomialFunction();
        laguerreSolver41.setRelativeAccuracy((double) 0);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction45 = laguerreSolver41.getPolynomialFunction();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction46 = polynomialFunction45.polynomialDerivative();
        double double48 = polynomialFunction45.value((double) ' ');
        double[] doubleArray49 = polynomialFunction45.getCoefficients();
        double[] doubleArray50 = polynomialFunction45.getCoefficients();
        org.apache.commons.math.complex.Complex[] complexArray52 = laguerreSolver29.solveAll(doubleArray50, 1.0d);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.complex.Complex[] complexArray54 = laguerreSolver9.solveAll(doubleArray50, (-1461412.0d));
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.MaxIterationsExceededException; message: Maximal number of iterations (0) exceeded");
        } catch (org.apache.commons.math.MaxIterationsExceededException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[0.0, 35.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 10001.0d + "'", double15 == 10001.0d);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(complexArray18);
        org.junit.Assert.assertNotNull(polynomialFunction19);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 10001.0d + "'", double28 == 10001.0d);
        org.junit.Assert.assertNotNull(polynomialFunction30);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 1.0E-14d + "'", double31 == 1.0E-14d);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 10001.0d + "'", double40 == 10001.0d);
        org.junit.Assert.assertNotNull(polynomialFunction42);
        org.junit.Assert.assertNotNull(polynomialFunction45);
        org.junit.Assert.assertNotNull(polynomialFunction46);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 3201.0d + "'", double48 == 3201.0d);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(complexArray52);
    }

    @Test
    public void test06153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06153");
        double[] doubleArray2 = new double[] { (byte) 1, 100 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) (short) 100);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver6 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction3);
        laguerreSolver6.setMaximalIterationCount(4);
        laguerreSolver6.setAbsoluteAccuracy((double) 'a');
        double double11 = laguerreSolver6.getAbsoluteAccuracy();
        laguerreSolver6.setFunctionValueAccuracy((-1.0303676599E10d));
        laguerreSolver6.setFunctionValueAccuracy(64.0d);
        double double18 = laguerreSolver6.solve((-2.036018575079906E69d), 1.030000009901E12d);
        double double19 = laguerreSolver6.getResult();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 10001.0d + "'", double5 == 10001.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 97.0d + "'", double11 == 97.0d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d);
    }

    @Test
    public void test06154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06154");
        double[] doubleArray6 = new double[] { 0L, '#', 100.0f, 0L, (-1.0d) };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction7 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray6);
        double double9 = polynomialFunction7.value((double) 0);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver10 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction7);
        double[] doubleArray13 = new double[] { (byte) 1, 100 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction14 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray13);
        double double16 = polynomialFunction14.value((double) (short) 100);
        double[] doubleArray17 = polynomialFunction14.getCoefficients();
        org.apache.commons.math.complex.Complex[] complexArray19 = laguerreSolver10.solveAll(doubleArray17, (double) (short) 10);
        laguerreSolver10.setMaximalIterationCount((int) (byte) 10);
        laguerreSolver10.resetRelativeAccuracy();
        laguerreSolver10.resetMaximalIterationCount();
        int int24 = laguerreSolver10.getIterationCount();
        double[] doubleArray27 = new double[] { (byte) 1, 100 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction28 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray27);
        double double30 = polynomialFunction28.value((double) (short) 100);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver31 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction28);
        double[] doubleArray32 = polynomialFunction28.getCoefficients();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction33 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray32);
        double double35 = polynomialFunction33.value((double) (-1));
        double double37 = polynomialFunction33.value(1.0001d);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver38 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction33);
        double[] doubleArray39 = polynomialFunction33.getCoefficients();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction40 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray39);
        org.apache.commons.math.complex.Complex[] complexArray42 = laguerreSolver10.solveAll(doubleArray39, (-1.1271166809295782E32d));
        org.apache.commons.math.ConvergenceException convergenceException43 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.FunctionEvaluationException: hi!", (java.lang.Object[]) complexArray42);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, 35.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 10001.0d + "'", double16 == 10001.0d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(complexArray19);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 3 + "'", int24 == 3);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 10001.0d + "'", double30 == 10001.0d);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + (-99.0d) + "'", double35 == (-99.0d));
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 101.01d + "'", double37 == 101.01d);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(complexArray42);
    }

    @Test
    public void test06155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06155");
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException1 = new org.apache.commons.math.FunctionEvaluationException((-12.90000035d));
    }

    @Test
    public void test06156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06156");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex2 = complex1.sqrt();
        org.apache.commons.math.complex.Complex complex3 = complex2.sin();
        org.apache.commons.math.complex.Complex complex4 = complex0.pow(complex2);
        org.apache.commons.math.complex.Complex complex5 = complex4.asin();
        org.apache.commons.math.complex.Complex complex6 = complex4.tan();
        org.apache.commons.math.complex.Complex complex7 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex8 = complex7.cosh();
        double double9 = complex7.abs();
        org.apache.commons.math.complex.Complex complex10 = complex7.conjugate();
        org.apache.commons.math.complex.Complex complex11 = complex10.conjugate();
        boolean boolean12 = complex10.isInfinite();
        org.apache.commons.math.complex.Complex complex13 = complex10.asin();
        boolean boolean14 = complex10.isNaN();
        org.apache.commons.math.complex.Complex complex15 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex16 = complex15.cosh();
        org.apache.commons.math.complex.Complex complex17 = complex10.divide(complex15);
        org.apache.commons.math.complex.Complex complex18 = complex6.pow(complex15);
        org.apache.commons.math.complex.Complex complex19 = complex6.sinh();
        org.apache.commons.math.complex.Complex complex20 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex21 = complex20.sqrt();
        org.apache.commons.math.complex.Complex complex22 = complex20.sin();
        boolean boolean23 = complex19.equals((java.lang.Object) complex20);
        org.apache.commons.math.complex.Complex complex24 = complex20.sqrt();
        org.apache.commons.math.complex.Complex complex25 = complex24.sin();
        org.apache.commons.math.complex.Complex complex26 = complex25.tan();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + Double.POSITIVE_INFINITY + "'", double9 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
    }

    @Test
    public void test06157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06157");
        double[] doubleArray2 = new double[] { (byte) 1, 100 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) (short) 100);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver6 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction3);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction7 = laguerreSolver6.getPolynomialFunction();
        double double8 = laguerreSolver6.getRelativeAccuracy();
        laguerreSolver6.setRelativeAccuracy((-3216.0d));
        double[] doubleArray13 = new double[] { (byte) -1, '#' };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction14 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray13);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction15 = polynomialFunction14.polynomialDerivative();
        double[] doubleArray16 = polynomialFunction14.getCoefficients();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction17 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray16);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction18 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray16);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction19 = polynomialFunction18.polynomialDerivative();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction20 = polynomialFunction19.polynomialDerivative();
        int int21 = polynomialFunction19.degree();
        double[] doubleArray22 = polynomialFunction19.getCoefficients();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction23 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray22);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.complex.Complex[] complexArray25 = laguerreSolver6.solveAll(doubleArray22, (-6.9702946206350175E87d));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Polynomial degree must be positive: degree=0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 10001.0d + "'", double5 == 10001.0d);
        org.junit.Assert.assertNotNull(polynomialFunction7);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 1.0E-14d + "'", double8 == 1.0E-14d);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[-1.0, 35.0]");
        org.junit.Assert.assertNotNull(polynomialFunction15);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[-1.0, 35.0]");
        org.junit.Assert.assertNotNull(polynomialFunction19);
        org.junit.Assert.assertNotNull(polynomialFunction20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[35.0]");
    }

    @Test
    public void test06158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06158");
        java.lang.Object[] objArray5 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException6 = new org.apache.commons.math.ConvergenceException("", objArray5);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException7 = new org.apache.commons.math.MaxIterationsExceededException(0, "hi!", objArray5);
        int int8 = maxIterationsExceededException7.getMaxIterations();
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException9 = new org.apache.commons.math.FunctionEvaluationException(Double.POSITIVE_INFINITY, "org.apache.commons.math.FunctionEvaluationException: ", (java.lang.Throwable) maxIterationsExceededException7);
        org.apache.commons.math.ConvergenceException convergenceException10 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) functionEvaluationException9);
        double double11 = functionEvaluationException9.getArgument();
        java.lang.Object[] objArray12 = functionEvaluationException9.getArguments();
        org.junit.Assert.assertNotNull(objArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray5), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray5), "[]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + Double.POSITIVE_INFINITY + "'", double11 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12), "[]");
    }

    @Test
    public void test06159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06159");
        double[] doubleArray2 = new double[] { (byte) 1, 100 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) (short) 100);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver6 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction3);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction7 = laguerreSolver6.getPolynomialFunction();
        laguerreSolver6.setRelativeAccuracy((double) 0);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction10 = laguerreSolver6.getPolynomialFunction();
        laguerreSolver6.resetRelativeAccuracy();
        laguerreSolver6.setFunctionValueAccuracy((double) 100.0f);
        laguerreSolver6.setFunctionValueAccuracy((double) 32);
        double double16 = laguerreSolver6.getRelativeAccuracy();
        // The following exception was thrown during execution in test generation
        try {
            double double19 = laguerreSolver6.solve((double) (byte) 100, 1401.0d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Function values at endpoints do not have different signs.  Endpoints: [100.0,1401.0]  Values: [10001.0,140101.0]");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 10001.0d + "'", double5 == 10001.0d);
        org.junit.Assert.assertNotNull(polynomialFunction7);
        org.junit.Assert.assertNotNull(polynomialFunction10);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 1.0E-14d + "'", double16 == 1.0E-14d);
    }

    @Test
    public void test06160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06160");
        double[] doubleArray7 = new double[] { (byte) 1, 100 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction8 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray7);
        double double10 = polynomialFunction8.value((double) (short) 100);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver11 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction8);
        double double15 = laguerreSolver11.solve((double) (-1L), 349.0d, (double) (short) 10);
        int int16 = laguerreSolver11.getIterationCount();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction17 = laguerreSolver11.getPolynomialFunction();
        double[] doubleArray20 = new double[] { (byte) 1, 100 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction21 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray20);
        double double23 = polynomialFunction21.value((double) (short) 100);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver24 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction21);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction25 = laguerreSolver24.getPolynomialFunction();
        double[] doubleArray28 = new double[] { (byte) -1, '#' };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction29 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray28);
        org.apache.commons.math.complex.Complex[] complexArray31 = laguerreSolver24.solveAll(doubleArray28, 1.0d);
        org.apache.commons.math.complex.Complex[] complexArray33 = laguerreSolver11.solveAll(doubleArray28, (double) 0L);
        org.apache.commons.math.ConvergenceException convergenceException35 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: Evaluation failed for argument = {0}");
        org.apache.commons.math.ConvergenceException convergenceException36 = new org.apache.commons.math.ConvergenceException("", (java.lang.Object[]) complexArray33, (java.lang.Throwable) convergenceException35);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException37 = new org.apache.commons.math.FunctionEvaluationException(100.0d, "org.apache.commons.math.MaxIterationsExceededException: ", (java.lang.Throwable) convergenceException35);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException38 = new org.apache.commons.math.FunctionEvaluationException(1.0d, "org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: hi!", (java.lang.Throwable) convergenceException35);
        double double39 = functionEvaluationException38.getArgument();
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 10001.0d + "'", double10 == 10001.0d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + (-0.01d) + "'", double15 == (-0.01d));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 3 + "'", int16 == 3);
        org.junit.Assert.assertNotNull(polynomialFunction17);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 10001.0d + "'", double23 == 10001.0d);
        org.junit.Assert.assertNotNull(polynomialFunction25);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[-1.0, 35.0]");
        org.junit.Assert.assertNotNull(complexArray31);
        org.junit.Assert.assertNotNull(complexArray33);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 1.0d + "'", double39 == 1.0d);
    }

    @Test
    public void test06161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06161");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex1 = complex0.cosh();
        org.apache.commons.math.complex.Complex complex2 = complex0.log();
        org.apache.commons.math.complex.Complex complex3 = complex2.cos();
        org.apache.commons.math.complex.Complex complex4 = complex2.exp();
        boolean boolean5 = complex2.isNaN();
        org.apache.commons.math.complex.Complex complex6 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex7 = complex6.cosh();
        double double8 = complex6.abs();
        org.apache.commons.math.complex.Complex complex9 = complex6.conjugate();
        org.apache.commons.math.complex.Complex complex10 = complex9.conjugate();
        org.apache.commons.math.complex.Complex complex11 = complex9.tanh();
        org.apache.commons.math.complex.Complex complex12 = complex2.multiply(complex9);
        org.apache.commons.math.complex.Complex complex13 = complex9.acos();
        org.apache.commons.math.complex.Complex complex14 = complex13.cosh();
        org.apache.commons.math.complex.Complex complex15 = complex13.sinh();
        org.apache.commons.math.complex.Complex complex18 = new org.apache.commons.math.complex.Complex(101.01d, Double.NEGATIVE_INFINITY);
        org.apache.commons.math.complex.Complex complex19 = complex18.sqrt();
        org.apache.commons.math.complex.Complex complex20 = complex13.multiply(complex19);
        org.apache.commons.math.complex.Complex complex21 = complex19.asin();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + Double.POSITIVE_INFINITY + "'", double8 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
    }

    @Test
    public void test06162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06162");
        double[] doubleArray2 = new double[] { (byte) 1, 100 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) (short) 100);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver6 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction3);
        double double10 = laguerreSolver6.solve((double) (-1L), 349.0d, (double) (short) 10);
        laguerreSolver6.setMaximalIterationCount((int) '#');
        laguerreSolver6.setMaximalIterationCount((int) ' ');
        double double15 = laguerreSolver6.getRelativeAccuracy();
        laguerreSolver6.setMaximalIterationCount(100);
        double double18 = laguerreSolver6.getRelativeAccuracy();
        laguerreSolver6.resetRelativeAccuracy();
        double double20 = laguerreSolver6.getAbsoluteAccuracy();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 10001.0d + "'", double5 == 10001.0d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + (-0.01d) + "'", double10 == (-0.01d));
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 1.0E-14d + "'", double15 == 1.0E-14d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 1.0E-14d + "'", double18 == 1.0E-14d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 1.0E-6d + "'", double20 == 1.0E-6d);
    }

    @Test
    public void test06163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06163");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex1 = complex0.cosh();
        org.apache.commons.math.complex.Complex complex2 = complex0.log();
        org.apache.commons.math.complex.Complex complex3 = complex2.cos();
        double double4 = complex3.abs();
        org.apache.commons.math.complex.Complex complex5 = complex3.sqrt();
        org.apache.commons.math.complex.Complex complex6 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex7 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex8 = complex7.sqrt();
        org.apache.commons.math.complex.Complex complex9 = complex8.sin();
        org.apache.commons.math.complex.Complex complex10 = complex6.pow(complex8);
        org.apache.commons.math.complex.Complex complex11 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex12 = complex11.cosh();
        org.apache.commons.math.complex.Complex complex13 = complex11.log();
        org.apache.commons.math.complex.Complex complex14 = complex6.divide(complex13);
        org.apache.commons.math.complex.Complex complex15 = complex5.subtract(complex14);
        org.apache.commons.math.complex.Complex complex16 = complex5.conjugate();
        org.apache.commons.math.complex.Complex complex17 = complex5.conjugate();
        org.apache.commons.math.complex.Complex complex18 = complex17.acos();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
    }

    @Test
    public void test06164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06164");
        double[] doubleArray5 = new double[] { 0L, '#', 100.0f, 0L, (-1.0d) };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray5);
        double double8 = polynomialFunction6.value((double) 0);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver9 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        double[] doubleArray12 = new double[] { (byte) 1, 100 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction13 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray12);
        double double15 = polynomialFunction13.value((double) (short) 100);
        double[] doubleArray16 = polynomialFunction13.getCoefficients();
        org.apache.commons.math.complex.Complex[] complexArray18 = laguerreSolver9.solveAll(doubleArray16, (double) (short) 10);
        laguerreSolver9.setMaximalIterationCount((int) (byte) 10);
        laguerreSolver9.resetFunctionValueAccuracy();
        int int22 = laguerreSolver9.getIterationCount();
        double double23 = laguerreSolver9.getFunctionValueAccuracy();
        laguerreSolver9.resetMaximalIterationCount();
        double double25 = laguerreSolver9.getFunctionValueAccuracy();
        int int26 = laguerreSolver9.getIterationCount();
        laguerreSolver9.setRelativeAccuracy(1.0E-6d);
        double double29 = laguerreSolver9.getAbsoluteAccuracy();
        // The following exception was thrown during execution in test generation
        try {
            double double33 = laguerreSolver9.solve(454.0d, (-1.0064041017817517E256d), (-6.249660006935935E34d));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Endpoints do not specify an interval: [454.0,-1.0064041017817517E256]");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[0.0, 35.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 10001.0d + "'", double15 == 10001.0d);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(complexArray18);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 3 + "'", int22 == 3);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 1.0E-15d + "'", double23 == 1.0E-15d);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 1.0E-15d + "'", double25 == 1.0E-15d);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 3 + "'", int26 == 3);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 1.0E-6d + "'", double29 == 1.0E-6d);
    }

    @Test
    public void test06165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06165");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex1 = complex0.cosh();
        org.apache.commons.math.complex.Complex complex2 = complex0.log();
        org.apache.commons.math.complex.Complex complex3 = complex2.cos();
        double double4 = complex3.abs();
        org.apache.commons.math.complex.Complex complex5 = complex3.sqrt();
        org.apache.commons.math.complex.Complex complex6 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex7 = complex6.sqrt();
        boolean boolean8 = complex6.isNaN();
        double double9 = complex6.getReal();
        boolean boolean10 = complex6.isNaN();
        org.apache.commons.math.complex.Complex complex11 = complex6.asin();
        org.apache.commons.math.complex.Complex complex12 = complex5.pow(complex11);
        org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex14 = complex13.cosh();
        double double15 = complex13.abs();
        org.apache.commons.math.complex.Complex complex16 = complex13.conjugate();
        org.apache.commons.math.complex.Complex complex17 = complex16.conjugate();
        org.apache.commons.math.complex.Complex complex18 = complex16.tanh();
        org.apache.commons.math.complex.Complex complex19 = complex18.tan();
        org.apache.commons.math.complex.Complex complex20 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex21 = complex20.cosh();
        double double22 = complex20.abs();
        org.apache.commons.math.complex.Complex complex23 = complex20.conjugate();
        org.apache.commons.math.complex.Complex complex24 = complex23.conjugate();
        org.apache.commons.math.complex.Complex complex25 = complex19.subtract(complex23);
        org.apache.commons.math.complex.Complex complex26 = complex23.negate();
        java.lang.Object[] objArray30 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException31 = new org.apache.commons.math.ConvergenceException("", objArray30);
        java.lang.Object[] objArray36 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException37 = new org.apache.commons.math.ConvergenceException("", objArray36);
        java.lang.Object[] objArray39 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException40 = new org.apache.commons.math.ConvergenceException("", objArray39);
        org.apache.commons.math.ConvergenceException convergenceException41 = new org.apache.commons.math.ConvergenceException("", objArray36, (java.lang.Throwable) convergenceException40);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException43 = new org.apache.commons.math.FunctionEvaluationException((double) 100);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException44 = new org.apache.commons.math.FunctionEvaluationException(100.0d, "org.apache.commons.math.ConvergenceException: hi!", objArray36, (java.lang.Throwable) functionEvaluationException43);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException45 = new org.apache.commons.math.FunctionEvaluationException((double) '#', "", objArray30, (java.lang.Throwable) functionEvaluationException44);
        java.lang.String str46 = functionEvaluationException45.getPattern();
        boolean boolean47 = complex26.equals((java.lang.Object) functionEvaluationException45);
        org.apache.commons.math.complex.Complex complex48 = complex5.subtract(complex26);
        org.apache.commons.math.complex.Complex complex49 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex50 = complex49.cosh();
        double double51 = complex49.abs();
        org.apache.commons.math.complex.Complex complex52 = complex49.conjugate();
        org.apache.commons.math.complex.Complex complex53 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex54 = complex53.cosh();
        double double55 = complex53.abs();
        org.apache.commons.math.complex.Complex complex56 = complex53.conjugate();
        org.apache.commons.math.complex.Complex complex57 = complex56.conjugate();
        org.apache.commons.math.complex.Complex complex58 = complex56.tanh();
        org.apache.commons.math.complex.Complex complex59 = complex56.atan();
        org.apache.commons.math.complex.Complex complex60 = complex49.subtract(complex56);
        org.apache.commons.math.complex.Complex complex61 = complex60.log();
        boolean boolean62 = complex61.isNaN();
        org.apache.commons.math.complex.Complex complex63 = complex5.multiply(complex61);
        org.apache.commons.math.complex.Complex complex64 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex65 = complex64.cosh();
        org.apache.commons.math.complex.Complex complex66 = complex64.log();
        org.apache.commons.math.complex.Complex complex67 = complex64.sin();
        org.apache.commons.math.complex.Complex complex68 = complex64.log();
        org.apache.commons.math.complex.Complex complex69 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex70 = complex69.sqrt();
        org.apache.commons.math.complex.Complex complex71 = complex64.divide(complex70);
        org.apache.commons.math.complex.Complex complex72 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex73 = complex72.cosh();
        org.apache.commons.math.complex.Complex complex74 = complex73.acos();
        double double75 = complex73.getReal();
        org.apache.commons.math.complex.Complex complex76 = complex73.sqrt();
        org.apache.commons.math.complex.Complex complex77 = complex64.pow(complex73);
        org.apache.commons.math.complex.Complex complex78 = complex77.sqrt1z();
        org.apache.commons.math.complex.Complex complex79 = complex77.atan();
        org.apache.commons.math.complex.Complex complex80 = complex77.sinh();
        org.apache.commons.math.complex.Complex complex81 = complex5.subtract(complex80);
        org.apache.commons.math.complex.Complex complex82 = complex5.cos();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + Double.POSITIVE_INFINITY + "'", double9 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + Double.POSITIVE_INFINITY + "'", double15 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + Double.POSITIVE_INFINITY + "'", double22 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(objArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray30), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray30), "[]");
        org.junit.Assert.assertNotNull(objArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray36), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray36), "[]");
        org.junit.Assert.assertNotNull(objArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray39), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray39), "[]");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + Double.POSITIVE_INFINITY + "'", double51 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + Double.POSITIVE_INFINITY + "'", double55 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertTrue(Double.isNaN(double75));
        org.junit.Assert.assertNotNull(complex76);
        org.junit.Assert.assertNotNull(complex77);
        org.junit.Assert.assertNotNull(complex78);
        org.junit.Assert.assertNotNull(complex79);
        org.junit.Assert.assertNotNull(complex80);
        org.junit.Assert.assertNotNull(complex81);
        org.junit.Assert.assertNotNull(complex82);
    }

    @Test
    public void test06166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06166");
        double[] doubleArray2 = new double[] { (byte) -1, '#' };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction4 = polynomialFunction3.polynomialDerivative();
        double[] doubleArray5 = polynomialFunction3.getCoefficients();
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction6 = polynomialFunction3.derivative();
        int int7 = polynomialFunction3.degree();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction8 = polynomialFunction3.polynomialDerivative();
        double double10 = polynomialFunction8.value((double) (byte) 100);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver11 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction8);
        double[] doubleArray14 = new double[] { (byte) 1, 100 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction15 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray14);
        double double17 = polynomialFunction15.value((double) (short) 100);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver18 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction15);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction19 = laguerreSolver18.getPolynomialFunction();
        double double20 = laguerreSolver18.getRelativeAccuracy();
        laguerreSolver18.resetRelativeAccuracy();
        laguerreSolver18.setFunctionValueAccuracy((double) (-1.0f));
        laguerreSolver18.resetRelativeAccuracy();
        double[] doubleArray30 = new double[] { 0L, '#', 100.0f, 0L, (-1.0d) };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction31 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray30);
        int int32 = polynomialFunction31.degree();
        int int33 = polynomialFunction31.degree();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction34 = polynomialFunction31.polynomialDerivative();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction35 = polynomialFunction34.polynomialDerivative();
        double double37 = polynomialFunction35.value((double) (byte) 10);
        double[] doubleArray38 = polynomialFunction35.getCoefficients();
        org.apache.commons.math.complex.Complex[] complexArray40 = laguerreSolver18.solveAll(doubleArray38, (-99999.0d));
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction41 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray38);
        org.apache.commons.math.complex.Complex[] complexArray43 = laguerreSolver11.solveAll(doubleArray38, (double) 0.0f);
        double double44 = laguerreSolver11.getFunctionValueAccuracy();
        // The following exception was thrown during execution in test generation
        try {
            double double48 = laguerreSolver11.solve((-3.110133412E9d), (-3.46487750099E11d), 79.53981633974483d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Endpoints do not specify an interval: [-3.110133412E9,-3.46487750099E11]");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[-1.0, 35.0]");
        org.junit.Assert.assertNotNull(polynomialFunction4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[-1.0, 35.0]");
        org.junit.Assert.assertNotNull(univariateRealFunction6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(polynomialFunction8);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 35.0d + "'", double10 == 35.0d);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 10001.0d + "'", double17 == 10001.0d);
        org.junit.Assert.assertNotNull(polynomialFunction19);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 1.0E-14d + "'", double20 == 1.0E-14d);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[0.0, 35.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 4 + "'", int32 == 4);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 4 + "'", int33 == 4);
        org.junit.Assert.assertNotNull(polynomialFunction34);
        org.junit.Assert.assertNotNull(polynomialFunction35);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + (-1000.0d) + "'", double37 == (-1000.0d));
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[200.0, 0.0, -12.0]");
        org.junit.Assert.assertNotNull(complexArray40);
        org.junit.Assert.assertNotNull(complexArray43);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 1.0E-15d + "'", double44 == 1.0E-15d);
    }

    @Test
    public void test06167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06167");
        double[] doubleArray2 = new double[] { (byte) 1, 100 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) (short) 100);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver6 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction3);
        double double10 = laguerreSolver6.solve((double) (-1L), 349.0d, (double) (short) 10);
        laguerreSolver6.setMaximalIterationCount((int) '#');
        laguerreSolver6.setMaximalIterationCount((int) ' ');
        double double15 = laguerreSolver6.getRelativeAccuracy();
        double double16 = laguerreSolver6.getFunctionValueAccuracy();
        double double17 = laguerreSolver6.getResult();
        double[] doubleArray20 = new double[] { (byte) 1, 100 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction21 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray20);
        double double23 = polynomialFunction21.value((double) (short) 100);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver24 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction21);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction25 = laguerreSolver24.getPolynomialFunction();
        laguerreSolver24.setRelativeAccuracy((double) 0);
        double[] doubleArray30 = new double[] { (byte) -1, '#' };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction31 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray30);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction32 = polynomialFunction31.polynomialDerivative();
        double[] doubleArray33 = polynomialFunction31.getCoefficients();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction34 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray33);
        org.apache.commons.math.complex.Complex[] complexArray36 = laguerreSolver24.solveAll(doubleArray33, (double) 4);
        laguerreSolver24.setAbsoluteAccuracy((double) 1);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction39 = laguerreSolver24.getPolynomialFunction();
        int int40 = laguerreSolver24.getMaximalIterationCount();
        laguerreSolver24.setAbsoluteAccuracy(Double.POSITIVE_INFINITY);
        laguerreSolver24.resetMaximalIterationCount();
        double double44 = laguerreSolver24.getAbsoluteAccuracy();
        double[] doubleArray47 = new double[] { (byte) 1, 100 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction48 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray47);
        double double50 = polynomialFunction48.value((double) (short) 100);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver51 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction48);
        double[] doubleArray52 = polynomialFunction48.getCoefficients();
        org.apache.commons.math.complex.Complex[] complexArray54 = laguerreSolver24.solveAll(doubleArray52, 350.0d);
        org.apache.commons.math.complex.Complex complex55 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex56 = complex55.cosh();
        double double57 = complex55.abs();
        org.apache.commons.math.complex.Complex complex58 = complex55.conjugate();
        org.apache.commons.math.complex.Complex complex59 = complex58.conjugate();
        org.apache.commons.math.complex.Complex complex60 = complex58.tanh();
        org.apache.commons.math.complex.Complex complex61 = complex60.sqrt();
        org.apache.commons.math.complex.Complex complex62 = complex60.conjugate();
        org.apache.commons.math.complex.Complex complex63 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex64 = complex63.cosh();
        double double65 = complex63.abs();
        org.apache.commons.math.complex.Complex complex66 = complex63.conjugate();
        org.apache.commons.math.complex.Complex complex67 = complex66.conjugate();
        org.apache.commons.math.complex.Complex complex68 = complex66.tanh();
        org.apache.commons.math.complex.Complex complex69 = complex66.asin();
        org.apache.commons.math.complex.Complex complex70 = complex69.exp();
        org.apache.commons.math.complex.Complex complex71 = complex60.subtract(complex69);
        org.apache.commons.math.complex.Complex complex72 = complex71.sqrt();
        org.apache.commons.math.complex.Complex complex73 = complex71.sinh();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.complex.Complex[] complexArray74 = laguerreSolver6.solveAll(complexArray54, complex73);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Polynomial degree must be positive: degree=0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 10001.0d + "'", double5 == 10001.0d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + (-0.01d) + "'", double10 == (-0.01d));
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 1.0E-14d + "'", double15 == 1.0E-14d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 1.0E-15d + "'", double16 == 1.0E-15d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + (-0.01d) + "'", double17 == (-0.01d));
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 10001.0d + "'", double23 == 10001.0d);
        org.junit.Assert.assertNotNull(polynomialFunction25);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[-1.0, 35.0]");
        org.junit.Assert.assertNotNull(polynomialFunction32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[-1.0, 35.0]");
        org.junit.Assert.assertNotNull(complexArray36);
        org.junit.Assert.assertNotNull(polynomialFunction39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 100 + "'", int40 == 100);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + Double.POSITIVE_INFINITY + "'", double44 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 10001.0d + "'", double50 == 10001.0d);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(complexArray54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + Double.POSITIVE_INFINITY + "'", double57 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + Double.POSITIVE_INFINITY + "'", double65 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertNotNull(complex73);
    }

    @Test
    public void test06168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06168");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex(10001.0d, 10001.0d);
        org.apache.commons.math.complex.Complex complex3 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex4 = complex3.sqrt();
        org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex6 = complex5.cosh();
        double double7 = complex5.abs();
        org.apache.commons.math.complex.Complex complex8 = complex5.conjugate();
        org.apache.commons.math.complex.Complex complex9 = complex3.divide(complex8);
        org.apache.commons.math.complex.Complex complex10 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex11 = complex10.cosh();
        org.apache.commons.math.complex.Complex complex12 = complex10.log();
        org.apache.commons.math.complex.Complex complex13 = complex10.sin();
        org.apache.commons.math.complex.Complex complex14 = complex10.log();
        org.apache.commons.math.complex.Complex complex15 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex16 = complex15.sqrt();
        org.apache.commons.math.complex.Complex complex17 = complex10.divide(complex16);
        org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex19 = complex18.cosh();
        double double20 = complex18.abs();
        org.apache.commons.math.complex.Complex complex21 = complex18.conjugate();
        org.apache.commons.math.complex.Complex complex22 = complex21.conjugate();
        org.apache.commons.math.complex.Complex complex23 = complex17.subtract(complex22);
        org.apache.commons.math.complex.Complex complex24 = complex9.multiply(complex17);
        boolean boolean25 = complex17.isInfinite();
        org.apache.commons.math.complex.Complex complex26 = complex17.negate();
        org.apache.commons.math.complex.Complex complex27 = complex26.negate();
        org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex29 = complex28.cosh();
        org.apache.commons.math.complex.Complex complex30 = complex28.log();
        org.apache.commons.math.complex.Complex complex31 = complex28.sin();
        org.apache.commons.math.complex.Complex complex32 = complex28.log();
        org.apache.commons.math.complex.Complex complex33 = complex26.divide(complex32);
        org.apache.commons.math.complex.Complex complex34 = complex33.sin();
        org.apache.commons.math.complex.Complex complex35 = complex2.add(complex33);
        boolean boolean36 = complex35.isNaN();
        org.apache.commons.math.complex.Complex complex37 = complex35.cosh();
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + Double.POSITIVE_INFINITY + "'", double7 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + Double.POSITIVE_INFINITY + "'", double20 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(complex37);
    }

    @Test
    public void test06169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06169");
        double[] doubleArray2 = new double[] { (byte) 1, 100 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) (short) 100);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver6 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction3);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction7 = laguerreSolver6.getPolynomialFunction();
        laguerreSolver6.setRelativeAccuracy((double) 0);
        laguerreSolver6.setFunctionValueAccuracy((double) (byte) -1);
        laguerreSolver6.setMaximalIterationCount((int) 'a');
        double[] doubleArray18 = new double[] { (byte) 1, 100 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction19 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray18);
        double double21 = polynomialFunction19.value((double) (short) 100);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver22 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction19);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction23 = laguerreSolver22.getPolynomialFunction();
        laguerreSolver22.setRelativeAccuracy((double) 0);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction26 = laguerreSolver22.getPolynomialFunction();
        laguerreSolver22.resetRelativeAccuracy();
        laguerreSolver22.setFunctionValueAccuracy((double) 100.0f);
        laguerreSolver22.setFunctionValueAccuracy((double) 32);
        laguerreSolver22.setFunctionValueAccuracy(Double.POSITIVE_INFINITY);
        laguerreSolver22.resetMaximalIterationCount();
        double[] doubleArray37 = new double[] { (byte) 1, 100 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction38 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray37);
        double double40 = polynomialFunction38.value((double) (short) 100);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver41 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction38);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction42 = laguerreSolver41.getPolynomialFunction();
        laguerreSolver41.resetRelativeAccuracy();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction44 = laguerreSolver41.getPolynomialFunction();
        double[] doubleArray47 = new double[] { (byte) 1, 100 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction48 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray47);
        double double50 = polynomialFunction48.value((double) (short) 100);
        double[] doubleArray51 = polynomialFunction48.getCoefficients();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction52 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray51);
        org.apache.commons.math.complex.Complex[] complexArray54 = laguerreSolver41.solveAll(doubleArray51, (double) 14);
        org.apache.commons.math.complex.Complex[] complexArray56 = laguerreSolver22.solveAll(doubleArray51, (-0.3533630315721405d));
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException57 = new org.apache.commons.math.FunctionEvaluationException(5201.0d, "org.apache.commons.math.FunctionEvaluationException: Evaluation failed for argument = 350", (java.lang.Object[]) complexArray56);
        org.apache.commons.math.complex.Complex complex60 = new org.apache.commons.math.complex.Complex((-9.89965E7d), 10.0d);
        double double61 = complex60.getImaginary();
        org.apache.commons.math.complex.Complex complex62 = complex60.tan();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.complex.Complex[] complexArray63 = laguerreSolver6.solveAll(complexArray56, complex62);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Polynomial degree must be positive: degree=0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 10001.0d + "'", double5 == 10001.0d);
        org.junit.Assert.assertNotNull(polynomialFunction7);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 10001.0d + "'", double21 == 10001.0d);
        org.junit.Assert.assertNotNull(polynomialFunction23);
        org.junit.Assert.assertNotNull(polynomialFunction26);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 10001.0d + "'", double40 == 10001.0d);
        org.junit.Assert.assertNotNull(polynomialFunction42);
        org.junit.Assert.assertNotNull(polynomialFunction44);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 10001.0d + "'", double50 == 10001.0d);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(complexArray54);
        org.junit.Assert.assertNotNull(complexArray56);
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 10.0d + "'", double61 == 10.0d);
        org.junit.Assert.assertNotNull(complex62);
    }

    @Test
    public void test06170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06170");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((-9.89965E7d), 1.0E-15d);
        org.apache.commons.math.complex.Complex complex3 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex4 = complex3.cosh();
        double double5 = complex3.abs();
        org.apache.commons.math.complex.Complex complex6 = complex3.conjugate();
        org.apache.commons.math.complex.Complex complex7 = complex6.conjugate();
        org.apache.commons.math.complex.Complex complex8 = complex6.tanh();
        org.apache.commons.math.complex.Complex complex9 = complex8.tan();
        org.apache.commons.math.complex.Complex complex10 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex11 = complex10.cosh();
        double double12 = complex10.abs();
        org.apache.commons.math.complex.Complex complex13 = complex10.conjugate();
        org.apache.commons.math.complex.Complex complex14 = complex13.conjugate();
        org.apache.commons.math.complex.Complex complex15 = complex9.subtract(complex13);
        org.apache.commons.math.complex.Complex complex16 = complex13.negate();
        org.apache.commons.math.complex.Complex complex17 = complex13.tanh();
        org.apache.commons.math.complex.Complex complex18 = complex2.multiply(complex17);
        org.apache.commons.math.complex.Complex complex19 = complex2.sinh();
        double double20 = complex2.getImaginary();
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + Double.POSITIVE_INFINITY + "'", double5 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + Double.POSITIVE_INFINITY + "'", double12 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 1.0E-15d + "'", double20 == 1.0E-15d);
    }

    @Test
    public void test06171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06171");
        org.apache.commons.math.ConvergenceException convergenceException6 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.MaxIterationsExceededException: org.apache.commons.math.FunctionEvaluationException: ");
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException7 = new org.apache.commons.math.FunctionEvaluationException(Double.POSITIVE_INFINITY, (java.lang.Throwable) convergenceException6);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException8 = new org.apache.commons.math.FunctionEvaluationException(350.0d, "org.apache.commons.math.MaxIterationsExceededException: hi!", (java.lang.Throwable) convergenceException6);
        java.lang.Object[] objArray9 = convergenceException6.getArguments();
        java.lang.Throwable throwable10 = null;
        org.apache.commons.math.ConvergenceException convergenceException11 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.MaxIterationsExceededException: ", objArray9, throwable10);
        java.lang.Object[] objArray22 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException23 = new org.apache.commons.math.ConvergenceException("", objArray22);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException24 = new org.apache.commons.math.FunctionEvaluationException((double) (short) 10, "hi!", objArray22);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException25 = new org.apache.commons.math.FunctionEvaluationException((double) (short) 1, "", objArray22);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException28 = new org.apache.commons.math.FunctionEvaluationException((double) (-1.0f), "org.apache.commons.math.ConvergenceException: hi!");
        org.apache.commons.math.ConvergenceException convergenceException29 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: ", objArray22, (java.lang.Throwable) functionEvaluationException28);
        java.lang.Object[] objArray30 = functionEvaluationException28.getArguments();
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException31 = new org.apache.commons.math.MaxIterationsExceededException(35, "org.apache.commons.math.FunctionEvaluationException: hi!", objArray30);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException32 = new org.apache.commons.math.MaxIterationsExceededException((int) ' ', "org.apache.commons.math.ConvergenceException: hi!", objArray30);
        org.apache.commons.math.ConvergenceException convergenceException33 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.MaxIterationsExceededException: Maximal number of iterations (-1) exceeded", objArray9, (java.lang.Throwable) maxIterationsExceededException32);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[]");
        org.junit.Assert.assertNotNull(objArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray22), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray22), "[]");
        org.junit.Assert.assertNotNull(objArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray30), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray30), "[]");
    }

    @Test
    public void test06172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06172");
        double[] doubleArray2 = new double[] { (byte) -1, '#' };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction4 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver5 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction4);
        laguerreSolver5.setAbsoluteAccuracy(0.0d);
        laguerreSolver5.resetRelativeAccuracy();
        laguerreSolver5.setMaximalIterationCount(18);
        laguerreSolver5.setMaximalIterationCount((int) '4');
        laguerreSolver5.setAbsoluteAccuracy((-3216.0d));
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[-1.0, 35.0]");
        org.junit.Assert.assertNotNull(polynomialFunction4);
    }

    @Test
    public void test06173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06173");
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException1 = new org.apache.commons.math.FunctionEvaluationException((-161.0d));
        java.lang.Object[] objArray2 = functionEvaluationException1.getArguments();
        java.lang.String str3 = functionEvaluationException1.getPattern();
        org.junit.Assert.assertNotNull(objArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray2), "[-161.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray2), "[-161.0]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Evaluation failed for argument = {0}" + "'", str3, "Evaluation failed for argument = {0}");
    }

    @Test
    public void test06174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06174");
        double[] doubleArray2 = new double[] { (byte) 1, 100 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) (short) 100);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver6 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction3);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction7 = laguerreSolver6.getPolynomialFunction();
        laguerreSolver6.setRelativeAccuracy((double) 0);
        double double10 = laguerreSolver6.getFunctionValueAccuracy();
        laguerreSolver6.resetRelativeAccuracy();
        laguerreSolver6.resetRelativeAccuracy();
        laguerreSolver6.resetRelativeAccuracy();
        // The following exception was thrown during execution in test generation
        try {
            double double17 = laguerreSolver6.solve((double) (byte) 1, (-1.0303676605150726E8d), 3921189.0d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Endpoints do not specify an interval: [1.0,-1.0303676605150726E8]");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 10001.0d + "'", double5 == 10001.0d);
        org.junit.Assert.assertNotNull(polynomialFunction7);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0E-15d + "'", double10 == 1.0E-15d);
    }

    @Test
    public void test06175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06175");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex1 = complex0.cosh();
        org.apache.commons.math.complex.Complex complex2 = complex0.log();
        org.apache.commons.math.complex.Complex complex3 = complex0.sin();
        org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex5 = complex4.cosh();
        org.apache.commons.math.complex.Complex complex6 = complex4.log();
        org.apache.commons.math.complex.Complex complex7 = complex4.sin();
        org.apache.commons.math.complex.Complex complex8 = complex4.log();
        org.apache.commons.math.complex.Complex complex9 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex10 = complex9.sqrt();
        org.apache.commons.math.complex.Complex complex11 = complex4.divide(complex10);
        org.apache.commons.math.complex.Complex complex12 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex13 = complex12.cosh();
        org.apache.commons.math.complex.Complex complex14 = complex13.acos();
        double double15 = complex13.getReal();
        org.apache.commons.math.complex.Complex complex16 = complex13.sqrt();
        org.apache.commons.math.complex.Complex complex17 = complex4.pow(complex13);
        org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex19 = complex18.cosh();
        org.apache.commons.math.complex.Complex complex20 = complex18.log();
        org.apache.commons.math.complex.Complex complex21 = complex20.cos();
        org.apache.commons.math.complex.Complex complex22 = complex13.multiply(complex20);
        org.apache.commons.math.complex.Complex complex23 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex24 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex25 = complex24.sqrt();
        org.apache.commons.math.complex.Complex complex26 = complex25.sin();
        org.apache.commons.math.complex.Complex complex27 = complex23.pow(complex25);
        org.apache.commons.math.complex.Complex complex28 = complex22.multiply(complex23);
        org.apache.commons.math.complex.Complex complex29 = complex0.add(complex28);
        double double30 = complex28.getImaginary();
        org.apache.commons.math.complex.Complex complex31 = complex28.tan();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertNotNull(complex31);
    }

    @Test
    public void test06176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06176");
        double[] doubleArray2 = new double[] { (byte) 1, 100 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) (short) 100);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver6 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction3);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction7 = laguerreSolver6.getPolynomialFunction();
        double double8 = laguerreSolver6.getRelativeAccuracy();
        laguerreSolver6.resetRelativeAccuracy();
        double double10 = laguerreSolver6.getFunctionValueAccuracy();
        laguerreSolver6.resetRelativeAccuracy();
        laguerreSolver6.setMaximalIterationCount((int) (short) 10);
        double double14 = laguerreSolver6.getFunctionValueAccuracy();
        double double17 = laguerreSolver6.solve((-32.999994115662645d), 350.0d);
        laguerreSolver6.resetMaximalIterationCount();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 10001.0d + "'", double5 == 10001.0d);
        org.junit.Assert.assertNotNull(polynomialFunction7);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 1.0E-14d + "'", double8 == 1.0E-14d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0E-15d + "'", double10 == 1.0E-15d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 1.0E-15d + "'", double14 == 1.0E-15d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + (-0.01d) + "'", double17 == (-0.01d));
    }

    @Test
    public void test06177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06177");
        double[] doubleArray2 = new double[] { (byte) 1, 100 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) (short) 100);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver6 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction3);
        double double10 = laguerreSolver6.solve((double) (-1L), 349.0d, (double) (short) 10);
        laguerreSolver6.setMaximalIterationCount((int) '#');
        laguerreSolver6.setMaximalIterationCount((int) ' ');
        double double15 = laguerreSolver6.getRelativeAccuracy();
        laguerreSolver6.resetMaximalIterationCount();
        double[] doubleArray19 = new double[] { (byte) 1, 100 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction20 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray19);
        double double22 = polynomialFunction20.value((double) (short) 100);
        double[] doubleArray23 = polynomialFunction20.getCoefficients();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction24 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray23);
        org.apache.commons.math.complex.Complex[] complexArray26 = laguerreSolver6.solveAll(doubleArray23, (double) (short) 1);
        double[] doubleArray31 = new double[] { (byte) 1, 100 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction32 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray31);
        double double34 = polynomialFunction32.value((double) (short) 100);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver35 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction32);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction36 = laguerreSolver35.getPolynomialFunction();
        laguerreSolver35.setRelativeAccuracy((double) 0);
        double[] doubleArray41 = new double[] { (byte) -1, '#' };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction42 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray41);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction43 = polynomialFunction42.polynomialDerivative();
        double[] doubleArray44 = polynomialFunction42.getCoefficients();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction45 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray44);
        org.apache.commons.math.complex.Complex[] complexArray47 = laguerreSolver35.solveAll(doubleArray44, (double) 4);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException48 = new org.apache.commons.math.FunctionEvaluationException((double) 1L, "org.apache.commons.math.FunctionEvaluationException: ", (java.lang.Object[]) complexArray47);
        org.apache.commons.math.complex.Complex complex49 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex50 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex51 = complex50.sqrt();
        org.apache.commons.math.complex.Complex complex52 = complex51.sin();
        org.apache.commons.math.complex.Complex complex53 = complex49.pow(complex51);
        org.apache.commons.math.complex.Complex complex54 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex55 = complex54.cosh();
        org.apache.commons.math.complex.Complex complex56 = complex54.log();
        org.apache.commons.math.complex.Complex complex57 = complex49.divide(complex56);
        org.apache.commons.math.complex.Complex complex58 = complex49.atan();
        org.apache.commons.math.complex.Complex complex59 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex60 = complex59.cosh();
        double double61 = complex59.abs();
        org.apache.commons.math.complex.Complex complex62 = complex59.conjugate();
        org.apache.commons.math.complex.Complex complex63 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex64 = complex63.cosh();
        double double65 = complex63.abs();
        org.apache.commons.math.complex.Complex complex66 = complex63.conjugate();
        org.apache.commons.math.complex.Complex complex67 = complex66.conjugate();
        org.apache.commons.math.complex.Complex complex68 = complex66.tanh();
        org.apache.commons.math.complex.Complex complex69 = complex66.atan();
        org.apache.commons.math.complex.Complex complex70 = complex59.subtract(complex66);
        org.apache.commons.math.complex.Complex complex71 = complex59.tanh();
        org.apache.commons.math.complex.Complex complex72 = complex58.subtract(complex59);
        org.apache.commons.math.complex.Complex complex73 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex74 = complex73.cosh();
        org.apache.commons.math.complex.Complex complex75 = complex73.conjugate();
        org.apache.commons.math.complex.Complex complex76 = complex72.add(complex73);
        org.apache.commons.math.complex.Complex complex77 = complex72.log();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.complex.Complex complex78 = laguerreSolver6.solve(complexArray47, complex72);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Polynomial degree must be positive: degree=0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 10001.0d + "'", double5 == 10001.0d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + (-0.01d) + "'", double10 == (-0.01d));
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 1.0E-14d + "'", double15 == 1.0E-14d);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 10001.0d + "'", double22 == 10001.0d);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(complexArray26);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 10001.0d + "'", double34 == 10001.0d);
        org.junit.Assert.assertNotNull(polynomialFunction36);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[-1.0, 35.0]");
        org.junit.Assert.assertNotNull(polynomialFunction43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[-1.0, 35.0]");
        org.junit.Assert.assertNotNull(complexArray47);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + Double.POSITIVE_INFINITY + "'", double61 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + Double.POSITIVE_INFINITY + "'", double65 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertNotNull(complex75);
        org.junit.Assert.assertNotNull(complex76);
        org.junit.Assert.assertNotNull(complex77);
    }

    @Test
    public void test06178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06178");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex1 = complex0.cosh();
        org.apache.commons.math.complex.Complex complex2 = complex1.acos();
        org.apache.commons.math.complex.Complex complex3 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex4 = complex3.cosh();
        org.apache.commons.math.complex.Complex complex5 = complex3.log();
        org.apache.commons.math.complex.Complex complex6 = complex3.sin();
        org.apache.commons.math.complex.Complex complex7 = complex6.tanh();
        org.apache.commons.math.complex.Complex complex8 = complex1.add(complex7);
        org.apache.commons.math.complex.Complex complex9 = complex7.acos();
        double double10 = complex9.getImaginary();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
    }

    @Test
    public void test06179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06179");
        double[] doubleArray2 = new double[] { (byte) 1, 100 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) (short) 100);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver6 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction3);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction7 = laguerreSolver6.getPolynomialFunction();
        double double8 = laguerreSolver6.getAbsoluteAccuracy();
        double[] doubleArray14 = new double[] { 0L, '#', 100.0f, 0L, (-1.0d) };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction15 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray14);
        org.apache.commons.math.complex.Complex[] complexArray17 = laguerreSolver6.solveAll(doubleArray14, 10001.0d);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction18 = laguerreSolver6.getPolynomialFunction();
        laguerreSolver6.resetMaximalIterationCount();
        // The following exception was thrown during execution in test generation
        try {
            double double22 = laguerreSolver6.solve((-215599.0d), (-1.04987708700666E16d));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Endpoints do not specify an interval: [-215599.0,-1.04987708700666E16]");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 10001.0d + "'", double5 == 10001.0d);
        org.junit.Assert.assertNotNull(polynomialFunction7);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 1.0E-6d + "'", double8 == 1.0E-6d);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[0.0, 35.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(complexArray17);
        org.junit.Assert.assertNotNull(polynomialFunction18);
    }

    @Test
    public void test06180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06180");
        double[] doubleArray2 = new double[] { (byte) 1, 100 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) (short) 100);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver6 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction3);
        double double10 = laguerreSolver6.solve((double) (-1L), 349.0d, (double) (short) 10);
        double double11 = laguerreSolver6.getResult();
        double double12 = laguerreSolver6.getFunctionValueAccuracy();
        laguerreSolver6.resetRelativeAccuracy();
        double double14 = laguerreSolver6.getAbsoluteAccuracy();
        laguerreSolver6.setAbsoluteAccuracy((double) 0L);
        laguerreSolver6.setMaximalIterationCount((int) 'a');
        double double19 = laguerreSolver6.getAbsoluteAccuracy();
        double double22 = laguerreSolver6.solve((-8.7584986E7d), 0.7853981633974483d);
        // The following exception was thrown during execution in test generation
        try {
            double double26 = laguerreSolver6.solve(18.0d, (-3.11013341199E11d), (-1376900.0d));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Endpoints do not specify an interval: [18.0,-3.11013341199E11]");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 10001.0d + "'", double5 == 10001.0d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + (-0.01d) + "'", double10 == (-0.01d));
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + (-0.01d) + "'", double11 == (-0.01d));
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 1.0E-15d + "'", double12 == 1.0E-15d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 1.0E-6d + "'", double14 == 1.0E-6d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + (-0.01d) + "'", double22 == (-0.01d));
    }

    @Test
    public void test06181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06181");
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException2 = new org.apache.commons.math.FunctionEvaluationException((double) 100);
        java.lang.Object[] objArray3 = functionEvaluationException2.getArguments();
        org.apache.commons.math.ConvergenceException convergenceException4 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) functionEvaluationException2);
        java.lang.Throwable[] throwableArray5 = functionEvaluationException2.getSuppressed();
        org.apache.commons.math.ConvergenceException convergenceException6 = new org.apache.commons.math.ConvergenceException("", (java.lang.Object[]) throwableArray5);
        org.junit.Assert.assertNotNull(objArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray3), "[100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray3), "[100.0]");
        org.junit.Assert.assertNotNull(throwableArray5);
    }

    @Test
    public void test06182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06182");
        java.lang.Object[] objArray12 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException13 = new org.apache.commons.math.ConvergenceException("", objArray12);
        java.lang.Object[] objArray15 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException16 = new org.apache.commons.math.ConvergenceException("", objArray15);
        org.apache.commons.math.ConvergenceException convergenceException17 = new org.apache.commons.math.ConvergenceException("", objArray12, (java.lang.Throwable) convergenceException16);
        org.apache.commons.math.ConvergenceException convergenceException18 = new org.apache.commons.math.ConvergenceException("", objArray12);
        org.apache.commons.math.ConvergenceException convergenceException19 = new org.apache.commons.math.ConvergenceException("hi!", objArray12);
        java.lang.Object[] objArray20 = convergenceException19.getArguments();
        java.lang.Throwable throwable21 = null;
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException22 = new org.apache.commons.math.FunctionEvaluationException((double) (byte) 0, "org.apache.commons.math.ConvergenceException: ", objArray20, throwable21);
        java.lang.Object[] objArray24 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException25 = new org.apache.commons.math.ConvergenceException("", objArray24);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException26 = new org.apache.commons.math.FunctionEvaluationException((double) (byte) 0, "Evaluation failed for argument = {0}", objArray20, (java.lang.Throwable) convergenceException25);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException27 = new org.apache.commons.math.MaxIterationsExceededException(10, "org.apache.commons.math.FunctionEvaluationException: org.apache.commons.math.FunctionEvaluationException: ", objArray20);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException28 = new org.apache.commons.math.MaxIterationsExceededException(3, "hi!", objArray20);
        int int29 = maxIterationsExceededException28.getMaxIterations();
        int int30 = maxIterationsExceededException28.getMaxIterations();
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12), "[]");
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[]");
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray20), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray20), "[]");
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 3 + "'", int29 == 3);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 3 + "'", int30 == 3);
    }

    @Test
    public void test06183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06183");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex1 = complex0.cosh();
        org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex3 = complex2.cosh();
        org.apache.commons.math.complex.Complex complex4 = complex2.log();
        org.apache.commons.math.complex.Complex complex5 = complex2.sin();
        org.apache.commons.math.complex.Complex complex6 = complex2.log();
        org.apache.commons.math.complex.Complex complex7 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex8 = complex7.sqrt();
        org.apache.commons.math.complex.Complex complex9 = complex2.divide(complex8);
        org.apache.commons.math.complex.Complex complex10 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex11 = complex10.cosh();
        org.apache.commons.math.complex.Complex complex12 = complex11.acos();
        double double13 = complex11.getReal();
        org.apache.commons.math.complex.Complex complex14 = complex11.sqrt();
        org.apache.commons.math.complex.Complex complex15 = complex2.pow(complex11);
        org.apache.commons.math.complex.Complex complex16 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex17 = complex16.cosh();
        org.apache.commons.math.complex.Complex complex18 = complex16.log();
        org.apache.commons.math.complex.Complex complex19 = complex18.cos();
        org.apache.commons.math.complex.Complex complex20 = complex11.multiply(complex18);
        org.apache.commons.math.complex.Complex complex21 = complex18.tanh();
        org.apache.commons.math.complex.Complex complex22 = complex0.divide(complex18);
        org.apache.commons.math.complex.Complex complex23 = complex22.sin();
        org.apache.commons.math.complex.Complex complex24 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex25 = complex24.cosh();
        org.apache.commons.math.complex.Complex complex26 = complex25.acos();
        org.apache.commons.math.complex.Complex complex27 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex28 = complex27.cosh();
        org.apache.commons.math.complex.Complex complex29 = complex27.log();
        org.apache.commons.math.complex.Complex complex30 = complex27.sin();
        org.apache.commons.math.complex.Complex complex31 = complex30.tanh();
        org.apache.commons.math.complex.Complex complex32 = complex25.add(complex31);
        org.apache.commons.math.complex.Complex complex33 = org.apache.commons.math.complex.Complex.INF;
        boolean boolean34 = complex33.isInfinite();
        org.apache.commons.math.complex.Complex complex35 = complex25.divide(complex33);
        org.apache.commons.math.complex.Complex complex36 = complex33.cos();
        boolean boolean37 = complex33.isInfinite();
        org.apache.commons.math.complex.Complex complex38 = complex23.multiply(complex33);
        org.apache.commons.math.complex.Complex complex39 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex40 = complex39.cosh();
        double double41 = complex39.abs();
        org.apache.commons.math.complex.Complex complex42 = complex39.conjugate();
        org.apache.commons.math.complex.Complex complex43 = complex42.conjugate();
        boolean boolean44 = complex42.isInfinite();
        org.apache.commons.math.complex.Complex complex45 = complex42.cos();
        org.apache.commons.math.complex.Complex complex46 = complex42.conjugate();
        org.apache.commons.math.complex.Complex complex47 = complex42.sin();
        boolean boolean48 = complex42.isNaN();
        org.apache.commons.math.complex.Complex complex49 = complex42.atan();
        org.apache.commons.math.complex.Complex complex50 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex51 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex52 = complex51.sqrt();
        org.apache.commons.math.complex.Complex complex53 = complex52.sin();
        org.apache.commons.math.complex.Complex complex54 = complex50.pow(complex52);
        org.apache.commons.math.complex.Complex complex55 = complex54.asin();
        org.apache.commons.math.complex.Complex complex56 = complex55.atan();
        org.apache.commons.math.complex.Complex complex57 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex58 = complex57.cosh();
        boolean boolean59 = complex56.equals((java.lang.Object) complex57);
        org.apache.commons.math.complex.Complex complex60 = complex56.conjugate();
        org.apache.commons.math.complex.Complex complex61 = complex42.pow(complex56);
        org.apache.commons.math.complex.Complex complex62 = complex56.atan();
        org.apache.commons.math.complex.Complex complex63 = complex56.log();
        org.apache.commons.math.complex.Complex complex64 = complex56.exp();
        org.apache.commons.math.complex.Complex complex65 = complex56.acos();
        boolean boolean66 = complex33.equals((java.lang.Object) complex56);
        org.apache.commons.math.complex.Complex complex67 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex68 = complex67.cosh();
        double double69 = complex67.abs();
        org.apache.commons.math.complex.Complex complex70 = complex67.conjugate();
        org.apache.commons.math.complex.Complex complex71 = complex70.conjugate();
        org.apache.commons.math.complex.Complex complex72 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex73 = complex72.tan();
        org.apache.commons.math.complex.Complex complex74 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex75 = complex74.cosh();
        org.apache.commons.math.complex.Complex complex76 = complex75.acos();
        double double77 = complex75.getReal();
        boolean boolean78 = complex73.equals((java.lang.Object) complex75);
        org.apache.commons.math.complex.Complex complex79 = complex71.subtract(complex75);
        org.apache.commons.math.complex.Complex complex80 = complex79.sqrt1z();
        org.apache.commons.math.complex.Complex complex81 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex82 = complex81.cosh();
        org.apache.commons.math.complex.Complex complex83 = complex81.conjugate();
        org.apache.commons.math.complex.Complex complex84 = complex80.pow(complex83);
        org.apache.commons.math.complex.Complex complex85 = complex33.multiply(complex84);
        org.apache.commons.math.complex.Complex complex86 = complex84.cosh();
        org.apache.commons.math.complex.Complex complex87 = complex86.acos();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + Double.POSITIVE_INFINITY + "'", double41 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + Double.POSITIVE_INFINITY + "'", double69 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertNotNull(complex75);
        org.junit.Assert.assertNotNull(complex76);
        org.junit.Assert.assertTrue(Double.isNaN(double77));
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(complex79);
        org.junit.Assert.assertNotNull(complex80);
        org.junit.Assert.assertNotNull(complex81);
        org.junit.Assert.assertNotNull(complex82);
        org.junit.Assert.assertNotNull(complex83);
        org.junit.Assert.assertNotNull(complex84);
        org.junit.Assert.assertNotNull(complex85);
        org.junit.Assert.assertNotNull(complex86);
        org.junit.Assert.assertNotNull(complex87);
    }

    @Test
    public void test06184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06184");
        double[] doubleArray2 = new double[] { (byte) 1, 100 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) (short) 100);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver6 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction3);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction7 = laguerreSolver6.getPolynomialFunction();
        double double8 = laguerreSolver6.getAbsoluteAccuracy();
        laguerreSolver6.setFunctionValueAccuracy((double) (-1));
        laguerreSolver6.setFunctionValueAccuracy((double) (short) 1);
        double double15 = laguerreSolver6.solve((-1.03036766E8d), (double) (byte) 10);
        laguerreSolver6.setRelativeAccuracy(33.000004d);
        laguerreSolver6.setAbsoluteAccuracy(10101.0d);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 10001.0d + "'", double5 == 10001.0d);
        org.junit.Assert.assertNotNull(polynomialFunction7);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 1.0E-6d + "'", double8 == 1.0E-6d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + (-0.009999997913837433d) + "'", double15 == (-0.009999997913837433d));
    }

    @Test
    public void test06185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06185");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex1 = complex0.cosh();
        org.apache.commons.math.complex.Complex complex2 = complex0.log();
        org.apache.commons.math.complex.Complex complex3 = complex2.cos();
        double double4 = complex3.abs();
        org.apache.commons.math.complex.Complex complex5 = complex3.sqrt();
        org.apache.commons.math.complex.Complex complex6 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex7 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex8 = complex7.sqrt();
        org.apache.commons.math.complex.Complex complex9 = complex8.sin();
        org.apache.commons.math.complex.Complex complex10 = complex6.pow(complex8);
        org.apache.commons.math.complex.Complex complex11 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex12 = complex11.cosh();
        org.apache.commons.math.complex.Complex complex13 = complex11.log();
        org.apache.commons.math.complex.Complex complex14 = complex6.divide(complex13);
        org.apache.commons.math.complex.Complex complex15 = complex5.subtract(complex14);
        org.apache.commons.math.complex.Complex complex16 = complex5.conjugate();
        org.apache.commons.math.complex.Complex complex17 = complex5.conjugate();
        org.apache.commons.math.complex.Complex complex18 = complex17.exp();
        org.apache.commons.math.complex.Complex complex19 = complex18.sinh();
        org.apache.commons.math.complex.Complex complex20 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex21 = complex20.cosh();
        double double22 = complex20.abs();
        org.apache.commons.math.complex.Complex complex23 = complex20.conjugate();
        org.apache.commons.math.complex.Complex complex24 = complex23.conjugate();
        org.apache.commons.math.complex.Complex complex25 = complex23.tanh();
        org.apache.commons.math.complex.Complex complex26 = complex25.tan();
        org.apache.commons.math.complex.Complex complex27 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex28 = complex27.cosh();
        double double29 = complex27.abs();
        org.apache.commons.math.complex.Complex complex30 = complex27.conjugate();
        org.apache.commons.math.complex.Complex complex31 = complex30.conjugate();
        org.apache.commons.math.complex.Complex complex32 = complex26.subtract(complex30);
        org.apache.commons.math.complex.Complex complex33 = complex30.negate();
        org.apache.commons.math.complex.Complex complex34 = complex30.tanh();
        org.apache.commons.math.complex.Complex complex35 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex36 = complex35.cosh();
        double double37 = complex35.abs();
        org.apache.commons.math.complex.Complex complex38 = complex35.conjugate();
        org.apache.commons.math.complex.Complex complex39 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex40 = complex39.sqrt();
        boolean boolean41 = complex39.isNaN();
        org.apache.commons.math.complex.Complex complex42 = complex39.sin();
        org.apache.commons.math.complex.Complex complex43 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex44 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex45 = complex44.sqrt();
        org.apache.commons.math.complex.Complex complex46 = complex45.sin();
        org.apache.commons.math.complex.Complex complex47 = complex43.pow(complex45);
        org.apache.commons.math.complex.Complex complex48 = complex47.asin();
        org.apache.commons.math.complex.Complex complex49 = complex48.atan();
        boolean boolean50 = complex49.isInfinite();
        org.apache.commons.math.complex.Complex complex51 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex52 = complex49.subtract(complex51);
        org.apache.commons.math.complex.Complex complex53 = complex52.sin();
        org.apache.commons.math.complex.Complex complex54 = complex39.divide(complex53);
        org.apache.commons.math.complex.Complex complex55 = complex35.subtract(complex53);
        boolean boolean56 = complex30.equals((java.lang.Object) complex53);
        org.apache.commons.math.complex.Complex complex57 = complex53.log();
        org.apache.commons.math.complex.Complex complex58 = complex53.asin();
        org.apache.commons.math.complex.Complex complex59 = complex58.asin();
        org.apache.commons.math.complex.Complex complex60 = complex58.sqrt();
        org.apache.commons.math.complex.Complex complex61 = complex18.pow(complex58);
        org.apache.commons.math.complex.Complex complex62 = complex61.sqrt1z();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + Double.POSITIVE_INFINITY + "'", double22 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + Double.POSITIVE_INFINITY + "'", double29 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + Double.POSITIVE_INFINITY + "'", double37 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertNotNull(complex62);
    }

    @Test
    public void test06186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06186");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex1 = complex0.exp();
        org.apache.commons.math.complex.Complex complex2 = complex1.acos();
        org.apache.commons.math.complex.Complex complex3 = complex2.acos();
        org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex5 = complex4.tan();
        org.apache.commons.math.complex.Complex complex6 = complex3.pow(complex5);
        org.apache.commons.math.complex.Complex complex7 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex8 = complex7.cosh();
        double double9 = complex7.abs();
        org.apache.commons.math.complex.Complex complex10 = complex7.conjugate();
        boolean boolean11 = complex7.isNaN();
        boolean boolean12 = complex7.isInfinite();
        org.apache.commons.math.complex.Complex complex13 = complex7.log();
        org.apache.commons.math.complex.Complex complex14 = complex13.log();
        org.apache.commons.math.complex.Complex complex15 = complex6.divide(complex13);
        org.apache.commons.math.complex.Complex complex16 = complex6.conjugate();
        org.apache.commons.math.complex.Complex complex17 = complex16.cos();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + Double.POSITIVE_INFINITY + "'", double9 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
    }

    @Test
    public void test06187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06187");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex1 = complex0.cosh();
        double double2 = complex0.abs();
        org.apache.commons.math.complex.Complex complex3 = complex0.conjugate();
        org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex5 = complex4.cosh();
        double double6 = complex4.abs();
        org.apache.commons.math.complex.Complex complex7 = complex4.conjugate();
        org.apache.commons.math.complex.Complex complex8 = complex7.conjugate();
        org.apache.commons.math.complex.Complex complex9 = complex7.tanh();
        org.apache.commons.math.complex.Complex complex10 = complex7.atan();
        org.apache.commons.math.complex.Complex complex11 = complex0.subtract(complex7);
        org.apache.commons.math.complex.Complex complex12 = complex11.log();
        double double13 = complex12.getReal();
        org.apache.commons.math.complex.Complex complex14 = complex12.cosh();
        org.apache.commons.math.complex.Complex complex15 = complex14.sqrt1z();
        org.apache.commons.math.complex.Complex complex16 = complex15.exp();
        org.apache.commons.math.complex.Complex complex17 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex18 = complex17.cosh();
        org.apache.commons.math.complex.Complex complex19 = complex17.log();
        org.apache.commons.math.complex.Complex complex20 = complex17.sin();
        org.apache.commons.math.complex.Complex complex21 = complex17.log();
        org.apache.commons.math.complex.Complex complex22 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex23 = complex22.sqrt();
        org.apache.commons.math.complex.Complex complex24 = complex17.divide(complex23);
        org.apache.commons.math.complex.Complex complex25 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex26 = complex25.cosh();
        org.apache.commons.math.complex.Complex complex27 = complex26.acos();
        double double28 = complex26.getReal();
        org.apache.commons.math.complex.Complex complex29 = complex26.sqrt();
        org.apache.commons.math.complex.Complex complex30 = complex17.pow(complex26);
        org.apache.commons.math.complex.Complex complex31 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex32 = complex31.cosh();
        org.apache.commons.math.complex.Complex complex33 = complex31.log();
        org.apache.commons.math.complex.Complex complex34 = complex33.cos();
        org.apache.commons.math.complex.Complex complex35 = complex26.multiply(complex33);
        org.apache.commons.math.complex.Complex complex36 = complex33.tanh();
        double double37 = complex36.getImaginary();
        org.apache.commons.math.complex.Complex complex38 = complex36.asin();
        org.apache.commons.math.complex.Complex complex39 = complex15.subtract(complex36);
        org.apache.commons.math.complex.Complex complex40 = complex36.cos();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + Double.POSITIVE_INFINITY + "'", double2 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + Double.POSITIVE_INFINITY + "'", double6 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
    }

    @Test
    public void test06188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06188");
        java.lang.Object[] objArray3 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException4 = new org.apache.commons.math.ConvergenceException("", objArray3);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException5 = new org.apache.commons.math.FunctionEvaluationException(10.0d, (java.lang.Throwable) convergenceException4);
        double double6 = functionEvaluationException5.getArgument();
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException7 = new org.apache.commons.math.FunctionEvaluationException(112034.0d, (java.lang.Throwable) functionEvaluationException5);
        java.lang.String str8 = functionEvaluationException5.toString();
        org.junit.Assert.assertNotNull(objArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray3), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray3), "[]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 10.0d + "'", double6 == 10.0d);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "org.apache.commons.math.FunctionEvaluationException: " + "'", str8, "org.apache.commons.math.FunctionEvaluationException: ");
    }

    @Test
    public void test06189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06189");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex1 = complex0.cosh();
        double double2 = complex0.abs();
        org.apache.commons.math.complex.Complex complex3 = complex0.conjugate();
        org.apache.commons.math.complex.Complex complex4 = complex3.conjugate();
        org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex6 = complex5.cosh();
        org.apache.commons.math.complex.Complex complex7 = complex5.log();
        org.apache.commons.math.complex.Complex complex8 = complex5.sin();
        org.apache.commons.math.complex.Complex complex9 = complex5.log();
        org.apache.commons.math.complex.Complex complex10 = complex3.multiply(complex5);
        org.apache.commons.math.complex.Complex complex11 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex12 = complex11.cosh();
        double double13 = complex11.abs();
        org.apache.commons.math.complex.Complex complex14 = complex11.conjugate();
        org.apache.commons.math.complex.Complex complex15 = complex14.conjugate();
        org.apache.commons.math.complex.Complex complex16 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex17 = complex16.tan();
        org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex19 = complex18.cosh();
        org.apache.commons.math.complex.Complex complex20 = complex19.acos();
        double double21 = complex19.getReal();
        boolean boolean22 = complex17.equals((java.lang.Object) complex19);
        org.apache.commons.math.complex.Complex complex23 = complex15.subtract(complex19);
        org.apache.commons.math.complex.Complex complex24 = complex19.tanh();
        org.apache.commons.math.complex.Complex complex25 = complex3.pow(complex19);
        org.apache.commons.math.complex.Complex complex26 = complex3.negate();
        org.apache.commons.math.complex.Complex complex27 = complex3.sqrt();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + Double.POSITIVE_INFINITY + "'", double2 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + Double.POSITIVE_INFINITY + "'", double13 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
    }

    @Test
    public void test06190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06190");
        double[] doubleArray2 = new double[] { (byte) 1, 100 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) (short) 100);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver6 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction3);
        laguerreSolver6.setMaximalIterationCount(4);
        laguerreSolver6.setAbsoluteAccuracy((double) 'a');
        laguerreSolver6.setAbsoluteAccuracy((double) (byte) 1);
        laguerreSolver6.setFunctionValueAccuracy(97.0d);
        laguerreSolver6.resetRelativeAccuracy();
        double double16 = laguerreSolver6.getFunctionValueAccuracy();
        // The following exception was thrown during execution in test generation
        try {
            double double20 = laguerreSolver6.solve(1001.0d, 6.952589180540998E115d, (double) 5);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Function values at endpoints do not have different signs.  Endpoints: [1001.0,6.952589180540998E115]  Values: [100101.0,6.952589180540997E117]");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 10001.0d + "'", double5 == 10001.0d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 97.0d + "'", double16 == 97.0d);
    }

    @Test
    public void test06191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06191");
        double[] doubleArray2 = new double[] { (byte) 1, 100 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) (short) 100);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver6 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction3);
        double double10 = laguerreSolver6.solve((double) (-1L), 349.0d, (double) (short) 10);
        double[] doubleArray13 = new double[] { (byte) 1, 100 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction14 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray13);
        double double16 = polynomialFunction14.value((double) (short) 100);
        double[] doubleArray17 = polynomialFunction14.getCoefficients();
        org.apache.commons.math.complex.Complex[] complexArray19 = laguerreSolver6.solveAll(doubleArray17, (double) (byte) 1);
        laguerreSolver6.resetAbsoluteAccuracy();
        laguerreSolver6.setRelativeAccuracy((double) 32);
        int int23 = laguerreSolver6.getIterationCount();
        laguerreSolver6.setAbsoluteAccuracy((-3.110133412E9d));
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 10001.0d + "'", double5 == 10001.0d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + (-0.01d) + "'", double10 == (-0.01d));
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 10001.0d + "'", double16 == 10001.0d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(complexArray19);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 2 + "'", int23 == 2);
    }

    @Test
    public void test06192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06192");
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException6 = new org.apache.commons.math.MaxIterationsExceededException((int) (byte) 1);
        java.lang.Object[] objArray7 = maxIterationsExceededException6.getArguments();
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException8 = new org.apache.commons.math.MaxIterationsExceededException(32, "Maximal number of iterations ({0}) exceeded", objArray7);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException9 = new org.apache.commons.math.FunctionEvaluationException((double) 21, "org.apache.commons.math.FunctionEvaluationException: Evaluation failed for argument = -14,823,291,286", objArray7);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException10 = new org.apache.commons.math.FunctionEvaluationException((-308899.0d), (java.lang.Throwable) functionEvaluationException9);
        org.junit.Assert.assertNotNull(objArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray7), "[1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray7), "[1]");
    }

    @Test
    public void test06193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06193");
        org.apache.commons.math.ConvergenceException convergenceException1 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.MaxIterationsExceededException: ");
        java.lang.String str2 = convergenceException1.getPattern();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.MaxIterationsExceededException: " + "'", str2, "org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.MaxIterationsExceededException: ");
    }

    @Test
    public void test06194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06194");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex1 = complex0.cosh();
        double double2 = complex0.abs();
        org.apache.commons.math.complex.Complex complex3 = complex0.conjugate();
        org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex5 = complex4.cosh();
        double double6 = complex4.abs();
        org.apache.commons.math.complex.Complex complex7 = complex4.conjugate();
        org.apache.commons.math.complex.Complex complex8 = complex7.conjugate();
        org.apache.commons.math.complex.Complex complex9 = complex7.tanh();
        org.apache.commons.math.complex.Complex complex10 = complex7.atan();
        org.apache.commons.math.complex.Complex complex11 = complex0.subtract(complex7);
        org.apache.commons.math.complex.Complex complex12 = complex11.log();
        double double13 = complex12.getReal();
        org.apache.commons.math.complex.Complex complex14 = complex12.cosh();
        org.apache.commons.math.complex.Complex complex15 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex16 = complex14.pow(complex15);
        org.apache.commons.math.complex.Complex complex17 = complex15.negate();
        org.apache.commons.math.complex.Complex complex18 = complex15.tan();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + Double.POSITIVE_INFINITY + "'", double2 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + Double.POSITIVE_INFINITY + "'", double6 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
    }

    @Test
    public void test06195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06195");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex2 = complex1.sqrt();
        org.apache.commons.math.complex.Complex complex3 = complex2.sin();
        org.apache.commons.math.complex.Complex complex4 = complex0.pow(complex2);
        org.apache.commons.math.complex.Complex complex5 = complex4.asin();
        org.apache.commons.math.complex.Complex complex6 = complex5.atan();
        boolean boolean7 = complex6.isInfinite();
        org.apache.commons.math.complex.Complex complex8 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex9 = complex6.subtract(complex8);
        org.apache.commons.math.complex.Complex complex10 = complex6.conjugate();
        org.apache.commons.math.complex.Complex complex11 = complex6.tan();
        org.apache.commons.math.complex.Complex complex12 = complex11.sinh();
        org.apache.commons.math.complex.Complex complex13 = complex11.cosh();
        org.apache.commons.math.complex.Complex complex14 = complex11.conjugate();
        org.apache.commons.math.complex.Complex complex15 = complex11.acos();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
    }

    @Test
    public void test06196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06196");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex1 = complex0.cosh();
        double double2 = complex0.abs();
        org.apache.commons.math.complex.Complex complex3 = complex0.conjugate();
        org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex5 = complex4.cosh();
        double double6 = complex4.abs();
        org.apache.commons.math.complex.Complex complex7 = complex4.conjugate();
        org.apache.commons.math.complex.Complex complex8 = complex7.conjugate();
        org.apache.commons.math.complex.Complex complex9 = complex7.tanh();
        org.apache.commons.math.complex.Complex complex10 = complex7.atan();
        org.apache.commons.math.complex.Complex complex11 = complex0.subtract(complex7);
        double[] doubleArray14 = new double[] { (byte) 1, 100 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction15 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray14);
        double double17 = polynomialFunction15.value((double) (short) 100);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver18 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction15);
        double double22 = laguerreSolver18.solve((double) (-1L), 349.0d, (double) (short) 10);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction23 = laguerreSolver18.getPolynomialFunction();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver24 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction23);
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction25 = polynomialFunction23.derivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver26 = new org.apache.commons.math.analysis.LaguerreSolver(univariateRealFunction25);
        boolean boolean27 = complex0.equals((java.lang.Object) laguerreSolver26);
        double[] doubleArray30 = new double[] { (byte) 1, 100 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction31 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray30);
        double double33 = polynomialFunction31.value((double) (short) 100);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver34 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction31);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction35 = laguerreSolver34.getPolynomialFunction();
        double double36 = laguerreSolver34.getAbsoluteAccuracy();
        laguerreSolver34.resetFunctionValueAccuracy();
        laguerreSolver34.setFunctionValueAccuracy((-0.3400000100000003d));
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction40 = laguerreSolver34.getPolynomialFunction();
        double[] doubleArray41 = polynomialFunction40.getCoefficients();
        org.apache.commons.math.complex.Complex[] complexArray43 = laguerreSolver26.solveAll(doubleArray41, (double) 18);
        laguerreSolver26.resetAbsoluteAccuracy();
        double double45 = laguerreSolver26.getAbsoluteAccuracy();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + Double.POSITIVE_INFINITY + "'", double2 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + Double.POSITIVE_INFINITY + "'", double6 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 10001.0d + "'", double17 == 10001.0d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + (-0.01d) + "'", double22 == (-0.01d));
        org.junit.Assert.assertNotNull(polynomialFunction23);
        org.junit.Assert.assertNotNull(univariateRealFunction25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 10001.0d + "'", double33 == 10001.0d);
        org.junit.Assert.assertNotNull(polynomialFunction35);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 1.0E-6d + "'", double36 == 1.0E-6d);
        org.junit.Assert.assertNotNull(polynomialFunction40);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(complexArray43);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 1.0E-6d + "'", double45 == 1.0E-6d);
    }

    @Test
    public void test06197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06197");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex1 = complex0.cosh();
        org.apache.commons.math.complex.Complex complex2 = complex0.log();
        org.apache.commons.math.complex.Complex complex3 = complex2.cos();
        double double4 = complex3.abs();
        org.apache.commons.math.complex.Complex complex5 = complex3.sqrt();
        org.apache.commons.math.complex.Complex complex6 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex7 = complex6.sqrt();
        boolean boolean8 = complex6.isNaN();
        double double9 = complex6.getReal();
        boolean boolean10 = complex6.isNaN();
        org.apache.commons.math.complex.Complex complex11 = complex6.asin();
        org.apache.commons.math.complex.Complex complex12 = complex5.pow(complex11);
        org.apache.commons.math.complex.Complex complex13 = complex5.sinh();
        org.apache.commons.math.complex.Complex complex14 = complex5.conjugate();
        org.apache.commons.math.complex.Complex complex15 = complex14.negate();
        org.apache.commons.math.complex.Complex complex16 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex17 = complex16.cosh();
        org.apache.commons.math.complex.Complex complex18 = complex16.log();
        org.apache.commons.math.complex.Complex complex19 = complex18.cos();
        double double20 = complex19.abs();
        org.apache.commons.math.complex.Complex complex21 = complex19.sqrt();
        org.apache.commons.math.complex.Complex complex22 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex23 = complex22.sqrt();
        boolean boolean24 = complex22.isNaN();
        double double25 = complex22.getReal();
        boolean boolean26 = complex22.isNaN();
        org.apache.commons.math.complex.Complex complex27 = complex22.asin();
        org.apache.commons.math.complex.Complex complex28 = complex21.pow(complex27);
        org.apache.commons.math.complex.Complex complex29 = complex28.tan();
        org.apache.commons.math.complex.Complex complex30 = complex29.negate();
        org.apache.commons.math.complex.Complex complex31 = complex29.log();
        org.apache.commons.math.complex.Complex complex32 = complex29.sin();
        boolean boolean33 = complex29.isInfinite();
        org.apache.commons.math.complex.Complex complex34 = complex14.pow(complex29);
        org.apache.commons.math.complex.Complex complex35 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.complex.Complex complex36 = complex34.add(complex35);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + Double.POSITIVE_INFINITY + "'", double9 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + Double.POSITIVE_INFINITY + "'", double25 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(complex34);
    }

    @Test
    public void test06198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06198");
        double[] doubleArray2 = new double[] { (byte) 1, 100 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) (short) 100);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver6 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction3);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction7 = laguerreSolver6.getPolynomialFunction();
        laguerreSolver6.setRelativeAccuracy((double) 0);
        double[] doubleArray12 = new double[] { (byte) -1, '#' };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction13 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray12);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction14 = polynomialFunction13.polynomialDerivative();
        double[] doubleArray15 = polynomialFunction13.getCoefficients();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction16 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray15);
        org.apache.commons.math.complex.Complex[] complexArray18 = laguerreSolver6.solveAll(doubleArray15, (double) 4);
        laguerreSolver6.setAbsoluteAccuracy((double) 1);
        double double21 = laguerreSolver6.getRelativeAccuracy();
        double double22 = laguerreSolver6.getResult();
        laguerreSolver6.resetFunctionValueAccuracy();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction24 = laguerreSolver6.getPolynomialFunction();
        double double25 = laguerreSolver6.getRelativeAccuracy();
        laguerreSolver6.setFunctionValueAccuracy((-2.1299995519185257E9d));
        laguerreSolver6.setMaximalIterationCount(19);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 10001.0d + "'", double5 == 10001.0d);
        org.junit.Assert.assertNotNull(polynomialFunction7);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[-1.0, 35.0]");
        org.junit.Assert.assertNotNull(polynomialFunction14);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[-1.0, 35.0]");
        org.junit.Assert.assertNotNull(complexArray18);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d);
        org.junit.Assert.assertNotNull(polynomialFunction24);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.0d + "'", double25 == 0.0d);
    }

    @Test
    public void test06199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06199");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex(134.02310093999603d, (double) (-1.0f));
        org.apache.commons.math.complex.Complex complex3 = complex2.cosh();
        org.apache.commons.math.complex.Complex complex4 = complex3.cos();
        org.apache.commons.math.complex.Complex complex5 = complex4.sinh();
        org.apache.commons.math.complex.Complex complex6 = complex4.tan();
        org.apache.commons.math.complex.Complex complex7 = complex6.sqrt();
        org.apache.commons.math.complex.Complex complex8 = complex6.sqrt1z();
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
    }

    @Test
    public void test06200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06200");
        java.lang.Object[] objArray10 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException11 = new org.apache.commons.math.ConvergenceException("", objArray10);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException12 = new org.apache.commons.math.FunctionEvaluationException((double) (short) 10, "hi!", objArray10);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException13 = new org.apache.commons.math.FunctionEvaluationException((double) (short) 1, "", objArray10);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException16 = new org.apache.commons.math.FunctionEvaluationException((double) (-1.0f), "org.apache.commons.math.ConvergenceException: hi!");
        org.apache.commons.math.ConvergenceException convergenceException17 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: ", objArray10, (java.lang.Throwable) functionEvaluationException16);
        java.lang.Object[] objArray18 = functionEvaluationException16.getArguments();
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException24 = new org.apache.commons.math.MaxIterationsExceededException(10);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException25 = new org.apache.commons.math.FunctionEvaluationException((-0.3533630315721405d), "org.apache.commons.math.MaxIterationsExceededException: org.apache.commons.math.FunctionEvaluationException: ", (java.lang.Throwable) maxIterationsExceededException24);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException26 = new org.apache.commons.math.FunctionEvaluationException((-6.7173106613978968E16d), "org.apache.commons.math.FunctionEvaluationException: ", (java.lang.Throwable) functionEvaluationException25);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException27 = new org.apache.commons.math.FunctionEvaluationException((-2.1350964975074216E16d), "org.apache.commons.math.FunctionEvaluationException: org.apache.commons.math.FunctionEvaluationException: org.apache.commons.math.FunctionEvaluationException: org.apache.commons.math.MaxIterationsExceededException: hi!", objArray18, (java.lang.Throwable) functionEvaluationException26);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException28 = new org.apache.commons.math.FunctionEvaluationException(3.034876052193146E24d, "org.apache.commons.math.MaxIterationsExceededException: org.apache.commons.math.ConvergenceException: hi!", objArray18);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertNotNull(objArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray18), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray18), "[]");
    }

    @Test
    public void test06201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06201");
        java.lang.Object[] objArray5 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException6 = new org.apache.commons.math.ConvergenceException("", objArray5);
        java.lang.Object[] objArray8 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException9 = new org.apache.commons.math.ConvergenceException("", objArray8);
        org.apache.commons.math.ConvergenceException convergenceException10 = new org.apache.commons.math.ConvergenceException("", objArray5, (java.lang.Throwable) convergenceException9);
        org.apache.commons.math.ConvergenceException convergenceException11 = new org.apache.commons.math.ConvergenceException("", objArray5);
        org.apache.commons.math.ConvergenceException convergenceException12 = new org.apache.commons.math.ConvergenceException("hi!", objArray5);
        java.lang.Object[] objArray13 = convergenceException12.getArguments();
        java.lang.Throwable[] throwableArray14 = convergenceException12.getSuppressed();
        java.lang.Object[] objArray24 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException25 = new org.apache.commons.math.ConvergenceException("", objArray24);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException26 = new org.apache.commons.math.FunctionEvaluationException((double) (short) 10, "hi!", objArray24);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException27 = new org.apache.commons.math.MaxIterationsExceededException((int) (byte) 0, "org.apache.commons.math.ConvergenceException: hi!", objArray24);
        java.lang.Throwable[] throwableArray28 = maxIterationsExceededException27.getSuppressed();
        java.lang.Object[] objArray35 = new java.lang.Object[] { 0.0f, (short) 1 };
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException36 = new org.apache.commons.math.MaxIterationsExceededException(100, "", objArray35);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException37 = new org.apache.commons.math.MaxIterationsExceededException((int) ' ', "hi!", objArray35);
        int int38 = maxIterationsExceededException37.getMaxIterations();
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException39 = new org.apache.commons.math.FunctionEvaluationException(Double.POSITIVE_INFINITY, "hi!", (java.lang.Object[]) throwableArray28, (java.lang.Throwable) maxIterationsExceededException37);
        java.lang.Object[] objArray40 = maxIterationsExceededException37.getArguments();
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException41 = new org.apache.commons.math.MaxIterationsExceededException((-1), "org.apache.commons.math.FunctionEvaluationException: ", objArray40);
        java.lang.String str42 = maxIterationsExceededException41.getPattern();
        org.apache.commons.math.ConvergenceException convergenceException43 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) maxIterationsExceededException41);
        int int44 = maxIterationsExceededException41.getMaxIterations();
        int int45 = maxIterationsExceededException41.getMaxIterations();
        org.apache.commons.math.ConvergenceException convergenceException46 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.MaxIterationsExceededException: org.apache.commons.math.FunctionEvaluationException: org.apache.commons.math.FunctionEvaluationException: ", (java.lang.Object[]) throwableArray14, (java.lang.Throwable) maxIterationsExceededException41);
        int int47 = maxIterationsExceededException41.getMaxIterations();
        org.junit.Assert.assertNotNull(objArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray5), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray5), "[]");
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[]");
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[]");
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[]");
        org.junit.Assert.assertNotNull(throwableArray28);
        org.junit.Assert.assertNotNull(objArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray35), "[0.0, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray35), "[0.0, 1]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 32 + "'", int38 == 32);
        org.junit.Assert.assertNotNull(objArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray40), "[0.0, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray40), "[0.0, 1]");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "org.apache.commons.math.FunctionEvaluationException: " + "'", str42, "org.apache.commons.math.FunctionEvaluationException: ");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-1) + "'", int47 == (-1));
    }

    @Test
    public void test06202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06202");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex1 = complex0.cosh();
        double double2 = complex0.abs();
        org.apache.commons.math.complex.Complex complex3 = complex0.conjugate();
        org.apache.commons.math.complex.Complex complex4 = complex3.conjugate();
        org.apache.commons.math.complex.Complex complex5 = complex3.tanh();
        org.apache.commons.math.complex.Complex complex6 = complex5.tan();
        org.apache.commons.math.complex.Complex complex7 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex8 = complex7.cosh();
        double double9 = complex7.abs();
        org.apache.commons.math.complex.Complex complex10 = complex7.conjugate();
        org.apache.commons.math.complex.Complex complex11 = complex10.conjugate();
        org.apache.commons.math.complex.Complex complex12 = complex6.subtract(complex10);
        org.apache.commons.math.complex.Complex complex13 = complex6.sinh();
        double double14 = complex6.getReal();
        double double15 = complex6.getReal();
        org.apache.commons.math.complex.Complex complex16 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex17 = complex16.cosh();
        org.apache.commons.math.complex.Complex complex18 = complex16.log();
        org.apache.commons.math.complex.Complex complex19 = complex16.sin();
        org.apache.commons.math.complex.Complex complex20 = complex19.atan();
        org.apache.commons.math.complex.Complex complex21 = complex20.negate();
        double double22 = complex20.abs();
        org.apache.commons.math.complex.Complex complex23 = complex6.pow(complex20);
        double double24 = complex20.abs();
        double double25 = complex20.abs();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + Double.POSITIVE_INFINITY + "'", double2 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + Double.POSITIVE_INFINITY + "'", double9 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertTrue(Double.isNaN(double25));
    }

    @Test
    public void test06203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06203");
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException2 = new org.apache.commons.math.FunctionEvaluationException((double) 97, "org.apache.commons.math.ConvergenceException");
    }

    @Test
    public void test06204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06204");
        org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex2 = complex1.cosh();
        double double3 = complex1.abs();
        org.apache.commons.math.complex.Complex complex4 = complex1.conjugate();
        org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex6 = complex5.sqrt();
        boolean boolean7 = complex5.isNaN();
        org.apache.commons.math.complex.Complex complex8 = complex5.sin();
        org.apache.commons.math.complex.Complex complex9 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex10 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex11 = complex10.sqrt();
        org.apache.commons.math.complex.Complex complex12 = complex11.sin();
        org.apache.commons.math.complex.Complex complex13 = complex9.pow(complex11);
        org.apache.commons.math.complex.Complex complex14 = complex13.asin();
        org.apache.commons.math.complex.Complex complex15 = complex14.atan();
        boolean boolean16 = complex15.isInfinite();
        org.apache.commons.math.complex.Complex complex17 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex18 = complex15.subtract(complex17);
        org.apache.commons.math.complex.Complex complex19 = complex18.sin();
        org.apache.commons.math.complex.Complex complex20 = complex5.divide(complex19);
        org.apache.commons.math.complex.Complex complex21 = complex1.subtract(complex19);
        org.apache.commons.math.complex.Complex complex22 = complex1.tanh();
        double double23 = complex1.getReal();
        org.apache.commons.math.complex.Complex complex24 = complex1.atan();
        java.lang.Object[] objArray32 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException33 = new org.apache.commons.math.ConvergenceException("", objArray32);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException34 = new org.apache.commons.math.FunctionEvaluationException((double) (short) 10, "hi!", objArray32);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException35 = new org.apache.commons.math.FunctionEvaluationException(0.0d, "org.apache.commons.math.FunctionEvaluationException: ", objArray32);
        java.lang.Object[] objArray37 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException38 = new org.apache.commons.math.ConvergenceException("", objArray37);
        java.lang.Object[] objArray43 = new java.lang.Object[] { 0.0f, (short) 1 };
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException44 = new org.apache.commons.math.MaxIterationsExceededException(100, "", objArray43);
        convergenceException38.addSuppressed((java.lang.Throwable) maxIterationsExceededException44);
        org.apache.commons.math.ConvergenceException convergenceException46 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.FunctionEvaluationException: ", objArray32, (java.lang.Throwable) maxIterationsExceededException44);
        org.apache.commons.math.ConvergenceException convergenceException47 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.MaxIterationsExceededException: org.apache.commons.math.FunctionEvaluationException: ", objArray32);
        java.lang.Throwable[] throwableArray48 = convergenceException47.getSuppressed();
        boolean boolean49 = complex1.equals((java.lang.Object) throwableArray48);
        org.apache.commons.math.ConvergenceException convergenceException50 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.MaxIterationsExceededException: Maximal number of iterations (52) exceeded", (java.lang.Object[]) throwableArray48);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + Double.POSITIVE_INFINITY + "'", double3 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + Double.POSITIVE_INFINITY + "'", double23 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[]");
        org.junit.Assert.assertNotNull(objArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray37), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray37), "[]");
        org.junit.Assert.assertNotNull(objArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray43), "[0.0, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray43), "[0.0, 1]");
        org.junit.Assert.assertNotNull(throwableArray48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
    }

    @Test
    public void test06205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06205");
        java.lang.Object[] objArray10 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException11 = new org.apache.commons.math.ConvergenceException("", objArray10);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException12 = new org.apache.commons.math.MaxIterationsExceededException(0, "hi!", objArray10);
        org.apache.commons.math.ConvergenceException convergenceException14 = new org.apache.commons.math.ConvergenceException("");
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException15 = new org.apache.commons.math.FunctionEvaluationException((double) (short) 0, "hi!", objArray10, (java.lang.Throwable) convergenceException14);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException16 = new org.apache.commons.math.MaxIterationsExceededException((int) (byte) 100, "", objArray10);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException17 = new org.apache.commons.math.FunctionEvaluationException(1.0d, "", objArray10);
        java.lang.Object[] objArray27 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException28 = new org.apache.commons.math.ConvergenceException("", objArray27);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException29 = new org.apache.commons.math.MaxIterationsExceededException(0, "hi!", objArray27);
        org.apache.commons.math.ConvergenceException convergenceException31 = new org.apache.commons.math.ConvergenceException("");
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException32 = new org.apache.commons.math.FunctionEvaluationException((double) (short) 0, "hi!", objArray27, (java.lang.Throwable) convergenceException31);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException33 = new org.apache.commons.math.MaxIterationsExceededException((int) (byte) 100, "", objArray27);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException34 = new org.apache.commons.math.FunctionEvaluationException(1.0d, "", objArray27);
        org.apache.commons.math.ConvergenceException convergenceException35 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.MaxIterationsExceededException: ", objArray10, (java.lang.Throwable) functionEvaluationException34);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException37 = new org.apache.commons.math.MaxIterationsExceededException((int) (byte) -1);
        int int38 = maxIterationsExceededException37.getMaxIterations();
        functionEvaluationException34.addSuppressed((java.lang.Throwable) maxIterationsExceededException37);
        java.lang.String str40 = maxIterationsExceededException37.getPattern();
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertNotNull(objArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray27), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray27), "[]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "Maximal number of iterations ({0}) exceeded" + "'", str40, "Maximal number of iterations ({0}) exceeded");
    }

    @Test
    public void test06206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06206");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex1 = complex0.cosh();
        org.apache.commons.math.complex.Complex complex2 = complex0.log();
        org.apache.commons.math.complex.Complex complex3 = complex0.sin();
        org.apache.commons.math.complex.Complex complex4 = complex0.log();
        org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex6 = complex5.sqrt();
        org.apache.commons.math.complex.Complex complex7 = complex0.divide(complex6);
        org.apache.commons.math.complex.Complex complex8 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex9 = complex8.cosh();
        double double10 = complex8.abs();
        org.apache.commons.math.complex.Complex complex11 = complex8.conjugate();
        org.apache.commons.math.complex.Complex complex12 = complex11.conjugate();
        org.apache.commons.math.complex.Complex complex13 = complex7.subtract(complex12);
        org.apache.commons.math.complex.Complex complex14 = complex7.exp();
        org.apache.commons.math.complex.Complex complex15 = complex7.tan();
        org.apache.commons.math.complex.Complex complex16 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex17 = complex16.cosh();
        double double18 = complex16.abs();
        org.apache.commons.math.complex.Complex complex19 = complex16.conjugate();
        org.apache.commons.math.complex.Complex complex20 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex21 = complex20.cosh();
        double double22 = complex20.abs();
        org.apache.commons.math.complex.Complex complex23 = complex20.conjugate();
        org.apache.commons.math.complex.Complex complex24 = complex23.conjugate();
        org.apache.commons.math.complex.Complex complex25 = complex23.tanh();
        org.apache.commons.math.complex.Complex complex26 = complex23.atan();
        org.apache.commons.math.complex.Complex complex27 = complex16.subtract(complex23);
        org.apache.commons.math.complex.Complex complex28 = complex7.subtract(complex27);
        org.apache.commons.math.complex.Complex complex29 = complex28.tan();
        org.apache.commons.math.complex.Complex complex30 = complex29.tanh();
        java.lang.Class<?> wildcardClass31 = complex30.getClass();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + Double.POSITIVE_INFINITY + "'", double10 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + Double.POSITIVE_INFINITY + "'", double18 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + Double.POSITIVE_INFINITY + "'", double22 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(wildcardClass31);
    }

    @Test
    public void test06207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06207");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex1 = complex0.cosh();
        double double2 = complex0.abs();
        org.apache.commons.math.complex.Complex complex3 = complex0.conjugate();
        org.apache.commons.math.complex.Complex complex4 = complex3.conjugate();
        boolean boolean5 = complex3.isInfinite();
        org.apache.commons.math.complex.Complex complex6 = complex3.cos();
        org.apache.commons.math.complex.Complex complex7 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex8 = complex7.cosh();
        double double9 = complex7.abs();
        org.apache.commons.math.complex.Complex complex10 = complex7.conjugate();
        org.apache.commons.math.complex.Complex complex11 = complex10.conjugate();
        boolean boolean12 = complex10.isInfinite();
        org.apache.commons.math.complex.Complex complex13 = complex10.asin();
        boolean boolean14 = complex10.isNaN();
        org.apache.commons.math.complex.Complex complex15 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex16 = complex15.cosh();
        org.apache.commons.math.complex.Complex complex17 = complex10.divide(complex15);
        org.apache.commons.math.complex.Complex complex18 = complex6.divide(complex15);
        org.apache.commons.math.complex.Complex complex19 = complex18.conjugate();
        org.apache.commons.math.complex.Complex complex20 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex21 = complex20.cosh();
        org.apache.commons.math.complex.Complex complex22 = complex20.log();
        org.apache.commons.math.complex.Complex complex23 = complex20.sin();
        org.apache.commons.math.complex.Complex complex24 = complex20.log();
        org.apache.commons.math.complex.Complex complex25 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex26 = complex25.sqrt();
        org.apache.commons.math.complex.Complex complex27 = complex20.divide(complex26);
        org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex29 = complex28.cosh();
        double double30 = complex28.abs();
        org.apache.commons.math.complex.Complex complex31 = complex28.conjugate();
        org.apache.commons.math.complex.Complex complex32 = complex31.conjugate();
        org.apache.commons.math.complex.Complex complex33 = complex27.subtract(complex32);
        org.apache.commons.math.complex.Complex complex34 = complex27.exp();
        org.apache.commons.math.complex.Complex complex35 = complex18.subtract(complex34);
        org.apache.commons.math.complex.Complex complex36 = complex35.sqrt();
        org.apache.commons.math.complex.Complex complex37 = complex35.asin();
        org.apache.commons.math.complex.Complex complex38 = complex37.tanh();
        org.apache.commons.math.complex.Complex complex39 = complex38.sin();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + Double.POSITIVE_INFINITY + "'", double2 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + Double.POSITIVE_INFINITY + "'", double9 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + Double.POSITIVE_INFINITY + "'", double30 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
    }

    @Test
    public void test06208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06208");
        double[] doubleArray2 = new double[] { (byte) 1, 100 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) (short) 100);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver6 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction3);
        double double10 = laguerreSolver6.solve((double) (-1L), 349.0d, (double) (short) 10);
        laguerreSolver6.setMaximalIterationCount((int) '#');
        laguerreSolver6.setMaximalIterationCount((int) ' ');
        laguerreSolver6.setRelativeAccuracy((double) (short) 10);
        laguerreSolver6.setAbsoluteAccuracy((double) (byte) 10);
        double double19 = laguerreSolver6.getRelativeAccuracy();
        laguerreSolver6.resetMaximalIterationCount();
        laguerreSolver6.setMaximalIterationCount(97);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 10001.0d + "'", double5 == 10001.0d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + (-0.01d) + "'", double10 == (-0.01d));
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 10.0d + "'", double19 == 10.0d);
    }

    @Test
    public void test06209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06209");
        double[] doubleArray5 = new double[] { 0L, '#', 100.0f, 0L, (-1.0d) };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray5);
        double double8 = polynomialFunction6.value((double) 0);
        double double10 = polynomialFunction6.value((double) (byte) 0);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction11 = polynomialFunction6.polynomialDerivative();
        double[] doubleArray12 = polynomialFunction6.getCoefficients();
        int int13 = polynomialFunction6.degree();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction14 = polynomialFunction6.polynomialDerivative();
        double double16 = polynomialFunction6.value(34.0d);
        int int17 = polynomialFunction6.degree();
        double double19 = polynomialFunction6.value(0.5403023058681398d);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[0.0, 35.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertNotNull(polynomialFunction11);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[0.0, 35.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 4 + "'", int13 == 4);
        org.junit.Assert.assertNotNull(polynomialFunction14);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + (-1219546.0d) + "'", double16 == (-1219546.0d));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 4 + "'", int17 == 4);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 48.018017748909294d + "'", double19 == 48.018017748909294d);
    }

    @Test
    public void test06210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06210");
        double[] doubleArray2 = new double[] { (byte) 1, 100 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) (short) 100);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver6 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction3);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction7 = laguerreSolver6.getPolynomialFunction();
        laguerreSolver6.setRelativeAccuracy((double) 0);
        double[] doubleArray12 = new double[] { (byte) -1, '#' };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction13 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray12);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction14 = polynomialFunction13.polynomialDerivative();
        double[] doubleArray15 = polynomialFunction13.getCoefficients();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction16 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray15);
        org.apache.commons.math.complex.Complex[] complexArray18 = laguerreSolver6.solveAll(doubleArray15, (double) 4);
        laguerreSolver6.setAbsoluteAccuracy((double) 1);
        double double21 = laguerreSolver6.getRelativeAccuracy();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction22 = laguerreSolver6.getPolynomialFunction();
        // The following exception was thrown during execution in test generation
        try {
            double double26 = laguerreSolver6.solve(10.0d, (-2.1350964975074216E16d), (-1.000000000000031d));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Endpoints do not specify an interval: [10.0,-2.1350964975074216E16]");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 10001.0d + "'", double5 == 10001.0d);
        org.junit.Assert.assertNotNull(polynomialFunction7);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[-1.0, 35.0]");
        org.junit.Assert.assertNotNull(polynomialFunction14);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[-1.0, 35.0]");
        org.junit.Assert.assertNotNull(complexArray18);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d);
        org.junit.Assert.assertNotNull(polynomialFunction22);
    }

    @Test
    public void test06211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06211");
        double[] doubleArray5 = new double[] { 0L, '#', 100.0f, 0L, (-1.0d) };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray5);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction7 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray5);
        double[] doubleArray8 = polynomialFunction7.getCoefficients();
        int int9 = polynomialFunction7.degree();
        double[] doubleArray10 = polynomialFunction7.getCoefficients();
        int int11 = polynomialFunction7.degree();
        double double13 = polynomialFunction7.value((-16099.0d));
        double[] doubleArray14 = polynomialFunction7.getCoefficients();
        double[] doubleArray15 = polynomialFunction7.getCoefficients();
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[0.0, 35.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.0, 35.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 4 + "'", int9 == 4);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[0.0, 35.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 4 + "'", int11 == 4);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + (-6.7173106613978968E16d) + "'", double13 == (-6.7173106613978968E16d));
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[0.0, 35.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[0.0, 35.0, 100.0, 0.0, -1.0]");
    }

    @Test
    public void test06212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06212");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex1 = complex0.cosh();
        double double2 = complex0.abs();
        org.apache.commons.math.complex.Complex complex3 = complex0.conjugate();
        org.apache.commons.math.complex.Complex complex4 = complex3.conjugate();
        boolean boolean5 = complex3.isInfinite();
        org.apache.commons.math.complex.Complex complex6 = complex3.cos();
        org.apache.commons.math.complex.Complex complex7 = complex3.conjugate();
        org.apache.commons.math.complex.Complex complex8 = complex3.log();
        org.apache.commons.math.complex.Complex complex9 = complex3.exp();
        org.apache.commons.math.complex.Complex complex10 = complex9.tan();
        org.apache.commons.math.complex.Complex complex11 = complex9.acos();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + Double.POSITIVE_INFINITY + "'", double2 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
    }

    @Test
    public void test06213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06213");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex1 = complex0.cosh();
        org.apache.commons.math.complex.Complex complex2 = complex0.log();
        org.apache.commons.math.complex.Complex complex3 = complex0.sin();
        org.apache.commons.math.complex.Complex complex4 = complex0.log();
        org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex6 = complex5.sqrt();
        org.apache.commons.math.complex.Complex complex7 = complex0.divide(complex6);
        org.apache.commons.math.complex.Complex complex8 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex9 = complex8.cosh();
        org.apache.commons.math.complex.Complex complex10 = complex9.acos();
        double double11 = complex9.getReal();
        org.apache.commons.math.complex.Complex complex12 = complex9.sqrt();
        org.apache.commons.math.complex.Complex complex13 = complex0.pow(complex9);
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex15 = complex14.cosh();
        org.apache.commons.math.complex.Complex complex16 = complex14.log();
        org.apache.commons.math.complex.Complex complex17 = complex16.cos();
        org.apache.commons.math.complex.Complex complex18 = complex9.multiply(complex16);
        org.apache.commons.math.complex.Complex complex19 = complex16.tanh();
        org.apache.commons.math.complex.Complex complex20 = complex19.asin();
        org.apache.commons.math.complex.Complex complex21 = complex19.acos();
        org.apache.commons.math.complex.Complex complex22 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex23 = complex22.cosh();
        double double24 = complex22.abs();
        org.apache.commons.math.complex.Complex complex25 = complex22.conjugate();
        org.apache.commons.math.complex.Complex complex26 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex27 = complex26.cosh();
        double double28 = complex26.abs();
        org.apache.commons.math.complex.Complex complex29 = complex26.conjugate();
        org.apache.commons.math.complex.Complex complex30 = complex29.conjugate();
        org.apache.commons.math.complex.Complex complex31 = complex29.tanh();
        org.apache.commons.math.complex.Complex complex32 = complex29.atan();
        org.apache.commons.math.complex.Complex complex33 = complex22.subtract(complex29);
        org.apache.commons.math.complex.Complex complex34 = complex33.log();
        org.apache.commons.math.complex.Complex complex35 = complex34.negate();
        org.apache.commons.math.complex.Complex complex36 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex37 = complex36.cosh();
        org.apache.commons.math.complex.Complex complex38 = complex36.log();
        org.apache.commons.math.complex.Complex complex39 = complex38.cos();
        double double40 = complex39.abs();
        org.apache.commons.math.complex.Complex complex41 = complex39.sqrt();
        org.apache.commons.math.complex.Complex complex42 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex43 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex44 = complex43.sqrt();
        org.apache.commons.math.complex.Complex complex45 = complex44.sin();
        org.apache.commons.math.complex.Complex complex46 = complex42.pow(complex44);
        org.apache.commons.math.complex.Complex complex47 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex48 = complex47.cosh();
        org.apache.commons.math.complex.Complex complex49 = complex47.log();
        org.apache.commons.math.complex.Complex complex50 = complex42.divide(complex49);
        org.apache.commons.math.complex.Complex complex51 = complex41.subtract(complex50);
        org.apache.commons.math.complex.Complex complex52 = complex41.conjugate();
        org.apache.commons.math.complex.Complex complex53 = complex41.cos();
        org.apache.commons.math.complex.Complex complex54 = complex53.sqrt();
        org.apache.commons.math.complex.Complex complex55 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex56 = complex55.cosh();
        org.apache.commons.math.complex.Complex complex57 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex58 = complex57.cosh();
        org.apache.commons.math.complex.Complex complex59 = complex57.log();
        org.apache.commons.math.complex.Complex complex60 = complex57.sin();
        org.apache.commons.math.complex.Complex complex61 = complex57.log();
        org.apache.commons.math.complex.Complex complex62 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex63 = complex62.sqrt();
        org.apache.commons.math.complex.Complex complex64 = complex57.divide(complex63);
        org.apache.commons.math.complex.Complex complex65 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex66 = complex65.cosh();
        org.apache.commons.math.complex.Complex complex67 = complex66.acos();
        double double68 = complex66.getReal();
        org.apache.commons.math.complex.Complex complex69 = complex66.sqrt();
        org.apache.commons.math.complex.Complex complex70 = complex57.pow(complex66);
        org.apache.commons.math.complex.Complex complex71 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex72 = complex71.cosh();
        org.apache.commons.math.complex.Complex complex73 = complex71.log();
        org.apache.commons.math.complex.Complex complex74 = complex73.cos();
        org.apache.commons.math.complex.Complex complex75 = complex66.multiply(complex73);
        org.apache.commons.math.complex.Complex complex76 = complex73.tanh();
        org.apache.commons.math.complex.Complex complex77 = complex55.divide(complex73);
        org.apache.commons.math.complex.Complex complex78 = complex54.pow(complex73);
        org.apache.commons.math.complex.Complex complex79 = complex34.pow(complex78);
        org.apache.commons.math.complex.Complex complex80 = complex19.pow(complex34);
        org.apache.commons.math.complex.Complex complex81 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex82 = complex81.cosh();
        double double83 = complex81.abs();
        org.apache.commons.math.complex.Complex complex84 = complex81.conjugate();
        org.apache.commons.math.complex.Complex complex85 = complex84.conjugate();
        boolean boolean86 = complex84.isInfinite();
        org.apache.commons.math.complex.Complex complex87 = complex84.cos();
        org.apache.commons.math.complex.Complex complex88 = complex19.divide(complex84);
        org.apache.commons.math.complex.Complex complex89 = complex84.asin();
        org.apache.commons.math.complex.Complex complex90 = complex89.sin();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + Double.POSITIVE_INFINITY + "'", double24 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + Double.POSITIVE_INFINITY + "'", double28 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertTrue(Double.isNaN(double40));
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertTrue(Double.isNaN(double68));
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertNotNull(complex75);
        org.junit.Assert.assertNotNull(complex76);
        org.junit.Assert.assertNotNull(complex77);
        org.junit.Assert.assertNotNull(complex78);
        org.junit.Assert.assertNotNull(complex79);
        org.junit.Assert.assertNotNull(complex80);
        org.junit.Assert.assertNotNull(complex81);
        org.junit.Assert.assertNotNull(complex82);
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + Double.POSITIVE_INFINITY + "'", double83 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex84);
        org.junit.Assert.assertNotNull(complex85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertNotNull(complex87);
        org.junit.Assert.assertNotNull(complex88);
        org.junit.Assert.assertNotNull(complex89);
        org.junit.Assert.assertNotNull(complex90);
    }

    @Test
    public void test06214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06214");
        java.lang.Object[] objArray9 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException10 = new org.apache.commons.math.ConvergenceException("", objArray9);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException11 = new org.apache.commons.math.FunctionEvaluationException((double) (short) 10, "hi!", objArray9);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException12 = new org.apache.commons.math.MaxIterationsExceededException((int) (byte) 0, "org.apache.commons.math.ConvergenceException: hi!", objArray9);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException13 = new org.apache.commons.math.FunctionEvaluationException(0.0d, "hi!", objArray9);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException14 = new org.apache.commons.math.MaxIterationsExceededException((int) (byte) -1, "org.apache.commons.math.MaxIterationsExceededException: ", objArray9);
        java.lang.Throwable[] throwableArray15 = maxIterationsExceededException14.getSuppressed();
        int int16 = maxIterationsExceededException14.getMaxIterations();
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[]");
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
    }

    @Test
    public void test06215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06215");
        double[] doubleArray2 = new double[] { (byte) 1, 100 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) (short) 100);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver6 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction3);
        double double10 = laguerreSolver6.solve((double) (-1L), 349.0d, (double) (short) 10);
        double double11 = laguerreSolver6.getResult();
        double double12 = laguerreSolver6.getFunctionValueAccuracy();
        laguerreSolver6.resetRelativeAccuracy();
        double double14 = laguerreSolver6.getAbsoluteAccuracy();
        laguerreSolver6.setAbsoluteAccuracy((double) 0L);
        laguerreSolver6.setMaximalIterationCount((int) 'a');
        double double19 = laguerreSolver6.getAbsoluteAccuracy();
        double double22 = laguerreSolver6.solve((-8.7584986E7d), 0.7853981633974483d);
        // The following exception was thrown during execution in test generation
        try {
            double double26 = laguerreSolver6.solve(1.0000000000001d, 349.0d, (-2.55976730539718E65d));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Function values at endpoints do not have different signs.  Endpoints: [1.0000000000001,349.0]  Values: [101.00000000000999,34901.0]");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 10001.0d + "'", double5 == 10001.0d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + (-0.01d) + "'", double10 == (-0.01d));
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + (-0.01d) + "'", double11 == (-0.01d));
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 1.0E-15d + "'", double12 == 1.0E-15d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 1.0E-6d + "'", double14 == 1.0E-6d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + (-0.01d) + "'", double22 == (-0.01d));
    }

    @Test
    public void test06216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06216");
        double[] doubleArray4 = new double[] { (byte) 1, 100 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction5 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray4);
        double double7 = polynomialFunction5.value((double) (short) 100);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver8 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction5);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction9 = laguerreSolver8.getPolynomialFunction();
        laguerreSolver8.setRelativeAccuracy((double) 0);
        double[] doubleArray14 = new double[] { (byte) -1, '#' };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction15 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray14);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction16 = polynomialFunction15.polynomialDerivative();
        double[] doubleArray17 = polynomialFunction15.getCoefficients();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction18 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray17);
        org.apache.commons.math.complex.Complex[] complexArray20 = laguerreSolver8.solveAll(doubleArray17, (double) 4);
        laguerreSolver8.setAbsoluteAccuracy((double) 1);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction23 = laguerreSolver8.getPolynomialFunction();
        int int24 = laguerreSolver8.getMaximalIterationCount();
        laguerreSolver8.setAbsoluteAccuracy(Double.POSITIVE_INFINITY);
        laguerreSolver8.resetMaximalIterationCount();
        double double28 = laguerreSolver8.getResult();
        double[] doubleArray31 = new double[] { (byte) 1, 100 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction32 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray31);
        double double34 = polynomialFunction32.value((double) (short) 100);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver35 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction32);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction36 = laguerreSolver35.getPolynomialFunction();
        laguerreSolver35.setRelativeAccuracy((double) 0);
        double[] doubleArray41 = new double[] { (byte) -1, '#' };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction42 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray41);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction43 = polynomialFunction42.polynomialDerivative();
        double[] doubleArray44 = polynomialFunction42.getCoefficients();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction45 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray44);
        org.apache.commons.math.complex.Complex[] complexArray47 = laguerreSolver35.solveAll(doubleArray44, (double) 4);
        laguerreSolver35.setAbsoluteAccuracy((double) 1);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction50 = laguerreSolver35.getPolynomialFunction();
        int int51 = laguerreSolver35.getMaximalIterationCount();
        laguerreSolver35.setAbsoluteAccuracy(Double.POSITIVE_INFINITY);
        laguerreSolver35.resetMaximalIterationCount();
        double double55 = laguerreSolver35.getAbsoluteAccuracy();
        double[] doubleArray58 = new double[] { (byte) 1, 100 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction59 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray58);
        double double61 = polynomialFunction59.value((double) (short) 100);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver62 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction59);
        double[] doubleArray63 = polynomialFunction59.getCoefficients();
        org.apache.commons.math.complex.Complex[] complexArray65 = laguerreSolver35.solveAll(doubleArray63, 350.0d);
        org.apache.commons.math.complex.Complex[] complexArray67 = laguerreSolver8.solveAll(doubleArray63, 0.0d);
        java.lang.Object[] objArray72 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException73 = new org.apache.commons.math.ConvergenceException("", objArray72);
        java.lang.Object[] objArray78 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException79 = new org.apache.commons.math.ConvergenceException("", objArray78);
        java.lang.Object[] objArray81 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException82 = new org.apache.commons.math.ConvergenceException("", objArray81);
        org.apache.commons.math.ConvergenceException convergenceException83 = new org.apache.commons.math.ConvergenceException("", objArray78, (java.lang.Throwable) convergenceException82);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException85 = new org.apache.commons.math.FunctionEvaluationException((double) 100);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException86 = new org.apache.commons.math.FunctionEvaluationException(100.0d, "org.apache.commons.math.ConvergenceException: hi!", objArray78, (java.lang.Throwable) functionEvaluationException85);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException87 = new org.apache.commons.math.FunctionEvaluationException((double) '#', "", objArray72, (java.lang.Throwable) functionEvaluationException86);
        java.lang.String str88 = functionEvaluationException87.getPattern();
        java.lang.String str89 = functionEvaluationException87.getPattern();
        double double90 = functionEvaluationException87.getArgument();
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException91 = new org.apache.commons.math.FunctionEvaluationException((double) 100.0f, (java.lang.Throwable) functionEvaluationException87);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException92 = new org.apache.commons.math.FunctionEvaluationException((-1.0410151717904442E16d), "org.apache.commons.math.MaxIterationsExceededException: org.apache.commons.math.MaxIterationsExceededException: org.apache.commons.math.MaxIterationsExceededException: ", (java.lang.Object[]) complexArray67, (java.lang.Throwable) functionEvaluationException87);
        double double93 = functionEvaluationException92.getArgument();
        java.lang.Class<?> wildcardClass94 = functionEvaluationException92.getClass();
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 10001.0d + "'", double7 == 10001.0d);
        org.junit.Assert.assertNotNull(polynomialFunction9);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[-1.0, 35.0]");
        org.junit.Assert.assertNotNull(polynomialFunction16);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[-1.0, 35.0]");
        org.junit.Assert.assertNotNull(complexArray20);
        org.junit.Assert.assertNotNull(polynomialFunction23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 100 + "'", int24 == 100);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 10001.0d + "'", double34 == 10001.0d);
        org.junit.Assert.assertNotNull(polynomialFunction36);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[-1.0, 35.0]");
        org.junit.Assert.assertNotNull(polynomialFunction43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[-1.0, 35.0]");
        org.junit.Assert.assertNotNull(complexArray47);
        org.junit.Assert.assertNotNull(polynomialFunction50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 100 + "'", int51 == 100);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + Double.POSITIVE_INFINITY + "'", double55 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 10001.0d + "'", double61 == 10001.0d);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(complexArray65);
        org.junit.Assert.assertNotNull(complexArray67);
        org.junit.Assert.assertNotNull(objArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray72), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray72), "[]");
        org.junit.Assert.assertNotNull(objArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray78), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray78), "[]");
        org.junit.Assert.assertNotNull(objArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray81), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray81), "[]");
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "" + "'", str88, "");
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "" + "'", str89, "");
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + 35.0d + "'", double90 == 35.0d);
        org.junit.Assert.assertTrue("'" + double93 + "' != '" + (-1.0410151717904442E16d) + "'", double93 == (-1.0410151717904442E16d));
        org.junit.Assert.assertNotNull(wildcardClass94);
    }

    @Test
    public void test06217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06217");
        double[] doubleArray5 = new double[] { 0L, '#', 100.0f, 0L, (-1.0d) };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray5);
        int int7 = polynomialFunction6.degree();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction8 = polynomialFunction6.polynomialDerivative();
        double double10 = polynomialFunction6.value((double) 100.0f);
        double[] doubleArray11 = polynomialFunction6.getCoefficients();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver12 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        double double14 = polynomialFunction6.value((double) 2);
        int int15 = polynomialFunction6.degree();
        double double17 = polynomialFunction6.value((-9.820178719278598d));
        double double19 = polynomialFunction6.value(0.0d);
        double double21 = polynomialFunction6.value((-1.0410151717904442E16d));
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[0.0, 35.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 4 + "'", int7 == 4);
        org.junit.Assert.assertNotNull(polynomialFunction8);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + (-9.89965E7d) + "'", double10 == (-9.89965E7d));
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.0, 35.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 454.0d + "'", double14 == 454.0d);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 4 + "'", int15 == 4);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 1.2559781975128798E-12d + "'", double17 == 1.2559781975128798E-12d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + (-1.1744329731683376E64d) + "'", double21 == (-1.1744329731683376E64d));
    }

    @Test
    public void test06218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06218");
        double[] doubleArray5 = new double[] { 0L, '#', 100.0f, 0L, (-1.0d) };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray5);
        double double8 = polynomialFunction6.value((double) 0);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver9 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        double[] doubleArray12 = new double[] { (byte) 1, 100 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction13 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray12);
        double double15 = polynomialFunction13.value((double) (short) 100);
        double[] doubleArray16 = polynomialFunction13.getCoefficients();
        org.apache.commons.math.complex.Complex[] complexArray18 = laguerreSolver9.solveAll(doubleArray16, (double) (short) 10);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction19 = laguerreSolver9.getPolynomialFunction();
        laguerreSolver9.setMaximalIterationCount(0);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction22 = laguerreSolver9.getPolynomialFunction();
        laguerreSolver9.setMaximalIterationCount((int) 'a');
        int int25 = laguerreSolver9.getIterationCount();
        int int26 = laguerreSolver9.getMaximalIterationCount();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction27 = laguerreSolver9.getPolynomialFunction();
        double[] doubleArray30 = new double[] { (byte) 1, 100 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction31 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray30);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver32 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction31);
        double[] doubleArray38 = new double[] { 0L, '#', 100.0f, 0L, (-1.0d) };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction39 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray38);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction40 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray38);
        org.apache.commons.math.complex.Complex[] complexArray42 = laguerreSolver32.solveAll(doubleArray38, 1.0E-6d);
        org.apache.commons.math.complex.Complex complex45 = new org.apache.commons.math.complex.Complex((double) 10L, (double) 'a');
        org.apache.commons.math.complex.Complex complex46 = complex45.cosh();
        org.apache.commons.math.complex.Complex complex47 = laguerreSolver9.solve(complexArray42, complex45);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[0.0, 35.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 10001.0d + "'", double15 == 10001.0d);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(complexArray18);
        org.junit.Assert.assertNotNull(polynomialFunction19);
        org.junit.Assert.assertNotNull(polynomialFunction22);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 3 + "'", int25 == 3);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 97 + "'", int26 == 97);
        org.junit.Assert.assertNotNull(polynomialFunction27);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[0.0, 35.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(complexArray42);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
    }

    @Test
    public void test06219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06219");
        double[] doubleArray2 = new double[] { (byte) 1, 100 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) (short) 100);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver6 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction3);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction7 = laguerreSolver6.getPolynomialFunction();
        double double8 = laguerreSolver6.getAbsoluteAccuracy();
        double[] doubleArray14 = new double[] { 0L, '#', 100.0f, 0L, (-1.0d) };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction15 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray14);
        org.apache.commons.math.complex.Complex[] complexArray17 = laguerreSolver6.solveAll(doubleArray14, 10001.0d);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction18 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray14);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction19 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray14);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver20 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction19);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction21 = polynomialFunction19.polynomialDerivative();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction22 = polynomialFunction19.polynomialDerivative();
        int int23 = polynomialFunction22.degree();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 10001.0d + "'", double5 == 10001.0d);
        org.junit.Assert.assertNotNull(polynomialFunction7);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 1.0E-6d + "'", double8 == 1.0E-6d);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[0.0, 35.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(complexArray17);
        org.junit.Assert.assertNotNull(polynomialFunction21);
        org.junit.Assert.assertNotNull(polynomialFunction22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 3 + "'", int23 == 3);
    }

    @Test
    public void test06220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06220");
        java.lang.Object[] objArray11 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException12 = new org.apache.commons.math.ConvergenceException("", objArray11);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException13 = new org.apache.commons.math.FunctionEvaluationException((double) (short) 10, "hi!", objArray11);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException14 = new org.apache.commons.math.FunctionEvaluationException(0.0d, "org.apache.commons.math.FunctionEvaluationException: ", objArray11);
        java.lang.Object[] objArray16 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException17 = new org.apache.commons.math.ConvergenceException("", objArray16);
        java.lang.Object[] objArray22 = new java.lang.Object[] { 0.0f, (short) 1 };
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException23 = new org.apache.commons.math.MaxIterationsExceededException(100, "", objArray22);
        convergenceException17.addSuppressed((java.lang.Throwable) maxIterationsExceededException23);
        org.apache.commons.math.ConvergenceException convergenceException25 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.FunctionEvaluationException: ", objArray11, (java.lang.Throwable) maxIterationsExceededException23);
        org.apache.commons.math.ConvergenceException convergenceException26 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.MaxIterationsExceededException: org.apache.commons.math.FunctionEvaluationException: ", objArray11);
        org.apache.commons.math.ConvergenceException convergenceException27 = new org.apache.commons.math.ConvergenceException("", objArray11);
        java.lang.Object[] objArray36 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException37 = new org.apache.commons.math.ConvergenceException("", objArray36);
        java.lang.Object[] objArray39 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException40 = new org.apache.commons.math.ConvergenceException("", objArray39);
        org.apache.commons.math.ConvergenceException convergenceException41 = new org.apache.commons.math.ConvergenceException("", objArray36, (java.lang.Throwable) convergenceException40);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException43 = new org.apache.commons.math.FunctionEvaluationException((double) 100);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException44 = new org.apache.commons.math.FunctionEvaluationException(100.0d, "org.apache.commons.math.ConvergenceException: hi!", objArray36, (java.lang.Throwable) functionEvaluationException43);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException45 = new org.apache.commons.math.MaxIterationsExceededException((int) (short) 100, "", objArray36);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException46 = new org.apache.commons.math.FunctionEvaluationException((double) 1L, (java.lang.Throwable) maxIterationsExceededException45);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException47 = new org.apache.commons.math.FunctionEvaluationException(0.0d, (java.lang.Throwable) maxIterationsExceededException45);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException48 = new org.apache.commons.math.FunctionEvaluationException((-99999.0d), "org.apache.commons.math.MaxIterationsExceededException: ", objArray11, (java.lang.Throwable) functionEvaluationException47);
        java.lang.Object[] objArray59 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException60 = new org.apache.commons.math.ConvergenceException("", objArray59);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException61 = new org.apache.commons.math.MaxIterationsExceededException(0, "hi!", objArray59);
        org.apache.commons.math.ConvergenceException convergenceException63 = new org.apache.commons.math.ConvergenceException("");
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException64 = new org.apache.commons.math.FunctionEvaluationException((double) (short) 0, "hi!", objArray59, (java.lang.Throwable) convergenceException63);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException65 = new org.apache.commons.math.MaxIterationsExceededException((int) (byte) 100, "", objArray59);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException66 = new org.apache.commons.math.FunctionEvaluationException(1.0d, "", objArray59);
        java.lang.Object[] objArray76 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException77 = new org.apache.commons.math.ConvergenceException("", objArray76);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException78 = new org.apache.commons.math.MaxIterationsExceededException(0, "hi!", objArray76);
        org.apache.commons.math.ConvergenceException convergenceException80 = new org.apache.commons.math.ConvergenceException("");
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException81 = new org.apache.commons.math.FunctionEvaluationException((double) (short) 0, "hi!", objArray76, (java.lang.Throwable) convergenceException80);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException82 = new org.apache.commons.math.MaxIterationsExceededException((int) (byte) 100, "", objArray76);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException83 = new org.apache.commons.math.FunctionEvaluationException(1.0d, "", objArray76);
        org.apache.commons.math.ConvergenceException convergenceException84 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.MaxIterationsExceededException: ", objArray59, (java.lang.Throwable) functionEvaluationException83);
        java.lang.Throwable[] throwableArray85 = functionEvaluationException83.getSuppressed();
        java.lang.Object[] objArray89 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException90 = new org.apache.commons.math.ConvergenceException("", objArray89);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException91 = new org.apache.commons.math.FunctionEvaluationException((double) (short) 10, "hi!", objArray89);
        double double92 = functionEvaluationException91.getArgument();
        functionEvaluationException83.addSuppressed((java.lang.Throwable) functionEvaluationException91);
        org.apache.commons.math.ConvergenceException convergenceException94 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) functionEvaluationException91);
        functionEvaluationException48.addSuppressed((java.lang.Throwable) functionEvaluationException91);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException96 = new org.apache.commons.math.FunctionEvaluationException((-1.0410151712726766E16d), (java.lang.Throwable) functionEvaluationException91);
        java.lang.String str97 = functionEvaluationException91.getPattern();
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[]");
        org.junit.Assert.assertNotNull(objArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray16), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray16), "[]");
        org.junit.Assert.assertNotNull(objArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray22), "[0.0, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray22), "[0.0, 1]");
        org.junit.Assert.assertNotNull(objArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray36), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray36), "[]");
        org.junit.Assert.assertNotNull(objArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray39), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray39), "[]");
        org.junit.Assert.assertNotNull(objArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray59), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray59), "[]");
        org.junit.Assert.assertNotNull(objArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray76), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray76), "[]");
        org.junit.Assert.assertNotNull(throwableArray85);
        org.junit.Assert.assertNotNull(objArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray89), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray89), "[]");
        org.junit.Assert.assertTrue("'" + double92 + "' != '" + 10.0d + "'", double92 == 10.0d);
        org.junit.Assert.assertEquals("'" + str97 + "' != '" + "hi!" + "'", str97, "hi!");
    }

    @Test
    public void test06221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06221");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex2 = complex1.sqrt();
        org.apache.commons.math.complex.Complex complex3 = complex2.sin();
        org.apache.commons.math.complex.Complex complex4 = complex0.pow(complex2);
        org.apache.commons.math.complex.Complex complex5 = complex4.asin();
        org.apache.commons.math.complex.Complex complex6 = complex5.atan();
        boolean boolean7 = complex6.isInfinite();
        org.apache.commons.math.complex.Complex complex8 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex9 = complex6.subtract(complex8);
        org.apache.commons.math.complex.Complex complex10 = complex6.conjugate();
        org.apache.commons.math.complex.Complex complex11 = complex10.sqrt();
        org.apache.commons.math.complex.Complex complex12 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex13 = complex12.cosh();
        double double14 = complex12.abs();
        org.apache.commons.math.complex.Complex complex15 = complex12.conjugate();
        org.apache.commons.math.complex.Complex complex16 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex17 = complex16.cosh();
        double double18 = complex16.abs();
        org.apache.commons.math.complex.Complex complex19 = complex16.conjugate();
        org.apache.commons.math.complex.Complex complex20 = complex19.conjugate();
        org.apache.commons.math.complex.Complex complex21 = complex19.tanh();
        org.apache.commons.math.complex.Complex complex22 = complex19.atan();
        org.apache.commons.math.complex.Complex complex23 = complex12.subtract(complex19);
        org.apache.commons.math.complex.Complex complex24 = complex12.tanh();
        org.apache.commons.math.complex.Complex complex25 = complex11.subtract(complex24);
        org.apache.commons.math.complex.Complex complex26 = complex25.tanh();
        org.apache.commons.math.complex.Complex complex27 = complex26.asin();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + Double.POSITIVE_INFINITY + "'", double14 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + Double.POSITIVE_INFINITY + "'", double18 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
    }

    @Test
    public void test06222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06222");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex2 = complex1.sqrt();
        org.apache.commons.math.complex.Complex complex3 = complex2.sin();
        org.apache.commons.math.complex.Complex complex4 = complex0.pow(complex2);
        org.apache.commons.math.complex.Complex complex5 = complex4.asin();
        org.apache.commons.math.complex.Complex complex6 = complex5.atan();
        boolean boolean7 = complex6.isInfinite();
        double double8 = complex6.getImaginary();
        org.apache.commons.math.complex.Complex complex9 = complex6.log();
        double double10 = complex6.abs();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
    }

    @Test
    public void test06223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06223");
        java.lang.Object[] objArray6 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException7 = new org.apache.commons.math.ConvergenceException("", objArray6);
        java.lang.Object[] objArray9 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException10 = new org.apache.commons.math.ConvergenceException("", objArray9);
        org.apache.commons.math.ConvergenceException convergenceException11 = new org.apache.commons.math.ConvergenceException("", objArray6, (java.lang.Throwable) convergenceException10);
        java.lang.Throwable[] throwableArray12 = convergenceException11.getSuppressed();
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException13 = new org.apache.commons.math.FunctionEvaluationException((-99.0d), "Evaluation failed for argument = {0}", (java.lang.Object[]) throwableArray12);
        java.lang.Object[] objArray25 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException26 = new org.apache.commons.math.ConvergenceException("", objArray25);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException27 = new org.apache.commons.math.FunctionEvaluationException((double) (short) 10, "hi!", objArray25);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException28 = new org.apache.commons.math.FunctionEvaluationException(0.0d, "org.apache.commons.math.FunctionEvaluationException: ", objArray25);
        java.lang.Object[] objArray30 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException31 = new org.apache.commons.math.ConvergenceException("", objArray30);
        java.lang.Object[] objArray36 = new java.lang.Object[] { 0.0f, (short) 1 };
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException37 = new org.apache.commons.math.MaxIterationsExceededException(100, "", objArray36);
        convergenceException31.addSuppressed((java.lang.Throwable) maxIterationsExceededException37);
        org.apache.commons.math.ConvergenceException convergenceException39 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.FunctionEvaluationException: ", objArray25, (java.lang.Throwable) maxIterationsExceededException37);
        org.apache.commons.math.ConvergenceException convergenceException40 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.MaxIterationsExceededException: org.apache.commons.math.FunctionEvaluationException: ", objArray25);
        org.apache.commons.math.ConvergenceException convergenceException41 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: hi!", objArray25);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException42 = new org.apache.commons.math.FunctionEvaluationException(10001.0d, "Maximal number of iterations ({0}) exceeded", (java.lang.Throwable) convergenceException41);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException43 = new org.apache.commons.math.FunctionEvaluationException((double) (short) 0, (java.lang.Throwable) functionEvaluationException42);
        functionEvaluationException13.addSuppressed((java.lang.Throwable) functionEvaluationException43);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException45 = new org.apache.commons.math.FunctionEvaluationException(653171.86d, "org.apache.commons.math.MaxIterationsExceededException: Maximal number of iterations (52) exceeded", (java.lang.Throwable) functionEvaluationException13);
        java.lang.Object[] objArray46 = functionEvaluationException45.getArguments();
        double double47 = functionEvaluationException45.getArgument();
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[]");
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[]");
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[]");
        org.junit.Assert.assertNotNull(objArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray30), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray30), "[]");
        org.junit.Assert.assertNotNull(objArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray36), "[0.0, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray36), "[0.0, 1]");
        org.junit.Assert.assertNotNull(objArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray46), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray46), "[]");
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 653171.86d + "'", double47 == 653171.86d);
    }

    @Test
    public void test06224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06224");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((-9.730091830127586d), (-1.0920036681097296E52d));
    }

    @Test
    public void test06225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06225");
        java.lang.Object[] objArray7 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException8 = new org.apache.commons.math.ConvergenceException("", objArray7);
        java.lang.Object[] objArray13 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException14 = new org.apache.commons.math.ConvergenceException("", objArray13);
        java.lang.Object[] objArray16 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException17 = new org.apache.commons.math.ConvergenceException("", objArray16);
        org.apache.commons.math.ConvergenceException convergenceException18 = new org.apache.commons.math.ConvergenceException("", objArray13, (java.lang.Throwable) convergenceException17);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException20 = new org.apache.commons.math.FunctionEvaluationException((double) 100);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException21 = new org.apache.commons.math.FunctionEvaluationException(100.0d, "org.apache.commons.math.ConvergenceException: hi!", objArray13, (java.lang.Throwable) functionEvaluationException20);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException22 = new org.apache.commons.math.FunctionEvaluationException((double) '#', "", objArray7, (java.lang.Throwable) functionEvaluationException21);
        java.lang.String str23 = functionEvaluationException22.getPattern();
        double double24 = functionEvaluationException22.getArgument();
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException25 = new org.apache.commons.math.FunctionEvaluationException((double) (byte) 0, (java.lang.Throwable) functionEvaluationException22);
        java.lang.Object[] objArray28 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException29 = new org.apache.commons.math.ConvergenceException("", objArray28);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException30 = new org.apache.commons.math.FunctionEvaluationException(10.0d, (java.lang.Throwable) convergenceException29);
        functionEvaluationException25.addSuppressed((java.lang.Throwable) functionEvaluationException30);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException32 = new org.apache.commons.math.FunctionEvaluationException((-99.0d), "org.apache.commons.math.FunctionEvaluationException: org.apache.commons.math.ConvergenceException: Convergence failed", (java.lang.Throwable) functionEvaluationException25);
        java.lang.Object[] objArray33 = functionEvaluationException25.getArguments();
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException36 = new org.apache.commons.math.FunctionEvaluationException((-99999.0d), "org.apache.commons.math.MaxIterationsExceededException: org.apache.commons.math.FunctionEvaluationException: ");
        functionEvaluationException25.addSuppressed((java.lang.Throwable) functionEvaluationException36);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException38 = new org.apache.commons.math.FunctionEvaluationException((double) (byte) 10, (java.lang.Throwable) functionEvaluationException36);
        java.lang.Object[] objArray49 = new java.lang.Object[] { 0.0f, (short) 1 };
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException50 = new org.apache.commons.math.MaxIterationsExceededException(100, "", objArray49);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException51 = new org.apache.commons.math.MaxIterationsExceededException((int) ' ', "hi!", objArray49);
        java.lang.Object[] objArray54 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException55 = new org.apache.commons.math.ConvergenceException("", objArray54);
        java.lang.Object[] objArray57 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException58 = new org.apache.commons.math.ConvergenceException("", objArray57);
        org.apache.commons.math.ConvergenceException convergenceException59 = new org.apache.commons.math.ConvergenceException("", objArray54, (java.lang.Throwable) convergenceException58);
        org.apache.commons.math.ConvergenceException convergenceException60 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.FunctionEvaluationException: ", objArray49, (java.lang.Throwable) convergenceException58);
        org.apache.commons.math.ConvergenceException convergenceException63 = new org.apache.commons.math.ConvergenceException("");
        java.lang.Object[] objArray64 = convergenceException63.getArguments();
        java.lang.Object[] objArray72 = new java.lang.Object[] { 0.0f, (short) 1 };
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException73 = new org.apache.commons.math.MaxIterationsExceededException(100, "", objArray72);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException74 = new org.apache.commons.math.MaxIterationsExceededException((int) ' ', "hi!", objArray72);
        java.lang.Object[] objArray77 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException78 = new org.apache.commons.math.ConvergenceException("", objArray77);
        java.lang.Object[] objArray80 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException81 = new org.apache.commons.math.ConvergenceException("", objArray80);
        org.apache.commons.math.ConvergenceException convergenceException82 = new org.apache.commons.math.ConvergenceException("", objArray77, (java.lang.Throwable) convergenceException81);
        org.apache.commons.math.ConvergenceException convergenceException83 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.FunctionEvaluationException: ", objArray72, (java.lang.Throwable) convergenceException81);
        org.apache.commons.math.ConvergenceException convergenceException84 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: Convergence failed", objArray64, (java.lang.Throwable) convergenceException83);
        org.apache.commons.math.ConvergenceException convergenceException85 = new org.apache.commons.math.ConvergenceException("hi!", objArray49, (java.lang.Throwable) convergenceException83);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException86 = new org.apache.commons.math.FunctionEvaluationException(Double.NaN, "org.apache.commons.math.ConvergenceException: hi!", (java.lang.Throwable) convergenceException85);
        functionEvaluationException38.addSuppressed((java.lang.Throwable) functionEvaluationException86);
        double double88 = functionEvaluationException86.getArgument();
        org.junit.Assert.assertNotNull(objArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray7), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray7), "[]");
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[]");
        org.junit.Assert.assertNotNull(objArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray16), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray16), "[]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 35.0d + "'", double24 == 35.0d);
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[]");
        org.junit.Assert.assertNotNull(objArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray33), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray33), "[]");
        org.junit.Assert.assertNotNull(objArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray49), "[0.0, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray49), "[0.0, 1]");
        org.junit.Assert.assertNotNull(objArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray54), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray54), "[]");
        org.junit.Assert.assertNotNull(objArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray57), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray57), "[]");
        org.junit.Assert.assertNotNull(objArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray64), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray64), "[]");
        org.junit.Assert.assertNotNull(objArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray72), "[0.0, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray72), "[0.0, 1]");
        org.junit.Assert.assertNotNull(objArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray77), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray77), "[]");
        org.junit.Assert.assertNotNull(objArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray80), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray80), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double88));
    }

    @Test
    public void test06226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06226");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex1 = complex0.cosh();
        double double2 = complex0.abs();
        org.apache.commons.math.complex.Complex complex3 = complex0.conjugate();
        org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex5 = complex4.cosh();
        double double6 = complex4.abs();
        org.apache.commons.math.complex.Complex complex7 = complex4.conjugate();
        org.apache.commons.math.complex.Complex complex8 = complex7.conjugate();
        org.apache.commons.math.complex.Complex complex9 = complex7.tanh();
        org.apache.commons.math.complex.Complex complex10 = complex7.atan();
        org.apache.commons.math.complex.Complex complex11 = complex0.subtract(complex7);
        org.apache.commons.math.complex.Complex complex12 = complex11.log();
        org.apache.commons.math.complex.Complex complex13 = complex12.negate();
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex15 = complex14.cosh();
        org.apache.commons.math.complex.Complex complex16 = complex14.log();
        org.apache.commons.math.complex.Complex complex17 = complex16.cos();
        double double18 = complex17.abs();
        org.apache.commons.math.complex.Complex complex19 = complex17.sqrt();
        org.apache.commons.math.complex.Complex complex20 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex21 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex22 = complex21.sqrt();
        org.apache.commons.math.complex.Complex complex23 = complex22.sin();
        org.apache.commons.math.complex.Complex complex24 = complex20.pow(complex22);
        org.apache.commons.math.complex.Complex complex25 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex26 = complex25.cosh();
        org.apache.commons.math.complex.Complex complex27 = complex25.log();
        org.apache.commons.math.complex.Complex complex28 = complex20.divide(complex27);
        org.apache.commons.math.complex.Complex complex29 = complex19.subtract(complex28);
        org.apache.commons.math.complex.Complex complex30 = complex19.conjugate();
        org.apache.commons.math.complex.Complex complex31 = complex19.cos();
        org.apache.commons.math.complex.Complex complex32 = complex31.sqrt();
        org.apache.commons.math.complex.Complex complex33 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex34 = complex33.cosh();
        org.apache.commons.math.complex.Complex complex35 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex36 = complex35.cosh();
        org.apache.commons.math.complex.Complex complex37 = complex35.log();
        org.apache.commons.math.complex.Complex complex38 = complex35.sin();
        org.apache.commons.math.complex.Complex complex39 = complex35.log();
        org.apache.commons.math.complex.Complex complex40 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex41 = complex40.sqrt();
        org.apache.commons.math.complex.Complex complex42 = complex35.divide(complex41);
        org.apache.commons.math.complex.Complex complex43 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex44 = complex43.cosh();
        org.apache.commons.math.complex.Complex complex45 = complex44.acos();
        double double46 = complex44.getReal();
        org.apache.commons.math.complex.Complex complex47 = complex44.sqrt();
        org.apache.commons.math.complex.Complex complex48 = complex35.pow(complex44);
        org.apache.commons.math.complex.Complex complex49 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex50 = complex49.cosh();
        org.apache.commons.math.complex.Complex complex51 = complex49.log();
        org.apache.commons.math.complex.Complex complex52 = complex51.cos();
        org.apache.commons.math.complex.Complex complex53 = complex44.multiply(complex51);
        org.apache.commons.math.complex.Complex complex54 = complex51.tanh();
        org.apache.commons.math.complex.Complex complex55 = complex33.divide(complex51);
        org.apache.commons.math.complex.Complex complex56 = complex32.pow(complex51);
        org.apache.commons.math.complex.Complex complex57 = complex12.pow(complex56);
        org.apache.commons.math.complex.Complex complex58 = complex57.tanh();
        org.apache.commons.math.complex.Complex complex59 = complex58.log();
        org.apache.commons.math.complex.Complex complex60 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex61 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex62 = complex61.sqrt();
        org.apache.commons.math.complex.Complex complex63 = complex62.sin();
        org.apache.commons.math.complex.Complex complex64 = complex60.pow(complex62);
        double double65 = complex64.getImaginary();
        org.apache.commons.math.complex.Complex complex66 = complex64.acos();
        org.apache.commons.math.complex.Complex complex67 = complex59.subtract(complex64);
        org.apache.commons.math.complex.Complex complex68 = complex67.exp();
        org.apache.commons.math.complex.Complex complex71 = new org.apache.commons.math.complex.Complex((double) '#', 101.0d);
        org.apache.commons.math.complex.Complex complex72 = complex67.subtract(complex71);
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + Double.POSITIVE_INFINITY + "'", double2 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + Double.POSITIVE_INFINITY + "'", double6 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertTrue(Double.isNaN(double46));
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertTrue(Double.isNaN(double65));
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertNotNull(complex72);
    }

    @Test
    public void test06227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06227");
        double[] doubleArray4 = new double[] { (byte) 1, 100 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction5 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray4);
        double double7 = polynomialFunction5.value((double) (short) 100);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver8 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction5);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction9 = laguerreSolver8.getPolynomialFunction();
        double double10 = laguerreSolver8.getRelativeAccuracy();
        laguerreSolver8.resetRelativeAccuracy();
        double double12 = laguerreSolver8.getAbsoluteAccuracy();
        laguerreSolver8.resetMaximalIterationCount();
        double double16 = laguerreSolver8.solve((-0.01d), (double) (byte) -1);
        double[] doubleArray19 = new double[] { (byte) 1, 100 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction20 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray19);
        double double22 = polynomialFunction20.value((double) (short) 100);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver23 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction20);
        double[] doubleArray24 = polynomialFunction20.getCoefficients();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction25 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray24);
        double[] doubleArray26 = polynomialFunction25.getCoefficients();
        org.apache.commons.math.complex.Complex[] complexArray28 = laguerreSolver8.solveAll(doubleArray26, (-1.0303676599E10d));
        double double29 = laguerreSolver8.getResult();
        double[] doubleArray32 = new double[] { (byte) -1, '#' };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction33 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray32);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction34 = polynomialFunction33.polynomialDerivative();
        double[] doubleArray35 = polynomialFunction33.getCoefficients();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction36 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray35);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction37 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray35);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction38 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray35);
        org.apache.commons.math.complex.Complex[] complexArray40 = laguerreSolver8.solveAll(doubleArray35, 1.2250000000001261E-12d);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException41 = new org.apache.commons.math.FunctionEvaluationException(79.53981633974483d, "org.apache.commons.math.MaxIterationsExceededException: org.apache.commons.math.MaxIterationsExceededException: ", (java.lang.Object[]) complexArray40);
        java.lang.String str42 = functionEvaluationException41.getPattern();
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 10001.0d + "'", double7 == 10001.0d);
        org.junit.Assert.assertNotNull(polynomialFunction9);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0E-14d + "'", double10 == 1.0E-14d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 1.0E-6d + "'", double12 == 1.0E-6d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + (-0.01d) + "'", double16 == (-0.01d));
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 10001.0d + "'", double22 == 10001.0d);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(complexArray28);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.0d + "'", double29 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[-1.0, 35.0]");
        org.junit.Assert.assertNotNull(polynomialFunction34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[-1.0, 35.0]");
        org.junit.Assert.assertNotNull(complexArray40);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "org.apache.commons.math.MaxIterationsExceededException: org.apache.commons.math.MaxIterationsExceededException: " + "'", str42, "org.apache.commons.math.MaxIterationsExceededException: org.apache.commons.math.MaxIterationsExceededException: ");
    }

    @Test
    public void test06228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06228");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex1 = complex0.exp();
        org.apache.commons.math.complex.Complex complex2 = complex1.acos();
        org.apache.commons.math.complex.Complex complex3 = complex2.tan();
        org.apache.commons.math.complex.Complex complex4 = complex2.cosh();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
    }

    @Test
    public void test06229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06229");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex1 = complex0.cosh();
        org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex3 = complex2.cosh();
        org.apache.commons.math.complex.Complex complex4 = complex2.log();
        org.apache.commons.math.complex.Complex complex5 = complex2.sin();
        org.apache.commons.math.complex.Complex complex6 = complex2.log();
        org.apache.commons.math.complex.Complex complex7 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex8 = complex7.sqrt();
        org.apache.commons.math.complex.Complex complex9 = complex2.divide(complex8);
        org.apache.commons.math.complex.Complex complex10 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex11 = complex10.cosh();
        org.apache.commons.math.complex.Complex complex12 = complex11.acos();
        double double13 = complex11.getReal();
        org.apache.commons.math.complex.Complex complex14 = complex11.sqrt();
        org.apache.commons.math.complex.Complex complex15 = complex2.pow(complex11);
        org.apache.commons.math.complex.Complex complex16 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex17 = complex16.cosh();
        org.apache.commons.math.complex.Complex complex18 = complex16.log();
        org.apache.commons.math.complex.Complex complex19 = complex18.cos();
        org.apache.commons.math.complex.Complex complex20 = complex11.multiply(complex18);
        org.apache.commons.math.complex.Complex complex21 = complex18.tanh();
        org.apache.commons.math.complex.Complex complex22 = complex0.divide(complex18);
        org.apache.commons.math.complex.Complex complex23 = complex18.atan();
        org.apache.commons.math.complex.Complex complex24 = complex23.conjugate();
        org.apache.commons.math.complex.Complex complex25 = complex23.cos();
        org.apache.commons.math.complex.Complex complex28 = new org.apache.commons.math.complex.Complex((-1.0019968919675491E80d), 100.0d);
        org.apache.commons.math.complex.Complex complex29 = complex28.exp();
        org.apache.commons.math.complex.Complex complex30 = complex25.divide(complex29);
        org.apache.commons.math.complex.Complex complex31 = complex25.tan();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
    }

    @Test
    public void test06230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06230");
        double[] doubleArray2 = new double[] { (byte) 1, 100 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) (short) 100);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver6 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction3);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction7 = laguerreSolver6.getPolynomialFunction();
        double double8 = laguerreSolver6.getRelativeAccuracy();
        laguerreSolver6.resetRelativeAccuracy();
        laguerreSolver6.resetMaximalIterationCount();
        double[] doubleArray13 = new double[] { (byte) 1, 100 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction14 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray13);
        double double16 = polynomialFunction14.value((double) (short) 100);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver17 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction14);
        double[] doubleArray18 = polynomialFunction14.getCoefficients();
        int int19 = polynomialFunction14.degree();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction20 = polynomialFunction14.polynomialDerivative();
        double double22 = polynomialFunction14.value(134.02310093999603d);
        double[] doubleArray23 = polynomialFunction14.getCoefficients();
        org.apache.commons.math.complex.Complex[] complexArray25 = laguerreSolver6.solveAll(doubleArray23, (-2.243082808E9d));
        // The following exception was thrown during execution in test generation
        try {
            double double28 = laguerreSolver6.solve((-3089.0d), (-4.370908126047652E36d));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Endpoints do not specify an interval: [-3089.0,-4.370908126047652E36]");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 10001.0d + "'", double5 == 10001.0d);
        org.junit.Assert.assertNotNull(polynomialFunction7);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 1.0E-14d + "'", double8 == 1.0E-14d);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 10001.0d + "'", double16 == 10001.0d);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(polynomialFunction20);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 13403.310093999602d + "'", double22 == 13403.310093999602d);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(complexArray25);
    }

    @Test
    public void test06231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06231");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex2 = complex1.sqrt();
        org.apache.commons.math.complex.Complex complex3 = complex2.sin();
        org.apache.commons.math.complex.Complex complex4 = complex0.pow(complex2);
        org.apache.commons.math.complex.Complex complex5 = complex4.asin();
        org.apache.commons.math.complex.Complex complex6 = complex4.tan();
        org.apache.commons.math.complex.Complex complex7 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex8 = complex7.cosh();
        double double9 = complex7.abs();
        org.apache.commons.math.complex.Complex complex10 = complex7.conjugate();
        org.apache.commons.math.complex.Complex complex11 = complex10.conjugate();
        boolean boolean12 = complex10.isInfinite();
        org.apache.commons.math.complex.Complex complex13 = complex10.asin();
        boolean boolean14 = complex10.isNaN();
        org.apache.commons.math.complex.Complex complex15 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex16 = complex15.cosh();
        org.apache.commons.math.complex.Complex complex17 = complex10.divide(complex15);
        org.apache.commons.math.complex.Complex complex18 = complex6.pow(complex15);
        org.apache.commons.math.complex.Complex complex19 = complex6.sinh();
        org.apache.commons.math.complex.Complex complex20 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex21 = complex20.sqrt();
        org.apache.commons.math.complex.Complex complex22 = complex20.sin();
        boolean boolean23 = complex19.equals((java.lang.Object) complex20);
        org.apache.commons.math.complex.Complex complex24 = complex19.sqrt1z();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + Double.POSITIVE_INFINITY + "'", double9 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(complex24);
    }

    @Test
    public void test06232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06232");
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException2 = new org.apache.commons.math.FunctionEvaluationException(Double.NaN, "");
        double double3 = functionEvaluationException2.getArgument();
        org.apache.commons.math.ConvergenceException convergenceException4 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) functionEvaluationException2);
        double double5 = functionEvaluationException2.getArgument();
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
    }

    @Test
    public void test06233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06233");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) 100, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex3 = complex2.conjugate();
        double[] doubleArray9 = new double[] { 0L, '#', 100.0f, 0L, (-1.0d) };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction10 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray9);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction11 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray9);
        double[] doubleArray12 = polynomialFunction11.getCoefficients();
        int int13 = polynomialFunction11.degree();
        double[] doubleArray14 = polynomialFunction11.getCoefficients();
        int int15 = polynomialFunction11.degree();
        boolean boolean16 = complex3.equals((java.lang.Object) polynomialFunction11);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver17 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction11);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver18 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction11);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver19 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction11);
        double double22 = laguerreSolver19.solve(148401.0d, 0.0d);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[0.0, 35.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[0.0, 35.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 4 + "'", int13 == 4);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[0.0, 35.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 4 + "'", int15 == 4);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d);
    }

    @Test
    public void test06234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06234");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex1 = complex0.cosh();
        double double2 = complex0.abs();
        org.apache.commons.math.complex.Complex complex3 = complex0.conjugate();
        org.apache.commons.math.complex.Complex complex4 = complex3.conjugate();
        boolean boolean5 = complex3.isInfinite();
        org.apache.commons.math.complex.Complex complex6 = complex3.cos();
        org.apache.commons.math.complex.Complex complex7 = complex3.conjugate();
        org.apache.commons.math.complex.Complex complex8 = complex3.sin();
        org.apache.commons.math.complex.Complex complex9 = complex8.acos();
        org.apache.commons.math.complex.Complex complex10 = complex8.tan();
        org.apache.commons.math.complex.Complex complex11 = complex10.tan();
        org.apache.commons.math.complex.Complex complex12 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex13 = complex12.tan();
        org.apache.commons.math.complex.Complex complex14 = complex12.cos();
        org.apache.commons.math.complex.Complex complex15 = complex12.tanh();
        org.apache.commons.math.complex.Complex complex16 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex17 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex18 = complex17.sqrt();
        org.apache.commons.math.complex.Complex complex19 = complex18.sin();
        org.apache.commons.math.complex.Complex complex20 = complex16.pow(complex18);
        org.apache.commons.math.complex.Complex complex21 = complex16.exp();
        org.apache.commons.math.complex.Complex complex22 = complex21.exp();
        boolean boolean23 = complex22.isInfinite();
        double[] doubleArray29 = new double[] { 0L, '#', 100.0f, 0L, (-1.0d) };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction30 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray29);
        double double32 = polynomialFunction30.value((double) 0);
        int int33 = polynomialFunction30.degree();
        double double35 = polynomialFunction30.value(64.0d);
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction36 = polynomialFunction30.derivative();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction37 = polynomialFunction30.polynomialDerivative();
        boolean boolean38 = complex22.equals((java.lang.Object) polynomialFunction30);
        org.apache.commons.math.complex.Complex complex39 = complex22.log();
        org.apache.commons.math.complex.Complex complex40 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex41 = complex40.sqrt();
        boolean boolean42 = complex40.isNaN();
        org.apache.commons.math.complex.Complex complex43 = complex40.tanh();
        org.apache.commons.math.complex.Complex complex44 = complex40.cosh();
        org.apache.commons.math.complex.Complex complex45 = complex40.cos();
        org.apache.commons.math.complex.Complex complex46 = complex22.add(complex45);
        org.apache.commons.math.complex.Complex complex47 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex48 = complex47.cosh();
        double double49 = complex47.abs();
        org.apache.commons.math.complex.Complex complex50 = complex47.conjugate();
        org.apache.commons.math.complex.Complex complex51 = complex50.conjugate();
        org.apache.commons.math.complex.Complex complex52 = complex50.log();
        org.apache.commons.math.complex.Complex complex53 = complex50.exp();
        org.apache.commons.math.complex.Complex complex54 = complex50.log();
        org.apache.commons.math.complex.Complex complex55 = complex45.add(complex50);
        org.apache.commons.math.complex.Complex complex56 = complex55.sqrt1z();
        org.apache.commons.math.complex.Complex complex57 = complex12.multiply(complex56);
        org.apache.commons.math.complex.Complex complex58 = complex11.pow(complex57);
        java.lang.Class<?> wildcardClass59 = complex11.getClass();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + Double.POSITIVE_INFINITY + "'", double2 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[0.0, 35.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.0d + "'", double32 == 0.0d);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 4 + "'", int33 == 4);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + (-1.6365376E7d) + "'", double35 == (-1.6365376E7d));
        org.junit.Assert.assertNotNull(univariateRealFunction36);
        org.junit.Assert.assertNotNull(polynomialFunction37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + Double.POSITIVE_INFINITY + "'", double49 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(wildcardClass59);
    }

    @Test
    public void test06235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06235");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex1 = complex0.cosh();
        org.apache.commons.math.complex.Complex complex2 = complex1.acos();
        org.apache.commons.math.complex.Complex complex3 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex4 = complex3.cosh();
        double double5 = complex3.abs();
        org.apache.commons.math.complex.Complex complex6 = complex3.conjugate();
        org.apache.commons.math.complex.Complex complex7 = complex6.conjugate();
        org.apache.commons.math.complex.Complex complex8 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex9 = complex8.tan();
        org.apache.commons.math.complex.Complex complex10 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex11 = complex10.cosh();
        org.apache.commons.math.complex.Complex complex12 = complex11.acos();
        double double13 = complex11.getReal();
        boolean boolean14 = complex9.equals((java.lang.Object) complex11);
        org.apache.commons.math.complex.Complex complex15 = complex7.subtract(complex11);
        org.apache.commons.math.complex.Complex complex16 = complex15.sqrt1z();
        org.apache.commons.math.complex.Complex complex17 = complex16.negate();
        org.apache.commons.math.complex.Complex complex18 = complex2.add(complex17);
        org.apache.commons.math.complex.Complex complex19 = complex2.sqrt();
        org.apache.commons.math.complex.Complex complex20 = complex19.log();
        org.apache.commons.math.complex.Complex complex23 = new org.apache.commons.math.complex.Complex((double) (-1L), Double.POSITIVE_INFINITY);
        org.apache.commons.math.complex.Complex complex24 = complex23.tanh();
        org.apache.commons.math.complex.Complex complex25 = complex23.acos();
        org.apache.commons.math.complex.Complex complex26 = complex20.subtract(complex23);
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + Double.POSITIVE_INFINITY + "'", double5 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
    }

    @Test
    public void test06236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06236");
        double[] doubleArray2 = new double[] { (byte) 1, 100 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) (short) 100);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver6 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction3);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction7 = laguerreSolver6.getPolynomialFunction();
        double double8 = laguerreSolver6.getRelativeAccuracy();
        laguerreSolver6.resetRelativeAccuracy();
        double double10 = laguerreSolver6.getAbsoluteAccuracy();
        laguerreSolver6.resetMaximalIterationCount();
        double double12 = laguerreSolver6.getRelativeAccuracy();
        laguerreSolver6.resetMaximalIterationCount();
        double[] doubleArray19 = new double[] { 0L, '#', 100.0f, 0L, (-1.0d) };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction20 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray19);
        double double22 = polynomialFunction20.value((double) 0);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction23 = polynomialFunction20.polynomialDerivative();
        double[] doubleArray24 = polynomialFunction20.getCoefficients();
        org.apache.commons.math.complex.Complex[] complexArray26 = laguerreSolver6.solveAll(doubleArray24, (double) 3);
        // The following exception was thrown during execution in test generation
        try {
            double double29 = laguerreSolver6.solve((-99999.0d), (-2.5903723296785737E38d));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Endpoints do not specify an interval: [-99999.0,-2.5903723296785737E38]");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 10001.0d + "'", double5 == 10001.0d);
        org.junit.Assert.assertNotNull(polynomialFunction7);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 1.0E-14d + "'", double8 == 1.0E-14d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0E-6d + "'", double10 == 1.0E-6d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 1.0E-14d + "'", double12 == 1.0E-14d);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[0.0, 35.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d);
        org.junit.Assert.assertNotNull(polynomialFunction23);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[0.0, 35.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(complexArray26);
    }

    @Test
    public void test06237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06237");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex2 = complex1.sqrt();
        org.apache.commons.math.complex.Complex complex3 = complex2.sin();
        org.apache.commons.math.complex.Complex complex4 = complex0.pow(complex2);
        org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex6 = complex5.cosh();
        org.apache.commons.math.complex.Complex complex7 = complex5.log();
        org.apache.commons.math.complex.Complex complex8 = complex0.divide(complex7);
        org.apache.commons.math.complex.Complex complex9 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex10 = complex9.sqrt();
        org.apache.commons.math.complex.Complex complex11 = complex9.sin();
        org.apache.commons.math.complex.Complex complex12 = complex8.pow(complex9);
        org.apache.commons.math.complex.Complex complex13 = complex9.sin();
        double double14 = complex13.abs();
        org.apache.commons.math.complex.Complex complex15 = complex13.tanh();
        org.apache.commons.math.complex.Complex complex16 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex17 = complex16.cosh();
        org.apache.commons.math.complex.Complex complex18 = complex16.log();
        org.apache.commons.math.complex.Complex complex19 = complex16.sin();
        org.apache.commons.math.complex.Complex complex20 = complex16.log();
        org.apache.commons.math.complex.Complex complex21 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex22 = complex21.sqrt();
        org.apache.commons.math.complex.Complex complex23 = complex16.divide(complex22);
        org.apache.commons.math.complex.Complex complex24 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex25 = complex24.cosh();
        double double26 = complex24.abs();
        org.apache.commons.math.complex.Complex complex27 = complex24.conjugate();
        org.apache.commons.math.complex.Complex complex28 = complex27.conjugate();
        org.apache.commons.math.complex.Complex complex29 = complex23.subtract(complex28);
        org.apache.commons.math.complex.Complex complex30 = complex23.exp();
        org.apache.commons.math.complex.Complex complex31 = complex23.tan();
        org.apache.commons.math.complex.Complex complex32 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex33 = complex32.cosh();
        org.apache.commons.math.complex.Complex complex34 = complex33.acos();
        double double35 = complex33.getReal();
        org.apache.commons.math.complex.Complex complex36 = complex33.tanh();
        double double37 = complex33.getImaginary();
        org.apache.commons.math.complex.Complex complex38 = complex23.divide(complex33);
        org.apache.commons.math.complex.Complex complex39 = complex38.asin();
        org.apache.commons.math.complex.Complex complex40 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex41 = complex40.cosh();
        double double42 = complex40.abs();
        org.apache.commons.math.complex.Complex complex43 = complex40.conjugate();
        org.apache.commons.math.complex.Complex complex44 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex45 = complex44.sqrt();
        boolean boolean46 = complex44.isNaN();
        org.apache.commons.math.complex.Complex complex47 = complex44.sin();
        org.apache.commons.math.complex.Complex complex48 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex49 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex50 = complex49.sqrt();
        org.apache.commons.math.complex.Complex complex51 = complex50.sin();
        org.apache.commons.math.complex.Complex complex52 = complex48.pow(complex50);
        org.apache.commons.math.complex.Complex complex53 = complex52.asin();
        org.apache.commons.math.complex.Complex complex54 = complex53.atan();
        boolean boolean55 = complex54.isInfinite();
        org.apache.commons.math.complex.Complex complex56 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex57 = complex54.subtract(complex56);
        org.apache.commons.math.complex.Complex complex58 = complex57.sin();
        org.apache.commons.math.complex.Complex complex59 = complex44.divide(complex58);
        org.apache.commons.math.complex.Complex complex60 = complex40.subtract(complex58);
        org.apache.commons.math.complex.Complex complex61 = complex39.multiply(complex40);
        boolean boolean62 = complex39.isInfinite();
        org.apache.commons.math.complex.Complex complex63 = complex15.add(complex39);
        org.apache.commons.math.complex.Complex complex64 = complex15.sqrt();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + Double.POSITIVE_INFINITY + "'", double26 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertTrue(Double.isNaN(double37));
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + Double.POSITIVE_INFINITY + "'", double42 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complex64);
    }

    @Test
    public void test06238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06238");
        java.lang.Object[] objArray2 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.FunctionEvaluationException functionEvaluationException3 = new org.apache.commons.math.FunctionEvaluationException(1484.0003369271856d, "org.apache.commons.math.ConvergenceException: org.apache.commons.math.MaxIterationsExceededException: org.apache.commons.math.FunctionEvaluationException: ", objArray2);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test06239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06239");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex1 = complex0.cosh();
        double double2 = complex0.abs();
        org.apache.commons.math.complex.Complex complex3 = complex0.conjugate();
        org.apache.commons.math.complex.Complex complex4 = complex3.conjugate();
        boolean boolean5 = complex3.isInfinite();
        org.apache.commons.math.complex.Complex complex6 = complex3.cos();
        org.apache.commons.math.complex.Complex complex7 = complex6.sin();
        org.apache.commons.math.complex.Complex complex8 = complex7.tan();
        org.apache.commons.math.complex.Complex complex9 = complex8.cosh();
        double double10 = complex9.getReal();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + Double.POSITIVE_INFINITY + "'", double2 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
    }

    @Test
    public void test06240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06240");
        double[] doubleArray2 = new double[] { (byte) 1, 100 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) (short) 100);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver6 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction3);
        laguerreSolver6.setMaximalIterationCount(4);
        laguerreSolver6.setAbsoluteAccuracy((double) 'a');
        laguerreSolver6.resetMaximalIterationCount();
        laguerreSolver6.setAbsoluteAccuracy((-7.173051538824589E30d));
        laguerreSolver6.resetRelativeAccuracy();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 10001.0d + "'", double5 == 10001.0d);
    }

    @Test
    public void test06241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06241");
        double[] doubleArray2 = new double[] { (byte) 1, 100 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) (short) 100);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver6 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction3);
        double double10 = laguerreSolver6.solve((double) (-1L), 349.0d, (double) (short) 10);
        int int11 = laguerreSolver6.getIterationCount();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction12 = laguerreSolver6.getPolynomialFunction();
        laguerreSolver6.resetFunctionValueAccuracy();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 10001.0d + "'", double5 == 10001.0d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + (-0.01d) + "'", double10 == (-0.01d));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 3 + "'", int11 == 3);
        org.junit.Assert.assertNotNull(polynomialFunction12);
    }

    @Test
    public void test06242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06242");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex2 = complex1.sqrt();
        org.apache.commons.math.complex.Complex complex3 = complex2.sin();
        org.apache.commons.math.complex.Complex complex4 = complex0.pow(complex2);
        org.apache.commons.math.complex.Complex complex5 = complex4.asin();
        org.apache.commons.math.complex.Complex complex6 = complex4.tan();
        org.apache.commons.math.complex.Complex complex7 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex8 = complex7.cosh();
        double double9 = complex7.abs();
        org.apache.commons.math.complex.Complex complex10 = complex7.conjugate();
        org.apache.commons.math.complex.Complex complex11 = complex10.conjugate();
        boolean boolean12 = complex10.isInfinite();
        org.apache.commons.math.complex.Complex complex13 = complex10.asin();
        boolean boolean14 = complex10.isNaN();
        org.apache.commons.math.complex.Complex complex15 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex16 = complex15.cosh();
        org.apache.commons.math.complex.Complex complex17 = complex10.divide(complex15);
        org.apache.commons.math.complex.Complex complex18 = complex6.pow(complex15);
        org.apache.commons.math.complex.Complex complex19 = complex15.tanh();
        boolean boolean20 = complex19.isInfinite();
        org.apache.commons.math.complex.Complex complex21 = complex19.cos();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + Double.POSITIVE_INFINITY + "'", double9 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(complex21);
    }

    @Test
    public void test06243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06243");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex2 = complex1.sqrt();
        org.apache.commons.math.complex.Complex complex3 = complex2.sin();
        org.apache.commons.math.complex.Complex complex4 = complex0.pow(complex2);
        org.apache.commons.math.complex.Complex complex5 = complex4.asin();
        org.apache.commons.math.complex.Complex complex6 = complex5.atan();
        boolean boolean7 = complex6.isInfinite();
        org.apache.commons.math.complex.Complex complex8 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex9 = complex6.subtract(complex8);
        org.apache.commons.math.complex.Complex complex10 = complex9.sin();
        org.apache.commons.math.complex.Complex complex11 = complex10.log();
        org.apache.commons.math.complex.Complex complex14 = new org.apache.commons.math.complex.Complex(64.0d, 0.0d);
        org.apache.commons.math.complex.Complex complex15 = complex10.multiply(complex14);
        org.apache.commons.math.complex.Complex complex16 = complex15.sqrt();
        org.apache.commons.math.complex.Complex complex17 = complex16.conjugate();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
    }

    @Test
    public void test06244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06244");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex(1000.0d, (-1.4623924736915717E43d));
        org.apache.commons.math.complex.Complex complex3 = complex2.sinh();
        org.junit.Assert.assertNotNull(complex3);
    }

    @Test
    public void test06245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06245");
        double[] doubleArray2 = new double[] { (byte) -1, '#' };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction4 = polynomialFunction3.polynomialDerivative();
        double[] doubleArray5 = polynomialFunction3.getCoefficients();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray5);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver8 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver8.setRelativeAccuracy((-1.3499999269843102d));
        double double11 = laguerreSolver8.getFunctionValueAccuracy();
        laguerreSolver8.resetFunctionValueAccuracy();
        // The following exception was thrown during execution in test generation
        try {
            double double15 = laguerreSolver8.solve(0.0d, (-1.0920036681097296E52d));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Endpoints do not specify an interval: [0.0,-1.0920036681097296E52]");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[-1.0, 35.0]");
        org.junit.Assert.assertNotNull(polynomialFunction4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[-1.0, 35.0]");
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 1.0E-15d + "'", double11 == 1.0E-15d);
    }

    @Test
    public void test06246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06246");
        java.lang.Object[] objArray11 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException12 = new org.apache.commons.math.ConvergenceException("", objArray11);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException13 = new org.apache.commons.math.MaxIterationsExceededException(0, "hi!", objArray11);
        org.apache.commons.math.ConvergenceException convergenceException15 = new org.apache.commons.math.ConvergenceException("");
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException16 = new org.apache.commons.math.FunctionEvaluationException((double) (short) 0, "hi!", objArray11, (java.lang.Throwable) convergenceException15);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException17 = new org.apache.commons.math.MaxIterationsExceededException((int) (byte) 100, "", objArray11);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException18 = new org.apache.commons.math.FunctionEvaluationException(1.0d, "", objArray11);
        java.lang.Object[] objArray19 = functionEvaluationException18.getArguments();
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException20 = new org.apache.commons.math.FunctionEvaluationException((-3.464877501E9d), "org.apache.commons.math.MaxIterationsExceededException: org.apache.commons.math.FunctionEvaluationException: ", (java.lang.Throwable) functionEvaluationException18);
        java.lang.String str21 = functionEvaluationException20.toString();
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[]");
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "org.apache.commons.math.FunctionEvaluationException: org.apache.commons.math.MaxIterationsExceededException: org.apache.commons.math.FunctionEvaluationException: " + "'", str21, "org.apache.commons.math.FunctionEvaluationException: org.apache.commons.math.MaxIterationsExceededException: org.apache.commons.math.FunctionEvaluationException: ");
    }

    @Test
    public void test06247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06247");
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException2 = new org.apache.commons.math.MaxIterationsExceededException((int) (byte) -1);
        int int3 = maxIterationsExceededException2.getMaxIterations();
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException4 = new org.apache.commons.math.FunctionEvaluationException((double) (byte) 100, (java.lang.Throwable) maxIterationsExceededException2);
        java.lang.Object[] objArray11 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException12 = new org.apache.commons.math.ConvergenceException("", objArray11);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException13 = new org.apache.commons.math.FunctionEvaluationException((double) (short) 10, "hi!", objArray11);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException14 = new org.apache.commons.math.MaxIterationsExceededException((int) (byte) 0, "org.apache.commons.math.ConvergenceException: hi!", objArray11);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException15 = new org.apache.commons.math.FunctionEvaluationException(0.0d, (java.lang.Throwable) maxIterationsExceededException14);
        java.lang.Throwable[] throwableArray16 = functionEvaluationException15.getSuppressed();
        functionEvaluationException4.addSuppressed((java.lang.Throwable) functionEvaluationException15);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[]");
        org.junit.Assert.assertNotNull(throwableArray16);
    }

    @Test
    public void test06248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06248");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex1 = complex0.cosh();
        org.apache.commons.math.complex.Complex complex2 = complex0.log();
        org.apache.commons.math.complex.Complex complex3 = complex2.cos();
        double double4 = complex3.abs();
        org.apache.commons.math.complex.Complex complex5 = complex3.sqrt();
        org.apache.commons.math.complex.Complex complex6 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex7 = complex6.sqrt();
        boolean boolean8 = complex6.isNaN();
        double double9 = complex6.getReal();
        boolean boolean10 = complex6.isNaN();
        org.apache.commons.math.complex.Complex complex11 = complex6.asin();
        org.apache.commons.math.complex.Complex complex12 = complex5.pow(complex11);
        org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex14 = complex13.cosh();
        double double15 = complex13.abs();
        org.apache.commons.math.complex.Complex complex16 = complex13.conjugate();
        org.apache.commons.math.complex.Complex complex17 = complex16.conjugate();
        org.apache.commons.math.complex.Complex complex18 = complex16.tanh();
        org.apache.commons.math.complex.Complex complex19 = complex18.tan();
        org.apache.commons.math.complex.Complex complex20 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex21 = complex20.cosh();
        double double22 = complex20.abs();
        org.apache.commons.math.complex.Complex complex23 = complex20.conjugate();
        org.apache.commons.math.complex.Complex complex24 = complex23.conjugate();
        org.apache.commons.math.complex.Complex complex25 = complex19.subtract(complex23);
        org.apache.commons.math.complex.Complex complex26 = complex23.negate();
        java.lang.Object[] objArray30 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException31 = new org.apache.commons.math.ConvergenceException("", objArray30);
        java.lang.Object[] objArray36 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException37 = new org.apache.commons.math.ConvergenceException("", objArray36);
        java.lang.Object[] objArray39 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException40 = new org.apache.commons.math.ConvergenceException("", objArray39);
        org.apache.commons.math.ConvergenceException convergenceException41 = new org.apache.commons.math.ConvergenceException("", objArray36, (java.lang.Throwable) convergenceException40);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException43 = new org.apache.commons.math.FunctionEvaluationException((double) 100);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException44 = new org.apache.commons.math.FunctionEvaluationException(100.0d, "org.apache.commons.math.ConvergenceException: hi!", objArray36, (java.lang.Throwable) functionEvaluationException43);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException45 = new org.apache.commons.math.FunctionEvaluationException((double) '#', "", objArray30, (java.lang.Throwable) functionEvaluationException44);
        java.lang.String str46 = functionEvaluationException45.getPattern();
        boolean boolean47 = complex26.equals((java.lang.Object) functionEvaluationException45);
        org.apache.commons.math.complex.Complex complex48 = complex5.subtract(complex26);
        org.apache.commons.math.complex.Complex complex49 = null;
        org.apache.commons.math.complex.Complex complex50 = complex5.divide(complex49);
        org.apache.commons.math.complex.Complex complex51 = complex5.atan();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + Double.POSITIVE_INFINITY + "'", double9 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + Double.POSITIVE_INFINITY + "'", double15 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + Double.POSITIVE_INFINITY + "'", double22 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(objArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray30), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray30), "[]");
        org.junit.Assert.assertNotNull(objArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray36), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray36), "[]");
        org.junit.Assert.assertNotNull(objArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray39), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray39), "[]");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
    }

    @Test
    public void test06249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06249");
        java.lang.Object[] objArray18 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException19 = new org.apache.commons.math.ConvergenceException("", objArray18);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException20 = new org.apache.commons.math.MaxIterationsExceededException(0, "hi!", objArray18);
        org.apache.commons.math.ConvergenceException convergenceException22 = new org.apache.commons.math.ConvergenceException("");
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException23 = new org.apache.commons.math.FunctionEvaluationException((double) (short) 0, "hi!", objArray18, (java.lang.Throwable) convergenceException22);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException24 = new org.apache.commons.math.MaxIterationsExceededException((int) (byte) 100, "", objArray18);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException25 = new org.apache.commons.math.FunctionEvaluationException(1.0d, "", objArray18);
        java.lang.Object[] objArray35 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException36 = new org.apache.commons.math.ConvergenceException("", objArray35);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException37 = new org.apache.commons.math.MaxIterationsExceededException(0, "hi!", objArray35);
        org.apache.commons.math.ConvergenceException convergenceException39 = new org.apache.commons.math.ConvergenceException("");
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException40 = new org.apache.commons.math.FunctionEvaluationException((double) (short) 0, "hi!", objArray35, (java.lang.Throwable) convergenceException39);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException41 = new org.apache.commons.math.MaxIterationsExceededException((int) (byte) 100, "", objArray35);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException42 = new org.apache.commons.math.FunctionEvaluationException(1.0d, "", objArray35);
        org.apache.commons.math.ConvergenceException convergenceException43 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.MaxIterationsExceededException: ", objArray18, (java.lang.Throwable) functionEvaluationException42);
        java.lang.Throwable[] throwableArray44 = functionEvaluationException42.getSuppressed();
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException45 = new org.apache.commons.math.MaxIterationsExceededException((-1), "org.apache.commons.math.FunctionEvaluationException: org.apache.commons.math.FunctionEvaluationException: ", (java.lang.Object[]) throwableArray44);
        java.lang.Object[] objArray55 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException56 = new org.apache.commons.math.ConvergenceException("", objArray55);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException57 = new org.apache.commons.math.MaxIterationsExceededException(0, "hi!", objArray55);
        org.apache.commons.math.ConvergenceException convergenceException59 = new org.apache.commons.math.ConvergenceException("");
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException60 = new org.apache.commons.math.FunctionEvaluationException((double) (short) 0, "hi!", objArray55, (java.lang.Throwable) convergenceException59);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException61 = new org.apache.commons.math.MaxIterationsExceededException((int) (byte) 100, "", objArray55);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException62 = new org.apache.commons.math.FunctionEvaluationException(1.0d, "", objArray55);
        java.lang.String str63 = functionEvaluationException62.getPattern();
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException64 = new org.apache.commons.math.FunctionEvaluationException(10001.0d, "org.apache.commons.math.ConvergenceException: Convergence failed", (java.lang.Object[]) throwableArray44, (java.lang.Throwable) functionEvaluationException62);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException65 = new org.apache.commons.math.FunctionEvaluationException((double) 100L, "Evaluation failed for argument = {0}", (java.lang.Object[]) throwableArray44);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException66 = new org.apache.commons.math.FunctionEvaluationException((double) 100.0f, "Maximal number of iterations ({0}) exceeded", (java.lang.Object[]) throwableArray44);
        java.lang.String str67 = functionEvaluationException66.getPattern();
        org.junit.Assert.assertNotNull(objArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray18), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray18), "[]");
        org.junit.Assert.assertNotNull(objArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray35), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray35), "[]");
        org.junit.Assert.assertNotNull(throwableArray44);
        org.junit.Assert.assertNotNull(objArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray55), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray55), "[]");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "" + "'", str63, "");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "Maximal number of iterations ({0}) exceeded" + "'", str67, "Maximal number of iterations ({0}) exceeded");
    }

    @Test
    public void test06250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06250");
        double[] doubleArray5 = new double[] { 0L, '#', 100.0f, 0L, (-1.0d) };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray5);
        double double8 = polynomialFunction6.value((double) 0);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver9 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        double[] doubleArray12 = new double[] { (byte) 1, 100 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction13 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray12);
        double double15 = polynomialFunction13.value((double) (short) 100);
        double[] doubleArray16 = polynomialFunction13.getCoefficients();
        org.apache.commons.math.complex.Complex[] complexArray18 = laguerreSolver9.solveAll(doubleArray16, (double) (short) 10);
        laguerreSolver9.setMaximalIterationCount((int) (byte) 10);
        laguerreSolver9.resetRelativeAccuracy();
        double double25 = laguerreSolver9.solve(1.0E-6d, (double) 32, 0.0d);
        int int26 = laguerreSolver9.getIterationCount();
        laguerreSolver9.resetAbsoluteAccuracy();
        double double28 = laguerreSolver9.getRelativeAccuracy();
        double double29 = laguerreSolver9.getFunctionValueAccuracy();
        laguerreSolver9.resetRelativeAccuracy();
        double double31 = laguerreSolver9.getAbsoluteAccuracy();
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[0.0, 35.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 10001.0d + "'", double15 == 10001.0d);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(complexArray18);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.0d + "'", double25 == 0.0d);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 3 + "'", int26 == 3);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 1.0E-14d + "'", double28 == 1.0E-14d);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 1.0E-15d + "'", double29 == 1.0E-15d);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 1.0E-6d + "'", double31 == 1.0E-6d);
    }

    @Test
    public void test06251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06251");
        double[] doubleArray2 = new double[] { (byte) 1, 100 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) (short) 100);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver6 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction3);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction7 = laguerreSolver6.getPolynomialFunction();
        double double8 = laguerreSolver6.getRelativeAccuracy();
        double double9 = laguerreSolver6.getAbsoluteAccuracy();
        laguerreSolver6.setAbsoluteAccuracy(0.0d);
        laguerreSolver6.setRelativeAccuracy(349.0d);
        double double16 = laguerreSolver6.solve((-0.3533630315721405d), 10101.0d);
        laguerreSolver6.resetRelativeAccuracy();
        double[] doubleArray20 = new double[] { (byte) 1, 100 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction21 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray20);
        double double23 = polynomialFunction21.value((double) (short) 100);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver24 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction21);
        double double28 = laguerreSolver24.solve((double) (-1L), 349.0d, (double) (short) 10);
        int int29 = laguerreSolver24.getIterationCount();
        laguerreSolver24.setRelativeAccuracy(0.0d);
        double double34 = laguerreSolver24.solve((double) (-1.0f), 10001.0d);
        laguerreSolver24.setRelativeAccuracy(10.170609052699179d);
        laguerreSolver24.setAbsoluteAccuracy((double) (byte) 1);
        double[] doubleArray41 = new double[] { (byte) 1, 100 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction42 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray41);
        double double44 = polynomialFunction42.value((double) (short) 100);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver45 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction42);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction46 = laguerreSolver45.getPolynomialFunction();
        double double47 = laguerreSolver45.getAbsoluteAccuracy();
        double[] doubleArray53 = new double[] { 0L, '#', 100.0f, 0L, (-1.0d) };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction54 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray53);
        org.apache.commons.math.complex.Complex[] complexArray56 = laguerreSolver45.solveAll(doubleArray53, 10001.0d);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction57 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray53);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction58 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray53);
        org.apache.commons.math.complex.Complex[] complexArray60 = laguerreSolver24.solveAll(doubleArray53, (-3.213906379456312E15d));
        org.apache.commons.math.complex.Complex complex61 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex62 = complex61.cosh();
        double double63 = complex61.abs();
        org.apache.commons.math.complex.Complex complex64 = complex61.conjugate();
        org.apache.commons.math.complex.Complex complex65 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex66 = complex65.sqrt();
        boolean boolean67 = complex65.isNaN();
        org.apache.commons.math.complex.Complex complex68 = complex65.sin();
        org.apache.commons.math.complex.Complex complex69 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex70 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex71 = complex70.sqrt();
        org.apache.commons.math.complex.Complex complex72 = complex71.sin();
        org.apache.commons.math.complex.Complex complex73 = complex69.pow(complex71);
        org.apache.commons.math.complex.Complex complex74 = complex73.asin();
        org.apache.commons.math.complex.Complex complex75 = complex74.atan();
        boolean boolean76 = complex75.isInfinite();
        org.apache.commons.math.complex.Complex complex77 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex78 = complex75.subtract(complex77);
        org.apache.commons.math.complex.Complex complex79 = complex78.sin();
        org.apache.commons.math.complex.Complex complex80 = complex65.divide(complex79);
        org.apache.commons.math.complex.Complex complex81 = complex61.subtract(complex79);
        org.apache.commons.math.complex.Complex complex82 = complex61.conjugate();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.complex.Complex complex83 = laguerreSolver6.solve(complexArray60, complex82);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.MaxIterationsExceededException; message: Maximal number of iterations (100) exceeded");
        } catch (org.apache.commons.math.MaxIterationsExceededException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 10001.0d + "'", double5 == 10001.0d);
        org.junit.Assert.assertNotNull(polynomialFunction7);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 1.0E-14d + "'", double8 == 1.0E-14d);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0E-6d + "'", double9 == 1.0E-6d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + (-0.01d) + "'", double16 == (-0.01d));
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 10001.0d + "'", double23 == 10001.0d);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + (-0.01d) + "'", double28 == (-0.01d));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 3 + "'", int29 == 3);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + (-0.01d) + "'", double34 == (-0.01d));
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 10001.0d + "'", double44 == 10001.0d);
        org.junit.Assert.assertNotNull(polynomialFunction46);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 1.0E-6d + "'", double47 == 1.0E-6d);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[0.0, 35.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(complexArray56);
        org.junit.Assert.assertNotNull(complexArray60);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + Double.POSITIVE_INFINITY + "'", double63 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertNotNull(complex75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(complex77);
        org.junit.Assert.assertNotNull(complex78);
        org.junit.Assert.assertNotNull(complex79);
        org.junit.Assert.assertNotNull(complex80);
        org.junit.Assert.assertNotNull(complex81);
        org.junit.Assert.assertNotNull(complex82);
    }

    @Test
    public void test06252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06252");
        double[] doubleArray2 = new double[] { (byte) 1, 100 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) (short) 100);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver6 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction3);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction7 = laguerreSolver6.getPolynomialFunction();
        double[] doubleArray10 = new double[] { (byte) -1, '#' };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction11 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray10);
        org.apache.commons.math.complex.Complex[] complexArray13 = laguerreSolver6.solveAll(doubleArray10, 1.0d);
        double double14 = laguerreSolver6.getRelativeAccuracy();
        laguerreSolver6.setFunctionValueAccuracy((double) 1.0f);
        int int17 = laguerreSolver6.getIterationCount();
        double[] doubleArray23 = new double[] { 0L, '#', 100.0f, 0L, (-1.0d) };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction24 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray23);
        int int25 = polynomialFunction24.degree();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver26 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction24);
        int int27 = laguerreSolver26.getMaximalIterationCount();
        laguerreSolver26.resetMaximalIterationCount();
        org.apache.commons.math.complex.Complex complex29 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex30 = complex29.cosh();
        org.apache.commons.math.complex.Complex complex31 = complex29.log();
        org.apache.commons.math.complex.Complex complex32 = complex29.sin();
        org.apache.commons.math.complex.Complex complex33 = complex29.log();
        org.apache.commons.math.complex.Complex complex34 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex35 = complex34.sqrt();
        org.apache.commons.math.complex.Complex complex36 = complex29.divide(complex35);
        org.apache.commons.math.complex.Complex complex37 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex38 = complex37.cosh();
        org.apache.commons.math.complex.Complex complex39 = complex38.acos();
        double double40 = complex38.getReal();
        org.apache.commons.math.complex.Complex complex41 = complex38.sqrt();
        org.apache.commons.math.complex.Complex complex42 = complex29.pow(complex38);
        org.apache.commons.math.complex.Complex complex43 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex44 = complex43.cosh();
        org.apache.commons.math.complex.Complex complex45 = complex43.log();
        org.apache.commons.math.complex.Complex complex46 = complex45.cos();
        org.apache.commons.math.complex.Complex complex47 = complex38.multiply(complex45);
        org.apache.commons.math.complex.Complex complex48 = complex45.tanh();
        org.apache.commons.math.complex.Complex complex49 = complex48.asin();
        double[] doubleArray55 = new double[] { 0L, '#', 100.0f, 0L, (-1.0d) };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction56 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray55);
        int int57 = polynomialFunction56.degree();
        boolean boolean58 = complex48.equals((java.lang.Object) polynomialFunction56);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction59 = polynomialFunction56.polynomialDerivative();
        double[] doubleArray60 = polynomialFunction56.getCoefficients();
        org.apache.commons.math.complex.Complex[] complexArray62 = laguerreSolver26.solveAll(doubleArray60, 0.0d);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction63 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray60);
        org.apache.commons.math.complex.Complex[] complexArray65 = laguerreSolver6.solveAll(doubleArray60, (double) 0.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction66 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray60);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction67 = polynomialFunction66.polynomialDerivative();
        double double69 = polynomialFunction66.value((-1461412.0d));
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 10001.0d + "'", double5 == 10001.0d);
        org.junit.Assert.assertNotNull(polynomialFunction7);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[-1.0, 35.0]");
        org.junit.Assert.assertNotNull(complexArray13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 1.0E-14d + "'", double14 == 1.0E-14d);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 3 + "'", int17 == 3);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[0.0, 35.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 4 + "'", int25 == 4);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 100 + "'", int27 == 100);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertTrue(Double.isNaN(double40));
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[0.0, 35.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 4 + "'", int57 == 4);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(polynomialFunction59);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[0.0, 35.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(complexArray62);
        org.junit.Assert.assertNotNull(complexArray65);
        org.junit.Assert.assertNotNull(polynomialFunction67);
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + (-4.5613214195472375E24d) + "'", double69 == (-4.5613214195472375E24d));
    }

    @Test
    public void test06253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06253");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex1 = complex0.cosh();
        double double2 = complex0.abs();
        org.apache.commons.math.complex.Complex complex3 = complex0.conjugate();
        org.apache.commons.math.complex.Complex complex4 = complex3.conjugate();
        org.apache.commons.math.complex.Complex complex5 = complex3.tanh();
        org.apache.commons.math.complex.Complex complex6 = complex5.tan();
        org.apache.commons.math.complex.Complex complex7 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex8 = complex7.cosh();
        double double9 = complex7.abs();
        org.apache.commons.math.complex.Complex complex10 = complex7.conjugate();
        org.apache.commons.math.complex.Complex complex11 = complex10.conjugate();
        org.apache.commons.math.complex.Complex complex12 = complex6.subtract(complex10);
        org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex15 = complex14.sqrt();
        org.apache.commons.math.complex.Complex complex16 = complex15.sin();
        org.apache.commons.math.complex.Complex complex17 = complex13.pow(complex15);
        org.apache.commons.math.complex.Complex complex18 = complex17.asin();
        org.apache.commons.math.complex.Complex complex19 = complex17.tan();
        org.apache.commons.math.complex.Complex complex20 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex21 = complex20.cosh();
        double double22 = complex20.abs();
        org.apache.commons.math.complex.Complex complex23 = complex20.conjugate();
        org.apache.commons.math.complex.Complex complex24 = complex23.conjugate();
        boolean boolean25 = complex23.isInfinite();
        org.apache.commons.math.complex.Complex complex26 = complex23.asin();
        boolean boolean27 = complex23.isNaN();
        org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex29 = complex28.cosh();
        org.apache.commons.math.complex.Complex complex30 = complex23.divide(complex28);
        org.apache.commons.math.complex.Complex complex31 = complex19.pow(complex28);
        org.apache.commons.math.complex.Complex complex32 = complex12.divide(complex19);
        org.apache.commons.math.complex.Complex complex33 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex34 = complex33.cosh();
        double double35 = complex33.abs();
        org.apache.commons.math.complex.Complex complex36 = complex33.conjugate();
        org.apache.commons.math.complex.Complex complex37 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex38 = complex37.sqrt();
        boolean boolean39 = complex37.isNaN();
        org.apache.commons.math.complex.Complex complex40 = complex37.sin();
        org.apache.commons.math.complex.Complex complex41 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex42 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex43 = complex42.sqrt();
        org.apache.commons.math.complex.Complex complex44 = complex43.sin();
        org.apache.commons.math.complex.Complex complex45 = complex41.pow(complex43);
        org.apache.commons.math.complex.Complex complex46 = complex45.asin();
        org.apache.commons.math.complex.Complex complex47 = complex46.atan();
        boolean boolean48 = complex47.isInfinite();
        org.apache.commons.math.complex.Complex complex49 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex50 = complex47.subtract(complex49);
        org.apache.commons.math.complex.Complex complex51 = complex50.sin();
        org.apache.commons.math.complex.Complex complex52 = complex37.divide(complex51);
        org.apache.commons.math.complex.Complex complex53 = complex33.subtract(complex51);
        double double54 = complex53.abs();
        org.apache.commons.math.complex.Complex complex55 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex56 = complex55.cosh();
        double double57 = complex55.abs();
        org.apache.commons.math.complex.Complex complex58 = complex55.conjugate();
        org.apache.commons.math.complex.Complex complex59 = complex58.conjugate();
        boolean boolean60 = complex58.isInfinite();
        org.apache.commons.math.complex.Complex complex61 = complex58.cos();
        org.apache.commons.math.complex.Complex complex62 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex63 = complex62.cosh();
        double double64 = complex62.abs();
        org.apache.commons.math.complex.Complex complex65 = complex62.conjugate();
        org.apache.commons.math.complex.Complex complex66 = complex65.conjugate();
        boolean boolean67 = complex65.isInfinite();
        org.apache.commons.math.complex.Complex complex68 = complex65.asin();
        boolean boolean69 = complex65.isNaN();
        org.apache.commons.math.complex.Complex complex70 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex71 = complex70.cosh();
        org.apache.commons.math.complex.Complex complex72 = complex65.divide(complex70);
        org.apache.commons.math.complex.Complex complex73 = complex61.divide(complex70);
        org.apache.commons.math.complex.Complex complex74 = complex70.sinh();
        org.apache.commons.math.complex.Complex complex75 = complex74.conjugate();
        org.apache.commons.math.complex.Complex complex76 = complex74.acos();
        org.apache.commons.math.complex.Complex complex77 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex78 = complex77.cosh();
        org.apache.commons.math.complex.Complex complex79 = complex78.acos();
        org.apache.commons.math.complex.Complex complex80 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex81 = complex80.cosh();
        org.apache.commons.math.complex.Complex complex82 = complex80.log();
        org.apache.commons.math.complex.Complex complex83 = complex80.sin();
        org.apache.commons.math.complex.Complex complex84 = complex83.tanh();
        org.apache.commons.math.complex.Complex complex85 = complex78.add(complex84);
        org.apache.commons.math.complex.Complex complex86 = complex76.pow(complex84);
        org.apache.commons.math.complex.Complex complex87 = complex53.multiply(complex84);
        org.apache.commons.math.complex.Complex complex88 = complex12.add(complex53);
        double double89 = complex53.getImaginary();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + Double.POSITIVE_INFINITY + "'", double2 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + Double.POSITIVE_INFINITY + "'", double9 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + Double.POSITIVE_INFINITY + "'", double22 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + Double.POSITIVE_INFINITY + "'", double35 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertTrue(Double.isNaN(double54));
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + Double.POSITIVE_INFINITY + "'", double57 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + Double.POSITIVE_INFINITY + "'", double64 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertNotNull(complex75);
        org.junit.Assert.assertNotNull(complex76);
        org.junit.Assert.assertNotNull(complex77);
        org.junit.Assert.assertNotNull(complex78);
        org.junit.Assert.assertNotNull(complex79);
        org.junit.Assert.assertNotNull(complex80);
        org.junit.Assert.assertNotNull(complex81);
        org.junit.Assert.assertNotNull(complex82);
        org.junit.Assert.assertNotNull(complex83);
        org.junit.Assert.assertNotNull(complex84);
        org.junit.Assert.assertNotNull(complex85);
        org.junit.Assert.assertNotNull(complex86);
        org.junit.Assert.assertNotNull(complex87);
        org.junit.Assert.assertNotNull(complex88);
        org.junit.Assert.assertTrue(Double.isNaN(double89));
    }

    @Test
    public void test06254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06254");
        java.lang.Object[] objArray6 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException7 = new org.apache.commons.math.ConvergenceException("", objArray6);
        java.lang.Object[] objArray9 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException10 = new org.apache.commons.math.ConvergenceException("", objArray9);
        org.apache.commons.math.ConvergenceException convergenceException11 = new org.apache.commons.math.ConvergenceException("", objArray6, (java.lang.Throwable) convergenceException10);
        org.apache.commons.math.ConvergenceException convergenceException12 = new org.apache.commons.math.ConvergenceException("", objArray6);
        org.apache.commons.math.ConvergenceException convergenceException13 = new org.apache.commons.math.ConvergenceException("hi!", objArray6);
        java.lang.Object[] objArray14 = convergenceException13.getArguments();
        java.lang.Throwable[] throwableArray15 = convergenceException13.getSuppressed();
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException16 = new org.apache.commons.math.FunctionEvaluationException(0.7853981633974483d, "org.apache.commons.math.FunctionEvaluationException: Evaluation failed for argument = 10,101", (java.lang.Throwable) convergenceException13);
        java.lang.String str17 = convergenceException13.toString();
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[]");
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[]");
        org.junit.Assert.assertNotNull(objArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray14), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray14), "[]");
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "org.apache.commons.math.ConvergenceException: hi!" + "'", str17, "org.apache.commons.math.ConvergenceException: hi!");
    }

    @Test
    public void test06255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06255");
        double[] doubleArray2 = new double[] { (byte) 1, 100 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) (short) 100);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver6 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction3);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction7 = laguerreSolver6.getPolynomialFunction();
        laguerreSolver6.setRelativeAccuracy((double) 0);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction10 = laguerreSolver6.getPolynomialFunction();
        laguerreSolver6.resetRelativeAccuracy();
        laguerreSolver6.setFunctionValueAccuracy((double) 100.0f);
        laguerreSolver6.setFunctionValueAccuracy((double) 32);
        laguerreSolver6.resetAbsoluteAccuracy();
        double[] doubleArray19 = new double[] { (byte) 1, 100 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction20 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray19);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver21 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction20);
        laguerreSolver21.resetAbsoluteAccuracy();
        double[] doubleArray25 = new double[] { (byte) 1, 100 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction26 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray25);
        double double28 = polynomialFunction26.value((double) (short) 100);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver29 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction26);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction30 = laguerreSolver29.getPolynomialFunction();
        laguerreSolver29.resetRelativeAccuracy();
        double[] doubleArray37 = new double[] { 0L, '#', 100.0f, 0L, (-1.0d) };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction38 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray37);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction39 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray37);
        org.apache.commons.math.complex.Complex[] complexArray41 = laguerreSolver29.solveAll(doubleArray37, 101.0d);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction42 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray37);
        org.apache.commons.math.complex.Complex[] complexArray44 = laguerreSolver21.solveAll(doubleArray37, 10101.0d);
        org.apache.commons.math.complex.Complex complex47 = new org.apache.commons.math.complex.Complex(134.02310093999603d, (double) (-1.0f));
        org.apache.commons.math.complex.Complex complex48 = complex47.cosh();
        org.apache.commons.math.complex.Complex complex49 = complex48.cos();
        org.apache.commons.math.complex.Complex complex50 = laguerreSolver6.solve(complexArray44, complex48);
        double double51 = laguerreSolver6.getResult();
        int int52 = laguerreSolver6.getIterationCount();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 10001.0d + "'", double5 == 10001.0d);
        org.junit.Assert.assertNotNull(polynomialFunction7);
        org.junit.Assert.assertNotNull(polynomialFunction10);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 10001.0d + "'", double28 == 10001.0d);
        org.junit.Assert.assertNotNull(polynomialFunction30);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[0.0, 35.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(complexArray41);
        org.junit.Assert.assertNotNull(complexArray44);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 0.0d + "'", double51 == 0.0d);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 7 + "'", int52 == 7);
    }

    @Test
    public void test06256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06256");
        double[] doubleArray2 = new double[] { (byte) 1, 100 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) (short) 100);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver6 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction3);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction7 = laguerreSolver6.getPolynomialFunction();
        double double8 = laguerreSolver6.getRelativeAccuracy();
        laguerreSolver6.resetRelativeAccuracy();
        double double10 = laguerreSolver6.getFunctionValueAccuracy();
        laguerreSolver6.resetRelativeAccuracy();
        laguerreSolver6.setMaximalIterationCount((int) (short) 10);
        laguerreSolver6.resetAbsoluteAccuracy();
        double double18 = laguerreSolver6.solve((-1.0003990597689866E16d), (double) 5, (double) 3);
        int int19 = laguerreSolver6.getIterationCount();
        laguerreSolver6.resetAbsoluteAccuracy();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 10001.0d + "'", double5 == 10001.0d);
        org.junit.Assert.assertNotNull(polynomialFunction7);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 1.0E-14d + "'", double8 == 1.0E-14d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0E-15d + "'", double10 == 1.0E-15d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + (-0.01d) + "'", double18 == (-0.01d));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 3 + "'", int19 == 3);
    }

    @Test
    public void test06257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06257");
        double[] doubleArray5 = new double[] { 0L, '#', 100.0f, 0L, (-1.0d) };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray5);
        double double8 = polynomialFunction6.value((double) 0);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver9 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        double[] doubleArray12 = new double[] { (byte) 1, 100 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction13 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray12);
        double double15 = polynomialFunction13.value((double) (short) 100);
        double[] doubleArray16 = polynomialFunction13.getCoefficients();
        org.apache.commons.math.complex.Complex[] complexArray18 = laguerreSolver9.solveAll(doubleArray16, (double) (short) 10);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction19 = laguerreSolver9.getPolynomialFunction();
        laguerreSolver9.setMaximalIterationCount(0);
        double double22 = laguerreSolver9.getFunctionValueAccuracy();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction23 = laguerreSolver9.getPolynomialFunction();
        double double24 = laguerreSolver9.getFunctionValueAccuracy();
        laguerreSolver9.setMaximalIterationCount((int) (short) 1);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction27 = laguerreSolver9.getPolynomialFunction();
        java.lang.Class<?> wildcardClass28 = polynomialFunction27.getClass();
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[0.0, 35.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 10001.0d + "'", double15 == 10001.0d);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(complexArray18);
        org.junit.Assert.assertNotNull(polynomialFunction19);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 1.0E-15d + "'", double22 == 1.0E-15d);
        org.junit.Assert.assertNotNull(polynomialFunction23);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 1.0E-15d + "'", double24 == 1.0E-15d);
        org.junit.Assert.assertNotNull(polynomialFunction27);
        org.junit.Assert.assertNotNull(wildcardClass28);
    }

    @Test
    public void test06258() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06258");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex2 = complex1.sqrt();
        org.apache.commons.math.complex.Complex complex3 = complex2.sin();
        org.apache.commons.math.complex.Complex complex4 = complex0.pow(complex2);
        org.apache.commons.math.complex.Complex complex5 = complex4.asin();
        org.apache.commons.math.complex.Complex complex6 = complex5.atan();
        boolean boolean7 = complex6.isInfinite();
        double double8 = complex6.getImaginary();
        double[] doubleArray14 = new double[] { 0L, '#', 100.0f, 0L, (-1.0d) };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction15 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray14);
        int int16 = polynomialFunction15.degree();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction17 = polynomialFunction15.polynomialDerivative();
        boolean boolean18 = complex6.equals((java.lang.Object) polynomialFunction17);
        int int19 = polynomialFunction17.degree();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction20 = polynomialFunction17.polynomialDerivative();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[0.0, 35.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 4 + "'", int16 == 4);
        org.junit.Assert.assertNotNull(polynomialFunction17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 3 + "'", int19 == 3);
        org.junit.Assert.assertNotNull(polynomialFunction20);
    }

    @Test
    public void test06259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06259");
        double[] doubleArray2 = new double[] { (byte) 1, 100 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) (short) 100);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver6 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction3);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction7 = laguerreSolver6.getPolynomialFunction();
        laguerreSolver6.setRelativeAccuracy((double) 0);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction10 = laguerreSolver6.getPolynomialFunction();
        laguerreSolver6.resetMaximalIterationCount();
        laguerreSolver6.resetMaximalIterationCount();
        laguerreSolver6.resetFunctionValueAccuracy();
        laguerreSolver6.setRelativeAccuracy(64.00000000000502d);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 10001.0d + "'", double5 == 10001.0d);
        org.junit.Assert.assertNotNull(polynomialFunction7);
        org.junit.Assert.assertNotNull(polynomialFunction10);
    }

    @Test
    public void test06260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06260");
        double[] doubleArray2 = new double[] { (byte) 1, 100 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) (short) 100);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver6 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction3);
        double double7 = laguerreSolver6.getAbsoluteAccuracy();
        laguerreSolver6.resetAbsoluteAccuracy();
        laguerreSolver6.setFunctionValueAccuracy(64.0d);
        double double11 = laguerreSolver6.getRelativeAccuracy();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction12 = laguerreSolver6.getPolynomialFunction();
        laguerreSolver6.setFunctionValueAccuracy((-5.62755502169E11d));
        // The following exception was thrown during execution in test generation
        try {
            int int15 = laguerreSolver6.getIterationCount();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: No result available");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 10001.0d + "'", double5 == 10001.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 1.0E-6d + "'", double7 == 1.0E-6d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 1.0E-14d + "'", double11 == 1.0E-14d);
        org.junit.Assert.assertNotNull(polynomialFunction12);
    }

    @Test
    public void test06261() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06261");
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException3 = new org.apache.commons.math.FunctionEvaluationException((-1.0004040611101011E24d), "");
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException4 = new org.apache.commons.math.FunctionEvaluationException((-1.0410151717904442E16d), (java.lang.Throwable) functionEvaluationException3);
        double double5 = functionEvaluationException3.getArgument();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + (-1.0004040611101011E24d) + "'", double5 == (-1.0004040611101011E24d));
    }

    @Test
    public void test06262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06262");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex1 = complex0.cosh();
        double double2 = complex0.abs();
        org.apache.commons.math.complex.Complex complex3 = complex0.conjugate();
        org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex5 = complex4.cosh();
        double double6 = complex4.abs();
        org.apache.commons.math.complex.Complex complex7 = complex4.conjugate();
        org.apache.commons.math.complex.Complex complex8 = complex7.conjugate();
        org.apache.commons.math.complex.Complex complex9 = complex7.tanh();
        org.apache.commons.math.complex.Complex complex10 = complex7.atan();
        org.apache.commons.math.complex.Complex complex11 = complex0.subtract(complex7);
        org.apache.commons.math.complex.Complex complex12 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex13 = complex12.cosh();
        org.apache.commons.math.complex.Complex complex14 = complex12.log();
        org.apache.commons.math.complex.Complex complex15 = complex14.cos();
        double double16 = complex15.abs();
        org.apache.commons.math.complex.Complex complex17 = complex15.tanh();
        org.apache.commons.math.complex.Complex complex18 = complex7.pow(complex15);
        org.apache.commons.math.complex.Complex complex19 = complex7.sin();
        double double20 = complex7.abs();
        org.apache.commons.math.complex.Complex complex21 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex22 = complex21.cosh();
        org.apache.commons.math.complex.Complex complex23 = complex21.log();
        org.apache.commons.math.complex.Complex complex24 = complex23.cos();
        double double25 = complex24.abs();
        org.apache.commons.math.complex.Complex complex26 = complex24.sqrt();
        org.apache.commons.math.complex.Complex complex27 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex29 = complex28.sqrt();
        org.apache.commons.math.complex.Complex complex30 = complex29.sin();
        org.apache.commons.math.complex.Complex complex31 = complex27.pow(complex29);
        org.apache.commons.math.complex.Complex complex32 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex33 = complex32.cosh();
        org.apache.commons.math.complex.Complex complex34 = complex32.log();
        org.apache.commons.math.complex.Complex complex35 = complex27.divide(complex34);
        org.apache.commons.math.complex.Complex complex36 = complex26.subtract(complex35);
        org.apache.commons.math.complex.Complex complex37 = complex35.conjugate();
        org.apache.commons.math.complex.Complex complex38 = complex37.conjugate();
        org.apache.commons.math.complex.Complex complex39 = complex37.cosh();
        org.apache.commons.math.complex.Complex complex40 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex41 = complex40.cosh();
        org.apache.commons.math.complex.Complex complex42 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex43 = complex42.cosh();
        org.apache.commons.math.complex.Complex complex44 = complex42.log();
        org.apache.commons.math.complex.Complex complex45 = complex42.sin();
        org.apache.commons.math.complex.Complex complex46 = complex42.log();
        org.apache.commons.math.complex.Complex complex47 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex48 = complex47.sqrt();
        org.apache.commons.math.complex.Complex complex49 = complex42.divide(complex48);
        org.apache.commons.math.complex.Complex complex50 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex51 = complex50.cosh();
        org.apache.commons.math.complex.Complex complex52 = complex51.acos();
        double double53 = complex51.getReal();
        org.apache.commons.math.complex.Complex complex54 = complex51.sqrt();
        org.apache.commons.math.complex.Complex complex55 = complex42.pow(complex51);
        org.apache.commons.math.complex.Complex complex56 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex57 = complex56.cosh();
        org.apache.commons.math.complex.Complex complex58 = complex56.log();
        org.apache.commons.math.complex.Complex complex59 = complex58.cos();
        org.apache.commons.math.complex.Complex complex60 = complex51.multiply(complex58);
        org.apache.commons.math.complex.Complex complex61 = complex58.tanh();
        org.apache.commons.math.complex.Complex complex62 = complex40.divide(complex58);
        org.apache.commons.math.complex.Complex complex63 = complex58.atan();
        org.apache.commons.math.complex.Complex complex64 = complex63.conjugate();
        org.apache.commons.math.complex.Complex complex65 = complex37.divide(complex63);
        org.apache.commons.math.complex.Complex complex66 = complex63.exp();
        org.apache.commons.math.complex.Complex complex67 = complex7.multiply(complex63);
        java.lang.Class<?> wildcardClass68 = complex7.getClass();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + Double.POSITIVE_INFINITY + "'", double2 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + Double.POSITIVE_INFINITY + "'", double6 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + Double.POSITIVE_INFINITY + "'", double20 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertTrue(Double.isNaN(double53));
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(wildcardClass68);
    }

    @Test
    public void test06263() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06263");
        double[] doubleArray3 = new double[] { (byte) 1, 100 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction4 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray3);
        double double6 = polynomialFunction4.value((double) (short) 100);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction4);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction8 = laguerreSolver7.getPolynomialFunction();
        laguerreSolver7.setRelativeAccuracy((double) 0);
        double[] doubleArray13 = new double[] { (byte) -1, '#' };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction14 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray13);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction15 = polynomialFunction14.polynomialDerivative();
        double[] doubleArray16 = polynomialFunction14.getCoefficients();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction17 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray16);
        org.apache.commons.math.complex.Complex[] complexArray19 = laguerreSolver7.solveAll(doubleArray16, (double) 4);
        laguerreSolver7.setAbsoluteAccuracy((double) 1);
        double double22 = laguerreSolver7.getRelativeAccuracy();
        double double23 = laguerreSolver7.getResult();
        laguerreSolver7.setAbsoluteAccuracy((double) 32);
        double[] doubleArray31 = new double[] { 0L, '#', 100.0f, 0L, (-1.0d) };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction32 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray31);
        double double34 = polynomialFunction32.value((double) 0);
        double double36 = polynomialFunction32.value((double) (byte) 0);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction37 = polynomialFunction32.polynomialDerivative();
        double[] doubleArray38 = polynomialFunction32.getCoefficients();
        org.apache.commons.math.complex.Complex[] complexArray40 = laguerreSolver7.solveAll(doubleArray38, (-3.464877501E9d));
        java.lang.Object[] objArray47 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException48 = new org.apache.commons.math.ConvergenceException("", objArray47);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException49 = new org.apache.commons.math.FunctionEvaluationException((double) (short) 10, "hi!", objArray47);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException50 = new org.apache.commons.math.FunctionEvaluationException(0.0d, "org.apache.commons.math.FunctionEvaluationException: ", objArray47);
        java.lang.Object[] objArray52 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException53 = new org.apache.commons.math.ConvergenceException("", objArray52);
        java.lang.Object[] objArray58 = new java.lang.Object[] { 0.0f, (short) 1 };
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException59 = new org.apache.commons.math.MaxIterationsExceededException(100, "", objArray58);
        convergenceException53.addSuppressed((java.lang.Throwable) maxIterationsExceededException59);
        org.apache.commons.math.ConvergenceException convergenceException61 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.FunctionEvaluationException: ", objArray47, (java.lang.Throwable) maxIterationsExceededException59);
        int int62 = maxIterationsExceededException59.getMaxIterations();
        org.apache.commons.math.ConvergenceException convergenceException63 = new org.apache.commons.math.ConvergenceException("", (java.lang.Object[]) complexArray40, (java.lang.Throwable) maxIterationsExceededException59);
        int int64 = maxIterationsExceededException59.getMaxIterations();
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 10001.0d + "'", double6 == 10001.0d);
        org.junit.Assert.assertNotNull(polynomialFunction8);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[-1.0, 35.0]");
        org.junit.Assert.assertNotNull(polynomialFunction15);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[-1.0, 35.0]");
        org.junit.Assert.assertNotNull(complexArray19);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[0.0, 35.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.0d + "'", double34 == 0.0d);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 0.0d + "'", double36 == 0.0d);
        org.junit.Assert.assertNotNull(polynomialFunction37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[0.0, 35.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(complexArray40);
        org.junit.Assert.assertNotNull(objArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray47), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray47), "[]");
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[]");
        org.junit.Assert.assertNotNull(objArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray58), "[0.0, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray58), "[0.0, 1]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 100 + "'", int62 == 100);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 100 + "'", int64 == 100);
    }

    @Test
    public void test06264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06264");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex1 = complex0.sqrt();
        org.apache.commons.math.complex.Complex complex2 = complex1.sin();
        org.apache.commons.math.complex.Complex complex3 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex4 = complex3.sqrt();
        org.apache.commons.math.complex.Complex complex5 = complex4.sin();
        org.apache.commons.math.complex.Complex complex6 = complex1.multiply(complex4);
        org.apache.commons.math.complex.Complex complex7 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex8 = complex7.cosh();
        double double9 = complex7.abs();
        org.apache.commons.math.complex.Complex complex10 = complex7.conjugate();
        org.apache.commons.math.complex.Complex complex11 = complex10.conjugate();
        boolean boolean12 = complex10.isInfinite();
        org.apache.commons.math.complex.Complex complex13 = complex10.cos();
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex15 = complex14.cosh();
        double double16 = complex14.abs();
        org.apache.commons.math.complex.Complex complex17 = complex14.conjugate();
        org.apache.commons.math.complex.Complex complex18 = complex17.conjugate();
        boolean boolean19 = complex17.isInfinite();
        org.apache.commons.math.complex.Complex complex20 = complex17.asin();
        boolean boolean21 = complex17.isNaN();
        org.apache.commons.math.complex.Complex complex22 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex23 = complex22.cosh();
        org.apache.commons.math.complex.Complex complex24 = complex17.divide(complex22);
        org.apache.commons.math.complex.Complex complex25 = complex13.divide(complex22);
        org.apache.commons.math.complex.Complex complex26 = complex1.subtract(complex13);
        org.apache.commons.math.complex.Complex complex27 = complex26.asin();
        org.apache.commons.math.complex.Complex complex28 = complex27.tanh();
        org.apache.commons.math.complex.Complex complex29 = complex28.cosh();
        double double30 = complex29.getImaginary();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + Double.POSITIVE_INFINITY + "'", double9 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + Double.POSITIVE_INFINITY + "'", double16 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertTrue(Double.isNaN(double30));
    }

    @Test
    public void test06265() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06265");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex1 = complex0.cosh();
        double double2 = complex0.abs();
        org.apache.commons.math.complex.Complex complex3 = complex0.conjugate();
        org.apache.commons.math.complex.Complex complex4 = complex3.conjugate();
        org.apache.commons.math.complex.Complex complex5 = complex3.tanh();
        org.apache.commons.math.complex.Complex complex6 = complex5.tan();
        org.apache.commons.math.complex.Complex complex7 = complex6.conjugate();
        org.apache.commons.math.complex.Complex complex8 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex9 = complex8.cosh();
        double double10 = complex8.abs();
        org.apache.commons.math.complex.Complex complex11 = complex8.conjugate();
        org.apache.commons.math.complex.Complex complex12 = complex11.conjugate();
        boolean boolean13 = complex11.isInfinite();
        org.apache.commons.math.complex.Complex complex14 = complex11.cos();
        org.apache.commons.math.complex.Complex complex15 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex16 = complex15.cosh();
        double double17 = complex15.abs();
        org.apache.commons.math.complex.Complex complex18 = complex15.conjugate();
        org.apache.commons.math.complex.Complex complex19 = complex18.conjugate();
        boolean boolean20 = complex18.isInfinite();
        org.apache.commons.math.complex.Complex complex21 = complex18.asin();
        boolean boolean22 = complex18.isNaN();
        org.apache.commons.math.complex.Complex complex23 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex24 = complex23.cosh();
        org.apache.commons.math.complex.Complex complex25 = complex18.divide(complex23);
        org.apache.commons.math.complex.Complex complex26 = complex14.divide(complex23);
        org.apache.commons.math.complex.Complex complex27 = complex23.sinh();
        org.apache.commons.math.complex.Complex complex28 = complex7.multiply(complex23);
        java.lang.Object obj29 = null;
        boolean boolean30 = complex23.equals(obj29);
        org.apache.commons.math.complex.Complex complex31 = complex23.acos();
        org.apache.commons.math.complex.Complex complex32 = complex23.negate();
        double double33 = complex23.getImaginary();
        double double34 = complex23.getReal();
        org.apache.commons.math.complex.Complex complex35 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex36 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex37 = complex36.sqrt();
        org.apache.commons.math.complex.Complex complex38 = complex37.sin();
        org.apache.commons.math.complex.Complex complex39 = complex35.pow(complex37);
        org.apache.commons.math.complex.Complex complex40 = complex39.asin();
        org.apache.commons.math.complex.Complex complex41 = complex40.atan();
        boolean boolean42 = complex41.isInfinite();
        org.apache.commons.math.complex.Complex complex43 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex44 = complex41.subtract(complex43);
        org.apache.commons.math.complex.Complex complex45 = complex43.tan();
        org.apache.commons.math.complex.Complex complex46 = complex43.sinh();
        org.apache.commons.math.complex.Complex complex47 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex48 = complex47.cosh();
        double double49 = complex47.abs();
        org.apache.commons.math.complex.Complex complex50 = complex47.conjugate();
        org.apache.commons.math.complex.Complex complex51 = complex50.conjugate();
        boolean boolean52 = complex50.isInfinite();
        org.apache.commons.math.complex.Complex complex53 = complex50.cos();
        org.apache.commons.math.complex.Complex complex54 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex55 = complex54.cosh();
        double double56 = complex54.abs();
        org.apache.commons.math.complex.Complex complex57 = complex54.conjugate();
        org.apache.commons.math.complex.Complex complex58 = complex57.conjugate();
        boolean boolean59 = complex57.isInfinite();
        org.apache.commons.math.complex.Complex complex60 = complex57.asin();
        boolean boolean61 = complex57.isNaN();
        org.apache.commons.math.complex.Complex complex62 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex63 = complex62.cosh();
        org.apache.commons.math.complex.Complex complex64 = complex57.divide(complex62);
        org.apache.commons.math.complex.Complex complex65 = complex53.divide(complex62);
        org.apache.commons.math.complex.Complex complex66 = complex62.sinh();
        org.apache.commons.math.complex.Complex complex67 = complex66.conjugate();
        org.apache.commons.math.complex.Complex complex68 = complex66.acos();
        org.apache.commons.math.complex.Complex complex69 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex70 = complex69.cosh();
        org.apache.commons.math.complex.Complex complex71 = complex70.acos();
        org.apache.commons.math.complex.Complex complex72 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex73 = complex72.cosh();
        org.apache.commons.math.complex.Complex complex74 = complex72.log();
        org.apache.commons.math.complex.Complex complex75 = complex72.sin();
        org.apache.commons.math.complex.Complex complex76 = complex75.tanh();
        org.apache.commons.math.complex.Complex complex77 = complex70.add(complex76);
        org.apache.commons.math.complex.Complex complex78 = complex68.pow(complex76);
        org.apache.commons.math.complex.Complex complex79 = complex43.add(complex68);
        org.apache.commons.math.complex.Complex complex80 = complex23.subtract(complex68);
        org.apache.commons.math.complex.Complex complex81 = complex68.exp();
        org.apache.commons.math.complex.Complex complex82 = complex81.atan();
        org.apache.commons.math.complex.Complex complex83 = complex81.cos();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + Double.POSITIVE_INFINITY + "'", double2 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + Double.POSITIVE_INFINITY + "'", double10 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + Double.POSITIVE_INFINITY + "'", double17 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + Double.POSITIVE_INFINITY + "'", double33 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + Double.POSITIVE_INFINITY + "'", double34 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + Double.POSITIVE_INFINITY + "'", double49 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + Double.POSITIVE_INFINITY + "'", double56 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertNotNull(complex75);
        org.junit.Assert.assertNotNull(complex76);
        org.junit.Assert.assertNotNull(complex77);
        org.junit.Assert.assertNotNull(complex78);
        org.junit.Assert.assertNotNull(complex79);
        org.junit.Assert.assertNotNull(complex80);
        org.junit.Assert.assertNotNull(complex81);
        org.junit.Assert.assertNotNull(complex82);
        org.junit.Assert.assertNotNull(complex83);
    }

    @Test
    public void test06266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06266");
        org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex5 = complex4.sqrt();
        org.apache.commons.math.complex.Complex complex6 = complex5.sin();
        org.apache.commons.math.complex.Complex complex7 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex8 = complex7.sqrt();
        org.apache.commons.math.complex.Complex complex9 = complex8.sin();
        org.apache.commons.math.complex.Complex complex10 = complex5.multiply(complex8);
        org.apache.commons.math.complex.Complex complex11 = complex10.sinh();
        org.apache.commons.math.complex.Complex complex12 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex13 = complex12.cosh();
        java.lang.Object[] objArray16 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException17 = new org.apache.commons.math.ConvergenceException("", objArray16);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException18 = new org.apache.commons.math.FunctionEvaluationException(10.0d, (java.lang.Throwable) convergenceException17);
        boolean boolean19 = complex12.equals((java.lang.Object) functionEvaluationException18);
        boolean boolean20 = complex11.equals((java.lang.Object) functionEvaluationException18);
        java.lang.String str21 = functionEvaluationException18.getPattern();
        java.lang.Throwable[] throwableArray22 = functionEvaluationException18.getSuppressed();
        java.lang.Object[] objArray29 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException30 = new org.apache.commons.math.ConvergenceException("", objArray29);
        java.lang.Object[] objArray32 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException33 = new org.apache.commons.math.ConvergenceException("", objArray32);
        org.apache.commons.math.ConvergenceException convergenceException34 = new org.apache.commons.math.ConvergenceException("", objArray29, (java.lang.Throwable) convergenceException33);
        org.apache.commons.math.ConvergenceException convergenceException35 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.FunctionEvaluationException: ", objArray29);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException38 = new org.apache.commons.math.FunctionEvaluationException((double) 1, "org.apache.commons.math.MaxIterationsExceededException: org.apache.commons.math.FunctionEvaluationException: ");
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException39 = new org.apache.commons.math.FunctionEvaluationException((double) 3, "org.apache.commons.math.FunctionEvaluationException: org.apache.commons.math.FunctionEvaluationException: ", objArray29, (java.lang.Throwable) functionEvaluationException38);
        org.apache.commons.math.ConvergenceException convergenceException40 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.FunctionEvaluationException: org.apache.commons.math.ConvergenceException: Convergence failed", (java.lang.Throwable) functionEvaluationException38);
        org.apache.commons.math.ConvergenceException convergenceException41 = new org.apache.commons.math.ConvergenceException("", (java.lang.Object[]) throwableArray22, (java.lang.Throwable) convergenceException40);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException42 = new org.apache.commons.math.MaxIterationsExceededException(14, "org.apache.commons.math.FunctionEvaluationException: Evaluation failed for argument = {0}", (java.lang.Object[]) throwableArray22);
        int int43 = maxIterationsExceededException42.getMaxIterations();
        java.lang.Object[] objArray44 = maxIterationsExceededException42.getArguments();
        org.apache.commons.math.ConvergenceException convergenceException45 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.FunctionEvaluationException: Evaluation failed for argument = 100", objArray44);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(objArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray16), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray16), "[]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(throwableArray22);
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray29), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray29), "[]");
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 14 + "'", int43 == 14);
        org.junit.Assert.assertNotNull(objArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray44), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray44), "[]");
    }

    @Test
    public void test06267() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06267");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex1 = complex0.sqrt();
        org.apache.commons.math.complex.Complex complex2 = complex1.sin();
        org.apache.commons.math.complex.Complex complex3 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex4 = complex3.sqrt();
        org.apache.commons.math.complex.Complex complex5 = complex4.sin();
        org.apache.commons.math.complex.Complex complex6 = complex1.multiply(complex4);
        org.apache.commons.math.complex.Complex complex7 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex8 = complex7.cosh();
        double double9 = complex7.abs();
        org.apache.commons.math.complex.Complex complex10 = complex7.conjugate();
        org.apache.commons.math.complex.Complex complex11 = complex10.conjugate();
        boolean boolean12 = complex10.isInfinite();
        org.apache.commons.math.complex.Complex complex13 = complex10.cos();
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex15 = complex14.cosh();
        double double16 = complex14.abs();
        org.apache.commons.math.complex.Complex complex17 = complex14.conjugate();
        org.apache.commons.math.complex.Complex complex18 = complex17.conjugate();
        boolean boolean19 = complex17.isInfinite();
        org.apache.commons.math.complex.Complex complex20 = complex17.asin();
        boolean boolean21 = complex17.isNaN();
        org.apache.commons.math.complex.Complex complex22 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex23 = complex22.cosh();
        org.apache.commons.math.complex.Complex complex24 = complex17.divide(complex22);
        org.apache.commons.math.complex.Complex complex25 = complex13.divide(complex22);
        org.apache.commons.math.complex.Complex complex26 = complex1.subtract(complex13);
        org.apache.commons.math.complex.Complex complex27 = complex26.sinh();
        org.apache.commons.math.complex.Complex complex28 = complex26.cosh();
        org.apache.commons.math.complex.Complex complex29 = complex28.exp();
        org.apache.commons.math.complex.Complex complex30 = complex28.cosh();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + Double.POSITIVE_INFINITY + "'", double9 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + Double.POSITIVE_INFINITY + "'", double16 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
    }

    @Test
    public void test06268() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06268");
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException2 = new org.apache.commons.math.FunctionEvaluationException((-1.9649899E7d), "org.apache.commons.math.ConvergenceException: org.apache.commons.math.MaxIterationsExceededException: org.apache.commons.math.FunctionEvaluationException: org.apache.commons.math.FunctionEvaluationException: ");
    }

    @Test
    public void test06269() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06269");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex1 = complex0.sqrt();
        org.apache.commons.math.complex.Complex complex2 = complex1.sin();
        org.apache.commons.math.complex.Complex complex3 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex4 = complex3.cosh();
        double double5 = complex3.abs();
        org.apache.commons.math.complex.Complex complex6 = complex3.conjugate();
        org.apache.commons.math.complex.Complex complex7 = complex6.conjugate();
        boolean boolean8 = complex6.isInfinite();
        org.apache.commons.math.complex.Complex complex9 = complex6.cos();
        org.apache.commons.math.complex.Complex complex10 = complex2.add(complex6);
        org.apache.commons.math.complex.Complex complex11 = complex2.conjugate();
        org.apache.commons.math.complex.Complex complex12 = complex2.negate();
        org.apache.commons.math.complex.Complex complex13 = null;
        org.apache.commons.math.complex.Complex complex14 = complex2.multiply(complex13);
        org.apache.commons.math.complex.Complex complex15 = complex2.cosh();
        org.apache.commons.math.complex.Complex complex16 = complex2.sqrt1z();
        org.apache.commons.math.complex.Complex complex17 = complex16.sin();
        org.apache.commons.math.complex.Complex complex18 = complex16.cosh();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + Double.POSITIVE_INFINITY + "'", double5 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
    }

    @Test
    public void test06270() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06270");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex1 = complex0.cosh();
        double double2 = complex0.abs();
        org.apache.commons.math.complex.Complex complex3 = complex0.conjugate();
        org.apache.commons.math.complex.Complex complex4 = complex3.conjugate();
        boolean boolean5 = complex3.isInfinite();
        org.apache.commons.math.complex.Complex complex6 = complex3.cos();
        org.apache.commons.math.complex.Complex complex7 = complex3.conjugate();
        org.apache.commons.math.complex.Complex complex8 = complex3.sin();
        boolean boolean9 = complex3.isNaN();
        org.apache.commons.math.complex.Complex complex10 = complex3.sqrt();
        org.apache.commons.math.complex.Complex complex11 = complex10.sin();
        org.apache.commons.math.complex.Complex complex14 = new org.apache.commons.math.complex.Complex((double) (short) 100, Double.NaN);
        org.apache.commons.math.complex.Complex complex15 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex16 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex17 = complex16.sqrt();
        org.apache.commons.math.complex.Complex complex18 = complex17.sin();
        org.apache.commons.math.complex.Complex complex19 = complex15.pow(complex17);
        org.apache.commons.math.complex.Complex complex20 = complex19.asin();
        org.apache.commons.math.complex.Complex complex21 = complex20.atan();
        boolean boolean22 = complex21.isInfinite();
        org.apache.commons.math.complex.Complex complex23 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex24 = complex21.subtract(complex23);
        org.apache.commons.math.complex.Complex complex25 = complex21.conjugate();
        org.apache.commons.math.complex.Complex complex26 = complex21.tan();
        org.apache.commons.math.complex.Complex complex27 = complex26.sinh();
        org.apache.commons.math.complex.Complex complex28 = complex26.cosh();
        org.apache.commons.math.complex.Complex complex29 = complex14.multiply(complex28);
        boolean boolean30 = complex11.equals((java.lang.Object) complex28);
        org.apache.commons.math.complex.Complex complex31 = complex28.sqrt();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + Double.POSITIVE_INFINITY + "'", double2 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(complex31);
    }

    @Test
    public void test06271() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06271");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex1 = complex0.cosh();
        org.apache.commons.math.complex.Complex complex2 = complex0.log();
        double double3 = complex2.getImaginary();
        double double4 = complex2.getImaginary();
        org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex6 = complex5.cosh();
        org.apache.commons.math.complex.Complex complex7 = complex6.acos();
        double double8 = complex6.getReal();
        org.apache.commons.math.complex.Complex complex9 = complex6.sqrt();
        org.apache.commons.math.complex.Complex complex10 = complex2.subtract(complex6);
        org.apache.commons.math.complex.Complex complex11 = complex10.log();
        org.apache.commons.math.complex.Complex complex12 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex14 = complex13.sqrt();
        org.apache.commons.math.complex.Complex complex15 = complex14.sin();
        org.apache.commons.math.complex.Complex complex16 = complex12.pow(complex14);
        org.apache.commons.math.complex.Complex complex17 = complex16.asin();
        org.apache.commons.math.complex.Complex complex18 = complex16.tan();
        org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex20 = complex19.cosh();
        double double21 = complex19.abs();
        org.apache.commons.math.complex.Complex complex22 = complex19.conjugate();
        org.apache.commons.math.complex.Complex complex23 = complex22.conjugate();
        boolean boolean24 = complex22.isInfinite();
        org.apache.commons.math.complex.Complex complex25 = complex22.asin();
        boolean boolean26 = complex22.isNaN();
        org.apache.commons.math.complex.Complex complex27 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex28 = complex27.cosh();
        org.apache.commons.math.complex.Complex complex29 = complex22.divide(complex27);
        org.apache.commons.math.complex.Complex complex30 = complex18.pow(complex27);
        org.apache.commons.math.complex.Complex complex31 = complex18.sinh();
        org.apache.commons.math.complex.Complex complex32 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex33 = complex32.cosh();
        double double34 = complex32.abs();
        org.apache.commons.math.complex.Complex complex35 = complex32.conjugate();
        org.apache.commons.math.complex.Complex complex36 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex37 = complex36.sqrt();
        boolean boolean38 = complex36.isNaN();
        org.apache.commons.math.complex.Complex complex39 = complex36.sin();
        org.apache.commons.math.complex.Complex complex40 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex41 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex42 = complex41.sqrt();
        org.apache.commons.math.complex.Complex complex43 = complex42.sin();
        org.apache.commons.math.complex.Complex complex44 = complex40.pow(complex42);
        org.apache.commons.math.complex.Complex complex45 = complex44.asin();
        org.apache.commons.math.complex.Complex complex46 = complex45.atan();
        boolean boolean47 = complex46.isInfinite();
        org.apache.commons.math.complex.Complex complex48 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex49 = complex46.subtract(complex48);
        org.apache.commons.math.complex.Complex complex50 = complex49.sin();
        org.apache.commons.math.complex.Complex complex51 = complex36.divide(complex50);
        org.apache.commons.math.complex.Complex complex52 = complex32.subtract(complex50);
        boolean boolean53 = complex52.isNaN();
        org.apache.commons.math.complex.Complex complex54 = complex31.subtract(complex52);
        boolean boolean55 = complex10.equals((java.lang.Object) complex52);
        double double56 = complex10.getImaginary();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.7853981633974483d + "'", double3 == 0.7853981633974483d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.7853981633974483d + "'", double4 == 0.7853981633974483d);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + Double.POSITIVE_INFINITY + "'", double21 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + Double.POSITIVE_INFINITY + "'", double34 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double56));
    }

    @Test
    public void test06272() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06272");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex1 = complex0.cosh();
        org.apache.commons.math.complex.Complex complex2 = complex0.log();
        double double3 = complex0.getImaginary();
        double double4 = complex0.getImaginary();
        org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex6 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex7 = complex6.sqrt();
        org.apache.commons.math.complex.Complex complex8 = complex7.sin();
        org.apache.commons.math.complex.Complex complex9 = complex5.pow(complex7);
        org.apache.commons.math.complex.Complex complex10 = complex9.asin();
        org.apache.commons.math.complex.Complex complex11 = complex10.atan();
        boolean boolean12 = complex11.isInfinite();
        org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex14 = complex11.subtract(complex13);
        org.apache.commons.math.complex.Complex complex15 = complex14.sqrt();
        org.apache.commons.math.complex.Complex complex16 = complex0.divide(complex15);
        double double17 = complex15.getImaginary();
        org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex19 = complex18.cosh();
        double double20 = complex18.abs();
        org.apache.commons.math.complex.Complex complex21 = complex18.conjugate();
        org.apache.commons.math.complex.Complex complex22 = complex21.conjugate();
        org.apache.commons.math.complex.Complex complex23 = complex21.tanh();
        org.apache.commons.math.complex.Complex complex24 = complex23.tan();
        org.apache.commons.math.complex.Complex complex25 = complex24.conjugate();
        org.apache.commons.math.complex.Complex complex26 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex27 = complex26.cosh();
        double double28 = complex26.abs();
        org.apache.commons.math.complex.Complex complex29 = complex26.conjugate();
        org.apache.commons.math.complex.Complex complex30 = complex29.conjugate();
        boolean boolean31 = complex29.isInfinite();
        org.apache.commons.math.complex.Complex complex32 = complex29.cos();
        org.apache.commons.math.complex.Complex complex33 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex34 = complex33.cosh();
        double double35 = complex33.abs();
        org.apache.commons.math.complex.Complex complex36 = complex33.conjugate();
        org.apache.commons.math.complex.Complex complex37 = complex36.conjugate();
        boolean boolean38 = complex36.isInfinite();
        org.apache.commons.math.complex.Complex complex39 = complex36.asin();
        boolean boolean40 = complex36.isNaN();
        org.apache.commons.math.complex.Complex complex41 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex42 = complex41.cosh();
        org.apache.commons.math.complex.Complex complex43 = complex36.divide(complex41);
        org.apache.commons.math.complex.Complex complex44 = complex32.divide(complex41);
        org.apache.commons.math.complex.Complex complex45 = complex41.sinh();
        org.apache.commons.math.complex.Complex complex46 = complex25.multiply(complex41);
        org.apache.commons.math.complex.Complex complex47 = complex46.sin();
        org.apache.commons.math.complex.Complex complex48 = complex47.negate();
        org.apache.commons.math.complex.Complex complex49 = complex47.sinh();
        org.apache.commons.math.complex.Complex complex50 = complex15.pow(complex49);
        org.apache.commons.math.complex.Complex complex51 = complex15.conjugate();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + Double.POSITIVE_INFINITY + "'", double3 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + Double.POSITIVE_INFINITY + "'", double4 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + Double.POSITIVE_INFINITY + "'", double20 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + Double.POSITIVE_INFINITY + "'", double28 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + Double.POSITIVE_INFINITY + "'", double35 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
    }

    @Test
    public void test06273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06273");
        double[] doubleArray2 = new double[] { (byte) 1, 100 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) (short) 100);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver6 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction3);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction7 = laguerreSolver6.getPolynomialFunction();
        laguerreSolver6.setRelativeAccuracy((double) 0);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction10 = laguerreSolver6.getPolynomialFunction();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction11 = polynomialFunction10.polynomialDerivative();
        double double13 = polynomialFunction10.value((double) ' ');
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction14 = polynomialFunction10.polynomialDerivative();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction15 = polynomialFunction14.polynomialDerivative();
        double[] doubleArray16 = polynomialFunction15.getCoefficients();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction17 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray16);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 10001.0d + "'", double5 == 10001.0d);
        org.junit.Assert.assertNotNull(polynomialFunction7);
        org.junit.Assert.assertNotNull(polynomialFunction10);
        org.junit.Assert.assertNotNull(polynomialFunction11);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 3201.0d + "'", double13 == 3201.0d);
        org.junit.Assert.assertNotNull(polynomialFunction14);
        org.junit.Assert.assertNotNull(polynomialFunction15);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[0.0]");
    }

    @Test
    public void test06274() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06274");
        java.lang.Object[] objArray11 = new java.lang.Object[] { 0.0f, (short) 1 };
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException12 = new org.apache.commons.math.MaxIterationsExceededException(100, "", objArray11);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException13 = new org.apache.commons.math.FunctionEvaluationException(35.0d, "hi!", objArray11);
        java.lang.Throwable throwable14 = null;
        org.apache.commons.math.ConvergenceException convergenceException15 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.MaxIterationsExceededException: org.apache.commons.math.FunctionEvaluationException: ", objArray11, throwable14);
        java.lang.Object[] objArray19 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException20 = new org.apache.commons.math.ConvergenceException("", objArray19);
        java.lang.Object[] objArray25 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException26 = new org.apache.commons.math.ConvergenceException("", objArray25);
        java.lang.Object[] objArray28 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException29 = new org.apache.commons.math.ConvergenceException("", objArray28);
        org.apache.commons.math.ConvergenceException convergenceException30 = new org.apache.commons.math.ConvergenceException("", objArray25, (java.lang.Throwable) convergenceException29);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException32 = new org.apache.commons.math.FunctionEvaluationException((double) 100);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException33 = new org.apache.commons.math.FunctionEvaluationException(100.0d, "org.apache.commons.math.ConvergenceException: hi!", objArray25, (java.lang.Throwable) functionEvaluationException32);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException34 = new org.apache.commons.math.FunctionEvaluationException((double) '#', "", objArray19, (java.lang.Throwable) functionEvaluationException33);
        java.lang.String str35 = functionEvaluationException34.getPattern();
        double double36 = functionEvaluationException34.getArgument();
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException37 = new org.apache.commons.math.FunctionEvaluationException(101.01d, "", objArray11, (java.lang.Throwable) functionEvaluationException34);
        java.lang.Object[] objArray38 = functionEvaluationException34.getArguments();
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException39 = new org.apache.commons.math.FunctionEvaluationException(21.0d, "org.apache.commons.math.ConvergenceException: org.apache.commons.math.FunctionEvaluationException: Evaluation failed for argument = 10,001", objArray38);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[0.0, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[0.0, 1]");
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[]");
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[]");
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 35.0d + "'", double36 == 35.0d);
        org.junit.Assert.assertNotNull(objArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray38), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray38), "[]");
    }

    @Test
    public void test06275() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06275");
        java.lang.Throwable throwable1 = null;
        org.apache.commons.math.ConvergenceException convergenceException2 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.FunctionEvaluationException: org.apache.commons.math.FunctionEvaluationException: org.apache.commons.math.FunctionEvaluationException: ", throwable1);
    }

    @Test
    public void test06276() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06276");
        double[] doubleArray2 = new double[] { (byte) 1, 100 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) (short) 100);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver6 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction3);
        double double10 = laguerreSolver6.solve((double) (-1L), 349.0d, (double) (short) 10);
        laguerreSolver6.setMaximalIterationCount((int) '#');
        laguerreSolver6.setMaximalIterationCount((int) ' ');
        double double15 = laguerreSolver6.getRelativeAccuracy();
        double double16 = laguerreSolver6.getAbsoluteAccuracy();
        laguerreSolver6.setRelativeAccuracy(1.0d);
        double double19 = laguerreSolver6.getFunctionValueAccuracy();
        laguerreSolver6.resetAbsoluteAccuracy();
        double double21 = laguerreSolver6.getAbsoluteAccuracy();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 10001.0d + "'", double5 == 10001.0d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + (-0.01d) + "'", double10 == (-0.01d));
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 1.0E-14d + "'", double15 == 1.0E-14d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 1.0E-6d + "'", double16 == 1.0E-6d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 1.0E-15d + "'", double19 == 1.0E-15d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0E-6d + "'", double21 == 1.0E-6d);
    }

    @Test
    public void test06277() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06277");
        double[] doubleArray2 = new double[] { (byte) 1, 100 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) (short) 100);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver6 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction3);
        double double10 = laguerreSolver6.solve((double) (-1L), 349.0d, (double) (short) 10);
        double[] doubleArray13 = new double[] { (byte) 1, 100 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction14 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray13);
        double double16 = polynomialFunction14.value((double) (short) 100);
        double[] doubleArray17 = polynomialFunction14.getCoefficients();
        org.apache.commons.math.complex.Complex[] complexArray19 = laguerreSolver6.solveAll(doubleArray17, (double) (byte) 1);
        laguerreSolver6.resetAbsoluteAccuracy();
        laguerreSolver6.setRelativeAccuracy((double) 32);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction23 = laguerreSolver6.getPolynomialFunction();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver24 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction23);
        laguerreSolver24.setAbsoluteAccuracy(10101.0d);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 10001.0d + "'", double5 == 10001.0d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + (-0.01d) + "'", double10 == (-0.01d));
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 10001.0d + "'", double16 == 10001.0d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(complexArray19);
        org.junit.Assert.assertNotNull(polynomialFunction23);
    }

    @Test
    public void test06278() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06278");
        double[] doubleArray2 = new double[] { (byte) 1, 100 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) (short) 100);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver6 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction3);
        double double10 = laguerreSolver6.solve((double) (-1L), 349.0d, (double) (short) 10);
        double[] doubleArray13 = new double[] { (byte) 1, 100 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction14 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray13);
        double double16 = polynomialFunction14.value((double) (short) 100);
        double[] doubleArray17 = polynomialFunction14.getCoefficients();
        org.apache.commons.math.complex.Complex[] complexArray19 = laguerreSolver6.solveAll(doubleArray17, (double) (byte) 1);
        laguerreSolver6.resetAbsoluteAccuracy();
        laguerreSolver6.setRelativeAccuracy((double) 32);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction23 = laguerreSolver6.getPolynomialFunction();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver24 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction23);
        double double25 = laguerreSolver24.getFunctionValueAccuracy();
        laguerreSolver24.setRelativeAccuracy(4.5126449834479465E48d);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 10001.0d + "'", double5 == 10001.0d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + (-0.01d) + "'", double10 == (-0.01d));
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 10001.0d + "'", double16 == 10001.0d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(complexArray19);
        org.junit.Assert.assertNotNull(polynomialFunction23);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 1.0E-15d + "'", double25 == 1.0E-15d);
    }

    @Test
    public void test06279() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06279");
        java.lang.Object[] objArray14 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException15 = new org.apache.commons.math.ConvergenceException("", objArray14);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException16 = new org.apache.commons.math.MaxIterationsExceededException(0, "hi!", objArray14);
        org.apache.commons.math.ConvergenceException convergenceException18 = new org.apache.commons.math.ConvergenceException("");
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException19 = new org.apache.commons.math.FunctionEvaluationException((double) (short) 0, "hi!", objArray14, (java.lang.Throwable) convergenceException18);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException20 = new org.apache.commons.math.MaxIterationsExceededException((int) (byte) 100, "", objArray14);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException21 = new org.apache.commons.math.FunctionEvaluationException(1.0d, "", objArray14);
        org.apache.commons.math.ConvergenceException convergenceException22 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.MaxIterationsExceededException: org.apache.commons.math.FunctionEvaluationException: ", objArray14);
        org.apache.commons.math.ConvergenceException convergenceException23 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.MaxIterationsExceededException: org.apache.commons.math.FunctionEvaluationException: ", objArray14);
        org.apache.commons.math.ConvergenceException convergenceException24 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.FunctionEvaluationException: Evaluation failed for argument = 100", objArray14);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException33 = new org.apache.commons.math.FunctionEvaluationException((double) 100);
        java.lang.Object[] objArray34 = functionEvaluationException33.getArguments();
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException35 = new org.apache.commons.math.FunctionEvaluationException((double) 0.0f, "org.apache.commons.math.ConvergenceException: Convergence failed", objArray34);
        java.lang.Object[] objArray44 = new java.lang.Object[] { 0.0f, (short) 1 };
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException45 = new org.apache.commons.math.MaxIterationsExceededException(100, "", objArray44);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException46 = new org.apache.commons.math.MaxIterationsExceededException((int) ' ', "hi!", objArray44);
        java.lang.Object[] objArray51 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException52 = new org.apache.commons.math.ConvergenceException("", objArray51);
        java.lang.Object[] objArray54 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException55 = new org.apache.commons.math.ConvergenceException("", objArray54);
        org.apache.commons.math.ConvergenceException convergenceException56 = new org.apache.commons.math.ConvergenceException("", objArray51, (java.lang.Throwable) convergenceException55);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException58 = new org.apache.commons.math.FunctionEvaluationException((double) 100);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException59 = new org.apache.commons.math.FunctionEvaluationException(100.0d, "org.apache.commons.math.ConvergenceException: hi!", objArray51, (java.lang.Throwable) functionEvaluationException58);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException60 = new org.apache.commons.math.FunctionEvaluationException((double) 100L, "org.apache.commons.math.ConvergenceException: hi!", objArray44, (java.lang.Throwable) functionEvaluationException59);
        double double61 = functionEvaluationException59.getArgument();
        org.apache.commons.math.ConvergenceException convergenceException62 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) functionEvaluationException59);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException63 = new org.apache.commons.math.FunctionEvaluationException((-0.01d), "org.apache.commons.math.ConvergenceException: Convergence failed", objArray34, (java.lang.Throwable) convergenceException62);
        org.apache.commons.math.ConvergenceException convergenceException64 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.FunctionEvaluationException: ", (java.lang.Throwable) functionEvaluationException63);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException65 = new org.apache.commons.math.FunctionEvaluationException(130099.9d, "org.apache.commons.math.ConvergenceException: org.apache.commons.math.FunctionEvaluationException: org.apache.commons.math.ConvergenceException: Convergence failed", (java.lang.Throwable) functionEvaluationException63);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException66 = new org.apache.commons.math.FunctionEvaluationException(0.0d, "org.apache.commons.math.MaxIterationsExceededException: org.apache.commons.math.ConvergenceException: hi!", objArray14, (java.lang.Throwable) functionEvaluationException63);
        java.lang.Class<?> wildcardClass67 = functionEvaluationException66.getClass();
        org.junit.Assert.assertNotNull(objArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray14), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray14), "[]");
        org.junit.Assert.assertNotNull(objArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray34), "[100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray34), "[100.0]");
        org.junit.Assert.assertNotNull(objArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray44), "[0.0, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray44), "[0.0, 1]");
        org.junit.Assert.assertNotNull(objArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray51), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray51), "[]");
        org.junit.Assert.assertNotNull(objArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray54), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray54), "[]");
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 100.0d + "'", double61 == 100.0d);
        org.junit.Assert.assertNotNull(wildcardClass67);
    }

    @Test
    public void test06280() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06280");
        java.lang.Object[] objArray5 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException6 = new org.apache.commons.math.ConvergenceException("", objArray5);
        java.lang.Object[] objArray8 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException9 = new org.apache.commons.math.ConvergenceException("", objArray8);
        org.apache.commons.math.ConvergenceException convergenceException10 = new org.apache.commons.math.ConvergenceException("", objArray5, (java.lang.Throwable) convergenceException9);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException11 = new org.apache.commons.math.FunctionEvaluationException(0.0d, "", (java.lang.Throwable) convergenceException10);
        java.lang.String str12 = functionEvaluationException11.getPattern();
        org.apache.commons.math.ConvergenceException convergenceException13 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.MaxIterationsExceededException: Maximal number of iterations (-1) exceeded", (java.lang.Throwable) functionEvaluationException11);
        org.junit.Assert.assertNotNull(objArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray5), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray5), "[]");
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
    }

    @Test
    public void test06281() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06281");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex1 = complex0.cosh();
        org.apache.commons.math.complex.Complex complex2 = complex0.log();
        org.apache.commons.math.complex.Complex complex3 = complex0.sin();
        org.apache.commons.math.complex.Complex complex4 = complex0.log();
        org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex6 = complex5.sqrt();
        org.apache.commons.math.complex.Complex complex7 = complex0.divide(complex6);
        org.apache.commons.math.complex.Complex complex8 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex9 = complex8.cosh();
        org.apache.commons.math.complex.Complex complex10 = complex9.acos();
        double double11 = complex9.getReal();
        org.apache.commons.math.complex.Complex complex12 = complex9.sqrt();
        org.apache.commons.math.complex.Complex complex13 = complex0.pow(complex9);
        org.apache.commons.math.complex.Complex complex14 = complex0.log();
        org.apache.commons.math.complex.Complex complex15 = complex0.conjugate();
        org.apache.commons.math.complex.Complex complex16 = complex15.cosh();
        org.apache.commons.math.complex.Complex complex17 = complex15.sqrt1z();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
    }

    @Test
    public void test06282() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06282");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex1 = complex0.cosh();
        org.apache.commons.math.complex.Complex complex2 = complex0.log();
        org.apache.commons.math.complex.Complex complex3 = complex2.cos();
        org.apache.commons.math.complex.Complex complex4 = complex2.exp();
        boolean boolean5 = complex2.isNaN();
        org.apache.commons.math.complex.Complex complex6 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex7 = complex6.cosh();
        double double8 = complex6.abs();
        org.apache.commons.math.complex.Complex complex9 = complex6.conjugate();
        org.apache.commons.math.complex.Complex complex10 = complex9.conjugate();
        org.apache.commons.math.complex.Complex complex11 = complex9.tanh();
        org.apache.commons.math.complex.Complex complex12 = complex2.multiply(complex9);
        org.apache.commons.math.complex.Complex complex13 = complex2.acos();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + Double.POSITIVE_INFINITY + "'", double8 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
    }

    @Test
    public void test06283() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06283");
        double[] doubleArray2 = new double[] { (byte) 1, 100 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) (short) 100);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver6 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction3);
        double double10 = laguerreSolver6.solve((double) (-1L), 349.0d, (double) (short) 10);
        laguerreSolver6.setMaximalIterationCount((int) '#');
        laguerreSolver6.setMaximalIterationCount((int) ' ');
        laguerreSolver6.setRelativeAccuracy((double) (short) 10);
        double double17 = laguerreSolver6.getAbsoluteAccuracy();
        laguerreSolver6.resetMaximalIterationCount();
        int int19 = laguerreSolver6.getMaximalIterationCount();
        laguerreSolver6.resetRelativeAccuracy();
        double double21 = laguerreSolver6.getResult();
        laguerreSolver6.resetFunctionValueAccuracy();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 10001.0d + "'", double5 == 10001.0d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + (-0.01d) + "'", double10 == (-0.01d));
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 1.0E-6d + "'", double17 == 1.0E-6d);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 100 + "'", int19 == 100);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + (-0.01d) + "'", double21 == (-0.01d));
    }

    @Test
    public void test06284() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06284");
        double[] doubleArray2 = new double[] { (byte) 1, 100 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) (short) 100);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver6 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction3);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction7 = laguerreSolver6.getPolynomialFunction();
        laguerreSolver6.setRelativeAccuracy((double) 0);
        double[] doubleArray12 = new double[] { (byte) -1, '#' };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction13 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray12);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction14 = polynomialFunction13.polynomialDerivative();
        double[] doubleArray15 = polynomialFunction13.getCoefficients();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction16 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray15);
        org.apache.commons.math.complex.Complex[] complexArray18 = laguerreSolver6.solveAll(doubleArray15, (double) 4);
        double double19 = laguerreSolver6.getAbsoluteAccuracy();
        laguerreSolver6.resetRelativeAccuracy();
        int int21 = laguerreSolver6.getMaximalIterationCount();
        laguerreSolver6.setMaximalIterationCount((-1));
        laguerreSolver6.setFunctionValueAccuracy((-1.0003990597689866E16d));
        laguerreSolver6.setFunctionValueAccuracy(13168.847730989726d);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 10001.0d + "'", double5 == 10001.0d);
        org.junit.Assert.assertNotNull(polynomialFunction7);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[-1.0, 35.0]");
        org.junit.Assert.assertNotNull(polynomialFunction14);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[-1.0, 35.0]");
        org.junit.Assert.assertNotNull(complexArray18);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 1.0E-6d + "'", double19 == 1.0E-6d);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 100 + "'", int21 == 100);
    }

    @Test
    public void test06285() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06285");
        org.apache.commons.math.ConvergenceException convergenceException5 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.MaxIterationsExceededException: org.apache.commons.math.FunctionEvaluationException: ");
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException6 = new org.apache.commons.math.FunctionEvaluationException(Double.POSITIVE_INFINITY, (java.lang.Throwable) convergenceException5);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException7 = new org.apache.commons.math.FunctionEvaluationException(350.0d, "org.apache.commons.math.MaxIterationsExceededException: hi!", (java.lang.Throwable) convergenceException5);
        org.apache.commons.math.ConvergenceException convergenceException8 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.FunctionEvaluationException: org.apache.commons.math.FunctionEvaluationException: org.apache.commons.math.FunctionEvaluationException: ", (java.lang.Throwable) convergenceException5);
        java.lang.Object[] objArray9 = convergenceException5.getArguments();
        java.lang.Object[] objArray10 = convergenceException5.getArguments();
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[]");
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
    }

    @Test
    public void test06286() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06286");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex1 = complex0.cosh();
        org.apache.commons.math.complex.Complex complex2 = complex0.log();
        org.apache.commons.math.complex.Complex complex3 = complex0.sin();
        org.apache.commons.math.complex.Complex complex4 = complex0.log();
        org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex6 = complex5.sqrt();
        org.apache.commons.math.complex.Complex complex7 = complex0.divide(complex6);
        org.apache.commons.math.complex.Complex complex8 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex9 = complex8.cosh();
        double double10 = complex8.abs();
        org.apache.commons.math.complex.Complex complex11 = complex8.conjugate();
        org.apache.commons.math.complex.Complex complex12 = complex11.conjugate();
        org.apache.commons.math.complex.Complex complex13 = complex7.subtract(complex12);
        org.apache.commons.math.complex.Complex complex14 = complex7.exp();
        org.apache.commons.math.complex.Complex complex15 = complex7.tan();
        org.apache.commons.math.complex.Complex complex16 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex17 = complex16.cosh();
        double double18 = complex16.abs();
        org.apache.commons.math.complex.Complex complex19 = complex16.conjugate();
        org.apache.commons.math.complex.Complex complex20 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex21 = complex20.cosh();
        double double22 = complex20.abs();
        org.apache.commons.math.complex.Complex complex23 = complex20.conjugate();
        org.apache.commons.math.complex.Complex complex24 = complex23.conjugate();
        org.apache.commons.math.complex.Complex complex25 = complex23.tanh();
        org.apache.commons.math.complex.Complex complex26 = complex23.atan();
        org.apache.commons.math.complex.Complex complex27 = complex16.subtract(complex23);
        org.apache.commons.math.complex.Complex complex28 = complex7.subtract(complex27);
        org.apache.commons.math.complex.Complex complex29 = complex28.conjugate();
        org.apache.commons.math.complex.Complex complex30 = complex29.negate();
        org.apache.commons.math.complex.Complex complex31 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex32 = complex31.sqrt();
        boolean boolean33 = complex31.isNaN();
        org.apache.commons.math.complex.Complex complex34 = complex31.sin();
        org.apache.commons.math.complex.Complex complex35 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex36 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex37 = complex36.sqrt();
        org.apache.commons.math.complex.Complex complex38 = complex37.sin();
        org.apache.commons.math.complex.Complex complex39 = complex35.pow(complex37);
        org.apache.commons.math.complex.Complex complex40 = complex39.asin();
        org.apache.commons.math.complex.Complex complex41 = complex40.atan();
        boolean boolean42 = complex41.isInfinite();
        org.apache.commons.math.complex.Complex complex43 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex44 = complex41.subtract(complex43);
        org.apache.commons.math.complex.Complex complex45 = complex44.sin();
        org.apache.commons.math.complex.Complex complex46 = complex31.divide(complex45);
        org.apache.commons.math.complex.Complex complex47 = complex31.tan();
        org.apache.commons.math.complex.Complex complex48 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex49 = complex48.sqrt();
        boolean boolean50 = complex48.isNaN();
        org.apache.commons.math.complex.Complex complex51 = complex48.sin();
        org.apache.commons.math.complex.Complex complex52 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex53 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex54 = complex53.sqrt();
        org.apache.commons.math.complex.Complex complex55 = complex54.sin();
        org.apache.commons.math.complex.Complex complex56 = complex52.pow(complex54);
        org.apache.commons.math.complex.Complex complex57 = complex56.asin();
        org.apache.commons.math.complex.Complex complex58 = complex57.atan();
        boolean boolean59 = complex58.isInfinite();
        org.apache.commons.math.complex.Complex complex60 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex61 = complex58.subtract(complex60);
        org.apache.commons.math.complex.Complex complex62 = complex61.sin();
        org.apache.commons.math.complex.Complex complex63 = complex48.divide(complex62);
        org.apache.commons.math.complex.Complex complex64 = complex48.tan();
        org.apache.commons.math.complex.Complex complex65 = complex64.log();
        org.apache.commons.math.complex.Complex complex66 = complex31.pow(complex64);
        boolean boolean67 = complex30.equals((java.lang.Object) complex66);
        org.apache.commons.math.complex.Complex complex68 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex69 = complex68.cosh();
        org.apache.commons.math.complex.Complex complex70 = complex68.log();
        org.apache.commons.math.complex.Complex complex71 = complex68.sin();
        org.apache.commons.math.complex.Complex complex72 = complex68.log();
        org.apache.commons.math.complex.Complex complex73 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex74 = complex73.sqrt();
        org.apache.commons.math.complex.Complex complex75 = complex68.divide(complex74);
        org.apache.commons.math.complex.Complex complex76 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex77 = complex76.cosh();
        double double78 = complex76.abs();
        org.apache.commons.math.complex.Complex complex79 = complex76.conjugate();
        org.apache.commons.math.complex.Complex complex80 = complex79.conjugate();
        org.apache.commons.math.complex.Complex complex81 = complex75.subtract(complex80);
        org.apache.commons.math.complex.Complex complex82 = complex75.exp();
        org.apache.commons.math.complex.Complex complex83 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex84 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex85 = complex84.sqrt();
        org.apache.commons.math.complex.Complex complex86 = complex85.sin();
        org.apache.commons.math.complex.Complex complex87 = complex83.pow(complex85);
        org.apache.commons.math.complex.Complex complex88 = complex87.asin();
        org.apache.commons.math.complex.Complex complex89 = complex88.atan();
        org.apache.commons.math.complex.Complex complex90 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex91 = complex90.cosh();
        boolean boolean92 = complex89.equals((java.lang.Object) complex90);
        org.apache.commons.math.complex.Complex complex93 = complex75.divide(complex90);
        org.apache.commons.math.complex.Complex complex94 = complex93.sinh();
        org.apache.commons.math.complex.Complex complex95 = complex30.subtract(complex94);
        org.apache.commons.math.complex.Complex complex96 = complex30.cos();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + Double.POSITIVE_INFINITY + "'", double10 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + Double.POSITIVE_INFINITY + "'", double18 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + Double.POSITIVE_INFINITY + "'", double22 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertNotNull(complex75);
        org.junit.Assert.assertNotNull(complex76);
        org.junit.Assert.assertNotNull(complex77);
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + Double.POSITIVE_INFINITY + "'", double78 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex79);
        org.junit.Assert.assertNotNull(complex80);
        org.junit.Assert.assertNotNull(complex81);
        org.junit.Assert.assertNotNull(complex82);
        org.junit.Assert.assertNotNull(complex83);
        org.junit.Assert.assertNotNull(complex84);
        org.junit.Assert.assertNotNull(complex85);
        org.junit.Assert.assertNotNull(complex86);
        org.junit.Assert.assertNotNull(complex87);
        org.junit.Assert.assertNotNull(complex88);
        org.junit.Assert.assertNotNull(complex89);
        org.junit.Assert.assertNotNull(complex90);
        org.junit.Assert.assertNotNull(complex91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertNotNull(complex93);
        org.junit.Assert.assertNotNull(complex94);
        org.junit.Assert.assertNotNull(complex95);
        org.junit.Assert.assertNotNull(complex96);
    }

    @Test
    public void test06287() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06287");
        double[] doubleArray2 = new double[] { (byte) 1, 100 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) (short) 100);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver6 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction3);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction7 = laguerreSolver6.getPolynomialFunction();
        laguerreSolver6.resetRelativeAccuracy();
        laguerreSolver6.resetMaximalIterationCount();
        laguerreSolver6.setMaximalIterationCount((int) '#');
        double[] doubleArray14 = new double[] { (byte) 1, 100 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction15 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray14);
        double double17 = polynomialFunction15.value((double) (short) 100);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver18 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction15);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction19 = laguerreSolver18.getPolynomialFunction();
        double[] doubleArray22 = new double[] { (byte) -1, '#' };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction23 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray22);
        org.apache.commons.math.complex.Complex[] complexArray25 = laguerreSolver18.solveAll(doubleArray22, 1.0d);
        org.apache.commons.math.complex.Complex[] complexArray27 = laguerreSolver6.solveAll(doubleArray22, (double) 0.0f);
        double double28 = laguerreSolver6.getResult();
        // The following exception was thrown during execution in test generation
        try {
            double double31 = laguerreSolver6.solve(527.0d, 527.0d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Endpoints do not specify an interval: [527.0,527.0]");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 10001.0d + "'", double5 == 10001.0d);
        org.junit.Assert.assertNotNull(polynomialFunction7);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 10001.0d + "'", double17 == 10001.0d);
        org.junit.Assert.assertNotNull(polynomialFunction19);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[-1.0, 35.0]");
        org.junit.Assert.assertNotNull(complexArray25);
        org.junit.Assert.assertNotNull(complexArray27);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d);
    }

    @Test
    public void test06288() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06288");
        double[] doubleArray2 = new double[] { (byte) 1, 100 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) (short) 100);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver6 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction3);
        double double10 = laguerreSolver6.solve((double) (-1L), 349.0d, (double) (short) 10);
        double double11 = laguerreSolver6.getResult();
        double double12 = laguerreSolver6.getFunctionValueAccuracy();
        laguerreSolver6.resetRelativeAccuracy();
        laguerreSolver6.resetMaximalIterationCount();
        laguerreSolver6.resetRelativeAccuracy();
        double double16 = laguerreSolver6.getResult();
        int int17 = laguerreSolver6.getMaximalIterationCount();
        double double21 = laguerreSolver6.solve((-9.730091830127586d), 3.573947685493632E39d, (-0.33999994115662646d));
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 10001.0d + "'", double5 == 10001.0d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + (-0.01d) + "'", double10 == (-0.01d));
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + (-0.01d) + "'", double11 == (-0.01d));
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 1.0E-15d + "'", double12 == 1.0E-15d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + (-0.01d) + "'", double16 == (-0.01d));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 100 + "'", int17 == 100);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + (-0.01d) + "'", double21 == (-0.01d));
    }

    @Test
    public void test06289() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06289");
        double[] doubleArray5 = new double[] { 0L, '#', 100.0f, 0L, (-1.0d) };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray5);
        double double8 = polynomialFunction6.value((double) 0);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver9 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        double[] doubleArray12 = new double[] { (byte) 1, 100 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction13 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray12);
        double double15 = polynomialFunction13.value((double) (short) 100);
        double[] doubleArray16 = polynomialFunction13.getCoefficients();
        org.apache.commons.math.complex.Complex[] complexArray18 = laguerreSolver9.solveAll(doubleArray16, (double) (short) 10);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction19 = laguerreSolver9.getPolynomialFunction();
        double[] doubleArray20 = polynomialFunction19.getCoefficients();
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction21 = polynomialFunction19.derivative();
        double double23 = polynomialFunction19.value(1.0E-6d);
        double[] doubleArray24 = polynomialFunction19.getCoefficients();
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[0.0, 35.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 10001.0d + "'", double15 == 10001.0d);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(complexArray18);
        org.junit.Assert.assertNotNull(polynomialFunction19);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[0.0, 35.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(univariateRealFunction21);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 3.5000100000000004E-5d + "'", double23 == 3.5000100000000004E-5d);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[0.0, 35.0, 100.0, 0.0, -1.0]");
    }

    @Test
    public void test06290() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06290");
        java.lang.Object[] objArray12 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException13 = new org.apache.commons.math.ConvergenceException("", objArray12);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException14 = new org.apache.commons.math.MaxIterationsExceededException(0, "hi!", objArray12);
        org.apache.commons.math.ConvergenceException convergenceException16 = new org.apache.commons.math.ConvergenceException("");
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException17 = new org.apache.commons.math.FunctionEvaluationException((double) (short) 0, "hi!", objArray12, (java.lang.Throwable) convergenceException16);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException18 = new org.apache.commons.math.MaxIterationsExceededException((int) (byte) 100, "", objArray12);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException19 = new org.apache.commons.math.FunctionEvaluationException(1.0d, "", objArray12);
        org.apache.commons.math.ConvergenceException convergenceException20 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: hi!", objArray12);
        java.lang.Object[] objArray26 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException27 = new org.apache.commons.math.ConvergenceException("", objArray26);
        java.lang.Object[] objArray32 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException33 = new org.apache.commons.math.ConvergenceException("", objArray32);
        java.lang.Object[] objArray35 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException36 = new org.apache.commons.math.ConvergenceException("", objArray35);
        org.apache.commons.math.ConvergenceException convergenceException37 = new org.apache.commons.math.ConvergenceException("", objArray32, (java.lang.Throwable) convergenceException36);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException39 = new org.apache.commons.math.FunctionEvaluationException((double) 100);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException40 = new org.apache.commons.math.FunctionEvaluationException(100.0d, "org.apache.commons.math.ConvergenceException: hi!", objArray32, (java.lang.Throwable) functionEvaluationException39);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException41 = new org.apache.commons.math.FunctionEvaluationException((double) '#', "", objArray26, (java.lang.Throwable) functionEvaluationException40);
        java.lang.Object[] objArray49 = new java.lang.Object[] { 0.0f, (short) 1 };
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException50 = new org.apache.commons.math.MaxIterationsExceededException(100, "", objArray49);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException51 = new org.apache.commons.math.MaxIterationsExceededException((int) ' ', "hi!", objArray49);
        org.apache.commons.math.ConvergenceException convergenceException52 = new org.apache.commons.math.ConvergenceException("", (java.lang.Throwable) maxIterationsExceededException51);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException53 = new org.apache.commons.math.FunctionEvaluationException(10.0d, "", objArray26, (java.lang.Throwable) maxIterationsExceededException51);
        java.lang.Object[] objArray54 = functionEvaluationException53.getArguments();
        org.apache.commons.math.ConvergenceException convergenceException55 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) functionEvaluationException53);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException56 = new org.apache.commons.math.FunctionEvaluationException((double) (byte) 10, "hi!", objArray12, (java.lang.Throwable) functionEvaluationException53);
        org.apache.commons.math.ConvergenceException convergenceException57 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) functionEvaluationException56);
        org.apache.commons.math.ConvergenceException convergenceException58 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) functionEvaluationException56);
        org.apache.commons.math.ConvergenceException convergenceException59 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException58);
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12), "[]");
        org.junit.Assert.assertNotNull(objArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray26), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray26), "[]");
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[]");
        org.junit.Assert.assertNotNull(objArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray35), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray35), "[]");
        org.junit.Assert.assertNotNull(objArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray49), "[0.0, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray49), "[0.0, 1]");
        org.junit.Assert.assertNotNull(objArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray54), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray54), "[]");
    }

    @Test
    public void test06291() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06291");
        double[] doubleArray2 = new double[] { (byte) 1, 100 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) (short) 100);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver6 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction3);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction7 = laguerreSolver6.getPolynomialFunction();
        laguerreSolver6.setRelativeAccuracy((double) 0);
        double[] doubleArray12 = new double[] { (byte) -1, '#' };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction13 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray12);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction14 = polynomialFunction13.polynomialDerivative();
        double[] doubleArray15 = polynomialFunction13.getCoefficients();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction16 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray15);
        org.apache.commons.math.complex.Complex[] complexArray18 = laguerreSolver6.solveAll(doubleArray15, (double) 4);
        laguerreSolver6.setAbsoluteAccuracy((double) 1);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction21 = laguerreSolver6.getPolynomialFunction();
        laguerreSolver6.setAbsoluteAccuracy((double) (short) 100);
        laguerreSolver6.resetFunctionValueAccuracy();
        double double25 = laguerreSolver6.getFunctionValueAccuracy();
        double double29 = laguerreSolver6.solve((double) (-1), 100.0001000299d, (double) 1.0f);
        laguerreSolver6.setFunctionValueAccuracy((double) (byte) 10);
        double double32 = laguerreSolver6.getAbsoluteAccuracy();
        laguerreSolver6.setAbsoluteAccuracy(134.02310093999603d);
        int int35 = laguerreSolver6.getIterationCount();
        // The following exception was thrown during execution in test generation
        try {
            double double39 = laguerreSolver6.solve((-1.0015971948223661E64d), (-13672.0d), (-1.8260159415627717E125d));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Function values at endpoints do not have different signs.  Endpoints: [-1.0015971948223661E64,-13672.0]  Values: [-1.0015971948223662E66,-1367199.0]");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 10001.0d + "'", double5 == 10001.0d);
        org.junit.Assert.assertNotNull(polynomialFunction7);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[-1.0, 35.0]");
        org.junit.Assert.assertNotNull(polynomialFunction14);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[-1.0, 35.0]");
        org.junit.Assert.assertNotNull(complexArray18);
        org.junit.Assert.assertNotNull(polynomialFunction21);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 1.0E-15d + "'", double25 == 1.0E-15d);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + (-0.01d) + "'", double29 == (-0.01d));
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 100.0d + "'", double32 == 100.0d);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 2 + "'", int35 == 2);
    }

    @Test
    public void test06292() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06292");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex2 = complex1.sqrt();
        org.apache.commons.math.complex.Complex complex3 = complex2.sin();
        org.apache.commons.math.complex.Complex complex4 = complex0.pow(complex2);
        org.apache.commons.math.complex.Complex complex5 = complex4.asin();
        org.apache.commons.math.complex.Complex complex6 = complex5.atan();
        org.apache.commons.math.complex.Complex complex7 = complex5.log();
        org.apache.commons.math.complex.Complex complex8 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex9 = complex8.tan();
        org.apache.commons.math.complex.Complex complex10 = complex9.cosh();
        org.apache.commons.math.complex.Complex complex11 = complex5.pow(complex9);
        org.apache.commons.math.complex.Complex complex12 = complex11.exp();
        org.apache.commons.math.complex.Complex complex13 = complex12.sin();
        org.apache.commons.math.complex.Complex complex14 = complex12.tanh();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
    }

    @Test
    public void test06293() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06293");
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException9 = new org.apache.commons.math.FunctionEvaluationException((double) 100);
        java.lang.Object[] objArray10 = functionEvaluationException9.getArguments();
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException11 = new org.apache.commons.math.MaxIterationsExceededException((int) (short) -1, "", objArray10);
        org.apache.commons.math.ConvergenceException convergenceException12 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: ", objArray10);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException13 = new org.apache.commons.math.MaxIterationsExceededException((int) ' ', "Maximal number of iterations ({0}) exceeded", objArray10);
        java.lang.Object[] objArray20 = new java.lang.Object[] { 0.0f, (short) 1 };
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException21 = new org.apache.commons.math.MaxIterationsExceededException(100, "", objArray20);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException22 = new org.apache.commons.math.MaxIterationsExceededException((-1), "", objArray20);
        int int23 = maxIterationsExceededException22.getMaxIterations();
        java.lang.Object[] objArray24 = maxIterationsExceededException22.getArguments();
        int int25 = maxIterationsExceededException22.getMaxIterations();
        org.apache.commons.math.ConvergenceException convergenceException26 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.FunctionEvaluationException: Evaluation failed for argument = 100", objArray10, (java.lang.Throwable) maxIterationsExceededException22);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException27 = new org.apache.commons.math.FunctionEvaluationException((-8.758498599E9d), "org.apache.commons.math.FunctionEvaluationException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: hi!", objArray10);
        java.lang.Class<?> wildcardClass28 = functionEvaluationException27.getClass();
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[100.0]");
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray20), "[0.0, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray20), "[0.0, 1]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[0.0, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[0.0, 1]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertNotNull(wildcardClass28);
    }

    @Test
    public void test06294() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06294");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex1 = complex0.sqrt();
        double double2 = complex0.getImaginary();
        org.apache.commons.math.complex.Complex complex3 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex4 = complex3.cosh();
        org.apache.commons.math.complex.Complex complex5 = complex3.log();
        org.apache.commons.math.complex.Complex complex6 = complex5.cos();
        double double7 = complex6.abs();
        org.apache.commons.math.complex.Complex complex8 = complex6.sqrt();
        org.apache.commons.math.complex.Complex complex9 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex10 = complex9.sqrt();
        boolean boolean11 = complex9.isNaN();
        double double12 = complex9.getReal();
        boolean boolean13 = complex9.isNaN();
        org.apache.commons.math.complex.Complex complex14 = complex9.asin();
        org.apache.commons.math.complex.Complex complex15 = complex8.pow(complex14);
        org.apache.commons.math.complex.Complex complex16 = complex15.tan();
        org.apache.commons.math.complex.Complex complex17 = complex16.negate();
        org.apache.commons.math.complex.Complex complex18 = complex16.sinh();
        org.apache.commons.math.complex.Complex complex19 = complex0.subtract(complex18);
        org.apache.commons.math.complex.Complex complex20 = complex18.asin();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + Double.POSITIVE_INFINITY + "'", double2 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + Double.POSITIVE_INFINITY + "'", double12 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
    }

    @Test
    public void test06295() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06295");
        double[] doubleArray5 = new double[] { 0L, '#', 100.0f, 0L, (-1.0d) };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray5);
        double double8 = polynomialFunction6.value((double) 0);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver9 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        double[] doubleArray12 = new double[] { (byte) 1, 100 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction13 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray12);
        double double15 = polynomialFunction13.value((double) (short) 100);
        double[] doubleArray16 = polynomialFunction13.getCoefficients();
        org.apache.commons.math.complex.Complex[] complexArray18 = laguerreSolver9.solveAll(doubleArray16, (double) (short) 10);
        int int19 = laguerreSolver9.getMaximalIterationCount();
        laguerreSolver9.setMaximalIterationCount((int) (short) 10);
        laguerreSolver9.setFunctionValueAccuracy((-8.808275266783596E15d));
        laguerreSolver9.resetFunctionValueAccuracy();
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[0.0, 35.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 10001.0d + "'", double15 == 10001.0d);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(complexArray18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 100 + "'", int19 == 100);
    }

    @Test
    public void test06296() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06296");
        double[] doubleArray2 = new double[] { (byte) 1, 100 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) (short) 100);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver6 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction3);
        double double10 = laguerreSolver6.solve((double) (-1L), 349.0d, (double) (short) 10);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction11 = laguerreSolver6.getPolynomialFunction();
        double double13 = polynomialFunction11.value((double) (short) 1);
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction14 = polynomialFunction11.derivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver15 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction11);
        int int16 = polynomialFunction11.degree();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver17 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction11);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver18 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction11);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver19 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction11);
        double double20 = laguerreSolver19.getAbsoluteAccuracy();
        double[] doubleArray23 = new double[] { (byte) 1, 100 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction24 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray23);
        double double26 = polynomialFunction24.value((double) (short) 100);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver27 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction24);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction28 = laguerreSolver27.getPolynomialFunction();
        laguerreSolver27.setRelativeAccuracy((double) 0);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction31 = laguerreSolver27.getPolynomialFunction();
        laguerreSolver27.resetMaximalIterationCount();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction33 = laguerreSolver27.getPolynomialFunction();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction34 = polynomialFunction33.polynomialDerivative();
        double[] doubleArray35 = polynomialFunction33.getCoefficients();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver36 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction33);
        double double37 = laguerreSolver36.getFunctionValueAccuracy();
        double[] doubleArray40 = new double[] { (byte) 1, 100 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction41 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray40);
        double double43 = polynomialFunction41.value((double) (short) 100);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver44 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction41);
        double[] doubleArray45 = polynomialFunction41.getCoefficients();
        int int46 = polynomialFunction41.degree();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction47 = polynomialFunction41.polynomialDerivative();
        double double49 = polynomialFunction41.value(134.02310093999603d);
        double[] doubleArray50 = polynomialFunction41.getCoefficients();
        org.apache.commons.math.complex.Complex[] complexArray52 = laguerreSolver36.solveAll(doubleArray50, (double) (-1L));
        org.apache.commons.math.complex.Complex complex53 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex54 = complex53.cosh();
        double double55 = complex53.abs();
        org.apache.commons.math.complex.Complex complex56 = complex53.conjugate();
        org.apache.commons.math.complex.Complex complex57 = complex56.conjugate();
        org.apache.commons.math.complex.Complex complex58 = complex56.tanh();
        org.apache.commons.math.complex.Complex complex59 = complex58.sqrt();
        org.apache.commons.math.complex.Complex complex60 = complex58.conjugate();
        org.apache.commons.math.complex.Complex complex61 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex62 = complex61.cosh();
        double double63 = complex61.abs();
        org.apache.commons.math.complex.Complex complex64 = complex61.conjugate();
        org.apache.commons.math.complex.Complex complex65 = complex64.conjugate();
        org.apache.commons.math.complex.Complex complex66 = complex64.tanh();
        org.apache.commons.math.complex.Complex complex67 = complex64.asin();
        org.apache.commons.math.complex.Complex complex68 = complex67.exp();
        org.apache.commons.math.complex.Complex complex69 = complex58.subtract(complex67);
        org.apache.commons.math.complex.Complex complex70 = complex69.sqrt();
        org.apache.commons.math.complex.Complex complex71 = complex70.atan();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.complex.Complex complex72 = laguerreSolver19.solve(complexArray52, complex70);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Polynomial degree must be positive: degree=0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 10001.0d + "'", double5 == 10001.0d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + (-0.01d) + "'", double10 == (-0.01d));
        org.junit.Assert.assertNotNull(polynomialFunction11);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 101.0d + "'", double13 == 101.0d);
        org.junit.Assert.assertNotNull(univariateRealFunction14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 1.0E-6d + "'", double20 == 1.0E-6d);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 10001.0d + "'", double26 == 10001.0d);
        org.junit.Assert.assertNotNull(polynomialFunction28);
        org.junit.Assert.assertNotNull(polynomialFunction31);
        org.junit.Assert.assertNotNull(polynomialFunction33);
        org.junit.Assert.assertNotNull(polynomialFunction34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 1.0E-15d + "'", double37 == 1.0E-15d);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 10001.0d + "'", double43 == 10001.0d);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertNotNull(polynomialFunction47);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 13403.310093999602d + "'", double49 == 13403.310093999602d);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(complexArray52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + Double.POSITIVE_INFINITY + "'", double55 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + Double.POSITIVE_INFINITY + "'", double63 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertNotNull(complex71);
    }

    @Test
    public void test06297() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06297");
        java.lang.Throwable throwable2 = null;
        org.apache.commons.math.ConvergenceException convergenceException3 = new org.apache.commons.math.ConvergenceException(throwable2);
        org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex6 = complex5.sqrt();
        org.apache.commons.math.complex.Complex complex7 = complex6.sin();
        org.apache.commons.math.complex.Complex complex8 = complex4.pow(complex6);
        org.apache.commons.math.complex.Complex complex9 = complex8.asin();
        org.apache.commons.math.complex.Complex complex10 = complex8.tan();
        java.lang.Object[] objArray14 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException15 = new org.apache.commons.math.ConvergenceException("", objArray14);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException16 = new org.apache.commons.math.MaxIterationsExceededException(0, "hi!", objArray14);
        int int17 = maxIterationsExceededException16.getMaxIterations();
        boolean boolean18 = complex10.equals((java.lang.Object) maxIterationsExceededException16);
        java.lang.String str19 = maxIterationsExceededException16.getPattern();
        convergenceException3.addSuppressed((java.lang.Throwable) maxIterationsExceededException16);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException21 = new org.apache.commons.math.FunctionEvaluationException((double) (byte) 10, "", (java.lang.Throwable) convergenceException3);
        java.lang.String str22 = functionEvaluationException21.getPattern();
        java.lang.String str23 = functionEvaluationException21.getPattern();
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(objArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray14), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray14), "[]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "hi!" + "'", str19, "hi!");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
    }

    @Test
    public void test06298() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06298");
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException1 = new org.apache.commons.math.FunctionEvaluationException(3921189.0d);
    }

    @Test
    public void test06299() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06299");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex1 = complex0.cosh();
        org.apache.commons.math.complex.Complex complex2 = complex0.log();
        org.apache.commons.math.complex.Complex complex3 = complex2.cos();
        org.apache.commons.math.complex.Complex complex4 = complex2.exp();
        org.apache.commons.math.complex.Complex complex5 = complex4.asin();
        org.apache.commons.math.complex.Complex complex6 = complex5.asin();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
    }

    @Test
    public void test06300() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06300");
        double[] doubleArray2 = new double[] { (byte) -1, '#' };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction4 = polynomialFunction3.polynomialDerivative();
        int int5 = polynomialFunction4.degree();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver6 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction4);
        double double7 = laguerreSolver6.getRelativeAccuracy();
        double double8 = laguerreSolver6.getFunctionValueAccuracy();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[-1.0, 35.0]");
        org.junit.Assert.assertNotNull(polynomialFunction4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 1.0E-14d + "'", double7 == 1.0E-14d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 1.0E-15d + "'", double8 == 1.0E-15d);
    }

    @Test
    public void test06301() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06301");
        double[] doubleArray2 = new double[] { (byte) 1, 100 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) (short) 100);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver6 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction3);
        laguerreSolver6.setMaximalIterationCount((int) (byte) -1);
        laguerreSolver6.resetRelativeAccuracy();
        laguerreSolver6.setFunctionValueAccuracy((-13672.0d));
        laguerreSolver6.resetRelativeAccuracy();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 10001.0d + "'", double5 == 10001.0d);
    }

    @Test
    public void test06302() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06302");
        double[] doubleArray2 = new double[] { (byte) 1, 100 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) (short) 100);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver6 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction3);
        double[] doubleArray7 = polynomialFunction3.getCoefficients();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction8 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray7);
        double[] doubleArray9 = polynomialFunction8.getCoefficients();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction10 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray9);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction11 = polynomialFunction10.polynomialDerivative();
        double[] doubleArray12 = polynomialFunction11.getCoefficients();
        double double14 = polynomialFunction11.value((-1.0920036681097296E52d));
        double double16 = polynomialFunction11.value((-9.99989899E8d));
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 10001.0d + "'", double5 == 10001.0d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(polynomialFunction11);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[100.0]");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 100.0d + "'", double14 == 100.0d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 100.0d + "'", double16 == 100.0d);
    }

    @Test
    public void test06303() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06303");
        java.lang.Object[] objArray9 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException10 = new org.apache.commons.math.ConvergenceException("", objArray9);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException11 = new org.apache.commons.math.FunctionEvaluationException((double) (short) 10, "hi!", objArray9);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException12 = new org.apache.commons.math.MaxIterationsExceededException((int) (byte) 0, "org.apache.commons.math.ConvergenceException: hi!", objArray9);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException13 = new org.apache.commons.math.FunctionEvaluationException(0.0d, (java.lang.Throwable) maxIterationsExceededException12);
        org.apache.commons.math.ConvergenceException convergenceException14 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) maxIterationsExceededException12);
        int int15 = maxIterationsExceededException12.getMaxIterations();
        java.lang.Object[] objArray16 = maxIterationsExceededException12.getArguments();
        org.apache.commons.math.ConvergenceException convergenceException17 = new org.apache.commons.math.ConvergenceException("", objArray16);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException18 = new org.apache.commons.math.FunctionEvaluationException(13401.0d, "org.apache.commons.math.MaxIterationsExceededException: org.apache.commons.math.MaxIterationsExceededException: ", objArray16);
        java.lang.Throwable throwable19 = null;
        // The following exception was thrown during execution in test generation
        try {
            functionEvaluationException18.addSuppressed(throwable19);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot suppress a null exception.");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(objArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray16), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray16), "[]");
    }

    @Test
    public void test06304() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06304");
        java.lang.Object[] objArray5 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException6 = new org.apache.commons.math.ConvergenceException("", objArray5);
        java.lang.Object[] objArray8 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException9 = new org.apache.commons.math.ConvergenceException("", objArray8);
        org.apache.commons.math.ConvergenceException convergenceException10 = new org.apache.commons.math.ConvergenceException("", objArray5, (java.lang.Throwable) convergenceException9);
        org.apache.commons.math.ConvergenceException convergenceException11 = new org.apache.commons.math.ConvergenceException("", objArray5);
        java.lang.Throwable[] throwableArray12 = convergenceException11.getSuppressed();
        java.lang.Object[] objArray13 = convergenceException11.getArguments();
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException14 = new org.apache.commons.math.FunctionEvaluationException((-2.647377083281663E123d), "org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: ", (java.lang.Throwable) convergenceException11);
        org.junit.Assert.assertNotNull(objArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray5), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray5), "[]");
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[]");
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[]");
    }

    @Test
    public void test06305() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06305");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex1 = complex0.cosh();
        double double2 = complex0.abs();
        org.apache.commons.math.complex.Complex complex3 = complex0.conjugate();
        org.apache.commons.math.complex.Complex complex4 = complex3.conjugate();
        boolean boolean5 = complex3.isInfinite();
        org.apache.commons.math.complex.Complex complex6 = complex3.cos();
        org.apache.commons.math.complex.Complex complex7 = complex3.conjugate();
        org.apache.commons.math.complex.Complex complex8 = complex3.sin();
        org.apache.commons.math.complex.Complex complex9 = complex8.negate();
        org.apache.commons.math.complex.Complex complex10 = complex9.exp();
        org.apache.commons.math.complex.Complex complex11 = complex9.acos();
        org.apache.commons.math.complex.Complex complex12 = complex9.atan();
        double double13 = complex9.getImaginary();
        boolean boolean14 = complex9.isInfinite();
        org.apache.commons.math.complex.Complex complex15 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex16 = complex15.cosh();
        double double17 = complex15.abs();
        org.apache.commons.math.complex.Complex complex18 = complex15.conjugate();
        org.apache.commons.math.complex.Complex complex19 = complex18.conjugate();
        org.apache.commons.math.complex.Complex complex20 = complex18.tanh();
        org.apache.commons.math.complex.Complex complex21 = complex9.pow(complex20);
        org.apache.commons.math.complex.Complex complex22 = complex20.negate();
        org.apache.commons.math.complex.Complex complex23 = complex20.tan();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + Double.POSITIVE_INFINITY + "'", double2 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + Double.POSITIVE_INFINITY + "'", double17 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
    }

    @Test
    public void test06306() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06306");
        double[] doubleArray5 = new double[] { 0L, '#', 100.0f, 0L, (-1.0d) };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray5);
        int int7 = polynomialFunction6.degree();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction8 = polynomialFunction6.polynomialDerivative();
        double double10 = polynomialFunction8.value(0.0d);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction11 = polynomialFunction8.polynomialDerivative();
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction12 = polynomialFunction8.derivative();
        double double14 = polynomialFunction8.value(5201.0d);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver15 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction8);
        int int16 = polynomialFunction8.degree();
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[0.0, 35.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 4 + "'", int7 == 4);
        org.junit.Assert.assertNotNull(polynomialFunction8);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 35.0d + "'", double10 == 35.0d);
        org.junit.Assert.assertNotNull(polynomialFunction11);
        org.junit.Assert.assertNotNull(univariateRealFunction12);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + (-5.62755502169E11d) + "'", double14 == (-5.62755502169E11d));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 3 + "'", int16 == 3);
    }

    @Test
    public void test06307() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06307");
        java.lang.Object[] objArray2 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException3 = new org.apache.commons.math.ConvergenceException("", objArray2);
        java.lang.Object[] objArray8 = new java.lang.Object[] { 0.0f, (short) 1 };
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException9 = new org.apache.commons.math.MaxIterationsExceededException(100, "", objArray8);
        convergenceException3.addSuppressed((java.lang.Throwable) maxIterationsExceededException9);
        int int11 = maxIterationsExceededException9.getMaxIterations();
        org.apache.commons.math.ConvergenceException convergenceException12 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.FunctionEvaluationException: org.apache.commons.math.FunctionEvaluationException: ", (java.lang.Throwable) maxIterationsExceededException9);
        int int13 = maxIterationsExceededException9.getMaxIterations();
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException15 = new org.apache.commons.math.FunctionEvaluationException((double) '4');
        maxIterationsExceededException9.addSuppressed((java.lang.Throwable) functionEvaluationException15);
        java.lang.Object[] objArray21 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException22 = new org.apache.commons.math.ConvergenceException("", objArray21);
        java.lang.Object[] objArray27 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException28 = new org.apache.commons.math.ConvergenceException("", objArray27);
        java.lang.Object[] objArray30 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException31 = new org.apache.commons.math.ConvergenceException("", objArray30);
        org.apache.commons.math.ConvergenceException convergenceException32 = new org.apache.commons.math.ConvergenceException("", objArray27, (java.lang.Throwable) convergenceException31);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException34 = new org.apache.commons.math.FunctionEvaluationException((double) 100);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException35 = new org.apache.commons.math.FunctionEvaluationException(100.0d, "org.apache.commons.math.ConvergenceException: hi!", objArray27, (java.lang.Throwable) functionEvaluationException34);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException36 = new org.apache.commons.math.FunctionEvaluationException((double) '#', "", objArray21, (java.lang.Throwable) functionEvaluationException35);
        java.lang.String str37 = functionEvaluationException36.getPattern();
        double double38 = functionEvaluationException36.getArgument();
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException39 = new org.apache.commons.math.FunctionEvaluationException((double) (byte) 0, (java.lang.Throwable) functionEvaluationException36);
        java.lang.Object[] objArray42 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException43 = new org.apache.commons.math.ConvergenceException("", objArray42);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException44 = new org.apache.commons.math.FunctionEvaluationException(10.0d, (java.lang.Throwable) convergenceException43);
        functionEvaluationException39.addSuppressed((java.lang.Throwable) functionEvaluationException44);
        java.lang.Throwable[] throwableArray46 = functionEvaluationException39.getSuppressed();
        functionEvaluationException15.addSuppressed((java.lang.Throwable) functionEvaluationException39);
        java.lang.String str48 = functionEvaluationException39.getPattern();
        org.apache.commons.math.ConvergenceException convergenceException49 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) functionEvaluationException39);
        org.junit.Assert.assertNotNull(objArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray2), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray2), "[]");
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[0.0, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[0.0, 1]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 100 + "'", int11 == 100);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 100 + "'", int13 == 100);
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray21), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray21), "[]");
        org.junit.Assert.assertNotNull(objArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray27), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray27), "[]");
        org.junit.Assert.assertNotNull(objArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray30), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray30), "[]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 35.0d + "'", double38 == 35.0d);
        org.junit.Assert.assertNotNull(objArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray42), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray42), "[]");
        org.junit.Assert.assertNotNull(throwableArray46);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
    }

    @Test
    public void test06308() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06308");
        double[] doubleArray4 = new double[] { (byte) 1, 100 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction5 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray4);
        double double7 = polynomialFunction5.value((double) (short) 100);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver8 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction5);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction9 = laguerreSolver8.getPolynomialFunction();
        laguerreSolver8.resetRelativeAccuracy();
        double[] doubleArray16 = new double[] { 0L, '#', 100.0f, 0L, (-1.0d) };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction17 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray16);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction18 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray16);
        org.apache.commons.math.complex.Complex[] complexArray20 = laguerreSolver8.solveAll(doubleArray16, 101.0d);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException24 = new org.apache.commons.math.FunctionEvaluationException((double) 100);
        java.lang.Object[] objArray25 = functionEvaluationException24.getArguments();
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException26 = new org.apache.commons.math.MaxIterationsExceededException((int) (short) -1, "", objArray25);
        java.lang.Object[] objArray27 = maxIterationsExceededException26.getArguments();
        org.apache.commons.math.ConvergenceException convergenceException28 = new org.apache.commons.math.ConvergenceException("Maximal number of iterations ({0}) exceeded", (java.lang.Object[]) complexArray20, (java.lang.Throwable) maxIterationsExceededException26);
        java.lang.Object[] objArray29 = convergenceException28.getArguments();
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException30 = new org.apache.commons.math.FunctionEvaluationException(Double.NEGATIVE_INFINITY, (java.lang.Throwable) convergenceException28);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 10001.0d + "'", double7 == 10001.0d);
        org.junit.Assert.assertNotNull(polynomialFunction9);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[0.0, 35.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(complexArray20);
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[100.0]");
        org.junit.Assert.assertNotNull(objArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray27), "[100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray27), "[100.0]");
        org.junit.Assert.assertNotNull(objArray29);
    }

    @Test
    public void test06309() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06309");
        double[] doubleArray2 = new double[] { (byte) 1, 100 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) (short) 100);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver6 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction3);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction7 = laguerreSolver6.getPolynomialFunction();
        double double8 = laguerreSolver6.getAbsoluteAccuracy();
        laguerreSolver6.resetFunctionValueAccuracy();
        laguerreSolver6.setMaximalIterationCount((int) (short) -1);
        // The following exception was thrown during execution in test generation
        try {
            double double14 = laguerreSolver6.solve(148401.0d, (-7039396.0d));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Endpoints do not specify an interval: [148401.0,-7039396.0]");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 10001.0d + "'", double5 == 10001.0d);
        org.junit.Assert.assertNotNull(polynomialFunction7);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 1.0E-6d + "'", double8 == 1.0E-6d);
    }

    @Test
    public void test06310() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06310");
        double[] doubleArray5 = new double[] { 0L, '#', 100.0f, 0L, (-1.0d) };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray5);
        double double8 = polynomialFunction6.value((double) 0);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver9 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        double[] doubleArray12 = new double[] { (byte) 1, 100 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction13 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray12);
        double double15 = polynomialFunction13.value((double) (short) 100);
        double[] doubleArray16 = polynomialFunction13.getCoefficients();
        org.apache.commons.math.complex.Complex[] complexArray18 = laguerreSolver9.solveAll(doubleArray16, (double) (short) 10);
        laguerreSolver9.setMaximalIterationCount((int) (byte) 10);
        laguerreSolver9.resetRelativeAccuracy();
        laguerreSolver9.resetMaximalIterationCount();
        int int23 = laguerreSolver9.getIterationCount();
        laguerreSolver9.resetAbsoluteAccuracy();
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[0.0, 35.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 10001.0d + "'", double15 == 10001.0d);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(complexArray18);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 3 + "'", int23 == 3);
    }

    @Test
    public void test06311() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06311");
        double[] doubleArray2 = new double[] { (byte) 1, 100 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) (short) 100);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver6 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction3);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction7 = laguerreSolver6.getPolynomialFunction();
        laguerreSolver6.resetRelativeAccuracy();
        int int9 = laguerreSolver6.getMaximalIterationCount();
        laguerreSolver6.resetRelativeAccuracy();
        double double14 = laguerreSolver6.solve((-1.0003990597689866E16d), 1.0d, (-8.808275266783596E15d));
        double[] doubleArray17 = new double[] { (byte) 1, 100 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction18 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray17);
        double double20 = polynomialFunction18.value((double) (short) 100);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver21 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction18);
        double[] doubleArray22 = polynomialFunction18.getCoefficients();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction23 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray22);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction24 = polynomialFunction23.polynomialDerivative();
        double[] doubleArray25 = polynomialFunction23.getCoefficients();
        org.apache.commons.math.complex.Complex[] complexArray27 = laguerreSolver6.solveAll(doubleArray25, (-1.1562643809042105E-12d));
        int int28 = laguerreSolver6.getMaximalIterationCount();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 10001.0d + "'", double5 == 10001.0d);
        org.junit.Assert.assertNotNull(polynomialFunction7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 100 + "'", int9 == 100);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + (-0.01d) + "'", double14 == (-0.01d));
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 10001.0d + "'", double20 == 10001.0d);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(polynomialFunction24);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(complexArray27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 100 + "'", int28 == 100);
    }

    @Test
    public void test06312() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06312");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex1 = complex0.cosh();
        double double2 = complex0.abs();
        org.apache.commons.math.complex.Complex complex3 = complex0.conjugate();
        org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex5 = complex4.cosh();
        double double6 = complex4.abs();
        org.apache.commons.math.complex.Complex complex7 = complex4.conjugate();
        org.apache.commons.math.complex.Complex complex8 = complex7.conjugate();
        org.apache.commons.math.complex.Complex complex9 = complex7.tanh();
        org.apache.commons.math.complex.Complex complex10 = complex7.atan();
        org.apache.commons.math.complex.Complex complex11 = complex0.subtract(complex7);
        org.apache.commons.math.complex.Complex complex12 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex13 = complex12.cosh();
        org.apache.commons.math.complex.Complex complex14 = complex12.log();
        org.apache.commons.math.complex.Complex complex15 = complex14.cos();
        double double16 = complex15.abs();
        org.apache.commons.math.complex.Complex complex17 = complex15.tanh();
        org.apache.commons.math.complex.Complex complex18 = complex7.pow(complex15);
        org.apache.commons.math.complex.Complex complex19 = complex7.acos();
        double double20 = complex19.getImaginary();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + Double.POSITIVE_INFINITY + "'", double2 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + Double.POSITIVE_INFINITY + "'", double6 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertTrue(Double.isNaN(double20));
    }

    @Test
    public void test06313() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06313");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((-0.01d), (-16099.0d));
        org.apache.commons.math.complex.Complex complex3 = complex2.log();
        org.junit.Assert.assertNotNull(complex3);
    }

    @Test
    public void test06314() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06314");
        double[] doubleArray2 = new double[] { (byte) 1, 100 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) (short) 100);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver6 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction3);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction7 = laguerreSolver6.getPolynomialFunction();
        laguerreSolver6.setRelativeAccuracy((double) 0);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction10 = laguerreSolver6.getPolynomialFunction();
        laguerreSolver6.resetRelativeAccuracy();
        laguerreSolver6.setRelativeAccuracy(10.0d);
        laguerreSolver6.setAbsoluteAccuracy((-1.6365376E7d));
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction16 = laguerreSolver6.getPolynomialFunction();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver17 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction16);
        double[] doubleArray18 = polynomialFunction16.getCoefficients();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction19 = polynomialFunction16.polynomialDerivative();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction20 = polynomialFunction19.polynomialDerivative();
        double[] doubleArray21 = polynomialFunction19.getCoefficients();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 10001.0d + "'", double5 == 10001.0d);
        org.junit.Assert.assertNotNull(polynomialFunction7);
        org.junit.Assert.assertNotNull(polynomialFunction10);
        org.junit.Assert.assertNotNull(polynomialFunction16);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(polynomialFunction19);
        org.junit.Assert.assertNotNull(polynomialFunction20);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[100.0]");
    }

    @Test
    public void test06315() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06315");
        double[] doubleArray5 = new double[] { 0L, '#', 100.0f, 0L, (-1.0d) };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray5);
        int int7 = polynomialFunction6.degree();
        int int8 = polynomialFunction6.degree();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction9 = polynomialFunction6.polynomialDerivative();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction10 = polynomialFunction9.polynomialDerivative();
        double double12 = polynomialFunction9.value((double) (-1.0f));
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver13 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction9);
        laguerreSolver13.setAbsoluteAccuracy(1.0E-14d);
        double double16 = laguerreSolver13.getRelativeAccuracy();
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[0.0, 35.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 4 + "'", int7 == 4);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 4 + "'", int8 == 4);
        org.junit.Assert.assertNotNull(polynomialFunction9);
        org.junit.Assert.assertNotNull(polynomialFunction10);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + (-161.0d) + "'", double12 == (-161.0d));
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 1.0E-14d + "'", double16 == 1.0E-14d);
    }

    @Test
    public void test06316() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06316");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex1 = complex0.cosh();
        org.apache.commons.math.complex.Complex complex2 = complex0.log();
        org.apache.commons.math.complex.Complex complex3 = complex0.sin();
        org.apache.commons.math.complex.Complex complex4 = complex0.log();
        org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex6 = complex5.sqrt();
        org.apache.commons.math.complex.Complex complex7 = complex0.divide(complex6);
        org.apache.commons.math.complex.Complex complex8 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex9 = complex8.cosh();
        double double10 = complex8.abs();
        org.apache.commons.math.complex.Complex complex11 = complex8.conjugate();
        org.apache.commons.math.complex.Complex complex12 = complex11.conjugate();
        org.apache.commons.math.complex.Complex complex13 = complex7.subtract(complex12);
        org.apache.commons.math.complex.Complex complex14 = complex7.exp();
        org.apache.commons.math.complex.Complex complex15 = complex14.cos();
        org.apache.commons.math.complex.Complex complex16 = complex14.cosh();
        org.apache.commons.math.complex.Complex complex17 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex18 = complex17.cosh();
        org.apache.commons.math.complex.Complex complex19 = complex17.log();
        org.apache.commons.math.complex.Complex complex20 = complex17.cos();
        org.apache.commons.math.complex.Complex complex21 = complex20.negate();
        org.apache.commons.math.complex.Complex complex22 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex23 = complex22.tan();
        double double24 = complex23.getReal();
        org.apache.commons.math.complex.Complex complex25 = complex21.divide(complex23);
        org.apache.commons.math.complex.Complex complex26 = complex16.add(complex21);
        double double27 = complex26.getImaginary();
        org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex29 = complex28.cosh();
        double double30 = complex28.abs();
        org.apache.commons.math.complex.Complex complex31 = complex28.conjugate();
        org.apache.commons.math.complex.Complex complex32 = complex31.conjugate();
        org.apache.commons.math.complex.Complex complex33 = complex31.tanh();
        org.apache.commons.math.complex.Complex complex34 = complex33.tan();
        org.apache.commons.math.complex.Complex complex35 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex36 = complex35.cosh();
        double double37 = complex35.abs();
        org.apache.commons.math.complex.Complex complex38 = complex35.conjugate();
        org.apache.commons.math.complex.Complex complex39 = complex38.conjugate();
        org.apache.commons.math.complex.Complex complex40 = complex34.subtract(complex38);
        org.apache.commons.math.complex.Complex complex41 = complex38.negate();
        java.lang.Object[] objArray45 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException46 = new org.apache.commons.math.ConvergenceException("", objArray45);
        java.lang.Object[] objArray51 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException52 = new org.apache.commons.math.ConvergenceException("", objArray51);
        java.lang.Object[] objArray54 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException55 = new org.apache.commons.math.ConvergenceException("", objArray54);
        org.apache.commons.math.ConvergenceException convergenceException56 = new org.apache.commons.math.ConvergenceException("", objArray51, (java.lang.Throwable) convergenceException55);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException58 = new org.apache.commons.math.FunctionEvaluationException((double) 100);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException59 = new org.apache.commons.math.FunctionEvaluationException(100.0d, "org.apache.commons.math.ConvergenceException: hi!", objArray51, (java.lang.Throwable) functionEvaluationException58);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException60 = new org.apache.commons.math.FunctionEvaluationException((double) '#', "", objArray45, (java.lang.Throwable) functionEvaluationException59);
        java.lang.String str61 = functionEvaluationException60.getPattern();
        boolean boolean62 = complex41.equals((java.lang.Object) functionEvaluationException60);
        double double63 = complex41.getReal();
        org.apache.commons.math.complex.Complex complex64 = complex41.exp();
        org.apache.commons.math.complex.Complex complex65 = complex26.multiply(complex41);
        double double66 = complex41.getImaginary();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + Double.POSITIVE_INFINITY + "'", double10 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + Double.POSITIVE_INFINITY + "'", double30 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + Double.POSITIVE_INFINITY + "'", double37 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(objArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray45), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray45), "[]");
        org.junit.Assert.assertNotNull(objArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray51), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray51), "[]");
        org.junit.Assert.assertNotNull(objArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray54), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray54), "[]");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + Double.NEGATIVE_INFINITY + "'", double63 == Double.NEGATIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + Double.POSITIVE_INFINITY + "'", double66 == Double.POSITIVE_INFINITY);
    }

    @Test
    public void test06317() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06317");
        java.lang.Object[] objArray4 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException5 = new org.apache.commons.math.ConvergenceException("", objArray4);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException6 = new org.apache.commons.math.MaxIterationsExceededException(0, "hi!", objArray4);
        org.apache.commons.math.ConvergenceException convergenceException7 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.FunctionEvaluationException: org.apache.commons.math.FunctionEvaluationException: org.apache.commons.math.MaxIterationsExceededException: hi!", objArray4);
        org.junit.Assert.assertNotNull(objArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray4), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray4), "[]");
    }

    @Test
    public void test06318() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06318");
        java.lang.Throwable throwable3 = null;
        org.apache.commons.math.ConvergenceException convergenceException4 = new org.apache.commons.math.ConvergenceException(throwable3);
        org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex6 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex7 = complex6.sqrt();
        org.apache.commons.math.complex.Complex complex8 = complex7.sin();
        org.apache.commons.math.complex.Complex complex9 = complex5.pow(complex7);
        org.apache.commons.math.complex.Complex complex10 = complex9.asin();
        org.apache.commons.math.complex.Complex complex11 = complex9.tan();
        java.lang.Object[] objArray15 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException16 = new org.apache.commons.math.ConvergenceException("", objArray15);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException17 = new org.apache.commons.math.MaxIterationsExceededException(0, "hi!", objArray15);
        int int18 = maxIterationsExceededException17.getMaxIterations();
        boolean boolean19 = complex11.equals((java.lang.Object) maxIterationsExceededException17);
        java.lang.String str20 = maxIterationsExceededException17.getPattern();
        convergenceException4.addSuppressed((java.lang.Throwable) maxIterationsExceededException17);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException22 = new org.apache.commons.math.FunctionEvaluationException((double) (byte) 10, "", (java.lang.Throwable) convergenceException4);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException23 = new org.apache.commons.math.FunctionEvaluationException(2.799833927635354E75d, (java.lang.Throwable) convergenceException4);
        org.apache.commons.math.ConvergenceException convergenceException24 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) functionEvaluationException23);
        java.lang.Object[] objArray25 = functionEvaluationException23.getArguments();
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "hi!" + "'", str20, "hi!");
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[]");
    }

    @Test
    public void test06319() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06319");
        java.lang.Object[] objArray13 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException14 = new org.apache.commons.math.ConvergenceException("", objArray13);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException15 = new org.apache.commons.math.FunctionEvaluationException((double) (short) 10, "hi!", objArray13);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException16 = new org.apache.commons.math.MaxIterationsExceededException((int) (byte) 0, "org.apache.commons.math.ConvergenceException: hi!", objArray13);
        java.lang.Throwable throwable17 = null;
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException18 = new org.apache.commons.math.FunctionEvaluationException((double) 10L, "org.apache.commons.math.ConvergenceException: ", objArray13, throwable17);
        java.lang.Object[] objArray25 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException26 = new org.apache.commons.math.ConvergenceException("", objArray25);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException27 = new org.apache.commons.math.MaxIterationsExceededException(0, "hi!", objArray25);
        org.apache.commons.math.ConvergenceException convergenceException29 = new org.apache.commons.math.ConvergenceException("");
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException30 = new org.apache.commons.math.FunctionEvaluationException((double) (short) 0, "hi!", objArray25, (java.lang.Throwable) convergenceException29);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException32 = new org.apache.commons.math.MaxIterationsExceededException((int) (short) 100);
        org.apache.commons.math.ConvergenceException convergenceException33 = new org.apache.commons.math.ConvergenceException("Maximal number of iterations ({0}) exceeded", objArray25, (java.lang.Throwable) maxIterationsExceededException32);
        int int34 = maxIterationsExceededException32.getMaxIterations();
        int int35 = maxIterationsExceededException32.getMaxIterations();
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException36 = new org.apache.commons.math.FunctionEvaluationException((double) 3, "org.apache.commons.math.ConvergenceException: hi!", objArray13, (java.lang.Throwable) maxIterationsExceededException32);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException37 = new org.apache.commons.math.MaxIterationsExceededException((int) (short) 0, "org.apache.commons.math.FunctionEvaluationException: Evaluation failed for argument = 350", objArray13);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException39 = new org.apache.commons.math.FunctionEvaluationException(10.170609052699179d);
        org.apache.commons.math.ConvergenceException convergenceException40 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.MaxIterationsExceededException: ", objArray13, (java.lang.Throwable) functionEvaluationException39);
        org.apache.commons.math.ConvergenceException convergenceException41 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.MaxIterationsExceededException: Maximal number of iterations (3) exceeded", (java.lang.Throwable) convergenceException40);
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[]");
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 100 + "'", int34 == 100);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 100 + "'", int35 == 100);
    }

    @Test
    public void test06320() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06320");
        double[] doubleArray5 = new double[] { 0L, '#', 100.0f, 0L, (-1.0d) };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray5);
        double double8 = polynomialFunction6.value((double) 0);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver9 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        double[] doubleArray10 = polynomialFunction6.getCoefficients();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver11 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver11.setRelativeAccuracy(1.00010101E8d);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[0.0, 35.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[0.0, 35.0, 100.0, 0.0, -1.0]");
    }

    @Test
    public void test06321() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06321");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex1 = complex0.cosh();
        double double2 = complex0.abs();
        org.apache.commons.math.complex.Complex complex3 = complex0.conjugate();
        org.apache.commons.math.complex.Complex complex4 = complex3.conjugate();
        org.apache.commons.math.complex.Complex complex5 = complex3.tanh();
        org.apache.commons.math.complex.Complex complex6 = complex5.tan();
        org.apache.commons.math.complex.Complex complex7 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex8 = complex7.cosh();
        double double9 = complex7.abs();
        org.apache.commons.math.complex.Complex complex10 = complex7.conjugate();
        org.apache.commons.math.complex.Complex complex11 = complex10.conjugate();
        org.apache.commons.math.complex.Complex complex12 = complex6.subtract(complex10);
        org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex15 = complex14.sqrt();
        org.apache.commons.math.complex.Complex complex16 = complex15.sin();
        org.apache.commons.math.complex.Complex complex17 = complex13.pow(complex15);
        org.apache.commons.math.complex.Complex complex18 = complex17.asin();
        org.apache.commons.math.complex.Complex complex19 = complex17.tan();
        org.apache.commons.math.complex.Complex complex20 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex21 = complex20.cosh();
        double double22 = complex20.abs();
        org.apache.commons.math.complex.Complex complex23 = complex20.conjugate();
        org.apache.commons.math.complex.Complex complex24 = complex23.conjugate();
        boolean boolean25 = complex23.isInfinite();
        org.apache.commons.math.complex.Complex complex26 = complex23.asin();
        boolean boolean27 = complex23.isNaN();
        org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex29 = complex28.cosh();
        org.apache.commons.math.complex.Complex complex30 = complex23.divide(complex28);
        org.apache.commons.math.complex.Complex complex31 = complex19.pow(complex28);
        org.apache.commons.math.complex.Complex complex32 = complex12.divide(complex19);
        org.apache.commons.math.complex.Complex complex33 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex34 = complex33.cosh();
        double double35 = complex33.abs();
        org.apache.commons.math.complex.Complex complex36 = complex33.conjugate();
        org.apache.commons.math.complex.Complex complex37 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex38 = complex37.sqrt();
        boolean boolean39 = complex37.isNaN();
        org.apache.commons.math.complex.Complex complex40 = complex37.sin();
        org.apache.commons.math.complex.Complex complex41 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex42 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex43 = complex42.sqrt();
        org.apache.commons.math.complex.Complex complex44 = complex43.sin();
        org.apache.commons.math.complex.Complex complex45 = complex41.pow(complex43);
        org.apache.commons.math.complex.Complex complex46 = complex45.asin();
        org.apache.commons.math.complex.Complex complex47 = complex46.atan();
        boolean boolean48 = complex47.isInfinite();
        org.apache.commons.math.complex.Complex complex49 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex50 = complex47.subtract(complex49);
        org.apache.commons.math.complex.Complex complex51 = complex50.sin();
        org.apache.commons.math.complex.Complex complex52 = complex37.divide(complex51);
        org.apache.commons.math.complex.Complex complex53 = complex33.subtract(complex51);
        double double54 = complex53.abs();
        org.apache.commons.math.complex.Complex complex55 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex56 = complex55.cosh();
        double double57 = complex55.abs();
        org.apache.commons.math.complex.Complex complex58 = complex55.conjugate();
        org.apache.commons.math.complex.Complex complex59 = complex58.conjugate();
        boolean boolean60 = complex58.isInfinite();
        org.apache.commons.math.complex.Complex complex61 = complex58.cos();
        org.apache.commons.math.complex.Complex complex62 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex63 = complex62.cosh();
        double double64 = complex62.abs();
        org.apache.commons.math.complex.Complex complex65 = complex62.conjugate();
        org.apache.commons.math.complex.Complex complex66 = complex65.conjugate();
        boolean boolean67 = complex65.isInfinite();
        org.apache.commons.math.complex.Complex complex68 = complex65.asin();
        boolean boolean69 = complex65.isNaN();
        org.apache.commons.math.complex.Complex complex70 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex71 = complex70.cosh();
        org.apache.commons.math.complex.Complex complex72 = complex65.divide(complex70);
        org.apache.commons.math.complex.Complex complex73 = complex61.divide(complex70);
        org.apache.commons.math.complex.Complex complex74 = complex70.sinh();
        org.apache.commons.math.complex.Complex complex75 = complex74.conjugate();
        org.apache.commons.math.complex.Complex complex76 = complex74.acos();
        org.apache.commons.math.complex.Complex complex77 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex78 = complex77.cosh();
        org.apache.commons.math.complex.Complex complex79 = complex78.acos();
        org.apache.commons.math.complex.Complex complex80 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex81 = complex80.cosh();
        org.apache.commons.math.complex.Complex complex82 = complex80.log();
        org.apache.commons.math.complex.Complex complex83 = complex80.sin();
        org.apache.commons.math.complex.Complex complex84 = complex83.tanh();
        org.apache.commons.math.complex.Complex complex85 = complex78.add(complex84);
        org.apache.commons.math.complex.Complex complex86 = complex76.pow(complex84);
        org.apache.commons.math.complex.Complex complex87 = complex53.multiply(complex84);
        org.apache.commons.math.complex.Complex complex88 = complex12.add(complex53);
        org.apache.commons.math.complex.Complex complex89 = complex53.tan();
        org.apache.commons.math.complex.Complex complex90 = complex89.acos();
        org.apache.commons.math.complex.Complex complex91 = complex89.asin();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + Double.POSITIVE_INFINITY + "'", double2 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + Double.POSITIVE_INFINITY + "'", double9 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + Double.POSITIVE_INFINITY + "'", double22 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + Double.POSITIVE_INFINITY + "'", double35 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertTrue(Double.isNaN(double54));
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + Double.POSITIVE_INFINITY + "'", double57 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + Double.POSITIVE_INFINITY + "'", double64 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertNotNull(complex75);
        org.junit.Assert.assertNotNull(complex76);
        org.junit.Assert.assertNotNull(complex77);
        org.junit.Assert.assertNotNull(complex78);
        org.junit.Assert.assertNotNull(complex79);
        org.junit.Assert.assertNotNull(complex80);
        org.junit.Assert.assertNotNull(complex81);
        org.junit.Assert.assertNotNull(complex82);
        org.junit.Assert.assertNotNull(complex83);
        org.junit.Assert.assertNotNull(complex84);
        org.junit.Assert.assertNotNull(complex85);
        org.junit.Assert.assertNotNull(complex86);
        org.junit.Assert.assertNotNull(complex87);
        org.junit.Assert.assertNotNull(complex88);
        org.junit.Assert.assertNotNull(complex89);
        org.junit.Assert.assertNotNull(complex90);
        org.junit.Assert.assertNotNull(complex91);
    }

    @Test
    public void test06322() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06322");
        double[] doubleArray2 = new double[] { (byte) 1, 100 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) (short) 100);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver6 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction3);
        double double10 = laguerreSolver6.solve((double) (-1L), 349.0d, (double) (short) 10);
        double double11 = laguerreSolver6.getAbsoluteAccuracy();
        int int12 = laguerreSolver6.getMaximalIterationCount();
        laguerreSolver6.setMaximalIterationCount(1);
        // The following exception was thrown during execution in test generation
        try {
            double double18 = laguerreSolver6.solve((-7.982927222591924E33d), (double) (byte) 100, 134.02310093999603d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid interval, initial value parameters:  lower=-7.982927222591924E33 initial=134.02310093999603 upper=100.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 10001.0d + "'", double5 == 10001.0d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + (-0.01d) + "'", double10 == (-0.01d));
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 1.0E-6d + "'", double11 == 1.0E-6d);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 100 + "'", int12 == 100);
    }

    @Test
    public void test06323() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06323");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex1 = complex0.cosh();
        double double2 = complex0.abs();
        org.apache.commons.math.complex.Complex complex3 = complex0.conjugate();
        org.apache.commons.math.complex.Complex complex4 = complex3.conjugate();
        boolean boolean5 = complex3.isInfinite();
        org.apache.commons.math.complex.Complex complex6 = complex3.asin();
        boolean boolean7 = complex3.isNaN();
        org.apache.commons.math.complex.Complex complex8 = complex3.sin();
        org.apache.commons.math.complex.Complex complex9 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex10 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex11 = complex10.sqrt();
        org.apache.commons.math.complex.Complex complex12 = complex11.sin();
        org.apache.commons.math.complex.Complex complex13 = complex9.pow(complex11);
        org.apache.commons.math.complex.Complex complex14 = complex13.asin();
        org.apache.commons.math.complex.Complex complex15 = complex13.tan();
        org.apache.commons.math.complex.Complex complex16 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex17 = complex16.cosh();
        double double18 = complex16.abs();
        org.apache.commons.math.complex.Complex complex19 = complex16.conjugate();
        org.apache.commons.math.complex.Complex complex20 = complex19.conjugate();
        boolean boolean21 = complex19.isInfinite();
        org.apache.commons.math.complex.Complex complex22 = complex19.asin();
        boolean boolean23 = complex19.isNaN();
        org.apache.commons.math.complex.Complex complex24 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex25 = complex24.cosh();
        org.apache.commons.math.complex.Complex complex26 = complex19.divide(complex24);
        org.apache.commons.math.complex.Complex complex27 = complex15.pow(complex24);
        org.apache.commons.math.complex.Complex complex28 = complex24.tanh();
        org.apache.commons.math.complex.Complex complex29 = complex28.acos();
        org.apache.commons.math.complex.Complex complex30 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex31 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex32 = complex31.sqrt();
        org.apache.commons.math.complex.Complex complex33 = complex32.sin();
        org.apache.commons.math.complex.Complex complex34 = complex30.pow(complex32);
        org.apache.commons.math.complex.Complex complex35 = complex34.asin();
        org.apache.commons.math.complex.Complex complex36 = complex34.tan();
        org.apache.commons.math.complex.Complex complex37 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex38 = complex37.cosh();
        double double39 = complex37.abs();
        org.apache.commons.math.complex.Complex complex40 = complex37.conjugate();
        org.apache.commons.math.complex.Complex complex41 = complex40.conjugate();
        boolean boolean42 = complex40.isInfinite();
        org.apache.commons.math.complex.Complex complex43 = complex40.asin();
        boolean boolean44 = complex40.isNaN();
        org.apache.commons.math.complex.Complex complex45 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex46 = complex45.cosh();
        org.apache.commons.math.complex.Complex complex47 = complex40.divide(complex45);
        org.apache.commons.math.complex.Complex complex48 = complex36.pow(complex45);
        org.apache.commons.math.complex.Complex complex49 = complex45.tanh();
        org.apache.commons.math.complex.Complex complex50 = complex49.acos();
        boolean boolean51 = complex29.equals((java.lang.Object) complex50);
        org.apache.commons.math.complex.Complex complex52 = complex8.add(complex50);
        double double53 = complex8.getReal();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + Double.POSITIVE_INFINITY + "'", double2 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + Double.POSITIVE_INFINITY + "'", double18 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + Double.POSITIVE_INFINITY + "'", double39 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertTrue(Double.isNaN(double53));
    }

    @Test
    public void test06324() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06324");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex1 = complex0.cosh();
        double double2 = complex0.abs();
        org.apache.commons.math.complex.Complex complex3 = complex0.conjugate();
        org.apache.commons.math.complex.Complex complex4 = complex3.conjugate();
        org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex6 = complex5.tan();
        org.apache.commons.math.complex.Complex complex7 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex8 = complex7.cosh();
        org.apache.commons.math.complex.Complex complex9 = complex8.acos();
        double double10 = complex8.getReal();
        boolean boolean11 = complex6.equals((java.lang.Object) complex8);
        org.apache.commons.math.complex.Complex complex12 = complex4.subtract(complex8);
        org.apache.commons.math.complex.Complex complex13 = complex8.exp();
        boolean boolean14 = complex13.isInfinite();
        org.apache.commons.math.complex.Complex complex15 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex16 = complex15.cosh();
        org.apache.commons.math.complex.Complex complex17 = complex16.acos();
        double double18 = complex16.getReal();
        org.apache.commons.math.complex.Complex complex19 = complex16.conjugate();
        org.apache.commons.math.complex.Complex complex20 = complex13.multiply(complex19);
        org.apache.commons.math.complex.Complex complex21 = complex13.sqrt1z();
        boolean boolean22 = complex13.isNaN();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + Double.POSITIVE_INFINITY + "'", double2 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
    }

    @Test
    public void test06325() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06325");
        double[] doubleArray2 = new double[] { (byte) 1, 100 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) (short) 100);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver6 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction3);
        double double10 = laguerreSolver6.solve((double) (-1L), 349.0d, (double) (short) 10);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction11 = laguerreSolver6.getPolynomialFunction();
        laguerreSolver6.resetRelativeAccuracy();
        laguerreSolver6.setFunctionValueAccuracy((double) 10.0f);
        laguerreSolver6.setRelativeAccuracy((double) (-1));
        int int17 = laguerreSolver6.getMaximalIterationCount();
        double double18 = laguerreSolver6.getAbsoluteAccuracy();
        int int19 = laguerreSolver6.getMaximalIterationCount();
        laguerreSolver6.resetMaximalIterationCount();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 10001.0d + "'", double5 == 10001.0d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + (-0.01d) + "'", double10 == (-0.01d));
        org.junit.Assert.assertNotNull(polynomialFunction11);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 100 + "'", int17 == 100);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 1.0E-6d + "'", double18 == 1.0E-6d);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 100 + "'", int19 == 100);
    }

    @Test
    public void test06326() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06326");
        double[] doubleArray2 = new double[] { (byte) 1, 100 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) (short) 100);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver6 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction3);
        double double10 = laguerreSolver6.solve((double) (-1L), 349.0d, (double) (short) 10);
        laguerreSolver6.resetMaximalIterationCount();
        double double15 = laguerreSolver6.solve((-0.01d), (double) 1.0f, 0.0d);
        double double16 = laguerreSolver6.getResult();
        laguerreSolver6.setRelativeAccuracy((-2.84205213599E11d));
        laguerreSolver6.setMaximalIterationCount(100);
        laguerreSolver6.resetFunctionValueAccuracy();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 10001.0d + "'", double5 == 10001.0d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + (-0.01d) + "'", double10 == (-0.01d));
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + (-0.01d) + "'", double15 == (-0.01d));
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + (-0.01d) + "'", double16 == (-0.01d));
    }

    @Test
    public void test06327() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06327");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex2 = complex1.sqrt();
        org.apache.commons.math.complex.Complex complex3 = complex2.sin();
        org.apache.commons.math.complex.Complex complex4 = complex0.pow(complex2);
        org.apache.commons.math.complex.Complex complex5 = complex4.asin();
        org.apache.commons.math.complex.Complex complex6 = complex4.tan();
        org.apache.commons.math.complex.Complex complex7 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex8 = complex7.cosh();
        double double9 = complex7.abs();
        org.apache.commons.math.complex.Complex complex10 = complex7.conjugate();
        org.apache.commons.math.complex.Complex complex11 = complex10.conjugate();
        boolean boolean12 = complex10.isInfinite();
        org.apache.commons.math.complex.Complex complex13 = complex10.asin();
        boolean boolean14 = complex10.isNaN();
        org.apache.commons.math.complex.Complex complex15 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex16 = complex15.cosh();
        org.apache.commons.math.complex.Complex complex17 = complex10.divide(complex15);
        org.apache.commons.math.complex.Complex complex18 = complex6.pow(complex15);
        org.apache.commons.math.complex.Complex complex19 = complex6.sinh();
        double[] doubleArray25 = new double[] { 0L, '#', 100.0f, 0L, (-1.0d) };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction26 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray25);
        double double28 = polynomialFunction26.value((double) 0);
        double double30 = polynomialFunction26.value((double) (byte) 0);
        double[] doubleArray31 = polynomialFunction26.getCoefficients();
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction32 = polynomialFunction26.derivative();
        boolean boolean33 = complex19.equals((java.lang.Object) polynomialFunction26);
        org.apache.commons.math.complex.Complex complex34 = complex19.cosh();
        org.apache.commons.math.complex.Complex complex35 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex36 = complex35.cosh();
        double double37 = complex35.abs();
        org.apache.commons.math.complex.Complex complex38 = complex35.conjugate();
        org.apache.commons.math.complex.Complex complex39 = complex38.conjugate();
        org.apache.commons.math.complex.Complex complex40 = complex38.tanh();
        org.apache.commons.math.complex.Complex complex41 = complex40.tan();
        org.apache.commons.math.complex.Complex complex42 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex43 = complex42.cosh();
        double double44 = complex42.abs();
        org.apache.commons.math.complex.Complex complex45 = complex42.conjugate();
        org.apache.commons.math.complex.Complex complex46 = complex45.conjugate();
        org.apache.commons.math.complex.Complex complex47 = complex41.subtract(complex45);
        org.apache.commons.math.complex.Complex complex48 = complex45.negate();
        org.apache.commons.math.complex.Complex complex49 = complex45.tanh();
        org.apache.commons.math.complex.Complex complex50 = complex19.pow(complex49);
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + Double.POSITIVE_INFINITY + "'", double9 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[0.0, 35.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.0d + "'", double30 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[0.0, 35.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(univariateRealFunction32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + Double.POSITIVE_INFINITY + "'", double37 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + Double.POSITIVE_INFINITY + "'", double44 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
    }

    @Test
    public void test06328() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06328");
        double[] doubleArray2 = new double[] { (byte) 1, 100 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) (short) 100);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver6 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction3);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction7 = laguerreSolver6.getPolynomialFunction();
        double double8 = laguerreSolver6.getRelativeAccuracy();
        laguerreSolver6.resetRelativeAccuracy();
        double double10 = laguerreSolver6.getFunctionValueAccuracy();
        laguerreSolver6.resetRelativeAccuracy();
        laguerreSolver6.setAbsoluteAccuracy((-1.6365376E7d));
        laguerreSolver6.resetMaximalIterationCount();
        // The following exception was thrown during execution in test generation
        try {
            double double15 = laguerreSolver6.getResult();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: No result available");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 10001.0d + "'", double5 == 10001.0d);
        org.junit.Assert.assertNotNull(polynomialFunction7);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 1.0E-14d + "'", double8 == 1.0E-14d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0E-15d + "'", double10 == 1.0E-15d);
    }

    @Test
    public void test06329() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06329");
        double[] doubleArray2 = new double[] { (byte) 1, 100 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) (short) 100);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver6 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction3);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction7 = laguerreSolver6.getPolynomialFunction();
        laguerreSolver6.setRelativeAccuracy((double) 0);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction10 = laguerreSolver6.getPolynomialFunction();
        laguerreSolver6.resetRelativeAccuracy();
        laguerreSolver6.setRelativeAccuracy(10.0d);
        laguerreSolver6.setAbsoluteAccuracy((-1.6365376E7d));
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction16 = laguerreSolver6.getPolynomialFunction();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver17 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction16);
        double[] doubleArray18 = polynomialFunction16.getCoefficients();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction19 = polynomialFunction16.polynomialDerivative();
        double[] doubleArray20 = polynomialFunction16.getCoefficients();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 10001.0d + "'", double5 == 10001.0d);
        org.junit.Assert.assertNotNull(polynomialFunction7);
        org.junit.Assert.assertNotNull(polynomialFunction10);
        org.junit.Assert.assertNotNull(polynomialFunction16);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(polynomialFunction19);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[1.0, 100.0]");
    }

    @Test
    public void test06330() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06330");
        java.lang.Object[] objArray6 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException7 = new org.apache.commons.math.ConvergenceException("", objArray6);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException8 = new org.apache.commons.math.MaxIterationsExceededException(0, "hi!", objArray6);
        int int9 = maxIterationsExceededException8.getMaxIterations();
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException10 = new org.apache.commons.math.FunctionEvaluationException(Double.POSITIVE_INFINITY, "org.apache.commons.math.FunctionEvaluationException: ", (java.lang.Throwable) maxIterationsExceededException8);
        java.lang.Object[] objArray16 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException17 = new org.apache.commons.math.ConvergenceException("", objArray16);
        java.lang.Object[] objArray19 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException20 = new org.apache.commons.math.ConvergenceException("", objArray19);
        org.apache.commons.math.ConvergenceException convergenceException21 = new org.apache.commons.math.ConvergenceException("", objArray16, (java.lang.Throwable) convergenceException20);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException23 = new org.apache.commons.math.FunctionEvaluationException((double) 100);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException24 = new org.apache.commons.math.FunctionEvaluationException(100.0d, "org.apache.commons.math.ConvergenceException: hi!", objArray16, (java.lang.Throwable) functionEvaluationException23);
        org.apache.commons.math.ConvergenceException convergenceException25 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.FunctionEvaluationException: ", (java.lang.Throwable) functionEvaluationException23);
        functionEvaluationException10.addSuppressed((java.lang.Throwable) convergenceException25);
        java.lang.Throwable[] throwableArray27 = convergenceException25.getSuppressed();
        org.apache.commons.math.ConvergenceException convergenceException28 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.FunctionEvaluationException: org.apache.commons.math.FunctionEvaluationException: org.apache.commons.math.FunctionEvaluationException: ", (java.lang.Object[]) throwableArray27);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(objArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray16), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray16), "[]");
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[]");
        org.junit.Assert.assertNotNull(throwableArray27);
    }

    @Test
    public void test06331() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06331");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex1 = complex0.cosh();
        double double2 = complex0.abs();
        org.apache.commons.math.complex.Complex complex3 = complex0.conjugate();
        org.apache.commons.math.complex.Complex complex4 = complex3.conjugate();
        org.apache.commons.math.complex.Complex complex5 = complex3.tanh();
        org.apache.commons.math.complex.Complex complex6 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex7 = complex6.sqrt();
        org.apache.commons.math.complex.Complex complex8 = complex7.sin();
        org.apache.commons.math.complex.Complex complex9 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex10 = complex9.sqrt();
        org.apache.commons.math.complex.Complex complex11 = complex10.sin();
        org.apache.commons.math.complex.Complex complex12 = complex7.multiply(complex10);
        org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex14 = complex13.exp();
        org.apache.commons.math.complex.Complex complex15 = complex7.subtract(complex13);
        org.apache.commons.math.complex.Complex complex16 = complex5.add(complex7);
        org.apache.commons.math.complex.Complex complex17 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex18 = complex17.cosh();
        double double19 = complex17.abs();
        org.apache.commons.math.complex.Complex complex20 = complex17.conjugate();
        org.apache.commons.math.complex.Complex complex21 = complex20.conjugate();
        org.apache.commons.math.complex.Complex complex22 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex23 = complex22.tan();
        org.apache.commons.math.complex.Complex complex24 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex25 = complex24.cosh();
        org.apache.commons.math.complex.Complex complex26 = complex25.acos();
        double double27 = complex25.getReal();
        boolean boolean28 = complex23.equals((java.lang.Object) complex25);
        org.apache.commons.math.complex.Complex complex29 = complex21.subtract(complex25);
        org.apache.commons.math.complex.Complex complex30 = complex25.tanh();
        org.apache.commons.math.complex.Complex complex31 = complex30.exp();
        org.apache.commons.math.complex.Complex complex32 = complex5.subtract(complex31);
        double double33 = complex32.getReal();
        org.apache.commons.math.complex.Complex complex34 = complex32.atan();
        org.apache.commons.math.complex.Complex complex35 = complex32.acos();
        org.apache.commons.math.complex.Complex complex36 = complex35.exp();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + Double.POSITIVE_INFINITY + "'", double2 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + Double.POSITIVE_INFINITY + "'", double19 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertTrue(Double.isNaN(double33));
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
    }

    @Test
    public void test06332() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06332");
        java.lang.Object[] objArray1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.ConvergenceException convergenceException2 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.FunctionEvaluationException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: ", objArray1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test06333() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06333");
        double[] doubleArray5 = new double[] { 0L, '#', 100.0f, 0L, (-1.0d) };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray5);
        double double8 = polynomialFunction6.value((double) 0);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver9 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver9.setMaximalIterationCount((int) (short) -1);
        laguerreSolver9.resetRelativeAccuracy();
        laguerreSolver9.setFunctionValueAccuracy((double) (byte) 1);
        laguerreSolver9.setRelativeAccuracy(1.0000000001255978d);
        laguerreSolver9.resetFunctionValueAccuracy();
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[0.0, 35.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
    }

    @Test
    public void test06334() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06334");
        double[] doubleArray2 = new double[] { (byte) 1, 100 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) (short) 100);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver6 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction3);
        double double10 = laguerreSolver6.solve((double) (-1L), 349.0d, (double) (short) 10);
        laguerreSolver6.setMaximalIterationCount((int) '#');
        laguerreSolver6.setMaximalIterationCount((int) ' ');
        double double15 = laguerreSolver6.getRelativeAccuracy();
        org.apache.commons.math.complex.Complex complex16 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex17 = complex16.cosh();
        org.apache.commons.math.complex.Complex complex18 = complex16.log();
        org.apache.commons.math.complex.Complex complex19 = complex18.cos();
        org.apache.commons.math.complex.Complex complex20 = complex18.exp();
        boolean boolean21 = complex18.isNaN();
        org.apache.commons.math.complex.Complex complex22 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex23 = complex22.cosh();
        double double24 = complex22.abs();
        org.apache.commons.math.complex.Complex complex25 = complex22.conjugate();
        org.apache.commons.math.complex.Complex complex26 = complex25.conjugate();
        org.apache.commons.math.complex.Complex complex27 = complex25.tanh();
        org.apache.commons.math.complex.Complex complex28 = complex18.multiply(complex25);
        org.apache.commons.math.complex.Complex complex29 = complex25.acos();
        org.apache.commons.math.complex.Complex complex30 = complex29.cosh();
        org.apache.commons.math.complex.Complex complex31 = complex29.sqrt1z();
        java.lang.Object[] objArray38 = new java.lang.Object[] { 0.0f, (short) 1 };
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException39 = new org.apache.commons.math.MaxIterationsExceededException(100, "", objArray38);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException40 = new org.apache.commons.math.FunctionEvaluationException(35.0d, "hi!", objArray38);
        boolean boolean41 = complex29.equals((java.lang.Object) "hi!");
        double[] doubleArray47 = new double[] { 0L, '#', 100.0f, 0L, (-1.0d) };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction48 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray47);
        double double50 = polynomialFunction48.value((double) 0);
        double double52 = polynomialFunction48.value((double) (byte) 0);
        double[] doubleArray53 = polynomialFunction48.getCoefficients();
        boolean boolean54 = complex29.equals((java.lang.Object) doubleArray53);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction55 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray53);
        org.apache.commons.math.complex.Complex[] complexArray57 = laguerreSolver6.solveAll(doubleArray53, (double) 1.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction58 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray53);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver59 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction58);
        // The following exception was thrown during execution in test generation
        try {
            double double63 = laguerreSolver59.solve((double) 32, (-93556.0d), 2.799833927635354E75d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Endpoints do not specify an interval: [32.0,-93556.0]");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 10001.0d + "'", double5 == 10001.0d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + (-0.01d) + "'", double10 == (-0.01d));
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 1.0E-14d + "'", double15 == 1.0E-14d);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + Double.POSITIVE_INFINITY + "'", double24 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(objArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray38), "[0.0, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray38), "[0.0, 1]");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[0.0, 35.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 0.0d + "'", double50 == 0.0d);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 0.0d + "'", double52 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[0.0, 35.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(complexArray57);
    }

    @Test
    public void test06335() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06335");
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException3 = new org.apache.commons.math.FunctionEvaluationException((-7.173051538824589E28d), "org.apache.commons.math.FunctionEvaluationException: org.apache.commons.math.FunctionEvaluationException: org.apache.commons.math.FunctionEvaluationException: ");
        org.apache.commons.math.ConvergenceException convergenceException4 = new org.apache.commons.math.ConvergenceException("Evaluation failed for argument = -161", (java.lang.Throwable) functionEvaluationException3);
    }

    @Test
    public void test06336() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06336");
        double[] doubleArray2 = new double[] { (byte) 1, 100 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) (short) 100);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver6 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction3);
        double[] doubleArray7 = polynomialFunction3.getCoefficients();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction8 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray7);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction9 = polynomialFunction8.polynomialDerivative();
        double[] doubleArray10 = polynomialFunction8.getCoefficients();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction11 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray10);
        double[] doubleArray12 = polynomialFunction11.getCoefficients();
        double[] doubleArray13 = polynomialFunction11.getCoefficients();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 10001.0d + "'", double5 == 10001.0d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(polynomialFunction9);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0, 100.0]");
    }

    @Test
    public void test06337() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06337");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex1 = complex0.cosh();
        double double2 = complex0.abs();
        org.apache.commons.math.complex.Complex complex3 = complex0.conjugate();
        org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex5 = complex4.cosh();
        double double6 = complex4.abs();
        org.apache.commons.math.complex.Complex complex7 = complex4.conjugate();
        org.apache.commons.math.complex.Complex complex8 = complex7.conjugate();
        org.apache.commons.math.complex.Complex complex9 = complex7.tanh();
        org.apache.commons.math.complex.Complex complex10 = complex7.atan();
        org.apache.commons.math.complex.Complex complex11 = complex0.subtract(complex7);
        org.apache.commons.math.complex.Complex complex12 = complex11.log();
        double double13 = complex12.getReal();
        org.apache.commons.math.complex.Complex complex14 = complex12.cosh();
        org.apache.commons.math.complex.Complex complex15 = complex14.sqrt1z();
        org.apache.commons.math.complex.Complex complex16 = complex15.exp();
        org.apache.commons.math.complex.Complex complex17 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex18 = complex17.cosh();
        org.apache.commons.math.complex.Complex complex19 = complex17.log();
        org.apache.commons.math.complex.Complex complex20 = complex17.sin();
        org.apache.commons.math.complex.Complex complex21 = complex17.log();
        org.apache.commons.math.complex.Complex complex22 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex23 = complex22.sqrt();
        org.apache.commons.math.complex.Complex complex24 = complex17.divide(complex23);
        org.apache.commons.math.complex.Complex complex25 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex26 = complex25.cosh();
        org.apache.commons.math.complex.Complex complex27 = complex26.acos();
        double double28 = complex26.getReal();
        org.apache.commons.math.complex.Complex complex29 = complex26.sqrt();
        org.apache.commons.math.complex.Complex complex30 = complex17.pow(complex26);
        org.apache.commons.math.complex.Complex complex31 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex32 = complex31.cosh();
        org.apache.commons.math.complex.Complex complex33 = complex31.log();
        org.apache.commons.math.complex.Complex complex34 = complex33.cos();
        org.apache.commons.math.complex.Complex complex35 = complex26.multiply(complex33);
        org.apache.commons.math.complex.Complex complex36 = complex33.tanh();
        double double37 = complex36.getImaginary();
        org.apache.commons.math.complex.Complex complex38 = complex36.asin();
        org.apache.commons.math.complex.Complex complex39 = complex15.subtract(complex36);
        org.apache.commons.math.complex.Complex complex40 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex41 = complex40.cosh();
        double double42 = complex40.abs();
        org.apache.commons.math.complex.Complex complex43 = complex40.conjugate();
        org.apache.commons.math.complex.Complex complex44 = complex43.conjugate();
        org.apache.commons.math.complex.Complex complex45 = complex43.tanh();
        org.apache.commons.math.complex.Complex complex46 = complex45.tan();
        org.apache.commons.math.complex.Complex complex47 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex48 = complex47.cosh();
        double double49 = complex47.abs();
        org.apache.commons.math.complex.Complex complex50 = complex47.conjugate();
        org.apache.commons.math.complex.Complex complex51 = complex50.conjugate();
        org.apache.commons.math.complex.Complex complex52 = complex46.subtract(complex50);
        org.apache.commons.math.complex.Complex complex53 = complex50.negate();
        org.apache.commons.math.complex.Complex complex54 = complex53.cosh();
        org.apache.commons.math.complex.Complex complex55 = complex39.add(complex54);
        org.apache.commons.math.complex.Complex complex56 = complex54.cos();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + Double.POSITIVE_INFINITY + "'", double2 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + Double.POSITIVE_INFINITY + "'", double6 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + Double.POSITIVE_INFINITY + "'", double42 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + Double.POSITIVE_INFINITY + "'", double49 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
    }

    @Test
    public void test06338() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06338");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex1 = complex0.cosh();
        double double2 = complex0.abs();
        org.apache.commons.math.complex.Complex complex3 = complex0.conjugate();
        org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex5 = complex4.cosh();
        double double6 = complex4.abs();
        org.apache.commons.math.complex.Complex complex7 = complex4.conjugate();
        org.apache.commons.math.complex.Complex complex8 = complex7.conjugate();
        org.apache.commons.math.complex.Complex complex9 = complex7.tanh();
        org.apache.commons.math.complex.Complex complex10 = complex7.atan();
        org.apache.commons.math.complex.Complex complex11 = complex0.subtract(complex7);
        org.apache.commons.math.complex.Complex complex12 = complex11.log();
        org.apache.commons.math.complex.Complex complex13 = complex12.negate();
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex15 = complex14.cosh();
        org.apache.commons.math.complex.Complex complex16 = complex14.log();
        org.apache.commons.math.complex.Complex complex17 = complex16.cos();
        double double18 = complex17.abs();
        org.apache.commons.math.complex.Complex complex19 = complex17.sqrt();
        org.apache.commons.math.complex.Complex complex20 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex21 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex22 = complex21.sqrt();
        org.apache.commons.math.complex.Complex complex23 = complex22.sin();
        org.apache.commons.math.complex.Complex complex24 = complex20.pow(complex22);
        org.apache.commons.math.complex.Complex complex25 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex26 = complex25.cosh();
        org.apache.commons.math.complex.Complex complex27 = complex25.log();
        org.apache.commons.math.complex.Complex complex28 = complex20.divide(complex27);
        org.apache.commons.math.complex.Complex complex29 = complex19.subtract(complex28);
        org.apache.commons.math.complex.Complex complex30 = complex19.conjugate();
        org.apache.commons.math.complex.Complex complex31 = complex19.cos();
        org.apache.commons.math.complex.Complex complex32 = complex31.sqrt();
        org.apache.commons.math.complex.Complex complex33 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex34 = complex33.cosh();
        org.apache.commons.math.complex.Complex complex35 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex36 = complex35.cosh();
        org.apache.commons.math.complex.Complex complex37 = complex35.log();
        org.apache.commons.math.complex.Complex complex38 = complex35.sin();
        org.apache.commons.math.complex.Complex complex39 = complex35.log();
        org.apache.commons.math.complex.Complex complex40 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex41 = complex40.sqrt();
        org.apache.commons.math.complex.Complex complex42 = complex35.divide(complex41);
        org.apache.commons.math.complex.Complex complex43 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex44 = complex43.cosh();
        org.apache.commons.math.complex.Complex complex45 = complex44.acos();
        double double46 = complex44.getReal();
        org.apache.commons.math.complex.Complex complex47 = complex44.sqrt();
        org.apache.commons.math.complex.Complex complex48 = complex35.pow(complex44);
        org.apache.commons.math.complex.Complex complex49 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex50 = complex49.cosh();
        org.apache.commons.math.complex.Complex complex51 = complex49.log();
        org.apache.commons.math.complex.Complex complex52 = complex51.cos();
        org.apache.commons.math.complex.Complex complex53 = complex44.multiply(complex51);
        org.apache.commons.math.complex.Complex complex54 = complex51.tanh();
        org.apache.commons.math.complex.Complex complex55 = complex33.divide(complex51);
        org.apache.commons.math.complex.Complex complex56 = complex32.pow(complex51);
        org.apache.commons.math.complex.Complex complex57 = complex12.pow(complex56);
        org.apache.commons.math.complex.Complex complex58 = complex57.tanh();
        org.apache.commons.math.complex.Complex complex59 = complex57.cosh();
        org.apache.commons.math.complex.Complex complex60 = complex59.atan();
        org.apache.commons.math.complex.Complex complex61 = complex59.atan();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + Double.POSITIVE_INFINITY + "'", double2 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + Double.POSITIVE_INFINITY + "'", double6 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertTrue(Double.isNaN(double46));
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex61);
    }

    @Test
    public void test06339() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06339");
        double[] doubleArray5 = new double[] { 0L, '#', 100.0f, 0L, (-1.0d) };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray5);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction7 = polynomialFunction6.polynomialDerivative();
        double[] doubleArray8 = polynomialFunction7.getCoefficients();
        double[] doubleArray9 = polynomialFunction7.getCoefficients();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction10 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray9);
        double double12 = polynomialFunction10.value(2.5745724768217308E82d);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[0.0, 35.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(polynomialFunction7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[35.0, 200.0, 0.0, -4.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[35.0, 200.0, 0.0, -4.0]");
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + (-6.8261426196981E247d) + "'", double12 == (-6.8261426196981E247d));
    }

    @Test
    public void test06340() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06340");
        java.lang.Object[] objArray13 = new java.lang.Object[] { 0.0f, (short) 1 };
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException14 = new org.apache.commons.math.MaxIterationsExceededException(100, "", objArray13);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException15 = new org.apache.commons.math.FunctionEvaluationException(35.0d, "hi!", objArray13);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException16 = new org.apache.commons.math.FunctionEvaluationException((double) (byte) -1, "org.apache.commons.math.MaxIterationsExceededException: org.apache.commons.math.FunctionEvaluationException: ", objArray13);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException19 = new org.apache.commons.math.FunctionEvaluationException((double) ' ', "org.apache.commons.math.MaxIterationsExceededException: org.apache.commons.math.FunctionEvaluationException: ");
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException20 = new org.apache.commons.math.FunctionEvaluationException((double) (byte) -1, "org.apache.commons.math.ConvergenceException: hi!", objArray13, (java.lang.Throwable) functionEvaluationException19);
        java.lang.Object[] objArray30 = new java.lang.Object[] { 0.0f, (short) 1 };
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException31 = new org.apache.commons.math.MaxIterationsExceededException(100, "", objArray30);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException32 = new org.apache.commons.math.MaxIterationsExceededException((-1), "", objArray30);
        org.apache.commons.math.ConvergenceException convergenceException33 = new org.apache.commons.math.ConvergenceException("Maximal number of iterations ({0}) exceeded", objArray30);
        java.lang.Object[] objArray44 = new java.lang.Object[] { 0.0f, (short) 1 };
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException45 = new org.apache.commons.math.MaxIterationsExceededException(100, "", objArray44);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException46 = new org.apache.commons.math.MaxIterationsExceededException((int) ' ', "hi!", objArray44);
        java.lang.Object[] objArray49 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException50 = new org.apache.commons.math.ConvergenceException("", objArray49);
        java.lang.Object[] objArray52 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException53 = new org.apache.commons.math.ConvergenceException("", objArray52);
        org.apache.commons.math.ConvergenceException convergenceException54 = new org.apache.commons.math.ConvergenceException("", objArray49, (java.lang.Throwable) convergenceException53);
        org.apache.commons.math.ConvergenceException convergenceException55 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.FunctionEvaluationException: ", objArray44, (java.lang.Throwable) convergenceException53);
        java.lang.Object[] objArray56 = convergenceException53.getArguments();
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException57 = new org.apache.commons.math.FunctionEvaluationException(0.0d, "hi!", (java.lang.Throwable) convergenceException53);
        org.apache.commons.math.ConvergenceException convergenceException58 = new org.apache.commons.math.ConvergenceException("", (java.lang.Throwable) functionEvaluationException57);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException59 = new org.apache.commons.math.FunctionEvaluationException((double) (-1), "org.apache.commons.math.FunctionEvaluationException: org.apache.commons.math.FunctionEvaluationException: ", objArray30, (java.lang.Throwable) convergenceException58);
        org.apache.commons.math.ConvergenceException convergenceException60 = new org.apache.commons.math.ConvergenceException("Evaluation failed for argument = {0}", objArray13, (java.lang.Throwable) functionEvaluationException59);
        org.apache.commons.math.ConvergenceException convergenceException65 = new org.apache.commons.math.ConvergenceException("");
        java.lang.Object[] objArray66 = convergenceException65.getArguments();
        java.lang.Object[] objArray74 = new java.lang.Object[] { 0.0f, (short) 1 };
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException75 = new org.apache.commons.math.MaxIterationsExceededException(100, "", objArray74);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException76 = new org.apache.commons.math.MaxIterationsExceededException((int) ' ', "hi!", objArray74);
        java.lang.Object[] objArray79 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException80 = new org.apache.commons.math.ConvergenceException("", objArray79);
        java.lang.Object[] objArray82 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException83 = new org.apache.commons.math.ConvergenceException("", objArray82);
        org.apache.commons.math.ConvergenceException convergenceException84 = new org.apache.commons.math.ConvergenceException("", objArray79, (java.lang.Throwable) convergenceException83);
        org.apache.commons.math.ConvergenceException convergenceException85 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.FunctionEvaluationException: ", objArray74, (java.lang.Throwable) convergenceException83);
        org.apache.commons.math.ConvergenceException convergenceException86 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: Convergence failed", objArray66, (java.lang.Throwable) convergenceException85);
        java.lang.String str87 = convergenceException85.getPattern();
        org.apache.commons.math.ConvergenceException convergenceException88 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException85);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException89 = new org.apache.commons.math.FunctionEvaluationException((double) 10, "org.apache.commons.math.MaxIterationsExceededException: hi!", (java.lang.Throwable) convergenceException88);
        org.apache.commons.math.ConvergenceException convergenceException90 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.FunctionEvaluationException: org.apache.commons.math.FunctionEvaluationException: ", objArray13, (java.lang.Throwable) functionEvaluationException89);
        java.lang.Throwable[] throwableArray91 = convergenceException90.getSuppressed();
        org.apache.commons.math.ConvergenceException convergenceException92 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.MaxIterationsExceededException: Maximal number of iterations (52) exceeded", (java.lang.Throwable) convergenceException90);
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[0.0, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[0.0, 1]");
        org.junit.Assert.assertNotNull(objArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray30), "[0.0, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray30), "[0.0, 1]");
        org.junit.Assert.assertNotNull(objArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray44), "[0.0, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray44), "[0.0, 1]");
        org.junit.Assert.assertNotNull(objArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray49), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray49), "[]");
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[]");
        org.junit.Assert.assertNotNull(objArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray56), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray56), "[]");
        org.junit.Assert.assertNotNull(objArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray66), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray66), "[]");
        org.junit.Assert.assertNotNull(objArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray74), "[0.0, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray74), "[0.0, 1]");
        org.junit.Assert.assertNotNull(objArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray79), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray79), "[]");
        org.junit.Assert.assertNotNull(objArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray82), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray82), "[]");
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "org.apache.commons.math.FunctionEvaluationException: " + "'", str87, "org.apache.commons.math.FunctionEvaluationException: ");
        org.junit.Assert.assertNotNull(throwableArray91);
    }

    @Test
    public void test06341() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06341");
        double[] doubleArray2 = new double[] { (byte) 1, 100 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) (short) 100);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver6 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction3);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction7 = laguerreSolver6.getPolynomialFunction();
        laguerreSolver6.setRelativeAccuracy((double) 0);
        double[] doubleArray12 = new double[] { (byte) -1, '#' };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction13 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray12);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction14 = polynomialFunction13.polynomialDerivative();
        double[] doubleArray15 = polynomialFunction13.getCoefficients();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction16 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray15);
        org.apache.commons.math.complex.Complex[] complexArray18 = laguerreSolver6.solveAll(doubleArray15, (double) 4);
        double double19 = laguerreSolver6.getAbsoluteAccuracy();
        laguerreSolver6.resetRelativeAccuracy();
        int int21 = laguerreSolver6.getMaximalIterationCount();
        double double22 = laguerreSolver6.getResult();
        double double23 = laguerreSolver6.getFunctionValueAccuracy();
        int int24 = laguerreSolver6.getMaximalIterationCount();
        laguerreSolver6.resetFunctionValueAccuracy();
        laguerreSolver6.resetMaximalIterationCount();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 10001.0d + "'", double5 == 10001.0d);
        org.junit.Assert.assertNotNull(polynomialFunction7);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[-1.0, 35.0]");
        org.junit.Assert.assertNotNull(polynomialFunction14);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[-1.0, 35.0]");
        org.junit.Assert.assertNotNull(complexArray18);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 1.0E-6d + "'", double19 == 1.0E-6d);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 100 + "'", int21 == 100);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 1.0E-15d + "'", double23 == 1.0E-15d);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 100 + "'", int24 == 100);
    }

    @Test
    public void test06342() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06342");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex1 = complex0.cosh();
        double double2 = complex0.abs();
        org.apache.commons.math.complex.Complex complex3 = complex0.conjugate();
        org.apache.commons.math.complex.Complex complex4 = complex3.conjugate();
        org.apache.commons.math.complex.Complex complex5 = complex3.tanh();
        org.apache.commons.math.complex.Complex complex6 = complex5.tan();
        org.apache.commons.math.complex.Complex complex7 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex8 = complex7.cosh();
        double double9 = complex7.abs();
        org.apache.commons.math.complex.Complex complex10 = complex7.conjugate();
        org.apache.commons.math.complex.Complex complex11 = complex10.conjugate();
        org.apache.commons.math.complex.Complex complex12 = complex6.subtract(complex10);
        org.apache.commons.math.complex.Complex complex13 = complex10.negate();
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex15 = complex14.cosh();
        org.apache.commons.math.complex.Complex complex16 = complex14.log();
        org.apache.commons.math.complex.Complex complex17 = complex14.sin();
        org.apache.commons.math.complex.Complex complex18 = complex17.atan();
        org.apache.commons.math.complex.Complex complex19 = complex18.exp();
        org.apache.commons.math.complex.Complex complex20 = complex10.add(complex18);
        org.apache.commons.math.complex.Complex complex21 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex22 = complex21.cosh();
        org.apache.commons.math.complex.Complex complex23 = complex21.log();
        org.apache.commons.math.complex.Complex complex24 = complex21.sin();
        org.apache.commons.math.complex.Complex complex25 = complex21.log();
        org.apache.commons.math.complex.Complex complex26 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex27 = complex26.sqrt();
        org.apache.commons.math.complex.Complex complex28 = complex21.divide(complex27);
        org.apache.commons.math.complex.Complex complex29 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex30 = complex29.cosh();
        double double31 = complex29.abs();
        org.apache.commons.math.complex.Complex complex32 = complex29.conjugate();
        org.apache.commons.math.complex.Complex complex33 = complex32.conjugate();
        org.apache.commons.math.complex.Complex complex34 = complex28.subtract(complex33);
        org.apache.commons.math.complex.Complex complex35 = complex28.exp();
        org.apache.commons.math.complex.Complex complex36 = complex28.tan();
        org.apache.commons.math.complex.Complex complex37 = complex36.sqrt();
        org.apache.commons.math.complex.Complex complex38 = complex37.tanh();
        org.apache.commons.math.complex.Complex complex39 = complex38.asin();
        org.apache.commons.math.complex.Complex complex40 = complex20.divide(complex38);
        org.apache.commons.math.complex.Complex complex41 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex42 = complex41.cosh();
        double double43 = complex41.abs();
        org.apache.commons.math.complex.Complex complex44 = complex41.conjugate();
        org.apache.commons.math.complex.Complex complex45 = complex44.conjugate();
        boolean boolean46 = complex44.isInfinite();
        org.apache.commons.math.complex.Complex complex47 = complex44.cos();
        org.apache.commons.math.complex.Complex complex48 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex49 = complex48.cosh();
        double double50 = complex48.abs();
        org.apache.commons.math.complex.Complex complex51 = complex48.conjugate();
        org.apache.commons.math.complex.Complex complex52 = complex51.conjugate();
        boolean boolean53 = complex51.isInfinite();
        org.apache.commons.math.complex.Complex complex54 = complex51.asin();
        boolean boolean55 = complex51.isNaN();
        org.apache.commons.math.complex.Complex complex56 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex57 = complex56.cosh();
        org.apache.commons.math.complex.Complex complex58 = complex51.divide(complex56);
        org.apache.commons.math.complex.Complex complex59 = complex47.divide(complex56);
        org.apache.commons.math.complex.Complex complex60 = complex47.log();
        org.apache.commons.math.complex.Complex complex61 = complex47.asin();
        org.apache.commons.math.complex.Complex complex62 = complex61.negate();
        org.apache.commons.math.complex.Complex complex63 = complex20.subtract(complex62);
        org.apache.commons.math.complex.Complex complex64 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex65 = complex64.cosh();
        org.apache.commons.math.complex.Complex complex66 = complex64.log();
        org.apache.commons.math.complex.Complex complex67 = complex66.cos();
        org.apache.commons.math.complex.Complex complex68 = complex66.exp();
        boolean boolean69 = complex66.isNaN();
        org.apache.commons.math.complex.Complex complex70 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex71 = complex70.cosh();
        double double72 = complex70.abs();
        org.apache.commons.math.complex.Complex complex73 = complex70.conjugate();
        org.apache.commons.math.complex.Complex complex74 = complex73.conjugate();
        org.apache.commons.math.complex.Complex complex75 = complex73.tanh();
        org.apache.commons.math.complex.Complex complex76 = complex66.multiply(complex73);
        org.apache.commons.math.complex.Complex complex77 = complex73.asin();
        org.apache.commons.math.complex.Complex complex78 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex79 = complex78.cosh();
        org.apache.commons.math.complex.Complex complex80 = complex78.log();
        org.apache.commons.math.complex.Complex complex81 = complex78.sin();
        org.apache.commons.math.complex.Complex complex82 = complex78.log();
        org.apache.commons.math.complex.Complex complex83 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex84 = complex83.sqrt();
        org.apache.commons.math.complex.Complex complex85 = complex78.divide(complex84);
        org.apache.commons.math.complex.Complex complex86 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex87 = complex86.cosh();
        org.apache.commons.math.complex.Complex complex88 = complex87.acos();
        double double89 = complex87.getReal();
        org.apache.commons.math.complex.Complex complex90 = complex87.sqrt();
        org.apache.commons.math.complex.Complex complex91 = complex78.pow(complex87);
        org.apache.commons.math.complex.Complex complex92 = complex91.negate();
        org.apache.commons.math.complex.Complex complex93 = complex73.add(complex91);
        double double94 = complex91.abs();
        org.apache.commons.math.complex.Complex complex95 = complex63.multiply(complex91);
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + Double.POSITIVE_INFINITY + "'", double2 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + Double.POSITIVE_INFINITY + "'", double9 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + Double.POSITIVE_INFINITY + "'", double31 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + Double.POSITIVE_INFINITY + "'", double43 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + Double.POSITIVE_INFINITY + "'", double50 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + Double.POSITIVE_INFINITY + "'", double72 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertNotNull(complex75);
        org.junit.Assert.assertNotNull(complex76);
        org.junit.Assert.assertNotNull(complex77);
        org.junit.Assert.assertNotNull(complex78);
        org.junit.Assert.assertNotNull(complex79);
        org.junit.Assert.assertNotNull(complex80);
        org.junit.Assert.assertNotNull(complex81);
        org.junit.Assert.assertNotNull(complex82);
        org.junit.Assert.assertNotNull(complex83);
        org.junit.Assert.assertNotNull(complex84);
        org.junit.Assert.assertNotNull(complex85);
        org.junit.Assert.assertNotNull(complex86);
        org.junit.Assert.assertNotNull(complex87);
        org.junit.Assert.assertNotNull(complex88);
        org.junit.Assert.assertTrue(Double.isNaN(double89));
        org.junit.Assert.assertNotNull(complex90);
        org.junit.Assert.assertNotNull(complex91);
        org.junit.Assert.assertNotNull(complex92);
        org.junit.Assert.assertNotNull(complex93);
        org.junit.Assert.assertTrue(Double.isNaN(double94));
        org.junit.Assert.assertNotNull(complex95);
    }

    @Test
    public void test06343() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06343");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex1 = complex0.cosh();
        org.apache.commons.math.complex.Complex complex2 = complex0.log();
        org.apache.commons.math.complex.Complex complex3 = complex2.cos();
        org.apache.commons.math.complex.Complex complex4 = complex2.exp();
        boolean boolean5 = complex2.isNaN();
        org.apache.commons.math.complex.Complex complex6 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex7 = complex6.cosh();
        double double8 = complex6.abs();
        org.apache.commons.math.complex.Complex complex9 = complex6.conjugate();
        org.apache.commons.math.complex.Complex complex10 = complex9.conjugate();
        org.apache.commons.math.complex.Complex complex11 = complex9.tanh();
        org.apache.commons.math.complex.Complex complex12 = complex2.multiply(complex9);
        org.apache.commons.math.complex.Complex complex13 = complex9.acos();
        org.apache.commons.math.complex.Complex complex14 = complex13.cosh();
        org.apache.commons.math.complex.Complex complex15 = complex13.sqrt1z();
        org.apache.commons.math.complex.Complex complex16 = complex13.tan();
        org.apache.commons.math.complex.Complex complex17 = complex16.cosh();
        org.apache.commons.math.complex.Complex complex18 = complex16.tanh();
        org.apache.commons.math.complex.Complex complex19 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.complex.Complex complex20 = complex16.pow(complex19);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + Double.POSITIVE_INFINITY + "'", double8 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
    }

    @Test
    public void test06344() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06344");
        java.lang.Object[] objArray11 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException12 = new org.apache.commons.math.ConvergenceException("", objArray11);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException13 = new org.apache.commons.math.MaxIterationsExceededException(0, "hi!", objArray11);
        org.apache.commons.math.ConvergenceException convergenceException15 = new org.apache.commons.math.ConvergenceException("");
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException16 = new org.apache.commons.math.FunctionEvaluationException((double) (short) 0, "hi!", objArray11, (java.lang.Throwable) convergenceException15);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException18 = new org.apache.commons.math.MaxIterationsExceededException((int) (short) 100);
        org.apache.commons.math.ConvergenceException convergenceException19 = new org.apache.commons.math.ConvergenceException("Maximal number of iterations ({0}) exceeded", objArray11, (java.lang.Throwable) maxIterationsExceededException18);
        int int20 = maxIterationsExceededException18.getMaxIterations();
        int int21 = maxIterationsExceededException18.getMaxIterations();
        java.lang.Object[] objArray22 = maxIterationsExceededException18.getArguments();
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException23 = new org.apache.commons.math.FunctionEvaluationException((-1000.0d), "Maximal number of iterations ({0}) exceeded", objArray22);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException24 = new org.apache.commons.math.FunctionEvaluationException(0.7853981633974483d, "org.apache.commons.math.MaxIterationsExceededException: ", objArray22);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException25 = new org.apache.commons.math.FunctionEvaluationException((-9.820178719278598d), (java.lang.Throwable) functionEvaluationException24);
        double double26 = functionEvaluationException24.getArgument();
        java.lang.Throwable[] throwableArray27 = functionEvaluationException24.getSuppressed();
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 100 + "'", int20 == 100);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 100 + "'", int21 == 100);
        org.junit.Assert.assertNotNull(objArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray22), "[100]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray22), "[100]");
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 0.7853981633974483d + "'", double26 == 0.7853981633974483d);
        org.junit.Assert.assertNotNull(throwableArray27);
    }

    @Test
    public void test06345() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06345");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex1 = complex0.cosh();
        org.apache.commons.math.complex.Complex complex2 = complex0.log();
        org.apache.commons.math.complex.Complex complex3 = complex0.sin();
        org.apache.commons.math.complex.Complex complex4 = complex0.log();
        org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex6 = complex5.sqrt();
        org.apache.commons.math.complex.Complex complex7 = complex0.divide(complex6);
        org.apache.commons.math.complex.Complex complex8 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex9 = complex8.cosh();
        org.apache.commons.math.complex.Complex complex10 = complex9.acos();
        double double11 = complex9.getReal();
        org.apache.commons.math.complex.Complex complex12 = complex9.sqrt();
        org.apache.commons.math.complex.Complex complex13 = complex0.pow(complex9);
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex15 = complex14.cosh();
        org.apache.commons.math.complex.Complex complex16 = complex14.log();
        org.apache.commons.math.complex.Complex complex17 = complex16.cos();
        org.apache.commons.math.complex.Complex complex18 = complex9.multiply(complex16);
        org.apache.commons.math.complex.Complex complex19 = complex16.tanh();
        org.apache.commons.math.complex.Complex complex20 = complex19.asin();
        double[] doubleArray26 = new double[] { 0L, '#', 100.0f, 0L, (-1.0d) };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction27 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray26);
        int int28 = polynomialFunction27.degree();
        boolean boolean29 = complex19.equals((java.lang.Object) polynomialFunction27);
        double[] doubleArray30 = polynomialFunction27.getCoefficients();
        int int31 = polynomialFunction27.degree();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[0.0, 35.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 4 + "'", int28 == 4);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[0.0, 35.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 4 + "'", int31 == 4);
    }

    @Test
    public void test06346() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06346");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((-9.89965E7d), 1.0E-15d);
        org.apache.commons.math.complex.Complex complex3 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex4 = complex3.cosh();
        double double5 = complex3.abs();
        org.apache.commons.math.complex.Complex complex6 = complex3.conjugate();
        org.apache.commons.math.complex.Complex complex7 = complex6.conjugate();
        org.apache.commons.math.complex.Complex complex8 = complex6.tanh();
        org.apache.commons.math.complex.Complex complex9 = complex8.tan();
        org.apache.commons.math.complex.Complex complex10 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex11 = complex10.cosh();
        double double12 = complex10.abs();
        org.apache.commons.math.complex.Complex complex13 = complex10.conjugate();
        org.apache.commons.math.complex.Complex complex14 = complex13.conjugate();
        org.apache.commons.math.complex.Complex complex15 = complex9.subtract(complex13);
        org.apache.commons.math.complex.Complex complex16 = complex13.negate();
        org.apache.commons.math.complex.Complex complex17 = complex13.tanh();
        org.apache.commons.math.complex.Complex complex18 = complex2.multiply(complex17);
        org.apache.commons.math.complex.Complex complex19 = complex2.sinh();
        org.apache.commons.math.complex.Complex complex20 = complex2.conjugate();
        org.apache.commons.math.complex.Complex complex21 = complex2.acos();
        org.apache.commons.math.complex.Complex complex22 = complex2.asin();
        org.apache.commons.math.complex.Complex complex23 = complex2.asin();
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + Double.POSITIVE_INFINITY + "'", double5 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + Double.POSITIVE_INFINITY + "'", double12 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
    }

    @Test
    public void test06347() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06347");
        java.lang.Object[] objArray6 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException7 = new org.apache.commons.math.ConvergenceException("", objArray6);
        java.lang.Object[] objArray12 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException13 = new org.apache.commons.math.ConvergenceException("", objArray12);
        java.lang.Object[] objArray15 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException16 = new org.apache.commons.math.ConvergenceException("", objArray15);
        org.apache.commons.math.ConvergenceException convergenceException17 = new org.apache.commons.math.ConvergenceException("", objArray12, (java.lang.Throwable) convergenceException16);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException19 = new org.apache.commons.math.FunctionEvaluationException((double) 100);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException20 = new org.apache.commons.math.FunctionEvaluationException(100.0d, "org.apache.commons.math.ConvergenceException: hi!", objArray12, (java.lang.Throwable) functionEvaluationException19);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException21 = new org.apache.commons.math.FunctionEvaluationException((double) '#', "", objArray6, (java.lang.Throwable) functionEvaluationException20);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException22 = new org.apache.commons.math.FunctionEvaluationException((double) 10.0f, "org.apache.commons.math.ConvergenceException: org.apache.commons.math.FunctionEvaluationException: ", objArray6);
        java.lang.Object[] objArray27 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException28 = new org.apache.commons.math.ConvergenceException("", objArray27);
        java.lang.Object[] objArray30 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException31 = new org.apache.commons.math.ConvergenceException("", objArray30);
        org.apache.commons.math.ConvergenceException convergenceException32 = new org.apache.commons.math.ConvergenceException("", objArray27, (java.lang.Throwable) convergenceException31);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException33 = new org.apache.commons.math.FunctionEvaluationException(0.0d, "", (java.lang.Throwable) convergenceException32);
        org.apache.commons.math.ConvergenceException convergenceException34 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException32);
        org.apache.commons.math.ConvergenceException convergenceException35 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.FunctionEvaluationException: org.apache.commons.math.MaxIterationsExceededException: org.apache.commons.math.FunctionEvaluationException: ", objArray6, (java.lang.Throwable) convergenceException32);
        org.apache.commons.math.ConvergenceException convergenceException36 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException35);
        java.lang.Object[] objArray37 = convergenceException35.getArguments();
        java.lang.Object[] objArray38 = convergenceException35.getArguments();
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[]");
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12), "[]");
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[]");
        org.junit.Assert.assertNotNull(objArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray27), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray27), "[]");
        org.junit.Assert.assertNotNull(objArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray30), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray30), "[]");
        org.junit.Assert.assertNotNull(objArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray37), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray37), "[]");
        org.junit.Assert.assertNotNull(objArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray38), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray38), "[]");
    }

    @Test
    public void test06348() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06348");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex1 = complex0.cosh();
        double double2 = complex0.abs();
        org.apache.commons.math.complex.Complex complex3 = complex0.conjugate();
        org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex5 = complex4.sqrt();
        boolean boolean6 = complex4.isNaN();
        org.apache.commons.math.complex.Complex complex7 = complex4.sin();
        org.apache.commons.math.complex.Complex complex8 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex9 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex10 = complex9.sqrt();
        org.apache.commons.math.complex.Complex complex11 = complex10.sin();
        org.apache.commons.math.complex.Complex complex12 = complex8.pow(complex10);
        org.apache.commons.math.complex.Complex complex13 = complex12.asin();
        org.apache.commons.math.complex.Complex complex14 = complex13.atan();
        boolean boolean15 = complex14.isInfinite();
        org.apache.commons.math.complex.Complex complex16 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex17 = complex14.subtract(complex16);
        org.apache.commons.math.complex.Complex complex18 = complex17.sin();
        org.apache.commons.math.complex.Complex complex19 = complex4.divide(complex18);
        org.apache.commons.math.complex.Complex complex20 = complex0.subtract(complex18);
        double double21 = complex20.abs();
        org.apache.commons.math.complex.Complex complex22 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex23 = complex22.cosh();
        double double24 = complex22.abs();
        org.apache.commons.math.complex.Complex complex25 = complex22.conjugate();
        org.apache.commons.math.complex.Complex complex26 = complex25.conjugate();
        boolean boolean27 = complex25.isInfinite();
        org.apache.commons.math.complex.Complex complex28 = complex25.cos();
        org.apache.commons.math.complex.Complex complex29 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex30 = complex29.cosh();
        double double31 = complex29.abs();
        org.apache.commons.math.complex.Complex complex32 = complex29.conjugate();
        org.apache.commons.math.complex.Complex complex33 = complex32.conjugate();
        boolean boolean34 = complex32.isInfinite();
        org.apache.commons.math.complex.Complex complex35 = complex32.asin();
        boolean boolean36 = complex32.isNaN();
        org.apache.commons.math.complex.Complex complex37 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex38 = complex37.cosh();
        org.apache.commons.math.complex.Complex complex39 = complex32.divide(complex37);
        org.apache.commons.math.complex.Complex complex40 = complex28.divide(complex37);
        org.apache.commons.math.complex.Complex complex41 = complex37.sinh();
        org.apache.commons.math.complex.Complex complex42 = complex41.conjugate();
        org.apache.commons.math.complex.Complex complex43 = complex41.acos();
        org.apache.commons.math.complex.Complex complex44 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex45 = complex44.cosh();
        org.apache.commons.math.complex.Complex complex46 = complex45.acos();
        org.apache.commons.math.complex.Complex complex47 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex48 = complex47.cosh();
        org.apache.commons.math.complex.Complex complex49 = complex47.log();
        org.apache.commons.math.complex.Complex complex50 = complex47.sin();
        org.apache.commons.math.complex.Complex complex51 = complex50.tanh();
        org.apache.commons.math.complex.Complex complex52 = complex45.add(complex51);
        org.apache.commons.math.complex.Complex complex53 = complex43.pow(complex51);
        org.apache.commons.math.complex.Complex complex54 = complex20.multiply(complex51);
        org.apache.commons.math.complex.Complex complex55 = complex54.acos();
        double double56 = complex55.getImaginary();
        org.apache.commons.math.complex.Complex complex57 = complex55.sqrt1z();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + Double.POSITIVE_INFINITY + "'", double2 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + Double.POSITIVE_INFINITY + "'", double24 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + Double.POSITIVE_INFINITY + "'", double31 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertTrue(Double.isNaN(double56));
        org.junit.Assert.assertNotNull(complex57);
    }

    @Test
    public void test06349() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06349");
        java.lang.Object[] objArray5 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException6 = new org.apache.commons.math.ConvergenceException("", objArray5);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException7 = new org.apache.commons.math.MaxIterationsExceededException(0, "hi!", objArray5);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException8 = new org.apache.commons.math.MaxIterationsExceededException((int) 'a', "org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: ", objArray5);
        int int9 = maxIterationsExceededException8.getMaxIterations();
        int int10 = maxIterationsExceededException8.getMaxIterations();
        org.apache.commons.math.ConvergenceException convergenceException11 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) maxIterationsExceededException8);
        java.lang.Object[] objArray19 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException20 = new org.apache.commons.math.ConvergenceException("", objArray19);
        java.lang.Object[] objArray25 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException26 = new org.apache.commons.math.ConvergenceException("", objArray25);
        java.lang.Object[] objArray28 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException29 = new org.apache.commons.math.ConvergenceException("", objArray28);
        org.apache.commons.math.ConvergenceException convergenceException30 = new org.apache.commons.math.ConvergenceException("", objArray25, (java.lang.Throwable) convergenceException29);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException32 = new org.apache.commons.math.FunctionEvaluationException((double) 100);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException33 = new org.apache.commons.math.FunctionEvaluationException(100.0d, "org.apache.commons.math.ConvergenceException: hi!", objArray25, (java.lang.Throwable) functionEvaluationException32);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException34 = new org.apache.commons.math.FunctionEvaluationException((double) '#', "", objArray19, (java.lang.Throwable) functionEvaluationException33);
        java.lang.String str35 = functionEvaluationException34.getPattern();
        double double36 = functionEvaluationException34.getArgument();
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException37 = new org.apache.commons.math.FunctionEvaluationException((double) (byte) 0, (java.lang.Throwable) functionEvaluationException34);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException38 = new org.apache.commons.math.FunctionEvaluationException(1.0E-6d, "org.apache.commons.math.ConvergenceException: hi!", (java.lang.Throwable) functionEvaluationException34);
        java.lang.Throwable[] throwableArray39 = functionEvaluationException34.getSuppressed();
        double double40 = functionEvaluationException34.getArgument();
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException41 = new org.apache.commons.math.FunctionEvaluationException(64.0d, (java.lang.Throwable) functionEvaluationException34);
        double double42 = functionEvaluationException34.getArgument();
        java.lang.Object[] objArray43 = functionEvaluationException34.getArguments();
        convergenceException11.addSuppressed((java.lang.Throwable) functionEvaluationException34);
        java.lang.Throwable[] throwableArray45 = functionEvaluationException34.getSuppressed();
        org.junit.Assert.assertNotNull(objArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray5), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray5), "[]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 97 + "'", int9 == 97);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 97 + "'", int10 == 97);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[]");
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[]");
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 35.0d + "'", double36 == 35.0d);
        org.junit.Assert.assertNotNull(throwableArray39);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 35.0d + "'", double40 == 35.0d);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 35.0d + "'", double42 == 35.0d);
        org.junit.Assert.assertNotNull(objArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray43), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray43), "[]");
        org.junit.Assert.assertNotNull(throwableArray45);
    }

    @Test
    public void test06350() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06350");
        double[] doubleArray5 = new double[] { 0L, '#', 100.0f, 0L, (-1.0d) };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray5);
        double double8 = polynomialFunction6.value((double) 0);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver9 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver9.setMaximalIterationCount((int) (short) -1);
        laguerreSolver9.resetRelativeAccuracy();
        laguerreSolver9.setFunctionValueAccuracy((double) (byte) 1);
        laguerreSolver9.setAbsoluteAccuracy((-0.999999999999965d));
        double double17 = laguerreSolver9.getAbsoluteAccuracy();
        int int18 = laguerreSolver9.getMaximalIterationCount();
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[0.0, 35.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + (-0.999999999999965d) + "'", double17 == (-0.999999999999965d));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
    }

    @Test
    public void test06351() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06351");
        java.lang.Object[] objArray8 = new java.lang.Object[] { 0.0f, (short) 1 };
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException9 = new org.apache.commons.math.MaxIterationsExceededException(100, "", objArray8);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException10 = new org.apache.commons.math.FunctionEvaluationException(35.0d, "hi!", objArray8);
        java.lang.Throwable throwable11 = null;
        org.apache.commons.math.ConvergenceException convergenceException12 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.MaxIterationsExceededException: org.apache.commons.math.FunctionEvaluationException: ", objArray8, throwable11);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException13 = new org.apache.commons.math.FunctionEvaluationException((-1.27398901900236288E17d), (java.lang.Throwable) convergenceException12);
        java.lang.Object[] objArray18 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException19 = new org.apache.commons.math.ConvergenceException("", objArray18);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException20 = new org.apache.commons.math.FunctionEvaluationException(10.0d, (java.lang.Throwable) convergenceException19);
        java.lang.Object[] objArray21 = functionEvaluationException20.getArguments();
        org.apache.commons.math.ConvergenceException convergenceException22 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: Convergence failed", objArray21);
        org.apache.commons.math.ConvergenceException convergenceException23 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException22);
        java.lang.Throwable[] throwableArray24 = convergenceException22.getSuppressed();
        org.apache.commons.math.ConvergenceException convergenceException25 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.FunctionEvaluationException: Evaluation failed for argument = 52", (java.lang.Object[]) throwableArray24);
        functionEvaluationException13.addSuppressed((java.lang.Throwable) convergenceException25);
        java.lang.Throwable[] throwableArray27 = convergenceException25.getSuppressed();
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[0.0, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[0.0, 1]");
        org.junit.Assert.assertNotNull(objArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray18), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray18), "[]");
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray21), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray21), "[]");
        org.junit.Assert.assertNotNull(throwableArray24);
        org.junit.Assert.assertNotNull(throwableArray27);
    }

    @Test
    public void test06352() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06352");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex1 = complex0.cosh();
        org.apache.commons.math.complex.Complex complex2 = complex0.log();
        org.apache.commons.math.complex.Complex complex3 = complex2.cos();
        double double4 = complex3.abs();
        org.apache.commons.math.complex.Complex complex5 = complex3.sqrt();
        org.apache.commons.math.complex.Complex complex6 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex7 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex8 = complex7.sqrt();
        org.apache.commons.math.complex.Complex complex9 = complex8.sin();
        org.apache.commons.math.complex.Complex complex10 = complex6.pow(complex8);
        org.apache.commons.math.complex.Complex complex11 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex12 = complex11.cosh();
        org.apache.commons.math.complex.Complex complex13 = complex11.log();
        org.apache.commons.math.complex.Complex complex14 = complex6.divide(complex13);
        org.apache.commons.math.complex.Complex complex15 = complex5.subtract(complex14);
        org.apache.commons.math.complex.Complex complex16 = complex5.conjugate();
        org.apache.commons.math.complex.Complex complex17 = complex5.cos();
        org.apache.commons.math.complex.Complex complex18 = complex17.negate();
        org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex20 = complex19.cosh();
        double double21 = complex19.abs();
        org.apache.commons.math.complex.Complex complex22 = complex19.conjugate();
        org.apache.commons.math.complex.Complex complex23 = complex22.conjugate();
        boolean boolean24 = complex22.isInfinite();
        org.apache.commons.math.complex.Complex complex25 = complex22.cos();
        org.apache.commons.math.complex.Complex complex26 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex27 = complex26.cosh();
        double double28 = complex26.abs();
        org.apache.commons.math.complex.Complex complex29 = complex26.conjugate();
        org.apache.commons.math.complex.Complex complex30 = complex29.conjugate();
        boolean boolean31 = complex29.isInfinite();
        org.apache.commons.math.complex.Complex complex32 = complex29.asin();
        boolean boolean33 = complex29.isNaN();
        org.apache.commons.math.complex.Complex complex34 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex35 = complex34.cosh();
        org.apache.commons.math.complex.Complex complex36 = complex29.divide(complex34);
        org.apache.commons.math.complex.Complex complex37 = complex25.divide(complex34);
        org.apache.commons.math.complex.Complex complex38 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex39 = complex38.tan();
        org.apache.commons.math.complex.Complex complex40 = complex38.cos();
        boolean boolean41 = complex38.isInfinite();
        org.apache.commons.math.complex.Complex complex42 = complex37.multiply(complex38);
        double[] doubleArray45 = new double[] { (byte) 1, 100 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction46 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray45);
        double double48 = polynomialFunction46.value((double) (short) 100);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver49 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction46);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction50 = laguerreSolver49.getPolynomialFunction();
        laguerreSolver49.setRelativeAccuracy((double) 0);
        double[] doubleArray55 = new double[] { (byte) -1, '#' };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction56 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray55);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction57 = polynomialFunction56.polynomialDerivative();
        double[] doubleArray58 = polynomialFunction56.getCoefficients();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction59 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray58);
        org.apache.commons.math.complex.Complex[] complexArray61 = laguerreSolver49.solveAll(doubleArray58, (double) 4);
        laguerreSolver49.setAbsoluteAccuracy((double) 1);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction64 = laguerreSolver49.getPolynomialFunction();
        laguerreSolver49.setRelativeAccuracy((-1000.0d));
        double double67 = laguerreSolver49.getRelativeAccuracy();
        boolean boolean68 = complex38.equals((java.lang.Object) double67);
        org.apache.commons.math.complex.Complex complex69 = complex18.subtract(complex38);
        org.apache.commons.math.complex.Complex complex70 = complex69.conjugate();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + Double.POSITIVE_INFINITY + "'", double21 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + Double.POSITIVE_INFINITY + "'", double28 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 10001.0d + "'", double48 == 10001.0d);
        org.junit.Assert.assertNotNull(polynomialFunction50);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[-1.0, 35.0]");
        org.junit.Assert.assertNotNull(polynomialFunction57);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[-1.0, 35.0]");
        org.junit.Assert.assertNotNull(complexArray61);
        org.junit.Assert.assertNotNull(polynomialFunction64);
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + (-1000.0d) + "'", double67 == (-1000.0d));
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertNotNull(complex70);
    }

    @Test
    public void test06353() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06353");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex1 = complex0.cosh();
        double double2 = complex0.abs();
        org.apache.commons.math.complex.Complex complex3 = complex0.conjugate();
        org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex5 = complex4.sqrt();
        boolean boolean6 = complex4.isNaN();
        org.apache.commons.math.complex.Complex complex7 = complex4.sin();
        org.apache.commons.math.complex.Complex complex8 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex9 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex10 = complex9.sqrt();
        org.apache.commons.math.complex.Complex complex11 = complex10.sin();
        org.apache.commons.math.complex.Complex complex12 = complex8.pow(complex10);
        org.apache.commons.math.complex.Complex complex13 = complex12.asin();
        org.apache.commons.math.complex.Complex complex14 = complex13.atan();
        boolean boolean15 = complex14.isInfinite();
        org.apache.commons.math.complex.Complex complex16 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex17 = complex14.subtract(complex16);
        org.apache.commons.math.complex.Complex complex18 = complex17.sin();
        org.apache.commons.math.complex.Complex complex19 = complex4.divide(complex18);
        org.apache.commons.math.complex.Complex complex20 = complex0.subtract(complex18);
        org.apache.commons.math.complex.Complex complex21 = complex0.tanh();
        double double22 = complex21.getImaginary();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + Double.POSITIVE_INFINITY + "'", double2 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertTrue(Double.isNaN(double22));
    }

    @Test
    public void test06354() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06354");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex1 = complex0.cosh();
        double double2 = complex0.abs();
        org.apache.commons.math.complex.Complex complex3 = complex0.conjugate();
        org.apache.commons.math.complex.Complex complex4 = complex3.conjugate();
        org.apache.commons.math.complex.Complex complex5 = complex3.log();
        org.apache.commons.math.complex.Complex complex6 = complex3.sinh();
        org.apache.commons.math.complex.Complex complex7 = complex3.exp();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + Double.POSITIVE_INFINITY + "'", double2 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
    }

    @Test
    public void test06355() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06355");
        double[] doubleArray5 = new double[] { 0L, '#', 100.0f, 0L, (-1.0d) };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray5);
        double double8 = polynomialFunction6.value((double) 0);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver9 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        double[] doubleArray12 = new double[] { (byte) 1, 100 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction13 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray12);
        double double15 = polynomialFunction13.value((double) (short) 100);
        double[] doubleArray16 = polynomialFunction13.getCoefficients();
        org.apache.commons.math.complex.Complex[] complexArray18 = laguerreSolver9.solveAll(doubleArray16, (double) (short) 10);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction19 = laguerreSolver9.getPolynomialFunction();
        laguerreSolver9.setMaximalIterationCount(0);
        double double22 = laguerreSolver9.getFunctionValueAccuracy();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction23 = laguerreSolver9.getPolynomialFunction();
        double double24 = laguerreSolver9.getFunctionValueAccuracy();
        laguerreSolver9.setMaximalIterationCount((int) (short) 1);
        double double30 = laguerreSolver9.solve(1.030000009901E12d, (double) (short) 0, 5201.0d);
        laguerreSolver9.setMaximalIterationCount(100);
        double[] doubleArray35 = new double[] { (byte) 1, 100 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction36 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray35);
        double double38 = polynomialFunction36.value((double) (short) 100);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver39 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction36);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction40 = laguerreSolver39.getPolynomialFunction();
        laguerreSolver39.setRelativeAccuracy((double) 0);
        double[] doubleArray45 = new double[] { (byte) -1, '#' };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction46 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray45);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction47 = polynomialFunction46.polynomialDerivative();
        double[] doubleArray48 = polynomialFunction46.getCoefficients();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction49 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray48);
        org.apache.commons.math.complex.Complex[] complexArray51 = laguerreSolver39.solveAll(doubleArray48, (double) 4);
        laguerreSolver39.resetFunctionValueAccuracy();
        laguerreSolver39.resetAbsoluteAccuracy();
        double[] doubleArray56 = new double[] { (byte) 1, 100 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction57 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray56);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver58 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction57);
        double[] doubleArray64 = new double[] { 0L, '#', 100.0f, 0L, (-1.0d) };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction65 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray64);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction66 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray64);
        org.apache.commons.math.complex.Complex[] complexArray68 = laguerreSolver58.solveAll(doubleArray64, 1.0E-6d);
        org.apache.commons.math.complex.Complex[] complexArray70 = laguerreSolver39.solveAll(doubleArray64, (double) (-1L));
        org.apache.commons.math.complex.Complex complex71 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.complex.Complex complex72 = laguerreSolver9.solve(complexArray70, complex71);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[0.0, 35.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 10001.0d + "'", double15 == 10001.0d);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(complexArray18);
        org.junit.Assert.assertNotNull(polynomialFunction19);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 1.0E-15d + "'", double22 == 1.0E-15d);
        org.junit.Assert.assertNotNull(polynomialFunction23);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 1.0E-15d + "'", double24 == 1.0E-15d);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.0d + "'", double30 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 10001.0d + "'", double38 == 10001.0d);
        org.junit.Assert.assertNotNull(polynomialFunction40);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[-1.0, 35.0]");
        org.junit.Assert.assertNotNull(polynomialFunction47);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[-1.0, 35.0]");
        org.junit.Assert.assertNotNull(complexArray51);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[0.0, 35.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(complexArray68);
        org.junit.Assert.assertNotNull(complexArray70);
    }

    @Test
    public void test06356() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06356");
        java.lang.Object[] objArray11 = new java.lang.Object[] { 0.0f, (short) 1 };
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException12 = new org.apache.commons.math.MaxIterationsExceededException(100, "", objArray11);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException13 = new org.apache.commons.math.MaxIterationsExceededException((int) ' ', "hi!", objArray11);
        java.lang.Object[] objArray18 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException19 = new org.apache.commons.math.ConvergenceException("", objArray18);
        java.lang.Object[] objArray21 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException22 = new org.apache.commons.math.ConvergenceException("", objArray21);
        org.apache.commons.math.ConvergenceException convergenceException23 = new org.apache.commons.math.ConvergenceException("", objArray18, (java.lang.Throwable) convergenceException22);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException25 = new org.apache.commons.math.FunctionEvaluationException((double) 100);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException26 = new org.apache.commons.math.FunctionEvaluationException(100.0d, "org.apache.commons.math.ConvergenceException: hi!", objArray18, (java.lang.Throwable) functionEvaluationException25);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException27 = new org.apache.commons.math.FunctionEvaluationException((double) 100L, "org.apache.commons.math.ConvergenceException: hi!", objArray11, (java.lang.Throwable) functionEvaluationException26);
        double double28 = functionEvaluationException26.getArgument();
        org.apache.commons.math.ConvergenceException convergenceException29 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.MaxIterationsExceededException: ", (java.lang.Throwable) functionEvaluationException26);
        java.lang.Object[] objArray30 = convergenceException29.getArguments();
        java.lang.Object[] objArray31 = convergenceException29.getArguments();
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException32 = new org.apache.commons.math.MaxIterationsExceededException((int) '4', "org.apache.commons.math.FunctionEvaluationException: org.apache.commons.math.ConvergenceException: hi!", objArray31);
        java.lang.Object[] objArray33 = maxIterationsExceededException32.getArguments();
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[0.0, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[0.0, 1]");
        org.junit.Assert.assertNotNull(objArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray18), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray18), "[]");
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray21), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray21), "[]");
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 100.0d + "'", double28 == 100.0d);
        org.junit.Assert.assertNotNull(objArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray30), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray30), "[]");
        org.junit.Assert.assertNotNull(objArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray31), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray31), "[]");
        org.junit.Assert.assertNotNull(objArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray33), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray33), "[]");
    }

    @Test
    public void test06357() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06357");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex1 = complex0.cosh();
        org.apache.commons.math.complex.Complex complex2 = complex0.log();
        org.apache.commons.math.complex.Complex complex3 = complex0.sin();
        org.apache.commons.math.complex.Complex complex4 = complex0.log();
        org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex6 = complex5.sqrt();
        org.apache.commons.math.complex.Complex complex7 = complex0.divide(complex6);
        org.apache.commons.math.complex.Complex complex8 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex9 = complex8.cosh();
        double double10 = complex8.abs();
        org.apache.commons.math.complex.Complex complex11 = complex8.conjugate();
        org.apache.commons.math.complex.Complex complex12 = complex11.conjugate();
        org.apache.commons.math.complex.Complex complex13 = complex7.subtract(complex12);
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex15 = complex14.cosh();
        org.apache.commons.math.complex.Complex complex16 = complex14.log();
        org.apache.commons.math.complex.Complex complex17 = complex14.sin();
        org.apache.commons.math.complex.Complex complex18 = complex14.log();
        org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex20 = complex19.sqrt();
        org.apache.commons.math.complex.Complex complex21 = complex14.divide(complex20);
        org.apache.commons.math.complex.Complex complex22 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex23 = complex22.cosh();
        double double24 = complex22.abs();
        org.apache.commons.math.complex.Complex complex25 = complex22.conjugate();
        org.apache.commons.math.complex.Complex complex26 = complex25.conjugate();
        org.apache.commons.math.complex.Complex complex27 = complex21.subtract(complex26);
        org.apache.commons.math.complex.Complex complex28 = complex21.exp();
        org.apache.commons.math.complex.Complex complex29 = complex13.multiply(complex28);
        org.apache.commons.math.complex.Complex complex30 = complex28.cosh();
        boolean boolean31 = complex30.isNaN();
        org.apache.commons.math.complex.Complex complex32 = complex30.sqrt1z();
        org.apache.commons.math.complex.Complex complex33 = complex32.tanh();
        org.apache.commons.math.complex.Complex complex34 = complex33.asin();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + Double.POSITIVE_INFINITY + "'", double10 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + Double.POSITIVE_INFINITY + "'", double24 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
    }

    @Test
    public void test06358() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06358");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex1 = complex0.cosh();
        org.apache.commons.math.complex.Complex complex2 = complex0.log();
        org.apache.commons.math.complex.Complex complex3 = complex0.sin();
        org.apache.commons.math.complex.Complex complex4 = complex0.log();
        org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex6 = complex5.sqrt();
        org.apache.commons.math.complex.Complex complex7 = complex0.divide(complex6);
        org.apache.commons.math.complex.Complex complex8 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex9 = complex8.cosh();
        org.apache.commons.math.complex.Complex complex10 = complex9.acos();
        double double11 = complex9.getReal();
        org.apache.commons.math.complex.Complex complex12 = complex9.sqrt();
        org.apache.commons.math.complex.Complex complex13 = complex0.pow(complex9);
        org.apache.commons.math.complex.Complex complex14 = complex9.sin();
        org.apache.commons.math.complex.Complex complex15 = complex14.tanh();
        org.apache.commons.math.complex.Complex complex16 = complex14.conjugate();
        org.apache.commons.math.complex.Complex complex17 = complex14.tan();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
    }

    @Test
    public void test06359() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06359");
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException5 = new org.apache.commons.math.FunctionEvaluationException(10101.0d, "org.apache.commons.math.MaxIterationsExceededException: org.apache.commons.math.ConvergenceException: Evaluation failed for argument = {0}");
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException6 = new org.apache.commons.math.FunctionEvaluationException((-8.758498599E9d), (java.lang.Throwable) functionEvaluationException5);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException7 = new org.apache.commons.math.FunctionEvaluationException((double) 100.0f, "org.apache.commons.math.ConvergenceException: ", (java.lang.Throwable) functionEvaluationException6);
    }

    @Test
    public void test06360() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06360");
        java.lang.Object[] objArray14 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException15 = new org.apache.commons.math.ConvergenceException("", objArray14);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException16 = new org.apache.commons.math.MaxIterationsExceededException(0, "hi!", objArray14);
        org.apache.commons.math.ConvergenceException convergenceException18 = new org.apache.commons.math.ConvergenceException("");
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException19 = new org.apache.commons.math.FunctionEvaluationException((double) (short) 0, "hi!", objArray14, (java.lang.Throwable) convergenceException18);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException20 = new org.apache.commons.math.MaxIterationsExceededException((int) (byte) 100, "", objArray14);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException21 = new org.apache.commons.math.FunctionEvaluationException(1.0d, "", objArray14);
        org.apache.commons.math.ConvergenceException convergenceException22 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: hi!", objArray14);
        java.lang.Object[] objArray28 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException29 = new org.apache.commons.math.ConvergenceException("", objArray28);
        java.lang.Object[] objArray34 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException35 = new org.apache.commons.math.ConvergenceException("", objArray34);
        java.lang.Object[] objArray37 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException38 = new org.apache.commons.math.ConvergenceException("", objArray37);
        org.apache.commons.math.ConvergenceException convergenceException39 = new org.apache.commons.math.ConvergenceException("", objArray34, (java.lang.Throwable) convergenceException38);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException41 = new org.apache.commons.math.FunctionEvaluationException((double) 100);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException42 = new org.apache.commons.math.FunctionEvaluationException(100.0d, "org.apache.commons.math.ConvergenceException: hi!", objArray34, (java.lang.Throwable) functionEvaluationException41);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException43 = new org.apache.commons.math.FunctionEvaluationException((double) '#', "", objArray28, (java.lang.Throwable) functionEvaluationException42);
        java.lang.Object[] objArray51 = new java.lang.Object[] { 0.0f, (short) 1 };
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException52 = new org.apache.commons.math.MaxIterationsExceededException(100, "", objArray51);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException53 = new org.apache.commons.math.MaxIterationsExceededException((int) ' ', "hi!", objArray51);
        org.apache.commons.math.ConvergenceException convergenceException54 = new org.apache.commons.math.ConvergenceException("", (java.lang.Throwable) maxIterationsExceededException53);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException55 = new org.apache.commons.math.FunctionEvaluationException(10.0d, "", objArray28, (java.lang.Throwable) maxIterationsExceededException53);
        java.lang.Object[] objArray56 = functionEvaluationException55.getArguments();
        org.apache.commons.math.ConvergenceException convergenceException57 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) functionEvaluationException55);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException58 = new org.apache.commons.math.FunctionEvaluationException((double) (byte) 10, "hi!", objArray14, (java.lang.Throwable) functionEvaluationException55);
        org.apache.commons.math.ConvergenceException convergenceException59 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) functionEvaluationException58);
        java.lang.Throwable[] throwableArray60 = functionEvaluationException58.getSuppressed();
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException61 = new org.apache.commons.math.MaxIterationsExceededException(52, "org.apache.commons.math.MaxIterationsExceededException: org.apache.commons.math.ConvergenceException: hi!", (java.lang.Object[]) throwableArray60);
        int int62 = maxIterationsExceededException61.getMaxIterations();
        org.junit.Assert.assertNotNull(objArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray14), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray14), "[]");
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[]");
        org.junit.Assert.assertNotNull(objArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray34), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray34), "[]");
        org.junit.Assert.assertNotNull(objArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray37), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray37), "[]");
        org.junit.Assert.assertNotNull(objArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray51), "[0.0, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray51), "[0.0, 1]");
        org.junit.Assert.assertNotNull(objArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray56), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray56), "[]");
        org.junit.Assert.assertNotNull(throwableArray60);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 52 + "'", int62 == 52);
    }

    @Test
    public void test06361() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06361");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex1 = complex0.sqrt();
        org.apache.commons.math.complex.Complex complex2 = complex1.sin();
        org.apache.commons.math.complex.Complex complex3 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex4 = complex3.sqrt();
        org.apache.commons.math.complex.Complex complex5 = complex4.sin();
        org.apache.commons.math.complex.Complex complex6 = complex1.multiply(complex4);
        org.apache.commons.math.complex.Complex complex7 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex8 = complex7.exp();
        org.apache.commons.math.complex.Complex complex9 = complex1.subtract(complex7);
        org.apache.commons.math.complex.Complex complex10 = complex9.sqrt1z();
        org.apache.commons.math.complex.Complex complex11 = null;
        org.apache.commons.math.complex.Complex complex12 = complex10.divide(complex11);
        org.apache.commons.math.complex.Complex complex13 = complex10.acos();
        org.apache.commons.math.complex.Complex complex14 = complex10.log();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
    }

    @Test
    public void test06362() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06362");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex1 = complex0.cosh();
        double double2 = complex0.abs();
        org.apache.commons.math.complex.Complex complex3 = complex0.conjugate();
        org.apache.commons.math.complex.Complex complex4 = complex3.conjugate();
        boolean boolean5 = complex3.isInfinite();
        org.apache.commons.math.complex.Complex complex6 = complex3.cos();
        org.apache.commons.math.complex.Complex complex7 = complex3.conjugate();
        org.apache.commons.math.complex.Complex complex8 = complex3.log();
        org.apache.commons.math.complex.Complex complex9 = complex3.exp();
        org.apache.commons.math.complex.Complex complex10 = complex9.cos();
        org.apache.commons.math.complex.Complex complex11 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex12 = complex11.cosh();
        double double13 = complex11.abs();
        org.apache.commons.math.complex.Complex complex14 = complex11.conjugate();
        org.apache.commons.math.complex.Complex complex15 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex16 = complex15.cosh();
        double double17 = complex15.abs();
        org.apache.commons.math.complex.Complex complex18 = complex15.conjugate();
        org.apache.commons.math.complex.Complex complex19 = complex18.conjugate();
        org.apache.commons.math.complex.Complex complex20 = complex18.tanh();
        org.apache.commons.math.complex.Complex complex21 = complex18.atan();
        org.apache.commons.math.complex.Complex complex22 = complex11.subtract(complex18);
        org.apache.commons.math.complex.Complex complex23 = complex22.log();
        org.apache.commons.math.complex.Complex complex24 = complex23.negate();
        org.apache.commons.math.complex.Complex complex25 = complex23.sqrt1z();
        org.apache.commons.math.complex.Complex complex26 = complex23.tanh();
        org.apache.commons.math.complex.Complex complex27 = complex9.divide(complex26);
        org.apache.commons.math.complex.Complex complex28 = complex9.atan();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + Double.POSITIVE_INFINITY + "'", double2 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + Double.POSITIVE_INFINITY + "'", double13 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + Double.POSITIVE_INFINITY + "'", double17 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
    }

    @Test
    public void test06363() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06363");
        double[] doubleArray5 = new double[] { 0L, '#', 100.0f, 0L, (-1.0d) };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray5);
        double double8 = polynomialFunction6.value((double) 0);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver9 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        double[] doubleArray12 = new double[] { (byte) 1, 100 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction13 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray12);
        double double15 = polynomialFunction13.value((double) (short) 100);
        double[] doubleArray16 = polynomialFunction13.getCoefficients();
        org.apache.commons.math.complex.Complex[] complexArray18 = laguerreSolver9.solveAll(doubleArray16, (double) (short) 10);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction19 = laguerreSolver9.getPolynomialFunction();
        laguerreSolver9.setMaximalIterationCount(0);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction22 = laguerreSolver9.getPolynomialFunction();
        int int23 = laguerreSolver9.getIterationCount();
        laguerreSolver9.setRelativeAccuracy((-6.7173106613978968E16d));
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[0.0, 35.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 10001.0d + "'", double15 == 10001.0d);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(complexArray18);
        org.junit.Assert.assertNotNull(polynomialFunction19);
        org.junit.Assert.assertNotNull(polynomialFunction22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 3 + "'", int23 == 3);
    }

    @Test
    public void test06364() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06364");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex1 = complex0.sqrt();
        boolean boolean2 = complex0.isNaN();
        org.apache.commons.math.complex.Complex complex3 = complex0.sin();
        org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex6 = complex5.sqrt();
        org.apache.commons.math.complex.Complex complex7 = complex6.sin();
        org.apache.commons.math.complex.Complex complex8 = complex4.pow(complex6);
        org.apache.commons.math.complex.Complex complex9 = complex8.asin();
        org.apache.commons.math.complex.Complex complex10 = complex9.atan();
        boolean boolean11 = complex10.isInfinite();
        org.apache.commons.math.complex.Complex complex12 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex13 = complex10.subtract(complex12);
        org.apache.commons.math.complex.Complex complex14 = complex13.sin();
        org.apache.commons.math.complex.Complex complex15 = complex0.divide(complex14);
        org.apache.commons.math.complex.Complex complex16 = complex0.tan();
        double double17 = complex16.getReal();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertTrue(Double.isNaN(double17));
    }

    @Test
    public void test06365() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06365");
        org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex2 = complex1.cosh();
        org.apache.commons.math.complex.Complex complex3 = complex1.log();
        org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex5 = complex4.tan();
        org.apache.commons.math.complex.Complex complex6 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex7 = complex6.cosh();
        org.apache.commons.math.complex.Complex complex8 = complex7.acos();
        double double9 = complex7.getReal();
        boolean boolean10 = complex5.equals((java.lang.Object) complex7);
        org.apache.commons.math.complex.Complex complex11 = complex1.add(complex7);
        org.apache.commons.math.complex.Complex complex12 = complex7.tanh();
        org.apache.commons.math.complex.Complex complex13 = complex7.conjugate();
        java.lang.Object[] objArray19 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException20 = new org.apache.commons.math.ConvergenceException("", objArray19);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException21 = new org.apache.commons.math.FunctionEvaluationException((double) (short) 10, "hi!", objArray19);
        java.lang.Object[] objArray28 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException29 = new org.apache.commons.math.ConvergenceException("", objArray28);
        java.lang.Object[] objArray31 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException32 = new org.apache.commons.math.ConvergenceException("", objArray31);
        org.apache.commons.math.ConvergenceException convergenceException33 = new org.apache.commons.math.ConvergenceException("", objArray28, (java.lang.Throwable) convergenceException32);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException34 = new org.apache.commons.math.MaxIterationsExceededException((int) (short) 0, "org.apache.commons.math.FunctionEvaluationException: ", objArray28);
        java.lang.Object[] objArray41 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException42 = new org.apache.commons.math.ConvergenceException("", objArray41);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException43 = new org.apache.commons.math.FunctionEvaluationException((double) (short) 10, "hi!", objArray41);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException44 = new org.apache.commons.math.MaxIterationsExceededException((int) (byte) 0, "org.apache.commons.math.ConvergenceException: hi!", objArray41);
        java.lang.Object[] objArray51 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException52 = new org.apache.commons.math.ConvergenceException("", objArray51);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException53 = new org.apache.commons.math.FunctionEvaluationException((double) (short) 10, "hi!", objArray51);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException54 = new org.apache.commons.math.MaxIterationsExceededException((int) (byte) 0, "org.apache.commons.math.ConvergenceException: hi!", objArray51);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException55 = new org.apache.commons.math.FunctionEvaluationException(0.0d, (java.lang.Throwable) maxIterationsExceededException54);
        org.apache.commons.math.ConvergenceException convergenceException56 = new org.apache.commons.math.ConvergenceException("", objArray41, (java.lang.Throwable) functionEvaluationException55);
        org.apache.commons.math.ConvergenceException convergenceException57 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: Convergence failed", objArray28, (java.lang.Throwable) convergenceException56);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException58 = new org.apache.commons.math.FunctionEvaluationException(13403.310093999602d, (java.lang.Throwable) convergenceException57);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException59 = new org.apache.commons.math.FunctionEvaluationException((-2.5903723296785737E38d), "org.apache.commons.math.ConvergenceException: org.apache.commons.math.FunctionEvaluationException: org.apache.commons.math.ConvergenceException: Convergence failed", objArray19, (java.lang.Throwable) functionEvaluationException58);
        boolean boolean60 = complex13.equals((java.lang.Object) objArray19);
        java.lang.Throwable throwable61 = null;
        org.apache.commons.math.ConvergenceException convergenceException62 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.MaxIterationsExceededException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.FunctionEvaluationException: ", objArray19, throwable61);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[]");
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[]");
        org.junit.Assert.assertNotNull(objArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray31), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray31), "[]");
        org.junit.Assert.assertNotNull(objArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray41), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray41), "[]");
        org.junit.Assert.assertNotNull(objArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray51), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray51), "[]");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
    }

    @Test
    public void test06366() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06366");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex1 = complex0.tan();
        org.apache.commons.math.complex.Complex complex2 = complex1.sinh();
        org.apache.commons.math.complex.Complex complex3 = complex1.tanh();
        org.apache.commons.math.complex.Complex complex4 = complex1.asin();
        boolean boolean5 = complex4.isInfinite();
        org.apache.commons.math.complex.Complex complex6 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex7 = complex6.cosh();
        double double8 = complex6.abs();
        org.apache.commons.math.complex.Complex complex9 = complex6.conjugate();
        org.apache.commons.math.complex.Complex complex10 = complex9.conjugate();
        org.apache.commons.math.complex.Complex complex11 = complex9.tanh();
        org.apache.commons.math.complex.Complex complex12 = complex11.tan();
        org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex14 = complex13.cosh();
        double double15 = complex13.abs();
        org.apache.commons.math.complex.Complex complex16 = complex13.conjugate();
        org.apache.commons.math.complex.Complex complex17 = complex16.conjugate();
        org.apache.commons.math.complex.Complex complex18 = complex12.subtract(complex16);
        org.apache.commons.math.complex.Complex complex19 = complex16.negate();
        org.apache.commons.math.complex.Complex complex20 = complex16.tanh();
        org.apache.commons.math.complex.Complex complex21 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex22 = complex21.cosh();
        double double23 = complex21.abs();
        org.apache.commons.math.complex.Complex complex24 = complex21.conjugate();
        org.apache.commons.math.complex.Complex complex25 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex26 = complex25.sqrt();
        boolean boolean27 = complex25.isNaN();
        org.apache.commons.math.complex.Complex complex28 = complex25.sin();
        org.apache.commons.math.complex.Complex complex29 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex30 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex31 = complex30.sqrt();
        org.apache.commons.math.complex.Complex complex32 = complex31.sin();
        org.apache.commons.math.complex.Complex complex33 = complex29.pow(complex31);
        org.apache.commons.math.complex.Complex complex34 = complex33.asin();
        org.apache.commons.math.complex.Complex complex35 = complex34.atan();
        boolean boolean36 = complex35.isInfinite();
        org.apache.commons.math.complex.Complex complex37 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex38 = complex35.subtract(complex37);
        org.apache.commons.math.complex.Complex complex39 = complex38.sin();
        org.apache.commons.math.complex.Complex complex40 = complex25.divide(complex39);
        org.apache.commons.math.complex.Complex complex41 = complex21.subtract(complex39);
        boolean boolean42 = complex16.equals((java.lang.Object) complex39);
        org.apache.commons.math.complex.Complex complex43 = complex16.conjugate();
        org.apache.commons.math.complex.Complex complex44 = complex4.multiply(complex43);
        org.apache.commons.math.complex.Complex complex45 = complex43.exp();
        double double46 = complex43.abs();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + Double.POSITIVE_INFINITY + "'", double8 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + Double.POSITIVE_INFINITY + "'", double15 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + Double.POSITIVE_INFINITY + "'", double23 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + Double.POSITIVE_INFINITY + "'", double46 == Double.POSITIVE_INFINITY);
    }

    @Test
    public void test06367() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06367");
        double[] doubleArray4 = new double[] { (byte) 1, 100 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction5 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray4);
        double double7 = polynomialFunction5.value((double) (short) 100);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver8 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction5);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction9 = laguerreSolver8.getPolynomialFunction();
        double double10 = laguerreSolver8.getAbsoluteAccuracy();
        double[] doubleArray16 = new double[] { 0L, '#', 100.0f, 0L, (-1.0d) };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction17 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray16);
        org.apache.commons.math.complex.Complex[] complexArray19 = laguerreSolver8.solveAll(doubleArray16, 10001.0d);
        laguerreSolver8.setFunctionValueAccuracy((double) 10.0f);
        double double22 = laguerreSolver8.getRelativeAccuracy();
        double[] doubleArray28 = new double[] { 0L, '#', 100.0f, 0L, (-1.0d) };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction29 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray28);
        double double31 = polynomialFunction29.value((double) 0);
        double double33 = polynomialFunction29.value((double) (byte) 0);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction34 = polynomialFunction29.polynomialDerivative();
        double[] doubleArray35 = polynomialFunction29.getCoefficients();
        org.apache.commons.math.complex.Complex[] complexArray37 = laguerreSolver8.solveAll(doubleArray35, (-1.6365376E7d));
        double[] doubleArray40 = new double[] { (byte) 1, 100 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction41 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray40);
        double double43 = polynomialFunction41.value((double) (short) 100);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver44 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction41);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction45 = laguerreSolver44.getPolynomialFunction();
        laguerreSolver44.setRelativeAccuracy((double) 0);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction48 = laguerreSolver44.getPolynomialFunction();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction49 = polynomialFunction48.polynomialDerivative();
        double double51 = polynomialFunction48.value((double) ' ');
        double[] doubleArray52 = polynomialFunction48.getCoefficients();
        org.apache.commons.math.complex.Complex[] complexArray54 = laguerreSolver8.solveAll(doubleArray52, (double) (-1L));
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException60 = new org.apache.commons.math.FunctionEvaluationException(1.0E-6d);
        java.lang.Object[] objArray61 = functionEvaluationException60.getArguments();
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException62 = new org.apache.commons.math.FunctionEvaluationException((double) '#', "org.apache.commons.math.FunctionEvaluationException: org.apache.commons.math.ConvergenceException: hi!", objArray61);
        org.apache.commons.math.ConvergenceException convergenceException64 = new org.apache.commons.math.ConvergenceException();
        java.lang.Object[] objArray65 = convergenceException64.getArguments();
        java.lang.Object[] objArray74 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException75 = new org.apache.commons.math.ConvergenceException("", objArray74);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException76 = new org.apache.commons.math.FunctionEvaluationException((double) (short) 10, "hi!", objArray74);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException77 = new org.apache.commons.math.MaxIterationsExceededException((int) (byte) 0, "org.apache.commons.math.ConvergenceException: hi!", objArray74);
        java.lang.Throwable[] throwableArray78 = maxIterationsExceededException77.getSuppressed();
        java.lang.Object[] objArray85 = new java.lang.Object[] { 0.0f, (short) 1 };
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException86 = new org.apache.commons.math.MaxIterationsExceededException(100, "", objArray85);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException87 = new org.apache.commons.math.MaxIterationsExceededException((int) ' ', "hi!", objArray85);
        int int88 = maxIterationsExceededException87.getMaxIterations();
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException89 = new org.apache.commons.math.FunctionEvaluationException(Double.POSITIVE_INFINITY, "hi!", (java.lang.Object[]) throwableArray78, (java.lang.Throwable) maxIterationsExceededException87);
        java.lang.Object[] objArray90 = maxIterationsExceededException87.getArguments();
        org.apache.commons.math.ConvergenceException convergenceException92 = new org.apache.commons.math.ConvergenceException("hi!");
        java.lang.String str93 = convergenceException92.getPattern();
        org.apache.commons.math.ConvergenceException convergenceException94 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: hi!", objArray90, (java.lang.Throwable) convergenceException92);
        org.apache.commons.math.ConvergenceException convergenceException95 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: ", objArray65, (java.lang.Throwable) convergenceException92);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException96 = new org.apache.commons.math.FunctionEvaluationException((double) 21, "", objArray61, (java.lang.Throwable) convergenceException92);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException97 = new org.apache.commons.math.FunctionEvaluationException((-0.7853981633974483d), "org.apache.commons.math.ConvergenceException: org.apache.commons.math.FunctionEvaluationException: org.apache.commons.math.FunctionEvaluationException: org.apache.commons.math.FunctionEvaluationException: ", (java.lang.Object[]) complexArray54, (java.lang.Throwable) functionEvaluationException96);
        java.lang.Object[] objArray98 = functionEvaluationException96.getArguments();
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 10001.0d + "'", double7 == 10001.0d);
        org.junit.Assert.assertNotNull(polynomialFunction9);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0E-6d + "'", double10 == 1.0E-6d);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[0.0, 35.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(complexArray19);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 1.0E-14d + "'", double22 == 1.0E-14d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[0.0, 35.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.0d + "'", double31 == 0.0d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 0.0d + "'", double33 == 0.0d);
        org.junit.Assert.assertNotNull(polynomialFunction34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[0.0, 35.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(complexArray37);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 10001.0d + "'", double43 == 10001.0d);
        org.junit.Assert.assertNotNull(polynomialFunction45);
        org.junit.Assert.assertNotNull(polynomialFunction48);
        org.junit.Assert.assertNotNull(polynomialFunction49);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 3201.0d + "'", double51 == 3201.0d);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(complexArray54);
        org.junit.Assert.assertNotNull(objArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray61), "[1.0E-6]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray61), "[1.0E-6]");
        org.junit.Assert.assertNotNull(objArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray65), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray65), "[]");
        org.junit.Assert.assertNotNull(objArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray74), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray74), "[]");
        org.junit.Assert.assertNotNull(throwableArray78);
        org.junit.Assert.assertNotNull(objArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray85), "[0.0, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray85), "[0.0, 1]");
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 32 + "'", int88 == 32);
        org.junit.Assert.assertNotNull(objArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray90), "[0.0, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray90), "[0.0, 1]");
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "hi!" + "'", str93, "hi!");
        org.junit.Assert.assertNotNull(objArray98);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray98), "[1.0E-6]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray98), "[1.0E-6]");
    }

    @Test
    public void test06368() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06368");
        double[] doubleArray2 = new double[] { (byte) -1, '#' };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction4 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver5 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction4);
        laguerreSolver5.setAbsoluteAccuracy(0.0d);
        double double8 = laguerreSolver5.getFunctionValueAccuracy();
        laguerreSolver5.setFunctionValueAccuracy((double) 100);
        laguerreSolver5.setFunctionValueAccuracy(349.0d);
        double double13 = laguerreSolver5.getRelativeAccuracy();
        laguerreSolver5.setRelativeAccuracy((-3.06547450966E11d));
        laguerreSolver5.setAbsoluteAccuracy((-6.9702946206350175E87d));
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[-1.0, 35.0]");
        org.junit.Assert.assertNotNull(polynomialFunction4);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 1.0E-15d + "'", double8 == 1.0E-15d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 1.0E-14d + "'", double13 == 1.0E-14d);
    }

    @Test
    public void test06369() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06369");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex2 = complex1.sqrt();
        org.apache.commons.math.complex.Complex complex3 = complex2.sin();
        org.apache.commons.math.complex.Complex complex4 = complex0.pow(complex2);
        org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex6 = complex5.cosh();
        org.apache.commons.math.complex.Complex complex7 = complex5.log();
        org.apache.commons.math.complex.Complex complex8 = complex0.divide(complex7);
        org.apache.commons.math.complex.Complex complex9 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex10 = complex9.sqrt();
        org.apache.commons.math.complex.Complex complex11 = complex9.sin();
        org.apache.commons.math.complex.Complex complex12 = complex8.pow(complex9);
        org.apache.commons.math.complex.Complex complex13 = complex9.sin();
        org.apache.commons.math.complex.Complex complex14 = complex9.sinh();
        org.apache.commons.math.complex.Complex complex15 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex16 = complex15.sqrt();
        boolean boolean17 = complex15.isNaN();
        org.apache.commons.math.complex.Complex complex18 = complex15.tanh();
        org.apache.commons.math.complex.Complex complex19 = complex15.atan();
        org.apache.commons.math.complex.Complex complex20 = complex19.sqrt();
        org.apache.commons.math.complex.Complex complex21 = complex20.sinh();
        org.apache.commons.math.complex.Complex complex22 = complex9.subtract(complex21);
        org.apache.commons.math.complex.Complex complex23 = complex9.tan();
        org.apache.commons.math.complex.Complex complex24 = complex9.tan();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
    }

    @Test
    public void test06370() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06370");
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException3 = new org.apache.commons.math.FunctionEvaluationException((double) 100);
        java.lang.Object[] objArray4 = functionEvaluationException3.getArguments();
        org.apache.commons.math.ConvergenceException convergenceException5 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) functionEvaluationException3);
        java.lang.Object[] objArray6 = convergenceException5.getArguments();
        java.lang.Object[] objArray9 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException10 = new org.apache.commons.math.ConvergenceException("", objArray9);
        java.lang.Object[] objArray13 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException14 = new org.apache.commons.math.ConvergenceException("", objArray13);
        java.lang.Object[] objArray16 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException17 = new org.apache.commons.math.ConvergenceException("", objArray16);
        org.apache.commons.math.ConvergenceException convergenceException18 = new org.apache.commons.math.ConvergenceException("", objArray13, (java.lang.Throwable) convergenceException17);
        java.lang.Throwable[] throwableArray19 = convergenceException18.getSuppressed();
        org.apache.commons.math.ConvergenceException convergenceException20 = new org.apache.commons.math.ConvergenceException("", objArray9, (java.lang.Throwable) convergenceException18);
        org.apache.commons.math.ConvergenceException convergenceException21 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.FunctionEvaluationException: ", objArray6, (java.lang.Throwable) convergenceException18);
        double[] doubleArray25 = new double[] { (byte) 1, 100 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction26 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray25);
        double double28 = polynomialFunction26.value((double) (short) 100);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver29 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction26);
        double double33 = laguerreSolver29.solve((double) (-1L), 349.0d, (double) (short) 10);
        int int34 = laguerreSolver29.getIterationCount();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction35 = laguerreSolver29.getPolynomialFunction();
        double[] doubleArray38 = new double[] { (byte) 1, 100 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction39 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray38);
        double double41 = polynomialFunction39.value((double) (short) 100);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver42 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction39);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction43 = laguerreSolver42.getPolynomialFunction();
        double[] doubleArray46 = new double[] { (byte) -1, '#' };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction47 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray46);
        org.apache.commons.math.complex.Complex[] complexArray49 = laguerreSolver42.solveAll(doubleArray46, 1.0d);
        org.apache.commons.math.complex.Complex[] complexArray51 = laguerreSolver29.solveAll(doubleArray46, (double) 0L);
        org.apache.commons.math.ConvergenceException convergenceException53 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: Evaluation failed for argument = {0}");
        org.apache.commons.math.ConvergenceException convergenceException54 = new org.apache.commons.math.ConvergenceException("", (java.lang.Object[]) complexArray51, (java.lang.Throwable) convergenceException53);
        java.lang.Object[] objArray55 = convergenceException53.getArguments();
        org.apache.commons.math.ConvergenceException convergenceException56 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.FunctionEvaluationException: org.apache.commons.math.ConvergenceException: Convergence failed", objArray6, (java.lang.Throwable) convergenceException53);
        org.junit.Assert.assertNotNull(objArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray4), "[100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray4), "[100.0]");
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[]");
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[]");
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[]");
        org.junit.Assert.assertNotNull(objArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray16), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray16), "[]");
        org.junit.Assert.assertNotNull(throwableArray19);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 10001.0d + "'", double28 == 10001.0d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + (-0.01d) + "'", double33 == (-0.01d));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 3 + "'", int34 == 3);
        org.junit.Assert.assertNotNull(polynomialFunction35);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 10001.0d + "'", double41 == 10001.0d);
        org.junit.Assert.assertNotNull(polynomialFunction43);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[-1.0, 35.0]");
        org.junit.Assert.assertNotNull(complexArray49);
        org.junit.Assert.assertNotNull(complexArray51);
        org.junit.Assert.assertNotNull(objArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray55), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray55), "[]");
    }

    @Test
    public void test06371() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06371");
        double[] doubleArray2 = new double[] { (byte) 1, 100 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) (short) 100);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver6 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction3);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction7 = laguerreSolver6.getPolynomialFunction();
        laguerreSolver6.setRelativeAccuracy((double) 0);
        double[] doubleArray12 = new double[] { (byte) -1, '#' };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction13 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray12);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction14 = polynomialFunction13.polynomialDerivative();
        double[] doubleArray15 = polynomialFunction13.getCoefficients();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction16 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray15);
        org.apache.commons.math.complex.Complex[] complexArray18 = laguerreSolver6.solveAll(doubleArray15, (double) 4);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction19 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray15);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction20 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray15);
        double double22 = polynomialFunction20.value((-0.34000000999999996d));
        java.lang.Class<?> wildcardClass23 = polynomialFunction20.getClass();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 10001.0d + "'", double5 == 10001.0d);
        org.junit.Assert.assertNotNull(polynomialFunction7);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[-1.0, 35.0]");
        org.junit.Assert.assertNotNull(polynomialFunction14);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[-1.0, 35.0]");
        org.junit.Assert.assertNotNull(complexArray18);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + (-12.90000035d) + "'", double22 == (-12.90000035d));
        org.junit.Assert.assertNotNull(wildcardClass23);
    }

    @Test
    public void test06372() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06372");
        double[] doubleArray2 = new double[] { (byte) 1, 100 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) (short) 100);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver6 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction3);
        double double10 = laguerreSolver6.solve((double) (-1L), 349.0d, (double) (short) 10);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction11 = laguerreSolver6.getPolynomialFunction();
        laguerreSolver6.resetRelativeAccuracy();
        laguerreSolver6.setFunctionValueAccuracy((double) 10.0f);
        laguerreSolver6.setRelativeAccuracy((double) (-1));
        int int17 = laguerreSolver6.getMaximalIterationCount();
        double double18 = laguerreSolver6.getResult();
        laguerreSolver6.setMaximalIterationCount(0);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 10001.0d + "'", double5 == 10001.0d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + (-0.01d) + "'", double10 == (-0.01d));
        org.junit.Assert.assertNotNull(polynomialFunction11);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 100 + "'", int17 == 100);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + (-0.01d) + "'", double18 == (-0.01d));
    }

    @Test
    public void test06373() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06373");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex1 = complex0.cosh();
        double double2 = complex0.abs();
        org.apache.commons.math.complex.Complex complex3 = complex0.conjugate();
        org.apache.commons.math.complex.Complex complex4 = complex3.conjugate();
        boolean boolean5 = complex3.isInfinite();
        org.apache.commons.math.complex.Complex complex6 = complex3.cos();
        org.apache.commons.math.complex.Complex complex7 = complex3.conjugate();
        org.apache.commons.math.complex.Complex complex8 = complex3.sin();
        boolean boolean9 = complex3.isNaN();
        org.apache.commons.math.complex.Complex complex10 = complex3.sqrt();
        org.apache.commons.math.complex.Complex complex11 = complex10.conjugate();
        org.apache.commons.math.complex.Complex complex12 = complex11.sinh();
        boolean boolean13 = complex12.isInfinite();
        org.apache.commons.math.complex.Complex complex14 = complex12.exp();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + Double.POSITIVE_INFINITY + "'", double2 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(complex14);
    }

    @Test
    public void test06374() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06374");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex1 = complex0.cosh();
        org.apache.commons.math.complex.Complex complex2 = complex0.log();
        org.apache.commons.math.complex.Complex complex3 = complex0.cos();
        org.apache.commons.math.complex.Complex complex4 = complex3.negate();
        org.apache.commons.math.complex.Complex complex5 = complex4.tan();
        org.apache.commons.math.complex.Complex complex6 = complex4.asin();
        org.apache.commons.math.complex.Complex complex7 = complex6.tanh();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
    }

    @Test
    public void test06375() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06375");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex1 = complex0.cosh();
        org.apache.commons.math.complex.Complex complex2 = complex0.log();
        org.apache.commons.math.complex.Complex complex3 = complex0.sin();
        org.apache.commons.math.complex.Complex complex4 = complex0.log();
        org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex6 = complex5.sqrt();
        org.apache.commons.math.complex.Complex complex7 = complex0.divide(complex6);
        org.apache.commons.math.complex.Complex complex8 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex9 = complex8.cosh();
        double double10 = complex8.abs();
        org.apache.commons.math.complex.Complex complex11 = complex8.conjugate();
        org.apache.commons.math.complex.Complex complex12 = complex11.conjugate();
        org.apache.commons.math.complex.Complex complex13 = complex7.subtract(complex12);
        org.apache.commons.math.complex.Complex complex14 = complex13.log();
        org.apache.commons.math.complex.Complex complex15 = complex13.conjugate();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + Double.POSITIVE_INFINITY + "'", double10 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
    }

    @Test
    public void test06376() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06376");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex2 = complex1.sqrt();
        org.apache.commons.math.complex.Complex complex3 = complex2.sin();
        org.apache.commons.math.complex.Complex complex4 = complex0.pow(complex2);
        org.apache.commons.math.complex.Complex complex5 = complex4.asin();
        org.apache.commons.math.complex.Complex complex6 = complex5.atan();
        boolean boolean7 = complex6.isInfinite();
        double double8 = complex6.getImaginary();
        double[] doubleArray14 = new double[] { 0L, '#', 100.0f, 0L, (-1.0d) };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction15 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray14);
        int int16 = polynomialFunction15.degree();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction17 = polynomialFunction15.polynomialDerivative();
        boolean boolean18 = complex6.equals((java.lang.Object) polynomialFunction17);
        double[] doubleArray19 = polynomialFunction17.getCoefficients();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction20 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray19);
        double double22 = polynomialFunction20.value((-3.464877501E9d));
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[0.0, 35.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 4 + "'", int16 == 4);
        org.junit.Assert.assertNotNull(polynomialFunction17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[35.0, 200.0, 0.0, -4.0]");
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 1.6638863011726704E29d + "'", double22 == 1.6638863011726704E29d);
    }

    @Test
    public void test06377() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06377");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex2 = complex1.sqrt();
        org.apache.commons.math.complex.Complex complex3 = complex2.sin();
        org.apache.commons.math.complex.Complex complex4 = complex0.pow(complex2);
        org.apache.commons.math.complex.Complex complex5 = complex4.asin();
        org.apache.commons.math.complex.Complex complex6 = complex5.atan();
        org.apache.commons.math.complex.Complex complex7 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex8 = complex7.cosh();
        boolean boolean9 = complex6.equals((java.lang.Object) complex7);
        org.apache.commons.math.complex.Complex complex10 = complex6.conjugate();
        org.apache.commons.math.complex.Complex complex11 = complex6.exp();
        org.apache.commons.math.complex.Complex complex12 = complex6.sqrt();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
    }

    @Test
    public void test06378() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06378");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex1 = complex0.cosh();
        double double2 = complex0.abs();
        org.apache.commons.math.complex.Complex complex3 = complex0.conjugate();
        org.apache.commons.math.complex.Complex complex4 = complex3.conjugate();
        boolean boolean5 = complex3.isInfinite();
        org.apache.commons.math.complex.Complex complex6 = complex3.cos();
        org.apache.commons.math.complex.Complex complex7 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex8 = complex7.cosh();
        double double9 = complex7.abs();
        org.apache.commons.math.complex.Complex complex10 = complex7.conjugate();
        org.apache.commons.math.complex.Complex complex11 = complex10.conjugate();
        boolean boolean12 = complex10.isInfinite();
        org.apache.commons.math.complex.Complex complex13 = complex10.asin();
        boolean boolean14 = complex10.isNaN();
        org.apache.commons.math.complex.Complex complex15 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex16 = complex15.cosh();
        org.apache.commons.math.complex.Complex complex17 = complex10.divide(complex15);
        org.apache.commons.math.complex.Complex complex18 = complex6.divide(complex15);
        org.apache.commons.math.complex.Complex complex19 = complex6.cos();
        org.apache.commons.math.complex.Complex complex20 = complex19.sqrt1z();
        org.apache.commons.math.complex.Complex complex21 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex22 = complex21.sqrt();
        org.apache.commons.math.complex.Complex complex23 = complex22.sin();
        org.apache.commons.math.complex.Complex complex24 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex25 = complex24.sqrt();
        org.apache.commons.math.complex.Complex complex26 = complex25.sin();
        org.apache.commons.math.complex.Complex complex27 = complex22.multiply(complex25);
        org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex29 = complex28.cosh();
        double double30 = complex28.abs();
        org.apache.commons.math.complex.Complex complex31 = complex28.conjugate();
        org.apache.commons.math.complex.Complex complex32 = complex31.conjugate();
        boolean boolean33 = complex31.isInfinite();
        org.apache.commons.math.complex.Complex complex34 = complex31.cos();
        org.apache.commons.math.complex.Complex complex35 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex36 = complex35.cosh();
        double double37 = complex35.abs();
        org.apache.commons.math.complex.Complex complex38 = complex35.conjugate();
        org.apache.commons.math.complex.Complex complex39 = complex38.conjugate();
        boolean boolean40 = complex38.isInfinite();
        org.apache.commons.math.complex.Complex complex41 = complex38.asin();
        boolean boolean42 = complex38.isNaN();
        org.apache.commons.math.complex.Complex complex43 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex44 = complex43.cosh();
        org.apache.commons.math.complex.Complex complex45 = complex38.divide(complex43);
        org.apache.commons.math.complex.Complex complex46 = complex34.divide(complex43);
        org.apache.commons.math.complex.Complex complex47 = complex22.subtract(complex34);
        org.apache.commons.math.complex.Complex complex48 = complex47.asin();
        org.apache.commons.math.complex.Complex complex49 = complex20.subtract(complex47);
        org.apache.commons.math.complex.Complex complex50 = complex49.tan();
        org.apache.commons.math.complex.Complex complex51 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex52 = complex51.cosh();
        org.apache.commons.math.complex.Complex complex53 = complex51.log();
        org.apache.commons.math.complex.Complex complex54 = complex51.sin();
        org.apache.commons.math.complex.Complex complex55 = complex51.log();
        org.apache.commons.math.complex.Complex complex56 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex57 = complex56.sqrt();
        org.apache.commons.math.complex.Complex complex58 = complex51.divide(complex57);
        org.apache.commons.math.complex.Complex complex59 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex60 = complex59.cosh();
        double double61 = complex59.abs();
        org.apache.commons.math.complex.Complex complex62 = complex59.conjugate();
        org.apache.commons.math.complex.Complex complex63 = complex62.conjugate();
        org.apache.commons.math.complex.Complex complex64 = complex58.subtract(complex63);
        org.apache.commons.math.complex.Complex complex65 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex66 = complex65.cosh();
        org.apache.commons.math.complex.Complex complex67 = complex65.log();
        org.apache.commons.math.complex.Complex complex68 = complex65.sin();
        org.apache.commons.math.complex.Complex complex69 = complex65.log();
        org.apache.commons.math.complex.Complex complex70 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex71 = complex70.sqrt();
        org.apache.commons.math.complex.Complex complex72 = complex65.divide(complex71);
        org.apache.commons.math.complex.Complex complex73 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex74 = complex73.cosh();
        double double75 = complex73.abs();
        org.apache.commons.math.complex.Complex complex76 = complex73.conjugate();
        org.apache.commons.math.complex.Complex complex77 = complex76.conjugate();
        org.apache.commons.math.complex.Complex complex78 = complex72.subtract(complex77);
        org.apache.commons.math.complex.Complex complex79 = complex72.exp();
        org.apache.commons.math.complex.Complex complex80 = complex64.multiply(complex79);
        org.apache.commons.math.complex.Complex complex81 = complex79.cosh();
        boolean boolean82 = complex81.isNaN();
        org.apache.commons.math.complex.Complex complex83 = complex81.tan();
        org.apache.commons.math.complex.Complex complex84 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex85 = complex84.cosh();
        org.apache.commons.math.complex.Complex complex86 = complex85.acos();
        double double87 = complex85.getReal();
        org.apache.commons.math.complex.Complex complex88 = complex85.tanh();
        org.apache.commons.math.complex.Complex complex89 = complex85.sqrt1z();
        org.apache.commons.math.complex.Complex complex90 = complex81.add(complex85);
        org.apache.commons.math.complex.Complex complex91 = complex49.subtract(complex85);
        org.apache.commons.math.complex.Complex complex92 = complex49.exp();
        org.apache.commons.math.complex.Complex complex93 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex94 = complex93.cosh();
        double double95 = complex93.abs();
        org.apache.commons.math.complex.Complex complex96 = complex93.conjugate();
        org.apache.commons.math.complex.Complex complex97 = complex93.exp();
        org.apache.commons.math.complex.Complex complex98 = complex49.subtract(complex93);
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + Double.POSITIVE_INFINITY + "'", double2 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + Double.POSITIVE_INFINITY + "'", double9 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + Double.POSITIVE_INFINITY + "'", double30 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + Double.POSITIVE_INFINITY + "'", double37 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + Double.POSITIVE_INFINITY + "'", double61 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + Double.POSITIVE_INFINITY + "'", double75 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex76);
        org.junit.Assert.assertNotNull(complex77);
        org.junit.Assert.assertNotNull(complex78);
        org.junit.Assert.assertNotNull(complex79);
        org.junit.Assert.assertNotNull(complex80);
        org.junit.Assert.assertNotNull(complex81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertNotNull(complex83);
        org.junit.Assert.assertNotNull(complex84);
        org.junit.Assert.assertNotNull(complex85);
        org.junit.Assert.assertNotNull(complex86);
        org.junit.Assert.assertTrue(Double.isNaN(double87));
        org.junit.Assert.assertNotNull(complex88);
        org.junit.Assert.assertNotNull(complex89);
        org.junit.Assert.assertNotNull(complex90);
        org.junit.Assert.assertNotNull(complex91);
        org.junit.Assert.assertNotNull(complex92);
        org.junit.Assert.assertNotNull(complex93);
        org.junit.Assert.assertNotNull(complex94);
        org.junit.Assert.assertTrue("'" + double95 + "' != '" + Double.POSITIVE_INFINITY + "'", double95 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex96);
        org.junit.Assert.assertNotNull(complex97);
        org.junit.Assert.assertNotNull(complex98);
    }

    @Test
    public void test06379() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06379");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex1 = complex0.cosh();
        org.apache.commons.math.complex.Complex complex2 = complex0.log();
        org.apache.commons.math.complex.Complex complex3 = complex0.sin();
        org.apache.commons.math.complex.Complex complex4 = complex0.log();
        org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex6 = complex5.sqrt();
        org.apache.commons.math.complex.Complex complex7 = complex0.divide(complex6);
        org.apache.commons.math.complex.Complex complex8 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex9 = complex8.cosh();
        org.apache.commons.math.complex.Complex complex10 = complex9.acos();
        double double11 = complex9.getReal();
        org.apache.commons.math.complex.Complex complex12 = complex9.sqrt();
        org.apache.commons.math.complex.Complex complex13 = complex0.pow(complex9);
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex15 = complex14.cosh();
        org.apache.commons.math.complex.Complex complex16 = complex14.log();
        org.apache.commons.math.complex.Complex complex17 = complex16.cos();
        org.apache.commons.math.complex.Complex complex18 = complex9.multiply(complex16);
        org.apache.commons.math.complex.Complex complex19 = complex16.tanh();
        org.apache.commons.math.complex.Complex complex20 = complex19.asin();
        org.apache.commons.math.complex.Complex complex21 = complex19.acos();
        org.apache.commons.math.complex.Complex complex22 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex23 = complex22.cosh();
        double double24 = complex22.abs();
        org.apache.commons.math.complex.Complex complex25 = complex22.conjugate();
        org.apache.commons.math.complex.Complex complex26 = complex25.conjugate();
        boolean boolean27 = complex25.isInfinite();
        org.apache.commons.math.complex.Complex complex28 = complex25.cos();
        org.apache.commons.math.complex.Complex complex29 = complex21.subtract(complex25);
        org.apache.commons.math.complex.Complex complex30 = complex21.sin();
        org.apache.commons.math.complex.Complex complex31 = complex30.cos();
        org.apache.commons.math.complex.Complex complex32 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex33 = complex32.cosh();
        double double34 = complex32.abs();
        org.apache.commons.math.complex.Complex complex35 = complex32.conjugate();
        org.apache.commons.math.complex.Complex complex36 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex37 = complex36.cosh();
        double double38 = complex36.abs();
        org.apache.commons.math.complex.Complex complex39 = complex36.conjugate();
        org.apache.commons.math.complex.Complex complex40 = complex39.conjugate();
        org.apache.commons.math.complex.Complex complex41 = complex39.tanh();
        org.apache.commons.math.complex.Complex complex42 = complex39.atan();
        org.apache.commons.math.complex.Complex complex43 = complex32.subtract(complex39);
        org.apache.commons.math.complex.Complex complex44 = complex43.log();
        org.apache.commons.math.complex.Complex complex45 = complex44.negate();
        org.apache.commons.math.complex.Complex complex46 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex47 = complex46.cosh();
        org.apache.commons.math.complex.Complex complex48 = complex46.log();
        org.apache.commons.math.complex.Complex complex49 = complex48.cos();
        double double50 = complex49.abs();
        org.apache.commons.math.complex.Complex complex51 = complex49.sqrt();
        org.apache.commons.math.complex.Complex complex52 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex53 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex54 = complex53.sqrt();
        org.apache.commons.math.complex.Complex complex55 = complex54.sin();
        org.apache.commons.math.complex.Complex complex56 = complex52.pow(complex54);
        org.apache.commons.math.complex.Complex complex57 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex58 = complex57.cosh();
        org.apache.commons.math.complex.Complex complex59 = complex57.log();
        org.apache.commons.math.complex.Complex complex60 = complex52.divide(complex59);
        org.apache.commons.math.complex.Complex complex61 = complex51.subtract(complex60);
        org.apache.commons.math.complex.Complex complex62 = complex51.conjugate();
        org.apache.commons.math.complex.Complex complex63 = complex51.cos();
        org.apache.commons.math.complex.Complex complex64 = complex63.sqrt();
        org.apache.commons.math.complex.Complex complex65 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex66 = complex65.cosh();
        org.apache.commons.math.complex.Complex complex67 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex68 = complex67.cosh();
        org.apache.commons.math.complex.Complex complex69 = complex67.log();
        org.apache.commons.math.complex.Complex complex70 = complex67.sin();
        org.apache.commons.math.complex.Complex complex71 = complex67.log();
        org.apache.commons.math.complex.Complex complex72 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex73 = complex72.sqrt();
        org.apache.commons.math.complex.Complex complex74 = complex67.divide(complex73);
        org.apache.commons.math.complex.Complex complex75 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex76 = complex75.cosh();
        org.apache.commons.math.complex.Complex complex77 = complex76.acos();
        double double78 = complex76.getReal();
        org.apache.commons.math.complex.Complex complex79 = complex76.sqrt();
        org.apache.commons.math.complex.Complex complex80 = complex67.pow(complex76);
        org.apache.commons.math.complex.Complex complex81 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex82 = complex81.cosh();
        org.apache.commons.math.complex.Complex complex83 = complex81.log();
        org.apache.commons.math.complex.Complex complex84 = complex83.cos();
        org.apache.commons.math.complex.Complex complex85 = complex76.multiply(complex83);
        org.apache.commons.math.complex.Complex complex86 = complex83.tanh();
        org.apache.commons.math.complex.Complex complex87 = complex65.divide(complex83);
        org.apache.commons.math.complex.Complex complex88 = complex64.pow(complex83);
        org.apache.commons.math.complex.Complex complex89 = complex44.pow(complex88);
        org.apache.commons.math.complex.Complex complex90 = complex89.tanh();
        org.apache.commons.math.complex.Complex complex91 = complex89.cosh();
        org.apache.commons.math.complex.Complex complex92 = complex31.add(complex91);
        org.apache.commons.math.complex.Complex complex93 = complex92.acos();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + Double.POSITIVE_INFINITY + "'", double24 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + Double.POSITIVE_INFINITY + "'", double34 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + Double.POSITIVE_INFINITY + "'", double38 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertTrue(Double.isNaN(double50));
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertNotNull(complex75);
        org.junit.Assert.assertNotNull(complex76);
        org.junit.Assert.assertNotNull(complex77);
        org.junit.Assert.assertTrue(Double.isNaN(double78));
        org.junit.Assert.assertNotNull(complex79);
        org.junit.Assert.assertNotNull(complex80);
        org.junit.Assert.assertNotNull(complex81);
        org.junit.Assert.assertNotNull(complex82);
        org.junit.Assert.assertNotNull(complex83);
        org.junit.Assert.assertNotNull(complex84);
        org.junit.Assert.assertNotNull(complex85);
        org.junit.Assert.assertNotNull(complex86);
        org.junit.Assert.assertNotNull(complex87);
        org.junit.Assert.assertNotNull(complex88);
        org.junit.Assert.assertNotNull(complex89);
        org.junit.Assert.assertNotNull(complex90);
        org.junit.Assert.assertNotNull(complex91);
        org.junit.Assert.assertNotNull(complex92);
        org.junit.Assert.assertNotNull(complex93);
    }

    @Test
    public void test06380() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06380");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex(4.375590275601905E32d, (-2.55976730539718E65d));
    }

    @Test
    public void test06381() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06381");
        java.lang.Object[] objArray4 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException5 = new org.apache.commons.math.ConvergenceException("", objArray4);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException6 = new org.apache.commons.math.MaxIterationsExceededException(0, "hi!", objArray4);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException7 = new org.apache.commons.math.FunctionEvaluationException(52.0d, (java.lang.Throwable) maxIterationsExceededException6);
        java.lang.String str8 = maxIterationsExceededException6.toString();
        org.junit.Assert.assertNotNull(objArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray4), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray4), "[]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "org.apache.commons.math.MaxIterationsExceededException: hi!" + "'", str8, "org.apache.commons.math.MaxIterationsExceededException: hi!");
    }

    @Test
    public void test06382() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06382");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex2 = complex1.sqrt();
        org.apache.commons.math.complex.Complex complex3 = complex2.sin();
        org.apache.commons.math.complex.Complex complex4 = complex0.pow(complex2);
        org.apache.commons.math.complex.Complex complex5 = complex4.asin();
        double double6 = complex4.abs();
        org.apache.commons.math.complex.Complex complex7 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex8 = complex7.cosh();
        org.apache.commons.math.complex.Complex complex9 = complex7.log();
        org.apache.commons.math.complex.Complex complex10 = complex7.sin();
        org.apache.commons.math.complex.Complex complex11 = complex7.log();
        org.apache.commons.math.complex.Complex complex12 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex13 = complex12.sqrt();
        org.apache.commons.math.complex.Complex complex14 = complex7.divide(complex13);
        org.apache.commons.math.complex.Complex complex15 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex16 = complex15.cosh();
        double double17 = complex15.abs();
        org.apache.commons.math.complex.Complex complex18 = complex15.conjugate();
        org.apache.commons.math.complex.Complex complex19 = complex18.conjugate();
        org.apache.commons.math.complex.Complex complex20 = complex14.subtract(complex19);
        org.apache.commons.math.complex.Complex complex21 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex22 = complex21.cosh();
        org.apache.commons.math.complex.Complex complex23 = complex21.log();
        org.apache.commons.math.complex.Complex complex24 = complex21.sin();
        org.apache.commons.math.complex.Complex complex25 = complex21.log();
        org.apache.commons.math.complex.Complex complex26 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex27 = complex26.sqrt();
        org.apache.commons.math.complex.Complex complex28 = complex21.divide(complex27);
        org.apache.commons.math.complex.Complex complex29 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex30 = complex29.cosh();
        double double31 = complex29.abs();
        org.apache.commons.math.complex.Complex complex32 = complex29.conjugate();
        org.apache.commons.math.complex.Complex complex33 = complex32.conjugate();
        org.apache.commons.math.complex.Complex complex34 = complex28.subtract(complex33);
        org.apache.commons.math.complex.Complex complex35 = complex28.exp();
        org.apache.commons.math.complex.Complex complex36 = complex20.multiply(complex35);
        org.apache.commons.math.complex.Complex complex37 = complex36.sin();
        org.apache.commons.math.complex.Complex complex38 = complex4.pow(complex36);
        org.apache.commons.math.complex.Complex complex39 = complex36.acos();
        double double40 = complex39.getReal();
        boolean boolean41 = complex39.isNaN();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + Double.POSITIVE_INFINITY + "'", double17 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + Double.POSITIVE_INFINITY + "'", double31 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertTrue(Double.isNaN(double40));
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
    }

    @Test
    public void test06383() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06383");
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException5 = new org.apache.commons.math.FunctionEvaluationException(1.0E-6d);
        java.lang.Object[] objArray6 = functionEvaluationException5.getArguments();
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException7 = new org.apache.commons.math.FunctionEvaluationException((double) '#', "org.apache.commons.math.FunctionEvaluationException: org.apache.commons.math.ConvergenceException: hi!", objArray6);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException8 = new org.apache.commons.math.FunctionEvaluationException(1340332.0093999603d, "org.apache.commons.math.MaxIterationsExceededException: org.apache.commons.math.ConvergenceException: hi!", (java.lang.Throwable) functionEvaluationException7);
        java.lang.Throwable[] throwableArray9 = functionEvaluationException8.getSuppressed();
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[1.0E-6]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[1.0E-6]");
        org.junit.Assert.assertNotNull(throwableArray9);
    }

    @Test
    public void test06384() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06384");
        java.lang.Object[] objArray8 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException9 = new org.apache.commons.math.ConvergenceException("", objArray8);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException10 = new org.apache.commons.math.FunctionEvaluationException((double) (short) 10, "hi!", objArray8);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException11 = new org.apache.commons.math.FunctionEvaluationException(0.0d, "org.apache.commons.math.FunctionEvaluationException: ", objArray8);
        java.lang.Object[] objArray13 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException14 = new org.apache.commons.math.ConvergenceException("", objArray13);
        java.lang.Object[] objArray19 = new java.lang.Object[] { 0.0f, (short) 1 };
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException20 = new org.apache.commons.math.MaxIterationsExceededException(100, "", objArray19);
        convergenceException14.addSuppressed((java.lang.Throwable) maxIterationsExceededException20);
        org.apache.commons.math.ConvergenceException convergenceException22 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.FunctionEvaluationException: ", objArray8, (java.lang.Throwable) maxIterationsExceededException20);
        int int23 = maxIterationsExceededException20.getMaxIterations();
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException24 = new org.apache.commons.math.FunctionEvaluationException((-9.89965E7d), (java.lang.Throwable) maxIterationsExceededException20);
        java.lang.Object[] objArray28 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException29 = new org.apache.commons.math.ConvergenceException("", objArray28);
        java.lang.Object[] objArray31 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException32 = new org.apache.commons.math.ConvergenceException("", objArray31);
        org.apache.commons.math.ConvergenceException convergenceException33 = new org.apache.commons.math.ConvergenceException("", objArray28, (java.lang.Throwable) convergenceException32);
        org.apache.commons.math.ConvergenceException convergenceException34 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.FunctionEvaluationException: ", objArray28);
        functionEvaluationException24.addSuppressed((java.lang.Throwable) convergenceException34);
        java.lang.Object[] objArray36 = convergenceException34.getArguments();
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException37 = new org.apache.commons.math.FunctionEvaluationException((-1000.0d), (java.lang.Throwable) convergenceException34);
        java.lang.String str38 = functionEvaluationException37.getPattern();
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[]");
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[]");
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[0.0, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[0.0, 1]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 100 + "'", int23 == 100);
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[]");
        org.junit.Assert.assertNotNull(objArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray31), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray31), "[]");
        org.junit.Assert.assertNotNull(objArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray36), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray36), "[]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "org.apache.commons.math.FunctionEvaluationException: " + "'", str38, "org.apache.commons.math.FunctionEvaluationException: ");
    }

    @Test
    public void test06385() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06385");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex2 = complex1.sqrt();
        org.apache.commons.math.complex.Complex complex3 = complex2.sin();
        org.apache.commons.math.complex.Complex complex4 = complex0.pow(complex2);
        org.apache.commons.math.complex.Complex complex5 = complex4.asin();
        org.apache.commons.math.complex.Complex complex6 = complex4.tan();
        org.apache.commons.math.complex.Complex complex7 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex8 = complex7.cosh();
        double double9 = complex7.abs();
        org.apache.commons.math.complex.Complex complex10 = complex7.conjugate();
        org.apache.commons.math.complex.Complex complex11 = complex10.conjugate();
        boolean boolean12 = complex10.isInfinite();
        org.apache.commons.math.complex.Complex complex13 = complex10.asin();
        boolean boolean14 = complex10.isNaN();
        org.apache.commons.math.complex.Complex complex15 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex16 = complex15.cosh();
        org.apache.commons.math.complex.Complex complex17 = complex10.divide(complex15);
        org.apache.commons.math.complex.Complex complex18 = complex6.pow(complex15);
        boolean boolean19 = complex15.isInfinite();
        org.apache.commons.math.complex.Complex complex20 = complex15.atan();
        org.apache.commons.math.complex.Complex complex21 = complex20.negate();
        org.apache.commons.math.complex.Complex complex22 = complex21.sin();
        double double23 = complex21.getImaginary();
        org.apache.commons.math.complex.Complex complex24 = complex21.tanh();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + Double.POSITIVE_INFINITY + "'", double9 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertNotNull(complex24);
    }

    @Test
    public void test06386() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06386");
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException2 = new org.apache.commons.math.FunctionEvaluationException((-3.213906379456312E15d), "org.apache.commons.math.FunctionEvaluationException: org.apache.commons.math.FunctionEvaluationException: org.apache.commons.math.FunctionEvaluationException: org.apache.commons.math.MaxIterationsExceededException: hi!");
    }

    @Test
    public void test06387() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06387");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex1 = complex0.cosh();
        org.apache.commons.math.complex.Complex complex2 = complex0.log();
        org.apache.commons.math.complex.Complex complex3 = complex0.sin();
        org.apache.commons.math.complex.Complex complex4 = complex0.log();
        org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex6 = complex5.sqrt();
        org.apache.commons.math.complex.Complex complex7 = complex0.divide(complex6);
        org.apache.commons.math.complex.Complex complex8 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex9 = complex8.cosh();
        double double10 = complex8.abs();
        org.apache.commons.math.complex.Complex complex11 = complex8.conjugate();
        org.apache.commons.math.complex.Complex complex12 = complex11.conjugate();
        org.apache.commons.math.complex.Complex complex13 = complex7.subtract(complex12);
        org.apache.commons.math.complex.Complex complex14 = complex7.exp();
        org.apache.commons.math.complex.Complex complex15 = complex7.tan();
        org.apache.commons.math.complex.Complex complex16 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex17 = complex16.cosh();
        double double18 = complex16.abs();
        org.apache.commons.math.complex.Complex complex19 = complex16.conjugate();
        org.apache.commons.math.complex.Complex complex20 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex21 = complex20.cosh();
        double double22 = complex20.abs();
        org.apache.commons.math.complex.Complex complex23 = complex20.conjugate();
        org.apache.commons.math.complex.Complex complex24 = complex23.conjugate();
        org.apache.commons.math.complex.Complex complex25 = complex23.tanh();
        org.apache.commons.math.complex.Complex complex26 = complex23.atan();
        org.apache.commons.math.complex.Complex complex27 = complex16.subtract(complex23);
        org.apache.commons.math.complex.Complex complex28 = complex7.subtract(complex27);
        org.apache.commons.math.complex.Complex complex29 = complex27.sqrt1z();
        org.apache.commons.math.complex.Complex complex30 = complex27.log();
        org.apache.commons.math.complex.Complex complex31 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex32 = complex31.cosh();
        org.apache.commons.math.complex.Complex complex33 = complex31.log();
        org.apache.commons.math.complex.Complex complex34 = complex33.cos();
        org.apache.commons.math.complex.Complex complex35 = complex33.exp();
        boolean boolean36 = complex33.isNaN();
        org.apache.commons.math.complex.Complex complex37 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex38 = complex37.cosh();
        double double39 = complex37.abs();
        org.apache.commons.math.complex.Complex complex40 = complex37.conjugate();
        org.apache.commons.math.complex.Complex complex41 = complex40.conjugate();
        org.apache.commons.math.complex.Complex complex42 = complex40.tanh();
        org.apache.commons.math.complex.Complex complex43 = complex33.multiply(complex40);
        org.apache.commons.math.complex.Complex complex44 = complex33.cos();
        org.apache.commons.math.complex.Complex complex45 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex46 = complex45.cosh();
        double double47 = complex45.abs();
        org.apache.commons.math.complex.Complex complex48 = complex45.conjugate();
        org.apache.commons.math.complex.Complex complex49 = complex48.conjugate();
        boolean boolean50 = complex48.isInfinite();
        org.apache.commons.math.complex.Complex complex51 = complex48.cos();
        org.apache.commons.math.complex.Complex complex52 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex53 = complex52.cosh();
        double double54 = complex52.abs();
        org.apache.commons.math.complex.Complex complex55 = complex52.conjugate();
        org.apache.commons.math.complex.Complex complex56 = complex55.conjugate();
        boolean boolean57 = complex55.isInfinite();
        org.apache.commons.math.complex.Complex complex58 = complex55.asin();
        boolean boolean59 = complex55.isNaN();
        org.apache.commons.math.complex.Complex complex60 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex61 = complex60.cosh();
        org.apache.commons.math.complex.Complex complex62 = complex55.divide(complex60);
        org.apache.commons.math.complex.Complex complex63 = complex51.divide(complex60);
        org.apache.commons.math.complex.Complex complex64 = complex51.cos();
        org.apache.commons.math.complex.Complex complex65 = complex33.divide(complex51);
        org.apache.commons.math.complex.Complex complex66 = complex27.subtract(complex51);
        boolean boolean67 = complex66.isNaN();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + Double.POSITIVE_INFINITY + "'", double10 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + Double.POSITIVE_INFINITY + "'", double18 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + Double.POSITIVE_INFINITY + "'", double22 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + Double.POSITIVE_INFINITY + "'", double39 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + Double.POSITIVE_INFINITY + "'", double47 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + Double.POSITIVE_INFINITY + "'", double54 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
    }

    @Test
    public void test06388() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06388");
        double[] doubleArray2 = new double[] { (byte) 1, 100 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) (short) 100);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver6 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction3);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction7 = laguerreSolver6.getPolynomialFunction();
        double[] doubleArray10 = new double[] { (byte) -1, '#' };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction11 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray10);
        org.apache.commons.math.complex.Complex[] complexArray13 = laguerreSolver6.solveAll(doubleArray10, 1.0d);
        double double14 = laguerreSolver6.getRelativeAccuracy();
        laguerreSolver6.setFunctionValueAccuracy((double) 1.0f);
        int int17 = laguerreSolver6.getIterationCount();
        double[] doubleArray23 = new double[] { 0L, '#', 100.0f, 0L, (-1.0d) };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction24 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray23);
        double double26 = polynomialFunction24.value((double) 0);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver27 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction24);
        double[] doubleArray30 = new double[] { (byte) 1, 100 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction31 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray30);
        double double33 = polynomialFunction31.value((double) (short) 100);
        double[] doubleArray34 = polynomialFunction31.getCoefficients();
        org.apache.commons.math.complex.Complex[] complexArray36 = laguerreSolver27.solveAll(doubleArray34, (double) (short) 10);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction37 = laguerreSolver27.getPolynomialFunction();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver38 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction37);
        double[] doubleArray44 = new double[] { 0L, '#', 100.0f, 0L, (-1.0d) };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction45 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray44);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver46 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction45);
        double double49 = laguerreSolver46.solve(1.0d, 10101.0d);
        laguerreSolver46.setFunctionValueAccuracy((-0.999999999999965d));
        double[] doubleArray54 = new double[] { (byte) -1, '#' };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction55 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray54);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction56 = polynomialFunction55.polynomialDerivative();
        double[] doubleArray57 = polynomialFunction55.getCoefficients();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction58 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray57);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction59 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray57);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction60 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray57);
        org.apache.commons.math.complex.Complex[] complexArray62 = laguerreSolver46.solveAll(doubleArray57, (-0.3400000100000003d));
        double[] doubleArray69 = new double[] { 100.0f, (-0.01d), (byte) 0, (byte) 0, 3, 1.0f };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction70 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray69);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction71 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray69);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction72 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray69);
        org.apache.commons.math.complex.Complex[] complexArray74 = laguerreSolver46.solveAll(doubleArray69, 0.0d);
        org.apache.commons.math.complex.Complex[] complexArray76 = laguerreSolver38.solveAll(doubleArray69, (-0.009999997913837433d));
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction77 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray69);
        org.apache.commons.math.complex.Complex[] complexArray79 = laguerreSolver6.solveAll(doubleArray69, (-0.3400000100000003d));
        laguerreSolver6.setMaximalIterationCount(0);
        double double82 = laguerreSolver6.getAbsoluteAccuracy();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 10001.0d + "'", double5 == 10001.0d);
        org.junit.Assert.assertNotNull(polynomialFunction7);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[-1.0, 35.0]");
        org.junit.Assert.assertNotNull(complexArray13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 1.0E-14d + "'", double14 == 1.0E-14d);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 3 + "'", int17 == 3);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[0.0, 35.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 0.0d + "'", double26 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 10001.0d + "'", double33 == 10001.0d);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(complexArray36);
        org.junit.Assert.assertNotNull(polynomialFunction37);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[0.0, 35.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 10.170609052699179d + "'", double49 == 10.170609052699179d);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[-1.0, 35.0]");
        org.junit.Assert.assertNotNull(polynomialFunction56);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[-1.0, 35.0]");
        org.junit.Assert.assertNotNull(complexArray62);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[100.0, -0.01, 0.0, 0.0, 3.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray74);
        org.junit.Assert.assertNotNull(complexArray76);
        org.junit.Assert.assertNotNull(complexArray79);
        org.junit.Assert.assertTrue("'" + double82 + "' != '" + 1.0E-6d + "'", double82 == 1.0E-6d);
    }

    @Test
    public void test06389() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06389");
        double[] doubleArray2 = new double[] { (byte) 1, 100 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction4 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction5 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double7 = polynomialFunction5.value((-8.7584986E7d));
        double double9 = polynomialFunction5.value((double) 'a');
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + (-8.758498599E9d) + "'", double7 == (-8.758498599E9d));
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 9701.0d + "'", double9 == 9701.0d);
    }

    @Test
    public void test06390() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06390");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex1 = complex0.cosh();
        double double2 = complex0.abs();
        org.apache.commons.math.complex.Complex complex3 = complex0.conjugate();
        org.apache.commons.math.complex.Complex complex4 = complex3.conjugate();
        org.apache.commons.math.complex.Complex complex5 = complex3.tanh();
        org.apache.commons.math.complex.Complex complex6 = complex5.tan();
        org.apache.commons.math.complex.Complex complex7 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex8 = complex7.cosh();
        double double9 = complex7.abs();
        org.apache.commons.math.complex.Complex complex10 = complex7.conjugate();
        org.apache.commons.math.complex.Complex complex11 = complex10.conjugate();
        org.apache.commons.math.complex.Complex complex12 = complex6.subtract(complex10);
        org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex15 = complex14.sqrt();
        org.apache.commons.math.complex.Complex complex16 = complex15.sin();
        org.apache.commons.math.complex.Complex complex17 = complex13.pow(complex15);
        org.apache.commons.math.complex.Complex complex18 = complex17.asin();
        org.apache.commons.math.complex.Complex complex19 = complex17.tan();
        org.apache.commons.math.complex.Complex complex20 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex21 = complex20.cosh();
        double double22 = complex20.abs();
        org.apache.commons.math.complex.Complex complex23 = complex20.conjugate();
        org.apache.commons.math.complex.Complex complex24 = complex23.conjugate();
        boolean boolean25 = complex23.isInfinite();
        org.apache.commons.math.complex.Complex complex26 = complex23.asin();
        boolean boolean27 = complex23.isNaN();
        org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex29 = complex28.cosh();
        org.apache.commons.math.complex.Complex complex30 = complex23.divide(complex28);
        org.apache.commons.math.complex.Complex complex31 = complex19.pow(complex28);
        org.apache.commons.math.complex.Complex complex32 = complex12.divide(complex19);
        org.apache.commons.math.complex.Complex complex33 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex34 = complex33.cosh();
        double double35 = complex33.abs();
        org.apache.commons.math.complex.Complex complex36 = complex33.conjugate();
        org.apache.commons.math.complex.Complex complex37 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex38 = complex37.sqrt();
        boolean boolean39 = complex37.isNaN();
        org.apache.commons.math.complex.Complex complex40 = complex37.sin();
        org.apache.commons.math.complex.Complex complex41 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex42 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex43 = complex42.sqrt();
        org.apache.commons.math.complex.Complex complex44 = complex43.sin();
        org.apache.commons.math.complex.Complex complex45 = complex41.pow(complex43);
        org.apache.commons.math.complex.Complex complex46 = complex45.asin();
        org.apache.commons.math.complex.Complex complex47 = complex46.atan();
        boolean boolean48 = complex47.isInfinite();
        org.apache.commons.math.complex.Complex complex49 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex50 = complex47.subtract(complex49);
        org.apache.commons.math.complex.Complex complex51 = complex50.sin();
        org.apache.commons.math.complex.Complex complex52 = complex37.divide(complex51);
        org.apache.commons.math.complex.Complex complex53 = complex33.subtract(complex51);
        double double54 = complex53.abs();
        org.apache.commons.math.complex.Complex complex55 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex56 = complex55.cosh();
        double double57 = complex55.abs();
        org.apache.commons.math.complex.Complex complex58 = complex55.conjugate();
        org.apache.commons.math.complex.Complex complex59 = complex58.conjugate();
        boolean boolean60 = complex58.isInfinite();
        org.apache.commons.math.complex.Complex complex61 = complex58.cos();
        org.apache.commons.math.complex.Complex complex62 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex63 = complex62.cosh();
        double double64 = complex62.abs();
        org.apache.commons.math.complex.Complex complex65 = complex62.conjugate();
        org.apache.commons.math.complex.Complex complex66 = complex65.conjugate();
        boolean boolean67 = complex65.isInfinite();
        org.apache.commons.math.complex.Complex complex68 = complex65.asin();
        boolean boolean69 = complex65.isNaN();
        org.apache.commons.math.complex.Complex complex70 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex71 = complex70.cosh();
        org.apache.commons.math.complex.Complex complex72 = complex65.divide(complex70);
        org.apache.commons.math.complex.Complex complex73 = complex61.divide(complex70);
        org.apache.commons.math.complex.Complex complex74 = complex70.sinh();
        org.apache.commons.math.complex.Complex complex75 = complex74.conjugate();
        org.apache.commons.math.complex.Complex complex76 = complex74.acos();
        org.apache.commons.math.complex.Complex complex77 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex78 = complex77.cosh();
        org.apache.commons.math.complex.Complex complex79 = complex78.acos();
        org.apache.commons.math.complex.Complex complex80 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex81 = complex80.cosh();
        org.apache.commons.math.complex.Complex complex82 = complex80.log();
        org.apache.commons.math.complex.Complex complex83 = complex80.sin();
        org.apache.commons.math.complex.Complex complex84 = complex83.tanh();
        org.apache.commons.math.complex.Complex complex85 = complex78.add(complex84);
        org.apache.commons.math.complex.Complex complex86 = complex76.pow(complex84);
        org.apache.commons.math.complex.Complex complex87 = complex53.multiply(complex84);
        org.apache.commons.math.complex.Complex complex88 = complex12.add(complex53);
        org.apache.commons.math.complex.Complex complex89 = complex53.tan();
        org.apache.commons.math.complex.Complex complex90 = complex89.acos();
        double double91 = complex90.abs();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + Double.POSITIVE_INFINITY + "'", double2 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + Double.POSITIVE_INFINITY + "'", double9 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + Double.POSITIVE_INFINITY + "'", double22 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + Double.POSITIVE_INFINITY + "'", double35 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertTrue(Double.isNaN(double54));
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + Double.POSITIVE_INFINITY + "'", double57 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + Double.POSITIVE_INFINITY + "'", double64 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertNotNull(complex75);
        org.junit.Assert.assertNotNull(complex76);
        org.junit.Assert.assertNotNull(complex77);
        org.junit.Assert.assertNotNull(complex78);
        org.junit.Assert.assertNotNull(complex79);
        org.junit.Assert.assertNotNull(complex80);
        org.junit.Assert.assertNotNull(complex81);
        org.junit.Assert.assertNotNull(complex82);
        org.junit.Assert.assertNotNull(complex83);
        org.junit.Assert.assertNotNull(complex84);
        org.junit.Assert.assertNotNull(complex85);
        org.junit.Assert.assertNotNull(complex86);
        org.junit.Assert.assertNotNull(complex87);
        org.junit.Assert.assertNotNull(complex88);
        org.junit.Assert.assertNotNull(complex89);
        org.junit.Assert.assertNotNull(complex90);
        org.junit.Assert.assertTrue(Double.isNaN(double91));
    }

    @Test
    public void test06391() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06391");
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException1 = new org.apache.commons.math.FunctionEvaluationException(8.253289949622938E81d);
    }

    @Test
    public void test06392() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06392");
        double[] doubleArray6 = new double[] { (byte) 1, 100 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction7 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray6);
        double double9 = polynomialFunction7.value((double) (short) 100);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver10 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction7);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction11 = laguerreSolver10.getPolynomialFunction();
        laguerreSolver10.resetRelativeAccuracy();
        laguerreSolver10.resetMaximalIterationCount();
        laguerreSolver10.setMaximalIterationCount((int) '#');
        laguerreSolver10.resetMaximalIterationCount();
        laguerreSolver10.resetFunctionValueAccuracy();
        double double18 = laguerreSolver10.getAbsoluteAccuracy();
        double[] doubleArray24 = new double[] { 0L, '#', 100.0f, 0L, (-1.0d) };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction25 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray24);
        double double27 = polynomialFunction25.value((double) 0);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver28 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction25);
        double[] doubleArray31 = new double[] { (byte) 1, 100 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction32 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray31);
        double double34 = polynomialFunction32.value((double) (short) 100);
        double[] doubleArray35 = polynomialFunction32.getCoefficients();
        org.apache.commons.math.complex.Complex[] complexArray37 = laguerreSolver28.solveAll(doubleArray35, (double) (short) 10);
        org.apache.commons.math.complex.Complex[] complexArray39 = laguerreSolver10.solveAll(doubleArray35, 3861431.0d);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException40 = new org.apache.commons.math.FunctionEvaluationException((-9.8201787192786d), "", (java.lang.Object[]) complexArray39);
        org.apache.commons.math.ConvergenceException convergenceException41 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.FunctionEvaluationException: org.apache.commons.math.FunctionEvaluationException: org.apache.commons.math.FunctionEvaluationException: ", (java.lang.Object[]) complexArray39);
        java.lang.Object[] objArray52 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException53 = new org.apache.commons.math.ConvergenceException("", objArray52);
        java.lang.Object[] objArray55 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException56 = new org.apache.commons.math.ConvergenceException("", objArray55);
        org.apache.commons.math.ConvergenceException convergenceException57 = new org.apache.commons.math.ConvergenceException("", objArray52, (java.lang.Throwable) convergenceException56);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException58 = new org.apache.commons.math.MaxIterationsExceededException((int) (short) 0, "org.apache.commons.math.FunctionEvaluationException: ", objArray52);
        java.lang.Object[] objArray65 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException66 = new org.apache.commons.math.ConvergenceException("", objArray65);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException67 = new org.apache.commons.math.FunctionEvaluationException((double) (short) 10, "hi!", objArray65);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException68 = new org.apache.commons.math.MaxIterationsExceededException((int) (byte) 0, "org.apache.commons.math.ConvergenceException: hi!", objArray65);
        java.lang.Object[] objArray75 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException76 = new org.apache.commons.math.ConvergenceException("", objArray75);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException77 = new org.apache.commons.math.FunctionEvaluationException((double) (short) 10, "hi!", objArray75);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException78 = new org.apache.commons.math.MaxIterationsExceededException((int) (byte) 0, "org.apache.commons.math.ConvergenceException: hi!", objArray75);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException79 = new org.apache.commons.math.FunctionEvaluationException(0.0d, (java.lang.Throwable) maxIterationsExceededException78);
        org.apache.commons.math.ConvergenceException convergenceException80 = new org.apache.commons.math.ConvergenceException("", objArray65, (java.lang.Throwable) functionEvaluationException79);
        org.apache.commons.math.ConvergenceException convergenceException81 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: Convergence failed", objArray52, (java.lang.Throwable) convergenceException80);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException82 = new org.apache.commons.math.FunctionEvaluationException(100.0d, "org.apache.commons.math.MaxIterationsExceededException: org.apache.commons.math.FunctionEvaluationException: ", (java.lang.Throwable) convergenceException81);
        org.apache.commons.math.ConvergenceException convergenceException83 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.MaxIterationsExceededException: hi!", (java.lang.Throwable) convergenceException81);
        java.lang.Object[] objArray84 = convergenceException81.getArguments();
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException85 = new org.apache.commons.math.FunctionEvaluationException((double) (short) 1, "org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: ", (java.lang.Throwable) convergenceException81);
        org.apache.commons.math.ConvergenceException convergenceException86 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.MaxIterationsExceededException: org.apache.commons.math.FunctionEvaluationException: org.apache.commons.math.FunctionEvaluationException: ", (java.lang.Object[]) complexArray39, (java.lang.Throwable) functionEvaluationException85);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 10001.0d + "'", double9 == 10001.0d);
        org.junit.Assert.assertNotNull(polynomialFunction11);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 1.0E-6d + "'", double18 == 1.0E-6d);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[0.0, 35.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.0d + "'", double27 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 10001.0d + "'", double34 == 10001.0d);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(complexArray37);
        org.junit.Assert.assertNotNull(complexArray39);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[]");
        org.junit.Assert.assertNotNull(objArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray55), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray55), "[]");
        org.junit.Assert.assertNotNull(objArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray65), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray65), "[]");
        org.junit.Assert.assertNotNull(objArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray75), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray75), "[]");
        org.junit.Assert.assertNotNull(objArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray84), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray84), "[]");
    }

    @Test
    public void test06393() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06393");
        double[] doubleArray2 = new double[] { (byte) 1, 100 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) (short) 100);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver6 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction3);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction7 = laguerreSolver6.getPolynomialFunction();
        double double8 = laguerreSolver6.getAbsoluteAccuracy();
        laguerreSolver6.resetAbsoluteAccuracy();
        double double10 = laguerreSolver6.getAbsoluteAccuracy();
        laguerreSolver6.setMaximalIterationCount(12);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 10001.0d + "'", double5 == 10001.0d);
        org.junit.Assert.assertNotNull(polynomialFunction7);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 1.0E-6d + "'", double8 == 1.0E-6d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0E-6d + "'", double10 == 1.0E-6d);
    }

    @Test
    public void test06394() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06394");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex1 = complex0.cosh();
        double double2 = complex0.abs();
        org.apache.commons.math.complex.Complex complex3 = complex0.conjugate();
        org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex5 = complex4.cosh();
        double double6 = complex4.abs();
        org.apache.commons.math.complex.Complex complex7 = complex4.conjugate();
        org.apache.commons.math.complex.Complex complex8 = complex7.conjugate();
        org.apache.commons.math.complex.Complex complex9 = complex7.tanh();
        org.apache.commons.math.complex.Complex complex10 = complex7.atan();
        org.apache.commons.math.complex.Complex complex11 = complex0.subtract(complex7);
        org.apache.commons.math.complex.Complex complex12 = complex0.cos();
        org.apache.commons.math.complex.Complex complex13 = complex12.sin();
        org.apache.commons.math.complex.Complex complex14 = complex13.sqrt1z();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + Double.POSITIVE_INFINITY + "'", double2 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + Double.POSITIVE_INFINITY + "'", double6 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
    }

    @Test
    public void test06395() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06395");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex1 = complex0.cosh();
        double double2 = complex0.abs();
        org.apache.commons.math.complex.Complex complex3 = complex0.conjugate();
        org.apache.commons.math.complex.Complex complex4 = complex3.conjugate();
        boolean boolean5 = complex3.isInfinite();
        org.apache.commons.math.complex.Complex complex6 = complex3.asin();
        boolean boolean7 = complex3.isNaN();
        org.apache.commons.math.complex.Complex complex8 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex9 = complex8.cosh();
        org.apache.commons.math.complex.Complex complex10 = complex3.divide(complex8);
        boolean boolean11 = complex3.isNaN();
        double double12 = complex3.getReal();
        org.apache.commons.math.complex.Complex complex13 = complex3.acos();
        org.apache.commons.math.complex.Complex complex14 = complex3.exp();
        org.apache.commons.math.complex.Complex complex15 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex16 = complex15.cosh();
        double double17 = complex15.abs();
        org.apache.commons.math.complex.Complex complex18 = complex15.conjugate();
        org.apache.commons.math.complex.Complex complex19 = complex18.conjugate();
        boolean boolean20 = complex18.isInfinite();
        org.apache.commons.math.complex.Complex complex21 = complex18.cos();
        org.apache.commons.math.complex.Complex complex22 = complex18.conjugate();
        org.apache.commons.math.complex.Complex complex23 = complex18.sin();
        boolean boolean24 = complex18.isNaN();
        org.apache.commons.math.complex.Complex complex25 = complex18.sqrt();
        org.apache.commons.math.complex.Complex complex26 = complex25.conjugate();
        org.apache.commons.math.complex.Complex complex27 = complex14.add(complex26);
        org.apache.commons.math.complex.Complex complex28 = complex26.tanh();
        org.apache.commons.math.complex.Complex complex29 = complex28.log();
        org.apache.commons.math.complex.Complex complex30 = complex29.acos();
        org.apache.commons.math.complex.Complex complex33 = new org.apache.commons.math.complex.Complex(231.0d, 2.799833927635354E75d);
        org.apache.commons.math.complex.Complex complex34 = complex33.asin();
        org.apache.commons.math.complex.Complex complex35 = complex29.subtract(complex33);
        org.apache.commons.math.complex.Complex complex36 = complex33.atan();
        org.apache.commons.math.complex.Complex complex37 = complex36.sin();
        org.apache.commons.math.complex.Complex complex38 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.complex.Complex complex39 = complex37.subtract(complex38);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + Double.POSITIVE_INFINITY + "'", double2 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + Double.POSITIVE_INFINITY + "'", double12 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + Double.POSITIVE_INFINITY + "'", double17 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
    }

    @Test
    public void test06396() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06396");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex1 = complex0.cosh();
        double double2 = complex0.abs();
        org.apache.commons.math.complex.Complex complex3 = complex0.conjugate();
        org.apache.commons.math.complex.Complex complex4 = complex3.conjugate();
        boolean boolean5 = complex3.isInfinite();
        org.apache.commons.math.complex.Complex complex6 = complex3.asin();
        org.apache.commons.math.complex.Complex complex7 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex8 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex9 = complex8.sqrt();
        org.apache.commons.math.complex.Complex complex10 = complex9.sin();
        org.apache.commons.math.complex.Complex complex11 = complex7.pow(complex9);
        org.apache.commons.math.complex.Complex complex12 = complex11.asin();
        org.apache.commons.math.complex.Complex complex13 = complex11.tan();
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex15 = complex14.cosh();
        double double16 = complex14.abs();
        org.apache.commons.math.complex.Complex complex17 = complex14.conjugate();
        org.apache.commons.math.complex.Complex complex18 = complex17.conjugate();
        boolean boolean19 = complex17.isInfinite();
        org.apache.commons.math.complex.Complex complex20 = complex17.asin();
        boolean boolean21 = complex17.isNaN();
        org.apache.commons.math.complex.Complex complex22 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex23 = complex22.cosh();
        org.apache.commons.math.complex.Complex complex24 = complex17.divide(complex22);
        org.apache.commons.math.complex.Complex complex25 = complex13.pow(complex22);
        org.apache.commons.math.complex.Complex complex26 = complex6.subtract(complex13);
        org.apache.commons.math.complex.Complex complex27 = complex13.cos();
        org.apache.commons.math.complex.Complex complex28 = complex13.cosh();
        org.apache.commons.math.complex.Complex complex29 = null;
        org.apache.commons.math.complex.Complex complex30 = complex13.divide(complex29);
        org.apache.commons.math.complex.Complex complex31 = complex13.sin();
        org.apache.commons.math.complex.Complex complex32 = complex31.sin();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + Double.POSITIVE_INFINITY + "'", double2 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + Double.POSITIVE_INFINITY + "'", double16 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
    }

    @Test
    public void test06397() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06397");
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException3 = new org.apache.commons.math.FunctionEvaluationException(Double.NaN, "");
        java.lang.Object[] objArray4 = functionEvaluationException3.getArguments();
        org.apache.commons.math.ConvergenceException convergenceException5 = new org.apache.commons.math.ConvergenceException("hi!", objArray4);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException7 = new org.apache.commons.math.FunctionEvaluationException((double) 1);
        convergenceException5.addSuppressed((java.lang.Throwable) functionEvaluationException7);
        java.lang.Throwable throwable9 = null;
        // The following exception was thrown during execution in test generation
        try {
            convergenceException5.addSuppressed(throwable9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot suppress a null exception.");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(objArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray4), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray4), "[]");
    }

    @Test
    public void test06398() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06398");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((-196499.0d), 4.3755902756019057E30d);
    }

    @Test
    public void test06399() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06399");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex1 = complex0.cosh();
        org.apache.commons.math.complex.Complex complex2 = complex0.log();
        org.apache.commons.math.complex.Complex complex3 = complex0.sin();
        org.apache.commons.math.complex.Complex complex4 = complex0.log();
        org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex6 = complex5.sqrt();
        org.apache.commons.math.complex.Complex complex7 = complex0.divide(complex6);
        org.apache.commons.math.complex.Complex complex8 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex9 = complex8.cosh();
        double double10 = complex8.abs();
        org.apache.commons.math.complex.Complex complex11 = complex8.conjugate();
        org.apache.commons.math.complex.Complex complex12 = complex11.conjugate();
        org.apache.commons.math.complex.Complex complex13 = complex7.subtract(complex12);
        org.apache.commons.math.complex.Complex complex14 = complex7.exp();
        org.apache.commons.math.complex.Complex complex15 = complex7.tan();
        org.apache.commons.math.complex.Complex complex16 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex17 = complex16.cosh();
        double double18 = complex16.abs();
        org.apache.commons.math.complex.Complex complex19 = complex16.conjugate();
        org.apache.commons.math.complex.Complex complex20 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex21 = complex20.cosh();
        double double22 = complex20.abs();
        org.apache.commons.math.complex.Complex complex23 = complex20.conjugate();
        org.apache.commons.math.complex.Complex complex24 = complex23.conjugate();
        org.apache.commons.math.complex.Complex complex25 = complex23.tanh();
        org.apache.commons.math.complex.Complex complex26 = complex23.atan();
        org.apache.commons.math.complex.Complex complex27 = complex16.subtract(complex23);
        org.apache.commons.math.complex.Complex complex28 = complex7.subtract(complex27);
        org.apache.commons.math.complex.Complex complex29 = complex28.conjugate();
        org.apache.commons.math.complex.Complex complex30 = complex29.negate();
        org.apache.commons.math.complex.Complex complex31 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex32 = complex31.sqrt();
        boolean boolean33 = complex31.isNaN();
        org.apache.commons.math.complex.Complex complex34 = complex31.sin();
        org.apache.commons.math.complex.Complex complex35 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex36 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex37 = complex36.sqrt();
        org.apache.commons.math.complex.Complex complex38 = complex37.sin();
        org.apache.commons.math.complex.Complex complex39 = complex35.pow(complex37);
        org.apache.commons.math.complex.Complex complex40 = complex39.asin();
        org.apache.commons.math.complex.Complex complex41 = complex40.atan();
        boolean boolean42 = complex41.isInfinite();
        org.apache.commons.math.complex.Complex complex43 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex44 = complex41.subtract(complex43);
        org.apache.commons.math.complex.Complex complex45 = complex44.sin();
        org.apache.commons.math.complex.Complex complex46 = complex31.divide(complex45);
        org.apache.commons.math.complex.Complex complex47 = complex31.tan();
        org.apache.commons.math.complex.Complex complex48 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex49 = complex48.sqrt();
        boolean boolean50 = complex48.isNaN();
        org.apache.commons.math.complex.Complex complex51 = complex48.sin();
        org.apache.commons.math.complex.Complex complex52 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex53 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex54 = complex53.sqrt();
        org.apache.commons.math.complex.Complex complex55 = complex54.sin();
        org.apache.commons.math.complex.Complex complex56 = complex52.pow(complex54);
        org.apache.commons.math.complex.Complex complex57 = complex56.asin();
        org.apache.commons.math.complex.Complex complex58 = complex57.atan();
        boolean boolean59 = complex58.isInfinite();
        org.apache.commons.math.complex.Complex complex60 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex61 = complex58.subtract(complex60);
        org.apache.commons.math.complex.Complex complex62 = complex61.sin();
        org.apache.commons.math.complex.Complex complex63 = complex48.divide(complex62);
        org.apache.commons.math.complex.Complex complex64 = complex48.tan();
        org.apache.commons.math.complex.Complex complex65 = complex64.log();
        org.apache.commons.math.complex.Complex complex66 = complex31.pow(complex64);
        boolean boolean67 = complex30.equals((java.lang.Object) complex66);
        org.apache.commons.math.complex.Complex complex68 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex69 = complex68.cosh();
        org.apache.commons.math.complex.Complex complex70 = complex68.log();
        org.apache.commons.math.complex.Complex complex71 = complex68.sin();
        org.apache.commons.math.complex.Complex complex72 = complex68.log();
        org.apache.commons.math.complex.Complex complex73 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex74 = complex73.sqrt();
        org.apache.commons.math.complex.Complex complex75 = complex68.divide(complex74);
        org.apache.commons.math.complex.Complex complex76 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex77 = complex76.cosh();
        double double78 = complex76.abs();
        org.apache.commons.math.complex.Complex complex79 = complex76.conjugate();
        org.apache.commons.math.complex.Complex complex80 = complex79.conjugate();
        org.apache.commons.math.complex.Complex complex81 = complex75.subtract(complex80);
        org.apache.commons.math.complex.Complex complex82 = complex75.exp();
        org.apache.commons.math.complex.Complex complex83 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex84 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex85 = complex84.sqrt();
        org.apache.commons.math.complex.Complex complex86 = complex85.sin();
        org.apache.commons.math.complex.Complex complex87 = complex83.pow(complex85);
        org.apache.commons.math.complex.Complex complex88 = complex87.asin();
        org.apache.commons.math.complex.Complex complex89 = complex88.atan();
        org.apache.commons.math.complex.Complex complex90 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex91 = complex90.cosh();
        boolean boolean92 = complex89.equals((java.lang.Object) complex90);
        org.apache.commons.math.complex.Complex complex93 = complex75.divide(complex90);
        org.apache.commons.math.complex.Complex complex94 = complex93.sinh();
        org.apache.commons.math.complex.Complex complex95 = complex30.subtract(complex94);
        org.apache.commons.math.complex.Complex complex96 = complex94.acos();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + Double.POSITIVE_INFINITY + "'", double10 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + Double.POSITIVE_INFINITY + "'", double18 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + Double.POSITIVE_INFINITY + "'", double22 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertNotNull(complex75);
        org.junit.Assert.assertNotNull(complex76);
        org.junit.Assert.assertNotNull(complex77);
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + Double.POSITIVE_INFINITY + "'", double78 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex79);
        org.junit.Assert.assertNotNull(complex80);
        org.junit.Assert.assertNotNull(complex81);
        org.junit.Assert.assertNotNull(complex82);
        org.junit.Assert.assertNotNull(complex83);
        org.junit.Assert.assertNotNull(complex84);
        org.junit.Assert.assertNotNull(complex85);
        org.junit.Assert.assertNotNull(complex86);
        org.junit.Assert.assertNotNull(complex87);
        org.junit.Assert.assertNotNull(complex88);
        org.junit.Assert.assertNotNull(complex89);
        org.junit.Assert.assertNotNull(complex90);
        org.junit.Assert.assertNotNull(complex91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertNotNull(complex93);
        org.junit.Assert.assertNotNull(complex94);
        org.junit.Assert.assertNotNull(complex95);
        org.junit.Assert.assertNotNull(complex96);
    }

    @Test
    public void test06400() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06400");
        double[] doubleArray2 = new double[] { (byte) 1, 100 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) (short) 100);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver6 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction3);
        double double7 = laguerreSolver6.getAbsoluteAccuracy();
        laguerreSolver6.resetAbsoluteAccuracy();
        laguerreSolver6.resetFunctionValueAccuracy();
        double double10 = laguerreSolver6.getRelativeAccuracy();
        double double11 = laguerreSolver6.getRelativeAccuracy();
        double[] doubleArray17 = new double[] { 0L, '#', 100.0f, 0L, (-1.0d) };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction18 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray17);
        int int19 = polynomialFunction18.degree();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction20 = polynomialFunction18.polynomialDerivative();
        double[] doubleArray21 = polynomialFunction18.getCoefficients();
        org.apache.commons.math.complex.Complex[] complexArray23 = laguerreSolver6.solveAll(doubleArray21, (double) 100.0f);
        double double24 = laguerreSolver6.getResult();
        // The following exception was thrown during execution in test generation
        try {
            double double28 = laguerreSolver6.solve((-3.06547450966E11d), 0.0d, (-4.84971561640899E12d));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid interval, initial value parameters:  lower=-3.06547450966E11 initial=-4.84971561640899E12 upper=0.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 10001.0d + "'", double5 == 10001.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 1.0E-6d + "'", double7 == 1.0E-6d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0E-14d + "'", double10 == 1.0E-14d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 1.0E-14d + "'", double11 == 1.0E-14d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[0.0, 35.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 4 + "'", int19 == 4);
        org.junit.Assert.assertNotNull(polynomialFunction20);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[0.0, 35.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(complexArray23);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.0d + "'", double24 == 0.0d);
    }

    @Test
    public void test06401() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06401");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex(134.0d, 653171.86d);
    }

    @Test
    public void test06402() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06402");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex1 = complex0.cosh();
        org.apache.commons.math.complex.Complex complex2 = complex0.log();
        org.apache.commons.math.complex.Complex complex3 = complex0.sin();
        org.apache.commons.math.complex.Complex complex4 = complex0.log();
        org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex6 = complex5.sqrt();
        org.apache.commons.math.complex.Complex complex7 = complex0.divide(complex6);
        org.apache.commons.math.complex.Complex complex8 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex9 = complex8.cosh();
        org.apache.commons.math.complex.Complex complex10 = complex9.acos();
        double double11 = complex9.getReal();
        org.apache.commons.math.complex.Complex complex12 = complex9.sqrt();
        org.apache.commons.math.complex.Complex complex13 = complex0.pow(complex9);
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex15 = complex14.cosh();
        org.apache.commons.math.complex.Complex complex16 = complex14.log();
        org.apache.commons.math.complex.Complex complex17 = complex16.cos();
        org.apache.commons.math.complex.Complex complex18 = complex9.multiply(complex16);
        org.apache.commons.math.complex.Complex complex19 = complex16.tanh();
        org.apache.commons.math.complex.Complex complex20 = complex19.asin();
        double[] doubleArray26 = new double[] { 0L, '#', 100.0f, 0L, (-1.0d) };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction27 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray26);
        int int28 = polynomialFunction27.degree();
        boolean boolean29 = complex19.equals((java.lang.Object) polynomialFunction27);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction30 = polynomialFunction27.polynomialDerivative();
        double[] doubleArray31 = polynomialFunction30.getCoefficients();
        double double33 = polynomialFunction30.value((-9999899.0d));
        double double35 = polynomialFunction30.value((-12088.0d));
        double double37 = polynomialFunction30.value(10.0d);
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[0.0, 35.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 4 + "'", int28 == 4);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(polynomialFunction30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[35.0, 200.0, 0.0, -4.0]");
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 3.999878801222116E21d + "'", double33 == 3.999878801222116E21d);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 7.065179444323E12d + "'", double35 == 7.065179444323E12d);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + (-1965.0d) + "'", double37 == (-1965.0d));
    }

    @Test
    public void test06403() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06403");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex2 = complex1.sqrt();
        org.apache.commons.math.complex.Complex complex3 = complex2.sin();
        org.apache.commons.math.complex.Complex complex4 = complex0.pow(complex2);
        org.apache.commons.math.complex.Complex complex5 = complex4.asin();
        org.apache.commons.math.complex.Complex complex6 = complex5.atan();
        boolean boolean7 = complex6.isInfinite();
        org.apache.commons.math.complex.Complex complex8 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex9 = complex6.subtract(complex8);
        org.apache.commons.math.complex.Complex complex10 = complex8.tan();
        org.apache.commons.math.complex.Complex complex11 = complex8.sinh();
        org.apache.commons.math.complex.Complex complex12 = complex8.negate();
        org.apache.commons.math.complex.Complex complex13 = complex8.asin();
        org.apache.commons.math.complex.Complex complex14 = complex8.sqrt();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
    }

    @Test
    public void test06404() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06404");
        java.lang.Object[] objArray13 = new java.lang.Object[] { 0.0f, (short) 1 };
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException14 = new org.apache.commons.math.MaxIterationsExceededException(100, "", objArray13);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException15 = new org.apache.commons.math.MaxIterationsExceededException((int) ' ', "hi!", objArray13);
        java.lang.Object[] objArray18 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException19 = new org.apache.commons.math.ConvergenceException("", objArray18);
        java.lang.Object[] objArray21 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException22 = new org.apache.commons.math.ConvergenceException("", objArray21);
        org.apache.commons.math.ConvergenceException convergenceException23 = new org.apache.commons.math.ConvergenceException("", objArray18, (java.lang.Throwable) convergenceException22);
        org.apache.commons.math.ConvergenceException convergenceException24 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.FunctionEvaluationException: ", objArray13, (java.lang.Throwable) convergenceException22);
        org.apache.commons.math.ConvergenceException convergenceException27 = new org.apache.commons.math.ConvergenceException("");
        java.lang.Object[] objArray28 = convergenceException27.getArguments();
        java.lang.Object[] objArray36 = new java.lang.Object[] { 0.0f, (short) 1 };
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException37 = new org.apache.commons.math.MaxIterationsExceededException(100, "", objArray36);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException38 = new org.apache.commons.math.MaxIterationsExceededException((int) ' ', "hi!", objArray36);
        java.lang.Object[] objArray41 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException42 = new org.apache.commons.math.ConvergenceException("", objArray41);
        java.lang.Object[] objArray44 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException45 = new org.apache.commons.math.ConvergenceException("", objArray44);
        org.apache.commons.math.ConvergenceException convergenceException46 = new org.apache.commons.math.ConvergenceException("", objArray41, (java.lang.Throwable) convergenceException45);
        org.apache.commons.math.ConvergenceException convergenceException47 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.FunctionEvaluationException: ", objArray36, (java.lang.Throwable) convergenceException45);
        org.apache.commons.math.ConvergenceException convergenceException48 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: Convergence failed", objArray28, (java.lang.Throwable) convergenceException47);
        org.apache.commons.math.ConvergenceException convergenceException49 = new org.apache.commons.math.ConvergenceException("hi!", objArray13, (java.lang.Throwable) convergenceException47);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException50 = new org.apache.commons.math.FunctionEvaluationException(Double.NaN, "org.apache.commons.math.ConvergenceException: hi!", (java.lang.Throwable) convergenceException49);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException51 = new org.apache.commons.math.FunctionEvaluationException(1.2559781975128798E-12d, "org.apache.commons.math.FunctionEvaluationException: org.apache.commons.math.FunctionEvaluationException: org.apache.commons.math.MaxIterationsExceededException: hi!", (java.lang.Throwable) functionEvaluationException50);
        java.lang.String str52 = functionEvaluationException51.getPattern();
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException53 = new org.apache.commons.math.FunctionEvaluationException(3.5000000000000103E-14d, (java.lang.Throwable) functionEvaluationException51);
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[0.0, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[0.0, 1]");
        org.junit.Assert.assertNotNull(objArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray18), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray18), "[]");
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray21), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray21), "[]");
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[]");
        org.junit.Assert.assertNotNull(objArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray36), "[0.0, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray36), "[0.0, 1]");
        org.junit.Assert.assertNotNull(objArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray41), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray41), "[]");
        org.junit.Assert.assertNotNull(objArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray44), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray44), "[]");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "org.apache.commons.math.FunctionEvaluationException: org.apache.commons.math.FunctionEvaluationException: org.apache.commons.math.MaxIterationsExceededException: hi!" + "'", str52, "org.apache.commons.math.FunctionEvaluationException: org.apache.commons.math.FunctionEvaluationException: org.apache.commons.math.MaxIterationsExceededException: hi!");
    }

    @Test
    public void test06405() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06405");
        java.lang.Object[] objArray10 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException11 = new org.apache.commons.math.ConvergenceException("", objArray10);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException12 = new org.apache.commons.math.FunctionEvaluationException((double) (short) 10, "hi!", objArray10);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException13 = new org.apache.commons.math.FunctionEvaluationException(0.0d, "org.apache.commons.math.FunctionEvaluationException: ", objArray10);
        java.lang.Object[] objArray15 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException16 = new org.apache.commons.math.ConvergenceException("", objArray15);
        java.lang.Object[] objArray21 = new java.lang.Object[] { 0.0f, (short) 1 };
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException22 = new org.apache.commons.math.MaxIterationsExceededException(100, "", objArray21);
        convergenceException16.addSuppressed((java.lang.Throwable) maxIterationsExceededException22);
        org.apache.commons.math.ConvergenceException convergenceException24 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.FunctionEvaluationException: ", objArray10, (java.lang.Throwable) maxIterationsExceededException22);
        org.apache.commons.math.ConvergenceException convergenceException25 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.MaxIterationsExceededException: org.apache.commons.math.FunctionEvaluationException: ", objArray10);
        java.lang.Throwable[] throwableArray26 = convergenceException25.getSuppressed();
        org.apache.commons.math.ConvergenceException convergenceException28 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.MaxIterationsExceededException: hi!");
        java.lang.Throwable[] throwableArray29 = convergenceException28.getSuppressed();
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException30 = new org.apache.commons.math.FunctionEvaluationException(1.0222474227427E13d, "", (java.lang.Object[]) throwableArray26, (java.lang.Throwable) convergenceException28);
        org.apache.commons.math.ConvergenceException convergenceException33 = new org.apache.commons.math.ConvergenceException();
        java.lang.Object[] objArray41 = new java.lang.Object[] { 0.0f, (short) 1 };
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException42 = new org.apache.commons.math.MaxIterationsExceededException(100, "", objArray41);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException43 = new org.apache.commons.math.MaxIterationsExceededException((int) ' ', "hi!", objArray41);
        java.lang.Object[] objArray46 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException47 = new org.apache.commons.math.ConvergenceException("", objArray46);
        java.lang.Object[] objArray49 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException50 = new org.apache.commons.math.ConvergenceException("", objArray49);
        org.apache.commons.math.ConvergenceException convergenceException51 = new org.apache.commons.math.ConvergenceException("", objArray46, (java.lang.Throwable) convergenceException50);
        org.apache.commons.math.ConvergenceException convergenceException52 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.FunctionEvaluationException: ", objArray41, (java.lang.Throwable) convergenceException50);
        java.lang.Object[] objArray53 = convergenceException50.getArguments();
        convergenceException33.addSuppressed((java.lang.Throwable) convergenceException50);
        java.lang.Throwable[] throwableArray55 = convergenceException33.getSuppressed();
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException56 = new org.apache.commons.math.FunctionEvaluationException((double) 1, "org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.MaxIterationsExceededException: ", (java.lang.Object[]) throwableArray55);
        org.apache.commons.math.ConvergenceException convergenceException57 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.MaxIterationsExceededException: org.apache.commons.math.ConvergenceException: Evaluation failed for argument = {0}", (java.lang.Object[]) throwableArray26, (java.lang.Throwable) functionEvaluationException56);
        java.lang.Object[] objArray58 = functionEvaluationException56.getArguments();
        org.apache.commons.math.ConvergenceException convergenceException59 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) functionEvaluationException56);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[]");
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray21), "[0.0, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray21), "[0.0, 1]");
        org.junit.Assert.assertNotNull(throwableArray26);
        org.junit.Assert.assertNotNull(throwableArray29);
        org.junit.Assert.assertNotNull(objArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray41), "[0.0, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray41), "[0.0, 1]");
        org.junit.Assert.assertNotNull(objArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray46), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray46), "[]");
        org.junit.Assert.assertNotNull(objArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray49), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray49), "[]");
        org.junit.Assert.assertNotNull(objArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray53), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray53), "[]");
        org.junit.Assert.assertNotNull(throwableArray55);
        org.junit.Assert.assertNotNull(objArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray58), "[org.apache.commons.math.ConvergenceException: ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray58), "[org.apache.commons.math.ConvergenceException: ]");
    }

    @Test
    public void test06406() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06406");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex1 = complex0.cosh();
        double double2 = complex0.abs();
        org.apache.commons.math.complex.Complex complex3 = complex0.conjugate();
        org.apache.commons.math.complex.Complex complex4 = complex3.conjugate();
        boolean boolean5 = complex3.isInfinite();
        org.apache.commons.math.complex.Complex complex6 = complex3.asin();
        boolean boolean7 = complex3.isNaN();
        org.apache.commons.math.complex.Complex complex8 = complex3.negate();
        org.apache.commons.math.complex.Complex complex9 = complex3.sinh();
        double double10 = complex9.getReal();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + Double.POSITIVE_INFINITY + "'", double2 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
    }

    @Test
    public void test06407() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06407");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex2 = complex1.sqrt();
        org.apache.commons.math.complex.Complex complex3 = complex2.sin();
        org.apache.commons.math.complex.Complex complex4 = complex0.pow(complex2);
        org.apache.commons.math.complex.Complex complex5 = complex4.asin();
        org.apache.commons.math.complex.Complex complex6 = complex5.atan();
        boolean boolean7 = complex6.isInfinite();
        org.apache.commons.math.complex.Complex complex8 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex9 = complex6.subtract(complex8);
        org.apache.commons.math.complex.Complex complex10 = complex9.sqrt();
        org.apache.commons.math.complex.Complex complex11 = complex9.sqrt1z();
        org.apache.commons.math.complex.Complex complex12 = complex9.cos();
        org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex14 = complex13.cosh();
        org.apache.commons.math.complex.Complex complex15 = complex13.log();
        org.apache.commons.math.complex.Complex complex16 = complex13.sin();
        boolean boolean17 = complex13.isNaN();
        org.apache.commons.math.complex.Complex complex18 = complex9.multiply(complex13);
        org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex20 = complex19.cosh();
        org.apache.commons.math.complex.Complex complex21 = complex19.log();
        org.apache.commons.math.complex.Complex complex22 = complex21.cos();
        org.apache.commons.math.complex.Complex complex23 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex24 = complex23.sqrt();
        org.apache.commons.math.complex.Complex complex25 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex26 = complex25.cosh();
        double double27 = complex25.abs();
        org.apache.commons.math.complex.Complex complex28 = complex25.conjugate();
        org.apache.commons.math.complex.Complex complex29 = complex23.divide(complex28);
        org.apache.commons.math.complex.Complex complex30 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex31 = complex30.cosh();
        org.apache.commons.math.complex.Complex complex32 = complex30.log();
        org.apache.commons.math.complex.Complex complex33 = complex30.sin();
        org.apache.commons.math.complex.Complex complex34 = complex30.log();
        org.apache.commons.math.complex.Complex complex35 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex36 = complex35.sqrt();
        org.apache.commons.math.complex.Complex complex37 = complex30.divide(complex36);
        org.apache.commons.math.complex.Complex complex38 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex39 = complex38.cosh();
        double double40 = complex38.abs();
        org.apache.commons.math.complex.Complex complex41 = complex38.conjugate();
        org.apache.commons.math.complex.Complex complex42 = complex41.conjugate();
        org.apache.commons.math.complex.Complex complex43 = complex37.subtract(complex42);
        org.apache.commons.math.complex.Complex complex44 = complex29.multiply(complex37);
        org.apache.commons.math.complex.Complex complex45 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex46 = complex45.cosh();
        org.apache.commons.math.complex.Complex complex47 = complex45.log();
        org.apache.commons.math.complex.Complex complex48 = complex47.cos();
        double double49 = complex48.abs();
        org.apache.commons.math.complex.Complex complex50 = complex48.sqrt();
        org.apache.commons.math.complex.Complex complex51 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex52 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex53 = complex52.sqrt();
        org.apache.commons.math.complex.Complex complex54 = complex53.sin();
        org.apache.commons.math.complex.Complex complex55 = complex51.pow(complex53);
        org.apache.commons.math.complex.Complex complex56 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex57 = complex56.cosh();
        org.apache.commons.math.complex.Complex complex58 = complex56.log();
        org.apache.commons.math.complex.Complex complex59 = complex51.divide(complex58);
        org.apache.commons.math.complex.Complex complex60 = complex50.subtract(complex59);
        org.apache.commons.math.complex.Complex complex61 = complex37.pow(complex50);
        org.apache.commons.math.complex.Complex complex62 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex63 = complex62.cosh();
        org.apache.commons.math.complex.Complex complex64 = complex63.acos();
        org.apache.commons.math.complex.Complex complex65 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex66 = complex65.cosh();
        org.apache.commons.math.complex.Complex complex67 = complex65.log();
        org.apache.commons.math.complex.Complex complex68 = complex65.sin();
        org.apache.commons.math.complex.Complex complex69 = complex68.tanh();
        org.apache.commons.math.complex.Complex complex70 = complex63.add(complex69);
        org.apache.commons.math.complex.Complex complex71 = complex70.exp();
        org.apache.commons.math.complex.Complex complex72 = complex50.divide(complex70);
        org.apache.commons.math.complex.Complex complex73 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex74 = complex73.cosh();
        org.apache.commons.math.complex.Complex complex75 = complex73.log();
        org.apache.commons.math.complex.Complex complex76 = complex73.sin();
        org.apache.commons.math.complex.Complex complex77 = complex73.log();
        org.apache.commons.math.complex.Complex complex78 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex79 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex80 = complex79.sqrt();
        org.apache.commons.math.complex.Complex complex81 = complex80.sin();
        org.apache.commons.math.complex.Complex complex82 = complex78.pow(complex80);
        org.apache.commons.math.complex.Complex complex83 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex84 = complex83.cosh();
        org.apache.commons.math.complex.Complex complex85 = complex83.log();
        org.apache.commons.math.complex.Complex complex86 = complex78.divide(complex85);
        org.apache.commons.math.complex.Complex complex87 = complex73.subtract(complex85);
        org.apache.commons.math.complex.Complex complex88 = complex87.cosh();
        org.apache.commons.math.complex.Complex complex89 = complex70.multiply(complex88);
        org.apache.commons.math.complex.Complex complex90 = complex89.conjugate();
        org.apache.commons.math.complex.Complex complex91 = complex21.multiply(complex89);
        org.apache.commons.math.complex.Complex complex92 = complex18.divide(complex91);
        org.apache.commons.math.complex.Complex complex93 = complex92.sqrt1z();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + Double.POSITIVE_INFINITY + "'", double27 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + Double.POSITIVE_INFINITY + "'", double40 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertTrue(Double.isNaN(double49));
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertNotNull(complex75);
        org.junit.Assert.assertNotNull(complex76);
        org.junit.Assert.assertNotNull(complex77);
        org.junit.Assert.assertNotNull(complex78);
        org.junit.Assert.assertNotNull(complex79);
        org.junit.Assert.assertNotNull(complex80);
        org.junit.Assert.assertNotNull(complex81);
        org.junit.Assert.assertNotNull(complex82);
        org.junit.Assert.assertNotNull(complex83);
        org.junit.Assert.assertNotNull(complex84);
        org.junit.Assert.assertNotNull(complex85);
        org.junit.Assert.assertNotNull(complex86);
        org.junit.Assert.assertNotNull(complex87);
        org.junit.Assert.assertNotNull(complex88);
        org.junit.Assert.assertNotNull(complex89);
        org.junit.Assert.assertNotNull(complex90);
        org.junit.Assert.assertNotNull(complex91);
        org.junit.Assert.assertNotNull(complex92);
        org.junit.Assert.assertNotNull(complex93);
    }

    @Test
    public void test06408() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06408");
        org.apache.commons.math.ConvergenceException convergenceException7 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.MaxIterationsExceededException: org.apache.commons.math.FunctionEvaluationException: ");
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException8 = new org.apache.commons.math.FunctionEvaluationException(Double.POSITIVE_INFINITY, (java.lang.Throwable) convergenceException7);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException9 = new org.apache.commons.math.FunctionEvaluationException(350.0d, "org.apache.commons.math.MaxIterationsExceededException: hi!", (java.lang.Throwable) convergenceException7);
        java.lang.Object[] objArray10 = convergenceException7.getArguments();
        org.apache.commons.math.ConvergenceException convergenceException11 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.FunctionEvaluationException: org.apache.commons.math.FunctionEvaluationException: ", (java.lang.Throwable) convergenceException7);
        java.lang.String str12 = convergenceException7.getPattern();
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException13 = new org.apache.commons.math.FunctionEvaluationException((-9.631547407031818E12d), (java.lang.Throwable) convergenceException7);
        org.apache.commons.math.ConvergenceException convergenceException14 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.FunctionEvaluationException: org.apache.commons.math.MaxIterationsExceededException: org.apache.commons.math.FunctionEvaluationException: ", (java.lang.Throwable) functionEvaluationException13);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "org.apache.commons.math.MaxIterationsExceededException: org.apache.commons.math.FunctionEvaluationException: " + "'", str12, "org.apache.commons.math.MaxIterationsExceededException: org.apache.commons.math.FunctionEvaluationException: ");
    }

    @Test
    public void test06409() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06409");
        double[] doubleArray5 = new double[] { 0L, '#', 100.0f, 0L, (-1.0d) };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray5);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction7 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray5);
        double[] doubleArray8 = polynomialFunction7.getCoefficients();
        int int9 = polynomialFunction7.degree();
        double double11 = polynomialFunction7.value(Double.NEGATIVE_INFINITY);
        double[] doubleArray12 = polynomialFunction7.getCoefficients();
        java.lang.Class<?> wildcardClass13 = polynomialFunction7.getClass();
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[0.0, 35.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.0, 35.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 4 + "'", int9 == 4);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + Double.NEGATIVE_INFINITY + "'", double11 == Double.NEGATIVE_INFINITY);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[0.0, 35.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test06410() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06410");
        double[] doubleArray2 = new double[] { (byte) 1, 100 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) (short) 100);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver6 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction3);
        double double10 = laguerreSolver6.solve((double) (-1L), 349.0d, (double) (short) 10);
        laguerreSolver6.resetMaximalIterationCount();
        double double15 = laguerreSolver6.solve((-0.01d), (double) 1.0f, 0.0d);
        laguerreSolver6.setFunctionValueAccuracy(301.0d);
        double double18 = laguerreSolver6.getAbsoluteAccuracy();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 10001.0d + "'", double5 == 10001.0d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + (-0.01d) + "'", double10 == (-0.01d));
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + (-0.01d) + "'", double15 == (-0.01d));
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 1.0E-6d + "'", double18 == 1.0E-6d);
    }

    @Test
    public void test06411() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06411");
        java.lang.Object[] objArray5 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException6 = new org.apache.commons.math.ConvergenceException("", objArray5);
        java.lang.Object[] objArray8 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException9 = new org.apache.commons.math.ConvergenceException("", objArray8);
        org.apache.commons.math.ConvergenceException convergenceException10 = new org.apache.commons.math.ConvergenceException("", objArray5, (java.lang.Throwable) convergenceException9);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException12 = new org.apache.commons.math.FunctionEvaluationException((double) 100);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException13 = new org.apache.commons.math.FunctionEvaluationException(100.0d, "org.apache.commons.math.ConvergenceException: hi!", objArray5, (java.lang.Throwable) functionEvaluationException12);
        org.apache.commons.math.ConvergenceException convergenceException14 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.FunctionEvaluationException: ", (java.lang.Throwable) functionEvaluationException12);
        java.lang.Object[] objArray15 = functionEvaluationException12.getArguments();
        java.lang.String str16 = functionEvaluationException12.getPattern();
        org.junit.Assert.assertNotNull(objArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray5), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray5), "[]");
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[]");
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[100.0]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Evaluation failed for argument = {0}" + "'", str16, "Evaluation failed for argument = {0}");
    }

    @Test
    public void test06412() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06412");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex1 = complex0.cosh();
        org.apache.commons.math.complex.Complex complex2 = complex0.log();
        org.apache.commons.math.complex.Complex complex3 = complex0.cos();
        org.apache.commons.math.complex.Complex complex4 = complex3.negate();
        org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex6 = complex5.tan();
        double double7 = complex6.getReal();
        org.apache.commons.math.complex.Complex complex8 = complex4.divide(complex6);
        org.apache.commons.math.complex.Complex complex9 = complex8.log();
        org.apache.commons.math.complex.Complex complex10 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex11 = complex10.cosh();
        double double12 = complex10.abs();
        org.apache.commons.math.complex.Complex complex13 = complex10.conjugate();
        org.apache.commons.math.complex.Complex complex14 = complex13.conjugate();
        org.apache.commons.math.complex.Complex complex15 = complex13.tanh();
        org.apache.commons.math.complex.Complex complex16 = complex15.tan();
        org.apache.commons.math.complex.Complex complex17 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex18 = complex17.cosh();
        double double19 = complex17.abs();
        org.apache.commons.math.complex.Complex complex20 = complex17.conjugate();
        org.apache.commons.math.complex.Complex complex21 = complex20.conjugate();
        org.apache.commons.math.complex.Complex complex22 = complex16.subtract(complex20);
        org.apache.commons.math.complex.Complex complex23 = complex20.negate();
        org.apache.commons.math.complex.Complex complex24 = complex20.tanh();
        org.apache.commons.math.complex.Complex complex25 = complex24.conjugate();
        org.apache.commons.math.complex.Complex complex26 = complex25.negate();
        double double27 = complex25.getImaginary();
        org.apache.commons.math.complex.Complex complex28 = complex9.multiply(complex25);
        org.apache.commons.math.complex.Complex complex29 = complex9.tan();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + Double.POSITIVE_INFINITY + "'", double12 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + Double.POSITIVE_INFINITY + "'", double19 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
    }

    @Test
    public void test06413() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06413");
        double[] doubleArray2 = new double[] { (byte) 1, 100 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) (short) 100);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver6 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction3);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction7 = laguerreSolver6.getPolynomialFunction();
        laguerreSolver6.setRelativeAccuracy((double) 0);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction10 = laguerreSolver6.getPolynomialFunction();
        laguerreSolver6.resetRelativeAccuracy();
        laguerreSolver6.setRelativeAccuracy(10.0d);
        laguerreSolver6.setAbsoluteAccuracy((-1.6365376E7d));
        double[] doubleArray21 = new double[] { 0L, '#', 100.0f, 0L, (-1.0d) };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction22 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray21);
        int int23 = polynomialFunction22.degree();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver24 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction22);
        double[] doubleArray25 = polynomialFunction22.getCoefficients();
        org.apache.commons.math.complex.Complex[] complexArray27 = laguerreSolver6.solveAll(doubleArray25, 1.0E-6d);
        laguerreSolver6.setRelativeAccuracy((-1.04987708700666E14d));
        laguerreSolver6.setRelativeAccuracy((-8.808275266783596E15d));
        double double32 = laguerreSolver6.getRelativeAccuracy();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 10001.0d + "'", double5 == 10001.0d);
        org.junit.Assert.assertNotNull(polynomialFunction7);
        org.junit.Assert.assertNotNull(polynomialFunction10);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[0.0, 35.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 4 + "'", int23 == 4);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[0.0, 35.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(complexArray27);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + (-8.808275266783596E15d) + "'", double32 == (-8.808275266783596E15d));
    }

    @Test
    public void test06414() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06414");
        double[] doubleArray5 = new double[] { 0L, '#', 100.0f, 0L, (-1.0d) };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray5);
        double double8 = polynomialFunction6.value((double) 0);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver9 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        double[] doubleArray12 = new double[] { (byte) 1, 100 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction13 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray12);
        double double15 = polynomialFunction13.value((double) (short) 100);
        double[] doubleArray16 = polynomialFunction13.getCoefficients();
        org.apache.commons.math.complex.Complex[] complexArray18 = laguerreSolver9.solveAll(doubleArray16, (double) (short) 10);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction19 = laguerreSolver9.getPolynomialFunction();
        int int20 = polynomialFunction19.degree();
        double double22 = polynomialFunction19.value((double) (byte) 10);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction23 = polynomialFunction19.polynomialDerivative();
        int int24 = polynomialFunction19.degree();
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[0.0, 35.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 10001.0d + "'", double15 == 10001.0d);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(complexArray18);
        org.junit.Assert.assertNotNull(polynomialFunction19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 4 + "'", int20 == 4);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 350.0d + "'", double22 == 350.0d);
        org.junit.Assert.assertNotNull(polynomialFunction23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 4 + "'", int24 == 4);
    }

    @Test
    public void test06415() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06415");
        java.lang.Object[] objArray13 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException14 = new org.apache.commons.math.ConvergenceException("", objArray13);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException15 = new org.apache.commons.math.FunctionEvaluationException((double) (short) 10, "hi!", objArray13);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException16 = new org.apache.commons.math.MaxIterationsExceededException((int) (byte) 0, "org.apache.commons.math.ConvergenceException: hi!", objArray13);
        java.lang.Throwable[] throwableArray17 = maxIterationsExceededException16.getSuppressed();
        java.lang.Object[] objArray24 = new java.lang.Object[] { 0.0f, (short) 1 };
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException25 = new org.apache.commons.math.MaxIterationsExceededException(100, "", objArray24);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException26 = new org.apache.commons.math.MaxIterationsExceededException((int) ' ', "hi!", objArray24);
        int int27 = maxIterationsExceededException26.getMaxIterations();
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException28 = new org.apache.commons.math.FunctionEvaluationException(Double.POSITIVE_INFINITY, "hi!", (java.lang.Object[]) throwableArray17, (java.lang.Throwable) maxIterationsExceededException26);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException29 = new org.apache.commons.math.MaxIterationsExceededException(0, "org.apache.commons.math.MaxIterationsExceededException: ", (java.lang.Object[]) throwableArray17);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException30 = new org.apache.commons.math.MaxIterationsExceededException((int) (byte) 1, "org.apache.commons.math.ConvergenceException: Evaluation failed for argument = {0}", (java.lang.Object[]) throwableArray17);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException32 = new org.apache.commons.math.MaxIterationsExceededException((-1));
        int int33 = maxIterationsExceededException32.getMaxIterations();
        org.apache.commons.math.ConvergenceException convergenceException34 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: ", (java.lang.Object[]) throwableArray17, (java.lang.Throwable) maxIterationsExceededException32);
        org.apache.commons.math.ConvergenceException convergenceException35 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.MaxIterationsExceededException: org.apache.commons.math.MaxIterationsExceededException: ", (java.lang.Throwable) maxIterationsExceededException32);
        java.lang.String str36 = maxIterationsExceededException32.toString();
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[]");
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[0.0, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[0.0, 1]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 32 + "'", int27 == 32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "org.apache.commons.math.MaxIterationsExceededException: Maximal number of iterations (-1) exceeded" + "'", str36, "org.apache.commons.math.MaxIterationsExceededException: Maximal number of iterations (-1) exceeded");
    }

    @Test
    public void test06416() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06416");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex1 = complex0.cosh();
        double double2 = complex0.abs();
        org.apache.commons.math.complex.Complex complex3 = complex0.conjugate();
        org.apache.commons.math.complex.Complex complex4 = complex3.conjugate();
        org.apache.commons.math.complex.Complex complex5 = complex3.tanh();
        org.apache.commons.math.complex.Complex complex6 = complex5.tan();
        org.apache.commons.math.complex.Complex complex7 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex8 = complex7.cosh();
        double double9 = complex7.abs();
        org.apache.commons.math.complex.Complex complex10 = complex7.conjugate();
        org.apache.commons.math.complex.Complex complex11 = complex10.conjugate();
        org.apache.commons.math.complex.Complex complex12 = complex6.subtract(complex10);
        org.apache.commons.math.complex.Complex complex13 = complex6.sinh();
        org.apache.commons.math.complex.Complex complex14 = complex13.acos();
        org.apache.commons.math.complex.Complex complex15 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex16 = complex15.cosh();
        org.apache.commons.math.complex.Complex complex17 = complex15.log();
        org.apache.commons.math.complex.Complex complex18 = complex15.sin();
        org.apache.commons.math.complex.Complex complex19 = complex15.log();
        org.apache.commons.math.complex.Complex complex20 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex21 = complex20.sqrt();
        org.apache.commons.math.complex.Complex complex22 = complex15.divide(complex21);
        org.apache.commons.math.complex.Complex complex23 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex24 = complex23.cosh();
        double double25 = complex23.abs();
        org.apache.commons.math.complex.Complex complex26 = complex23.conjugate();
        org.apache.commons.math.complex.Complex complex27 = complex26.conjugate();
        org.apache.commons.math.complex.Complex complex28 = complex22.subtract(complex27);
        org.apache.commons.math.complex.Complex complex29 = complex22.exp();
        org.apache.commons.math.complex.Complex complex30 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex31 = complex30.cosh();
        org.apache.commons.math.complex.Complex complex32 = complex31.acos();
        org.apache.commons.math.complex.Complex complex33 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex34 = complex33.cosh();
        org.apache.commons.math.complex.Complex complex35 = complex33.log();
        org.apache.commons.math.complex.Complex complex36 = complex33.sin();
        org.apache.commons.math.complex.Complex complex37 = complex36.tanh();
        org.apache.commons.math.complex.Complex complex38 = complex31.add(complex37);
        boolean boolean39 = complex22.equals((java.lang.Object) complex31);
        org.apache.commons.math.complex.Complex complex40 = complex13.multiply(complex22);
        double double41 = complex22.abs();
        boolean boolean42 = complex22.isNaN();
        org.apache.commons.math.complex.Complex complex43 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex44 = complex43.cosh();
        org.apache.commons.math.complex.Complex complex45 = complex43.log();
        org.apache.commons.math.complex.Complex complex46 = complex45.cos();
        double double47 = complex46.abs();
        org.apache.commons.math.complex.Complex complex48 = complex46.sqrt();
        org.apache.commons.math.complex.Complex complex49 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex50 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex51 = complex50.sqrt();
        org.apache.commons.math.complex.Complex complex52 = complex51.sin();
        org.apache.commons.math.complex.Complex complex53 = complex49.pow(complex51);
        org.apache.commons.math.complex.Complex complex54 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex55 = complex54.cosh();
        org.apache.commons.math.complex.Complex complex56 = complex54.log();
        org.apache.commons.math.complex.Complex complex57 = complex49.divide(complex56);
        org.apache.commons.math.complex.Complex complex58 = complex48.subtract(complex57);
        org.apache.commons.math.complex.Complex complex59 = complex48.conjugate();
        org.apache.commons.math.complex.Complex complex60 = complex48.conjugate();
        org.apache.commons.math.complex.Complex complex61 = complex48.cos();
        org.apache.commons.math.complex.Complex complex62 = complex61.negate();
        org.apache.commons.math.complex.Complex complex63 = complex61.acos();
        org.apache.commons.math.complex.Complex complex64 = complex61.asin();
        org.apache.commons.math.complex.Complex complex65 = complex22.pow(complex61);
        org.apache.commons.math.complex.Complex complex66 = complex65.log();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + Double.POSITIVE_INFINITY + "'", double2 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + Double.POSITIVE_INFINITY + "'", double9 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + Double.POSITIVE_INFINITY + "'", double25 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertTrue(Double.isNaN(double41));
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertTrue(Double.isNaN(double47));
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(complex66);
    }

    @Test
    public void test06417() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06417");
        double[] doubleArray2 = new double[] { (byte) 1, 100 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) (short) 100);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver6 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction3);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction7 = laguerreSolver6.getPolynomialFunction();
        laguerreSolver6.setRelativeAccuracy((double) 0);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction10 = laguerreSolver6.getPolynomialFunction();
        laguerreSolver6.resetRelativeAccuracy();
        laguerreSolver6.resetAbsoluteAccuracy();
        laguerreSolver6.resetAbsoluteAccuracy();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction14 = laguerreSolver6.getPolynomialFunction();
        laguerreSolver6.setFunctionValueAccuracy((-3.74215821E8d));
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 10001.0d + "'", double5 == 10001.0d);
        org.junit.Assert.assertNotNull(polynomialFunction7);
        org.junit.Assert.assertNotNull(polynomialFunction10);
        org.junit.Assert.assertNotNull(polynomialFunction14);
    }

    @Test
    public void test06418() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06418");
        double[] doubleArray5 = new double[] { 0L, '#', 100.0f, 0L, (-1.0d) };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray5);
        double double8 = polynomialFunction6.value((double) 0);
        int int9 = polynomialFunction6.degree();
        double double11 = polynomialFunction6.value(Double.NaN);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver12 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        double double14 = polynomialFunction6.value((double) '4');
        double double16 = polynomialFunction6.value((-1.1271166786758312E32d));
        double double18 = polynomialFunction6.value(112034.0d);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[0.0, 35.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 4 + "'", int9 == 4);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + (-7039396.0d) + "'", double14 == (-7039396.0d));
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + (-1.6138958523368236E128d) + "'", double16 == (-1.6138958523368236E128d));
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + (-1.575430919756279E20d) + "'", double18 == (-1.575430919756279E20d));
    }

    @Test
    public void test06419() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06419");
        java.lang.Object[] objArray8 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException9 = new org.apache.commons.math.ConvergenceException("", objArray8);
        java.lang.Object[] objArray14 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException15 = new org.apache.commons.math.ConvergenceException("", objArray14);
        java.lang.Object[] objArray17 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException18 = new org.apache.commons.math.ConvergenceException("", objArray17);
        org.apache.commons.math.ConvergenceException convergenceException19 = new org.apache.commons.math.ConvergenceException("", objArray14, (java.lang.Throwable) convergenceException18);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException21 = new org.apache.commons.math.FunctionEvaluationException((double) 100);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException22 = new org.apache.commons.math.FunctionEvaluationException(100.0d, "org.apache.commons.math.ConvergenceException: hi!", objArray14, (java.lang.Throwable) functionEvaluationException21);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException23 = new org.apache.commons.math.FunctionEvaluationException((double) '#', "", objArray8, (java.lang.Throwable) functionEvaluationException22);
        java.lang.String str24 = functionEvaluationException23.getPattern();
        double double25 = functionEvaluationException23.getArgument();
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException26 = new org.apache.commons.math.FunctionEvaluationException((double) (byte) 0, (java.lang.Throwable) functionEvaluationException23);
        org.apache.commons.math.ConvergenceException convergenceException27 = new org.apache.commons.math.ConvergenceException("hi!", (java.lang.Throwable) functionEvaluationException26);
        java.lang.Object[] objArray28 = convergenceException27.getArguments();
        java.lang.Object[] objArray41 = new java.lang.Object[] { 0.0f, (short) 1 };
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException42 = new org.apache.commons.math.MaxIterationsExceededException(100, "", objArray41);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException43 = new org.apache.commons.math.MaxIterationsExceededException((int) ' ', "hi!", objArray41);
        java.lang.Object[] objArray46 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException47 = new org.apache.commons.math.ConvergenceException("", objArray46);
        java.lang.Object[] objArray49 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException50 = new org.apache.commons.math.ConvergenceException("", objArray49);
        org.apache.commons.math.ConvergenceException convergenceException51 = new org.apache.commons.math.ConvergenceException("", objArray46, (java.lang.Throwable) convergenceException50);
        org.apache.commons.math.ConvergenceException convergenceException52 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.FunctionEvaluationException: ", objArray41, (java.lang.Throwable) convergenceException50);
        java.lang.Object[] objArray53 = convergenceException50.getArguments();
        java.lang.Object[] objArray56 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException57 = new org.apache.commons.math.ConvergenceException("", objArray56);
        java.lang.Object[] objArray59 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException60 = new org.apache.commons.math.ConvergenceException("", objArray59);
        org.apache.commons.math.ConvergenceException convergenceException61 = new org.apache.commons.math.ConvergenceException("", objArray56, (java.lang.Throwable) convergenceException60);
        java.lang.Throwable[] throwableArray62 = convergenceException61.getSuppressed();
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException63 = new org.apache.commons.math.FunctionEvaluationException((double) 10.0f, "org.apache.commons.math.MaxIterationsExceededException: org.apache.commons.math.FunctionEvaluationException: ", objArray53, (java.lang.Throwable) convergenceException61);
        java.lang.Object[] objArray69 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException70 = new org.apache.commons.math.ConvergenceException("", objArray69);
        java.lang.Object[] objArray72 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException73 = new org.apache.commons.math.ConvergenceException("", objArray72);
        org.apache.commons.math.ConvergenceException convergenceException74 = new org.apache.commons.math.ConvergenceException("", objArray69, (java.lang.Throwable) convergenceException73);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException76 = new org.apache.commons.math.FunctionEvaluationException((double) 100);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException77 = new org.apache.commons.math.FunctionEvaluationException(100.0d, "org.apache.commons.math.ConvergenceException: hi!", objArray69, (java.lang.Throwable) functionEvaluationException76);
        org.apache.commons.math.ConvergenceException convergenceException78 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.FunctionEvaluationException: ", (java.lang.Throwable) functionEvaluationException76);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException79 = new org.apache.commons.math.FunctionEvaluationException((double) (short) -1, "org.apache.commons.math.ConvergenceException: hi!", objArray53, (java.lang.Throwable) convergenceException78);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException80 = new org.apache.commons.math.FunctionEvaluationException((double) 'a', (java.lang.Throwable) convergenceException78);
        org.apache.commons.math.ConvergenceException convergenceException81 = new org.apache.commons.math.ConvergenceException("", objArray28, (java.lang.Throwable) functionEvaluationException80);
        org.apache.commons.math.ConvergenceException convergenceException82 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.FunctionEvaluationException: org.apache.commons.math.ConvergenceException: hi!", (java.lang.Throwable) convergenceException81);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException83 = new org.apache.commons.math.FunctionEvaluationException(7.065179444323E12d, (java.lang.Throwable) convergenceException81);
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[]");
        org.junit.Assert.assertNotNull(objArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray14), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray14), "[]");
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray17), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray17), "[]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 35.0d + "'", double25 == 35.0d);
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[]");
        org.junit.Assert.assertNotNull(objArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray41), "[0.0, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray41), "[0.0, 1]");
        org.junit.Assert.assertNotNull(objArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray46), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray46), "[]");
        org.junit.Assert.assertNotNull(objArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray49), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray49), "[]");
        org.junit.Assert.assertNotNull(objArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray53), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray53), "[]");
        org.junit.Assert.assertNotNull(objArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray56), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray56), "[]");
        org.junit.Assert.assertNotNull(objArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray59), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray59), "[]");
        org.junit.Assert.assertNotNull(throwableArray62);
        org.junit.Assert.assertNotNull(objArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray69), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray69), "[]");
        org.junit.Assert.assertNotNull(objArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray72), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray72), "[]");
    }

    @Test
    public void test06420() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06420");
        double[] doubleArray5 = new double[] { 0L, '#', 100.0f, 0L, (-1.0d) };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray5);
        int int7 = polynomialFunction6.degree();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction8 = polynomialFunction6.polynomialDerivative();
        double[] doubleArray9 = polynomialFunction6.getCoefficients();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver10 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        double double11 = laguerreSolver10.getRelativeAccuracy();
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[0.0, 35.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 4 + "'", int7 == 4);
        org.junit.Assert.assertNotNull(polynomialFunction8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[0.0, 35.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 1.0E-14d + "'", double11 == 1.0E-14d);
    }

    @Test
    public void test06421() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06421");
        double[] doubleArray2 = new double[] { (byte) 1, 100 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) (short) 100);
        double[] doubleArray6 = polynomialFunction3.getCoefficients();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction7 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray6);
        double[] doubleArray8 = polynomialFunction7.getCoefficients();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction9 = polynomialFunction7.polynomialDerivative();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 10001.0d + "'", double5 == 10001.0d);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(polynomialFunction9);
    }

    @Test
    public void test06422() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06422");
        double[] doubleArray2 = new double[] { (byte) 1, 100 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) (short) 100);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver6 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction3);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction7 = laguerreSolver6.getPolynomialFunction();
        laguerreSolver6.setRelativeAccuracy((double) 0);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction10 = laguerreSolver6.getPolynomialFunction();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction11 = polynomialFunction10.polynomialDerivative();
        double double13 = polynomialFunction10.value((double) ' ');
        double double15 = polynomialFunction10.value((-1.03036766E8d));
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction16 = polynomialFunction10.polynomialDerivative();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction17 = polynomialFunction10.polynomialDerivative();
        int int18 = polynomialFunction10.degree();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 10001.0d + "'", double5 == 10001.0d);
        org.junit.Assert.assertNotNull(polynomialFunction7);
        org.junit.Assert.assertNotNull(polynomialFunction10);
        org.junit.Assert.assertNotNull(polynomialFunction11);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 3201.0d + "'", double13 == 3201.0d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + (-1.0303676599E10d) + "'", double15 == (-1.0303676599E10d));
        org.junit.Assert.assertNotNull(polynomialFunction16);
        org.junit.Assert.assertNotNull(polynomialFunction17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
    }

    @Test
    public void test06423() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06423");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex1 = complex0.cosh();
        double double2 = complex0.abs();
        org.apache.commons.math.complex.Complex complex3 = complex0.conjugate();
        org.apache.commons.math.complex.Complex complex4 = complex3.conjugate();
        org.apache.commons.math.complex.Complex complex5 = complex3.tanh();
        org.apache.commons.math.complex.Complex complex6 = complex5.tan();
        org.apache.commons.math.complex.Complex complex7 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex8 = complex7.cosh();
        double double9 = complex7.abs();
        org.apache.commons.math.complex.Complex complex10 = complex7.conjugate();
        org.apache.commons.math.complex.Complex complex11 = complex10.conjugate();
        org.apache.commons.math.complex.Complex complex12 = complex6.subtract(complex10);
        org.apache.commons.math.complex.Complex complex13 = complex10.negate();
        org.apache.commons.math.complex.Complex complex14 = complex10.tanh();
        org.apache.commons.math.complex.Complex complex15 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex16 = complex15.cosh();
        double double17 = complex15.abs();
        org.apache.commons.math.complex.Complex complex18 = complex15.conjugate();
        org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex20 = complex19.sqrt();
        boolean boolean21 = complex19.isNaN();
        org.apache.commons.math.complex.Complex complex22 = complex19.sin();
        org.apache.commons.math.complex.Complex complex23 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex24 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex25 = complex24.sqrt();
        org.apache.commons.math.complex.Complex complex26 = complex25.sin();
        org.apache.commons.math.complex.Complex complex27 = complex23.pow(complex25);
        org.apache.commons.math.complex.Complex complex28 = complex27.asin();
        org.apache.commons.math.complex.Complex complex29 = complex28.atan();
        boolean boolean30 = complex29.isInfinite();
        org.apache.commons.math.complex.Complex complex31 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex32 = complex29.subtract(complex31);
        org.apache.commons.math.complex.Complex complex33 = complex32.sin();
        org.apache.commons.math.complex.Complex complex34 = complex19.divide(complex33);
        org.apache.commons.math.complex.Complex complex35 = complex15.subtract(complex33);
        boolean boolean36 = complex10.equals((java.lang.Object) complex33);
        org.apache.commons.math.complex.Complex complex37 = complex10.conjugate();
        org.apache.commons.math.complex.Complex complex38 = complex37.exp();
        org.apache.commons.math.complex.Complex complex39 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex40 = complex39.cosh();
        org.apache.commons.math.complex.Complex complex41 = complex39.log();
        org.apache.commons.math.complex.Complex complex42 = complex39.sin();
        org.apache.commons.math.complex.Complex complex43 = complex39.log();
        org.apache.commons.math.complex.Complex complex44 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex45 = complex44.sqrt();
        org.apache.commons.math.complex.Complex complex46 = complex39.divide(complex45);
        org.apache.commons.math.complex.Complex complex47 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex48 = complex47.cosh();
        double double49 = complex47.abs();
        org.apache.commons.math.complex.Complex complex50 = complex47.conjugate();
        org.apache.commons.math.complex.Complex complex51 = complex50.conjugate();
        org.apache.commons.math.complex.Complex complex52 = complex46.subtract(complex51);
        org.apache.commons.math.complex.Complex complex53 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex54 = complex53.cosh();
        org.apache.commons.math.complex.Complex complex55 = complex53.log();
        org.apache.commons.math.complex.Complex complex56 = complex53.sin();
        org.apache.commons.math.complex.Complex complex57 = complex53.log();
        org.apache.commons.math.complex.Complex complex58 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex59 = complex58.sqrt();
        org.apache.commons.math.complex.Complex complex60 = complex53.divide(complex59);
        org.apache.commons.math.complex.Complex complex61 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex62 = complex61.cosh();
        double double63 = complex61.abs();
        org.apache.commons.math.complex.Complex complex64 = complex61.conjugate();
        org.apache.commons.math.complex.Complex complex65 = complex64.conjugate();
        org.apache.commons.math.complex.Complex complex66 = complex60.subtract(complex65);
        org.apache.commons.math.complex.Complex complex67 = complex60.exp();
        org.apache.commons.math.complex.Complex complex68 = complex52.multiply(complex67);
        org.apache.commons.math.complex.Complex complex69 = complex67.cosh();
        boolean boolean70 = complex69.isNaN();
        org.apache.commons.math.complex.Complex complex71 = complex69.tan();
        org.apache.commons.math.complex.Complex complex72 = complex38.pow(complex69);
        org.apache.commons.math.complex.Complex complex73 = complex69.cosh();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + Double.POSITIVE_INFINITY + "'", double2 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + Double.POSITIVE_INFINITY + "'", double9 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + Double.POSITIVE_INFINITY + "'", double17 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + Double.POSITIVE_INFINITY + "'", double49 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + Double.POSITIVE_INFINITY + "'", double63 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertNotNull(complex73);
    }

    @Test
    public void test06424() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06424");
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException1 = new org.apache.commons.math.FunctionEvaluationException(10101.0d);
        java.lang.Object[] objArray2 = functionEvaluationException1.getArguments();
        java.lang.Throwable[] throwableArray3 = functionEvaluationException1.getSuppressed();
        java.lang.Object[] objArray16 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException17 = new org.apache.commons.math.ConvergenceException("", objArray16);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException18 = new org.apache.commons.math.MaxIterationsExceededException(0, "hi!", objArray16);
        org.apache.commons.math.ConvergenceException convergenceException20 = new org.apache.commons.math.ConvergenceException("");
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException21 = new org.apache.commons.math.FunctionEvaluationException((double) (short) 0, "hi!", objArray16, (java.lang.Throwable) convergenceException20);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException22 = new org.apache.commons.math.MaxIterationsExceededException((int) (byte) 100, "", objArray16);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException23 = new org.apache.commons.math.FunctionEvaluationException(1.0d, "", objArray16);
        java.lang.Object[] objArray24 = functionEvaluationException23.getArguments();
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException25 = new org.apache.commons.math.FunctionEvaluationException((-3.464877501E9d), "org.apache.commons.math.MaxIterationsExceededException: org.apache.commons.math.FunctionEvaluationException: ", (java.lang.Throwable) functionEvaluationException23);
        org.apache.commons.math.ConvergenceException convergenceException26 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) functionEvaluationException25);
        org.apache.commons.math.ConvergenceException convergenceException27 = new org.apache.commons.math.ConvergenceException("", (java.lang.Throwable) functionEvaluationException25);
        functionEvaluationException1.addSuppressed((java.lang.Throwable) convergenceException27);
        double double29 = functionEvaluationException1.getArgument();
        org.junit.Assert.assertNotNull(objArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray2), "[10101.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray2), "[10101.0]");
        org.junit.Assert.assertNotNull(throwableArray3);
        org.junit.Assert.assertNotNull(objArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray16), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray16), "[]");
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 10101.0d + "'", double29 == 10101.0d);
    }

    @Test
    public void test06425() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06425");
        double[] doubleArray5 = new double[] { 0L, '#', 100.0f, 0L, (-1.0d) };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray5);
        int int7 = polynomialFunction6.degree();
        int int8 = polynomialFunction6.degree();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction9 = polynomialFunction6.polynomialDerivative();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction10 = polynomialFunction9.polynomialDerivative();
        double[] doubleArray11 = polynomialFunction10.getCoefficients();
        int int12 = polynomialFunction10.degree();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction13 = polynomialFunction10.polynomialDerivative();
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction14 = polynomialFunction10.derivative();
        double[] doubleArray15 = polynomialFunction10.getCoefficients();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver16 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction10);
        int int17 = laguerreSolver16.getMaximalIterationCount();
        double double18 = laguerreSolver16.getAbsoluteAccuracy();
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[0.0, 35.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 4 + "'", int7 == 4);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 4 + "'", int8 == 4);
        org.junit.Assert.assertNotNull(polynomialFunction9);
        org.junit.Assert.assertNotNull(polynomialFunction10);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[200.0, 0.0, -12.0]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertNotNull(polynomialFunction13);
        org.junit.Assert.assertNotNull(univariateRealFunction14);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[200.0, 0.0, -12.0]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 100 + "'", int17 == 100);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 1.0E-6d + "'", double18 == 1.0E-6d);
    }

    @Test
    public void test06426() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06426");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex1 = complex0.cosh();
        org.apache.commons.math.complex.Complex complex2 = complex0.log();
        org.apache.commons.math.complex.Complex complex3 = complex0.sin();
        org.apache.commons.math.complex.Complex complex4 = complex0.log();
        org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex6 = complex5.sqrt();
        org.apache.commons.math.complex.Complex complex7 = complex0.divide(complex6);
        org.apache.commons.math.complex.Complex complex8 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex9 = complex8.cosh();
        org.apache.commons.math.complex.Complex complex10 = complex9.acos();
        double double11 = complex9.getReal();
        org.apache.commons.math.complex.Complex complex12 = complex9.sqrt();
        org.apache.commons.math.complex.Complex complex13 = complex0.pow(complex9);
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex15 = complex14.cosh();
        org.apache.commons.math.complex.Complex complex16 = complex14.log();
        org.apache.commons.math.complex.Complex complex17 = complex16.cos();
        org.apache.commons.math.complex.Complex complex18 = complex9.multiply(complex16);
        org.apache.commons.math.complex.Complex complex19 = complex16.tanh();
        org.apache.commons.math.complex.Complex complex20 = complex19.asin();
        org.apache.commons.math.complex.Complex complex21 = complex20.sin();
        org.apache.commons.math.complex.Complex complex22 = complex21.asin();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
    }

    @Test
    public void test06427() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06427");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex1 = complex0.cosh();
        double double2 = complex0.abs();
        org.apache.commons.math.complex.Complex complex3 = complex0.conjugate();
        org.apache.commons.math.complex.Complex complex4 = complex3.conjugate();
        org.apache.commons.math.complex.Complex complex5 = complex3.log();
        org.apache.commons.math.complex.Complex complex6 = complex3.acos();
        org.apache.commons.math.complex.Complex complex7 = complex6.tanh();
        org.apache.commons.math.complex.Complex complex8 = complex7.negate();
        org.apache.commons.math.complex.Complex complex9 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex10 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex11 = complex10.sqrt();
        org.apache.commons.math.complex.Complex complex12 = complex11.sin();
        org.apache.commons.math.complex.Complex complex13 = complex9.pow(complex11);
        org.apache.commons.math.complex.Complex complex14 = complex13.asin();
        boolean boolean15 = complex13.isNaN();
        org.apache.commons.math.complex.Complex complex16 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex17 = complex16.cosh();
        double double18 = complex16.abs();
        org.apache.commons.math.complex.Complex complex19 = complex16.conjugate();
        org.apache.commons.math.complex.Complex complex20 = complex19.conjugate();
        org.apache.commons.math.complex.Complex complex21 = complex19.tanh();
        org.apache.commons.math.complex.Complex complex22 = complex21.tan();
        org.apache.commons.math.complex.Complex complex23 = complex22.conjugate();
        org.apache.commons.math.complex.Complex complex24 = complex23.cos();
        org.apache.commons.math.complex.Complex complex25 = complex23.cosh();
        org.apache.commons.math.complex.Complex complex26 = complex13.pow(complex23);
        org.apache.commons.math.complex.Complex complex27 = complex8.multiply(complex26);
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + Double.POSITIVE_INFINITY + "'", double2 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + Double.POSITIVE_INFINITY + "'", double18 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
    }

    @Test
    public void test06428() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06428");
        double[] doubleArray5 = new double[] { 0L, '#', 100.0f, 0L, (-1.0d) };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray5);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        double double8 = laguerreSolver7.getAbsoluteAccuracy();
        laguerreSolver7.resetMaximalIterationCount();
        double double10 = laguerreSolver7.getRelativeAccuracy();
        laguerreSolver7.setAbsoluteAccuracy((-6.8261426196981E247d));
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[0.0, 35.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 1.0E-6d + "'", double8 == 1.0E-6d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0E-14d + "'", double10 == 1.0E-14d);
    }

    @Test
    public void test06429() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06429");
        double[] doubleArray4 = new double[] { (byte) 1, 100 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction5 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray4);
        double double7 = polynomialFunction5.value((double) (short) 100);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver8 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction5);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction9 = laguerreSolver8.getPolynomialFunction();
        laguerreSolver8.setRelativeAccuracy((double) 0);
        double[] doubleArray14 = new double[] { (byte) -1, '#' };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction15 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray14);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction16 = polynomialFunction15.polynomialDerivative();
        double[] doubleArray17 = polynomialFunction15.getCoefficients();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction18 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray17);
        org.apache.commons.math.complex.Complex[] complexArray20 = laguerreSolver8.solveAll(doubleArray17, (double) 4);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException21 = new org.apache.commons.math.FunctionEvaluationException((double) 1L, "org.apache.commons.math.FunctionEvaluationException: ", (java.lang.Object[]) complexArray20);
        java.lang.Throwable[] throwableArray22 = functionEvaluationException21.getSuppressed();
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 10001.0d + "'", double7 == 10001.0d);
        org.junit.Assert.assertNotNull(polynomialFunction9);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[-1.0, 35.0]");
        org.junit.Assert.assertNotNull(polynomialFunction16);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[-1.0, 35.0]");
        org.junit.Assert.assertNotNull(complexArray20);
        org.junit.Assert.assertNotNull(throwableArray22);
    }

    @Test
    public void test06430() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06430");
        java.lang.Object[] objArray9 = new java.lang.Object[] { 0.0f, (short) 1 };
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException10 = new org.apache.commons.math.MaxIterationsExceededException(100, "", objArray9);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException11 = new org.apache.commons.math.MaxIterationsExceededException((int) ' ', "hi!", objArray9);
        java.lang.Object[] objArray16 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException17 = new org.apache.commons.math.ConvergenceException("", objArray16);
        java.lang.Object[] objArray19 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException20 = new org.apache.commons.math.ConvergenceException("", objArray19);
        org.apache.commons.math.ConvergenceException convergenceException21 = new org.apache.commons.math.ConvergenceException("", objArray16, (java.lang.Throwable) convergenceException20);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException23 = new org.apache.commons.math.FunctionEvaluationException((double) 100);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException24 = new org.apache.commons.math.FunctionEvaluationException(100.0d, "org.apache.commons.math.ConvergenceException: hi!", objArray16, (java.lang.Throwable) functionEvaluationException23);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException25 = new org.apache.commons.math.FunctionEvaluationException((double) 100L, "org.apache.commons.math.ConvergenceException: hi!", objArray9, (java.lang.Throwable) functionEvaluationException24);
        double double26 = functionEvaluationException24.getArgument();
        org.apache.commons.math.ConvergenceException convergenceException27 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.MaxIterationsExceededException: ", (java.lang.Throwable) functionEvaluationException24);
        java.lang.Class<?> wildcardClass28 = functionEvaluationException24.getClass();
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[0.0, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[0.0, 1]");
        org.junit.Assert.assertNotNull(objArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray16), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray16), "[]");
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[]");
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 100.0d + "'", double26 == 100.0d);
        org.junit.Assert.assertNotNull(wildcardClass28);
    }

    @Test
    public void test06431() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06431");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex1 = complex0.cosh();
        org.apache.commons.math.complex.Complex complex2 = complex0.log();
        org.apache.commons.math.complex.Complex complex3 = complex0.sin();
        org.apache.commons.math.complex.Complex complex4 = complex0.log();
        org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex6 = complex5.sqrt();
        org.apache.commons.math.complex.Complex complex7 = complex0.divide(complex6);
        org.apache.commons.math.complex.Complex complex8 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex9 = complex8.cosh();
        double double10 = complex8.abs();
        org.apache.commons.math.complex.Complex complex11 = complex8.conjugate();
        org.apache.commons.math.complex.Complex complex12 = complex11.conjugate();
        org.apache.commons.math.complex.Complex complex13 = complex7.subtract(complex12);
        org.apache.commons.math.complex.Complex complex14 = complex7.exp();
        org.apache.commons.math.complex.Complex complex15 = complex7.tan();
        org.apache.commons.math.complex.Complex complex16 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex17 = complex16.cosh();
        double double18 = complex16.abs();
        org.apache.commons.math.complex.Complex complex19 = complex16.conjugate();
        org.apache.commons.math.complex.Complex complex20 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex21 = complex20.cosh();
        double double22 = complex20.abs();
        org.apache.commons.math.complex.Complex complex23 = complex20.conjugate();
        org.apache.commons.math.complex.Complex complex24 = complex23.conjugate();
        org.apache.commons.math.complex.Complex complex25 = complex23.tanh();
        org.apache.commons.math.complex.Complex complex26 = complex23.atan();
        org.apache.commons.math.complex.Complex complex27 = complex16.subtract(complex23);
        org.apache.commons.math.complex.Complex complex28 = complex7.subtract(complex27);
        org.apache.commons.math.complex.Complex complex29 = complex28.conjugate();
        org.apache.commons.math.complex.Complex complex30 = complex28.tanh();
        org.apache.commons.math.complex.Complex complex31 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex32 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex33 = complex32.sqrt();
        org.apache.commons.math.complex.Complex complex34 = complex33.sin();
        org.apache.commons.math.complex.Complex complex35 = complex31.pow(complex33);
        org.apache.commons.math.complex.Complex complex36 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex37 = complex36.cosh();
        org.apache.commons.math.complex.Complex complex38 = complex36.log();
        org.apache.commons.math.complex.Complex complex39 = complex31.divide(complex38);
        org.apache.commons.math.complex.Complex complex40 = complex30.multiply(complex39);
        org.apache.commons.math.complex.Complex complex41 = complex40.tan();
        org.apache.commons.math.complex.Complex complex42 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex43 = complex42.cosh();
        double double44 = complex42.abs();
        org.apache.commons.math.complex.Complex complex45 = complex42.conjugate();
        org.apache.commons.math.complex.Complex complex46 = complex45.conjugate();
        boolean boolean47 = complex45.isInfinite();
        org.apache.commons.math.complex.Complex complex48 = complex45.asin();
        boolean boolean49 = complex45.isNaN();
        org.apache.commons.math.complex.Complex complex50 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex51 = complex50.cosh();
        org.apache.commons.math.complex.Complex complex52 = complex45.divide(complex50);
        boolean boolean53 = complex45.isNaN();
        double double54 = complex45.getReal();
        org.apache.commons.math.complex.Complex complex55 = complex45.acos();
        org.apache.commons.math.complex.Complex complex56 = complex45.exp();
        org.apache.commons.math.complex.Complex complex57 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex58 = complex57.cosh();
        double double59 = complex57.abs();
        org.apache.commons.math.complex.Complex complex60 = complex57.conjugate();
        org.apache.commons.math.complex.Complex complex61 = complex60.conjugate();
        boolean boolean62 = complex60.isInfinite();
        org.apache.commons.math.complex.Complex complex63 = complex60.cos();
        org.apache.commons.math.complex.Complex complex64 = complex60.conjugate();
        org.apache.commons.math.complex.Complex complex65 = complex60.sin();
        boolean boolean66 = complex60.isNaN();
        org.apache.commons.math.complex.Complex complex67 = complex60.sqrt();
        org.apache.commons.math.complex.Complex complex68 = complex67.conjugate();
        org.apache.commons.math.complex.Complex complex69 = complex56.add(complex68);
        org.apache.commons.math.complex.Complex complex70 = complex40.subtract(complex69);
        org.apache.commons.math.complex.Complex complex71 = complex70.exp();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + Double.POSITIVE_INFINITY + "'", double10 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + Double.POSITIVE_INFINITY + "'", double18 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + Double.POSITIVE_INFINITY + "'", double22 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + Double.POSITIVE_INFINITY + "'", double44 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + Double.POSITIVE_INFINITY + "'", double54 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + Double.POSITIVE_INFINITY + "'", double59 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertNotNull(complex71);
    }

    @Test
    public void test06432() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06432");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex1 = complex0.sqrt();
        boolean boolean2 = complex0.isNaN();
        org.apache.commons.math.complex.Complex complex3 = complex0.sin();
        org.apache.commons.math.complex.Complex complex4 = complex3.exp();
        org.apache.commons.math.complex.Complex complex5 = complex3.cosh();
        double double6 = complex5.getImaginary();
        org.apache.commons.math.complex.Complex complex7 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex8 = complex7.cosh();
        double double9 = complex7.abs();
        org.apache.commons.math.complex.Complex complex10 = complex7.conjugate();
        org.apache.commons.math.complex.Complex complex11 = complex10.conjugate();
        boolean boolean12 = complex10.isInfinite();
        org.apache.commons.math.complex.Complex complex13 = complex10.cos();
        org.apache.commons.math.complex.Complex complex14 = complex10.conjugate();
        org.apache.commons.math.complex.Complex complex15 = complex10.sin();
        boolean boolean16 = complex10.isNaN();
        org.apache.commons.math.complex.Complex complex17 = complex10.atan();
        org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex19 = complex18.cosh();
        org.apache.commons.math.complex.Complex complex20 = complex19.acos();
        org.apache.commons.math.complex.Complex complex21 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex22 = complex21.cosh();
        org.apache.commons.math.complex.Complex complex23 = complex21.log();
        org.apache.commons.math.complex.Complex complex24 = complex21.sin();
        org.apache.commons.math.complex.Complex complex25 = complex24.tanh();
        org.apache.commons.math.complex.Complex complex26 = complex19.add(complex25);
        org.apache.commons.math.complex.Complex complex27 = complex25.acos();
        org.apache.commons.math.complex.Complex complex28 = complex25.sin();
        org.apache.commons.math.complex.Complex complex29 = complex10.subtract(complex28);
        org.apache.commons.math.complex.Complex complex30 = complex29.exp();
        org.apache.commons.math.complex.Complex complex31 = complex30.atan();
        org.apache.commons.math.complex.Complex complex32 = complex5.subtract(complex30);
        org.apache.commons.math.complex.Complex complex33 = complex32.conjugate();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + Double.POSITIVE_INFINITY + "'", double9 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
    }

    @Test
    public void test06433() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06433");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex1 = complex0.cosh();
        double double2 = complex0.abs();
        org.apache.commons.math.complex.Complex complex3 = complex0.conjugate();
        org.apache.commons.math.complex.Complex complex4 = complex3.conjugate();
        org.apache.commons.math.complex.Complex complex5 = complex3.tanh();
        org.apache.commons.math.complex.Complex complex6 = complex5.tan();
        org.apache.commons.math.complex.Complex complex7 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex8 = complex7.cosh();
        double double9 = complex7.abs();
        org.apache.commons.math.complex.Complex complex10 = complex7.conjugate();
        org.apache.commons.math.complex.Complex complex11 = complex10.conjugate();
        org.apache.commons.math.complex.Complex complex12 = complex6.subtract(complex10);
        org.apache.commons.math.complex.Complex complex13 = complex10.negate();
        org.apache.commons.math.complex.Complex complex14 = complex10.tanh();
        org.apache.commons.math.complex.Complex complex15 = complex14.sinh();
        org.apache.commons.math.complex.Complex complex16 = complex15.tanh();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + Double.POSITIVE_INFINITY + "'", double2 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + Double.POSITIVE_INFINITY + "'", double9 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
    }

    @Test
    public void test06434() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06434");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex1 = complex0.cosh();
        org.apache.commons.math.complex.Complex complex2 = complex0.log();
        org.apache.commons.math.complex.Complex complex3 = complex0.sin();
        org.apache.commons.math.complex.Complex complex4 = complex0.log();
        org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex6 = complex5.sqrt();
        org.apache.commons.math.complex.Complex complex7 = complex0.divide(complex6);
        org.apache.commons.math.complex.Complex complex8 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex9 = complex8.cosh();
        org.apache.commons.math.complex.Complex complex10 = complex9.acos();
        double double11 = complex9.getReal();
        org.apache.commons.math.complex.Complex complex12 = complex9.sqrt();
        org.apache.commons.math.complex.Complex complex13 = complex0.pow(complex9);
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex15 = complex14.cosh();
        org.apache.commons.math.complex.Complex complex16 = complex14.log();
        org.apache.commons.math.complex.Complex complex17 = complex16.cos();
        org.apache.commons.math.complex.Complex complex18 = complex9.multiply(complex16);
        org.apache.commons.math.complex.Complex complex19 = complex16.tanh();
        org.apache.commons.math.complex.Complex complex20 = complex19.asin();
        double[] doubleArray26 = new double[] { 0L, '#', 100.0f, 0L, (-1.0d) };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction27 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray26);
        int int28 = polynomialFunction27.degree();
        boolean boolean29 = complex19.equals((java.lang.Object) polynomialFunction27);
        org.apache.commons.math.complex.Complex complex30 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex31 = complex30.cosh();
        double double32 = complex30.abs();
        org.apache.commons.math.complex.Complex complex33 = complex30.conjugate();
        org.apache.commons.math.complex.Complex complex34 = complex33.conjugate();
        boolean boolean35 = complex33.isInfinite();
        org.apache.commons.math.complex.Complex complex36 = complex33.asin();
        boolean boolean37 = complex33.isNaN();
        org.apache.commons.math.complex.Complex complex38 = complex33.negate();
        org.apache.commons.math.complex.Complex complex39 = complex19.pow(complex38);
        org.apache.commons.math.complex.Complex complex40 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex41 = complex40.cosh();
        double double42 = complex40.abs();
        org.apache.commons.math.complex.Complex complex43 = complex40.conjugate();
        org.apache.commons.math.complex.Complex complex44 = complex43.conjugate();
        org.apache.commons.math.complex.Complex complex45 = complex43.tanh();
        org.apache.commons.math.complex.Complex complex46 = complex45.tan();
        org.apache.commons.math.complex.Complex complex47 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex48 = complex47.cosh();
        double double49 = complex47.abs();
        org.apache.commons.math.complex.Complex complex50 = complex47.conjugate();
        org.apache.commons.math.complex.Complex complex51 = complex50.conjugate();
        org.apache.commons.math.complex.Complex complex52 = complex46.subtract(complex50);
        org.apache.commons.math.complex.Complex complex53 = complex50.negate();
        boolean boolean54 = complex53.isNaN();
        org.apache.commons.math.complex.Complex complex55 = complex19.pow(complex53);
        org.apache.commons.math.complex.Complex complex56 = complex19.acos();
        org.apache.commons.math.complex.Complex complex57 = complex19.sin();
        double double58 = complex19.getReal();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[0.0, 35.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 4 + "'", int28 == 4);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + Double.POSITIVE_INFINITY + "'", double32 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + Double.POSITIVE_INFINITY + "'", double42 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + Double.POSITIVE_INFINITY + "'", double49 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertTrue(Double.isNaN(double58));
    }

    @Test
    public void test06435() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06435");
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException2 = new org.apache.commons.math.FunctionEvaluationException(2.5745724768217308E82d, "org.apache.commons.math.MaxIterationsExceededException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.FunctionEvaluationException: ");
    }

    @Test
    public void test06436() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06436");
        double[] doubleArray2 = new double[] { (byte) -1, '#' };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction4 = polynomialFunction3.polynomialDerivative();
        double[] doubleArray5 = polynomialFunction3.getCoefficients();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray5);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction7 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray5);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction8 = polynomialFunction7.polynomialDerivative();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction9 = polynomialFunction8.polynomialDerivative();
        int int10 = polynomialFunction8.degree();
        double double12 = polynomialFunction8.value(10101.0d);
        double[] doubleArray13 = polynomialFunction8.getCoefficients();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction14 = polynomialFunction8.polynomialDerivative();
        double[] doubleArray15 = polynomialFunction8.getCoefficients();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[-1.0, 35.0]");
        org.junit.Assert.assertNotNull(polynomialFunction4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[-1.0, 35.0]");
        org.junit.Assert.assertNotNull(polynomialFunction8);
        org.junit.Assert.assertNotNull(polynomialFunction9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 35.0d + "'", double12 == 35.0d);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[35.0]");
        org.junit.Assert.assertNotNull(polynomialFunction14);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[35.0]");
    }

    @Test
    public void test06437() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06437");
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException4 = new org.apache.commons.math.FunctionEvaluationException(64.0d, "org.apache.commons.math.MaxIterationsExceededException: ");
        org.apache.commons.math.ConvergenceException convergenceException5 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) functionEvaluationException4);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException6 = new org.apache.commons.math.FunctionEvaluationException((-2.84205213599E11d), "", (java.lang.Throwable) convergenceException5);
        java.lang.Class<?> wildcardClass7 = convergenceException5.getClass();
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test06438() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06438");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex1 = complex0.sqrt();
        org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex3 = complex2.cosh();
        double double4 = complex2.abs();
        org.apache.commons.math.complex.Complex complex5 = complex2.conjugate();
        org.apache.commons.math.complex.Complex complex6 = complex0.divide(complex5);
        org.apache.commons.math.complex.Complex complex7 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex8 = complex7.cosh();
        org.apache.commons.math.complex.Complex complex9 = complex7.log();
        org.apache.commons.math.complex.Complex complex10 = complex7.sin();
        org.apache.commons.math.complex.Complex complex11 = complex7.log();
        org.apache.commons.math.complex.Complex complex12 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex13 = complex12.sqrt();
        org.apache.commons.math.complex.Complex complex14 = complex7.divide(complex13);
        org.apache.commons.math.complex.Complex complex15 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex16 = complex15.cosh();
        double double17 = complex15.abs();
        org.apache.commons.math.complex.Complex complex18 = complex15.conjugate();
        org.apache.commons.math.complex.Complex complex19 = complex18.conjugate();
        org.apache.commons.math.complex.Complex complex20 = complex14.subtract(complex19);
        org.apache.commons.math.complex.Complex complex21 = complex6.multiply(complex14);
        org.apache.commons.math.complex.Complex complex22 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex23 = complex22.cosh();
        org.apache.commons.math.complex.Complex complex24 = complex22.log();
        org.apache.commons.math.complex.Complex complex25 = complex24.cos();
        double double26 = complex25.abs();
        org.apache.commons.math.complex.Complex complex27 = complex25.sqrt();
        org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex29 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex30 = complex29.sqrt();
        org.apache.commons.math.complex.Complex complex31 = complex30.sin();
        org.apache.commons.math.complex.Complex complex32 = complex28.pow(complex30);
        org.apache.commons.math.complex.Complex complex33 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex34 = complex33.cosh();
        org.apache.commons.math.complex.Complex complex35 = complex33.log();
        org.apache.commons.math.complex.Complex complex36 = complex28.divide(complex35);
        org.apache.commons.math.complex.Complex complex37 = complex27.subtract(complex36);
        org.apache.commons.math.complex.Complex complex38 = complex14.pow(complex27);
        org.apache.commons.math.complex.Complex complex39 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex40 = complex39.sqrt();
        org.apache.commons.math.complex.Complex complex41 = complex40.sin();
        org.apache.commons.math.complex.Complex complex42 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex43 = complex42.sqrt();
        org.apache.commons.math.complex.Complex complex44 = complex43.sin();
        org.apache.commons.math.complex.Complex complex45 = complex40.multiply(complex43);
        org.apache.commons.math.complex.Complex complex46 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex47 = complex46.exp();
        org.apache.commons.math.complex.Complex complex48 = complex40.subtract(complex46);
        org.apache.commons.math.complex.Complex complex49 = complex27.divide(complex46);
        org.apache.commons.math.complex.Complex complex50 = complex46.log();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + Double.POSITIVE_INFINITY + "'", double4 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + Double.POSITIVE_INFINITY + "'", double17 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
    }

    @Test
    public void test06439() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06439");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex1 = complex0.cosh();
        double double2 = complex0.abs();
        org.apache.commons.math.complex.Complex complex3 = complex0.conjugate();
        org.apache.commons.math.complex.Complex complex4 = complex3.conjugate();
        boolean boolean5 = complex3.isInfinite();
        org.apache.commons.math.complex.Complex complex6 = complex3.asin();
        boolean boolean7 = complex3.isNaN();
        org.apache.commons.math.complex.Complex complex8 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex9 = complex8.cosh();
        org.apache.commons.math.complex.Complex complex10 = complex3.divide(complex8);
        org.apache.commons.math.complex.Complex complex11 = complex3.sinh();
        org.apache.commons.math.complex.Complex complex12 = complex11.negate();
        org.apache.commons.math.complex.Complex complex13 = complex11.exp();
        org.apache.commons.math.complex.Complex complex14 = complex11.cosh();
        org.apache.commons.math.complex.Complex complex15 = complex14.sqrt();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + Double.POSITIVE_INFINITY + "'", double2 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
    }

    @Test
    public void test06440() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06440");
        double[] doubleArray5 = new double[] { 0L, '#', 100.0f, 0L, (-1.0d) };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray5);
        int int7 = polynomialFunction6.degree();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction8 = polynomialFunction6.polynomialDerivative();
        double double10 = polynomialFunction6.value((double) 100.0f);
        double[] doubleArray11 = polynomialFunction6.getCoefficients();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction12 = polynomialFunction6.polynomialDerivative();
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction13 = polynomialFunction6.derivative();
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[0.0, 35.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 4 + "'", int7 == 4);
        org.junit.Assert.assertNotNull(polynomialFunction8);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + (-9.89965E7d) + "'", double10 == (-9.89965E7d));
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.0, 35.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(polynomialFunction12);
        org.junit.Assert.assertNotNull(univariateRealFunction13);
    }

    @Test
    public void test06441() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06441");
        double[] doubleArray2 = new double[] { (byte) 1, 100 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) (short) 100);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver6 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction3);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction7 = laguerreSolver6.getPolynomialFunction();
        laguerreSolver6.setRelativeAccuracy((double) 0);
        double[] doubleArray12 = new double[] { (byte) -1, '#' };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction13 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray12);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction14 = polynomialFunction13.polynomialDerivative();
        double[] doubleArray15 = polynomialFunction13.getCoefficients();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction16 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray15);
        org.apache.commons.math.complex.Complex[] complexArray18 = laguerreSolver6.solveAll(doubleArray15, (double) 4);
        laguerreSolver6.setAbsoluteAccuracy((double) 1);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction21 = laguerreSolver6.getPolynomialFunction();
        laguerreSolver6.setFunctionValueAccuracy(101.0d);
        double double24 = laguerreSolver6.getRelativeAccuracy();
        int int25 = laguerreSolver6.getMaximalIterationCount();
        // The following exception was thrown during execution in test generation
        try {
            double double28 = laguerreSolver6.solve((double) 35, (-308899.0d));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Endpoints do not specify an interval: [35.0,-308899.0]");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 10001.0d + "'", double5 == 10001.0d);
        org.junit.Assert.assertNotNull(polynomialFunction7);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[-1.0, 35.0]");
        org.junit.Assert.assertNotNull(polynomialFunction14);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[-1.0, 35.0]");
        org.junit.Assert.assertNotNull(complexArray18);
        org.junit.Assert.assertNotNull(polynomialFunction21);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.0d + "'", double24 == 0.0d);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 100 + "'", int25 == 100);
    }

    @Test
    public void test06442() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06442");
        double[] doubleArray2 = new double[] { (byte) 1, 100 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) (short) 100);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver6 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction3);
        double[] doubleArray7 = polynomialFunction3.getCoefficients();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction8 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray7);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver9 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction8);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction10 = polynomialFunction8.polynomialDerivative();
        double double12 = polynomialFunction10.value((double) 100.0f);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 10001.0d + "'", double5 == 10001.0d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(polynomialFunction10);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 100.0d + "'", double12 == 100.0d);
    }

    @Test
    public void test06443() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06443");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex1 = complex0.cosh();
        org.apache.commons.math.complex.Complex complex2 = complex1.acos();
        double double3 = complex1.getReal();
        org.apache.commons.math.complex.Complex complex4 = complex1.sqrt();
        org.apache.commons.math.complex.Complex complex5 = complex4.tan();
        org.apache.commons.math.complex.Complex complex6 = complex4.exp();
        org.apache.commons.math.complex.Complex complex7 = complex6.acos();
        org.apache.commons.math.complex.Complex complex8 = complex7.cosh();
        org.apache.commons.math.complex.Complex complex9 = complex8.tan();
        org.apache.commons.math.complex.Complex complex10 = complex8.cos();
        org.apache.commons.math.complex.Complex complex11 = complex8.negate();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
    }

    @Test
    public void test06444() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06444");
        double[] doubleArray5 = new double[] { 0L, '#', 100.0f, 0L, (-1.0d) };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray5);
        double double8 = polynomialFunction6.value((double) 0);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver9 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        double[] doubleArray12 = new double[] { (byte) 1, 100 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction13 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray12);
        double double15 = polynomialFunction13.value((double) (short) 100);
        double[] doubleArray16 = polynomialFunction13.getCoefficients();
        org.apache.commons.math.complex.Complex[] complexArray18 = laguerreSolver9.solveAll(doubleArray16, (double) (short) 10);
        int int19 = laguerreSolver9.getMaximalIterationCount();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction20 = laguerreSolver9.getPolynomialFunction();
        double double22 = polynomialFunction20.value(1.0001d);
        double double24 = polynomialFunction20.value((double) 4);
        double double26 = polynomialFunction20.value(1001.0d);
        double double28 = polynomialFunction20.value((double) 0);
        double double30 = polynomialFunction20.value(21.0d);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[0.0, 35.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 10001.0d + "'", double15 == 10001.0d);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(complexArray18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 100 + "'", int19 == 100);
        org.junit.Assert.assertNotNull(polynomialFunction20);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 134.02310093999603d + "'", double22 == 134.02310093999603d);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 1484.0d + "'", double24 == 1484.0d);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + (-1.003905768866E12d) + "'", double26 == (-1.003905768866E12d));
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + (-149646.0d) + "'", double30 == (-149646.0d));
    }

    @Test
    public void test06445() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06445");
        double[] doubleArray2 = new double[] { (byte) 1, 100 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) (short) 100);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver6 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction3);
        double double10 = laguerreSolver6.solve((double) (-1L), 349.0d, (double) (short) 10);
        double double11 = laguerreSolver6.getResult();
        double double12 = laguerreSolver6.getFunctionValueAccuracy();
        laguerreSolver6.resetRelativeAccuracy();
        double double14 = laguerreSolver6.getAbsoluteAccuracy();
        double double15 = laguerreSolver6.getAbsoluteAccuracy();
        double double16 = laguerreSolver6.getAbsoluteAccuracy();
        double[] doubleArray26 = new double[] { (byte) 1, 100 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction27 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray26);
        double double29 = polynomialFunction27.value((double) (short) 100);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver30 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction27);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction31 = laguerreSolver30.getPolynomialFunction();
        laguerreSolver30.setRelativeAccuracy((double) 0);
        double[] doubleArray36 = new double[] { (byte) -1, '#' };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction37 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray36);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction38 = polynomialFunction37.polynomialDerivative();
        double[] doubleArray39 = polynomialFunction37.getCoefficients();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction40 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray39);
        org.apache.commons.math.complex.Complex[] complexArray42 = laguerreSolver30.solveAll(doubleArray39, (double) 4);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException43 = new org.apache.commons.math.FunctionEvaluationException((double) 1L, "org.apache.commons.math.FunctionEvaluationException: ", (java.lang.Object[]) complexArray42);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException44 = new org.apache.commons.math.MaxIterationsExceededException(0, "org.apache.commons.math.ConvergenceException: hi!", (java.lang.Object[]) complexArray42);
        org.apache.commons.math.ConvergenceException convergenceException45 = new org.apache.commons.math.ConvergenceException("", (java.lang.Object[]) complexArray42);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException46 = new org.apache.commons.math.FunctionEvaluationException((-1461412.0d), "org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: ", (java.lang.Object[]) complexArray42);
        org.apache.commons.math.complex.Complex complex47 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex48 = complex47.sqrt();
        org.apache.commons.math.complex.Complex complex49 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex50 = complex49.cosh();
        double double51 = complex49.abs();
        org.apache.commons.math.complex.Complex complex52 = complex49.conjugate();
        org.apache.commons.math.complex.Complex complex53 = complex52.conjugate();
        org.apache.commons.math.complex.Complex complex54 = complex52.tanh();
        org.apache.commons.math.complex.Complex complex55 = complex54.tan();
        org.apache.commons.math.complex.Complex complex56 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex57 = complex56.cosh();
        double double58 = complex56.abs();
        org.apache.commons.math.complex.Complex complex59 = complex56.conjugate();
        org.apache.commons.math.complex.Complex complex60 = complex59.conjugate();
        org.apache.commons.math.complex.Complex complex61 = complex55.subtract(complex59);
        org.apache.commons.math.complex.Complex complex62 = complex55.sinh();
        org.apache.commons.math.complex.Complex complex63 = complex62.acos();
        org.apache.commons.math.complex.Complex complex64 = complex62.tan();
        org.apache.commons.math.complex.Complex complex65 = complex47.divide(complex64);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.complex.Complex[] complexArray66 = laguerreSolver6.solveAll(complexArray42, complex65);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Polynomial degree must be positive: degree=0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 10001.0d + "'", double5 == 10001.0d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + (-0.01d) + "'", double10 == (-0.01d));
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + (-0.01d) + "'", double11 == (-0.01d));
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 1.0E-15d + "'", double12 == 1.0E-15d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 1.0E-6d + "'", double14 == 1.0E-6d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 1.0E-6d + "'", double15 == 1.0E-6d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 1.0E-6d + "'", double16 == 1.0E-6d);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 10001.0d + "'", double29 == 10001.0d);
        org.junit.Assert.assertNotNull(polynomialFunction31);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[-1.0, 35.0]");
        org.junit.Assert.assertNotNull(polynomialFunction38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[-1.0, 35.0]");
        org.junit.Assert.assertNotNull(complexArray42);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + Double.POSITIVE_INFINITY + "'", double51 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + Double.POSITIVE_INFINITY + "'", double58 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complex65);
    }

    @Test
    public void test06446() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06446");
        double[] doubleArray5 = new double[] { 0L, '#', 100.0f, 0L, (-1.0d) };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray5);
        double double8 = polynomialFunction6.value((double) 0);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver9 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        double[] doubleArray12 = new double[] { (byte) 1, 100 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction13 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray12);
        double double15 = polynomialFunction13.value((double) (short) 100);
        double[] doubleArray16 = polynomialFunction13.getCoefficients();
        org.apache.commons.math.complex.Complex[] complexArray18 = laguerreSolver9.solveAll(doubleArray16, (double) (short) 10);
        int int19 = laguerreSolver9.getMaximalIterationCount();
        laguerreSolver9.setRelativeAccuracy((double) 18);
        laguerreSolver9.setAbsoluteAccuracy(1.0300000099E10d);
        int int24 = laguerreSolver9.getMaximalIterationCount();
        // The following exception was thrown during execution in test generation
        try {
            double double28 = laguerreSolver9.solve((-3.464877501E9d), (-1.0303676599E10d), 384.0d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Endpoints do not specify an interval: [-3.464877501E9,-1.0303676599E10]");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[0.0, 35.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 10001.0d + "'", double15 == 10001.0d);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(complexArray18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 100 + "'", int19 == 100);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 100 + "'", int24 == 100);
    }

    @Test
    public void test06447() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06447");
        java.lang.Object[] objArray9 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException10 = new org.apache.commons.math.ConvergenceException("", objArray9);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException11 = new org.apache.commons.math.FunctionEvaluationException((double) (short) 10, "hi!", objArray9);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException12 = new org.apache.commons.math.FunctionEvaluationException((double) (short) 1, "", objArray9);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException15 = new org.apache.commons.math.FunctionEvaluationException((double) (-1.0f), "org.apache.commons.math.ConvergenceException: hi!");
        org.apache.commons.math.ConvergenceException convergenceException16 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: ", objArray9, (java.lang.Throwable) functionEvaluationException15);
        java.lang.Object[] objArray22 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException23 = new org.apache.commons.math.ConvergenceException("", objArray22);
        java.lang.Object[] objArray25 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException26 = new org.apache.commons.math.ConvergenceException("", objArray25);
        org.apache.commons.math.ConvergenceException convergenceException27 = new org.apache.commons.math.ConvergenceException("", objArray22, (java.lang.Throwable) convergenceException26);
        org.apache.commons.math.ConvergenceException convergenceException28 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.FunctionEvaluationException: ", objArray22);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException31 = new org.apache.commons.math.FunctionEvaluationException((double) 1, "org.apache.commons.math.MaxIterationsExceededException: org.apache.commons.math.FunctionEvaluationException: ");
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException32 = new org.apache.commons.math.FunctionEvaluationException((double) 3, "org.apache.commons.math.FunctionEvaluationException: org.apache.commons.math.FunctionEvaluationException: ", objArray22, (java.lang.Throwable) functionEvaluationException31);
        org.apache.commons.math.ConvergenceException convergenceException33 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.MaxIterationsExceededException: org.apache.commons.math.FunctionEvaluationException: ", objArray9, (java.lang.Throwable) functionEvaluationException31);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException34 = new org.apache.commons.math.FunctionEvaluationException(734.0d, "org.apache.commons.math.ConvergenceException: org.apache.commons.math.FunctionEvaluationException: org.apache.commons.math.MaxIterationsExceededException: org.apache.commons.math.FunctionEvaluationException: ", (java.lang.Throwable) functionEvaluationException31);
        java.lang.String str35 = functionEvaluationException31.toString();
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[]");
        org.junit.Assert.assertNotNull(objArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray22), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray22), "[]");
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "org.apache.commons.math.FunctionEvaluationException: org.apache.commons.math.MaxIterationsExceededException: org.apache.commons.math.FunctionEvaluationException: " + "'", str35, "org.apache.commons.math.FunctionEvaluationException: org.apache.commons.math.MaxIterationsExceededException: org.apache.commons.math.FunctionEvaluationException: ");
    }

    @Test
    public void test06448() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06448");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((-3.2273645162588404E16d), 0.0d);
    }

    @Test
    public void test06449() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06449");
        double[] doubleArray2 = new double[] { (byte) -1, '#' };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction4 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver5 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction4);
        laguerreSolver5.setAbsoluteAccuracy(0.0d);
        laguerreSolver5.resetRelativeAccuracy();
        laguerreSolver5.setMaximalIterationCount(18);
        laguerreSolver5.setRelativeAccuracy((-24.0d));
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[-1.0, 35.0]");
        org.junit.Assert.assertNotNull(polynomialFunction4);
    }

    @Test
    public void test06450() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06450");
        java.lang.Object[] objArray9 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException10 = new org.apache.commons.math.ConvergenceException("", objArray9);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException11 = new org.apache.commons.math.FunctionEvaluationException((double) (short) 10, "hi!", objArray9);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException12 = new org.apache.commons.math.MaxIterationsExceededException((int) (byte) 0, "org.apache.commons.math.ConvergenceException: hi!", objArray9);
        java.lang.Object[] objArray13 = maxIterationsExceededException12.getArguments();
        int int14 = maxIterationsExceededException12.getMaxIterations();
        java.lang.Throwable[] throwableArray15 = maxIterationsExceededException12.getSuppressed();
        org.apache.commons.math.ConvergenceException convergenceException16 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: ", (java.lang.Object[]) throwableArray15);
        java.lang.Object[] objArray21 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException22 = new org.apache.commons.math.ConvergenceException("", objArray21);
        java.lang.Object[] objArray27 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException28 = new org.apache.commons.math.ConvergenceException("", objArray27);
        java.lang.Object[] objArray30 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException31 = new org.apache.commons.math.ConvergenceException("", objArray30);
        org.apache.commons.math.ConvergenceException convergenceException32 = new org.apache.commons.math.ConvergenceException("", objArray27, (java.lang.Throwable) convergenceException31);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException34 = new org.apache.commons.math.FunctionEvaluationException((double) 100);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException35 = new org.apache.commons.math.FunctionEvaluationException(100.0d, "org.apache.commons.math.ConvergenceException: hi!", objArray27, (java.lang.Throwable) functionEvaluationException34);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException36 = new org.apache.commons.math.FunctionEvaluationException((double) '#', "", objArray21, (java.lang.Throwable) functionEvaluationException35);
        java.lang.String str37 = functionEvaluationException36.getPattern();
        double double38 = functionEvaluationException36.getArgument();
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException39 = new org.apache.commons.math.FunctionEvaluationException((double) (byte) 0, (java.lang.Throwable) functionEvaluationException36);
        java.lang.Object[] objArray42 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException43 = new org.apache.commons.math.ConvergenceException("", objArray42);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException44 = new org.apache.commons.math.FunctionEvaluationException(10.0d, (java.lang.Throwable) convergenceException43);
        functionEvaluationException39.addSuppressed((java.lang.Throwable) functionEvaluationException44);
        org.apache.commons.math.ConvergenceException convergenceException46 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: Convergence failed", (java.lang.Object[]) throwableArray15, (java.lang.Throwable) functionEvaluationException44);
        double double47 = functionEvaluationException44.getArgument();
        org.apache.commons.math.ConvergenceException convergenceException48 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.MaxIterationsExceededException: Maximal number of iterations (52) exceeded", (java.lang.Throwable) functionEvaluationException44);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException49 = new org.apache.commons.math.FunctionEvaluationException(0.0d, (java.lang.Throwable) functionEvaluationException44);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[]");
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray21), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray21), "[]");
        org.junit.Assert.assertNotNull(objArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray27), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray27), "[]");
        org.junit.Assert.assertNotNull(objArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray30), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray30), "[]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 35.0d + "'", double38 == 35.0d);
        org.junit.Assert.assertNotNull(objArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray42), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray42), "[]");
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 10.0d + "'", double47 == 10.0d);
    }

    @Test
    public void test06451() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06451");
        double[] doubleArray2 = new double[] { (byte) 1, 100 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver4 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction3);
        laguerreSolver4.resetAbsoluteAccuracy();
        double[] doubleArray8 = new double[] { (byte) 1, 100 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction9 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray8);
        double double11 = polynomialFunction9.value((double) (short) 100);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver12 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction9);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction13 = laguerreSolver12.getPolynomialFunction();
        laguerreSolver12.resetRelativeAccuracy();
        double[] doubleArray20 = new double[] { 0L, '#', 100.0f, 0L, (-1.0d) };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction21 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray20);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction22 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray20);
        org.apache.commons.math.complex.Complex[] complexArray24 = laguerreSolver12.solveAll(doubleArray20, 101.0d);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction25 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray20);
        org.apache.commons.math.complex.Complex[] complexArray27 = laguerreSolver4.solveAll(doubleArray20, 10101.0d);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction28 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray20);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction29 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray20);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 10001.0d + "'", double11 == 10001.0d);
        org.junit.Assert.assertNotNull(polynomialFunction13);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[0.0, 35.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(complexArray24);
        org.junit.Assert.assertNotNull(complexArray27);
    }

    @Test
    public void test06452() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06452");
        java.lang.Object[] objArray14 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException15 = new org.apache.commons.math.ConvergenceException("", objArray14);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException16 = new org.apache.commons.math.MaxIterationsExceededException(0, "hi!", objArray14);
        org.apache.commons.math.ConvergenceException convergenceException18 = new org.apache.commons.math.ConvergenceException("");
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException19 = new org.apache.commons.math.FunctionEvaluationException((double) (short) 0, "hi!", objArray14, (java.lang.Throwable) convergenceException18);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException20 = new org.apache.commons.math.MaxIterationsExceededException((int) (byte) 100, "", objArray14);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException21 = new org.apache.commons.math.FunctionEvaluationException(1.0d, "", objArray14);
        java.lang.Object[] objArray31 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException32 = new org.apache.commons.math.ConvergenceException("", objArray31);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException33 = new org.apache.commons.math.MaxIterationsExceededException(0, "hi!", objArray31);
        org.apache.commons.math.ConvergenceException convergenceException35 = new org.apache.commons.math.ConvergenceException("");
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException36 = new org.apache.commons.math.FunctionEvaluationException((double) (short) 0, "hi!", objArray31, (java.lang.Throwable) convergenceException35);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException37 = new org.apache.commons.math.MaxIterationsExceededException((int) (byte) 100, "", objArray31);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException38 = new org.apache.commons.math.FunctionEvaluationException(1.0d, "", objArray31);
        org.apache.commons.math.ConvergenceException convergenceException39 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.MaxIterationsExceededException: ", objArray14, (java.lang.Throwable) functionEvaluationException38);
        java.lang.Throwable[] throwableArray40 = functionEvaluationException38.getSuppressed();
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException41 = new org.apache.commons.math.MaxIterationsExceededException(10, "", (java.lang.Object[]) throwableArray40);
        java.lang.Object[] objArray47 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException48 = new org.apache.commons.math.ConvergenceException("", objArray47);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException49 = new org.apache.commons.math.FunctionEvaluationException(10.0d, (java.lang.Throwable) convergenceException48);
        java.lang.Object[] objArray50 = functionEvaluationException49.getArguments();
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException51 = new org.apache.commons.math.MaxIterationsExceededException(0, "org.apache.commons.math.MaxIterationsExceededException: org.apache.commons.math.FunctionEvaluationException: ", objArray50);
        java.lang.Throwable[] throwableArray52 = maxIterationsExceededException51.getSuppressed();
        int int53 = maxIterationsExceededException51.getMaxIterations();
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException54 = new org.apache.commons.math.FunctionEvaluationException((double) (short) 1, (java.lang.Throwable) maxIterationsExceededException51);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException55 = new org.apache.commons.math.FunctionEvaluationException(100.0d, "org.apache.commons.math.FunctionEvaluationException: org.apache.commons.math.ConvergenceException: hi!", (java.lang.Object[]) throwableArray40, (java.lang.Throwable) functionEvaluationException54);
        double double56 = functionEvaluationException54.getArgument();
        java.lang.Object[] objArray57 = functionEvaluationException54.getArguments();
        org.apache.commons.math.ConvergenceException convergenceException58 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) functionEvaluationException54);
        double double59 = functionEvaluationException54.getArgument();
        java.lang.String str60 = functionEvaluationException54.toString();
        org.junit.Assert.assertNotNull(objArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray14), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray14), "[]");
        org.junit.Assert.assertNotNull(objArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray31), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray31), "[]");
        org.junit.Assert.assertNotNull(throwableArray40);
        org.junit.Assert.assertNotNull(objArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray47), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray47), "[]");
        org.junit.Assert.assertNotNull(objArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray50), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray50), "[]");
        org.junit.Assert.assertNotNull(throwableArray52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 1.0d + "'", double56 == 1.0d);
        org.junit.Assert.assertNotNull(objArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray57), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray57), "[]");
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 1.0d + "'", double59 == 1.0d);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "org.apache.commons.math.FunctionEvaluationException: org.apache.commons.math.MaxIterationsExceededException: org.apache.commons.math.FunctionEvaluationException: " + "'", str60, "org.apache.commons.math.FunctionEvaluationException: org.apache.commons.math.MaxIterationsExceededException: org.apache.commons.math.FunctionEvaluationException: ");
    }

    @Test
    public void test06453() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06453");
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException2 = new org.apache.commons.math.FunctionEvaluationException((double) 2, "org.apache.commons.math.FunctionEvaluationException: org.apache.commons.math.MaxIterationsExceededException: ");
    }

    @Test
    public void test06454() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06454");
        double[] doubleArray2 = new double[] { (byte) 1, 100 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) (short) 100);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver6 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction3);
        double double10 = laguerreSolver6.solve((double) (-1L), 349.0d, (double) (short) 10);
        laguerreSolver6.setMaximalIterationCount((int) '#');
        double double13 = laguerreSolver6.getAbsoluteAccuracy();
        laguerreSolver6.setFunctionValueAccuracy((double) (short) -1);
        double double16 = laguerreSolver6.getRelativeAccuracy();
        double[] doubleArray19 = new double[] { (byte) 1, 100 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction20 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray19);
        double double22 = polynomialFunction20.value((double) (short) 100);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver23 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction20);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction24 = laguerreSolver23.getPolynomialFunction();
        double double25 = laguerreSolver23.getRelativeAccuracy();
        laguerreSolver23.resetRelativeAccuracy();
        laguerreSolver23.setRelativeAccuracy((double) (short) 1);
        laguerreSolver23.setMaximalIterationCount((int) ' ');
        double double31 = laguerreSolver23.getFunctionValueAccuracy();
        double[] doubleArray37 = new double[] { 0L, '#', 100.0f, 0L, (-1.0d) };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction38 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray37);
        double double40 = polynomialFunction38.value((double) 0);
        double double42 = polynomialFunction38.value((double) (byte) 0);
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction43 = polynomialFunction38.derivative();
        double double45 = polynomialFunction38.value((double) 1L);
        double[] doubleArray46 = polynomialFunction38.getCoefficients();
        org.apache.commons.math.complex.Complex[] complexArray48 = laguerreSolver23.solveAll(doubleArray46, (-9.820178719278598d));
        org.apache.commons.math.complex.Complex complex49 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex50 = complex49.cosh();
        double double51 = complex49.abs();
        org.apache.commons.math.complex.Complex complex52 = complex49.conjugate();
        org.apache.commons.math.complex.Complex complex53 = complex52.conjugate();
        boolean boolean54 = complex52.isInfinite();
        org.apache.commons.math.complex.Complex complex55 = complex52.cos();
        org.apache.commons.math.complex.Complex complex56 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex57 = complex56.cosh();
        double double58 = complex56.abs();
        org.apache.commons.math.complex.Complex complex59 = complex56.conjugate();
        org.apache.commons.math.complex.Complex complex60 = complex59.conjugate();
        boolean boolean61 = complex59.isInfinite();
        org.apache.commons.math.complex.Complex complex62 = complex59.asin();
        boolean boolean63 = complex59.isNaN();
        org.apache.commons.math.complex.Complex complex64 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex65 = complex64.cosh();
        org.apache.commons.math.complex.Complex complex66 = complex59.divide(complex64);
        org.apache.commons.math.complex.Complex complex67 = complex55.divide(complex64);
        org.apache.commons.math.complex.Complex complex68 = complex67.conjugate();
        double double69 = complex68.abs();
        org.apache.commons.math.complex.Complex complex70 = complex68.log();
        org.apache.commons.math.complex.Complex complex71 = complex70.asin();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.complex.Complex complex72 = laguerreSolver6.solve(complexArray48, complex71);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.MaxIterationsExceededException; message: Maximal number of iterations (35) exceeded");
        } catch (org.apache.commons.math.MaxIterationsExceededException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 10001.0d + "'", double5 == 10001.0d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + (-0.01d) + "'", double10 == (-0.01d));
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 1.0E-6d + "'", double13 == 1.0E-6d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 1.0E-14d + "'", double16 == 1.0E-14d);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 10001.0d + "'", double22 == 10001.0d);
        org.junit.Assert.assertNotNull(polynomialFunction24);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 1.0E-14d + "'", double25 == 1.0E-14d);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 1.0E-15d + "'", double31 == 1.0E-15d);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[0.0, 35.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 0.0d + "'", double40 == 0.0d);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.0d + "'", double42 == 0.0d);
        org.junit.Assert.assertNotNull(univariateRealFunction43);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 134.0d + "'", double45 == 134.0d);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[0.0, 35.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(complexArray48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + Double.POSITIVE_INFINITY + "'", double51 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + Double.POSITIVE_INFINITY + "'", double58 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertTrue(Double.isNaN(double69));
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertNotNull(complex71);
    }

    @Test
    public void test06455() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06455");
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException2 = new org.apache.commons.math.FunctionEvaluationException((-3.2273645162588404E16d), "org.apache.commons.math.ConvergenceException: org.apache.commons.math.FunctionEvaluationException: org.apache.commons.math.FunctionEvaluationException: org.apache.commons.math.FunctionEvaluationException: ");
    }

    @Test
    public void test06456() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06456");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex1 = complex0.cosh();
        double double2 = complex0.abs();
        org.apache.commons.math.complex.Complex complex3 = complex0.conjugate();
        org.apache.commons.math.complex.Complex complex4 = complex3.conjugate();
        org.apache.commons.math.complex.Complex complex5 = complex3.tanh();
        org.apache.commons.math.complex.Complex complex6 = complex5.tan();
        org.apache.commons.math.complex.Complex complex7 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex8 = complex7.cosh();
        double double9 = complex7.abs();
        org.apache.commons.math.complex.Complex complex10 = complex7.conjugate();
        org.apache.commons.math.complex.Complex complex11 = complex10.conjugate();
        org.apache.commons.math.complex.Complex complex12 = complex6.subtract(complex10);
        org.apache.commons.math.complex.Complex complex13 = complex10.negate();
        org.apache.commons.math.complex.Complex complex14 = complex10.tanh();
        org.apache.commons.math.complex.Complex complex15 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex16 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex17 = complex16.sqrt();
        org.apache.commons.math.complex.Complex complex18 = complex17.sin();
        org.apache.commons.math.complex.Complex complex19 = complex15.pow(complex17);
        org.apache.commons.math.complex.Complex complex20 = complex19.asin();
        org.apache.commons.math.complex.Complex complex21 = complex20.atan();
        boolean boolean22 = complex21.isInfinite();
        org.apache.commons.math.complex.Complex complex23 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex24 = complex21.subtract(complex23);
        org.apache.commons.math.complex.Complex complex25 = complex23.tan();
        org.apache.commons.math.complex.Complex complex26 = complex10.pow(complex23);
        org.apache.commons.math.complex.Complex complex27 = complex10.cos();
        org.apache.commons.math.complex.Complex complex28 = complex10.exp();
        java.lang.Class<?> wildcardClass29 = complex28.getClass();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + Double.POSITIVE_INFINITY + "'", double2 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + Double.POSITIVE_INFINITY + "'", double9 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(wildcardClass29);
    }

    @Test
    public void test06457() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06457");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex1 = complex0.cosh();
        double double2 = complex0.abs();
        org.apache.commons.math.complex.Complex complex3 = complex0.conjugate();
        org.apache.commons.math.complex.Complex complex4 = complex3.conjugate();
        boolean boolean5 = complex3.isInfinite();
        org.apache.commons.math.complex.Complex complex6 = complex3.cos();
        org.apache.commons.math.complex.Complex complex7 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex8 = complex7.cosh();
        double double9 = complex7.abs();
        org.apache.commons.math.complex.Complex complex10 = complex7.conjugate();
        org.apache.commons.math.complex.Complex complex11 = complex10.conjugate();
        boolean boolean12 = complex10.isInfinite();
        org.apache.commons.math.complex.Complex complex13 = complex10.asin();
        boolean boolean14 = complex10.isNaN();
        org.apache.commons.math.complex.Complex complex15 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex16 = complex15.cosh();
        org.apache.commons.math.complex.Complex complex17 = complex10.divide(complex15);
        org.apache.commons.math.complex.Complex complex18 = complex6.divide(complex15);
        org.apache.commons.math.complex.Complex complex19 = complex18.conjugate();
        double double20 = complex19.abs();
        org.apache.commons.math.complex.Complex complex21 = complex19.log();
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException24 = new org.apache.commons.math.FunctionEvaluationException(134.0d, "org.apache.commons.math.ConvergenceException: hi!");
        boolean boolean25 = complex21.equals((java.lang.Object) 134.0d);
        org.apache.commons.math.complex.Complex complex26 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex27 = complex26.sqrt();
        org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex29 = complex28.cosh();
        double double30 = complex28.abs();
        org.apache.commons.math.complex.Complex complex31 = complex28.conjugate();
        org.apache.commons.math.complex.Complex complex32 = complex26.divide(complex31);
        org.apache.commons.math.complex.Complex complex33 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex34 = complex33.cosh();
        org.apache.commons.math.complex.Complex complex35 = complex33.log();
        org.apache.commons.math.complex.Complex complex36 = complex33.sin();
        org.apache.commons.math.complex.Complex complex37 = complex33.log();
        org.apache.commons.math.complex.Complex complex38 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex39 = complex38.sqrt();
        org.apache.commons.math.complex.Complex complex40 = complex33.divide(complex39);
        org.apache.commons.math.complex.Complex complex41 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex42 = complex41.cosh();
        double double43 = complex41.abs();
        org.apache.commons.math.complex.Complex complex44 = complex41.conjugate();
        org.apache.commons.math.complex.Complex complex45 = complex44.conjugate();
        org.apache.commons.math.complex.Complex complex46 = complex40.subtract(complex45);
        org.apache.commons.math.complex.Complex complex47 = complex32.multiply(complex40);
        org.apache.commons.math.complex.Complex complex48 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex49 = complex48.cosh();
        org.apache.commons.math.complex.Complex complex50 = complex48.log();
        org.apache.commons.math.complex.Complex complex51 = complex50.cos();
        double double52 = complex51.abs();
        org.apache.commons.math.complex.Complex complex53 = complex51.sqrt();
        org.apache.commons.math.complex.Complex complex54 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex55 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex56 = complex55.sqrt();
        org.apache.commons.math.complex.Complex complex57 = complex56.sin();
        org.apache.commons.math.complex.Complex complex58 = complex54.pow(complex56);
        org.apache.commons.math.complex.Complex complex59 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex60 = complex59.cosh();
        org.apache.commons.math.complex.Complex complex61 = complex59.log();
        org.apache.commons.math.complex.Complex complex62 = complex54.divide(complex61);
        org.apache.commons.math.complex.Complex complex63 = complex53.subtract(complex62);
        org.apache.commons.math.complex.Complex complex64 = complex40.pow(complex53);
        org.apache.commons.math.complex.Complex complex65 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex66 = complex65.cosh();
        org.apache.commons.math.complex.Complex complex67 = complex66.acos();
        org.apache.commons.math.complex.Complex complex68 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex69 = complex68.cosh();
        org.apache.commons.math.complex.Complex complex70 = complex68.log();
        org.apache.commons.math.complex.Complex complex71 = complex68.sin();
        org.apache.commons.math.complex.Complex complex72 = complex71.tanh();
        org.apache.commons.math.complex.Complex complex73 = complex66.add(complex72);
        org.apache.commons.math.complex.Complex complex74 = complex73.exp();
        org.apache.commons.math.complex.Complex complex75 = complex53.divide(complex73);
        org.apache.commons.math.complex.Complex complex76 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex77 = complex76.cosh();
        org.apache.commons.math.complex.Complex complex78 = complex76.log();
        org.apache.commons.math.complex.Complex complex79 = complex76.sin();
        org.apache.commons.math.complex.Complex complex80 = complex76.log();
        org.apache.commons.math.complex.Complex complex81 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex82 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex83 = complex82.sqrt();
        org.apache.commons.math.complex.Complex complex84 = complex83.sin();
        org.apache.commons.math.complex.Complex complex85 = complex81.pow(complex83);
        org.apache.commons.math.complex.Complex complex86 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex87 = complex86.cosh();
        org.apache.commons.math.complex.Complex complex88 = complex86.log();
        org.apache.commons.math.complex.Complex complex89 = complex81.divide(complex88);
        org.apache.commons.math.complex.Complex complex90 = complex76.subtract(complex88);
        org.apache.commons.math.complex.Complex complex91 = complex90.cosh();
        org.apache.commons.math.complex.Complex complex92 = complex73.multiply(complex91);
        org.apache.commons.math.complex.Complex complex93 = complex92.conjugate();
        double double94 = complex92.abs();
        org.apache.commons.math.complex.Complex complex95 = complex92.conjugate();
        boolean boolean96 = complex21.equals((java.lang.Object) complex92);
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + Double.POSITIVE_INFINITY + "'", double2 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + Double.POSITIVE_INFINITY + "'", double9 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + Double.POSITIVE_INFINITY + "'", double30 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + Double.POSITIVE_INFINITY + "'", double43 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertTrue(Double.isNaN(double52));
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertNotNull(complex75);
        org.junit.Assert.assertNotNull(complex76);
        org.junit.Assert.assertNotNull(complex77);
        org.junit.Assert.assertNotNull(complex78);
        org.junit.Assert.assertNotNull(complex79);
        org.junit.Assert.assertNotNull(complex80);
        org.junit.Assert.assertNotNull(complex81);
        org.junit.Assert.assertNotNull(complex82);
        org.junit.Assert.assertNotNull(complex83);
        org.junit.Assert.assertNotNull(complex84);
        org.junit.Assert.assertNotNull(complex85);
        org.junit.Assert.assertNotNull(complex86);
        org.junit.Assert.assertNotNull(complex87);
        org.junit.Assert.assertNotNull(complex88);
        org.junit.Assert.assertNotNull(complex89);
        org.junit.Assert.assertNotNull(complex90);
        org.junit.Assert.assertNotNull(complex91);
        org.junit.Assert.assertNotNull(complex92);
        org.junit.Assert.assertNotNull(complex93);
        org.junit.Assert.assertTrue(Double.isNaN(double94));
        org.junit.Assert.assertNotNull(complex95);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + true + "'", boolean96 == true);
    }

    @Test
    public void test06458() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06458");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex2 = complex1.sqrt();
        org.apache.commons.math.complex.Complex complex3 = complex2.sin();
        org.apache.commons.math.complex.Complex complex4 = complex0.pow(complex2);
        org.apache.commons.math.complex.Complex complex5 = complex4.asin();
        org.apache.commons.math.complex.Complex complex6 = complex5.atan();
        boolean boolean7 = complex6.isInfinite();
        org.apache.commons.math.complex.Complex complex8 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex9 = complex6.subtract(complex8);
        boolean boolean10 = complex8.isInfinite();
        org.apache.commons.math.complex.Complex complex11 = complex8.tanh();
        org.apache.commons.math.complex.Complex complex12 = complex11.tanh();
        org.apache.commons.math.complex.Complex complex13 = complex11.sqrt1z();
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex15 = complex14.cosh();
        org.apache.commons.math.complex.Complex complex16 = complex14.log();
        org.apache.commons.math.complex.Complex complex17 = complex14.sin();
        org.apache.commons.math.complex.Complex complex18 = complex14.log();
        org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex20 = complex19.sqrt();
        org.apache.commons.math.complex.Complex complex21 = complex14.divide(complex20);
        org.apache.commons.math.complex.Complex complex22 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex23 = complex22.cosh();
        org.apache.commons.math.complex.Complex complex24 = complex23.acos();
        double double25 = complex23.getReal();
        org.apache.commons.math.complex.Complex complex26 = complex23.sqrt();
        org.apache.commons.math.complex.Complex complex27 = complex14.pow(complex23);
        org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex29 = complex28.cosh();
        org.apache.commons.math.complex.Complex complex30 = complex28.log();
        org.apache.commons.math.complex.Complex complex31 = complex30.cos();
        org.apache.commons.math.complex.Complex complex32 = complex23.multiply(complex30);
        org.apache.commons.math.complex.Complex complex33 = complex30.tanh();
        org.apache.commons.math.complex.Complex complex34 = complex33.asin();
        org.apache.commons.math.complex.Complex complex35 = complex33.acos();
        org.apache.commons.math.complex.Complex complex36 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex37 = complex36.cosh();
        double double38 = complex36.abs();
        org.apache.commons.math.complex.Complex complex39 = complex36.conjugate();
        org.apache.commons.math.complex.Complex complex40 = complex39.conjugate();
        boolean boolean41 = complex39.isInfinite();
        org.apache.commons.math.complex.Complex complex42 = complex39.cos();
        org.apache.commons.math.complex.Complex complex43 = complex35.subtract(complex39);
        org.apache.commons.math.complex.Complex complex44 = complex35.sin();
        org.apache.commons.math.complex.Complex complex45 = complex44.cos();
        org.apache.commons.math.complex.Complex complex46 = complex44.log();
        org.apache.commons.math.complex.Complex complex47 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex48 = complex47.cosh();
        double double49 = complex47.abs();
        org.apache.commons.math.complex.Complex complex50 = complex47.conjugate();
        org.apache.commons.math.complex.Complex complex51 = complex50.conjugate();
        org.apache.commons.math.complex.Complex complex52 = complex50.tanh();
        org.apache.commons.math.complex.Complex complex53 = complex52.tan();
        org.apache.commons.math.complex.Complex complex54 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex55 = complex54.cosh();
        double double56 = complex54.abs();
        org.apache.commons.math.complex.Complex complex57 = complex54.conjugate();
        org.apache.commons.math.complex.Complex complex58 = complex57.conjugate();
        org.apache.commons.math.complex.Complex complex59 = complex53.subtract(complex57);
        org.apache.commons.math.complex.Complex complex60 = complex57.negate();
        org.apache.commons.math.complex.Complex complex61 = complex57.tanh();
        org.apache.commons.math.complex.Complex complex62 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex63 = complex62.cosh();
        double double64 = complex62.abs();
        org.apache.commons.math.complex.Complex complex65 = complex62.conjugate();
        org.apache.commons.math.complex.Complex complex66 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex67 = complex66.sqrt();
        boolean boolean68 = complex66.isNaN();
        org.apache.commons.math.complex.Complex complex69 = complex66.sin();
        org.apache.commons.math.complex.Complex complex70 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex71 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex72 = complex71.sqrt();
        org.apache.commons.math.complex.Complex complex73 = complex72.sin();
        org.apache.commons.math.complex.Complex complex74 = complex70.pow(complex72);
        org.apache.commons.math.complex.Complex complex75 = complex74.asin();
        org.apache.commons.math.complex.Complex complex76 = complex75.atan();
        boolean boolean77 = complex76.isInfinite();
        org.apache.commons.math.complex.Complex complex78 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex79 = complex76.subtract(complex78);
        org.apache.commons.math.complex.Complex complex80 = complex79.sin();
        org.apache.commons.math.complex.Complex complex81 = complex66.divide(complex80);
        org.apache.commons.math.complex.Complex complex82 = complex62.subtract(complex80);
        boolean boolean83 = complex57.equals((java.lang.Object) complex80);
        org.apache.commons.math.complex.Complex complex84 = complex80.log();
        org.apache.commons.math.complex.Complex complex85 = complex80.asin();
        org.apache.commons.math.complex.Complex complex86 = complex85.asin();
        org.apache.commons.math.complex.Complex complex87 = complex85.asin();
        org.apache.commons.math.complex.Complex complex88 = complex44.subtract(complex85);
        org.apache.commons.math.complex.Complex complex89 = complex13.subtract(complex85);
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + Double.POSITIVE_INFINITY + "'", double38 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + Double.POSITIVE_INFINITY + "'", double49 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + Double.POSITIVE_INFINITY + "'", double56 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + Double.POSITIVE_INFINITY + "'", double64 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertNotNull(complex75);
        org.junit.Assert.assertNotNull(complex76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(complex78);
        org.junit.Assert.assertNotNull(complex79);
        org.junit.Assert.assertNotNull(complex80);
        org.junit.Assert.assertNotNull(complex81);
        org.junit.Assert.assertNotNull(complex82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(complex84);
        org.junit.Assert.assertNotNull(complex85);
        org.junit.Assert.assertNotNull(complex86);
        org.junit.Assert.assertNotNull(complex87);
        org.junit.Assert.assertNotNull(complex88);
        org.junit.Assert.assertNotNull(complex89);
    }

    @Test
    public void test06459() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06459");
        double[] doubleArray5 = new double[] { 0L, '#', 100.0f, 0L, (-1.0d) };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray5);
        double double8 = polynomialFunction6.value((double) 0);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver9 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        double[] doubleArray10 = polynomialFunction6.getCoefficients();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver11 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        double double14 = laguerreSolver11.solve((double) (byte) 10, 349.0d);
        // The following exception was thrown during execution in test generation
        try {
            double double17 = laguerreSolver11.solve((-6.8261426196981E247d), 1.030000009901E12d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Function values at endpoints do not have different signs.  Endpoints: [-6.8261426196981E247,1.030000009901E12]  Values: [-Infinity,-1.1255088532763608E48]");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[0.0, 35.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[0.0, 35.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 10.170609052699179d + "'", double14 == 10.170609052699179d);
    }

    @Test
    public void test06460() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06460");
        org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex2 = complex1.cosh();
        org.apache.commons.math.complex.Complex complex3 = complex1.log();
        org.apache.commons.math.complex.Complex complex4 = complex3.cos();
        double double5 = complex4.abs();
        org.apache.commons.math.complex.Complex complex6 = complex4.sqrt();
        org.apache.commons.math.complex.Complex complex7 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex8 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex9 = complex8.sqrt();
        org.apache.commons.math.complex.Complex complex10 = complex9.sin();
        org.apache.commons.math.complex.Complex complex11 = complex7.pow(complex9);
        org.apache.commons.math.complex.Complex complex12 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex13 = complex12.cosh();
        org.apache.commons.math.complex.Complex complex14 = complex12.log();
        org.apache.commons.math.complex.Complex complex15 = complex7.divide(complex14);
        org.apache.commons.math.complex.Complex complex16 = complex6.subtract(complex15);
        org.apache.commons.math.complex.Complex complex17 = complex6.conjugate();
        org.apache.commons.math.complex.Complex complex18 = complex6.conjugate();
        org.apache.commons.math.complex.Complex complex19 = complex6.cos();
        org.apache.commons.math.complex.Complex complex20 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex21 = complex20.cosh();
        double double22 = complex20.abs();
        org.apache.commons.math.complex.Complex complex23 = complex20.conjugate();
        org.apache.commons.math.complex.Complex complex24 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex25 = complex24.sqrt();
        boolean boolean26 = complex24.isNaN();
        org.apache.commons.math.complex.Complex complex27 = complex24.sin();
        org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex29 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex30 = complex29.sqrt();
        org.apache.commons.math.complex.Complex complex31 = complex30.sin();
        org.apache.commons.math.complex.Complex complex32 = complex28.pow(complex30);
        org.apache.commons.math.complex.Complex complex33 = complex32.asin();
        org.apache.commons.math.complex.Complex complex34 = complex33.atan();
        boolean boolean35 = complex34.isInfinite();
        org.apache.commons.math.complex.Complex complex36 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex37 = complex34.subtract(complex36);
        org.apache.commons.math.complex.Complex complex38 = complex37.sin();
        org.apache.commons.math.complex.Complex complex39 = complex24.divide(complex38);
        org.apache.commons.math.complex.Complex complex40 = complex20.subtract(complex38);
        org.apache.commons.math.complex.Complex complex41 = complex20.tanh();
        double double42 = complex20.getReal();
        org.apache.commons.math.complex.Complex complex43 = complex19.divide(complex20);
        java.lang.Object[] objArray52 = new java.lang.Object[] { 0.0f, (short) 1 };
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException53 = new org.apache.commons.math.MaxIterationsExceededException(100, "", objArray52);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException54 = new org.apache.commons.math.FunctionEvaluationException(35.0d, "hi!", objArray52);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException55 = new org.apache.commons.math.FunctionEvaluationException((double) (byte) -1, "org.apache.commons.math.MaxIterationsExceededException: org.apache.commons.math.FunctionEvaluationException: ", objArray52);
        boolean boolean56 = complex19.equals((java.lang.Object) functionEvaluationException55);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException57 = new org.apache.commons.math.FunctionEvaluationException(10101.0d, (java.lang.Throwable) functionEvaluationException55);
        double double58 = functionEvaluationException57.getArgument();
        java.lang.String str59 = functionEvaluationException57.toString();
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + Double.POSITIVE_INFINITY + "'", double22 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + Double.POSITIVE_INFINITY + "'", double42 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[0.0, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[0.0, 1]");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 10101.0d + "'", double58 == 10101.0d);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "org.apache.commons.math.FunctionEvaluationException: org.apache.commons.math.MaxIterationsExceededException: org.apache.commons.math.FunctionEvaluationException: " + "'", str59, "org.apache.commons.math.FunctionEvaluationException: org.apache.commons.math.MaxIterationsExceededException: org.apache.commons.math.FunctionEvaluationException: ");
    }

    @Test
    public void test06461() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06461");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex2 = complex1.sqrt();
        org.apache.commons.math.complex.Complex complex3 = complex2.sin();
        org.apache.commons.math.complex.Complex complex4 = complex0.pow(complex2);
        double double5 = complex4.getImaginary();
        org.apache.commons.math.complex.Complex complex6 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex7 = complex6.cosh();
        double double8 = complex6.abs();
        org.apache.commons.math.complex.Complex complex9 = complex6.conjugate();
        org.apache.commons.math.complex.Complex complex10 = complex9.conjugate();
        org.apache.commons.math.complex.Complex complex11 = complex9.log();
        org.apache.commons.math.complex.Complex complex12 = complex9.exp();
        org.apache.commons.math.complex.Complex complex13 = complex9.log();
        org.apache.commons.math.complex.Complex complex14 = complex9.sqrt1z();
        org.apache.commons.math.complex.Complex complex15 = complex4.add(complex9);
        org.apache.commons.math.complex.Complex complex16 = complex4.log();
        org.apache.commons.math.complex.Complex complex17 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex18 = complex17.cosh();
        org.apache.commons.math.complex.Complex complex19 = complex17.log();
        org.apache.commons.math.complex.Complex complex20 = complex19.cos();
        org.apache.commons.math.complex.Complex complex21 = complex19.exp();
        boolean boolean22 = complex19.isNaN();
        org.apache.commons.math.complex.Complex complex23 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex24 = complex23.cosh();
        double double25 = complex23.abs();
        org.apache.commons.math.complex.Complex complex26 = complex23.conjugate();
        org.apache.commons.math.complex.Complex complex27 = complex26.conjugate();
        boolean boolean28 = complex26.isInfinite();
        org.apache.commons.math.complex.Complex complex29 = complex26.asin();
        org.apache.commons.math.complex.Complex complex30 = complex19.pow(complex26);
        org.apache.commons.math.complex.Complex complex31 = complex19.exp();
        org.apache.commons.math.complex.Complex complex32 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex33 = complex32.cosh();
        org.apache.commons.math.complex.Complex complex34 = complex32.log();
        org.apache.commons.math.complex.Complex complex35 = complex34.cos();
        org.apache.commons.math.complex.Complex complex36 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex37 = complex36.cosh();
        org.apache.commons.math.complex.Complex complex38 = complex36.log();
        org.apache.commons.math.complex.Complex complex39 = complex36.sin();
        org.apache.commons.math.complex.Complex complex40 = complex36.log();
        org.apache.commons.math.complex.Complex complex41 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex42 = complex41.sqrt();
        org.apache.commons.math.complex.Complex complex43 = complex36.divide(complex42);
        org.apache.commons.math.complex.Complex complex44 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex45 = complex44.cosh();
        org.apache.commons.math.complex.Complex complex46 = complex45.acos();
        double double47 = complex45.getReal();
        org.apache.commons.math.complex.Complex complex48 = complex45.sqrt();
        org.apache.commons.math.complex.Complex complex49 = complex36.pow(complex45);
        java.lang.Object[] objArray54 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException55 = new org.apache.commons.math.ConvergenceException("", objArray54);
        java.lang.Object[] objArray57 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException58 = new org.apache.commons.math.ConvergenceException("", objArray57);
        org.apache.commons.math.ConvergenceException convergenceException59 = new org.apache.commons.math.ConvergenceException("", objArray54, (java.lang.Throwable) convergenceException58);
        org.apache.commons.math.ConvergenceException convergenceException60 = new org.apache.commons.math.ConvergenceException("", objArray54);
        org.apache.commons.math.ConvergenceException convergenceException61 = new org.apache.commons.math.ConvergenceException("hi!", objArray54);
        java.lang.String str62 = convergenceException61.getPattern();
        boolean boolean63 = complex45.equals((java.lang.Object) str62);
        org.apache.commons.math.complex.Complex complex64 = complex45.sinh();
        double double65 = complex64.getReal();
        org.apache.commons.math.complex.Complex complex66 = complex64.asin();
        org.apache.commons.math.complex.Complex complex67 = complex34.add(complex64);
        org.apache.commons.math.complex.Complex complex68 = complex31.subtract(complex67);
        org.apache.commons.math.complex.Complex complex69 = complex16.divide(complex67);
        org.apache.commons.math.complex.Complex complex70 = complex67.exp();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + Double.POSITIVE_INFINITY + "'", double8 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + Double.POSITIVE_INFINITY + "'", double25 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertTrue(Double.isNaN(double47));
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(objArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray54), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray54), "[]");
        org.junit.Assert.assertNotNull(objArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray57), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray57), "[]");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "hi!" + "'", str62, "hi!");
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertTrue(Double.isNaN(double65));
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertNotNull(complex70);
    }

    @Test
    public void test06462() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06462");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex1 = complex0.cosh();
        double double2 = complex0.abs();
        org.apache.commons.math.complex.Complex complex3 = complex0.conjugate();
        org.apache.commons.math.complex.Complex complex4 = complex3.conjugate();
        boolean boolean5 = complex3.isInfinite();
        org.apache.commons.math.complex.Complex complex6 = complex3.asin();
        boolean boolean7 = complex3.isNaN();
        double double8 = complex3.getReal();
        org.apache.commons.math.complex.Complex complex9 = complex3.sinh();
        org.apache.commons.math.complex.Complex complex10 = complex9.sqrt();
        org.apache.commons.math.complex.Complex complex11 = complex10.exp();
        org.apache.commons.math.complex.Complex complex12 = complex10.sinh();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + Double.POSITIVE_INFINITY + "'", double2 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + Double.POSITIVE_INFINITY + "'", double8 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
    }

    @Test
    public void test06463() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06463");
        java.lang.Object[] objArray6 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException7 = new org.apache.commons.math.ConvergenceException("", objArray6);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException8 = new org.apache.commons.math.FunctionEvaluationException((double) (short) 10, "hi!", objArray6);
        org.apache.commons.math.ConvergenceException convergenceException9 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.MaxIterationsExceededException: ", objArray6);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException10 = new org.apache.commons.math.FunctionEvaluationException((double) 14, "org.apache.commons.math.ConvergenceException", objArray6);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[]");
    }

    @Test
    public void test06464() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06464");
        org.apache.commons.math.ConvergenceException convergenceException8 = new org.apache.commons.math.ConvergenceException("");
        java.lang.Object[] objArray9 = convergenceException8.getArguments();
        java.lang.Object[] objArray13 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException14 = new org.apache.commons.math.ConvergenceException("", objArray13);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException15 = new org.apache.commons.math.MaxIterationsExceededException(0, "hi!", objArray13);
        int int16 = maxIterationsExceededException15.getMaxIterations();
        org.apache.commons.math.ConvergenceException convergenceException17 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.FunctionEvaluationException: org.apache.commons.math.FunctionEvaluationException: ", objArray9, (java.lang.Throwable) maxIterationsExceededException15);
        java.lang.Object[] objArray24 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException25 = new org.apache.commons.math.ConvergenceException("", objArray24);
        java.lang.Object[] objArray27 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException28 = new org.apache.commons.math.ConvergenceException("", objArray27);
        org.apache.commons.math.ConvergenceException convergenceException29 = new org.apache.commons.math.ConvergenceException("", objArray24, (java.lang.Throwable) convergenceException28);
        org.apache.commons.math.ConvergenceException convergenceException30 = new org.apache.commons.math.ConvergenceException("", objArray24);
        org.apache.commons.math.ConvergenceException convergenceException31 = new org.apache.commons.math.ConvergenceException("hi!", objArray24);
        java.lang.Object[] objArray32 = convergenceException31.getArguments();
        org.apache.commons.math.complex.Complex complex33 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex34 = complex33.cosh();
        java.lang.Object[] objArray37 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException38 = new org.apache.commons.math.ConvergenceException("", objArray37);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException39 = new org.apache.commons.math.FunctionEvaluationException(10.0d, (java.lang.Throwable) convergenceException38);
        boolean boolean40 = complex33.equals((java.lang.Object) functionEvaluationException39);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException41 = new org.apache.commons.math.FunctionEvaluationException((double) 18, "org.apache.commons.math.FunctionEvaluationException: org.apache.commons.math.FunctionEvaluationException: ", objArray32, (java.lang.Throwable) functionEvaluationException39);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException42 = new org.apache.commons.math.FunctionEvaluationException((double) '4', "Evaluation failed for argument = {0}", objArray9, (java.lang.Throwable) functionEvaluationException39);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException43 = new org.apache.commons.math.MaxIterationsExceededException(35, "org.apache.commons.math.FunctionEvaluationException: org.apache.commons.math.FunctionEvaluationException: org.apache.commons.math.ConvergenceException: hi!", objArray9);
        org.apache.commons.math.ConvergenceException convergenceException44 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: Maximal number of iterations (-1) exceeded", objArray9);
        org.apache.commons.math.ConvergenceException convergenceException45 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.FunctionEvaluationException: Evaluation failed for argument = 10,222,474,227,427", (java.lang.Throwable) convergenceException44);
        java.lang.Object[] objArray46 = convergenceException45.getArguments();
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[]");
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[]");
        org.junit.Assert.assertNotNull(objArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray27), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray27), "[]");
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[]");
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(objArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray37), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray37), "[]");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(objArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray46), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray46), "[]");
    }

    @Test
    public void test06465() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06465");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex1 = complex0.sqrt();
        org.apache.commons.math.complex.Complex complex2 = complex1.sin();
        org.apache.commons.math.complex.Complex complex3 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex4 = complex3.cosh();
        double double5 = complex3.abs();
        org.apache.commons.math.complex.Complex complex6 = complex3.conjugate();
        org.apache.commons.math.complex.Complex complex7 = complex6.conjugate();
        boolean boolean8 = complex6.isInfinite();
        org.apache.commons.math.complex.Complex complex9 = complex6.cos();
        org.apache.commons.math.complex.Complex complex10 = complex2.add(complex6);
        org.apache.commons.math.complex.Complex complex11 = complex2.conjugate();
        org.apache.commons.math.complex.Complex complex12 = complex11.sin();
        org.apache.commons.math.complex.Complex complex13 = complex12.sqrt1z();
        org.apache.commons.math.complex.Complex complex14 = complex13.conjugate();
        org.apache.commons.math.complex.Complex complex15 = complex14.tan();
        org.apache.commons.math.complex.Complex complex16 = complex15.conjugate();
        org.apache.commons.math.complex.Complex complex17 = complex16.tan();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + Double.POSITIVE_INFINITY + "'", double5 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
    }

    @Test
    public void test06466() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06466");
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException2 = new org.apache.commons.math.FunctionEvaluationException(1.0E-6d, "org.apache.commons.math.MaxIterationsExceededException: org.apache.commons.math.MaxIterationsExceededException: ");
    }

    @Test
    public void test06467() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06467");
        double[] doubleArray5 = new double[] { 0L, '#', 100.0f, 0L, (-1.0d) };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray5);
        double double8 = polynomialFunction6.value((double) 0);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver9 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver9.resetMaximalIterationCount();
        laguerreSolver9.resetRelativeAccuracy();
        laguerreSolver9.resetFunctionValueAccuracy();
        laguerreSolver9.resetMaximalIterationCount();
        laguerreSolver9.setFunctionValueAccuracy((-0.009999997913837433d));
        double double19 = laguerreSolver9.solve(1.0E-15d, 5201.0d, (double) (byte) 100);
        laguerreSolver9.setRelativeAccuracy(4.004790628466429E48d);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[0.0, 35.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 10.170609052699179d + "'", double19 == 10.170609052699179d);
    }

    @Test
    public void test06468() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06468");
        double[] doubleArray5 = new double[] { 0L, '#', 100.0f, 0L, (-1.0d) };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray5);
        double double8 = polynomialFunction6.value((double) 0);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver9 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        double[] doubleArray12 = new double[] { (byte) 1, 100 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction13 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray12);
        double double15 = polynomialFunction13.value((double) (short) 100);
        double[] doubleArray16 = polynomialFunction13.getCoefficients();
        org.apache.commons.math.complex.Complex[] complexArray18 = laguerreSolver9.solveAll(doubleArray16, (double) (short) 10);
        laguerreSolver9.setMaximalIterationCount((int) (byte) 10);
        laguerreSolver9.setRelativeAccuracy(134.0d);
        laguerreSolver9.setAbsoluteAccuracy((double) 6);
        laguerreSolver9.resetAbsoluteAccuracy();
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[0.0, 35.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 10001.0d + "'", double15 == 10001.0d);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(complexArray18);
    }

    @Test
    public void test06469() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06469");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex1 = complex0.cosh();
        double double2 = complex0.abs();
        org.apache.commons.math.complex.Complex complex3 = complex0.conjugate();
        org.apache.commons.math.complex.Complex complex4 = complex3.conjugate();
        boolean boolean5 = complex3.isInfinite();
        org.apache.commons.math.complex.Complex complex6 = complex3.cos();
        org.apache.commons.math.complex.Complex complex7 = complex3.conjugate();
        org.apache.commons.math.complex.Complex complex8 = complex3.sin();
        org.apache.commons.math.complex.Complex complex9 = complex3.tan();
        org.apache.commons.math.complex.Complex complex10 = complex9.atan();
        org.apache.commons.math.complex.Complex complex11 = complex10.sinh();
        org.apache.commons.math.complex.Complex complex12 = complex11.sin();
        org.apache.commons.math.complex.Complex complex13 = complex11.exp();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + Double.POSITIVE_INFINITY + "'", double2 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
    }

    @Test
    public void test06470() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06470");
        double[] doubleArray2 = new double[] { (byte) 1, 100 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) (short) 100);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver6 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction3);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction7 = laguerreSolver6.getPolynomialFunction();
        laguerreSolver6.setRelativeAccuracy((double) 0);
        double double10 = laguerreSolver6.getFunctionValueAccuracy();
        laguerreSolver6.setRelativeAccuracy((double) '4');
        double double13 = laguerreSolver6.getAbsoluteAccuracy();
        double[] doubleArray16 = new double[] { (byte) 1, 100 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction17 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray16);
        double double19 = polynomialFunction17.value((double) (short) 100);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver20 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction17);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction21 = laguerreSolver20.getPolynomialFunction();
        double double22 = laguerreSolver20.getRelativeAccuracy();
        laguerreSolver20.resetRelativeAccuracy();
        double double24 = laguerreSolver20.getAbsoluteAccuracy();
        laguerreSolver20.resetMaximalIterationCount();
        double double28 = laguerreSolver20.solve((-0.01d), (double) (byte) -1);
        double[] doubleArray31 = new double[] { (byte) 1, 100 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction32 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray31);
        double double34 = polynomialFunction32.value((double) (short) 100);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver35 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction32);
        double[] doubleArray36 = polynomialFunction32.getCoefficients();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction37 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray36);
        double[] doubleArray38 = polynomialFunction37.getCoefficients();
        org.apache.commons.math.complex.Complex[] complexArray40 = laguerreSolver20.solveAll(doubleArray38, (-1.0303676599E10d));
        org.apache.commons.math.complex.Complex[] complexArray42 = laguerreSolver6.solveAll(doubleArray38, 349.0d);
        double[] doubleArray48 = new double[] { 0L, '#', 100.0f, 0L, (-1.0d) };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction49 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray48);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction50 = polynomialFunction49.polynomialDerivative();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction51 = polynomialFunction49.polynomialDerivative();
        double[] doubleArray52 = polynomialFunction51.getCoefficients();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction53 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray52);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction54 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray52);
        org.apache.commons.math.complex.Complex[] complexArray56 = laguerreSolver6.solveAll(doubleArray52, (-2.26415581E8d));
        laguerreSolver6.resetAbsoluteAccuracy();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 10001.0d + "'", double5 == 10001.0d);
        org.junit.Assert.assertNotNull(polynomialFunction7);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0E-15d + "'", double10 == 1.0E-15d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 1.0E-6d + "'", double13 == 1.0E-6d);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 10001.0d + "'", double19 == 10001.0d);
        org.junit.Assert.assertNotNull(polynomialFunction21);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 1.0E-14d + "'", double22 == 1.0E-14d);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 1.0E-6d + "'", double24 == 1.0E-6d);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + (-0.01d) + "'", double28 == (-0.01d));
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 10001.0d + "'", double34 == 10001.0d);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(complexArray40);
        org.junit.Assert.assertNotNull(complexArray42);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[0.0, 35.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(polynomialFunction50);
        org.junit.Assert.assertNotNull(polynomialFunction51);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[35.0, 200.0, 0.0, -4.0]");
        org.junit.Assert.assertNotNull(complexArray56);
    }

    @Test
    public void test06471() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06471");
        double[] doubleArray5 = new double[] { 0L, '#', 100.0f, 0L, (-1.0d) };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray5);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction7 = polynomialFunction6.polynomialDerivative();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction8 = polynomialFunction6.polynomialDerivative();
        double[] doubleArray9 = polynomialFunction8.getCoefficients();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver10 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction8);
        int int11 = laguerreSolver10.getMaximalIterationCount();
        // The following exception was thrown during execution in test generation
        try {
            double double15 = laguerreSolver10.solve(0.0d, (double) (short) -1, 0.0d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Endpoints do not specify an interval: [0.0,-1.0]");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[0.0, 35.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(polynomialFunction7);
        org.junit.Assert.assertNotNull(polynomialFunction8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[35.0, 200.0, 0.0, -4.0]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 100 + "'", int11 == 100);
    }

    @Test
    public void test06472() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06472");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex2 = complex1.sqrt();
        org.apache.commons.math.complex.Complex complex3 = complex2.sin();
        org.apache.commons.math.complex.Complex complex4 = complex0.pow(complex2);
        org.apache.commons.math.complex.Complex complex5 = complex4.asin();
        org.apache.commons.math.complex.Complex complex6 = complex4.tan();
        org.apache.commons.math.complex.Complex complex7 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex8 = complex7.cosh();
        double double9 = complex7.abs();
        org.apache.commons.math.complex.Complex complex10 = complex7.conjugate();
        org.apache.commons.math.complex.Complex complex11 = complex10.conjugate();
        boolean boolean12 = complex10.isInfinite();
        org.apache.commons.math.complex.Complex complex13 = complex10.asin();
        boolean boolean14 = complex10.isNaN();
        org.apache.commons.math.complex.Complex complex15 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex16 = complex15.cosh();
        org.apache.commons.math.complex.Complex complex17 = complex10.divide(complex15);
        org.apache.commons.math.complex.Complex complex18 = complex6.pow(complex15);
        org.apache.commons.math.complex.Complex complex19 = complex15.tanh();
        org.apache.commons.math.complex.Complex complex20 = complex15.cos();
        org.apache.commons.math.complex.Complex complex21 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex22 = complex21.cosh();
        org.apache.commons.math.complex.Complex complex23 = complex21.log();
        org.apache.commons.math.complex.Complex complex24 = complex23.cos();
        org.apache.commons.math.complex.Complex complex25 = complex23.exp();
        boolean boolean26 = complex23.isNaN();
        org.apache.commons.math.complex.Complex complex27 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex28 = complex27.cosh();
        double double29 = complex27.abs();
        org.apache.commons.math.complex.Complex complex30 = complex27.conjugate();
        org.apache.commons.math.complex.Complex complex31 = complex30.conjugate();
        org.apache.commons.math.complex.Complex complex32 = complex30.tanh();
        org.apache.commons.math.complex.Complex complex33 = complex23.multiply(complex30);
        org.apache.commons.math.complex.Complex complex34 = complex30.acos();
        org.apache.commons.math.complex.Complex complex35 = complex34.cosh();
        org.apache.commons.math.complex.Complex complex36 = complex34.sqrt1z();
        org.apache.commons.math.complex.Complex complex37 = complex34.tan();
        org.apache.commons.math.complex.Complex complex38 = complex37.cosh();
        boolean boolean39 = complex20.equals((java.lang.Object) complex37);
        org.apache.commons.math.complex.Complex complex40 = complex20.tanh();
        org.apache.commons.math.complex.Complex complex41 = complex40.log();
        org.apache.commons.math.complex.Complex complex42 = complex41.sin();
        org.apache.commons.math.complex.Complex complex43 = complex41.cosh();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + Double.POSITIVE_INFINITY + "'", double9 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + Double.POSITIVE_INFINITY + "'", double29 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
    }

    @Test
    public void test06473() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06473");
        double[] doubleArray2 = new double[] { (byte) 1, 100 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) (short) 100);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver6 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction3);
        double double10 = laguerreSolver6.solve((double) (-1L), 349.0d, (double) (short) 10);
        laguerreSolver6.setMaximalIterationCount((int) '#');
        laguerreSolver6.setMaximalIterationCount((int) ' ');
        double double15 = laguerreSolver6.getRelativeAccuracy();
        laguerreSolver6.setFunctionValueAccuracy((double) 35);
        laguerreSolver6.resetRelativeAccuracy();
        // The following exception was thrown during execution in test generation
        try {
            double double21 = laguerreSolver6.solve((-9.9998989899E10d), (-9.99989899E8d));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Function values at endpoints do not have different signs.  Endpoints: [-9.9998989899E10,-9.99989899E8]  Values: [-9.999898989899E12,-9.9998989899E10]");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 10001.0d + "'", double5 == 10001.0d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + (-0.01d) + "'", double10 == (-0.01d));
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 1.0E-14d + "'", double15 == 1.0E-14d);
    }

    @Test
    public void test06474() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06474");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex1 = complex0.cosh();
        double double2 = complex0.abs();
        org.apache.commons.math.complex.Complex complex3 = complex0.conjugate();
        org.apache.commons.math.complex.Complex complex4 = complex3.conjugate();
        org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex6 = complex5.cosh();
        org.apache.commons.math.complex.Complex complex7 = complex5.log();
        org.apache.commons.math.complex.Complex complex8 = complex5.sin();
        org.apache.commons.math.complex.Complex complex9 = complex5.log();
        org.apache.commons.math.complex.Complex complex10 = complex3.multiply(complex5);
        org.apache.commons.math.complex.Complex complex11 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex12 = complex11.cosh();
        double double13 = complex11.abs();
        org.apache.commons.math.complex.Complex complex14 = complex11.conjugate();
        org.apache.commons.math.complex.Complex complex15 = complex14.conjugate();
        org.apache.commons.math.complex.Complex complex16 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex17 = complex16.tan();
        org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex19 = complex18.cosh();
        org.apache.commons.math.complex.Complex complex20 = complex19.acos();
        double double21 = complex19.getReal();
        boolean boolean22 = complex17.equals((java.lang.Object) complex19);
        org.apache.commons.math.complex.Complex complex23 = complex15.subtract(complex19);
        org.apache.commons.math.complex.Complex complex24 = complex19.tanh();
        org.apache.commons.math.complex.Complex complex25 = complex3.pow(complex19);
        org.apache.commons.math.complex.Complex complex26 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex27 = complex26.cosh();
        org.apache.commons.math.complex.Complex complex28 = complex26.log();
        org.apache.commons.math.complex.Complex complex29 = complex28.cos();
        org.apache.commons.math.complex.Complex complex30 = complex28.exp();
        boolean boolean31 = complex28.isNaN();
        org.apache.commons.math.complex.Complex complex32 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex33 = complex32.cosh();
        double double34 = complex32.abs();
        org.apache.commons.math.complex.Complex complex35 = complex32.conjugate();
        org.apache.commons.math.complex.Complex complex36 = complex35.conjugate();
        org.apache.commons.math.complex.Complex complex37 = complex35.tanh();
        org.apache.commons.math.complex.Complex complex38 = complex28.multiply(complex35);
        org.apache.commons.math.complex.Complex complex39 = complex28.cos();
        org.apache.commons.math.complex.Complex complex40 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex41 = complex40.cosh();
        org.apache.commons.math.complex.Complex complex42 = complex40.log();
        org.apache.commons.math.complex.Complex complex43 = complex42.cos();
        double double44 = complex43.abs();
        org.apache.commons.math.complex.Complex complex45 = complex43.sqrt();
        org.apache.commons.math.complex.Complex complex46 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex47 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex48 = complex47.sqrt();
        org.apache.commons.math.complex.Complex complex49 = complex48.sin();
        org.apache.commons.math.complex.Complex complex50 = complex46.pow(complex48);
        org.apache.commons.math.complex.Complex complex51 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex52 = complex51.cosh();
        org.apache.commons.math.complex.Complex complex53 = complex51.log();
        org.apache.commons.math.complex.Complex complex54 = complex46.divide(complex53);
        org.apache.commons.math.complex.Complex complex55 = complex45.subtract(complex54);
        org.apache.commons.math.complex.Complex complex56 = complex45.conjugate();
        org.apache.commons.math.complex.Complex complex57 = complex45.cos();
        org.apache.commons.math.complex.Complex complex58 = complex57.sqrt();
        org.apache.commons.math.complex.Complex complex59 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex60 = complex59.cosh();
        org.apache.commons.math.complex.Complex complex61 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex62 = complex61.cosh();
        org.apache.commons.math.complex.Complex complex63 = complex61.log();
        org.apache.commons.math.complex.Complex complex64 = complex61.sin();
        org.apache.commons.math.complex.Complex complex65 = complex61.log();
        org.apache.commons.math.complex.Complex complex66 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex67 = complex66.sqrt();
        org.apache.commons.math.complex.Complex complex68 = complex61.divide(complex67);
        org.apache.commons.math.complex.Complex complex69 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex70 = complex69.cosh();
        org.apache.commons.math.complex.Complex complex71 = complex70.acos();
        double double72 = complex70.getReal();
        org.apache.commons.math.complex.Complex complex73 = complex70.sqrt();
        org.apache.commons.math.complex.Complex complex74 = complex61.pow(complex70);
        org.apache.commons.math.complex.Complex complex75 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex76 = complex75.cosh();
        org.apache.commons.math.complex.Complex complex77 = complex75.log();
        org.apache.commons.math.complex.Complex complex78 = complex77.cos();
        org.apache.commons.math.complex.Complex complex79 = complex70.multiply(complex77);
        org.apache.commons.math.complex.Complex complex80 = complex77.tanh();
        org.apache.commons.math.complex.Complex complex81 = complex59.divide(complex77);
        org.apache.commons.math.complex.Complex complex82 = complex58.pow(complex77);
        org.apache.commons.math.complex.Complex complex83 = complex39.add(complex82);
        org.apache.commons.math.complex.Complex complex84 = complex19.add(complex82);
        org.apache.commons.math.complex.Complex complex85 = complex19.sin();
        org.apache.commons.math.complex.Complex complex86 = complex19.sqrt();
        org.apache.commons.math.complex.Complex complex87 = complex19.sqrt();
        org.apache.commons.math.complex.Complex complex88 = complex19.sqrt();
        java.lang.Class<?> wildcardClass89 = complex88.getClass();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + Double.POSITIVE_INFINITY + "'", double2 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + Double.POSITIVE_INFINITY + "'", double13 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + Double.POSITIVE_INFINITY + "'", double34 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertTrue(Double.isNaN(double44));
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertTrue(Double.isNaN(double72));
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertNotNull(complex75);
        org.junit.Assert.assertNotNull(complex76);
        org.junit.Assert.assertNotNull(complex77);
        org.junit.Assert.assertNotNull(complex78);
        org.junit.Assert.assertNotNull(complex79);
        org.junit.Assert.assertNotNull(complex80);
        org.junit.Assert.assertNotNull(complex81);
        org.junit.Assert.assertNotNull(complex82);
        org.junit.Assert.assertNotNull(complex83);
        org.junit.Assert.assertNotNull(complex84);
        org.junit.Assert.assertNotNull(complex85);
        org.junit.Assert.assertNotNull(complex86);
        org.junit.Assert.assertNotNull(complex87);
        org.junit.Assert.assertNotNull(complex88);
        org.junit.Assert.assertNotNull(wildcardClass89);
    }

    @Test
    public void test06475() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06475");
        double[] doubleArray2 = new double[] { (byte) 1, 100 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) (short) 100);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver6 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction3);
        laguerreSolver6.setMaximalIterationCount((int) (byte) -1);
        double double9 = laguerreSolver6.getFunctionValueAccuracy();
        double double10 = laguerreSolver6.getRelativeAccuracy();
        laguerreSolver6.resetMaximalIterationCount();
        laguerreSolver6.setAbsoluteAccuracy((double) (short) 0);
        double double14 = laguerreSolver6.getRelativeAccuracy();
        double[] doubleArray19 = new double[] { (byte) 1, 100 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction20 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray19);
        double double22 = polynomialFunction20.value((double) (short) 100);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver23 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction20);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction24 = laguerreSolver23.getPolynomialFunction();
        laguerreSolver23.setRelativeAccuracy((double) 0);
        double[] doubleArray29 = new double[] { (byte) -1, '#' };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction30 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray29);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction31 = polynomialFunction30.polynomialDerivative();
        double[] doubleArray32 = polynomialFunction30.getCoefficients();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction33 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray32);
        org.apache.commons.math.complex.Complex[] complexArray35 = laguerreSolver23.solveAll(doubleArray32, (double) 4);
        laguerreSolver23.resetFunctionValueAccuracy();
        laguerreSolver23.resetAbsoluteAccuracy();
        double[] doubleArray40 = new double[] { (byte) 1, 100 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction41 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray40);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver42 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction41);
        double[] doubleArray48 = new double[] { 0L, '#', 100.0f, 0L, (-1.0d) };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction49 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray48);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction50 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray48);
        org.apache.commons.math.complex.Complex[] complexArray52 = laguerreSolver42.solveAll(doubleArray48, 1.0E-6d);
        org.apache.commons.math.complex.Complex[] complexArray54 = laguerreSolver23.solveAll(doubleArray48, (double) (-1L));
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException55 = new org.apache.commons.math.FunctionEvaluationException((double) 97, "org.apache.commons.math.ConvergenceException: Convergence failed", (java.lang.Object[]) complexArray54);
        org.apache.commons.math.complex.Complex complex56 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.complex.Complex complex57 = laguerreSolver6.solve(complexArray54, complex56);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 10001.0d + "'", double5 == 10001.0d);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0E-15d + "'", double9 == 1.0E-15d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0E-14d + "'", double10 == 1.0E-14d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 1.0E-14d + "'", double14 == 1.0E-14d);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 10001.0d + "'", double22 == 10001.0d);
        org.junit.Assert.assertNotNull(polynomialFunction24);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[-1.0, 35.0]");
        org.junit.Assert.assertNotNull(polynomialFunction31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[-1.0, 35.0]");
        org.junit.Assert.assertNotNull(complexArray35);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[0.0, 35.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(complexArray52);
        org.junit.Assert.assertNotNull(complexArray54);
    }

    @Test
    public void test06476() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06476");
        double[] doubleArray2 = new double[] { (byte) 1, 100 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) (short) 100);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver6 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction3);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction7 = laguerreSolver6.getPolynomialFunction();
        laguerreSolver6.setRelativeAccuracy((double) 0);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction10 = laguerreSolver6.getPolynomialFunction();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver11 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction10);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver12 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction10);
        laguerreSolver12.setRelativeAccuracy(1.0300000099E10d);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 10001.0d + "'", double5 == 10001.0d);
        org.junit.Assert.assertNotNull(polynomialFunction7);
        org.junit.Assert.assertNotNull(polynomialFunction10);
    }

    @Test
    public void test06477() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06477");
        double[] doubleArray2 = new double[] { (byte) 1, 100 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) (short) 100);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver6 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction3);
        laguerreSolver6.setAbsoluteAccuracy((-0.3400000100000003d));
        double double12 = laguerreSolver6.solve(33.000004d, (-0.01d), 1.3009991E7d);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 10001.0d + "'", double5 == 10001.0d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + (-0.01d) + "'", double12 == (-0.01d));
    }

    @Test
    public void test06478() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06478");
        double[] doubleArray2 = new double[] { (byte) 1, 100 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) (short) 100);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver6 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction3);
        double double10 = laguerreSolver6.solve((double) (-1L), 349.0d, (double) (short) 10);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction11 = laguerreSolver6.getPolynomialFunction();
        double double13 = polynomialFunction11.value((double) (short) 1);
        double double15 = polynomialFunction11.value((double) 18);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver16 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction11);
        laguerreSolver16.setFunctionValueAccuracy((double) 0);
        double[] doubleArray23 = new double[] { (byte) 1, 100 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction24 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray23);
        double double26 = polynomialFunction24.value((double) (short) 100);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver27 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction24);
        double double31 = laguerreSolver27.solve((double) (-1L), 349.0d, (double) (short) 10);
        laguerreSolver27.setMaximalIterationCount((int) '#');
        laguerreSolver27.setMaximalIterationCount((int) ' ');
        laguerreSolver27.resetAbsoluteAccuracy();
        double[] doubleArray42 = new double[] { 0L, '#', 100.0f, 0L, (-1.0d) };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction43 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray42);
        double double45 = polynomialFunction43.value((double) 0);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver46 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction43);
        double[] doubleArray49 = new double[] { (byte) 1, 100 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction50 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray49);
        double double52 = polynomialFunction50.value((double) (short) 100);
        double[] doubleArray53 = polynomialFunction50.getCoefficients();
        org.apache.commons.math.complex.Complex[] complexArray55 = laguerreSolver46.solveAll(doubleArray53, (double) (short) 10);
        org.apache.commons.math.complex.Complex[] complexArray57 = laguerreSolver27.solveAll(doubleArray53, 10001.0d);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException58 = new org.apache.commons.math.MaxIterationsExceededException((int) (short) 10, "org.apache.commons.math.FunctionEvaluationException: ", (java.lang.Object[]) complexArray57);
        org.apache.commons.math.complex.Complex complex59 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex60 = complex59.cosh();
        org.apache.commons.math.complex.Complex complex61 = complex59.log();
        org.apache.commons.math.complex.Complex complex62 = complex59.cos();
        org.apache.commons.math.complex.Complex complex63 = complex62.negate();
        org.apache.commons.math.complex.Complex complex64 = complex62.negate();
        org.apache.commons.math.complex.Complex complex65 = complex64.exp();
        org.apache.commons.math.complex.Complex complex66 = complex65.tan();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.complex.Complex complex67 = laguerreSolver16.solve(complexArray57, complex65);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Polynomial degree must be positive: degree=0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 10001.0d + "'", double5 == 10001.0d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + (-0.01d) + "'", double10 == (-0.01d));
        org.junit.Assert.assertNotNull(polynomialFunction11);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 101.0d + "'", double13 == 101.0d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 1801.0d + "'", double15 == 1801.0d);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 10001.0d + "'", double26 == 10001.0d);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + (-0.01d) + "'", double31 == (-0.01d));
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[0.0, 35.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 0.0d + "'", double45 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 10001.0d + "'", double52 == 10001.0d);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(complexArray55);
        org.junit.Assert.assertNotNull(complexArray57);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(complex66);
    }

    @Test
    public void test06479() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06479");
        double[] doubleArray2 = new double[] { (byte) 1, 100 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) (short) 100);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver6 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction3);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction7 = laguerreSolver6.getPolynomialFunction();
        double double8 = laguerreSolver6.getAbsoluteAccuracy();
        double[] doubleArray14 = new double[] { 0L, '#', 100.0f, 0L, (-1.0d) };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction15 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray14);
        org.apache.commons.math.complex.Complex[] complexArray17 = laguerreSolver6.solveAll(doubleArray14, 10001.0d);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction18 = laguerreSolver6.getPolynomialFunction();
        double double19 = laguerreSolver6.getAbsoluteAccuracy();
        laguerreSolver6.resetAbsoluteAccuracy();
        // The following exception was thrown during execution in test generation
        try {
            double double24 = laguerreSolver6.solve((-4.5613214195472374E26d), (-12.90000035d), (-9.8201787192786d));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Function values at endpoints do not have different signs.  Endpoints: [-4.5613214195472374E26,-12.90000035]  Values: [-4.561321419547237E28,-1289.000035]");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 10001.0d + "'", double5 == 10001.0d);
        org.junit.Assert.assertNotNull(polynomialFunction7);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 1.0E-6d + "'", double8 == 1.0E-6d);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[0.0, 35.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(complexArray17);
        org.junit.Assert.assertNotNull(polynomialFunction18);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 1.0E-6d + "'", double19 == 1.0E-6d);
    }

    @Test
    public void test06480() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06480");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex1 = complex0.cosh();
        double double2 = complex0.abs();
        org.apache.commons.math.complex.Complex complex3 = complex0.conjugate();
        org.apache.commons.math.complex.Complex complex4 = complex3.conjugate();
        org.apache.commons.math.complex.Complex complex5 = complex3.tanh();
        org.apache.commons.math.complex.Complex complex6 = complex5.tan();
        org.apache.commons.math.complex.Complex complex7 = complex6.conjugate();
        org.apache.commons.math.complex.Complex complex8 = complex7.cos();
        org.apache.commons.math.complex.Complex complex9 = complex8.exp();
        org.apache.commons.math.complex.Complex complex10 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex11 = complex10.cosh();
        org.apache.commons.math.complex.Complex complex12 = complex10.log();
        double double13 = complex12.getImaginary();
        org.apache.commons.math.complex.Complex complex14 = complex12.tanh();
        org.apache.commons.math.complex.Complex complex15 = complex14.sinh();
        org.apache.commons.math.complex.Complex complex16 = complex9.subtract(complex14);
        org.apache.commons.math.complex.Complex complex17 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex18 = complex17.cosh();
        org.apache.commons.math.complex.Complex complex19 = complex17.log();
        org.apache.commons.math.complex.Complex complex20 = complex19.cos();
        double double21 = complex20.abs();
        org.apache.commons.math.complex.Complex complex22 = complex20.sqrt();
        org.apache.commons.math.complex.Complex complex23 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex24 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex25 = complex24.sqrt();
        org.apache.commons.math.complex.Complex complex26 = complex25.sin();
        org.apache.commons.math.complex.Complex complex27 = complex23.pow(complex25);
        org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex29 = complex28.cosh();
        org.apache.commons.math.complex.Complex complex30 = complex28.log();
        org.apache.commons.math.complex.Complex complex31 = complex23.divide(complex30);
        org.apache.commons.math.complex.Complex complex32 = complex22.subtract(complex31);
        org.apache.commons.math.complex.Complex complex33 = complex22.conjugate();
        org.apache.commons.math.complex.Complex complex34 = complex22.conjugate();
        org.apache.commons.math.complex.Complex complex35 = complex22.cos();
        org.apache.commons.math.complex.Complex complex36 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex37 = complex36.cosh();
        double double38 = complex36.abs();
        org.apache.commons.math.complex.Complex complex39 = complex36.conjugate();
        org.apache.commons.math.complex.Complex complex40 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex41 = complex40.sqrt();
        boolean boolean42 = complex40.isNaN();
        org.apache.commons.math.complex.Complex complex43 = complex40.sin();
        org.apache.commons.math.complex.Complex complex44 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex45 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex46 = complex45.sqrt();
        org.apache.commons.math.complex.Complex complex47 = complex46.sin();
        org.apache.commons.math.complex.Complex complex48 = complex44.pow(complex46);
        org.apache.commons.math.complex.Complex complex49 = complex48.asin();
        org.apache.commons.math.complex.Complex complex50 = complex49.atan();
        boolean boolean51 = complex50.isInfinite();
        org.apache.commons.math.complex.Complex complex52 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex53 = complex50.subtract(complex52);
        org.apache.commons.math.complex.Complex complex54 = complex53.sin();
        org.apache.commons.math.complex.Complex complex55 = complex40.divide(complex54);
        org.apache.commons.math.complex.Complex complex56 = complex36.subtract(complex54);
        org.apache.commons.math.complex.Complex complex57 = complex36.tanh();
        double double58 = complex36.getReal();
        org.apache.commons.math.complex.Complex complex59 = complex35.divide(complex36);
        boolean boolean60 = complex9.equals((java.lang.Object) complex35);
        org.apache.commons.math.complex.Complex complex61 = complex35.asin();
        org.apache.commons.math.complex.Complex complex62 = complex61.sqrt();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + Double.POSITIVE_INFINITY + "'", double2 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.7853981633974483d + "'", double13 == 0.7853981633974483d);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + Double.POSITIVE_INFINITY + "'", double38 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + Double.POSITIVE_INFINITY + "'", double58 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertNotNull(complex62);
    }

    @Test
    public void test06481() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06481");
        java.lang.Object[] objArray7 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException8 = new org.apache.commons.math.ConvergenceException("", objArray7);
        java.lang.Object[] objArray13 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException14 = new org.apache.commons.math.ConvergenceException("", objArray13);
        java.lang.Object[] objArray16 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException17 = new org.apache.commons.math.ConvergenceException("", objArray16);
        org.apache.commons.math.ConvergenceException convergenceException18 = new org.apache.commons.math.ConvergenceException("", objArray13, (java.lang.Throwable) convergenceException17);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException20 = new org.apache.commons.math.FunctionEvaluationException((double) 100);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException21 = new org.apache.commons.math.FunctionEvaluationException(100.0d, "org.apache.commons.math.ConvergenceException: hi!", objArray13, (java.lang.Throwable) functionEvaluationException20);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException22 = new org.apache.commons.math.FunctionEvaluationException((double) '#', "", objArray7, (java.lang.Throwable) functionEvaluationException21);
        java.lang.Object[] objArray30 = new java.lang.Object[] { 0.0f, (short) 1 };
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException31 = new org.apache.commons.math.MaxIterationsExceededException(100, "", objArray30);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException32 = new org.apache.commons.math.MaxIterationsExceededException((int) ' ', "hi!", objArray30);
        org.apache.commons.math.ConvergenceException convergenceException33 = new org.apache.commons.math.ConvergenceException("", (java.lang.Throwable) maxIterationsExceededException32);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException34 = new org.apache.commons.math.FunctionEvaluationException(10.0d, "", objArray7, (java.lang.Throwable) maxIterationsExceededException32);
        java.lang.Object[] objArray35 = maxIterationsExceededException32.getArguments();
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException36 = new org.apache.commons.math.MaxIterationsExceededException(14, "", objArray35);
        java.lang.String str37 = maxIterationsExceededException36.getPattern();
        org.junit.Assert.assertNotNull(objArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray7), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray7), "[]");
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[]");
        org.junit.Assert.assertNotNull(objArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray16), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray16), "[]");
        org.junit.Assert.assertNotNull(objArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray30), "[0.0, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray30), "[0.0, 1]");
        org.junit.Assert.assertNotNull(objArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray35), "[0.0, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray35), "[0.0, 1]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
    }

    @Test
    public void test06482() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06482");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex2 = complex1.sqrt();
        org.apache.commons.math.complex.Complex complex3 = complex2.sin();
        org.apache.commons.math.complex.Complex complex4 = complex0.pow(complex2);
        org.apache.commons.math.complex.Complex complex5 = complex4.asin();
        org.apache.commons.math.complex.Complex complex6 = complex4.tan();
        org.apache.commons.math.complex.Complex complex7 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex8 = complex7.cosh();
        double double9 = complex7.abs();
        org.apache.commons.math.complex.Complex complex10 = complex7.conjugate();
        org.apache.commons.math.complex.Complex complex11 = complex10.conjugate();
        boolean boolean12 = complex10.isInfinite();
        org.apache.commons.math.complex.Complex complex13 = complex10.asin();
        boolean boolean14 = complex10.isNaN();
        org.apache.commons.math.complex.Complex complex15 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex16 = complex15.cosh();
        org.apache.commons.math.complex.Complex complex17 = complex10.divide(complex15);
        org.apache.commons.math.complex.Complex complex18 = complex6.pow(complex15);
        org.apache.commons.math.complex.Complex complex19 = complex6.sinh();
        org.apache.commons.math.complex.Complex complex20 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex21 = complex20.sqrt();
        org.apache.commons.math.complex.Complex complex22 = complex20.sin();
        boolean boolean23 = complex19.equals((java.lang.Object) complex20);
        org.apache.commons.math.complex.Complex complex24 = complex20.sqrt();
        double double25 = complex24.getReal();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + Double.POSITIVE_INFINITY + "'", double9 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + Double.POSITIVE_INFINITY + "'", double25 == Double.POSITIVE_INFINITY);
    }

    @Test
    public void test06483() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06483");
        double[] doubleArray2 = new double[] { (byte) 1, 100 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) (short) 100);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver6 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction3);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction7 = laguerreSolver6.getPolynomialFunction();
        double double8 = laguerreSolver6.getRelativeAccuracy();
        laguerreSolver6.resetRelativeAccuracy();
        laguerreSolver6.setFunctionValueAccuracy((double) (-1.0f));
        laguerreSolver6.resetAbsoluteAccuracy();
        laguerreSolver6.resetFunctionValueAccuracy();
        laguerreSolver6.setAbsoluteAccuracy((double) 19);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 10001.0d + "'", double5 == 10001.0d);
        org.junit.Assert.assertNotNull(polynomialFunction7);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 1.0E-14d + "'", double8 == 1.0E-14d);
    }

    @Test
    public void test06484() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06484");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex(0.0d, 0.0d);
        org.apache.commons.math.complex.Complex complex3 = complex2.cos();
        org.apache.commons.math.complex.Complex complex4 = complex3.tan();
        org.apache.commons.math.complex.Complex complex5 = complex4.acos();
        org.apache.commons.math.complex.Complex complex6 = complex4.atan();
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
    }

    @Test
    public void test06485() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06485");
        org.apache.commons.math.complex.Complex complex4 = new org.apache.commons.math.complex.Complex((double) 1.0f, (double) (short) 0);
        java.lang.Object[] objArray14 = new java.lang.Object[] { 0.0f, (short) 1 };
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException15 = new org.apache.commons.math.MaxIterationsExceededException(100, "", objArray14);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException16 = new org.apache.commons.math.MaxIterationsExceededException((int) ' ', "hi!", objArray14);
        java.lang.Object[] objArray21 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException22 = new org.apache.commons.math.ConvergenceException("", objArray21);
        java.lang.Object[] objArray24 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException25 = new org.apache.commons.math.ConvergenceException("", objArray24);
        org.apache.commons.math.ConvergenceException convergenceException26 = new org.apache.commons.math.ConvergenceException("", objArray21, (java.lang.Throwable) convergenceException25);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException28 = new org.apache.commons.math.FunctionEvaluationException((double) 100);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException29 = new org.apache.commons.math.FunctionEvaluationException(100.0d, "org.apache.commons.math.ConvergenceException: hi!", objArray21, (java.lang.Throwable) functionEvaluationException28);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException30 = new org.apache.commons.math.FunctionEvaluationException((double) 100L, "org.apache.commons.math.ConvergenceException: hi!", objArray14, (java.lang.Throwable) functionEvaluationException29);
        double double31 = functionEvaluationException29.getArgument();
        org.apache.commons.math.ConvergenceException convergenceException32 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.MaxIterationsExceededException: ", (java.lang.Throwable) functionEvaluationException29);
        java.lang.Object[] objArray33 = convergenceException32.getArguments();
        boolean boolean34 = complex4.equals((java.lang.Object) objArray33);
        org.apache.commons.math.ConvergenceException convergenceException35 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.FunctionEvaluationException: ", objArray33);
        java.lang.Object[] objArray49 = new java.lang.Object[] { 0.0f, (short) 1 };
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException50 = new org.apache.commons.math.MaxIterationsExceededException(100, "", objArray49);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException51 = new org.apache.commons.math.MaxIterationsExceededException((-1), "", objArray49);
        org.apache.commons.math.ConvergenceException convergenceException52 = new org.apache.commons.math.ConvergenceException("Maximal number of iterations ({0}) exceeded", objArray49);
        java.lang.Object[] objArray63 = new java.lang.Object[] { 0.0f, (short) 1 };
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException64 = new org.apache.commons.math.MaxIterationsExceededException(100, "", objArray63);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException65 = new org.apache.commons.math.MaxIterationsExceededException((int) ' ', "hi!", objArray63);
        java.lang.Object[] objArray68 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException69 = new org.apache.commons.math.ConvergenceException("", objArray68);
        java.lang.Object[] objArray71 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException72 = new org.apache.commons.math.ConvergenceException("", objArray71);
        org.apache.commons.math.ConvergenceException convergenceException73 = new org.apache.commons.math.ConvergenceException("", objArray68, (java.lang.Throwable) convergenceException72);
        org.apache.commons.math.ConvergenceException convergenceException74 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.FunctionEvaluationException: ", objArray63, (java.lang.Throwable) convergenceException72);
        java.lang.Object[] objArray75 = convergenceException72.getArguments();
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException76 = new org.apache.commons.math.FunctionEvaluationException(0.0d, "hi!", (java.lang.Throwable) convergenceException72);
        org.apache.commons.math.ConvergenceException convergenceException77 = new org.apache.commons.math.ConvergenceException("", (java.lang.Throwable) functionEvaluationException76);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException78 = new org.apache.commons.math.FunctionEvaluationException((double) (-1), "org.apache.commons.math.FunctionEvaluationException: org.apache.commons.math.FunctionEvaluationException: ", objArray49, (java.lang.Throwable) convergenceException77);
        java.lang.Object[] objArray83 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException84 = new org.apache.commons.math.ConvergenceException("", objArray83);
        java.lang.Object[] objArray86 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException87 = new org.apache.commons.math.ConvergenceException("", objArray86);
        org.apache.commons.math.ConvergenceException convergenceException88 = new org.apache.commons.math.ConvergenceException("", objArray83, (java.lang.Throwable) convergenceException87);
        java.lang.Throwable[] throwableArray89 = convergenceException88.getSuppressed();
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException90 = new org.apache.commons.math.FunctionEvaluationException((-99.0d), "Evaluation failed for argument = {0}", (java.lang.Object[]) throwableArray89);
        org.apache.commons.math.ConvergenceException convergenceException91 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: Convergence failed", objArray49, (java.lang.Throwable) functionEvaluationException90);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException92 = new org.apache.commons.math.FunctionEvaluationException(1.0E-15d, (java.lang.Throwable) convergenceException91);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException93 = new org.apache.commons.math.FunctionEvaluationException(97.0d, "org.apache.commons.math.FunctionEvaluationException: Evaluation failed for argument = 10,101", (java.lang.Throwable) functionEvaluationException92);
        org.apache.commons.math.ConvergenceException convergenceException94 = new org.apache.commons.math.ConvergenceException("Evaluation failed for argument = 100", objArray33, (java.lang.Throwable) functionEvaluationException92);
        org.junit.Assert.assertNotNull(objArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray14), "[0.0, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray14), "[0.0, 1]");
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray21), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray21), "[]");
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[]");
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 100.0d + "'", double31 == 100.0d);
        org.junit.Assert.assertNotNull(objArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray33), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray33), "[]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(objArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray49), "[0.0, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray49), "[0.0, 1]");
        org.junit.Assert.assertNotNull(objArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray63), "[0.0, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray63), "[0.0, 1]");
        org.junit.Assert.assertNotNull(objArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray68), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray68), "[]");
        org.junit.Assert.assertNotNull(objArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray71), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray71), "[]");
        org.junit.Assert.assertNotNull(objArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray75), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray75), "[]");
        org.junit.Assert.assertNotNull(objArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray83), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray83), "[]");
        org.junit.Assert.assertNotNull(objArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray86), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray86), "[]");
        org.junit.Assert.assertNotNull(throwableArray89);
    }

    @Test
    public void test06486() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06486");
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException4 = new org.apache.commons.math.FunctionEvaluationException(Double.NEGATIVE_INFINITY, "org.apache.commons.math.FunctionEvaluationException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.FunctionEvaluationException: ");
        java.lang.Object[] objArray5 = functionEvaluationException4.getArguments();
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException6 = new org.apache.commons.math.MaxIterationsExceededException((-1), "org.apache.commons.math.MaxIterationsExceededException: hi!", objArray5);
        org.junit.Assert.assertNotNull(objArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray5), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray5), "[]");
    }

    @Test
    public void test06487() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06487");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex1 = complex0.cosh();
        double double2 = complex0.abs();
        org.apache.commons.math.complex.Complex complex3 = complex0.conjugate();
        org.apache.commons.math.complex.Complex complex4 = complex3.conjugate();
        org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex6 = complex5.tan();
        org.apache.commons.math.complex.Complex complex7 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex8 = complex7.cosh();
        org.apache.commons.math.complex.Complex complex9 = complex8.acos();
        double double10 = complex8.getReal();
        boolean boolean11 = complex6.equals((java.lang.Object) complex8);
        org.apache.commons.math.complex.Complex complex12 = complex4.subtract(complex8);
        org.apache.commons.math.complex.Complex complex13 = complex12.sqrt1z();
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex15 = complex14.cosh();
        org.apache.commons.math.complex.Complex complex16 = complex14.conjugate();
        org.apache.commons.math.complex.Complex complex17 = complex13.pow(complex16);
        org.apache.commons.math.complex.Complex complex18 = complex13.sqrt1z();
        double double19 = complex13.getImaginary();
        org.apache.commons.math.complex.Complex complex20 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex21 = complex20.cosh();
        double double22 = complex20.abs();
        org.apache.commons.math.complex.Complex complex23 = complex20.conjugate();
        org.apache.commons.math.complex.Complex complex24 = complex23.conjugate();
        boolean boolean25 = complex23.isInfinite();
        org.apache.commons.math.complex.Complex complex26 = complex23.cos();
        org.apache.commons.math.complex.Complex complex27 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex28 = complex27.cosh();
        double double29 = complex27.abs();
        org.apache.commons.math.complex.Complex complex30 = complex27.conjugate();
        org.apache.commons.math.complex.Complex complex31 = complex30.conjugate();
        boolean boolean32 = complex30.isInfinite();
        org.apache.commons.math.complex.Complex complex33 = complex30.asin();
        boolean boolean34 = complex30.isNaN();
        org.apache.commons.math.complex.Complex complex35 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex36 = complex35.cosh();
        org.apache.commons.math.complex.Complex complex37 = complex30.divide(complex35);
        org.apache.commons.math.complex.Complex complex38 = complex26.divide(complex35);
        org.apache.commons.math.complex.Complex complex39 = complex26.log();
        org.apache.commons.math.complex.Complex complex40 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex41 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex42 = complex41.sqrt();
        org.apache.commons.math.complex.Complex complex43 = complex42.sin();
        org.apache.commons.math.complex.Complex complex44 = complex40.pow(complex42);
        org.apache.commons.math.complex.Complex complex45 = complex44.asin();
        org.apache.commons.math.complex.Complex complex46 = complex44.tan();
        org.apache.commons.math.complex.Complex complex47 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex48 = complex47.cosh();
        double double49 = complex47.abs();
        org.apache.commons.math.complex.Complex complex50 = complex47.conjugate();
        org.apache.commons.math.complex.Complex complex51 = complex50.conjugate();
        boolean boolean52 = complex50.isInfinite();
        org.apache.commons.math.complex.Complex complex53 = complex50.asin();
        boolean boolean54 = complex50.isNaN();
        org.apache.commons.math.complex.Complex complex55 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex56 = complex55.cosh();
        org.apache.commons.math.complex.Complex complex57 = complex50.divide(complex55);
        org.apache.commons.math.complex.Complex complex58 = complex46.pow(complex55);
        org.apache.commons.math.complex.Complex complex59 = complex46.sinh();
        org.apache.commons.math.complex.Complex complex60 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex61 = complex60.cosh();
        double double62 = complex60.abs();
        org.apache.commons.math.complex.Complex complex63 = complex60.conjugate();
        org.apache.commons.math.complex.Complex complex64 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex65 = complex64.sqrt();
        boolean boolean66 = complex64.isNaN();
        org.apache.commons.math.complex.Complex complex67 = complex64.sin();
        org.apache.commons.math.complex.Complex complex68 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex69 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex70 = complex69.sqrt();
        org.apache.commons.math.complex.Complex complex71 = complex70.sin();
        org.apache.commons.math.complex.Complex complex72 = complex68.pow(complex70);
        org.apache.commons.math.complex.Complex complex73 = complex72.asin();
        org.apache.commons.math.complex.Complex complex74 = complex73.atan();
        boolean boolean75 = complex74.isInfinite();
        org.apache.commons.math.complex.Complex complex76 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex77 = complex74.subtract(complex76);
        org.apache.commons.math.complex.Complex complex78 = complex77.sin();
        org.apache.commons.math.complex.Complex complex79 = complex64.divide(complex78);
        org.apache.commons.math.complex.Complex complex80 = complex60.subtract(complex78);
        boolean boolean81 = complex80.isNaN();
        org.apache.commons.math.complex.Complex complex82 = complex59.subtract(complex80);
        org.apache.commons.math.complex.Complex complex83 = complex39.divide(complex82);
        org.apache.commons.math.complex.Complex complex84 = complex39.asin();
        org.apache.commons.math.complex.Complex complex85 = complex84.acos();
        org.apache.commons.math.complex.Complex complex86 = complex84.cosh();
        boolean boolean87 = complex13.equals((java.lang.Object) complex86);
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + Double.POSITIVE_INFINITY + "'", double2 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + Double.POSITIVE_INFINITY + "'", double22 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + Double.POSITIVE_INFINITY + "'", double29 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + Double.POSITIVE_INFINITY + "'", double49 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + Double.POSITIVE_INFINITY + "'", double62 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(complex76);
        org.junit.Assert.assertNotNull(complex77);
        org.junit.Assert.assertNotNull(complex78);
        org.junit.Assert.assertNotNull(complex79);
        org.junit.Assert.assertNotNull(complex80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertNotNull(complex82);
        org.junit.Assert.assertNotNull(complex83);
        org.junit.Assert.assertNotNull(complex84);
        org.junit.Assert.assertNotNull(complex85);
        org.junit.Assert.assertNotNull(complex86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
    }

    @Test
    public void test06488() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06488");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex1 = complex0.cosh();
        double double2 = complex0.abs();
        org.apache.commons.math.complex.Complex complex3 = complex0.conjugate();
        org.apache.commons.math.complex.Complex complex4 = complex3.conjugate();
        org.apache.commons.math.complex.Complex complex5 = complex3.tanh();
        org.apache.commons.math.complex.Complex complex6 = complex5.tan();
        org.apache.commons.math.complex.Complex complex7 = complex6.conjugate();
        org.apache.commons.math.complex.Complex complex8 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex9 = complex8.cosh();
        double double10 = complex8.abs();
        org.apache.commons.math.complex.Complex complex11 = complex8.conjugate();
        org.apache.commons.math.complex.Complex complex12 = complex11.conjugate();
        boolean boolean13 = complex11.isInfinite();
        org.apache.commons.math.complex.Complex complex14 = complex11.cos();
        org.apache.commons.math.complex.Complex complex15 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex16 = complex15.cosh();
        double double17 = complex15.abs();
        org.apache.commons.math.complex.Complex complex18 = complex15.conjugate();
        org.apache.commons.math.complex.Complex complex19 = complex18.conjugate();
        boolean boolean20 = complex18.isInfinite();
        org.apache.commons.math.complex.Complex complex21 = complex18.asin();
        boolean boolean22 = complex18.isNaN();
        org.apache.commons.math.complex.Complex complex23 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex24 = complex23.cosh();
        org.apache.commons.math.complex.Complex complex25 = complex18.divide(complex23);
        org.apache.commons.math.complex.Complex complex26 = complex14.divide(complex23);
        org.apache.commons.math.complex.Complex complex27 = complex23.sinh();
        org.apache.commons.math.complex.Complex complex28 = complex7.multiply(complex23);
        org.apache.commons.math.complex.Complex complex29 = complex28.sin();
        org.apache.commons.math.complex.Complex complex30 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex31 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex32 = complex31.sqrt();
        org.apache.commons.math.complex.Complex complex33 = complex32.sin();
        org.apache.commons.math.complex.Complex complex34 = complex30.pow(complex32);
        org.apache.commons.math.complex.Complex complex35 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex36 = complex35.cosh();
        org.apache.commons.math.complex.Complex complex37 = complex35.log();
        org.apache.commons.math.complex.Complex complex38 = complex30.divide(complex37);
        org.apache.commons.math.complex.Complex complex39 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex40 = complex39.sqrt();
        org.apache.commons.math.complex.Complex complex41 = complex39.sin();
        org.apache.commons.math.complex.Complex complex42 = complex38.pow(complex39);
        org.apache.commons.math.complex.Complex complex43 = complex39.sin();
        org.apache.commons.math.complex.Complex complex44 = complex29.pow(complex39);
        org.apache.commons.math.complex.Complex complex45 = complex29.conjugate();
        org.apache.commons.math.complex.Complex complex46 = complex45.conjugate();
        org.apache.commons.math.complex.Complex complex47 = complex46.asin();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + Double.POSITIVE_INFINITY + "'", double2 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + Double.POSITIVE_INFINITY + "'", double10 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + Double.POSITIVE_INFINITY + "'", double17 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
    }

    @Test
    public void test06489() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06489");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex1 = complex0.cosh();
        org.apache.commons.math.complex.Complex complex2 = complex1.acos();
        double double3 = complex1.getReal();
        org.apache.commons.math.complex.Complex complex4 = complex1.cos();
        java.lang.Object obj5 = null;
        boolean boolean6 = complex4.equals(obj5);
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test06490() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06490");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex1 = complex0.cosh();
        double double2 = complex0.abs();
        org.apache.commons.math.complex.Complex complex3 = complex0.conjugate();
        org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex5 = complex4.sqrt();
        boolean boolean6 = complex4.isNaN();
        org.apache.commons.math.complex.Complex complex7 = complex4.sin();
        org.apache.commons.math.complex.Complex complex8 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex9 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex10 = complex9.sqrt();
        org.apache.commons.math.complex.Complex complex11 = complex10.sin();
        org.apache.commons.math.complex.Complex complex12 = complex8.pow(complex10);
        org.apache.commons.math.complex.Complex complex13 = complex12.asin();
        org.apache.commons.math.complex.Complex complex14 = complex13.atan();
        boolean boolean15 = complex14.isInfinite();
        org.apache.commons.math.complex.Complex complex16 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex17 = complex14.subtract(complex16);
        org.apache.commons.math.complex.Complex complex18 = complex17.sin();
        org.apache.commons.math.complex.Complex complex19 = complex4.divide(complex18);
        org.apache.commons.math.complex.Complex complex20 = complex0.subtract(complex18);
        boolean boolean21 = complex18.isNaN();
        org.apache.commons.math.complex.Complex complex22 = complex18.acos();
        org.apache.commons.math.complex.Complex complex23 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex24 = complex23.cosh();
        org.apache.commons.math.complex.Complex complex25 = complex23.log();
        double double26 = complex25.getImaginary();
        double double27 = complex25.getImaginary();
        org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex29 = complex28.cosh();
        org.apache.commons.math.complex.Complex complex30 = complex29.acos();
        double double31 = complex29.getReal();
        org.apache.commons.math.complex.Complex complex32 = complex29.sqrt();
        org.apache.commons.math.complex.Complex complex33 = complex25.subtract(complex29);
        org.apache.commons.math.complex.Complex complex34 = complex33.log();
        org.apache.commons.math.complex.Complex complex35 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex36 = complex35.cosh();
        org.apache.commons.math.complex.Complex complex37 = complex35.log();
        double double38 = complex37.getImaginary();
        org.apache.commons.math.complex.Complex complex39 = complex34.multiply(complex37);
        org.apache.commons.math.complex.Complex complex40 = complex34.sqrt();
        org.apache.commons.math.complex.Complex complex41 = complex40.cosh();
        org.apache.commons.math.complex.Complex complex42 = complex41.sqrt();
        org.apache.commons.math.complex.Complex complex43 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex44 = complex43.cosh();
        org.apache.commons.math.complex.Complex complex45 = complex43.log();
        org.apache.commons.math.complex.Complex complex46 = complex45.cos();
        org.apache.commons.math.complex.Complex complex47 = complex45.exp();
        boolean boolean48 = complex45.isNaN();
        org.apache.commons.math.complex.Complex complex49 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex50 = complex49.cosh();
        double double51 = complex49.abs();
        org.apache.commons.math.complex.Complex complex52 = complex49.conjugate();
        org.apache.commons.math.complex.Complex complex53 = complex52.conjugate();
        org.apache.commons.math.complex.Complex complex54 = complex52.tanh();
        org.apache.commons.math.complex.Complex complex55 = complex45.multiply(complex52);
        org.apache.commons.math.complex.Complex complex56 = complex52.acos();
        org.apache.commons.math.complex.Complex complex57 = complex56.cosh();
        org.apache.commons.math.complex.Complex complex58 = complex56.sqrt1z();
        org.apache.commons.math.complex.Complex complex59 = complex56.tan();
        org.apache.commons.math.complex.Complex complex60 = complex59.cosh();
        org.apache.commons.math.complex.Complex complex61 = complex60.sin();
        org.apache.commons.math.complex.Complex complex62 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex63 = complex62.cosh();
        org.apache.commons.math.complex.Complex complex64 = complex62.log();
        org.apache.commons.math.complex.Complex complex65 = complex62.sin();
        org.apache.commons.math.complex.Complex complex66 = complex62.log();
        org.apache.commons.math.complex.Complex complex67 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex68 = complex67.sqrt();
        org.apache.commons.math.complex.Complex complex69 = complex62.divide(complex68);
        org.apache.commons.math.complex.Complex complex70 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex71 = complex70.cosh();
        org.apache.commons.math.complex.Complex complex72 = complex71.acos();
        double double73 = complex71.getReal();
        org.apache.commons.math.complex.Complex complex74 = complex71.sqrt();
        org.apache.commons.math.complex.Complex complex75 = complex62.pow(complex71);
        org.apache.commons.math.complex.Complex complex76 = complex75.sqrt1z();
        org.apache.commons.math.complex.Complex complex77 = complex60.multiply(complex75);
        org.apache.commons.math.complex.Complex complex78 = complex41.add(complex60);
        org.apache.commons.math.complex.Complex complex79 = complex22.subtract(complex78);
        org.apache.commons.math.complex.Complex complex80 = complex22.cosh();
        double double81 = complex80.abs();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + Double.POSITIVE_INFINITY + "'", double2 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 0.7853981633974483d + "'", double26 == 0.7853981633974483d);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.7853981633974483d + "'", double27 == 0.7853981633974483d);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.7853981633974483d + "'", double38 == 0.7853981633974483d);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + Double.POSITIVE_INFINITY + "'", double51 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertTrue(Double.isNaN(double73));
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertNotNull(complex75);
        org.junit.Assert.assertNotNull(complex76);
        org.junit.Assert.assertNotNull(complex77);
        org.junit.Assert.assertNotNull(complex78);
        org.junit.Assert.assertNotNull(complex79);
        org.junit.Assert.assertNotNull(complex80);
        org.junit.Assert.assertTrue(Double.isNaN(double81));
    }

    @Test
    public void test06491() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06491");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex1 = complex0.sqrt();
        boolean boolean2 = complex0.isNaN();
        org.apache.commons.math.complex.Complex complex3 = complex0.sin();
        org.apache.commons.math.complex.Complex complex4 = complex3.exp();
        org.apache.commons.math.complex.Complex complex5 = complex3.cosh();
        org.apache.commons.math.complex.Complex complex6 = complex5.tanh();
        double[] doubleArray12 = new double[] { 0L, '#', 100.0f, 0L, (-1.0d) };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction13 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray12);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction14 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray12);
        double[] doubleArray15 = polynomialFunction14.getCoefficients();
        int int16 = polynomialFunction14.degree();
        double[] doubleArray17 = polynomialFunction14.getCoefficients();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction18 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray17);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction19 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray17);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction20 = polynomialFunction19.polynomialDerivative();
        double double22 = polynomialFunction20.value((-1.0303676599E10d));
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction23 = polynomialFunction20.derivative();
        boolean boolean24 = complex5.equals((java.lang.Object) univariateRealFunction23);
        org.apache.commons.math.complex.Complex complex25 = complex5.negate();
        boolean boolean26 = complex5.isNaN();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[0.0, 35.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[0.0, 35.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 4 + "'", int16 == 4);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[0.0, 35.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(polynomialFunction20);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 4.3755902756019057E30d + "'", double22 == 4.3755902756019057E30d);
        org.junit.Assert.assertNotNull(univariateRealFunction23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
    }

    @Test
    public void test06492() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06492");
        double[] doubleArray2 = new double[] { (byte) 1, 100 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) (short) 100);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver6 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction3);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction7 = laguerreSolver6.getPolynomialFunction();
        laguerreSolver6.setRelativeAccuracy((double) 0);
        double[] doubleArray12 = new double[] { (byte) -1, '#' };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction13 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray12);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction14 = polynomialFunction13.polynomialDerivative();
        double[] doubleArray15 = polynomialFunction13.getCoefficients();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction16 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray15);
        org.apache.commons.math.complex.Complex[] complexArray18 = laguerreSolver6.solveAll(doubleArray15, (double) 4);
        laguerreSolver6.setAbsoluteAccuracy((double) 1);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction21 = laguerreSolver6.getPolynomialFunction();
        int int22 = laguerreSolver6.getMaximalIterationCount();
        laguerreSolver6.setAbsoluteAccuracy(Double.POSITIVE_INFINITY);
        laguerreSolver6.resetMaximalIterationCount();
        double double26 = laguerreSolver6.getRelativeAccuracy();
        laguerreSolver6.setFunctionValueAccuracy(349.0d);
        int int29 = laguerreSolver6.getIterationCount();
        laguerreSolver6.resetFunctionValueAccuracy();
        double double31 = laguerreSolver6.getAbsoluteAccuracy();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 10001.0d + "'", double5 == 10001.0d);
        org.junit.Assert.assertNotNull(polynomialFunction7);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[-1.0, 35.0]");
        org.junit.Assert.assertNotNull(polynomialFunction14);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[-1.0, 35.0]");
        org.junit.Assert.assertNotNull(complexArray18);
        org.junit.Assert.assertNotNull(polynomialFunction21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 100 + "'", int22 == 100);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 0.0d + "'", double26 == 0.0d);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 3 + "'", int29 == 3);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + Double.POSITIVE_INFINITY + "'", double31 == Double.POSITIVE_INFINITY);
    }

    @Test
    public void test06493() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06493");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex2 = complex1.sqrt();
        org.apache.commons.math.complex.Complex complex3 = complex2.sin();
        org.apache.commons.math.complex.Complex complex4 = complex0.pow(complex2);
        org.apache.commons.math.complex.Complex complex5 = complex4.asin();
        org.apache.commons.math.complex.Complex complex6 = complex5.atan();
        boolean boolean7 = complex6.isInfinite();
        org.apache.commons.math.complex.Complex complex8 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex9 = complex6.subtract(complex8);
        org.apache.commons.math.complex.Complex complex10 = complex9.sqrt();
        org.apache.commons.math.complex.Complex complex11 = complex10.tanh();
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException13 = new org.apache.commons.math.FunctionEvaluationException((double) (short) 10);
        java.lang.String str14 = functionEvaluationException13.getPattern();
        boolean boolean15 = complex11.equals((java.lang.Object) str14);
        org.apache.commons.math.complex.Complex complex16 = complex11.sqrt();
        double double17 = complex11.abs();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Evaluation failed for argument = {0}" + "'", str14, "Evaluation failed for argument = {0}");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertTrue(Double.isNaN(double17));
    }

    @Test
    public void test06494() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06494");
        double[] doubleArray2 = new double[] { (byte) 1, 100 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) (short) 100);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver6 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction3);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction7 = laguerreSolver6.getPolynomialFunction();
        laguerreSolver6.resetRelativeAccuracy();
        double[] doubleArray14 = new double[] { 0L, '#', 100.0f, 0L, (-1.0d) };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction15 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray14);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction16 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray14);
        org.apache.commons.math.complex.Complex[] complexArray18 = laguerreSolver6.solveAll(doubleArray14, 101.0d);
        int int19 = laguerreSolver6.getMaximalIterationCount();
        double double20 = laguerreSolver6.getFunctionValueAccuracy();
        int int21 = laguerreSolver6.getIterationCount();
        double double22 = laguerreSolver6.getRelativeAccuracy();
        double[] doubleArray23 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.complex.Complex[] complexArray25 = laguerreSolver6.solveAll(doubleArray23, 188.0d);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 10001.0d + "'", double5 == 10001.0d);
        org.junit.Assert.assertNotNull(polynomialFunction7);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[0.0, 35.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(complexArray18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 100 + "'", int19 == 100);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 1.0E-15d + "'", double20 == 1.0E-15d);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 18 + "'", int21 == 18);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 1.0E-14d + "'", double22 == 1.0E-14d);
    }

    @Test
    public void test06495() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06495");
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException5 = new org.apache.commons.math.MaxIterationsExceededException(10);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException6 = new org.apache.commons.math.FunctionEvaluationException((-0.3533630315721405d), "org.apache.commons.math.MaxIterationsExceededException: org.apache.commons.math.FunctionEvaluationException: ", (java.lang.Throwable) maxIterationsExceededException5);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException7 = new org.apache.commons.math.FunctionEvaluationException((-6.7173106613978968E16d), "org.apache.commons.math.FunctionEvaluationException: ", (java.lang.Throwable) functionEvaluationException6);
        double double8 = functionEvaluationException6.getArgument();
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + (-0.3533630315721405d) + "'", double8 == (-0.3533630315721405d));
    }

    @Test
    public void test06496() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06496");
        double[] doubleArray2 = new double[] { (byte) 1, 100 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) (short) 100);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver6 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction3);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction7 = laguerreSolver6.getPolynomialFunction();
        double double8 = laguerreSolver6.getRelativeAccuracy();
        int int9 = laguerreSolver6.getMaximalIterationCount();
        laguerreSolver6.setAbsoluteAccuracy(0.0d);
        laguerreSolver6.setFunctionValueAccuracy((double) 10L);
        // The following exception was thrown during execution in test generation
        try {
            double double17 = laguerreSolver6.solve(7.065179444323E12d, (-3.46487750099E11d), (-3.6499482913530427E146d));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Endpoints do not specify an interval: [7.065179444323E12,-3.46487750099E11]");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 10001.0d + "'", double5 == 10001.0d);
        org.junit.Assert.assertNotNull(polynomialFunction7);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 1.0E-14d + "'", double8 == 1.0E-14d);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 100 + "'", int9 == 100);
    }

    @Test
    public void test06497() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06497");
        double[] doubleArray2 = new double[] { (byte) 1, 100 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) (short) 100);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver6 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction3);
        double double10 = laguerreSolver6.solve((double) (-1L), 349.0d, (double) (short) 10);
        double double11 = laguerreSolver6.getResult();
        double double12 = laguerreSolver6.getFunctionValueAccuracy();
        int int13 = laguerreSolver6.getMaximalIterationCount();
        double double14 = laguerreSolver6.getResult();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 10001.0d + "'", double5 == 10001.0d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + (-0.01d) + "'", double10 == (-0.01d));
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + (-0.01d) + "'", double11 == (-0.01d));
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 1.0E-15d + "'", double12 == 1.0E-15d);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 100 + "'", int13 == 100);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + (-0.01d) + "'", double14 == (-0.01d));
    }

    @Test
    public void test06498() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06498");
        double[] doubleArray2 = new double[] { (byte) 1, 100 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) (short) 100);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver6 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction3);
        double double10 = laguerreSolver6.solve((double) (-1L), 349.0d, (double) (short) 10);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction11 = laguerreSolver6.getPolynomialFunction();
        laguerreSolver6.resetRelativeAccuracy();
        laguerreSolver6.setFunctionValueAccuracy((-6.7173106613978968E16d));
        laguerreSolver6.setFunctionValueAccuracy((double) 0L);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 10001.0d + "'", double5 == 10001.0d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + (-0.01d) + "'", double10 == (-0.01d));
        org.junit.Assert.assertNotNull(polynomialFunction11);
    }

    @Test
    public void test06499() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06499");
        java.lang.Object[] objArray14 = new java.lang.Object[] { 0.0f, (short) 1 };
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException15 = new org.apache.commons.math.MaxIterationsExceededException(100, "", objArray14);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException16 = new org.apache.commons.math.FunctionEvaluationException(35.0d, "hi!", objArray14);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException17 = new org.apache.commons.math.FunctionEvaluationException((double) (byte) -1, "org.apache.commons.math.MaxIterationsExceededException: org.apache.commons.math.FunctionEvaluationException: ", objArray14);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException20 = new org.apache.commons.math.FunctionEvaluationException((double) ' ', "org.apache.commons.math.MaxIterationsExceededException: org.apache.commons.math.FunctionEvaluationException: ");
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException21 = new org.apache.commons.math.FunctionEvaluationException((double) (byte) -1, "org.apache.commons.math.ConvergenceException: hi!", objArray14, (java.lang.Throwable) functionEvaluationException20);
        java.lang.Object[] objArray31 = new java.lang.Object[] { 0.0f, (short) 1 };
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException32 = new org.apache.commons.math.MaxIterationsExceededException(100, "", objArray31);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException33 = new org.apache.commons.math.MaxIterationsExceededException((-1), "", objArray31);
        org.apache.commons.math.ConvergenceException convergenceException34 = new org.apache.commons.math.ConvergenceException("Maximal number of iterations ({0}) exceeded", objArray31);
        java.lang.Object[] objArray45 = new java.lang.Object[] { 0.0f, (short) 1 };
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException46 = new org.apache.commons.math.MaxIterationsExceededException(100, "", objArray45);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException47 = new org.apache.commons.math.MaxIterationsExceededException((int) ' ', "hi!", objArray45);
        java.lang.Object[] objArray50 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException51 = new org.apache.commons.math.ConvergenceException("", objArray50);
        java.lang.Object[] objArray53 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException54 = new org.apache.commons.math.ConvergenceException("", objArray53);
        org.apache.commons.math.ConvergenceException convergenceException55 = new org.apache.commons.math.ConvergenceException("", objArray50, (java.lang.Throwable) convergenceException54);
        org.apache.commons.math.ConvergenceException convergenceException56 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.FunctionEvaluationException: ", objArray45, (java.lang.Throwable) convergenceException54);
        java.lang.Object[] objArray57 = convergenceException54.getArguments();
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException58 = new org.apache.commons.math.FunctionEvaluationException(0.0d, "hi!", (java.lang.Throwable) convergenceException54);
        org.apache.commons.math.ConvergenceException convergenceException59 = new org.apache.commons.math.ConvergenceException("", (java.lang.Throwable) functionEvaluationException58);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException60 = new org.apache.commons.math.FunctionEvaluationException((double) (-1), "org.apache.commons.math.FunctionEvaluationException: org.apache.commons.math.FunctionEvaluationException: ", objArray31, (java.lang.Throwable) convergenceException59);
        org.apache.commons.math.ConvergenceException convergenceException61 = new org.apache.commons.math.ConvergenceException("Evaluation failed for argument = {0}", objArray14, (java.lang.Throwable) functionEvaluationException60);
        org.apache.commons.math.ConvergenceException convergenceException66 = new org.apache.commons.math.ConvergenceException("");
        java.lang.Object[] objArray67 = convergenceException66.getArguments();
        java.lang.Object[] objArray75 = new java.lang.Object[] { 0.0f, (short) 1 };
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException76 = new org.apache.commons.math.MaxIterationsExceededException(100, "", objArray75);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException77 = new org.apache.commons.math.MaxIterationsExceededException((int) ' ', "hi!", objArray75);
        java.lang.Object[] objArray80 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException81 = new org.apache.commons.math.ConvergenceException("", objArray80);
        java.lang.Object[] objArray83 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException84 = new org.apache.commons.math.ConvergenceException("", objArray83);
        org.apache.commons.math.ConvergenceException convergenceException85 = new org.apache.commons.math.ConvergenceException("", objArray80, (java.lang.Throwable) convergenceException84);
        org.apache.commons.math.ConvergenceException convergenceException86 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.FunctionEvaluationException: ", objArray75, (java.lang.Throwable) convergenceException84);
        org.apache.commons.math.ConvergenceException convergenceException87 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: Convergence failed", objArray67, (java.lang.Throwable) convergenceException86);
        java.lang.String str88 = convergenceException86.getPattern();
        org.apache.commons.math.ConvergenceException convergenceException89 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException86);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException90 = new org.apache.commons.math.FunctionEvaluationException((double) 10, "org.apache.commons.math.MaxIterationsExceededException: hi!", (java.lang.Throwable) convergenceException89);
        org.apache.commons.math.ConvergenceException convergenceException91 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.FunctionEvaluationException: org.apache.commons.math.FunctionEvaluationException: ", objArray14, (java.lang.Throwable) functionEvaluationException90);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException92 = new org.apache.commons.math.FunctionEvaluationException((-1.016282950297589E80d), "org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: ", objArray14);
        org.junit.Assert.assertNotNull(objArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray14), "[0.0, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray14), "[0.0, 1]");
        org.junit.Assert.assertNotNull(objArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray31), "[0.0, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray31), "[0.0, 1]");
        org.junit.Assert.assertNotNull(objArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray45), "[0.0, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray45), "[0.0, 1]");
        org.junit.Assert.assertNotNull(objArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray50), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray50), "[]");
        org.junit.Assert.assertNotNull(objArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray53), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray53), "[]");
        org.junit.Assert.assertNotNull(objArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray57), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray57), "[]");
        org.junit.Assert.assertNotNull(objArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray67), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray67), "[]");
        org.junit.Assert.assertNotNull(objArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray75), "[0.0, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray75), "[0.0, 1]");
        org.junit.Assert.assertNotNull(objArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray80), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray80), "[]");
        org.junit.Assert.assertNotNull(objArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray83), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray83), "[]");
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "org.apache.commons.math.FunctionEvaluationException: " + "'", str88, "org.apache.commons.math.FunctionEvaluationException: ");
    }

    @Test
    public void test06500() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06500");
        double[] doubleArray2 = new double[] { (byte) 1, 100 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) (short) 100);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver6 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction3);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction7 = laguerreSolver6.getPolynomialFunction();
        laguerreSolver6.setRelativeAccuracy((double) 0);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction10 = laguerreSolver6.getPolynomialFunction();
        laguerreSolver6.resetMaximalIterationCount();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction12 = laguerreSolver6.getPolynomialFunction();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction13 = polynomialFunction12.polynomialDerivative();
        double[] doubleArray14 = polynomialFunction12.getCoefficients();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver15 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction12);
        double double16 = laguerreSolver15.getFunctionValueAccuracy();
        double[] doubleArray21 = new double[] { (byte) 1, 100 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction22 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray21);
        double double24 = polynomialFunction22.value((double) (short) 100);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver25 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction22);
        double double29 = laguerreSolver25.solve((double) (-1L), 349.0d, (double) (short) 10);
        laguerreSolver25.resetMaximalIterationCount();
        laguerreSolver25.resetMaximalIterationCount();
        laguerreSolver25.resetFunctionValueAccuracy();
        double double33 = laguerreSolver25.getRelativeAccuracy();
        double[] doubleArray36 = new double[] { (byte) 1, 100 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction37 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray36);
        double double39 = polynomialFunction37.value((double) (short) 100);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver40 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction37);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction41 = laguerreSolver40.getPolynomialFunction();
        laguerreSolver40.setRelativeAccuracy((double) 0);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction44 = laguerreSolver40.getPolynomialFunction();
        double[] doubleArray45 = polynomialFunction44.getCoefficients();
        org.apache.commons.math.complex.Complex[] complexArray47 = laguerreSolver25.solveAll(doubleArray45, (-1.0303676605150726E8d));
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException48 = new org.apache.commons.math.MaxIterationsExceededException(0, "org.apache.commons.math.FunctionEvaluationException: Evaluation failed for argument = 52", (java.lang.Object[]) complexArray47);
        org.apache.commons.math.complex.Complex complex49 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex50 = complex49.cosh();
        org.apache.commons.math.complex.Complex complex51 = complex49.log();
        org.apache.commons.math.complex.Complex complex52 = complex51.cos();
        double double53 = complex52.abs();
        org.apache.commons.math.complex.Complex complex54 = complex52.sqrt();
        org.apache.commons.math.complex.Complex complex55 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex56 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex57 = complex56.sqrt();
        org.apache.commons.math.complex.Complex complex58 = complex57.sin();
        org.apache.commons.math.complex.Complex complex59 = complex55.pow(complex57);
        org.apache.commons.math.complex.Complex complex60 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex61 = complex60.cosh();
        org.apache.commons.math.complex.Complex complex62 = complex60.log();
        org.apache.commons.math.complex.Complex complex63 = complex55.divide(complex62);
        org.apache.commons.math.complex.Complex complex64 = complex54.subtract(complex63);
        org.apache.commons.math.complex.Complex complex65 = complex54.sqrt();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.complex.Complex complex66 = laguerreSolver15.solve(complexArray47, complex65);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Polynomial degree must be positive: degree=0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 10001.0d + "'", double5 == 10001.0d);
        org.junit.Assert.assertNotNull(polynomialFunction7);
        org.junit.Assert.assertNotNull(polynomialFunction10);
        org.junit.Assert.assertNotNull(polynomialFunction12);
        org.junit.Assert.assertNotNull(polynomialFunction13);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 1.0E-15d + "'", double16 == 1.0E-15d);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 10001.0d + "'", double24 == 10001.0d);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + (-0.01d) + "'", double29 == (-0.01d));
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 1.0E-14d + "'", double33 == 1.0E-14d);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 10001.0d + "'", double39 == 10001.0d);
        org.junit.Assert.assertNotNull(polynomialFunction41);
        org.junit.Assert.assertNotNull(polynomialFunction44);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(complexArray47);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertTrue(Double.isNaN(double53));
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complex65);
    }
}

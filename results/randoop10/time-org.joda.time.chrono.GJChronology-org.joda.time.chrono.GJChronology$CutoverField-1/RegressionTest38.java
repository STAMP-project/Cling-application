import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest38 {

    public static boolean debug = false;

    @Test
    public void test19001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19001");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = gJChronology2.halfdays();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology2.millisOfDay();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology2.clockhourOfHalfday();
        org.joda.time.DurationField durationField8 = gJChronology2.eras();
        // The following exception was thrown during execution in test generation
        try {
            long long10 = durationField8.getValueAsLong((-3155695199990L));
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: eras field is unsupported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
    }

    @Test
    public void test19002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19002");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(1, 10);
        java.util.TimeZone timeZone3 = null;
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forTimeZone(timeZone3);
        long long6 = dateTimeZone2.getMillisKeepLocal(dateTimeZone4, 4320000000L);
        java.util.TimeZone timeZone7 = null;
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forTimeZone(timeZone7);
        java.lang.String str10 = dateTimeZone8.getNameKey((long) 100);
        boolean boolean11 = dateTimeZone8.isFixed();
        java.lang.String str12 = dateTimeZone8.toString();
        java.lang.String str13 = dateTimeZone8.getID();
        long long15 = dateTimeZone4.getMillisKeepLocal(dateTimeZone8, (long) (byte) -1);
        java.util.Locale locale17 = java.util.Locale.getDefault();
        boolean boolean18 = locale17.hasExtensions();
        java.lang.String str19 = dateTimeZone8.getName((-99L), locale17);
        java.util.TimeZone timeZone20 = null;
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forTimeZone(timeZone20);
        java.lang.String str23 = dateTimeZone21.getNameKey((long) 100);
        boolean boolean24 = dateTimeZone21.isFixed();
        org.joda.time.chrono.GJChronology gJChronology25 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone21);
        int int26 = gJChronology25.getMinimumDaysInFirstWeek();
        java.lang.String str27 = gJChronology25.toString();
        org.joda.time.DateTimeField dateTimeField28 = gJChronology25.yearOfEra();
        org.joda.time.DateTimeField dateTimeField29 = gJChronology25.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField30 = gJChronology25.dayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology32 = gJChronology25.withZone(dateTimeZone31);
        boolean boolean33 = dateTimeZone8.equals((java.lang.Object) chronology32);
        long long35 = dateTimeZone8.nextTransition((-660000L));
        long long38 = dateTimeZone8.convertLocalToUTC(2423542356648000L, false);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(dateTimeZone4);
// flaky:         org.junit.Assert.assertTrue("'" + long6 + "' != '" + 4324199948L + "'", long6 == 4324199948L);
        org.junit.Assert.assertNotNull(dateTimeZone8);
// flaky:         org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+00:00:00.052" + "'", str12, "+00:00:00.052");
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+00:00:00.052" + "'", str13, "+00:00:00.052");
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-1L) + "'", long15 == (-1L));
        org.junit.Assert.assertNotNull(locale17);
// flaky:         org.junit.Assert.assertEquals(locale17.toString(), "\u82f1\u6587_JAPANESE_ja-jp");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str19 + "' != '" + "+00:00:00.052" + "'", str19, "+00:00:00.052");
        org.junit.Assert.assertNotNull(dateTimeZone21);
// flaky:         org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(gJChronology25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 4 + "'", int26 == 4);
// flaky:         org.junit.Assert.assertEquals("'" + str27 + "' != '" + "GJChronology[+00:00:00.052]" + "'", str27, "GJChronology[+00:00:00.052]");
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + (-660000L) + "'", long35 == (-660000L));
// flaky:         org.junit.Assert.assertTrue("'" + long38 + "' != '" + 2423542356647948L + "'", long38 == 2423542356647948L);
    }

    @Test
    public void test19003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19003");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = gJChronology2.halfdays();
        org.joda.time.Chronology chronology4 = gJChronology2.withUTC();
        java.lang.String str5 = gJChronology2.toString();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology2.hourOfHalfday();
        org.joda.time.DurationField durationField7 = gJChronology2.millis();
        org.joda.time.DurationField durationField8 = gJChronology2.hours();
        org.joda.time.Instant instant10 = new org.joda.time.Instant(52L);
        boolean boolean11 = instant10.isEqualNow();
        boolean boolean13 = instant10.isEqual(0L);
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = null;
        boolean boolean15 = instant10.isSupported(dateTimeFieldType14);
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = null;
        boolean boolean17 = instant10.isSupported(dateTimeFieldType16);
        org.joda.time.Instant instant19 = instant10.withMillis(0L);
        org.joda.time.Instant instant21 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone22 = null;
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        org.joda.time.chrono.GJChronology gJChronology24 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone23);
        org.joda.time.DateTimeField dateTimeField25 = gJChronology24.millisOfSecond();
        int int26 = instant21.get(dateTimeField25);
        boolean boolean27 = instant21.isEqualNow();
        org.joda.time.Instant instant29 = new org.joda.time.Instant(52L);
        boolean boolean30 = instant29.isEqualNow();
        org.joda.time.ReadableDuration readableDuration31 = null;
        org.joda.time.Instant instant32 = instant29.plus(readableDuration31);
        long long33 = instant29.getMillis();
        java.lang.Object obj34 = null;
        boolean boolean35 = instant29.equals(obj34);
        org.joda.time.Instant instant37 = new org.joda.time.Instant(52L);
        boolean boolean38 = instant37.isEqualNow();
        org.joda.time.ReadableDuration readableDuration39 = null;
        org.joda.time.Instant instant40 = instant37.plus(readableDuration39);
        long long41 = instant37.getMillis();
        java.lang.String str42 = instant37.toString();
        org.joda.time.Instant instant43 = instant37.toInstant();
        org.joda.time.ReadableDuration readableDuration44 = null;
        org.joda.time.Instant instant46 = instant37.withDurationAdded(readableDuration44, (int) 'x');
        org.joda.time.Instant instant47 = instant37.toInstant();
        int int48 = instant29.compareTo((org.joda.time.ReadableInstant) instant37);
        boolean boolean49 = instant21.isBefore((org.joda.time.ReadableInstant) instant37);
        int int50 = instant10.compareTo((org.joda.time.ReadableInstant) instant21);
        boolean boolean51 = gJChronology2.equals((java.lang.Object) instant10);
        org.joda.time.ReadableDuration readableDuration52 = null;
        org.joda.time.Instant instant54 = instant10.withDurationAdded(readableDuration52, 27);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(chronology4);
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "GJChronology[+00:00:00.052]" + "'", str5, "GJChronology[+00:00:00.052]");
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(instant19);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(gJChronology24);
        org.junit.Assert.assertNotNull(dateTimeField25);
// flaky:         org.junit.Assert.assertTrue("'" + int26 + "' != '" + 104 + "'", int26 == 104);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(instant32);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 52L + "'", long33 == 52L);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(instant40);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 52L + "'", long41 == 52L);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "1970-01-01T00:00:00.052Z" + "'", str42, "1970-01-01T00:00:00.052Z");
        org.junit.Assert.assertNotNull(instant43);
        org.junit.Assert.assertNotNull(instant46);
        org.junit.Assert.assertNotNull(instant47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(instant54);
    }

    @Test
    public void test19004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19004");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = gJChronology2.halfdays();
        java.util.TimeZone timeZone4 = null;
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forTimeZone(timeZone4);
        org.joda.time.chrono.GJChronology gJChronology6 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone5);
        long long10 = dateTimeZone5.convertLocalToUTC((long) (byte) -1, true, 0L);
        boolean boolean12 = dateTimeZone5.equals((java.lang.Object) true);
        org.joda.time.Chronology chronology13 = gJChronology2.withZone(dateTimeZone5);
        org.joda.time.DateTimeField dateTimeField14 = gJChronology2.yearOfEra();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology2.millisOfSecond();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(1, 10);
        java.util.TimeZone timeZone19 = null;
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forTimeZone(timeZone19);
        long long22 = dateTimeZone18.getMillisKeepLocal(dateTimeZone20, 4320000000L);
        org.joda.time.Instant instant24 = new org.joda.time.Instant(52L);
        boolean boolean25 = instant24.isEqualNow();
        org.joda.time.ReadableDuration readableDuration26 = null;
        org.joda.time.Instant instant27 = instant24.plus(readableDuration26);
        long long28 = instant24.getMillis();
        java.lang.String str29 = instant24.toString();
        org.joda.time.Instant instant30 = instant24.toInstant();
        org.joda.time.ReadableDuration readableDuration31 = null;
        org.joda.time.Instant instant33 = instant24.withDurationAdded(readableDuration31, (int) 'x');
        org.joda.time.Instant instant34 = instant24.toInstant();
        int int35 = dateTimeZone18.getOffset((org.joda.time.ReadableInstant) instant24);
        org.joda.time.Instant instant37 = new org.joda.time.Instant(52L);
        boolean boolean38 = instant37.isEqualNow();
        org.joda.time.ReadableDuration readableDuration39 = null;
        org.joda.time.Instant instant40 = instant37.plus(readableDuration39);
        long long41 = instant37.getMillis();
        java.lang.String str42 = instant37.toString();
        boolean boolean44 = instant37.isAfter((long) (-1));
        java.lang.Object obj45 = null;
        boolean boolean46 = instant37.equals(obj45);
        org.joda.time.ReadableDuration readableDuration47 = null;
        org.joda.time.Instant instant48 = instant37.minus(readableDuration47);
        org.joda.time.chrono.GJChronology gJChronology49 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone18, (org.joda.time.ReadableInstant) instant37);
        int int51 = dateTimeZone18.getStandardOffset(60480000000L);
        org.joda.time.LocalDateTime localDateTime52 = null;
        boolean boolean53 = dateTimeZone18.isLocalDateTimeGap(localDateTime52);
        long long55 = dateTimeZone18.convertUTCToLocal(72599948L);
        java.lang.String str56 = dateTimeZone18.getID();
        java.util.TimeZone timeZone57 = dateTimeZone18.toTimeZone();
        org.joda.time.Chronology chronology58 = gJChronology2.withZone(dateTimeZone18);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(gJChronology6);
// flaky:         org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-53L) + "'", long10 == (-53L));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(dateTimeZone20);
// flaky:         org.junit.Assert.assertTrue("'" + long22 + "' != '" + 4324199948L + "'", long22 == 4324199948L);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(instant27);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 52L + "'", long28 == 52L);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "1970-01-01T00:00:00.052Z" + "'", str29, "1970-01-01T00:00:00.052Z");
        org.junit.Assert.assertNotNull(instant30);
        org.junit.Assert.assertNotNull(instant33);
        org.junit.Assert.assertNotNull(instant34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 4200000 + "'", int35 == 4200000);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(instant40);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 52L + "'", long41 == 52L);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "1970-01-01T00:00:00.052Z" + "'", str42, "1970-01-01T00:00:00.052Z");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(instant48);
        org.junit.Assert.assertNotNull(gJChronology49);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 4200000 + "'", int51 == 4200000);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 76799948L + "'", long55 == 76799948L);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "+01:10" + "'", str56, "+01:10");
        org.junit.Assert.assertNotNull(timeZone57);
        org.junit.Assert.assertEquals(timeZone57.getDisplayName(), "GMT+01:10");
        org.junit.Assert.assertNotNull(chronology58);
    }

    @Test
    public void test19005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19005");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        long long6 = dateTimeZone1.convertLocalToUTC((long) (byte) -1, true, 0L);
        boolean boolean8 = dateTimeZone1.equals((java.lang.Object) true);
        org.joda.time.chrono.GJChronology gJChronology9 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField10 = gJChronology9.weekyear();
        org.joda.time.DateTimeField dateTimeField11 = gJChronology9.era();
        org.joda.time.DateTimeZone dateTimeZone12 = gJChronology9.getZone();
        org.joda.time.Instant instant13 = gJChronology9.getGregorianCutover();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(gJChronology2);
// flaky:         org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-53L) + "'", long6 == (-53L));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(gJChronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(instant13);
    }

    @Test
    public void test19006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19006");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        java.lang.String str2 = dateTimeZone1.getID();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00:00.035" + "'", str2, "+00:00:00.035");
    }

    @Test
    public void test19007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19007");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str3 = dateTimeZone1.getNameKey((long) 100);
        boolean boolean4 = dateTimeZone1.isFixed();
        org.joda.time.chrono.GJChronology gJChronology5 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        int int6 = gJChronology5.getMinimumDaysInFirstWeek();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology5.clockhourOfDay();
        org.joda.time.DurationField durationField8 = gJChronology5.seconds();
        org.joda.time.DateTimeField dateTimeField9 = gJChronology5.hourOfDay();
        org.joda.time.DateTimeField dateTimeField10 = gJChronology5.millisOfDay();
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(gJChronology5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 4 + "'", int6 == 4);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
    }

    @Test
    public void test19008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19008");
        java.util.Locale.Category category0 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale1 = java.util.Locale.CANADA;
        java.lang.String str2 = locale1.getISO3Language();
        java.util.Locale.setDefault(category0, locale1);
        java.util.Locale locale4 = java.util.Locale.getDefault(category0);
        java.util.Locale locale5 = java.util.Locale.ROOT;
        java.util.Locale locale6 = java.util.Locale.ITALIAN;
        java.lang.String str7 = locale5.getDisplayName(locale6);
        java.util.Locale locale8 = java.util.Locale.ENGLISH;
        java.lang.String str10 = locale8.getUnicodeLocaleType("zh");
        java.lang.String str11 = locale5.getDisplayCountry(locale8);
        java.util.Locale.setDefault(category0, locale5);
        java.util.Locale locale14 = new java.util.Locale("hi!");
        java.lang.String str15 = locale14.getCountry();
        java.lang.String str16 = locale14.getCountry();
        java.util.Locale locale18 = new java.util.Locale("hi!");
        java.lang.String str19 = locale18.getCountry();
        java.lang.String str20 = locale18.getScript();
        java.util.Locale locale21 = java.util.Locale.ITALIAN;
        java.util.Locale locale22 = locale21.stripExtensions();
        java.util.Locale locale23 = java.util.Locale.CANADA;
        java.lang.String str24 = locale21.getDisplayVariant(locale23);
        java.lang.String str25 = locale18.getDisplayScript(locale21);
        java.lang.String str26 = locale14.getDisplayCountry(locale18);
        java.lang.String str27 = locale14.getDisplayScript();
        java.lang.String str28 = locale14.getLanguage();
        java.util.Locale.setDefault(category0, locale14);
        java.util.Locale locale30 = java.util.Locale.getDefault(category0);
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category0.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "eng" + "'", str2, "eng");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "it");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "en");
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals(locale14.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertEquals(locale18.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "it");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "it");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "hi!" + "'", str28, "hi!");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "hi!");
    }

    @Test
    public void test19009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19009");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = gJChronology2.halfdays();
        long long7 = gJChronology2.add((long) 'a', (-1L), (int) (short) 0);
        long long11 = gJChronology2.add((long) (byte) 0, (long) '4', 100);
        org.joda.time.DurationField durationField12 = gJChronology2.years();
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        long long16 = gJChronology2.add(readablePeriod13, (long) '#', (int) (byte) 1);
        java.lang.String str17 = gJChronology2.toString();
        org.joda.time.DateTimeField dateTimeField18 = gJChronology2.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField19 = gJChronology2.weekyear();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 97L + "'", long7 == 97L);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 5200L + "'", long11 == 5200L);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 35L + "'", long16 == 35L);
// flaky:         org.junit.Assert.assertEquals("'" + str17 + "' != '" + "GJChronology[+00:00:00.052]" + "'", str17, "GJChronology[+00:00:00.052]");
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
    }

    @Test
    public void test19010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19010");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = gJChronology2.halfdays();
        long long7 = gJChronology2.add((long) 'a', (-1L), (int) (short) 0);
        boolean boolean9 = gJChronology2.equals((java.lang.Object) 0);
        org.joda.time.DateTimeField dateTimeField10 = gJChronology2.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField11 = gJChronology2.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField12 = gJChronology2.yearOfEra();
        org.joda.time.DateTimeField dateTimeField13 = gJChronology2.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField14 = gJChronology2.dayOfYear();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology2.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField16 = gJChronology2.clockhourOfHalfday();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 97L + "'", long7 == 97L);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
    }

    @Test
    public void test19011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19011");
        java.util.Locale locale2 = new java.util.Locale("en_US", "+00:00");
        java.util.Locale locale3 = java.util.Locale.getDefault();
        java.lang.String str4 = locale3.getVariant();
        java.lang.String str5 = locale2.getDisplayName(locale3);
        java.lang.String str6 = locale3.getScript();
        java.lang.String str7 = locale3.getDisplayLanguage();
        java.util.Locale locale8 = locale3.stripExtensions();
        java.util.Set<java.lang.String> strSet9 = locale3.getUnicodeLocaleKeys();
        org.junit.Assert.assertEquals(locale2.toString(), "en_us_+00:00");
        org.junit.Assert.assertNotNull(locale3);
// flaky:         org.junit.Assert.assertEquals(locale3.toString(), "\u82f1\u6587_JAPANESE_ja-jp");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "ja-jp" + "'", str4, "ja-jp");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "en_us (+00:00)" + "'", str5, "en_us (+00:00)");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\u82f1\u6587" + "'", str7, "\u82f1\u6587");
        org.junit.Assert.assertNotNull(locale8);
// flaky:         org.junit.Assert.assertEquals(locale8.toString(), "\u82f1\u6587_JAPANESE_ja-jp");
        org.junit.Assert.assertNotNull(strSet9);
    }

    @Test
    public void test19012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19012");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forTimeZone(timeZone2);
        org.joda.time.chrono.GJChronology gJChronology4 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone3);
        org.joda.time.DateTimeField dateTimeField5 = gJChronology4.millisOfSecond();
        int int6 = instant1.get(dateTimeField5);
        org.joda.time.Instant instant8 = instant1.plus(0L);
        org.joda.time.Instant instant9 = instant8.toInstant();
        org.joda.time.Instant instant11 = new org.joda.time.Instant(52L);
        boolean boolean12 = instant11.isEqualNow();
        java.lang.String str13 = instant11.toString();
        java.lang.String str14 = instant11.toString();
        org.joda.time.Instant instant16 = new org.joda.time.Instant(52L);
        boolean boolean17 = instant16.isEqualNow();
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.Instant instant19 = instant16.plus(readableDuration18);
        boolean boolean20 = instant11.isBefore((org.joda.time.ReadableInstant) instant19);
        org.joda.time.Instant instant22 = instant11.minus((long) 0);
        int int23 = instant8.compareTo((org.joda.time.ReadableInstant) instant11);
        org.joda.time.Instant instant26 = instant11.withDurationAdded((long) (short) 100, 70);
        org.joda.time.ReadableDuration readableDuration27 = null;
        org.joda.time.Instant instant28 = instant11.minus(readableDuration27);
        org.joda.time.DateTimeZone dateTimeZone29 = instant11.getZone();
        org.joda.time.Instant instant31 = new org.joda.time.Instant(52L);
        boolean boolean32 = instant31.isEqualNow();
        org.joda.time.ReadableDuration readableDuration33 = null;
        org.joda.time.Instant instant34 = instant31.plus(readableDuration33);
        boolean boolean36 = instant34.equals((java.lang.Object) ' ');
        org.joda.time.Instant instant38 = instant34.plus(3600000L);
        org.joda.time.Instant instant40 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone41 = null;
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.forTimeZone(timeZone41);
        org.joda.time.chrono.GJChronology gJChronology43 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone42);
        org.joda.time.DateTimeField dateTimeField44 = gJChronology43.millisOfSecond();
        int int45 = instant40.get(dateTimeField44);
        org.joda.time.Instant instant47 = instant40.plus(0L);
        java.util.TimeZone timeZone48 = null;
        org.joda.time.DateTimeZone dateTimeZone49 = org.joda.time.DateTimeZone.forTimeZone(timeZone48);
        org.joda.time.chrono.GJChronology gJChronology50 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone49);
        org.joda.time.DurationField durationField51 = gJChronology50.halfdays();
        org.joda.time.Chronology chronology52 = gJChronology50.withUTC();
        java.lang.String str53 = gJChronology50.toString();
        org.joda.time.DateTimeField dateTimeField54 = gJChronology50.hourOfHalfday();
        int int55 = instant40.get(dateTimeField54);
        java.util.TimeZone timeZone56 = null;
        org.joda.time.DateTimeZone dateTimeZone57 = org.joda.time.DateTimeZone.forTimeZone(timeZone56);
        org.joda.time.chrono.GJChronology gJChronology58 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone57);
        org.joda.time.DurationField durationField59 = gJChronology58.halfdays();
        long long63 = gJChronology58.add((long) 'a', (-1L), (int) (short) 0);
        org.joda.time.DateTimeField dateTimeField64 = gJChronology58.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField65 = gJChronology58.secondOfMinute();
        org.joda.time.Instant instant67 = new org.joda.time.Instant(52L);
        boolean boolean68 = instant67.isEqualNow();
        org.joda.time.ReadableDuration readableDuration69 = null;
        org.joda.time.Instant instant70 = instant67.plus(readableDuration69);
        boolean boolean71 = gJChronology58.equals((java.lang.Object) instant67);
        org.joda.time.DateTimeFieldType dateTimeFieldType72 = null;
        boolean boolean73 = instant67.isSupported(dateTimeFieldType72);
        org.joda.time.DateTimeFieldType dateTimeFieldType74 = null;
        boolean boolean75 = instant67.isSupported(dateTimeFieldType74);
        org.joda.time.DateTimeZone dateTimeZone76 = instant67.getZone();
        boolean boolean77 = instant40.isAfter((org.joda.time.ReadableInstant) instant67);
        org.joda.time.Instant instant79 = instant40.minus((long) 70);
        org.joda.time.Instant instant81 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone82 = null;
        org.joda.time.DateTimeZone dateTimeZone83 = org.joda.time.DateTimeZone.forTimeZone(timeZone82);
        org.joda.time.chrono.GJChronology gJChronology84 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone83);
        org.joda.time.DateTimeField dateTimeField85 = gJChronology84.millisOfSecond();
        int int86 = instant81.get(dateTimeField85);
        boolean boolean87 = instant81.isEqualNow();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter88 = null;
        java.lang.String str89 = instant81.toString(dateTimeFormatter88);
        boolean boolean90 = instant40.isAfter((org.joda.time.ReadableInstant) instant81);
        boolean boolean91 = instant38.isEqual((org.joda.time.ReadableInstant) instant40);
        org.joda.time.Chronology chronology92 = instant40.getChronology();
        boolean boolean93 = instant40.isBeforeNow();
        boolean boolean94 = instant11.isEqual((org.joda.time.ReadableInstant) instant40);
        org.joda.time.DateTime dateTime95 = instant11.toDateTimeISO();
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(gJChronology4);
        org.junit.Assert.assertNotNull(dateTimeField5);
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 104 + "'", int6 == 104);
        org.junit.Assert.assertNotNull(instant8);
        org.junit.Assert.assertNotNull(instant9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "1970-01-01T00:00:00.052Z" + "'", str13, "1970-01-01T00:00:00.052Z");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "1970-01-01T00:00:00.052Z" + "'", str14, "1970-01-01T00:00:00.052Z");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(instant19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(instant22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(instant26);
        org.junit.Assert.assertNotNull(instant28);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(instant34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(instant38);
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertNotNull(gJChronology43);
        org.junit.Assert.assertNotNull(dateTimeField44);
// flaky:         org.junit.Assert.assertTrue("'" + int45 + "' != '" + 104 + "'", int45 == 104);
        org.junit.Assert.assertNotNull(instant47);
        org.junit.Assert.assertNotNull(dateTimeZone49);
        org.junit.Assert.assertNotNull(gJChronology50);
        org.junit.Assert.assertNotNull(durationField51);
        org.junit.Assert.assertNotNull(chronology52);
// flaky:         org.junit.Assert.assertEquals("'" + str53 + "' != '" + "GJChronology[+00:00:00.052]" + "'", str53, "GJChronology[+00:00:00.052]");
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone57);
        org.junit.Assert.assertNotNull(gJChronology58);
        org.junit.Assert.assertNotNull(durationField59);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 97L + "'", long63 == 97L);
        org.junit.Assert.assertNotNull(dateTimeField64);
        org.junit.Assert.assertNotNull(dateTimeField65);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(instant70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(dateTimeZone76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(instant79);
        org.junit.Assert.assertNotNull(dateTimeZone83);
        org.junit.Assert.assertNotNull(gJChronology84);
        org.junit.Assert.assertNotNull(dateTimeField85);
// flaky:         org.junit.Assert.assertTrue("'" + int86 + "' != '" + 104 + "'", int86 == 104);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "1970-01-01T00:00:00.052Z" + "'", str89, "1970-01-01T00:00:00.052Z");
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertNotNull(chronology92);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + true + "'", boolean93 == true);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + true + "'", boolean94 == true);
        org.junit.Assert.assertNotNull(dateTime95);
    }

    @Test
    public void test19013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19013");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField3 = gJChronology2.era();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.weekyear();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.weekyearOfCentury();
        org.joda.time.Chronology chronology6 = gJChronology2.withUTC();
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        long long10 = gJChronology2.add(readablePeriod7, (-61818136800000L), 432000001);
        org.joda.time.DateTimeField dateTimeField11 = gJChronology2.minuteOfDay();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-61818136800000L) + "'", long10 == (-61818136800000L));
        org.junit.Assert.assertNotNull(dateTimeField11);
    }

    @Test
    public void test19014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19014");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forTimeZone(timeZone2);
        org.joda.time.chrono.GJChronology gJChronology4 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone3);
        org.joda.time.DateTimeField dateTimeField5 = gJChronology4.millisOfSecond();
        int int6 = instant1.get(dateTimeField5);
        org.joda.time.Instant instant8 = instant1.plus(0L);
        java.util.TimeZone timeZone9 = null;
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forTimeZone(timeZone9);
        org.joda.time.chrono.GJChronology gJChronology11 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone10);
        org.joda.time.DurationField durationField12 = gJChronology11.halfdays();
        org.joda.time.Chronology chronology13 = gJChronology11.withUTC();
        java.lang.String str14 = gJChronology11.toString();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology11.hourOfHalfday();
        int int16 = instant1.get(dateTimeField15);
        org.joda.time.Instant instant18 = new org.joda.time.Instant(52L);
        boolean boolean19 = instant18.isEqualNow();
        java.lang.String str20 = instant18.toString();
        org.joda.time.Instant instant22 = new org.joda.time.Instant(52L);
        boolean boolean23 = instant22.isEqualNow();
        java.lang.String str24 = instant22.toString();
        java.lang.String str25 = instant22.toString();
        org.joda.time.Instant instant28 = instant22.withDurationAdded(115200000L, (int) (short) 1);
        int int29 = instant18.compareTo((org.joda.time.ReadableInstant) instant22);
        org.joda.time.Instant instant31 = new org.joda.time.Instant(52L);
        boolean boolean32 = instant31.isEqualNow();
        org.joda.time.ReadableDuration readableDuration33 = null;
        org.joda.time.Instant instant34 = instant31.plus(readableDuration33);
        boolean boolean36 = instant34.equals((java.lang.Object) ' ');
        boolean boolean37 = instant22.isAfter((org.joda.time.ReadableInstant) instant34);
        int int38 = instant1.compareTo((org.joda.time.ReadableInstant) instant22);
        java.util.Date date39 = instant22.toDate();
        boolean boolean41 = instant22.isAfter(6311390400000L);
        boolean boolean42 = instant22.isBeforeNow();
        org.joda.time.ReadableDuration readableDuration43 = null;
        org.joda.time.Instant instant44 = instant22.plus(readableDuration43);
        org.joda.time.Chronology chronology45 = instant22.getChronology();
        org.joda.time.ReadableDuration readableDuration46 = null;
        org.joda.time.Instant instant48 = instant22.withDurationAdded(readableDuration46, (-28365570));
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(gJChronology4);
        org.junit.Assert.assertNotNull(dateTimeField5);
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 104 + "'", int6 == 104);
        org.junit.Assert.assertNotNull(instant8);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(gJChronology11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(chronology13);
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "GJChronology[+00:00:00.052]" + "'", str14, "GJChronology[+00:00:00.052]");
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "1970-01-01T00:00:00.052Z" + "'", str20, "1970-01-01T00:00:00.052Z");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "1970-01-01T00:00:00.052Z" + "'", str24, "1970-01-01T00:00:00.052Z");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "1970-01-01T00:00:00.052Z" + "'", str25, "1970-01-01T00:00:00.052Z");
        org.junit.Assert.assertNotNull(instant28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(instant34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(date39);
        org.junit.Assert.assertEquals(date39.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(instant44);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(instant48);
    }

    @Test
    public void test19015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19015");
        java.util.Locale locale1 = java.util.Locale.forLanguageTag("1970-01-01T00:00:00.052Z");
        java.util.Locale locale3 = new java.util.Locale("hi!");
        java.lang.String str4 = locale1.getDisplayCountry(locale3);
        java.util.Locale.setDefault(locale3);
        java.lang.String str6 = locale3.getVariant();
        java.util.Locale locale7 = locale3.stripExtensions();
        java.lang.String str8 = locale3.getVariant();
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertEquals(locale3.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
    }

    @Test
    public void test19016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19016");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clear();
        java.util.Locale.Builder builder3 = builder1.removeUnicodeLocaleAttribute("und");
        java.util.Locale locale4 = java.util.Locale.CHINESE;
        boolean boolean5 = locale4.hasExtensions();
        java.util.Locale.Builder builder6 = builder1.setLocale(locale4);
        java.util.Locale.Builder builder8 = builder6.removeUnicodeLocaleAttribute("und");
        java.util.Locale.Builder builder9 = builder6.clear();
        java.util.Locale.Builder builder11 = builder9.setLanguage("CAN");
        java.util.Locale locale12 = builder11.build();
        java.util.Locale locale14 = java.util.Locale.forLanguageTag("3929-04-02T00:00:00.051Z");
        java.util.Locale locale16 = new java.util.Locale("hi!");
        java.lang.String str17 = locale16.getCountry();
        java.util.Locale locale18 = java.util.Locale.getDefault();
        java.lang.String str19 = locale18.getDisplayName();
        java.lang.String str20 = locale16.getDisplayScript(locale18);
        java.util.Set<java.lang.Character> charSet21 = locale18.getExtensionKeys();
        java.util.Set<java.lang.String> strSet22 = locale18.getUnicodeLocaleAttributes();
        java.util.Locale locale23 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale24 = java.util.Locale.ENGLISH;
        java.lang.String str25 = locale23.getDisplayLanguage(locale24);
        java.util.Locale locale26 = java.util.Locale.CANADA;
        java.lang.String str27 = locale26.getISO3Language();
        java.lang.String str28 = locale23.getDisplayVariant(locale26);
        java.util.Set<java.lang.String> strSet29 = locale23.getUnicodeLocaleKeys();
        java.util.Locale locale33 = new java.util.Locale("zh", "en", "");
        java.lang.String str34 = locale23.getDisplayName(locale33);
        java.lang.String str35 = locale33.getVariant();
        java.lang.String str36 = locale18.getDisplayVariant(locale33);
        java.util.Locale locale38 = java.util.Locale.forLanguageTag("zho");
        java.util.Locale locale39 = java.util.Locale.CANADA;
        java.lang.String str40 = locale39.getISO3Language();
        java.lang.String str41 = locale38.getDisplayScript(locale39);
        boolean boolean42 = locale38.hasExtensions();
        java.lang.String str43 = locale18.getDisplayVariant(locale38);
        java.lang.String str44 = locale14.getDisplayCountry(locale18);
        java.lang.String str45 = locale12.getDisplayCountry(locale18);
        java.util.Set<java.lang.String> strSet46 = locale12.getUnicodeLocaleKeys();
        java.lang.String str47 = locale12.getDisplayScript();
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "zh");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "can");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "");
        org.junit.Assert.assertEquals(locale16.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "hi!" + "'", str19, "hi!");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(charSet21);
        org.junit.Assert.assertNotNull(strSet22);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "en");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Chinese" + "'", str25, "Chinese");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "eng" + "'", str27, "eng");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(strSet29);
        org.junit.Assert.assertEquals(locale33.toString(), "zh_EN");
// flaky:         org.junit.Assert.assertEquals("'" + str34 + "' != '" + "\u4e2d\u6587\u53f0\u6e7e\u5730\u533a)" + "'", str34, "\u4e2d\u6587\u53f0\u6e7e\u5730\u533a)");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "zho");
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "eng" + "'", str40, "eng");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertNotNull(strSet46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
    }

    @Test
    public void test19017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19017");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = gJChronology2.halfdays();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.millisOfDay();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.minuteOfDay();
        org.joda.time.DurationField durationField6 = gJChronology2.centuries();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology2.dayOfYear();
        java.lang.String str8 = gJChronology2.toString();
        org.joda.time.DateTimeField dateTimeField9 = gJChronology2.dayOfYear();
        org.joda.time.DateTimeField dateTimeField10 = gJChronology2.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField11 = gJChronology2.dayOfWeek();
        org.joda.time.DurationField durationField12 = gJChronology2.centuries();
        java.util.TimeZone timeZone13 = null;
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forTimeZone(timeZone13);
        java.lang.String str16 = dateTimeZone14.getNameKey((long) 100);
        boolean boolean17 = dateTimeZone14.isFixed();
        org.joda.time.chrono.GJChronology gJChronology18 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone14);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        long long21 = dateTimeZone14.getMillisKeepLocal(dateTimeZone19, (long) (byte) 0);
        int int23 = dateTimeZone14.getOffsetFromLocal(349200000L);
        org.joda.time.Chronology chronology24 = gJChronology2.withZone(dateTimeZone14);
        org.joda.time.DateTimeField dateTimeField25 = gJChronology2.weekyear();
        org.joda.time.DateTimeField dateTimeField26 = gJChronology2.yearOfCentury();
        java.util.TimeZone timeZone27 = null;
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forTimeZone(timeZone27);
        org.joda.time.chrono.GJChronology gJChronology29 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone28);
        org.joda.time.DurationField durationField30 = gJChronology29.halfdays();
        long long34 = gJChronology29.add((long) 'a', (-1L), (int) (short) 0);
        long long38 = gJChronology29.add((long) (byte) 0, (long) '4', 100);
        org.joda.time.DurationField durationField39 = gJChronology29.years();
        org.joda.time.ReadablePeriod readablePeriod40 = null;
        long long43 = gJChronology29.add(readablePeriod40, (long) '#', (int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(0, (int) (short) 10);
        java.util.Locale locale50 = new java.util.Locale("cinese (Taiwan)", "DurationField[weekyears]");
        java.lang.String str51 = dateTimeZone46.getShortName((long) ' ', locale50);
        org.joda.time.Chronology chronology52 = gJChronology29.withZone(dateTimeZone46);
        java.lang.String str54 = dateTimeZone46.getName(4320000L);
        org.joda.time.Chronology chronology55 = gJChronology2.withZone(dateTimeZone46);
        org.joda.time.DateTimeField dateTimeField56 = gJChronology2.secondOfMinute();
        org.joda.time.ReadablePartial readablePartial57 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray59 = gJChronology2.get(readablePartial57, 3732632456639948L);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "GJChronology[+00:00:00.052]" + "'", str8, "GJChronology[+00:00:00.052]");
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(dateTimeZone14);
// flaky:         org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(gJChronology18);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
// flaky:         org.junit.Assert.assertTrue("'" + int23 + "' != '" + 52 + "'", int23 == 52);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(gJChronology29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 97L + "'", long34 == 97L);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 5200L + "'", long38 == 5200L);
        org.junit.Assert.assertNotNull(durationField39);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 35L + "'", long43 == 35L);
        org.junit.Assert.assertNotNull(dateTimeZone46);
        org.junit.Assert.assertEquals(locale50.toString(), "cinese (taiwan)_DURATIONFIELD[WEEKYEARS]");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "+00:10" + "'", str51, "+00:10");
        org.junit.Assert.assertNotNull(chronology52);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "+00:10" + "'", str54, "+00:10");
        org.junit.Assert.assertNotNull(chronology55);
        org.junit.Assert.assertNotNull(dateTimeField56);
    }

    @Test
    public void test19018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19018");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = gJChronology2.halfdays();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.millisOfDay();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.minuteOfDay();
        org.joda.time.DurationField durationField6 = gJChronology2.centuries();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology2.dayOfYear();
        java.lang.String str8 = gJChronology2.toString();
        org.joda.time.DateTimeField dateTimeField9 = gJChronology2.dayOfYear();
        org.joda.time.DateTimeField dateTimeField10 = gJChronology2.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField11 = gJChronology2.dayOfYear();
        org.joda.time.DurationField durationField12 = gJChronology2.months();
        long long15 = durationField12.add((long) 8333, (-185768799L));
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "GJChronology[+00:00:00.052]" + "'", str8, "GJChronology[+00:00:00.052]");
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-488534754988791667L) + "'", long15 == (-488534754988791667L));
    }

    @Test
    public void test19019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19019");
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.Locale.LanguageRange> languageRangeList1 = java.util.Locale.LanguageRange.parse("en_GB");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=en_gb");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test19020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19020");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField3 = gJChronology2.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.minuteOfHour();
        org.joda.time.DurationField durationField6 = gJChronology2.halfdays();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology2.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField8 = gJChronology2.year();
        long long12 = gJChronology2.add(0L, 1774384358399937L, 0);
        org.joda.time.DurationField durationField13 = gJChronology2.hours();
        java.lang.String str14 = durationField13.toString();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "DurationField[hours]" + "'", str14, "DurationField[hours]");
    }

    @Test
    public void test19021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19021");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = gJChronology2.halfdays();
        long long7 = gJChronology2.add((long) 'a', (-1L), (int) (short) 0);
        boolean boolean9 = gJChronology2.equals((java.lang.Object) 0);
        org.joda.time.DateTimeField dateTimeField10 = gJChronology2.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField11 = gJChronology2.hourOfHalfday();
        org.joda.time.DurationField durationField12 = gJChronology2.millis();
        org.joda.time.DurationField durationField13 = gJChronology2.months();
        org.joda.time.DurationField durationField14 = gJChronology2.days();
        long long15 = durationField14.getUnitMillis();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 97L + "'", long7 == 97L);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 86400000L + "'", long15 == 86400000L);
    }

    @Test
    public void test19022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19022");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField3 = gJChronology2.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.clockhourOfDay();
        org.joda.time.DateTimeZone dateTimeZone6 = gJChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology2.hourOfHalfday();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTimeField7);
    }

    @Test
    public void test19023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19023");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        java.util.Locale locale4 = new java.util.Locale("hi!");
        java.lang.String str5 = locale4.getCountry();
        java.util.Locale locale6 = java.util.Locale.getDefault();
        java.lang.String str7 = locale6.getDisplayName();
        java.lang.String str8 = locale4.getDisplayScript(locale6);
        boolean boolean9 = dateTimeZone1.equals((java.lang.Object) locale6);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetMillis((int) '4');
        java.util.TimeZone timeZone12 = dateTimeZone11.toTimeZone();
        long long15 = dateTimeZone11.adjustOffset((long) 0, false);
        int int17 = dateTimeZone11.getOffsetFromLocal((-26438399999L));
        long long19 = dateTimeZone1.getMillisKeepLocal(dateTimeZone11, (long) (byte) 10);
        org.joda.time.Instant instant21 = new org.joda.time.Instant(52L);
        boolean boolean22 = instant21.isEqualNow();
        org.joda.time.ReadableDuration readableDuration23 = null;
        org.joda.time.Instant instant24 = instant21.plus(readableDuration23);
        long long25 = instant21.getMillis();
        java.lang.String str26 = instant21.toString();
        org.joda.time.Instant instant27 = instant21.toInstant();
        org.joda.time.ReadableDuration readableDuration28 = null;
        org.joda.time.Instant instant30 = instant21.withDurationAdded(readableDuration28, (int) 'x');
        java.util.TimeZone timeZone31 = null;
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.forTimeZone(timeZone31);
        org.joda.time.chrono.GJChronology gJChronology33 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone32);
        org.joda.time.DateTimeField dateTimeField34 = gJChronology33.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField35 = gJChronology33.yearOfCentury();
        int int36 = instant30.get(dateTimeField35);
        org.joda.time.chrono.GJChronology gJChronology37 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone11, (org.joda.time.ReadableInstant) instant30);
        org.joda.time.DateTimeField dateTimeField38 = gJChronology37.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField39 = gJChronology37.hourOfHalfday();
        org.joda.time.DurationField durationField40 = gJChronology37.centuries();
        org.joda.time.Chronology chronology41 = gJChronology37.withUTC();
        org.joda.time.DateTimeField dateTimeField42 = gJChronology37.millisOfSecond();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertEquals(locale4.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(timeZone12);
        org.junit.Assert.assertEquals(timeZone12.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 52 + "'", int17 == 52);
// flaky:         org.junit.Assert.assertTrue("'" + long19 + "' != '" + 10L + "'", long19 == 10L);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(instant24);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 52L + "'", long25 == 52L);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "1970-01-01T00:00:00.052Z" + "'", str26, "1970-01-01T00:00:00.052Z");
        org.junit.Assert.assertNotNull(instant27);
        org.junit.Assert.assertNotNull(instant30);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertNotNull(gJChronology33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 70 + "'", int36 == 70);
        org.junit.Assert.assertNotNull(gJChronology37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(durationField40);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(dateTimeField42);
    }

    @Test
    public void test19024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19024");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField3 = gJChronology2.millisOfSecond();
        org.joda.time.DurationField durationField4 = gJChronology2.weeks();
        org.joda.time.DurationField durationField5 = gJChronology2.months();
        java.lang.String str6 = gJChronology2.toString();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology2.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField8 = gJChronology2.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField9 = gJChronology2.hourOfDay();
        // The following exception was thrown during execution in test generation
        try {
            long long14 = gJChronology2.getDateTimeMillis((-2106656), (int) 'x', (int) ' ', 28800104);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 120 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "GJChronology[+00:00:00.052]" + "'", str6, "GJChronology[+00:00:00.052]");
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
    }

    @Test
    public void test19025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19025");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clear();
        java.util.Locale.Builder builder2 = builder0.clearExtensions();
        java.util.Locale.Builder builder4 = builder0.setVariant("halfdays");
        java.util.Locale.Builder builder6 = builder0.setScript("");
        java.util.Locale.Builder builder7 = builder0.clearExtensions();
        java.util.Locale.Builder builder9 = builder0.setRegion("CN");
        java.util.Locale.Builder builder10 = builder0.clear();
        java.util.Locale.Builder builder12 = builder0.addUnicodeLocaleAttribute("und");
        java.util.Locale.Builder builder14 = builder12.setVariant("French");
        java.util.Locale.Builder builder15 = builder12.clear();
        java.util.Locale.Builder builder16 = builder15.clearExtensions();
        java.util.Locale.Builder builder17 = builder15.clearExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder20 = builder17.setUnicodeLocaleKeyword("\u82f1\u6587_JAPANESE_ja-jp", "English");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale keyword key: ??_JAPANESE_ja-jp [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder17);
    }

    @Test
    public void test19026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19026");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = gJChronology2.halfdays();
        long long7 = gJChronology2.add((long) 'a', (-1L), (int) (short) 0);
        long long11 = gJChronology2.add((long) (byte) 0, (long) '4', 100);
        org.joda.time.DateTimeField dateTimeField12 = gJChronology2.minuteOfHour();
        org.joda.time.DurationField durationField13 = gJChronology2.hours();
        org.joda.time.DateTimeField dateTimeField14 = gJChronology2.monthOfYear();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology2.weekyearOfCentury();
        org.joda.time.DurationField durationField16 = gJChronology2.weekyears();
        org.joda.time.DateTimeField dateTimeField17 = gJChronology2.dayOfWeek();
        org.joda.time.ReadablePeriod readablePeriod18 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray21 = gJChronology2.get(readablePeriod18, 3155760005983L, 624L);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 97L + "'", long7 == 97L);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 5200L + "'", long11 == 5200L);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
    }

    @Test
    public void test19027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19027");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = gJChronology2.halfdays();
        long long7 = gJChronology2.add((long) 'a', (-1L), (int) (short) 0);
        org.joda.time.DateTimeField dateTimeField8 = gJChronology2.halfdayOfDay();
        org.joda.time.Chronology chronology9 = gJChronology2.withUTC();
        org.joda.time.DateTimeField dateTimeField10 = gJChronology2.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField11 = gJChronology2.hourOfDay();
        org.joda.time.DateTimeField dateTimeField12 = gJChronology2.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField13 = gJChronology2.clockhourOfDay();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 97L + "'", long7 == 97L);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
    }

    @Test
    public void test19028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19028");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = gJChronology2.years();
        java.util.TimeZone timeZone4 = null;
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forTimeZone(timeZone4);
        org.joda.time.chrono.GJChronology gJChronology6 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone5);
        org.joda.time.DurationField durationField7 = gJChronology6.halfdays();
        org.joda.time.DateTimeField dateTimeField8 = gJChronology6.millisOfDay();
        org.joda.time.DateTimeField dateTimeField9 = gJChronology6.minuteOfDay();
        org.joda.time.DurationField durationField10 = gJChronology6.centuries();
        java.util.TimeZone timeZone11 = null;
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forTimeZone(timeZone11);
        org.joda.time.chrono.GJChronology gJChronology13 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone12);
        org.joda.time.DurationField durationField14 = gJChronology13.halfdays();
        long long17 = durationField14.add((long) 100, 100L);
        boolean boolean18 = durationField14.isPrecise();
        int int19 = durationField10.compareTo(durationField14);
        boolean boolean20 = gJChronology2.equals((java.lang.Object) durationField10);
        org.joda.time.DateTimeField dateTimeField21 = gJChronology2.dayOfYear();
        org.joda.time.DateTimeField dateTimeField22 = gJChronology2.era();
        org.joda.time.DateTimeZone dateTimeZone23 = gJChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField24 = gJChronology2.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField25 = gJChronology2.hourOfHalfday();
        boolean boolean26 = dateTimeField25.isLenient();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(gJChronology6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(gJChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 4320000100L + "'", long17 == 4320000100L);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test19029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19029");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = gJChronology2.halfdays();
        long long7 = gJChronology2.add((long) 'a', (-1L), (int) (short) 0);
        boolean boolean9 = gJChronology2.equals((java.lang.Object) 0);
        org.joda.time.DateTimeField dateTimeField10 = gJChronology2.dayOfMonth();
        org.joda.time.DurationField durationField11 = gJChronology2.seconds();
        org.joda.time.DateTimeField dateTimeField12 = gJChronology2.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField13 = gJChronology2.halfdayOfDay();
        java.util.TimeZone timeZone14 = null;
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forTimeZone(timeZone14);
        org.joda.time.chrono.GJChronology gJChronology16 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone15);
        int int18 = dateTimeZone15.getOffsetFromLocal((long) (-1));
        int int20 = dateTimeZone15.getOffset((-61827926399999L));
        java.lang.String str21 = dateTimeZone15.toString();
        long long23 = dateTimeZone15.previousTransition(0L);
        org.joda.time.LocalDateTime localDateTime24 = null;
        boolean boolean25 = dateTimeZone15.isLocalDateTimeGap(localDateTime24);
        org.joda.time.Chronology chronology26 = gJChronology2.withZone(dateTimeZone15);
        org.joda.time.DurationField durationField27 = gJChronology2.halfdays();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 97L + "'", long7 == 97L);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(gJChronology16);
// flaky:         org.junit.Assert.assertTrue("'" + int18 + "' != '" + 52 + "'", int18 == 52);
// flaky:         org.junit.Assert.assertTrue("'" + int20 + "' != '" + 52 + "'", int20 == 52);
// flaky:         org.junit.Assert.assertEquals("'" + str21 + "' != '" + "+00:00:00.052" + "'", str21, "+00:00:00.052");
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(durationField27);
    }

    @Test
    public void test19030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19030");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField3 = gJChronology2.millisOfSecond();
        org.joda.time.DurationField durationField4 = gJChronology2.millis();
        org.joda.time.DurationField durationField5 = gJChronology2.weekyears();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology2.dayOfYear();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology2.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField8 = gJChronology2.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField9 = gJChronology2.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField10 = gJChronology2.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField11 = gJChronology2.millisOfSecond();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
    }

    @Test
    public void test19031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19031");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = gJChronology2.halfdays();
        long long7 = gJChronology2.add((long) 'a', (-1L), (int) (short) 0);
        boolean boolean9 = gJChronology2.equals((java.lang.Object) 0);
        org.joda.time.DateTimeField dateTimeField10 = gJChronology2.dayOfMonth();
        org.joda.time.DurationField durationField11 = gJChronology2.seconds();
        org.joda.time.DateTimeField dateTimeField12 = gJChronology2.halfdayOfDay();
        org.joda.time.DurationField durationField13 = gJChronology2.days();
        org.joda.time.DateTimeField dateTimeField14 = gJChronology2.secondOfDay();
        org.joda.time.ReadablePartial readablePartial15 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray17 = gJChronology2.get(readablePartial15, (-636696130825L));
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 97L + "'", long7 == 97L);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
    }

    @Test
    public void test19032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19032");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = gJChronology2.halfdays();
        long long7 = gJChronology2.add((long) 'a', (-1L), (int) (short) 0);
        long long11 = gJChronology2.add((long) (byte) 0, (long) '4', 100);
        org.joda.time.DateTimeField dateTimeField12 = gJChronology2.minuteOfHour();
        org.joda.time.DurationField durationField13 = gJChronology2.hours();
        org.joda.time.DateTimeField dateTimeField14 = gJChronology2.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology2.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField16 = gJChronology2.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField17 = gJChronology2.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField18 = gJChronology2.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField19 = gJChronology2.secondOfDay();
        org.joda.time.DurationField durationField20 = gJChronology2.halfdays();
        org.joda.time.DateTimeField dateTimeField21 = gJChronology2.minuteOfHour();
        org.joda.time.DurationField durationField22 = gJChronology2.minutes();
        org.joda.time.DateTimeField dateTimeField23 = gJChronology2.secondOfDay();
        org.joda.time.DateTimeField dateTimeField24 = gJChronology2.weekyearOfCentury();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 97L + "'", long7 == 97L);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 5200L + "'", long11 == 5200L);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
    }

    @Test
    public void test19033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19033");
        java.util.Locale.Category category0 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale1 = java.util.Locale.getDefault();
        boolean boolean2 = locale1.hasExtensions();
        java.lang.String str3 = locale1.getISO3Language();
        java.util.Locale.setDefault(category0, locale1);
        java.util.Locale locale5 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale6 = java.util.Locale.ENGLISH;
        java.lang.String str7 = locale5.getDisplayLanguage(locale6);
        java.util.Locale locale8 = java.util.Locale.CANADA;
        java.lang.String str9 = locale8.getISO3Language();
        java.lang.String str10 = locale5.getDisplayVariant(locale8);
        java.lang.String str11 = locale5.getDisplayName();
        java.util.Locale.setDefault(category0, locale5);
        java.util.Locale locale13 = java.util.Locale.getDefault(category0);
        java.util.Locale locale14 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str15 = locale14.getLanguage();
        java.util.Set<java.lang.Character> charSet16 = locale14.getExtensionKeys();
        java.util.Locale locale18 = new java.util.Locale("hi!");
        java.lang.String str19 = locale18.getVariant();
        java.util.Locale locale21 = java.util.Locale.forLanguageTag("hi!");
        java.lang.String str22 = locale21.toLanguageTag();
        java.lang.String str23 = locale18.getDisplayName(locale21);
        java.lang.String str24 = locale14.getDisplayScript(locale21);
        java.lang.String str25 = locale21.getDisplayCountry();
        java.util.Locale.setDefault(category0, locale21);
        java.util.Locale.Category category27 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale28 = java.util.Locale.getDefault();
        boolean boolean29 = locale28.hasExtensions();
        java.lang.String str30 = locale28.getISO3Language();
        java.util.Locale.setDefault(category27, locale28);
        java.util.Locale locale32 = java.util.Locale.ITALIAN;
        java.util.Locale locale33 = locale32.stripExtensions();
        java.util.Locale.setDefault(category27, locale33);
        java.util.Locale locale37 = new java.util.Locale("DurationField[halfdays]", "\u82f1\u6587");
        java.util.Locale.setDefault(category27, locale37);
        java.lang.String str39 = locale37.getDisplayCountry();
        java.util.Locale.setDefault(category0, locale37);
        java.util.Locale.Category category41 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale42 = java.util.Locale.getDefault();
        boolean boolean43 = locale42.hasExtensions();
        java.lang.String str44 = locale42.getISO3Language();
        java.util.Locale.setDefault(category41, locale42);
        java.util.Locale locale46 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale47 = java.util.Locale.ENGLISH;
        java.lang.String str48 = locale46.getDisplayLanguage(locale47);
        java.util.Locale locale49 = java.util.Locale.CANADA;
        java.lang.String str50 = locale49.getISO3Language();
        java.lang.String str51 = locale46.getDisplayVariant(locale49);
        java.lang.String str52 = locale46.getDisplayName();
        java.util.Locale.setDefault(category41, locale46);
        java.lang.String str54 = locale46.getCountry();
        java.util.TimeZone timeZone55 = null;
        org.joda.time.DateTimeZone dateTimeZone56 = org.joda.time.DateTimeZone.forTimeZone(timeZone55);
        org.joda.time.chrono.GJChronology gJChronology57 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone56);
        java.util.Locale locale59 = new java.util.Locale("hi!");
        java.lang.String str60 = locale59.getCountry();
        java.util.Locale locale61 = java.util.Locale.getDefault();
        java.lang.String str62 = locale61.getDisplayName();
        java.lang.String str63 = locale59.getDisplayScript(locale61);
        boolean boolean64 = dateTimeZone56.equals((java.lang.Object) locale61);
        java.lang.String str65 = locale61.getCountry();
        java.util.Locale locale67 = java.util.Locale.forLanguageTag("hi!");
        java.lang.String str68 = locale61.getDisplayCountry(locale67);
        java.lang.String str69 = locale61.getISO3Country();
        java.util.Locale locale70 = locale61.stripExtensions();
        java.lang.String str71 = locale46.getDisplayName(locale70);
        java.lang.String str72 = locale37.getDisplayName(locale46);
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category0.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "hi!");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "hi!" + "'", str3, "hi!");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "en");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Chinese" + "'", str7, "Chinese");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "eng" + "'", str9, "eng");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Chinese (Taiwan)" + "'", str11, "Chinese (Taiwan)");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "zh" + "'", str15, "zh");
        org.junit.Assert.assertNotNull(charSet16);
        org.junit.Assert.assertEquals(locale18.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "und" + "'", str22, "und");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "hi!" + "'", str23, "hi!");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertTrue("'" + category27 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category27.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "hi!");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "hi!" + "'", str30, "hi!");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "it");
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "it");
// flaky:         org.junit.Assert.assertEquals(locale37.toString(), "\u82f1\u6587");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "\u82f1\u6587" + "'", str39, "\u82f1\u6587");
        org.junit.Assert.assertTrue("'" + category41 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category41.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "hi!");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "hi!" + "'", str44, "hi!");
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "en");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "Chinese" + "'", str48, "Chinese");
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "eng" + "'", str50, "eng");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "Chinese (Taiwan)" + "'", str52, "Chinese (Taiwan)");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "TW" + "'", str54, "TW");
        org.junit.Assert.assertNotNull(dateTimeZone56);
        org.junit.Assert.assertNotNull(gJChronology57);
        org.junit.Assert.assertEquals(locale59.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "hi!" + "'", str62, "hi!");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "" + "'", str63, "");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "" + "'", str65, "");
        org.junit.Assert.assertNotNull(locale67);
        org.junit.Assert.assertEquals(locale67.toString(), "");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "" + "'", str68, "");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "" + "'", str69, "");
        org.junit.Assert.assertNotNull(locale70);
        org.junit.Assert.assertEquals(locale70.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "Chinese (Taiwan)" + "'", str71, "Chinese (Taiwan)");
// flaky:         org.junit.Assert.assertEquals("'" + str72 + "' != '" + "\u82f1\u6587)" + "'", str72, "\u82f1\u6587)");
    }

    @Test
    public void test19034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19034");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField3 = gJChronology2.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.weekyearOfCentury();
        org.joda.time.Instant instant5 = gJChronology2.getGregorianCutover();
        org.joda.time.Instant instant7 = instant5.withMillis(0L);
        org.joda.time.Instant instant9 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone10 = null;
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forTimeZone(timeZone10);
        org.joda.time.chrono.GJChronology gJChronology12 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone11);
        org.joda.time.DateTimeField dateTimeField13 = gJChronology12.millisOfSecond();
        int int14 = instant9.get(dateTimeField13);
        org.joda.time.Instant instant16 = instant9.plus(0L);
        int int17 = instant7.compareTo((org.joda.time.ReadableInstant) instant16);
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = null;
        boolean boolean19 = instant16.isSupported(dateTimeFieldType18);
        org.joda.time.Instant instant21 = instant16.minus((long) (short) 10);
        org.joda.time.Instant instant23 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone24 = null;
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forTimeZone(timeZone24);
        org.joda.time.chrono.GJChronology gJChronology26 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone25);
        org.joda.time.DateTimeField dateTimeField27 = gJChronology26.millisOfSecond();
        int int28 = instant23.get(dateTimeField27);
        org.joda.time.Instant instant30 = instant23.plus(0L);
        java.util.TimeZone timeZone31 = null;
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.forTimeZone(timeZone31);
        org.joda.time.chrono.GJChronology gJChronology33 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone32);
        org.joda.time.DurationField durationField34 = gJChronology33.halfdays();
        org.joda.time.Chronology chronology35 = gJChronology33.withUTC();
        java.lang.String str36 = gJChronology33.toString();
        org.joda.time.DateTimeField dateTimeField37 = gJChronology33.hourOfHalfday();
        int int38 = instant23.get(dateTimeField37);
        org.joda.time.Instant instant40 = new org.joda.time.Instant(52L);
        boolean boolean41 = instant40.isEqualNow();
        java.lang.String str42 = instant40.toString();
        org.joda.time.Instant instant44 = new org.joda.time.Instant(52L);
        boolean boolean45 = instant44.isEqualNow();
        java.lang.String str46 = instant44.toString();
        java.lang.String str47 = instant44.toString();
        org.joda.time.Instant instant50 = instant44.withDurationAdded(115200000L, (int) (short) 1);
        int int51 = instant40.compareTo((org.joda.time.ReadableInstant) instant44);
        org.joda.time.Instant instant53 = new org.joda.time.Instant(52L);
        boolean boolean54 = instant53.isEqualNow();
        org.joda.time.ReadableDuration readableDuration55 = null;
        org.joda.time.Instant instant56 = instant53.plus(readableDuration55);
        boolean boolean58 = instant56.equals((java.lang.Object) ' ');
        boolean boolean59 = instant44.isAfter((org.joda.time.ReadableInstant) instant56);
        int int60 = instant23.compareTo((org.joda.time.ReadableInstant) instant44);
        org.joda.time.Instant instant61 = instant23.toInstant();
        org.joda.time.Chronology chronology62 = instant61.getChronology();
        boolean boolean63 = instant21.isEqual((org.joda.time.ReadableInstant) instant61);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(instant5);
        org.junit.Assert.assertNotNull(instant7);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(gJChronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
// flaky:         org.junit.Assert.assertTrue("'" + int14 + "' != '" + 104 + "'", int14 == 104);
        org.junit.Assert.assertNotNull(instant16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(instant21);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(gJChronology26);
        org.junit.Assert.assertNotNull(dateTimeField27);
// flaky:         org.junit.Assert.assertTrue("'" + int28 + "' != '" + 104 + "'", int28 == 104);
        org.junit.Assert.assertNotNull(instant30);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertNotNull(gJChronology33);
        org.junit.Assert.assertNotNull(durationField34);
        org.junit.Assert.assertNotNull(chronology35);
// flaky:         org.junit.Assert.assertEquals("'" + str36 + "' != '" + "GJChronology[+00:00:00.052]" + "'", str36, "GJChronology[+00:00:00.052]");
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "1970-01-01T00:00:00.052Z" + "'", str42, "1970-01-01T00:00:00.052Z");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "1970-01-01T00:00:00.052Z" + "'", str46, "1970-01-01T00:00:00.052Z");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "1970-01-01T00:00:00.052Z" + "'", str47, "1970-01-01T00:00:00.052Z");
        org.junit.Assert.assertNotNull(instant50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(instant56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertNotNull(instant61);
        org.junit.Assert.assertNotNull(chronology62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
    }

    @Test
    public void test19035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19035");
        java.util.Locale.Category category0 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale1 = java.util.Locale.CANADA;
        java.lang.String str2 = locale1.getISO3Language();
        java.util.Locale.setDefault(category0, locale1);
        java.util.Locale locale5 = java.util.Locale.forLanguageTag("halfdays");
        boolean boolean6 = locale5.hasExtensions();
        java.util.Set<java.lang.Character> charSet7 = locale5.getExtensionKeys();
        java.util.Locale.setDefault(category0, locale5);
        java.util.Locale locale9 = java.util.Locale.getDefault(category0);
        java.util.Locale.Category category10 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale11 = java.util.Locale.CANADA;
        java.lang.String str12 = locale11.getISO3Language();
        java.util.Locale.setDefault(category10, locale11);
        java.util.Locale locale15 = java.util.Locale.forLanguageTag("halfdays");
        boolean boolean16 = locale15.hasExtensions();
        java.util.Set<java.lang.Character> charSet17 = locale15.getExtensionKeys();
        java.util.Locale.setDefault(category10, locale15);
        java.util.Locale locale19 = java.util.Locale.getDefault(category10);
        java.util.Set<java.lang.String> strSet20 = locale19.getUnicodeLocaleAttributes();
        java.util.Locale.Builder builder21 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder22 = builder21.clear();
        java.util.Locale.Builder builder24 = builder22.removeUnicodeLocaleAttribute("und");
        java.util.Locale locale25 = builder24.build();
        java.lang.String str26 = locale25.getDisplayName();
        java.lang.String str27 = locale19.getDisplayScript(locale25);
        java.util.Locale.setDefault(category0, locale19);
        java.util.Locale locale29 = java.util.Locale.getDefault(category0);
        java.util.Locale locale30 = java.util.Locale.getDefault(category0);
        java.util.Locale locale31 = java.util.Locale.getDefault();
        java.lang.String str32 = locale31.getVariant();
        java.lang.String str34 = locale31.getExtension('u');
        java.util.Locale.setDefault(locale31);
        java.lang.String str36 = locale31.getLanguage();
        java.util.Locale.setDefault(category0, locale31);
        boolean boolean38 = locale31.hasExtensions();
        java.lang.String str39 = locale31.getISO3Country();
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category0.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "eng" + "'", str2, "eng");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "halfdays");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(charSet7);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "halfdays");
        org.junit.Assert.assertTrue("'" + category10 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category10.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "eng" + "'", str12, "eng");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "halfdays");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(charSet17);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "halfdays");
        org.junit.Assert.assertNotNull(strSet20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "halfdays");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "halfdays");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "hi!" + "'", str36, "hi!");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
    }

    @Test
    public void test19036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19036");
        java.util.Locale.Category category0 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale1 = java.util.Locale.CANADA;
        java.lang.String str2 = locale1.getISO3Language();
        java.util.Locale.setDefault(category0, locale1);
        java.util.Locale locale6 = new java.util.Locale("UTC", "zh_TW");
        java.util.Locale locale7 = java.util.Locale.CHINESE;
        boolean boolean8 = locale7.hasExtensions();
        java.util.Locale.setDefault(locale7);
        java.lang.String str10 = locale6.getDisplayLanguage(locale7);
        java.lang.String str11 = locale7.getVariant();
        java.lang.String str12 = locale7.getCountry();
        java.util.Locale.setDefault(category0, locale7);
        java.util.Locale locale14 = java.util.Locale.CANADA_FRENCH;
        boolean boolean15 = locale14.hasExtensions();
        java.lang.String str16 = locale14.getDisplayLanguage();
        java.util.Locale.setDefault(category0, locale14);
        java.util.Locale locale21 = new java.util.Locale("\u4e2d\u6587\u53f0\u6e7e\u5730\u533a)", "\u4e2d\u6587\u53f0\u6e7e\u5730\u533a)", "zh_TW");
        java.util.Locale.setDefault(category0, locale21);
        java.util.Locale locale23 = java.util.Locale.getDefault(category0);
        java.util.Locale locale24 = java.util.Locale.ITALIAN;
        java.util.Locale locale25 = locale24.stripExtensions();
        java.util.Locale locale26 = java.util.Locale.CANADA;
        java.lang.String str27 = locale24.getDisplayVariant(locale26);
        java.lang.String str28 = locale26.getDisplayLanguage();
        java.lang.String str29 = locale26.getDisplayCountry();
        java.lang.String str30 = locale26.getDisplayVariant();
        java.util.Locale.setDefault(locale26);
        java.util.Locale locale32 = java.util.Locale.CANADA;
        java.lang.String str33 = locale32.getCountry();
        java.lang.String str34 = locale26.getDisplayVariant(locale32);
        java.util.Locale.setDefault(category0, locale32);
        java.util.Locale locale36 = java.util.Locale.getDefault(category0);
        java.util.Locale locale38 = new java.util.Locale("hi!");
        java.lang.String str39 = locale38.getVariant();
        java.util.Locale locale41 = java.util.Locale.forLanguageTag("hi!");
        java.lang.String str42 = locale41.toLanguageTag();
        java.lang.String str43 = locale38.getDisplayName(locale41);
        java.util.Locale locale44 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale45 = java.util.Locale.ENGLISH;
        java.lang.String str46 = locale44.getDisplayLanguage(locale45);
        java.util.Locale locale47 = java.util.Locale.CANADA;
        java.lang.String str48 = locale47.getISO3Language();
        java.lang.String str49 = locale44.getDisplayVariant(locale47);
        java.lang.String str50 = locale41.getDisplayCountry(locale47);
        java.lang.String str51 = locale47.getDisplayCountry();
        java.util.Set<java.lang.String> strSet52 = locale47.getUnicodeLocaleKeys();
        java.util.Locale.setDefault(category0, locale47);
        java.util.Locale locale54 = java.util.Locale.getDefault(category0);
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category0.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "eng" + "'", str2, "eng");
        org.junit.Assert.assertEquals(locale6.toString(), "utc_ZH_TW");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "zh");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "utc" + "'", str10, "utc");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "fr_CA");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "\u6cd5\u6587" + "'", str16, "\u6cd5\u6587");
// flaky:         org.junit.Assert.assertEquals(locale21.toString(), "\u4e2d\u6587\u53f0\u6e7e\u5730\u533a\u4e2d\u6587\u53f0\u6e7e\u5730\u533a)_zh_TW");
        org.junit.Assert.assertNotNull(locale23);
// flaky:         org.junit.Assert.assertEquals(locale23.toString(), "\u4e2d\u6587\u53f0\u6e7e\u5730\u533a\u4e2d\u6587\u53f0\u6e7e\u5730\u533a)_zh_TW");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "it");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "it");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "English" + "'", str28, "English");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Canada" + "'", str29, "Canada");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "CA" + "'", str33, "CA");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "en_CA");
        org.junit.Assert.assertEquals(locale38.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "und" + "'", str42, "und");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "hi!" + "'", str43, "hi!");
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "en");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "Chinese" + "'", str46, "Chinese");
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "eng" + "'", str48, "eng");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "Canada" + "'", str51, "Canada");
        org.junit.Assert.assertNotNull(strSet52);
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "en_CA");
    }

    @Test
    public void test19037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19037");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField3 = gJChronology2.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.weekyearOfCentury();
        org.joda.time.Instant instant5 = gJChronology2.getGregorianCutover();
        org.joda.time.Instant instant7 = instant5.withMillis(0L);
        org.joda.time.Chronology chronology8 = instant7.getChronology();
        boolean boolean10 = instant7.isBefore((-102228L));
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(instant5);
        org.junit.Assert.assertNotNull(instant7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test19038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19038");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = gJChronology2.halfdays();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.millisOfDay();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.minuteOfDay();
        org.joda.time.DurationField durationField6 = gJChronology2.centuries();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology2.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField8 = gJChronology2.year();
        org.joda.time.DurationField durationField9 = gJChronology2.weekyears();
        org.joda.time.DateTimeField dateTimeField10 = gJChronology2.dayOfYear();
        org.joda.time.DateTimeField dateTimeField11 = gJChronology2.millisOfDay();
        org.joda.time.Chronology chronology12 = gJChronology2.withUTC();
        org.joda.time.DateTimeZone dateTimeZone13 = gJChronology2.getZone();
        java.util.Locale locale15 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale16 = java.util.Locale.ENGLISH;
        java.lang.String str17 = locale15.getDisplayLanguage(locale16);
        java.util.Locale locale18 = java.util.Locale.CANADA;
        java.lang.String str19 = locale18.getISO3Language();
        java.lang.String str20 = locale15.getDisplayVariant(locale18);
        java.util.Set<java.lang.String> strSet21 = locale15.getUnicodeLocaleKeys();
        java.util.Locale locale25 = new java.util.Locale("zh", "en", "");
        java.lang.String str26 = locale15.getDisplayName(locale25);
        java.lang.String str27 = dateTimeZone13.getName((-766L), locale25);
        java.util.Set<java.lang.Character> charSet28 = locale25.getExtensionKeys();
        java.lang.String str29 = locale25.getScript();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "en");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Chinese" + "'", str17, "Chinese");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "eng" + "'", str19, "eng");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(strSet21);
        org.junit.Assert.assertEquals(locale25.toString(), "zh_EN");
// flaky:         org.junit.Assert.assertEquals("'" + str26 + "' != '" + "\u4e2d\u6587\u53f0\u6e7e\u5730\u533a)" + "'", str26, "\u4e2d\u6587\u53f0\u6e7e\u5730\u533a)");
// flaky:         org.junit.Assert.assertEquals("'" + str27 + "' != '" + "+00:00:00.052" + "'", str27, "+00:00:00.052");
        org.junit.Assert.assertNotNull(charSet28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
    }

    @Test
    public void test19039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19039");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clear();
        java.util.Locale.Builder builder3 = builder1.removeUnicodeLocaleAttribute("und");
        java.util.Locale locale4 = builder3.build();
        java.lang.String str5 = locale4.getDisplayName();
        java.util.Locale locale6 = java.util.Locale.ITALIAN;
        java.util.Locale locale7 = locale6.stripExtensions();
        java.lang.String str8 = locale6.getDisplayVariant();
        java.util.Set<java.lang.String> strSet9 = locale6.getUnicodeLocaleKeys();
        java.lang.String str10 = locale4.getDisplayName(locale6);
        java.lang.String str11 = locale6.toLanguageTag();
        java.util.Set<java.lang.Character> charSet12 = locale6.getExtensionKeys();
        java.util.Locale.Category category13 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale14 = java.util.Locale.CANADA;
        java.lang.String str15 = locale14.getISO3Language();
        java.util.Locale.setDefault(category13, locale14);
        java.util.Locale locale19 = new java.util.Locale("cinese (Taiwan)", "DurationField[weekyears]");
        java.util.Set<java.lang.String> strSet20 = locale19.getUnicodeLocaleAttributes();
        java.lang.String str21 = locale14.getDisplayLanguage(locale19);
        java.lang.String str22 = locale6.getDisplayLanguage(locale14);
        java.util.Locale locale24 = java.util.Locale.forLanguageTag("");
        java.util.TimeZone timeZone25 = null;
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forTimeZone(timeZone25);
        org.joda.time.chrono.GJChronology gJChronology27 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone26);
        org.joda.time.DurationField durationField28 = gJChronology27.halfdays();
        org.joda.time.DateTimeField dateTimeField29 = gJChronology27.millisOfDay();
        org.joda.time.DateTimeField dateTimeField30 = gJChronology27.minuteOfDay();
        org.joda.time.DurationField durationField31 = gJChronology27.centuries();
        org.joda.time.DateTimeField dateTimeField32 = gJChronology27.halfdayOfDay();
        java.util.Locale locale33 = java.util.Locale.ITALIAN;
        java.util.Locale locale34 = locale33.stripExtensions();
        java.util.Locale locale35 = java.util.Locale.CANADA;
        java.lang.String str36 = locale33.getDisplayVariant(locale35);
        boolean boolean37 = gJChronology27.equals((java.lang.Object) locale35);
        java.lang.String str38 = locale24.getDisplayLanguage(locale35);
        java.lang.String str40 = locale35.getUnicodeLocaleType("en");
        java.lang.String str41 = locale35.getISO3Language();
        java.lang.String str42 = locale35.getLanguage();
        java.util.Set<java.lang.String> strSet43 = locale35.getUnicodeLocaleKeys();
        java.util.Locale locale45 = java.util.Locale.forLanguageTag("hi!");
        java.lang.String str46 = locale45.toLanguageTag();
        java.util.Set<java.lang.String> strSet47 = locale45.getUnicodeLocaleKeys();
        java.util.Set<java.lang.String> strSet48 = locale45.getUnicodeLocaleKeys();
        java.lang.String str49 = locale45.getDisplayCountry();
        java.lang.String str50 = locale45.getDisplayName();
        java.lang.String str51 = locale45.getDisplayScript();
        java.lang.String str52 = locale35.getDisplayCountry(locale45);
        java.lang.String str53 = locale6.getDisplayScript(locale45);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "it");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "it");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(strSet9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "it" + "'", str11, "it");
        org.junit.Assert.assertNotNull(charSet12);
        org.junit.Assert.assertTrue("'" + category13 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category13.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "eng" + "'", str15, "eng");
        org.junit.Assert.assertEquals(locale19.toString(), "cinese (taiwan)_DURATIONFIELD[WEEKYEARS]");
        org.junit.Assert.assertNotNull(strSet20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "English" + "'", str21, "English");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Italian" + "'", str22, "Italian");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "");
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertNotNull(gJChronology27);
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "it");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "it");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "eng" + "'", str41, "eng");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "en" + "'", str42, "en");
        org.junit.Assert.assertNotNull(strSet43);
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "und" + "'", str46, "und");
        org.junit.Assert.assertNotNull(strSet47);
        org.junit.Assert.assertNotNull(strSet48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "Canada" + "'", str52, "Canada");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
    }

    @Test
    public void test19040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19040");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = gJChronology2.halfdays();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.millisOfDay();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology2.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone7 = gJChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField8 = gJChronology2.millisOfSecond();
        org.joda.time.DurationField durationField9 = gJChronology2.days();
        org.joda.time.DateTimeZone dateTimeZone10 = gJChronology2.getZone();
        long long14 = gJChronology2.add(432000001L, 164096150400000L, 0);
        org.joda.time.DurationField durationField15 = gJChronology2.months();
        org.joda.time.DurationField durationField16 = gJChronology2.centuries();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 432000001L + "'", long14 == 432000001L);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(durationField16);
    }

    @Test
    public void test19041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19041");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = gJChronology2.halfdays();
        long long7 = gJChronology2.add((long) 'a', (-1L), (int) (short) 0);
        boolean boolean9 = gJChronology2.equals((java.lang.Object) 0);
        org.joda.time.DateTimeField dateTimeField10 = gJChronology2.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField11 = gJChronology2.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField12 = gJChronology2.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField13 = gJChronology2.clockhourOfHalfday();
        org.joda.time.DurationField durationField14 = gJChronology2.weekyears();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology2.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField16 = gJChronology2.monthOfYear();
        org.joda.time.DateTimeField dateTimeField17 = gJChronology2.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField18 = gJChronology2.dayOfYear();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 97L + "'", long7 == 97L);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
    }

    @Test
    public void test19042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19042");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = gJChronology2.halfdays();
        org.joda.time.Chronology chronology4 = gJChronology2.withUTC();
        java.lang.String str5 = gJChronology2.toString();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology2.hourOfHalfday();
        long long10 = gJChronology2.add(97L, (long) (byte) 100, 0);
        org.joda.time.DateTimeField dateTimeField11 = gJChronology2.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField12 = gJChronology2.yearOfCentury();
        org.joda.time.DurationField durationField13 = gJChronology2.seconds();
        long long16 = durationField13.getMillis(5778120000L, 43201764L);
        long long19 = durationField13.subtract(1590470380800000L, (-1));
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(chronology4);
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "GJChronology[+00:00:00.052]" + "'", str5, "GJChronology[+00:00:00.052]");
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 97L + "'", long10 == 97L);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 5778120000000L + "'", long16 == 5778120000000L);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 1590470380801000L + "'", long19 == 1590470380801000L);
    }

    @Test
    public void test19043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19043");
        java.util.Locale locale3 = new java.util.Locale("\u82f1\u6587", "Japanese", "ja-jp");
        java.util.Locale locale4 = locale3.stripExtensions();
        java.util.Locale locale6 = new java.util.Locale("und-Canada");
        java.util.Locale locale10 = new java.util.Locale("zh_TW", "+00:52", "UTC");
        java.lang.String str11 = locale10.getDisplayName();
        java.lang.String str12 = locale6.getDisplayName(locale10);
        java.lang.String str13 = locale4.getDisplayVariant(locale6);
        org.junit.Assert.assertEquals(locale3.toString(), "\u82f1\u6587_JAPANESE_ja-jp");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "\u82f1\u6587_JAPANESE_ja-jp");
        org.junit.Assert.assertEquals(locale6.toString(), "und-canada");
        org.junit.Assert.assertEquals(locale10.toString(), "zh_tw_+00:52_UTC");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "zh_tw (+00:52,UTC)" + "'", str11, "zh_tw (+00:52,UTC)");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "und-canada" + "'", str12, "und-canada");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "ja-jp" + "'", str13, "ja-jp");
    }

    @Test
    public void test19044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19044");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str3 = dateTimeZone1.getNameKey((long) 100);
        boolean boolean4 = dateTimeZone1.isFixed();
        org.joda.time.chrono.GJChronology gJChronology5 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        int int6 = gJChronology5.getMinimumDaysInFirstWeek();
        java.lang.String str7 = gJChronology5.toString();
        org.joda.time.DurationField durationField8 = gJChronology5.hours();
        int int10 = durationField8.getValue(315705600000L);
        java.lang.String str11 = durationField8.getName();
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(gJChronology5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 4 + "'", int6 == 4);
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "GJChronology[+00:00:00.052]" + "'", str7, "GJChronology[+00:00:00.052]");
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 87696 + "'", int10 == 87696);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hours" + "'", str11, "hours");
    }

    @Test
    public void test19045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19045");
        java.util.Locale.Category category0 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale1 = java.util.Locale.CANADA;
        java.lang.String str2 = locale1.getISO3Language();
        java.util.Locale.setDefault(category0, locale1);
        java.util.Locale locale5 = java.util.Locale.forLanguageTag("halfdays");
        boolean boolean6 = locale5.hasExtensions();
        java.util.Set<java.lang.Character> charSet7 = locale5.getExtensionKeys();
        java.util.Locale.setDefault(category0, locale5);
        java.util.Locale locale10 = new java.util.Locale("hi!");
        java.lang.String str11 = locale10.getCountry();
        java.util.Locale locale12 = java.util.Locale.getDefault();
        java.lang.String str13 = locale12.getDisplayName();
        java.lang.String str14 = locale10.getDisplayScript(locale12);
        java.util.Set<java.lang.Character> charSet15 = locale12.getExtensionKeys();
        java.util.Locale.setDefault(category0, locale12);
        java.util.TimeZone timeZone17 = null;
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forTimeZone(timeZone17);
        java.util.Locale locale20 = java.util.Locale.ENGLISH;
        java.lang.String str21 = dateTimeZone18.getShortName((-2246399965L), locale20);
        java.util.Locale.setDefault(category0, locale20);
        java.util.Locale locale23 = locale20.stripExtensions();
        java.lang.String str24 = locale23.getScript();
        java.lang.String str25 = locale23.getDisplayVariant();
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category0.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "eng" + "'", str2, "eng");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "halfdays");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(charSet7);
        org.junit.Assert.assertEquals(locale10.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "English (Canada)" + "'", str13, "English (Canada)");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(charSet15);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "en");
// flaky:         org.junit.Assert.assertEquals("'" + str21 + "' != '" + "+00:00:00.052" + "'", str21, "+00:00:00.052");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "en");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
    }

    @Test
    public void test19046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19046");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = gJChronology2.halfdays();
        org.joda.time.Chronology chronology4 = gJChronology2.withUTC();
        java.lang.String str5 = gJChronology2.toString();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology2.hourOfHalfday();
        org.joda.time.DurationField durationField7 = gJChronology2.millis();
        java.lang.String str8 = gJChronology2.toString();
        org.joda.time.DurationField durationField9 = gJChronology2.years();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(chronology4);
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "GJChronology[+00:00:00.052]" + "'", str5, "GJChronology[+00:00:00.052]");
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(durationField7);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "GJChronology[+00:00:00.052]" + "'", str8, "GJChronology[+00:00:00.052]");
        org.junit.Assert.assertNotNull(durationField9);
    }

    @Test
    public void test19047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19047");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField3 = gJChronology2.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.weekyear();
        org.joda.time.DurationField durationField5 = gJChronology2.centuries();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology2.millisOfDay();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField8 = gJChronology2.dayOfMonth();
        org.joda.time.DurationField durationField9 = gJChronology2.seconds();
        org.joda.time.DurationField durationField10 = gJChronology2.weekyears();
        org.joda.time.DurationField durationField11 = gJChronology2.weekyears();
        org.joda.time.DateTimeField dateTimeField12 = gJChronology2.yearOfEra();
        org.joda.time.DateTimeField dateTimeField13 = gJChronology2.dayOfYear();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
    }

    @Test
    public void test19048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19048");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = gJChronology2.halfdays();
        long long7 = gJChronology2.add((long) 'a', (-1L), (int) (short) 0);
        org.joda.time.DateTimeField dateTimeField8 = gJChronology2.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField9 = gJChronology2.centuryOfEra();
        long long13 = gJChronology2.add(262974600000L, (long) (byte) 100, (int) '4');
        org.joda.time.DateTimeField dateTimeField14 = gJChronology2.monthOfYear();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology2.millisOfDay();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 97L + "'", long7 == 97L);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 262974605200L + "'", long13 == 262974605200L);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
    }

    @Test
    public void test19049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19049");
        java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("en-GB");
    }

    @Test
    public void test19050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19050");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str3 = dateTimeZone1.getNameKey((long) 100);
        boolean boolean4 = dateTimeZone1.isFixed();
        org.joda.time.chrono.GJChronology gJChronology5 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        int int6 = gJChronology5.getMinimumDaysInFirstWeek();
        java.lang.String str7 = gJChronology5.toString();
        org.joda.time.DurationField durationField8 = gJChronology5.hours();
        org.joda.time.DateTimeField dateTimeField9 = gJChronology5.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField10 = gJChronology5.yearOfEra();
        org.joda.time.DurationField durationField11 = gJChronology5.seconds();
        org.joda.time.DurationField durationField12 = gJChronology5.halfdays();
        org.joda.time.DurationField durationField13 = gJChronology5.seconds();
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(gJChronology5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 4 + "'", int6 == 4);
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "GJChronology[+00:00:00.052]" + "'", str7, "GJChronology[+00:00:00.052]");
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(durationField13);
    }

    @Test
    public void test19051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19051");
        java.util.Locale locale1 = new java.util.Locale("hi!");
        java.lang.String str2 = locale1.getCountry();
        java.lang.String str3 = locale1.getScript();
        java.util.Locale locale4 = java.util.Locale.ITALIAN;
        java.util.Locale locale5 = locale4.stripExtensions();
        java.util.Locale locale6 = java.util.Locale.CANADA;
        java.lang.String str7 = locale4.getDisplayVariant(locale6);
        java.lang.String str8 = locale1.getDisplayScript(locale4);
        java.util.Locale locale10 = java.util.Locale.forLanguageTag("");
        java.util.Locale locale11 = java.util.Locale.GERMAN;
        java.lang.String str12 = locale11.getDisplayCountry();
        java.lang.String str13 = locale10.getDisplayLanguage(locale11);
        java.lang.String str14 = locale1.getDisplayScript(locale11);
        java.util.Locale locale15 = locale11.stripExtensions();
        java.lang.String str16 = locale11.getDisplayScript();
        java.util.Set<java.lang.Character> charSet17 = locale11.getExtensionKeys();
        org.junit.Assert.assertEquals(locale1.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "it");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "it");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "de");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "de");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(charSet17);
    }

    @Test
    public void test19052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19052");
        org.joda.time.chrono.GJChronology gJChronology0 = org.joda.time.chrono.GJChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = gJChronology0.era();
        org.joda.time.DateTimeField dateTimeField2 = gJChronology0.secondOfDay();
        org.joda.time.DateTimeField dateTimeField3 = gJChronology0.centuryOfEra();
        org.joda.time.DateTimeZone dateTimeZone4 = gJChronology0.getZone();
        org.junit.Assert.assertNotNull(gJChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeZone4);
    }

    @Test
    public void test19053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19053");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = gJChronology2.halfdays();
        long long7 = gJChronology2.add((long) 'a', (-1L), (int) (short) 0);
        org.joda.time.DateTimeField dateTimeField8 = gJChronology2.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField9 = gJChronology2.year();
        org.joda.time.DurationField durationField10 = gJChronology2.millis();
        org.joda.time.DurationField durationField11 = gJChronology2.seconds();
        org.joda.time.DateTimeField dateTimeField12 = gJChronology2.era();
        org.joda.time.DurationField durationField13 = gJChronology2.years();
        org.joda.time.DurationField durationField14 = gJChronology2.minutes();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology2.minuteOfHour();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 97L + "'", long7 == 97L);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
    }

    @Test
    public void test19054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19054");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) 73048);
        org.joda.time.DateTimeZone dateTimeZone2 = instant1.getZone();
        long long4 = dateTimeZone2.nextTransition(212123212062552000L);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 212123212062552000L + "'", long4 == 212123212062552000L);
    }

    @Test
    public void test19055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19055");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = gJChronology2.halfdays();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.millisOfDay();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.minuteOfDay();
        org.joda.time.DurationField durationField6 = gJChronology2.centuries();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology2.dayOfYear();
        java.lang.String str8 = gJChronology2.toString();
        org.joda.time.DateTimeField dateTimeField9 = gJChronology2.dayOfYear();
        org.joda.time.Chronology chronology10 = gJChronology2.withUTC();
        java.util.TimeZone timeZone11 = null;
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forTimeZone(timeZone11);
        java.lang.String str14 = dateTimeZone12.getNameKey((long) 100);
        boolean boolean15 = dateTimeZone12.isFixed();
        org.joda.time.chrono.GJChronology gJChronology16 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone12);
        int int17 = gJChronology16.getMinimumDaysInFirstWeek();
        org.joda.time.DateTimeField dateTimeField18 = gJChronology16.clockhourOfDay();
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        long long22 = gJChronology16.add(readablePeriod19, (long) (short) -1, (int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone23 = gJChronology16.getZone();
        org.joda.time.Chronology chronology24 = chronology10.withZone(dateTimeZone23);
        org.joda.time.LocalDateTime localDateTime25 = null;
        boolean boolean26 = dateTimeZone23.isLocalDateTimeGap(localDateTime25);
        java.lang.String str28 = dateTimeZone23.getNameKey(836785L);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "GJChronology[+00:00:00.052]" + "'", str8, "GJChronology[+00:00:00.052]");
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeZone12);
// flaky:         org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(gJChronology16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 4 + "'", int17 == 4);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + (-1L) + "'", long22 == (-1L));
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
// flaky:         org.junit.Assert.assertNull(str28);
    }

    @Test
    public void test19056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19056");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = gJChronology2.halfdays();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.yearOfCentury();
        org.joda.time.DurationField durationField5 = gJChronology2.halfdays();
        // The following exception was thrown during execution in test generation
        try {
            long long8 = durationField5.getMillis(279143971059296L, (long) 152);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Multiplication overflows a long: 279143971059296 * 43200000");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(durationField5);
    }

    @Test
    public void test19057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19057");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = gJChronology2.halfdays();
        long long7 = gJChronology2.add((long) 'a', (-1L), (int) (short) 0);
        boolean boolean9 = gJChronology2.equals((java.lang.Object) 0);
        org.joda.time.DateTimeField dateTimeField10 = gJChronology2.dayOfMonth();
        org.joda.time.DurationField durationField11 = gJChronology2.seconds();
        org.joda.time.DateTimeField dateTimeField12 = gJChronology2.dayOfYear();
        org.joda.time.DateTimeField dateTimeField13 = gJChronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField14 = gJChronology2.secondOfDay();
        org.joda.time.Instant instant15 = gJChronology2.getGregorianCutover();
        java.util.TimeZone timeZone16 = null;
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forTimeZone(timeZone16);
        java.lang.String str19 = dateTimeZone17.getNameKey((long) 100);
        long long22 = dateTimeZone17.convertLocalToUTC((-2246399965L), true);
        long long26 = dateTimeZone17.convertLocalToUTC(4320000000L, true, (long) 'a');
        boolean boolean27 = dateTimeZone17.isFixed();
        java.util.TimeZone timeZone28 = null;
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forTimeZone(timeZone28);
        org.joda.time.chrono.GJChronology gJChronology30 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone29);
        org.joda.time.DurationField durationField31 = gJChronology30.halfdays();
        long long35 = gJChronology30.add((long) 'a', (-1L), (int) (short) 0);
        long long39 = gJChronology30.add((long) (byte) 0, (long) '4', 100);
        org.joda.time.DateTimeField dateTimeField40 = gJChronology30.minuteOfHour();
        org.joda.time.DurationField durationField41 = gJChronology30.hours();
        org.joda.time.DateTimeField dateTimeField42 = gJChronology30.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField43 = gJChronology30.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField44 = gJChronology30.secondOfDay();
        org.joda.time.DateTimeField dateTimeField45 = gJChronology30.secondOfMinute();
        boolean boolean46 = dateTimeZone17.equals((java.lang.Object) dateTimeField45);
        long long49 = dateTimeZone17.adjustOffset((-52L), true);
        boolean boolean51 = dateTimeZone17.isStandardOffset((-220870497598236L));
        java.lang.String str53 = dateTimeZone17.getShortName((-43829L));
        int int55 = dateTimeZone17.getStandardOffset((-220870497598236L));
        org.joda.time.MutableDateTime mutableDateTime56 = instant15.toMutableDateTime(dateTimeZone17);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 97L + "'", long7 == 97L);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(instant15);
        org.junit.Assert.assertNotNull(dateTimeZone17);
// flaky:         org.junit.Assert.assertNull(str19);
// flaky:         org.junit.Assert.assertTrue("'" + long22 + "' != '" + (-2246400017L) + "'", long22 == (-2246400017L));
// flaky:         org.junit.Assert.assertTrue("'" + long26 + "' != '" + 4319999948L + "'", long26 == 4319999948L);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(gJChronology30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 97L + "'", long35 == 97L);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 5200L + "'", long39 == 5200L);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(durationField41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + (-52L) + "'", long49 == (-52L));
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str53 + "' != '" + "+00:00:00.052" + "'", str53, "+00:00:00.052");
// flaky:         org.junit.Assert.assertTrue("'" + int55 + "' != '" + 52 + "'", int55 == 52);
        org.junit.Assert.assertNotNull(mutableDateTime56);
    }

    @Test
    public void test19058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19058");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = gJChronology2.halfdays();
        long long6 = durationField3.add((long) 100, 100L);
        int int8 = durationField3.getValue((long) 'a');
        long long10 = durationField3.getMillis(17296800000L);
        long long12 = durationField3.getMillis((-2106656));
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 4320000100L + "'", long6 == 4320000100L);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 747221760000000000L + "'", long10 == 747221760000000000L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-91007539200000L) + "'", long12 == (-91007539200000L));
    }

    @Test
    public void test19059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19059");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = gJChronology2.halfdays();
        long long7 = gJChronology2.add((long) 'a', (-1L), (int) (short) 0);
        long long11 = gJChronology2.add((long) (byte) 0, (long) '4', 100);
        org.joda.time.DurationField durationField12 = gJChronology2.years();
        org.joda.time.DateTimeField dateTimeField13 = gJChronology2.dayOfYear();
        org.joda.time.DateTimeField dateTimeField14 = gJChronology2.era();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology2.weekOfWeekyear();
        long long19 = gJChronology2.add(155520547200000L, (-61827926400L), 398);
        org.joda.time.DurationField durationField20 = gJChronology2.millis();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 97L + "'", long7 == 97L);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 5200L + "'", long11 == 5200L);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 130913032492800L + "'", long19 == 130913032492800L);
        org.junit.Assert.assertNotNull(durationField20);
    }

    @Test
    public void test19060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19060");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = gJChronology2.halfdays();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.millisOfDay();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology2.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology2.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField8 = gJChronology2.weekyear();
        org.joda.time.DateTimeField dateTimeField9 = gJChronology2.clockhourOfDay();
        org.joda.time.Chronology chronology10 = gJChronology2.withUTC();
        org.joda.time.DateTimeField dateTimeField11 = gJChronology2.halfdayOfDay();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
    }

    @Test
    public void test19061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19061");
        java.util.Locale locale0 = java.util.Locale.FRENCH;
        java.util.Locale locale1 = java.util.Locale.ITALIAN;
        java.util.Locale locale2 = locale1.stripExtensions();
        java.util.Locale locale3 = java.util.Locale.CANADA;
        java.lang.String str4 = locale1.getDisplayVariant(locale3);
        java.lang.String str5 = locale0.getDisplayScript(locale1);
        java.lang.String str7 = locale0.getExtension('x');
        java.lang.String str8 = locale0.getVariant();
        boolean boolean9 = locale0.hasExtensions();
        java.util.Locale.Category category10 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale11 = java.util.Locale.getDefault();
        boolean boolean12 = locale11.hasExtensions();
        java.lang.String str13 = locale11.getISO3Language();
        java.util.Locale.setDefault(category10, locale11);
        java.util.Locale locale15 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale16 = java.util.Locale.ENGLISH;
        java.lang.String str17 = locale15.getDisplayLanguage(locale16);
        java.util.Locale locale18 = java.util.Locale.CANADA;
        java.lang.String str19 = locale18.getISO3Language();
        java.lang.String str20 = locale15.getDisplayVariant(locale18);
        java.lang.String str21 = locale15.getDisplayName();
        java.util.Locale.setDefault(category10, locale15);
        java.util.Locale locale23 = java.util.Locale.getDefault(category10);
        java.lang.String str24 = locale23.getCountry();
        java.lang.String str25 = locale23.getScript();
        java.lang.String str26 = locale23.getDisplayScript();
        java.util.Set<java.lang.String> strSet27 = locale23.getUnicodeLocaleAttributes();
        java.lang.String str28 = locale0.getDisplayLanguage(locale23);
        java.lang.String str29 = locale23.getVariant();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "fr");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "it");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "it");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + category10 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category10.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "en_CA");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "eng" + "'", str13, "eng");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "en");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Chinese" + "'", str17, "Chinese");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "eng" + "'", str19, "eng");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Chinese (Taiwan)" + "'", str21, "Chinese (Taiwan)");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "TW" + "'", str24, "TW");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(strSet27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "\u6cd5\u6587" + "'", str28, "\u6cd5\u6587");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
    }

    @Test
    public void test19062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19062");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str3 = dateTimeZone1.getNameKey((long) 100);
        boolean boolean4 = dateTimeZone1.isFixed();
        java.util.Locale locale8 = new java.util.Locale("DurationField[halfdays]", "\u82f1\u6587");
        java.lang.String str9 = dateTimeZone1.getName((long) (short) 10, locale8);
        org.joda.time.Instant instant11 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone12 = null;
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forTimeZone(timeZone12);
        org.joda.time.chrono.GJChronology gJChronology14 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone13);
        org.joda.time.DateTimeField dateTimeField15 = gJChronology14.millisOfSecond();
        int int16 = instant11.get(dateTimeField15);
        org.joda.time.Chronology chronology17 = instant11.getChronology();
        org.joda.time.chrono.GJChronology gJChronology18 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1, (org.joda.time.ReadableInstant) instant11);
        org.joda.time.DateTimeField dateTimeField19 = gJChronology18.halfdayOfDay();
        org.joda.time.DurationField durationField20 = gJChronology18.years();
        java.util.TimeZone timeZone21 = null;
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forTimeZone(timeZone21);
        java.lang.String str24 = dateTimeZone22.getNameKey((long) 100);
        boolean boolean25 = dateTimeZone22.isFixed();
        org.joda.time.chrono.GJChronology gJChronology26 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone22);
        int int27 = gJChronology26.getMinimumDaysInFirstWeek();
        org.joda.time.DateTimeField dateTimeField28 = gJChronology26.clockhourOfDay();
        org.joda.time.ReadablePeriod readablePeriod29 = null;
        long long32 = gJChronology26.add(readablePeriod29, (long) (short) -1, (int) (byte) 10);
        org.joda.time.DateTimeField dateTimeField33 = gJChronology26.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField34 = gJChronology26.minuteOfDay();
        org.joda.time.DurationField durationField35 = gJChronology26.hours();
        int int36 = durationField20.compareTo(durationField35);
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
// flaky:         org.junit.Assert.assertEquals(locale8.toString(), "\u82f1\u6587");
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+00:00:00.052" + "'", str9, "+00:00:00.052");
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(gJChronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
// flaky:         org.junit.Assert.assertTrue("'" + int16 + "' != '" + 104 + "'", int16 == 104);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(gJChronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(dateTimeZone22);
// flaky:         org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(gJChronology26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 4 + "'", int27 == 4);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + (-1L) + "'", long32 == (-1L));
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(durationField35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
    }

    @Test
    public void test19063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19063");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) '#');
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = null;
        boolean boolean3 = instant1.isSupported(dateTimeFieldType2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test19064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19064");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        boolean boolean2 = instant1.isEqualNow();
        java.lang.String str3 = instant1.toString();
        java.util.TimeZone timeZone4 = null;
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forTimeZone(timeZone4);
        org.joda.time.chrono.GJChronology gJChronology6 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone5);
        java.util.Locale locale8 = new java.util.Locale("hi!");
        java.lang.String str9 = locale8.getCountry();
        java.util.Locale locale10 = java.util.Locale.getDefault();
        java.lang.String str11 = locale10.getDisplayName();
        java.lang.String str12 = locale8.getDisplayScript(locale10);
        boolean boolean13 = dateTimeZone5.equals((java.lang.Object) locale10);
        int int15 = dateTimeZone5.getOffsetFromLocal((long) (short) 10);
        java.util.TimeZone timeZone16 = null;
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forTimeZone(timeZone16);
        org.joda.time.chrono.GJChronology gJChronology18 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone17);
        org.joda.time.DateTimeField dateTimeField19 = gJChronology18.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField20 = gJChronology18.weekyearOfCentury();
        org.joda.time.Instant instant21 = gJChronology18.getGregorianCutover();
        org.joda.time.Instant instant23 = instant21.withMillis(0L);
        org.joda.time.Instant instant25 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone26 = null;
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forTimeZone(timeZone26);
        org.joda.time.chrono.GJChronology gJChronology28 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone27);
        org.joda.time.DateTimeField dateTimeField29 = gJChronology28.millisOfSecond();
        int int30 = instant25.get(dateTimeField29);
        org.joda.time.Instant instant32 = instant25.plus(0L);
        int int33 = instant23.compareTo((org.joda.time.ReadableInstant) instant32);
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = null;
        boolean boolean35 = instant32.isSupported(dateTimeFieldType34);
        int int36 = dateTimeZone5.getOffset((org.joda.time.ReadableInstant) instant32);
        boolean boolean37 = instant1.isAfter((org.joda.time.ReadableInstant) instant32);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter38 = null;
        java.lang.String str39 = instant1.toString(dateTimeFormatter38);
        org.joda.time.Instant instant40 = org.joda.time.Instant.now();
        java.util.TimeZone timeZone41 = null;
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.forTimeZone(timeZone41);
        org.joda.time.chrono.GJChronology gJChronology43 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone42);
        org.joda.time.DurationField durationField44 = gJChronology43.halfdays();
        org.joda.time.DateTimeField dateTimeField45 = gJChronology43.millisOfDay();
        org.joda.time.DateTimeField dateTimeField46 = gJChronology43.halfdayOfDay();
        int int47 = instant40.get(dateTimeField46);
        java.util.Date date48 = instant40.toDate();
        boolean boolean49 = instant1.isEqual((org.joda.time.ReadableInstant) instant40);
        java.util.TimeZone timeZone50 = null;
        org.joda.time.DateTimeZone dateTimeZone51 = org.joda.time.DateTimeZone.forTimeZone(timeZone50);
        java.lang.String str53 = dateTimeZone51.getNameKey((long) 100);
        boolean boolean54 = dateTimeZone51.isFixed();
        org.joda.time.chrono.GJChronology gJChronology55 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone51);
        int int56 = gJChronology55.getMinimumDaysInFirstWeek();
        java.lang.String str57 = gJChronology55.toString();
        org.joda.time.DateTimeField dateTimeField58 = gJChronology55.yearOfEra();
        org.joda.time.DateTimeField dateTimeField59 = gJChronology55.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField60 = gJChronology55.dayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone61 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology62 = gJChronology55.withZone(dateTimeZone61);
        org.joda.time.DateTimeField dateTimeField63 = chronology62.millisOfSecond();
        java.util.TimeZone timeZone64 = null;
        org.joda.time.DateTimeZone dateTimeZone65 = org.joda.time.DateTimeZone.forTimeZone(timeZone64);
        org.joda.time.chrono.GJChronology gJChronology66 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone65);
        int int68 = dateTimeZone65.getOffsetFromLocal((long) (-1));
        org.joda.time.DateTimeZone dateTimeZone70 = org.joda.time.DateTimeZone.forOffsetHours((int) '4');
        long long72 = dateTimeZone65.getMillisKeepLocal(dateTimeZone70, (-8380800000L));
        org.joda.time.Chronology chronology73 = chronology62.withZone(dateTimeZone65);
        java.util.TimeZone timeZone74 = null;
        org.joda.time.DateTimeZone dateTimeZone75 = org.joda.time.DateTimeZone.forTimeZone(timeZone74);
        org.joda.time.chrono.GJChronology gJChronology76 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone75);
        org.joda.time.DurationField durationField77 = gJChronology76.halfdays();
        java.util.TimeZone timeZone78 = null;
        org.joda.time.DateTimeZone dateTimeZone79 = org.joda.time.DateTimeZone.forTimeZone(timeZone78);
        org.joda.time.chrono.GJChronology gJChronology80 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone79);
        long long84 = dateTimeZone79.convertLocalToUTC((long) (byte) -1, true, 0L);
        boolean boolean86 = dateTimeZone79.equals((java.lang.Object) true);
        org.joda.time.Chronology chronology87 = gJChronology76.withZone(dateTimeZone79);
        org.joda.time.LocalDateTime localDateTime88 = null;
        boolean boolean89 = dateTimeZone79.isLocalDateTimeGap(localDateTime88);
        boolean boolean90 = dateTimeZone79.isFixed();
        long long92 = dateTimeZone65.getMillisKeepLocal(dateTimeZone79, (long) (short) -1);
        java.lang.String str94 = dateTimeZone79.getName((long) 1970);
        org.joda.time.MutableDateTime mutableDateTime95 = instant1.toMutableDateTime(dateTimeZone79);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.chrono.GJChronology gJChronology98 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone79, 58L, 720000000);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid min days in first week: 720000000");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "1970-01-01T00:00:00.052Z" + "'", str3, "1970-01-01T00:00:00.052Z");
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(gJChronology6);
        org.junit.Assert.assertEquals(locale8.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "en_CA");
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\u82f1\u6587\u52a0\u62ff\u5927)" + "'", str11, "\u82f1\u6587\u52a0\u62ff\u5927)");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int15 + "' != '" + 52 + "'", int15 == 52);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(gJChronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(instant21);
        org.junit.Assert.assertNotNull(instant23);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertNotNull(gJChronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
// flaky:         org.junit.Assert.assertTrue("'" + int30 + "' != '" + 104 + "'", int30 == 104);
        org.junit.Assert.assertNotNull(instant32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int36 + "' != '" + 52 + "'", int36 == 52);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "1970-01-01T00:00:00.052Z" + "'", str39, "1970-01-01T00:00:00.052Z");
        org.junit.Assert.assertNotNull(instant40);
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertNotNull(gJChronology43);
        org.junit.Assert.assertNotNull(durationField44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(date48);
// flaky:         org.junit.Assert.assertEquals(date48.toString(), "Fri Feb 11 09:51:48 UTC 2022");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(dateTimeZone51);
// flaky:         org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(gJChronology55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 4 + "'", int56 == 4);
// flaky:         org.junit.Assert.assertEquals("'" + str57 + "' != '" + "GJChronology[+00:00:00.052]" + "'", str57, "GJChronology[+00:00:00.052]");
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertNotNull(dateTimeField59);
        org.junit.Assert.assertNotNull(dateTimeField60);
        org.junit.Assert.assertNotNull(dateTimeZone61);
        org.junit.Assert.assertNotNull(chronology62);
        org.junit.Assert.assertNotNull(dateTimeField63);
        org.junit.Assert.assertNotNull(dateTimeZone65);
        org.junit.Assert.assertNotNull(gJChronology66);
// flaky:         org.junit.Assert.assertTrue("'" + int68 + "' != '" + 52 + "'", int68 == 52);
        org.junit.Assert.assertNotNull(dateTimeZone70);
// flaky:         org.junit.Assert.assertTrue("'" + long72 + "' != '" + (-8567999948L) + "'", long72 == (-8567999948L));
        org.junit.Assert.assertNotNull(chronology73);
        org.junit.Assert.assertNotNull(dateTimeZone75);
        org.junit.Assert.assertNotNull(gJChronology76);
        org.junit.Assert.assertNotNull(durationField77);
        org.junit.Assert.assertNotNull(dateTimeZone79);
        org.junit.Assert.assertNotNull(gJChronology80);
// flaky:         org.junit.Assert.assertTrue("'" + long84 + "' != '" + (-53L) + "'", long84 == (-53L));
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(chronology87);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
        org.junit.Assert.assertTrue("'" + long92 + "' != '" + (-1L) + "'", long92 == (-1L));
// flaky:         org.junit.Assert.assertEquals("'" + str94 + "' != '" + "+00:00:00.052" + "'", str94, "+00:00:00.052");
        org.junit.Assert.assertNotNull(mutableDateTime95);
    }

    @Test
    public void test19065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19065");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = gJChronology2.halfdays();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.millisOfDay();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.minuteOfDay();
        org.joda.time.DurationField durationField6 = gJChronology2.centuries();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology2.halfdayOfDay();
        java.util.Locale locale8 = java.util.Locale.ITALIAN;
        java.util.Locale locale9 = locale8.stripExtensions();
        java.util.Locale locale10 = java.util.Locale.CANADA;
        java.lang.String str11 = locale8.getDisplayVariant(locale10);
        boolean boolean12 = gJChronology2.equals((java.lang.Object) locale10);
        org.joda.time.DateTimeField dateTimeField13 = gJChronology2.weekyear();
        org.joda.time.DateTimeField dateTimeField14 = gJChronology2.weekyearOfCentury();
        // The following exception was thrown during execution in test generation
        try {
            long long20 = gJChronology2.getDateTimeMillis(715L, (-608750), 328332, 533793, 0);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -608750 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "it");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "it");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
    }

    @Test
    public void test19066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19066");
        java.util.Locale locale1 = java.util.Locale.forLanguageTag("");
        java.util.TimeZone timeZone2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forTimeZone(timeZone2);
        org.joda.time.chrono.GJChronology gJChronology4 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone3);
        org.joda.time.DurationField durationField5 = gJChronology4.halfdays();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology4.millisOfDay();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology4.minuteOfDay();
        org.joda.time.DurationField durationField8 = gJChronology4.centuries();
        org.joda.time.DateTimeField dateTimeField9 = gJChronology4.halfdayOfDay();
        java.util.Locale locale10 = java.util.Locale.ITALIAN;
        java.util.Locale locale11 = locale10.stripExtensions();
        java.util.Locale locale12 = java.util.Locale.CANADA;
        java.lang.String str13 = locale10.getDisplayVariant(locale12);
        boolean boolean14 = gJChronology4.equals((java.lang.Object) locale12);
        java.lang.String str15 = locale1.getDisplayLanguage(locale12);
        java.lang.String str17 = locale12.getUnicodeLocaleType("en");
        java.util.List<java.util.Locale.LanguageRange> languageRangeList19 = java.util.Locale.LanguageRange.parse("halfdays");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap20 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList21 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList19, strMap20);
        java.util.Locale.LanguageRange[] languageRangeArray22 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList23 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList23, languageRangeArray22);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap25 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList26 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList23, strMap25);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap27 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList28 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList26, strMap27);
        java.util.List<java.util.Locale.LanguageRange> languageRangeList30 = java.util.Locale.LanguageRange.parse("halfdays");
        java.util.Locale locale31 = java.util.Locale.getDefault();
        java.lang.String str32 = locale31.getDisplayLanguage();
        java.util.Locale locale33 = java.util.Locale.CANADA;
        java.lang.String str34 = locale33.getDisplayVariant();
        java.util.Locale locale35 = java.util.Locale.JAPAN;
        java.lang.String str36 = locale35.getCountry();
        java.util.Locale locale37 = java.util.Locale.KOREA;
        java.util.Locale locale38 = java.util.Locale.GERMANY;
        java.util.Locale locale40 = java.util.Locale.forLanguageTag("hi!");
        java.lang.String str41 = locale40.toLanguageTag();
        java.util.Locale locale43 = new java.util.Locale("hi!");
        java.lang.String str44 = locale43.getCountry();
        java.lang.String str45 = locale43.getLanguage();
        java.util.Locale locale47 = java.util.Locale.forLanguageTag("halfdays");
        boolean boolean48 = locale47.hasExtensions();
        java.util.Locale locale49 = java.util.Locale.getDefault();
        java.lang.String str50 = locale49.getISO3Language();
        java.util.Locale locale52 = new java.util.Locale("hi!");
        java.lang.String str53 = locale52.getCountry();
        java.lang.String str54 = locale52.getCountry();
        java.util.Locale locale55 = java.util.Locale.getDefault();
        java.util.Locale locale56 = java.util.Locale.CHINA;
        java.util.Locale locale57 = java.util.Locale.getDefault();
        java.lang.String str58 = locale57.getDisplayName();
        java.lang.String str59 = locale57.getDisplayVariant();
        java.util.Locale locale60 = java.util.Locale.ROOT;
        java.lang.String str61 = locale60.getDisplayScript();
        java.util.Locale locale62 = java.util.Locale.getDefault();
        java.lang.String str63 = locale62.getDisplayName();
        java.util.Locale locale64 = java.util.Locale.CANADA;
        java.lang.String str65 = locale64.getISO3Language();
        java.util.Locale locale66 = java.util.Locale.getDefault();
        java.lang.String str67 = locale66.getDisplayLanguage();
        java.lang.String str68 = locale66.toLanguageTag();
        java.util.Locale locale70 = new java.util.Locale("hi!");
        java.lang.String str71 = locale70.getCountry();
        java.util.Locale locale72 = java.util.Locale.getDefault();
        java.lang.String str73 = locale72.getDisplayName();
        java.lang.String str74 = locale70.getDisplayScript(locale72);
        java.util.Locale locale75 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Locale locale76 = java.util.Locale.JAPAN;
        java.lang.String str77 = locale76.getCountry();
        java.util.Locale locale79 = new java.util.Locale("hi!");
        java.lang.String str80 = locale79.getCountry();
        java.lang.String str81 = locale79.getScript();
        java.util.Locale locale82 = java.util.Locale.CANADA;
        java.lang.String str83 = locale82.getISO3Language();
        java.util.Locale locale84 = java.util.Locale.getDefault();
        java.lang.String str85 = locale84.getDisplayName();
        java.lang.String str86 = locale84.getDisplayVariant();
        java.util.Locale[] localeArray87 = new java.util.Locale[] { locale31, locale33, locale35, locale37, locale38, locale40, locale43, locale47, locale49, locale52, locale55, locale56, locale57, locale60, locale62, locale64, locale66, locale70, locale75, locale76, locale79, locale82, locale84 };
        java.util.ArrayList<java.util.Locale> localeList88 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean89 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList88, localeArray87);
        java.util.Locale locale90 = java.util.Locale.lookup(languageRangeList30, (java.util.Collection<java.util.Locale>) localeList88);
        java.util.Locale locale91 = java.util.Locale.lookup(languageRangeList28, (java.util.Collection<java.util.Locale>) localeList88);
        java.util.Locale locale92 = java.util.Locale.lookup(languageRangeList19, (java.util.Collection<java.util.Locale>) localeList88);
        java.lang.String str93 = locale12.getDisplayCountry(locale92);
        java.lang.String str94 = locale92.getISO3Country();
        java.util.Set<java.lang.Character> charSet95 = locale92.getExtensionKeys();
        boolean boolean96 = locale92.hasExtensions();
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(gJChronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "it");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "it");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNotNull(languageRangeList19);
        org.junit.Assert.assertNotNull(languageRangeList21);
        org.junit.Assert.assertNotNull(languageRangeArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(languageRangeList26);
        org.junit.Assert.assertNotNull(languageRangeList28);
        org.junit.Assert.assertNotNull(languageRangeList30);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "\u82f1\u6587" + "'", str32, "\u82f1\u6587");
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "JP" + "'", str36, "JP");
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "de_DE");
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "und" + "'", str41, "und");
        org.junit.Assert.assertEquals(locale43.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "hi!" + "'", str45, "hi!");
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "halfdays");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "eng" + "'", str50, "eng");
        org.junit.Assert.assertEquals(locale52.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "en_CA");
// flaky:         org.junit.Assert.assertEquals("'" + str58 + "' != '" + "\u82f1\u6587\u52a0\u62ff\u5927)" + "'", str58, "\u82f1\u6587\u52a0\u62ff\u5927)");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "en_CA");
// flaky:         org.junit.Assert.assertEquals("'" + str63 + "' != '" + "\u82f1\u6587\u52a0\u62ff\u5927)" + "'", str63, "\u82f1\u6587\u52a0\u62ff\u5927)");
        org.junit.Assert.assertNotNull(locale64);
        org.junit.Assert.assertEquals(locale64.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "eng" + "'", str65, "eng");
        org.junit.Assert.assertNotNull(locale66);
        org.junit.Assert.assertEquals(locale66.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "\u82f1\u6587" + "'", str67, "\u82f1\u6587");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "en-CA" + "'", str68, "en-CA");
        org.junit.Assert.assertEquals(locale70.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "" + "'", str71, "");
        org.junit.Assert.assertNotNull(locale72);
        org.junit.Assert.assertEquals(locale72.toString(), "en_CA");
// flaky:         org.junit.Assert.assertEquals("'" + str73 + "' != '" + "\u82f1\u6587\u52a0\u62ff\u5927)" + "'", str73, "\u82f1\u6587\u52a0\u62ff\u5927)");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "" + "'", str74, "");
        org.junit.Assert.assertNotNull(locale75);
        org.junit.Assert.assertEquals(locale75.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale76);
        org.junit.Assert.assertEquals(locale76.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "JP" + "'", str77, "JP");
        org.junit.Assert.assertEquals(locale79.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "" + "'", str80, "");
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "" + "'", str81, "");
        org.junit.Assert.assertNotNull(locale82);
        org.junit.Assert.assertEquals(locale82.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "eng" + "'", str83, "eng");
        org.junit.Assert.assertNotNull(locale84);
        org.junit.Assert.assertEquals(locale84.toString(), "en_CA");
// flaky:         org.junit.Assert.assertEquals("'" + str85 + "' != '" + "\u82f1\u6587\u52a0\u62ff\u5927)" + "'", str85, "\u82f1\u6587\u52a0\u62ff\u5927)");
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "" + "'", str86, "");
        org.junit.Assert.assertNotNull(localeArray87);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertNotNull(locale90);
        org.junit.Assert.assertEquals(locale90.toString(), "halfdays");
        org.junit.Assert.assertNull(locale91);
        org.junit.Assert.assertNotNull(locale92);
        org.junit.Assert.assertEquals(locale92.toString(), "halfdays");
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "Canada" + "'", str93, "Canada");
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "" + "'", str94, "");
        org.junit.Assert.assertNotNull(charSet95);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
    }

    @Test
    public void test19067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19067");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.util.Set<java.lang.String> strSet3 = org.joda.time.DateTimeZone.getAvailableIDs();
        java.lang.String str4 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strSet3);
        java.util.Locale.LanguageRange[] languageRangeArray5 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList6 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList6, languageRangeArray5);
        java.util.Set<java.lang.String> strSet8 = org.joda.time.DateTimeZone.getAvailableIDs();
        java.lang.String str9 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList6, (java.util.Collection<java.lang.String>) strSet8);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap10 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList11 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList6, strMap10);
        java.util.Locale.LanguageRange[] languageRangeArray12 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList13 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList13, languageRangeArray12);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap15 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList16 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList13, strMap15);
        java.lang.String[] strArray20 = new java.lang.String[] { "English", "English", "hi!" };
        java.util.ArrayList<java.lang.String> strList21 = new java.util.ArrayList<java.lang.String>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList21, strArray20);
        java.util.List<java.lang.String> strList23 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList13, (java.util.Collection<java.lang.String>) strList21);
        java.util.Locale.FilteringMode filteringMode24 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.lang.String> strList25 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList6, (java.util.Collection<java.lang.String>) strList21, filteringMode24);
        java.util.Locale locale26 = java.util.Locale.CHINA;
        java.lang.String str27 = locale26.toLanguageTag();
        java.util.Set<java.lang.String> strSet28 = locale26.getUnicodeLocaleAttributes();
        java.util.List<java.lang.String> strList29 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList6, (java.util.Collection<java.lang.String>) strSet28);
        java.lang.String str30 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strSet28);
        java.util.Locale.LanguageRange[] languageRangeArray31 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList32 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList32, languageRangeArray31);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap34 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList35 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList32, strMap34);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap36 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList37 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList35, strMap36);
        java.util.Locale.LanguageRange[] languageRangeArray38 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList39 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList39, languageRangeArray38);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap41 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList42 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList39, strMap41);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap43 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList44 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList42, strMap43);
        java.util.Locale.LanguageRange[] languageRangeArray45 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList46 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList46, languageRangeArray45);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap48 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList49 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList46, strMap48);
        java.lang.String[] strArray53 = new java.lang.String[] { "English", "English", "hi!" };
        java.util.ArrayList<java.lang.String> strList54 = new java.util.ArrayList<java.lang.String>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList54, strArray53);
        java.util.List<java.lang.String> strList56 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList46, (java.util.Collection<java.lang.String>) strList54);
        java.util.Locale.FilteringMode filteringMode57 = null;
        java.util.List<java.lang.String> strList58 = java.util.Locale.filterTags(languageRangeList44, (java.util.Collection<java.lang.String>) strList54, filteringMode57);
        java.util.Locale.FilteringMode filteringMode59 = null;
        java.util.List<java.lang.String> strList60 = java.util.Locale.filterTags(languageRangeList37, (java.util.Collection<java.lang.String>) strList58, filteringMode59);
        java.lang.String str61 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strList58);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap63 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList64 = java.util.Locale.LanguageRange.parse("French", strMap63);
        java.util.Locale locale66 = new java.util.Locale("hi!");
        java.lang.String str67 = locale66.getCountry();
        java.util.Set<java.lang.String> strSet68 = locale66.getUnicodeLocaleKeys();
        java.util.Locale.FilteringMode filteringMode69 = java.util.Locale.FilteringMode.EXTENDED_FILTERING;
        java.util.List<java.lang.String> strList70 = java.util.Locale.filterTags(languageRangeList64, (java.util.Collection<java.lang.String>) strSet68, filteringMode69);
        java.util.List<java.lang.String> strList71 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strList70);
        java.util.Locale locale73 = new java.util.Locale("hi!");
        java.lang.String str74 = locale73.getVariant();
        java.util.Locale locale76 = java.util.Locale.forLanguageTag("hi!");
        java.lang.String str77 = locale76.toLanguageTag();
        java.lang.String str78 = locale73.getDisplayName(locale76);
        java.util.Locale locale79 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale80 = java.util.Locale.ENGLISH;
        java.lang.String str81 = locale79.getDisplayLanguage(locale80);
        java.util.Locale locale82 = java.util.Locale.CANADA;
        java.lang.String str83 = locale82.getISO3Language();
        java.lang.String str84 = locale79.getDisplayVariant(locale82);
        java.lang.String str85 = locale76.getDisplayCountry(locale82);
        java.lang.String str86 = locale82.getDisplayCountry();
        java.util.Set<java.lang.String> strSet87 = locale82.getUnicodeLocaleKeys();
        java.util.Locale.FilteringMode filteringMode88 = java.util.Locale.FilteringMode.EXTENDED_FILTERING;
        java.util.List<java.lang.String> strList89 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strSet87, filteringMode88);
        java.util.Locale locale91 = new java.util.Locale("hi!");
        java.lang.String str92 = locale91.getCountry();
        java.lang.String str93 = locale91.getScript();
        java.util.Set<java.lang.String> strSet94 = locale91.getUnicodeLocaleKeys();
        java.lang.String str95 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strSet94);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap96 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList97 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, strMap96);
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(languageRangeArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(strSet8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(languageRangeList11);
        org.junit.Assert.assertNotNull(languageRangeArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(languageRangeList16);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(strList23);
        org.junit.Assert.assertTrue("'" + filteringMode24 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode24.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(strList25);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "zh-CN" + "'", str27, "zh-CN");
        org.junit.Assert.assertNotNull(strSet28);
        org.junit.Assert.assertNotNull(strList29);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(languageRangeArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(languageRangeList35);
        org.junit.Assert.assertNotNull(languageRangeList37);
        org.junit.Assert.assertNotNull(languageRangeArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(languageRangeList42);
        org.junit.Assert.assertNotNull(languageRangeList44);
        org.junit.Assert.assertNotNull(languageRangeArray45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(languageRangeList49);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(strList56);
        org.junit.Assert.assertNotNull(strList58);
        org.junit.Assert.assertNotNull(strList60);
        org.junit.Assert.assertNull(str61);
        org.junit.Assert.assertNotNull(languageRangeList64);
        org.junit.Assert.assertEquals(locale66.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "" + "'", str67, "");
        org.junit.Assert.assertNotNull(strSet68);
        org.junit.Assert.assertTrue("'" + filteringMode69 + "' != '" + java.util.Locale.FilteringMode.EXTENDED_FILTERING + "'", filteringMode69.equals(java.util.Locale.FilteringMode.EXTENDED_FILTERING));
        org.junit.Assert.assertNotNull(strList70);
        org.junit.Assert.assertNotNull(strList71);
        org.junit.Assert.assertEquals(locale73.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "" + "'", str74, "");
        org.junit.Assert.assertNotNull(locale76);
        org.junit.Assert.assertEquals(locale76.toString(), "");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "und" + "'", str77, "und");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "hi!" + "'", str78, "hi!");
        org.junit.Assert.assertNotNull(locale79);
        org.junit.Assert.assertEquals(locale79.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale80);
        org.junit.Assert.assertEquals(locale80.toString(), "en");
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "Chinese" + "'", str81, "Chinese");
        org.junit.Assert.assertNotNull(locale82);
        org.junit.Assert.assertEquals(locale82.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "eng" + "'", str83, "eng");
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "" + "'", str84, "");
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "" + "'", str85, "");
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "\u52a0\u62ff\u5927" + "'", str86, "\u52a0\u62ff\u5927");
        org.junit.Assert.assertNotNull(strSet87);
        org.junit.Assert.assertTrue("'" + filteringMode88 + "' != '" + java.util.Locale.FilteringMode.EXTENDED_FILTERING + "'", filteringMode88.equals(java.util.Locale.FilteringMode.EXTENDED_FILTERING));
        org.junit.Assert.assertNotNull(strList89);
        org.junit.Assert.assertEquals(locale91.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "" + "'", str92, "");
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "" + "'", str93, "");
        org.junit.Assert.assertNotNull(strSet94);
        org.junit.Assert.assertNull(str95);
        org.junit.Assert.assertNotNull(languageRangeList97);
    }

    @Test
    public void test19068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19068");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField3 = gJChronology2.yearOfCentury();
        org.joda.time.DurationField durationField4 = gJChronology2.minutes();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.clockhourOfDay();
        org.joda.time.Instant instant6 = gJChronology2.getGregorianCutover();
        org.joda.time.Chronology chronology7 = gJChronology2.withUTC();
        org.joda.time.DateTimeField dateTimeField8 = chronology7.centuryOfEra();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(instant6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
    }

    @Test
    public void test19069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19069");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField3 = gJChronology2.millisOfSecond();
        org.joda.time.DurationField durationField4 = gJChronology2.weeks();
        org.joda.time.DurationField durationField5 = gJChronology2.millis();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology2.centuryOfEra();
        org.joda.time.DurationField durationField8 = gJChronology2.years();
        long long11 = durationField8.getDifferenceAsLong(187200000L, (-1555172182800000L));
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 49280L + "'", long11 == 49280L);
    }

    @Test
    public void test19070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19070");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str3 = dateTimeZone1.getNameKey((long) 100);
        boolean boolean4 = dateTimeZone1.isFixed();
        org.joda.time.chrono.GJChronology gJChronology5 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        int int6 = gJChronology5.getMinimumDaysInFirstWeek();
        java.lang.String str7 = gJChronology5.toString();
        org.joda.time.DateTimeField dateTimeField8 = gJChronology5.yearOfEra();
        org.joda.time.DateTimeField dateTimeField9 = gJChronology5.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField10 = gJChronology5.dayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology12 = gJChronology5.withZone(dateTimeZone11);
        org.joda.time.DateTimeField dateTimeField13 = gJChronology5.halfdayOfDay();
        org.joda.time.DurationField durationField14 = gJChronology5.years();
        org.joda.time.DurationField durationField15 = gJChronology5.weeks();
        boolean boolean16 = durationField15.isPrecise();
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(gJChronology5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 4 + "'", int6 == 4);
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "GJChronology[+00:00:00.052]" + "'", str7, "GJChronology[+00:00:00.052]");
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
    }

    @Test
    public void test19071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19071");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = gJChronology2.halfdays();
        long long7 = gJChronology2.add((long) 'a', (-1L), (int) (short) 0);
        org.joda.time.DateTimeField dateTimeField8 = gJChronology2.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField9 = gJChronology2.centuryOfEra();
        long long13 = gJChronology2.add(262974600000L, (long) (byte) 100, (int) '4');
        org.joda.time.DurationField durationField14 = gJChronology2.hours();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology2.year();
        org.joda.time.DateTimeField dateTimeField16 = gJChronology2.weekyearOfCentury();
        long long20 = gJChronology2.add(1104493320000L, 2160000000000L, 127);
        org.joda.time.DurationField durationField21 = gJChronology2.weeks();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 97L + "'", long7 == 97L);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 262974605200L + "'", long13 == 262974605200L);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 275424493320000L + "'", long20 == 275424493320000L);
        org.junit.Assert.assertNotNull(durationField21);
    }

    @Test
    public void test19072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19072");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = gJChronology2.halfdays();
        long long7 = gJChronology2.add((long) 'a', (-1L), (int) (short) 0);
        boolean boolean9 = gJChronology2.equals((java.lang.Object) 0);
        org.joda.time.DateTimeField dateTimeField10 = gJChronology2.dayOfMonth();
        org.joda.time.DurationField durationField11 = gJChronology2.days();
        org.joda.time.DurationField durationField12 = gJChronology2.seconds();
        org.joda.time.DateTimeField dateTimeField13 = gJChronology2.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField14 = gJChronology2.clockhourOfDay();
        java.util.TimeZone timeZone15 = null;
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forTimeZone(timeZone15);
        org.joda.time.chrono.GJChronology gJChronology17 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone16);
        int int19 = dateTimeZone16.getStandardOffset((long) (byte) 0);
        org.joda.time.Chronology chronology20 = gJChronology2.withZone(dateTimeZone16);
        long long22 = dateTimeZone16.convertUTCToLocal(604800000L);
        int int24 = dateTimeZone16.getStandardOffset(432000001L);
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forOffsetHours(10);
        long long28 = dateTimeZone16.getMillisKeepLocal(dateTimeZone26, (-72948L));
        org.joda.time.Instant instant30 = new org.joda.time.Instant((-220870497598236L));
        org.joda.time.Chronology chronology31 = instant30.getChronology();
        org.joda.time.chrono.GJChronology gJChronology32 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone26, (org.joda.time.ReadableInstant) instant30);
        org.joda.time.DateTimeField dateTimeField33 = gJChronology32.clockhourOfDay();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 97L + "'", long7 == 97L);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(gJChronology17);
// flaky:         org.junit.Assert.assertTrue("'" + int19 + "' != '" + 52 + "'", int19 == 52);
        org.junit.Assert.assertNotNull(chronology20);
// flaky:         org.junit.Assert.assertTrue("'" + long22 + "' != '" + 604800052L + "'", long22 == 604800052L);
// flaky:         org.junit.Assert.assertTrue("'" + int24 + "' != '" + 52 + "'", int24 == 52);
        org.junit.Assert.assertNotNull(dateTimeZone26);
// flaky:         org.junit.Assert.assertTrue("'" + long28 + "' != '" + (-36072896L) + "'", long28 == (-36072896L));
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(gJChronology32);
        org.junit.Assert.assertNotNull(dateTimeField33);
    }

    @Test
    public void test19073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19073");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Instant instant1 = org.joda.time.Instant.parse("GJChronology[UTC,cutover=1970-01-01T00:00:00.010Z]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"GJChronology[UTC,cutover=1970-01...\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test19074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19074");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        boolean boolean2 = instant1.isEqualNow();
        org.joda.time.ReadableDuration readableDuration3 = null;
        org.joda.time.Instant instant4 = instant1.plus(readableDuration3);
        long long5 = instant1.getMillis();
        java.lang.String str6 = instant1.toString();
        org.joda.time.Instant instant7 = instant1.toInstant();
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.Instant instant10 = instant1.withDurationAdded(readableDuration8, (int) 'x');
        org.joda.time.DateTimeZone dateTimeZone11 = instant1.getZone();
        org.joda.time.Instant instant13 = new org.joda.time.Instant(52L);
        boolean boolean14 = instant13.isEqualNow();
        java.lang.String str15 = instant13.toString();
        java.util.TimeZone timeZone16 = null;
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forTimeZone(timeZone16);
        org.joda.time.chrono.GJChronology gJChronology18 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone17);
        java.util.Locale locale20 = new java.util.Locale("hi!");
        java.lang.String str21 = locale20.getCountry();
        java.util.Locale locale22 = java.util.Locale.getDefault();
        java.lang.String str23 = locale22.getDisplayName();
        java.lang.String str24 = locale20.getDisplayScript(locale22);
        boolean boolean25 = dateTimeZone17.equals((java.lang.Object) locale22);
        int int27 = dateTimeZone17.getOffsetFromLocal((long) (short) 10);
        java.util.TimeZone timeZone28 = null;
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forTimeZone(timeZone28);
        org.joda.time.chrono.GJChronology gJChronology30 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone29);
        org.joda.time.DateTimeField dateTimeField31 = gJChronology30.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField32 = gJChronology30.weekyearOfCentury();
        org.joda.time.Instant instant33 = gJChronology30.getGregorianCutover();
        org.joda.time.Instant instant35 = instant33.withMillis(0L);
        org.joda.time.Instant instant37 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone38 = null;
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.forTimeZone(timeZone38);
        org.joda.time.chrono.GJChronology gJChronology40 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone39);
        org.joda.time.DateTimeField dateTimeField41 = gJChronology40.millisOfSecond();
        int int42 = instant37.get(dateTimeField41);
        org.joda.time.Instant instant44 = instant37.plus(0L);
        int int45 = instant35.compareTo((org.joda.time.ReadableInstant) instant44);
        org.joda.time.DateTimeFieldType dateTimeFieldType46 = null;
        boolean boolean47 = instant44.isSupported(dateTimeFieldType46);
        int int48 = dateTimeZone17.getOffset((org.joda.time.ReadableInstant) instant44);
        boolean boolean49 = instant13.isAfter((org.joda.time.ReadableInstant) instant44);
        org.joda.time.Instant instant51 = instant44.withMillis((long) 10);
        boolean boolean52 = instant1.isEqual((org.joda.time.ReadableInstant) instant51);
        boolean boolean53 = instant1.isBeforeNow();
        org.joda.time.Instant instant55 = instant1.minus(3155760005983L);
        boolean boolean56 = instant55.isAfterNow();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(instant4);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 52L + "'", long5 == 52L);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "1970-01-01T00:00:00.052Z" + "'", str6, "1970-01-01T00:00:00.052Z");
        org.junit.Assert.assertNotNull(instant7);
        org.junit.Assert.assertNotNull(instant10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "1970-01-01T00:00:00.052Z" + "'", str15, "1970-01-01T00:00:00.052Z");
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(gJChronology18);
        org.junit.Assert.assertEquals(locale20.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "en_CA");
// flaky:         org.junit.Assert.assertEquals("'" + str23 + "' != '" + "\u82f1\u6587\u52a0\u62ff\u5927)" + "'", str23, "\u82f1\u6587\u52a0\u62ff\u5927)");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int27 + "' != '" + 52 + "'", int27 == 52);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(gJChronology30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(instant33);
        org.junit.Assert.assertNotNull(instant35);
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertNotNull(gJChronology40);
        org.junit.Assert.assertNotNull(dateTimeField41);
// flaky:         org.junit.Assert.assertTrue("'" + int42 + "' != '" + 104 + "'", int42 == 104);
        org.junit.Assert.assertNotNull(instant44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int48 + "' != '" + 52 + "'", int48 == 52);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(instant51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(instant55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
    }

    @Test
    public void test19075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19075");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        boolean boolean2 = instant1.isEqualNow();
        org.joda.time.ReadableDuration readableDuration3 = null;
        org.joda.time.Instant instant4 = instant1.plus(readableDuration3);
        long long5 = instant1.getMillis();
        java.lang.String str6 = instant1.toString();
        org.joda.time.Instant instant7 = instant1.toInstant();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.MutableDateTime mutableDateTime9 = instant1.toMutableDateTime(dateTimeZone8);
        org.joda.time.ReadableInstant readableInstant10 = null;
        boolean boolean11 = mutableDateTime9.isAfter(readableInstant10);
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = null;
        boolean boolean13 = mutableDateTime9.isSupported(dateTimeFieldType12);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(instant4);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 52L + "'", long5 == 52L);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "1970-01-01T00:00:00.052Z" + "'", str6, "1970-01-01T00:00:00.052Z");
        org.junit.Assert.assertNotNull(instant7);
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test19076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19076");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField3 = gJChronology2.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.weekyear();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.dayOfMonth();
        java.lang.String str6 = gJChronology2.toString();
        org.joda.time.DurationField durationField7 = gJChronology2.millis();
        org.joda.time.DurationField durationField8 = gJChronology2.eras();
        // The following exception was thrown during execution in test generation
        try {
            long long11 = durationField8.getDifferenceAsLong((long) 104, 315569354400000L);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: eras field is unsupported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "GJChronology[+00:00:00.052]" + "'", str6, "GJChronology[+00:00:00.052]");
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(durationField8);
    }

    @Test
    public void test19077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19077");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clear();
        java.util.Locale.Builder builder3 = builder1.removeUnicodeLocaleAttribute("und");
        java.util.Locale.Builder builder4 = builder1.clear();
        java.util.Locale locale7 = new java.util.Locale("UTC", "zh_TW");
        java.util.Locale locale8 = java.util.Locale.CHINESE;
        boolean boolean9 = locale8.hasExtensions();
        java.util.Locale.setDefault(locale8);
        java.lang.String str11 = locale7.getDisplayLanguage(locale8);
        java.lang.String str12 = locale8.getVariant();
        java.lang.String str13 = locale8.getCountry();
        java.util.Locale locale16 = new java.util.Locale("UTC", "zh_TW");
        java.util.Locale locale17 = java.util.Locale.CHINESE;
        boolean boolean18 = locale17.hasExtensions();
        java.util.Locale.setDefault(locale17);
        java.lang.String str20 = locale16.getDisplayLanguage(locale17);
        java.lang.String str21 = locale17.getVariant();
        java.lang.String str22 = locale8.getDisplayName(locale17);
        java.util.Locale.Builder builder23 = builder4.setLocale(locale8);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder26 = builder4.setUnicodeLocaleKeyword("1970-01-01T00:00:00.052Z", "cinese (taiwan)_DURATIONFIELD[WEEKYEARS]");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale keyword key: 1970-01-01T00:00:00.052Z [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertEquals(locale7.toString(), "utc_ZH_TW");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "utc" + "'", str11, "utc");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals(locale16.toString(), "utc_ZH_TW");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "zh");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "utc" + "'", str20, "utc");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "\u4e2d\u6587" + "'", str22, "\u4e2d\u6587");
        org.junit.Assert.assertNotNull(builder23);
    }

    @Test
    public void test19078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19078");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = gJChronology2.halfdays();
        long long7 = gJChronology2.add(0L, (long) (short) -1, (int) '4');
        java.util.TimeZone timeZone8 = null;
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forTimeZone(timeZone8);
        org.joda.time.chrono.GJChronology gJChronology10 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone9);
        org.joda.time.DurationField durationField11 = gJChronology10.halfdays();
        org.joda.time.DateTimeField dateTimeField12 = gJChronology10.millisOfDay();
        org.joda.time.DateTimeField dateTimeField13 = gJChronology10.minuteOfDay();
        org.joda.time.DurationField durationField14 = gJChronology10.centuries();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology10.dayOfYear();
        java.lang.String str16 = gJChronology10.toString();
        org.joda.time.DurationField durationField17 = gJChronology10.years();
        org.joda.time.DateTimeField dateTimeField18 = gJChronology10.yearOfEra();
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(0, (int) (short) 10);
        org.joda.time.Chronology chronology22 = gJChronology10.withZone(dateTimeZone21);
        org.joda.time.Chronology chronology23 = gJChronology2.withZone(dateTimeZone21);
        org.joda.time.DurationField durationField24 = gJChronology2.halfdays();
        org.joda.time.Instant instant25 = gJChronology2.getGregorianCutover();
        org.joda.time.Instant instant27 = instant25.withMillis((long) (short) -1);
        org.joda.time.Instant instant29 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone30 = null;
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forTimeZone(timeZone30);
        org.joda.time.chrono.GJChronology gJChronology32 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone31);
        org.joda.time.DateTimeField dateTimeField33 = gJChronology32.millisOfSecond();
        int int34 = instant29.get(dateTimeField33);
        org.joda.time.Instant instant36 = instant29.plus(0L);
        org.joda.time.Instant instant37 = instant36.toInstant();
        org.joda.time.Instant instant39 = new org.joda.time.Instant(52L);
        boolean boolean40 = instant39.isEqualNow();
        java.lang.String str41 = instant39.toString();
        java.lang.String str42 = instant39.toString();
        org.joda.time.Instant instant44 = new org.joda.time.Instant(52L);
        boolean boolean45 = instant44.isEqualNow();
        org.joda.time.ReadableDuration readableDuration46 = null;
        org.joda.time.Instant instant47 = instant44.plus(readableDuration46);
        boolean boolean48 = instant39.isBefore((org.joda.time.ReadableInstant) instant47);
        org.joda.time.Instant instant50 = instant39.minus((long) 0);
        int int51 = instant36.compareTo((org.joda.time.ReadableInstant) instant39);
        org.joda.time.Instant instant54 = instant39.withDurationAdded((long) (short) 100, 70);
        org.joda.time.ReadableDuration readableDuration55 = null;
        org.joda.time.Instant instant56 = instant39.minus(readableDuration55);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter57 = null;
        java.lang.String str58 = instant56.toString(dateTimeFormatter57);
        int int59 = instant27.compareTo((org.joda.time.ReadableInstant) instant56);
        boolean boolean61 = instant56.isEqual(26328952801764L);
        org.joda.time.Instant instant63 = instant56.plus((-17520001L));
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-52L) + "'", long7 == (-52L));
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(gJChronology10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "GJChronology[+00:00:00.052]" + "'", str16, "GJChronology[+00:00:00.052]");
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertNotNull(instant25);
        org.junit.Assert.assertNotNull(instant27);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertNotNull(gJChronology32);
        org.junit.Assert.assertNotNull(dateTimeField33);
// flaky:         org.junit.Assert.assertTrue("'" + int34 + "' != '" + 104 + "'", int34 == 104);
        org.junit.Assert.assertNotNull(instant36);
        org.junit.Assert.assertNotNull(instant37);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "1970-01-01T00:00:00.052Z" + "'", str41, "1970-01-01T00:00:00.052Z");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "1970-01-01T00:00:00.052Z" + "'", str42, "1970-01-01T00:00:00.052Z");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(instant47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(instant50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(instant54);
        org.junit.Assert.assertNotNull(instant56);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "1970-01-01T00:00:00.052Z" + "'", str58, "1970-01-01T00:00:00.052Z");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-1) + "'", int59 == (-1));
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(instant63);
    }

    @Test
    public void test19079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19079");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = gJChronology2.halfdays();
        long long7 = gJChronology2.add((long) 'a', (-1L), (int) (short) 0);
        org.joda.time.DateTimeField dateTimeField8 = gJChronology2.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField9 = gJChronology2.secondOfMinute();
        org.joda.time.Instant instant11 = new org.joda.time.Instant(52L);
        boolean boolean12 = instant11.isEqualNow();
        org.joda.time.ReadableDuration readableDuration13 = null;
        org.joda.time.Instant instant14 = instant11.plus(readableDuration13);
        boolean boolean15 = gJChronology2.equals((java.lang.Object) instant11);
        org.joda.time.DateTimeField dateTimeField16 = gJChronology2.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField17 = gJChronology2.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField18 = gJChronology2.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField19 = gJChronology2.millisOfDay();
        org.joda.time.DurationField durationField20 = gJChronology2.millis();
        org.joda.time.DurationFieldType durationFieldType21 = durationField20.getType();
        long long24 = durationField20.subtract(4320000000L, (long) 360000000);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 97L + "'", long7 == 97L);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(instant14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(durationFieldType21);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 3960000000L + "'", long24 == 3960000000L);
    }

    @Test
    public void test19080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19080");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = gJChronology2.halfdays();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.millisOfDay();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.minuteOfDay();
        org.joda.time.DurationField durationField6 = gJChronology2.centuries();
        int int7 = gJChronology2.getMinimumDaysInFirstWeek();
        org.joda.time.DateTimeField dateTimeField8 = gJChronology2.weekyear();
        java.lang.String str9 = gJChronology2.toString();
        org.joda.time.DateTimeField dateTimeField10 = gJChronology2.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField11 = gJChronology2.dayOfYear();
        org.joda.time.DurationField durationField12 = gJChronology2.minutes();
        org.joda.time.DateTimeField dateTimeField13 = gJChronology2.era();
        org.joda.time.DateTimeField dateTimeField14 = gJChronology2.minuteOfDay();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 4 + "'", int7 == 4);
        org.junit.Assert.assertNotNull(dateTimeField8);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "GJChronology[+00:00:00.052]" + "'", str9, "GJChronology[+00:00:00.052]");
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
    }

    @Test
    public void test19081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19081");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = gJChronology2.halfdays();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.millisOfDay();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.minuteOfDay();
        org.joda.time.DurationField durationField6 = gJChronology2.centuries();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology2.halfdayOfDay();
        java.util.Locale locale8 = java.util.Locale.ITALIAN;
        java.util.Locale locale9 = locale8.stripExtensions();
        java.util.Locale locale10 = java.util.Locale.CANADA;
        java.lang.String str11 = locale8.getDisplayVariant(locale10);
        boolean boolean12 = gJChronology2.equals((java.lang.Object) locale10);
        org.joda.time.DurationField durationField13 = gJChronology2.months();
        org.joda.time.Chronology chronology14 = gJChronology2.withUTC();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology2.yearOfCentury();
        org.joda.time.Chronology chronology16 = gJChronology2.withUTC();
        org.joda.time.DateTimeField dateTimeField17 = gJChronology2.dayOfWeek();
        org.joda.time.DurationField durationField18 = gJChronology2.weeks();
        org.joda.time.DurationField durationField19 = gJChronology2.days();
        org.joda.time.DurationField durationField20 = gJChronology2.halfdays();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "it");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "it");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(durationField20);
    }

    @Test
    public void test19082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19082");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField3 = gJChronology2.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.weekyear();
        org.joda.time.DurationField durationField5 = gJChronology2.centuries();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology2.millisOfDay();
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        long long10 = gJChronology2.add(readablePeriod7, (long) '4', (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField11 = gJChronology2.hourOfHalfday();
        org.joda.time.Chronology chronology12 = gJChronology2.withUTC();
        org.joda.time.DateTimeField dateTimeField13 = gJChronology2.era();
        org.joda.time.Chronology chronology14 = gJChronology2.withUTC();
        org.joda.time.DateTimeField dateTimeField15 = chronology14.secondOfDay();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 52L + "'", long10 == 52L);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
    }

    @Test
    public void test19083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19083");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField3 = gJChronology2.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.weekyear();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.dayOfMonth();
        org.joda.time.DurationField durationField6 = gJChronology2.hours();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology2.monthOfYear();
        org.joda.time.DateTimeField dateTimeField8 = gJChronology2.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField9 = gJChronology2.secondOfMinute();
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        long long13 = gJChronology2.add(readablePeriod10, 55299600000L, 60000);
        org.joda.time.DurationField durationField14 = gJChronology2.centuries();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 55299600000L + "'", long13 == 55299600000L);
        org.junit.Assert.assertNotNull(durationField14);
    }

    @Test
    public void test19084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19084");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        boolean boolean2 = instant1.isEqualNow();
        java.lang.String str3 = instant1.toString();
        org.joda.time.Instant instant5 = new org.joda.time.Instant(52L);
        boolean boolean6 = instant5.isEqualNow();
        java.lang.String str7 = instant5.toString();
        java.lang.String str8 = instant5.toString();
        org.joda.time.Instant instant11 = instant5.withDurationAdded(115200000L, (int) (short) 1);
        int int12 = instant1.compareTo((org.joda.time.ReadableInstant) instant5);
        org.joda.time.MutableDateTime mutableDateTime13 = instant1.toMutableDateTimeISO();
        org.joda.time.ReadableDuration readableDuration14 = null;
        org.joda.time.Instant instant16 = instant1.withDurationAdded(readableDuration14, 432000001);
        java.util.TimeZone timeZone17 = null;
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forTimeZone(timeZone17);
        org.joda.time.chrono.GJChronology gJChronology19 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone18);
        org.joda.time.DateTimeField dateTimeField20 = gJChronology19.millisOfSecond();
        org.joda.time.DurationField durationField21 = gJChronology19.millis();
        org.joda.time.DurationField durationField22 = gJChronology19.weekyears();
        org.joda.time.DateTimeField dateTimeField23 = gJChronology19.dayOfYear();
        org.joda.time.DateTimeField dateTimeField24 = gJChronology19.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField25 = gJChronology19.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField26 = gJChronology19.secondOfDay();
        org.joda.time.MutableDateTime mutableDateTime27 = instant1.toMutableDateTime((org.joda.time.Chronology) gJChronology19);
        boolean boolean29 = mutableDateTime27.isBefore((-2177280000000L));
        java.util.TimeZone timeZone30 = null;
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forTimeZone(timeZone30);
        org.joda.time.chrono.GJChronology gJChronology32 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone31);
        org.joda.time.DurationField durationField33 = gJChronology32.halfdays();
        long long37 = gJChronology32.add((long) 'a', (-1L), (int) (short) 0);
        boolean boolean39 = gJChronology32.equals((java.lang.Object) 0);
        org.joda.time.DateTimeField dateTimeField40 = gJChronology32.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField41 = gJChronology32.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField42 = gJChronology32.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField43 = gJChronology32.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField44 = gJChronology32.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField45 = gJChronology32.secondOfMinute();
        org.joda.time.MutableDateTime mutableDateTime46 = mutableDateTime27.toMutableDateTime((org.joda.time.Chronology) gJChronology32);
        // The following exception was thrown during execution in test generation
        try {
            long long54 = gJChronology32.getDateTimeMillis((-166), (-16799), (-343860), 2266, 29400052, (-10), 70);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 2266 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "1970-01-01T00:00:00.052Z" + "'", str3, "1970-01-01T00:00:00.052Z");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "1970-01-01T00:00:00.052Z" + "'", str7, "1970-01-01T00:00:00.052Z");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "1970-01-01T00:00:00.052Z" + "'", str8, "1970-01-01T00:00:00.052Z");
        org.junit.Assert.assertNotNull(instant11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(mutableDateTime13);
        org.junit.Assert.assertNotNull(instant16);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(gJChronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(mutableDateTime27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertNotNull(gJChronology32);
        org.junit.Assert.assertNotNull(durationField33);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 97L + "'", long37 == 97L);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(mutableDateTime46);
    }

    @Test
    public void test19085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19085");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = gJChronology2.halfdays();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.millisOfDay();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.minuteOfDay();
        org.joda.time.DurationField durationField6 = gJChronology2.centuries();
        int int7 = gJChronology2.getMinimumDaysInFirstWeek();
        org.joda.time.DateTimeField dateTimeField8 = gJChronology2.weekyear();
        org.joda.time.DateTimeField dateTimeField9 = gJChronology2.weekyearOfCentury();
        org.joda.time.DurationField durationField10 = gJChronology2.halfdays();
        org.joda.time.Instant instant11 = gJChronology2.getGregorianCutover();
        org.joda.time.Instant instant12 = gJChronology2.getGregorianCutover();
        org.joda.time.DateTimeField dateTimeField13 = gJChronology2.clockhourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone14 = gJChronology2.getZone();
        long long17 = dateTimeZone14.adjustOffset((-60479995700000L), false);
        java.util.Locale locale19 = java.util.Locale.ROOT;
        java.util.Locale locale20 = java.util.Locale.ITALIAN;
        java.lang.String str21 = locale19.getDisplayName(locale20);
        java.util.Locale locale22 = java.util.Locale.ENGLISH;
        java.lang.String str24 = locale22.getUnicodeLocaleType("zh");
        java.lang.String str25 = locale19.getDisplayCountry(locale22);
        java.util.Locale locale26 = java.util.Locale.ITALIAN;
        java.util.Locale locale27 = locale26.stripExtensions();
        java.lang.String str28 = locale26.getDisplayVariant();
        java.util.Set<java.lang.Character> charSet29 = locale26.getExtensionKeys();
        java.lang.String str30 = locale19.getDisplayCountry(locale26);
        java.util.Locale locale31 = locale26.stripExtensions();
        java.util.Set<java.lang.String> strSet32 = locale26.getUnicodeLocaleKeys();
        java.lang.String str33 = dateTimeZone14.getName((-135003600000L), locale26);
        java.util.Locale.Category category35 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale36 = java.util.Locale.CANADA;
        java.lang.String str37 = locale36.getISO3Language();
        java.util.Locale.setDefault(category35, locale36);
        java.util.Locale locale39 = java.util.Locale.getDefault(category35);
        java.util.Locale.Category category40 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale41 = java.util.Locale.CANADA;
        java.lang.String str42 = locale41.getISO3Language();
        java.util.Locale.setDefault(category40, locale41);
        java.util.Locale.setDefault(category35, locale41);
        java.util.Locale.setDefault(locale41);
        java.util.Locale locale47 = new java.util.Locale("Etc/UTC");
        java.lang.String str48 = locale47.getLanguage();
        java.util.Locale.Builder builder49 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder50 = builder49.clear();
        java.util.Locale.Builder builder52 = builder50.removeUnicodeLocaleAttribute("und");
        java.util.Locale locale53 = builder52.build();
        java.lang.String str54 = locale53.getDisplayLanguage();
        java.lang.String str55 = locale47.getDisplayScript(locale53);
        java.lang.String str56 = locale41.getDisplayCountry(locale47);
        java.lang.String str57 = dateTimeZone14.getShortName((-31448995200L), locale41);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str59 = locale41.getUnicodeLocaleType("2022-02-11T08:37:39.580Z");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Ill-formed Unicode locale key: 2022-02-11T08:37:39.580Z");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 4 + "'", int7 == 4);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(instant11);
        org.junit.Assert.assertNotNull(instant12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-60479995700000L) + "'", long17 == (-60479995700000L));
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "it");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "en");
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "it");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "it");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(charSet29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "it");
        org.junit.Assert.assertNotNull(strSet32);
// flaky:         org.junit.Assert.assertEquals("'" + str33 + "' != '" + "+00:00:00.052" + "'", str33, "+00:00:00.052");
        org.junit.Assert.assertTrue("'" + category35 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category35.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "eng" + "'", str37, "eng");
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "en_CA");
        org.junit.Assert.assertTrue("'" + category40 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category40.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "eng" + "'", str42, "eng");
        org.junit.Assert.assertEquals(locale47.toString(), "etc/utc");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "etc/utc" + "'", str48, "etc/utc");
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "Canada" + "'", str56, "Canada");
// flaky:         org.junit.Assert.assertEquals("'" + str57 + "' != '" + "+00:00:00.052" + "'", str57, "+00:00:00.052");
    }

    @Test
    public void test19086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19086");
        org.joda.time.chrono.GJChronology gJChronology0 = org.joda.time.chrono.GJChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = gJChronology0.clockhourOfHalfday();
        org.junit.Assert.assertNotNull(gJChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
    }

    @Test
    public void test19087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19087");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = gJChronology2.halfdays();
        org.joda.time.Chronology chronology4 = gJChronology2.withUTC();
        java.lang.String str5 = gJChronology2.toString();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology2.hourOfHalfday();
        org.joda.time.DurationField durationField7 = gJChronology2.millis();
        org.joda.time.DurationField durationField8 = gJChronology2.hours();
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        long long12 = gJChronology2.add(readablePeriod9, 29400052L, (-25));
        org.joda.time.DateTimeField dateTimeField13 = gJChronology2.weekyear();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(chronology4);
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "GJChronology[+00:00:00.052]" + "'", str5, "GJChronology[+00:00:00.052]");
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 29400052L + "'", long12 == 29400052L);
        org.junit.Assert.assertNotNull(dateTimeField13);
    }

    @Test
    public void test19088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19088");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField3 = gJChronology2.millisOfSecond();
        org.joda.time.DurationField durationField4 = gJChronology2.millis();
        org.joda.time.DurationField durationField5 = gJChronology2.weeks();
        org.joda.time.DurationField durationField6 = gJChronology2.months();
        org.joda.time.DurationField durationField7 = gJChronology2.months();
        org.joda.time.DateTimeField dateTimeField8 = gJChronology2.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField9 = gJChronology2.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField10 = gJChronology2.minuteOfHour();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
    }

    @Test
    public void test19089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19089");
        java.util.Locale locale1 = new java.util.Locale("hi!");
        java.lang.String str2 = locale1.getCountry();
        java.lang.String str3 = locale1.getScript();
        java.util.Locale locale4 = java.util.Locale.ITALIAN;
        java.util.Locale locale5 = locale4.stripExtensions();
        java.util.Locale locale6 = java.util.Locale.CANADA;
        java.lang.String str7 = locale4.getDisplayVariant(locale6);
        java.lang.String str8 = locale1.getDisplayScript(locale4);
        java.util.Locale locale10 = java.util.Locale.forLanguageTag("");
        java.util.Locale locale11 = java.util.Locale.GERMAN;
        java.lang.String str12 = locale11.getDisplayCountry();
        java.lang.String str13 = locale10.getDisplayLanguage(locale11);
        java.lang.String str14 = locale1.getDisplayScript(locale11);
        java.util.Locale locale15 = locale11.stripExtensions();
        java.util.Locale locale16 = java.util.Locale.UK;
        java.lang.String str17 = locale16.getDisplayCountry();
        java.util.Set<java.lang.Character> charSet18 = locale16.getExtensionKeys();
        java.lang.String str19 = locale16.toLanguageTag();
        java.lang.String str20 = locale16.getLanguage();
        java.lang.String str21 = locale11.getDisplayScript(locale16);
        org.junit.Assert.assertEquals(locale1.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "it");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "it");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "de");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "de");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "United Kingdom" + "'", str17, "United Kingdom");
        org.junit.Assert.assertNotNull(charSet18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "en-GB" + "'", str19, "en-GB");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "en" + "'", str20, "en");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
    }

    @Test
    public void test19090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19090");
        java.util.Locale.Category category0 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale1 = java.util.Locale.getDefault();
        boolean boolean2 = locale1.hasExtensions();
        java.lang.String str3 = locale1.getISO3Language();
        java.util.Locale.setDefault(category0, locale1);
        java.util.Locale locale5 = java.util.Locale.getDefault(category0);
        java.util.Locale.Builder builder6 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder7 = builder6.clear();
        java.util.Locale.Builder builder9 = builder7.removeUnicodeLocaleAttribute("und");
        java.util.Locale.Builder builder10 = builder9.clearExtensions();
        java.util.Locale.Builder builder11 = builder10.clearExtensions();
        java.util.Locale locale12 = builder10.build();
        java.util.Locale locale13 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale14 = java.util.Locale.ENGLISH;
        java.lang.String str15 = locale13.getDisplayLanguage(locale14);
        java.util.Locale locale16 = java.util.Locale.CANADA;
        java.lang.String str17 = locale16.getISO3Language();
        java.lang.String str18 = locale13.getDisplayVariant(locale16);
        java.util.Set<java.lang.String> strSet19 = locale13.getUnicodeLocaleKeys();
        java.util.Locale locale23 = new java.util.Locale("zh", "en", "");
        java.lang.String str24 = locale13.getDisplayName(locale23);
        java.lang.String str25 = locale23.getVariant();
        java.lang.String str26 = locale12.getDisplayName(locale23);
        java.util.Locale locale27 = java.util.Locale.ROOT;
        java.util.Locale locale28 = java.util.Locale.ITALIAN;
        java.lang.String str29 = locale27.getDisplayName(locale28);
        java.lang.String str30 = locale12.getDisplayVariant(locale28);
        java.util.Locale locale31 = java.util.Locale.ENGLISH;
        java.lang.String str32 = locale31.getDisplayScript();
        java.lang.String str33 = locale31.getDisplayVariant();
        java.util.Locale locale35 = new java.util.Locale("hi!");
        java.lang.String str36 = locale35.getCountry();
        java.lang.String str37 = locale35.getScript();
        java.util.Locale locale38 = java.util.Locale.ITALIAN;
        java.util.Locale locale39 = locale38.stripExtensions();
        java.util.Locale locale40 = java.util.Locale.CANADA;
        java.lang.String str41 = locale38.getDisplayVariant(locale40);
        java.lang.String str42 = locale35.getDisplayScript(locale38);
        java.lang.String str43 = locale35.getVariant();
        java.lang.String str44 = locale31.getDisplayCountry(locale35);
        java.util.Locale.Builder builder45 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder46 = builder45.clear();
        java.util.Locale.Builder builder48 = builder46.removeUnicodeLocaleAttribute("und");
        java.util.Locale.Builder builder49 = builder48.clearExtensions();
        java.util.Locale.Builder builder50 = builder49.clearExtensions();
        java.util.Locale locale51 = builder49.build();
        java.util.Locale.Builder builder53 = builder49.setLanguageTag("en-US");
        java.util.Locale.Builder builder55 = builder49.addUnicodeLocaleAttribute("deu");
        java.util.Locale.Builder builder56 = builder55.clearExtensions();
        java.util.Locale.Builder builder57 = builder55.clear();
        java.util.Locale locale58 = builder55.build();
        java.lang.String str59 = locale58.toLanguageTag();
        java.lang.String str60 = locale31.getDisplayName(locale58);
        java.lang.String str61 = locale28.getDisplayLanguage(locale31);
        java.util.Locale locale62 = java.util.Locale.CHINA;
        java.lang.String str63 = locale62.getCountry();
        java.lang.String str64 = locale62.getISO3Country();
        java.lang.String str65 = locale31.getDisplayScript(locale62);
        java.util.Locale.setDefault(category0, locale31);
        java.util.Locale locale67 = java.util.Locale.getDefault(category0);
        org.joda.time.DateTimeZone dateTimeZone70 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(1, 10);
        java.util.TimeZone timeZone71 = null;
        org.joda.time.DateTimeZone dateTimeZone72 = org.joda.time.DateTimeZone.forTimeZone(timeZone71);
        long long74 = dateTimeZone70.getMillisKeepLocal(dateTimeZone72, 4320000000L);
        java.util.TimeZone timeZone75 = null;
        org.joda.time.DateTimeZone dateTimeZone76 = org.joda.time.DateTimeZone.forTimeZone(timeZone75);
        java.lang.String str78 = dateTimeZone76.getNameKey((long) 100);
        boolean boolean79 = dateTimeZone76.isFixed();
        java.lang.String str80 = dateTimeZone76.toString();
        java.lang.String str81 = dateTimeZone76.getID();
        long long83 = dateTimeZone72.getMillisKeepLocal(dateTimeZone76, (long) (byte) -1);
        java.util.Locale locale85 = java.util.Locale.getDefault();
        boolean boolean86 = locale85.hasExtensions();
        java.lang.String str87 = dateTimeZone76.getName((-99L), locale85);
        boolean boolean88 = locale85.hasExtensions();
        java.util.Locale.setDefault(category0, locale85);
        java.util.Locale locale93 = new java.util.Locale("Chinese (Taiwan)", "CA", "zh_tw (+00:52,UTC)");
        java.util.Locale.setDefault(category0, locale93);
        java.util.Locale locale95 = java.util.Locale.getDefault(category0);
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category0.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "en_CA");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "eng" + "'", str3, "eng");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "en_CA");
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "en");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Chinese" + "'", str15, "Chinese");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "eng" + "'", str17, "eng");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(strSet19);
        org.junit.Assert.assertEquals(locale23.toString(), "zh_EN");
// flaky:         org.junit.Assert.assertEquals("'" + str24 + "' != '" + "\u4e2d\u6587\u53f0\u6e7e\u5730\u533a)" + "'", str24, "\u4e2d\u6587\u53f0\u6e7e\u5730\u533a)");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "it");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "en");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertEquals(locale35.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "it");
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "it");
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "");
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "und" + "'", str59, "und");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "English" + "'", str60, "English");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "Italian" + "'", str61, "Italian");
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "CN" + "'", str63, "CN");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "CHN" + "'", str64, "CHN");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "" + "'", str65, "");
        org.junit.Assert.assertNotNull(locale67);
        org.junit.Assert.assertEquals(locale67.toString(), "en");
        org.junit.Assert.assertNotNull(dateTimeZone70);
        org.junit.Assert.assertNotNull(dateTimeZone72);
// flaky:         org.junit.Assert.assertTrue("'" + long74 + "' != '" + 4324199948L + "'", long74 == 4324199948L);
        org.junit.Assert.assertNotNull(dateTimeZone76);
// flaky:         org.junit.Assert.assertNull(str78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str80 + "' != '" + "+00:00:00.052" + "'", str80, "+00:00:00.052");
// flaky:         org.junit.Assert.assertEquals("'" + str81 + "' != '" + "+00:00:00.052" + "'", str81, "+00:00:00.052");
        org.junit.Assert.assertTrue("'" + long83 + "' != '" + (-1L) + "'", long83 == (-1L));
        org.junit.Assert.assertNotNull(locale85);
        org.junit.Assert.assertEquals(locale85.toString(), "en_CA");
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str87 + "' != '" + "+00:00:00.052" + "'", str87, "+00:00:00.052");
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertEquals(locale93.toString(), "chinese (taiwan)_CA_zh_tw (+00:52,UTC)");
        org.junit.Assert.assertNotNull(locale95);
        org.junit.Assert.assertEquals(locale95.toString(), "chinese (taiwan)_CA_zh_tw (+00:52,UTC)");
    }

    @Test
    public void test19091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19091");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = gJChronology2.halfdays();
        long long7 = gJChronology2.add((long) 'a', (-1L), (int) (short) 0);
        boolean boolean9 = gJChronology2.equals((java.lang.Object) 0);
        org.joda.time.DateTimeField dateTimeField10 = gJChronology2.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField11 = gJChronology2.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField12 = gJChronology2.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField13 = gJChronology2.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField14 = gJChronology2.weekyear();
        java.lang.String str15 = gJChronology2.toString();
        java.lang.String str16 = gJChronology2.toString();
        org.joda.time.DateTimeField dateTimeField17 = gJChronology2.dayOfMonth();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 97L + "'", long7 == 97L);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "GJChronology[+00:00:00.052]" + "'", str15, "GJChronology[+00:00:00.052]");
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "GJChronology[+00:00:00.052]" + "'", str16, "GJChronology[+00:00:00.052]");
        org.junit.Assert.assertNotNull(dateTimeField17);
    }

    @Test
    public void test19092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19092");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str3 = dateTimeZone1.getNameKey((long) 100);
        boolean boolean4 = dateTimeZone1.isFixed();
        org.joda.time.chrono.GJChronology gJChronology5 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField6 = gJChronology5.hours();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology5.weekyear();
        org.joda.time.DateTimeField dateTimeField8 = gJChronology5.year();
        org.joda.time.DurationField durationField9 = gJChronology5.days();
        org.joda.time.DateTimeField dateTimeField10 = gJChronology5.halfdayOfDay();
        org.joda.time.DurationField durationField11 = gJChronology5.hours();
        org.joda.time.Instant instant12 = gJChronology5.getGregorianCutover();
        org.joda.time.ReadablePartial readablePartial13 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long15 = gJChronology5.set(readablePartial13, (-20176L));
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(gJChronology5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(instant12);
    }

    @Test
    public void test19093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19093");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((-61827739199999L));
        org.joda.time.DateTimeZone dateTimeZone2 = instant1.getZone();
        java.lang.String str4 = dateTimeZone2.getShortName((-4023623458387L));
        org.joda.time.chrono.GJChronology gJChronology5 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone2);
        org.joda.time.DateTimeField dateTimeField6 = gJChronology5.yearOfEra();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology5.yearOfEra();
        java.lang.String str8 = gJChronology5.toString();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00" + "'", str4, "+00:00");
        org.junit.Assert.assertNotNull(gJChronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "GJChronology[UTC]" + "'", str8, "GJChronology[UTC]");
    }

    @Test
    public void test19094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19094");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = gJChronology2.halfdays();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.millisOfDay();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.minuteOfDay();
        org.joda.time.DurationField durationField6 = gJChronology2.centuries();
        int int7 = gJChronology2.getMinimumDaysInFirstWeek();
        org.joda.time.DurationField durationField8 = gJChronology2.weekyears();
        org.joda.time.DateTimeField dateTimeField9 = gJChronology2.millisOfSecond();
        org.joda.time.DateTimeZone dateTimeZone10 = gJChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField11 = gJChronology2.minuteOfHour();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 4 + "'", int7 == 4);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(dateTimeField11);
    }

    @Test
    public void test19095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19095");
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.Locale.LanguageRange> languageRangeList1 = java.util.Locale.LanguageRange.parse("chinese (en)");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=chinese(en)");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test19096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19096");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = gJChronology2.halfdays();
        org.joda.time.Chronology chronology4 = gJChronology2.withUTC();
        org.joda.time.DurationField durationField5 = chronology4.years();
        org.joda.time.DateTimeField dateTimeField6 = chronology4.secondOfDay();
        org.joda.time.DateTimeField dateTimeField7 = chronology4.minuteOfDay();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
    }

    @Test
    public void test19097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19097");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField3 = gJChronology2.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.weekyear();
        org.joda.time.DurationField durationField5 = gJChronology2.centuries();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology2.millisOfDay();
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        long long10 = gJChronology2.add(readablePeriod7, (long) '4', (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField11 = gJChronology2.hourOfHalfday();
        org.joda.time.Chronology chronology12 = gJChronology2.withUTC();
        org.joda.time.DateTimeField dateTimeField13 = chronology12.millisOfSecond();
        org.joda.time.ReadablePartial readablePartial14 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long16 = chronology12.set(readablePartial14, (-2766263482957958564L));
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 52L + "'", long10 == 52L);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
    }

    @Test
    public void test19098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19098");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forTimeZone(timeZone2);
        org.joda.time.chrono.GJChronology gJChronology4 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone3);
        org.joda.time.DateTimeField dateTimeField5 = gJChronology4.millisOfSecond();
        int int6 = instant1.get(dateTimeField5);
        boolean boolean7 = instant1.isEqualNow();
        org.joda.time.DateTime dateTime8 = instant1.toDateTime();
        org.joda.time.Instant instant11 = instant1.withDurationAdded((long) 1431201, 1970);
        org.joda.time.Chronology chronology12 = instant1.getChronology();
        boolean boolean13 = instant1.isEqualNow();
        java.util.TimeZone timeZone14 = null;
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forTimeZone(timeZone14);
        org.joda.time.chrono.GJChronology gJChronology16 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone15);
        org.joda.time.DateTimeField dateTimeField17 = gJChronology16.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField18 = gJChronology16.weekyearOfCentury();
        org.joda.time.Instant instant19 = gJChronology16.getGregorianCutover();
        org.joda.time.Instant instant21 = instant19.withMillis(0L);
        org.joda.time.Instant instant22 = instant21.toInstant();
        boolean boolean23 = instant1.equals((java.lang.Object) instant21);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(gJChronology4);
        org.junit.Assert.assertNotNull(dateTimeField5);
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 104 + "'", int6 == 104);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(instant11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(gJChronology16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(instant19);
        org.junit.Assert.assertNotNull(instant21);
        org.junit.Assert.assertNotNull(instant22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test19099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19099");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = gJChronology2.halfdays();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.millisOfDay();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.monthOfYear();
        org.joda.time.Chronology chronology6 = gJChronology2.withUTC();
        org.joda.time.Instant instant7 = gJChronology2.getGregorianCutover();
        org.joda.time.DateTimeField dateTimeField8 = gJChronology2.era();
        org.joda.time.Chronology chronology9 = gJChronology2.withUTC();
        org.joda.time.ReadablePartial readablePartial10 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray12 = gJChronology2.get(readablePartial10, 0L);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(instant7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(chronology9);
    }

    @Test
    public void test19100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19100");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clear();
        java.util.Locale.Builder builder2 = builder0.clearExtensions();
        java.util.Locale.Builder builder4 = builder0.setVariant("halfdays");
        java.util.Locale.Builder builder6 = builder0.setScript("");
        java.util.Locale.Builder builder8 = builder6.removeUnicodeLocaleAttribute("seconds");
        java.util.Locale.Builder builder9 = builder8.clear();
        java.util.Locale.Builder builder11 = builder8.removeUnicodeLocaleAttribute("millis");
        java.util.Locale locale12 = builder11.build();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder14 = builder11.setRegion("2022-02-11T09:51:21.020Z");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed region: 2022-02-11T09:51:21.020Z [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "");
    }

    @Test
    public void test19101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19101");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = gJChronology2.halfdays();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.millisOfDay();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.minuteOfDay();
        org.joda.time.DurationField durationField6 = gJChronology2.centuries();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology2.dayOfYear();
        java.lang.String str8 = gJChronology2.toString();
        org.joda.time.DateTimeField dateTimeField9 = gJChronology2.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone10 = gJChronology2.getZone();
        org.joda.time.chrono.GJChronology gJChronology11 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone10);
        org.joda.time.DateTimeField dateTimeField12 = gJChronology11.clockhourOfDay();
        org.joda.time.DurationField durationField13 = gJChronology11.millis();
        org.joda.time.DateTimeField dateTimeField14 = gJChronology11.hourOfHalfday();
        org.joda.time.DurationField durationField15 = gJChronology11.centuries();
        org.joda.time.Instant instant17 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone18 = null;
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forTimeZone(timeZone18);
        org.joda.time.chrono.GJChronology gJChronology20 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone19);
        org.joda.time.DateTimeField dateTimeField21 = gJChronology20.millisOfSecond();
        int int22 = instant17.get(dateTimeField21);
        org.joda.time.Instant instant24 = instant17.plus(0L);
        org.joda.time.Instant instant25 = instant24.toInstant();
        org.joda.time.Instant instant27 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone28 = null;
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forTimeZone(timeZone28);
        org.joda.time.chrono.GJChronology gJChronology30 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone29);
        org.joda.time.DateTimeField dateTimeField31 = gJChronology30.millisOfSecond();
        int int32 = instant27.get(dateTimeField31);
        org.joda.time.Instant instant34 = instant27.plus(0L);
        org.joda.time.Instant instant35 = instant34.toInstant();
        boolean boolean36 = instant25.isEqual((org.joda.time.ReadableInstant) instant35);
        org.joda.time.Instant instant38 = new org.joda.time.Instant(52L);
        boolean boolean39 = instant38.isEqualNow();
        org.joda.time.ReadableDuration readableDuration40 = null;
        org.joda.time.Instant instant41 = instant38.plus(readableDuration40);
        org.joda.time.Instant instant43 = new org.joda.time.Instant(52L);
        org.joda.time.Instant instant45 = instant43.withMillis((long) 'u');
        boolean boolean46 = instant38.isBefore((org.joda.time.ReadableInstant) instant43);
        org.joda.time.Instant instant47 = instant43.toInstant();
        org.joda.time.DateTime dateTime48 = instant43.toDateTime();
        boolean boolean49 = instant35.isBefore((org.joda.time.ReadableInstant) instant43);
        org.joda.time.DateTimeZone dateTimeZone50 = instant43.getZone();
        org.joda.time.Chronology chronology51 = gJChronology11.withZone(dateTimeZone50);
        org.joda.time.ReadablePeriod readablePeriod52 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray55 = gJChronology11.get(readablePeriod52, 55299599948L, 262975270000L);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "GJChronology[+00:00:00.052]" + "'", str8, "GJChronology[+00:00:00.052]");
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(gJChronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(gJChronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
// flaky:         org.junit.Assert.assertTrue("'" + int22 + "' != '" + 104 + "'", int22 == 104);
        org.junit.Assert.assertNotNull(instant24);
        org.junit.Assert.assertNotNull(instant25);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(gJChronology30);
        org.junit.Assert.assertNotNull(dateTimeField31);
// flaky:         org.junit.Assert.assertTrue("'" + int32 + "' != '" + 104 + "'", int32 == 104);
        org.junit.Assert.assertNotNull(instant34);
        org.junit.Assert.assertNotNull(instant35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(instant41);
        org.junit.Assert.assertNotNull(instant45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(instant47);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(dateTimeZone50);
        org.junit.Assert.assertNotNull(chronology51);
    }

    @Test
    public void test19102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19102");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField3 = gJChronology2.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology2.hourOfHalfday();
        org.joda.time.DurationField durationField7 = gJChronology2.halfdays();
        org.joda.time.DateTimeField dateTimeField8 = gJChronology2.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField9 = gJChronology2.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField10 = gJChronology2.weekyear();
        org.joda.time.DurationField durationField11 = gJChronology2.years();
        org.joda.time.DurationField durationField12 = gJChronology2.days();
        // The following exception was thrown during execution in test generation
        try {
            long long17 = gJChronology2.getDateTimeMillis((int) '4', 7, (-99137), 0);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -99137 for dayOfMonth must be in the range [1,31]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(durationField12);
    }

    @Test
    public void test19103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19103");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forTimeZone(timeZone2);
        org.joda.time.chrono.GJChronology gJChronology4 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone3);
        org.joda.time.DateTimeField dateTimeField5 = gJChronology4.millisOfSecond();
        int int6 = instant1.get(dateTimeField5);
        boolean boolean7 = instant1.isEqualNow();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = null;
        java.lang.String str9 = instant1.toString(dateTimeFormatter8);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.Instant instant12 = instant1.withDurationAdded(readableDuration10, 47040000);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(gJChronology4);
        org.junit.Assert.assertNotNull(dateTimeField5);
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 104 + "'", int6 == 104);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "1970-01-01T00:00:00.052Z" + "'", str9, "1970-01-01T00:00:00.052Z");
        org.junit.Assert.assertNotNull(instant12);
    }

    @Test
    public void test19104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19104");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField3 = gJChronology2.millisOfSecond();
        org.joda.time.DurationField durationField4 = gJChronology2.millis();
        org.joda.time.DurationField durationField5 = gJChronology2.weekyears();
        org.joda.time.Chronology chronology6 = gJChronology2.withUTC();
        // The following exception was thrown during execution in test generation
        try {
            long long12 = chronology6.getDateTimeMillis(186641344513152000L, 3597602, 42, 118282, (-718));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 3597602 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(chronology6);
    }

    @Test
    public void test19105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19105");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forTimeZone(timeZone2);
        org.joda.time.chrono.GJChronology gJChronology4 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone3);
        org.joda.time.DateTimeField dateTimeField5 = gJChronology4.millisOfSecond();
        int int6 = instant1.get(dateTimeField5);
        boolean boolean7 = instant1.isEqualNow();
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.Instant instant10 = instant1.withDurationAdded(readableDuration8, (int) (short) 0);
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.Instant instant12 = instant1.plus(readableDuration11);
        org.joda.time.ReadableDuration readableDuration13 = null;
        org.joda.time.Instant instant14 = instant12.minus(readableDuration13);
        org.joda.time.Instant instant16 = new org.joda.time.Instant(4000L);
        boolean boolean18 = instant16.isAfter((-8567999948L));
        java.lang.String str19 = instant16.toString();
        int int20 = instant14.compareTo((org.joda.time.ReadableInstant) instant16);
        org.joda.time.Instant instant22 = instant14.withMillis(2246400000L);
        org.joda.time.DateTime dateTime23 = instant14.toDateTime();
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(gJChronology4);
        org.junit.Assert.assertNotNull(dateTimeField5);
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 104 + "'", int6 == 104);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(instant10);
        org.junit.Assert.assertNotNull(instant12);
        org.junit.Assert.assertNotNull(instant14);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "1970-01-01T00:00:04.000Z" + "'", str19, "1970-01-01T00:00:04.000Z");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(instant22);
        org.junit.Assert.assertNotNull(dateTime23);
    }

    @Test
    public void test19106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19106");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clear();
        java.util.Locale.Builder builder2 = builder0.clearExtensions();
        java.util.Locale.Builder builder4 = builder0.setVariant("halfdays");
        java.util.Locale.Builder builder6 = builder0.setScript("");
        java.util.Locale.Builder builder7 = builder0.clearExtensions();
        java.util.Locale.Builder builder9 = builder0.setRegion("CN");
        java.util.Locale.Builder builder10 = builder9.clear();
        java.util.Locale.Builder builder11 = builder9.clearExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder13 = builder9.setRegion("972022-02-11T09:43:15.789Z");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed region: 972022-02-11T09:43:15.789Z [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder11);
    }

    @Test
    public void test19107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19107");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str3 = dateTimeZone1.getNameKey((long) 100);
        boolean boolean4 = dateTimeZone1.isFixed();
        org.joda.time.chrono.GJChronology gJChronology5 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        int int6 = gJChronology5.getMinimumDaysInFirstWeek();
        java.lang.String str7 = gJChronology5.toString();
        org.joda.time.DateTimeField dateTimeField8 = gJChronology5.yearOfEra();
        org.joda.time.DateTimeField dateTimeField9 = gJChronology5.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField10 = gJChronology5.dayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology12 = gJChronology5.withZone(dateTimeZone11);
        org.joda.time.DateTimeField dateTimeField13 = gJChronology5.yearOfEra();
        org.joda.time.DurationField durationField14 = gJChronology5.days();
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(gJChronology5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 4 + "'", int6 == 4);
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "GJChronology[+00:00:00.052]" + "'", str7, "GJChronology[+00:00:00.052]");
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(durationField14);
    }

    @Test
    public void test19108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19108");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField3 = gJChronology2.era();
        org.joda.time.DurationField durationField4 = gJChronology2.months();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.weekyearOfCentury();
        org.joda.time.DurationField durationField6 = gJChronology2.months();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology2.era();
        org.joda.time.DateTimeZone dateTimeZone8 = gJChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField9 = gJChronology2.yearOfEra();
        org.joda.time.DateTimeField dateTimeField10 = gJChronology2.hourOfDay();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
    }

    @Test
    public void test19109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19109");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = gJChronology2.halfdays();
        long long7 = gJChronology2.add((long) 'a', (-1L), (int) (short) 0);
        long long11 = gJChronology2.add((long) (byte) 0, (long) '4', 100);
        org.joda.time.DateTimeField dateTimeField12 = gJChronology2.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField13 = gJChronology2.year();
        org.joda.time.DateTimeField dateTimeField14 = gJChronology2.monthOfYear();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology2.year();
        org.joda.time.DateTimeField dateTimeField16 = gJChronology2.clockhourOfHalfday();
        org.joda.time.DurationField durationField17 = gJChronology2.weekyears();
        org.joda.time.DurationField durationField18 = gJChronology2.weeks();
        long long21 = durationField18.getValueAsLong(0L, (long) (-1916));
        boolean boolean22 = durationField18.isPrecise();
        long long25 = durationField18.getDifferenceAsLong((-5180652086300000L), 5200L);
        long long28 = durationField18.add((-2250673015L), 13026386198L);
        long long31 = durationField18.add((long) (byte) 100, (-5914428));
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 97L + "'", long7 == 97L);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 5200L + "'", long11 == 5200L);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + (-8565892L) + "'", long25 == (-8565892L));
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 7878358370299726985L + "'", long28 == 7878358370299726985L);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + (-3577046054399900L) + "'", long31 == (-3577046054399900L));
    }

    @Test
    public void test19110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19110");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(1, 10);
        java.util.TimeZone timeZone3 = null;
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forTimeZone(timeZone3);
        long long6 = dateTimeZone2.getMillisKeepLocal(dateTimeZone4, 4320000000L);
        java.util.TimeZone timeZone7 = null;
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forTimeZone(timeZone7);
        java.lang.String str10 = dateTimeZone8.getNameKey((long) 100);
        boolean boolean11 = dateTimeZone8.isFixed();
        java.lang.String str12 = dateTimeZone8.toString();
        java.lang.String str13 = dateTimeZone8.getID();
        long long15 = dateTimeZone4.getMillisKeepLocal(dateTimeZone8, (long) (byte) -1);
        java.util.Locale locale17 = java.util.Locale.getDefault();
        boolean boolean18 = locale17.hasExtensions();
        java.lang.String str19 = dateTimeZone8.getName((-99L), locale17);
        java.util.TimeZone timeZone20 = null;
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forTimeZone(timeZone20);
        java.lang.String str23 = dateTimeZone21.getNameKey((long) 100);
        boolean boolean24 = dateTimeZone21.isFixed();
        org.joda.time.chrono.GJChronology gJChronology25 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone21);
        int int26 = gJChronology25.getMinimumDaysInFirstWeek();
        java.lang.String str27 = gJChronology25.toString();
        org.joda.time.DateTimeField dateTimeField28 = gJChronology25.yearOfEra();
        org.joda.time.DateTimeField dateTimeField29 = gJChronology25.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField30 = gJChronology25.dayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology32 = gJChronology25.withZone(dateTimeZone31);
        boolean boolean33 = dateTimeZone8.equals((java.lang.Object) chronology32);
        long long36 = dateTimeZone8.adjustOffset((-85477377L), true);
        boolean boolean37 = dateTimeZone8.isFixed();
        long long40 = dateTimeZone8.convertLocalToUTC(0L, false);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(dateTimeZone4);
// flaky:         org.junit.Assert.assertTrue("'" + long6 + "' != '" + 4324199948L + "'", long6 == 4324199948L);
        org.junit.Assert.assertNotNull(dateTimeZone8);
// flaky:         org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+00:00:00.052" + "'", str12, "+00:00:00.052");
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+00:00:00.052" + "'", str13, "+00:00:00.052");
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-1L) + "'", long15 == (-1L));
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "en_CA");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str19 + "' != '" + "+00:00:00.052" + "'", str19, "+00:00:00.052");
        org.junit.Assert.assertNotNull(dateTimeZone21);
// flaky:         org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(gJChronology25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 4 + "'", int26 == 4);
// flaky:         org.junit.Assert.assertEquals("'" + str27 + "' != '" + "GJChronology[+00:00:00.052]" + "'", str27, "GJChronology[+00:00:00.052]");
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + (-85477377L) + "'", long36 == (-85477377L));
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
// flaky:         org.junit.Assert.assertTrue("'" + long40 + "' != '" + (-52L) + "'", long40 == (-52L));
    }

    @Test
    public void test19111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19111");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField3 = gJChronology2.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.weekyear();
        org.joda.time.DurationField durationField5 = gJChronology2.centuries();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology2.halfdayOfDay();
        org.joda.time.DurationField durationField7 = gJChronology2.minutes();
        org.joda.time.DateTimeField dateTimeField8 = gJChronology2.yearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) -1, 52);
        org.joda.time.Chronology chronology12 = gJChronology2.withZone(dateTimeZone11);
        org.joda.time.DurationField durationField13 = gJChronology2.seconds();
        org.joda.time.DateTimeField dateTimeField14 = gJChronology2.yearOfCentury();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
    }

    @Test
    public void test19112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19112");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Instant instant2 = org.joda.time.Instant.parse("german", dateTimeFormatter1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test19113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19113");
        java.util.Locale locale0 = java.util.Locale.ENGLISH;
        java.lang.String str2 = locale0.getUnicodeLocaleType("zh");
        java.lang.String str4 = locale0.getExtension('a');
        java.util.Locale locale6 = new java.util.Locale("hi!");
        java.lang.String str7 = locale6.getVariant();
        java.util.Locale locale9 = java.util.Locale.forLanguageTag("hi!");
        java.lang.String str10 = locale9.toLanguageTag();
        java.lang.String str11 = locale6.getDisplayName(locale9);
        java.util.Locale locale12 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale13 = java.util.Locale.ENGLISH;
        java.lang.String str14 = locale12.getDisplayLanguage(locale13);
        java.util.Locale locale15 = java.util.Locale.CANADA;
        java.lang.String str16 = locale15.getISO3Language();
        java.lang.String str17 = locale12.getDisplayVariant(locale15);
        java.lang.String str18 = locale9.getDisplayCountry(locale15);
        java.util.Set<java.lang.String> strSet19 = locale9.getUnicodeLocaleAttributes();
        java.lang.String str20 = locale0.getDisplayLanguage(locale9);
        java.util.Locale.Category category21 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale22 = java.util.Locale.CANADA;
        java.lang.String str23 = locale22.getISO3Language();
        java.util.Locale.setDefault(category21, locale22);
        java.util.Locale locale26 = java.util.Locale.forLanguageTag("halfdays");
        boolean boolean27 = locale26.hasExtensions();
        java.util.Set<java.lang.Character> charSet28 = locale26.getExtensionKeys();
        java.util.Locale.setDefault(category21, locale26);
        java.util.Locale locale31 = new java.util.Locale("hi!");
        java.lang.String str32 = locale31.getCountry();
        java.util.Locale locale33 = java.util.Locale.getDefault();
        java.lang.String str34 = locale33.getDisplayName();
        java.lang.String str35 = locale31.getDisplayScript(locale33);
        java.util.Set<java.lang.Character> charSet36 = locale33.getExtensionKeys();
        java.util.Locale.setDefault(category21, locale33);
        java.lang.String str38 = locale0.getDisplayLanguage(locale33);
        java.lang.String str39 = locale33.getDisplayCountry();
        java.lang.String str40 = locale33.getDisplayLanguage();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en");
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertEquals(locale6.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "und" + "'", str10, "und");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "en");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Chinese" + "'", str14, "Chinese");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "eng" + "'", str16, "eng");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(strSet19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "English" + "'", str20, "English");
        org.junit.Assert.assertTrue("'" + category21 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category21.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "eng" + "'", str23, "eng");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "halfdays");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(charSet28);
        org.junit.Assert.assertEquals(locale31.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "English (Canada)" + "'", str34, "English (Canada)");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNotNull(charSet36);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "English" + "'", str38, "English");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "Canada" + "'", str39, "Canada");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "English" + "'", str40, "English");
    }

    @Test
    public void test19114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19114");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = gJChronology2.halfdays();
        long long7 = gJChronology2.add((long) 'a', (-1L), (int) (short) 0);
        org.joda.time.DateTimeField dateTimeField8 = gJChronology2.halfdayOfDay();
        org.joda.time.Chronology chronology9 = gJChronology2.withUTC();
        java.lang.String str10 = gJChronology2.toString();
        org.joda.time.Chronology chronology11 = gJChronology2.withUTC();
        org.joda.time.Chronology chronology12 = gJChronology2.withUTC();
        org.joda.time.DateTimeField dateTimeField13 = gJChronology2.year();
        org.joda.time.DurationField durationField14 = gJChronology2.eras();
        // The following exception was thrown during execution in test generation
        try {
            long long17 = durationField14.getValueAsLong((long) 7816188, (-1869000L));
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: eras field is unsupported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 97L + "'", long7 == 97L);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(chronology9);
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "GJChronology[+00:00:00.052]" + "'", str10, "GJChronology[+00:00:00.052]");
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(durationField14);
    }

    @Test
    public void test19115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19115");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField3 = gJChronology2.millisOfSecond();
        org.joda.time.DurationField durationField4 = gJChronology2.millis();
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        long long8 = gJChronology2.add(readablePeriod5, (long) 'a', (int) '4');
        org.joda.time.DateTimeField dateTimeField9 = gJChronology2.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField10 = gJChronology2.dayOfYear();
        org.joda.time.DateTimeField dateTimeField11 = gJChronology2.hourOfDay();
        org.joda.time.DateTimeField dateTimeField12 = gJChronology2.yearOfEra();
        org.joda.time.DateTimeField dateTimeField13 = gJChronology2.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis((int) '4');
        java.util.TimeZone timeZone16 = dateTimeZone15.toTimeZone();
        java.lang.String str17 = dateTimeZone15.toString();
        boolean boolean19 = dateTimeZone15.isStandardOffset((long) 'u');
        org.joda.time.LocalDateTime localDateTime20 = null;
        boolean boolean21 = dateTimeZone15.isLocalDateTimeGap(localDateTime20);
        boolean boolean22 = dateTimeZone15.isFixed();
        org.joda.time.Chronology chronology23 = gJChronology2.withZone(dateTimeZone15);
        org.joda.time.DateTimeField dateTimeField24 = gJChronology2.yearOfEra();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 97L + "'", long8 == 97L);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(timeZone16);
        org.junit.Assert.assertEquals(timeZone16.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "+00:00:00.052" + "'", str17, "+00:00:00.052");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTimeField24);
    }

    @Test
    public void test19116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19116");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField3 = gJChronology2.millisOfSecond();
        org.joda.time.DurationField durationField4 = gJChronology2.millis();
        org.joda.time.DurationField durationField5 = gJChronology2.weeks();
        org.joda.time.DurationField durationField6 = gJChronology2.days();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology2.yearOfCentury();
        org.joda.time.DurationField durationField8 = gJChronology2.weekyears();
        org.joda.time.DurationField durationField9 = gJChronology2.minutes();
        org.joda.time.DurationField durationField10 = gJChronology2.millis();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(durationField10);
    }

    @Test
    public void test19117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19117");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = gJChronology2.halfdays();
        long long7 = gJChronology2.add((long) 'a', (-1L), (int) (short) 0);
        org.joda.time.DateTimeField dateTimeField8 = gJChronology2.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField9 = gJChronology2.centuryOfEra();
        long long13 = gJChronology2.add(262974600000L, (long) (byte) 100, (int) '4');
        org.joda.time.DateTimeField dateTimeField14 = gJChronology2.monthOfYear();
        org.joda.time.DurationField durationField15 = gJChronology2.days();
        long long17 = durationField15.getValueAsLong(1807L);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 97L + "'", long7 == 97L);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 262974605200L + "'", long13 == 262974605200L);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
    }

    @Test
    public void test19118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19118");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = gJChronology2.halfdays();
        org.joda.time.Chronology chronology4 = gJChronology2.withUTC();
        java.lang.String str5 = gJChronology2.toString();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology2.hourOfHalfday();
        long long10 = gJChronology2.add(97L, (long) (byte) 100, 0);
        org.joda.time.DateTimeField dateTimeField11 = gJChronology2.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField12 = gJChronology2.monthOfYear();
        org.joda.time.DurationField durationField13 = gJChronology2.centuries();
        org.joda.time.DateTimeField dateTimeField14 = gJChronology2.year();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology2.dayOfMonth();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(chronology4);
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "GJChronology[+00:00:00.052]" + "'", str5, "GJChronology[+00:00:00.052]");
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 97L + "'", long10 == 97L);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
    }

    @Test
    public void test19119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19119");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField3 = gJChronology2.millisOfSecond();
        org.joda.time.DurationField durationField4 = gJChronology2.millis();
        org.joda.time.DurationField durationField5 = gJChronology2.weeks();
        long long9 = gJChronology2.add(43201764L, 262974600000L, (int) (short) 100);
        org.joda.time.DateTimeField dateTimeField10 = gJChronology2.secondOfMinute();
        org.joda.time.Instant instant11 = gJChronology2.getGregorianCutover();
        java.util.TimeZone timeZone12 = null;
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forTimeZone(timeZone12);
        org.joda.time.chrono.GJChronology gJChronology14 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone13);
        org.joda.time.DurationField durationField15 = gJChronology14.halfdays();
        org.joda.time.DateTimeField dateTimeField16 = gJChronology14.millisOfDay();
        org.joda.time.DateTimeField dateTimeField17 = gJChronology14.minuteOfDay();
        org.joda.time.DurationField durationField18 = gJChronology14.centuries();
        org.joda.time.DateTimeField dateTimeField19 = gJChronology14.yearOfCentury();
        org.joda.time.Chronology chronology20 = gJChronology14.withUTC();
        org.joda.time.DateTimeField dateTimeField21 = gJChronology14.yearOfEra();
        org.joda.time.DateTimeField dateTimeField22 = gJChronology14.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(1, 10);
        java.util.TimeZone timeZone26 = null;
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forTimeZone(timeZone26);
        long long29 = dateTimeZone25.getMillisKeepLocal(dateTimeZone27, 4320000000L);
        java.util.TimeZone timeZone30 = null;
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forTimeZone(timeZone30);
        java.lang.String str33 = dateTimeZone31.getNameKey((long) 100);
        boolean boolean34 = dateTimeZone31.isFixed();
        java.lang.String str35 = dateTimeZone31.toString();
        java.lang.String str36 = dateTimeZone31.getID();
        long long38 = dateTimeZone27.getMillisKeepLocal(dateTimeZone31, (long) (byte) -1);
        java.lang.String str40 = dateTimeZone31.getShortName((-1431201L));
        org.joda.time.Chronology chronology41 = gJChronology14.withZone(dateTimeZone31);
        org.joda.time.DurationField durationField42 = gJChronology14.minutes();
        boolean boolean43 = gJChronology2.equals((java.lang.Object) durationField42);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 26297503201764L + "'", long9 == 26297503201764L);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(instant11);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(gJChronology14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(dateTimeZone27);
// flaky:         org.junit.Assert.assertTrue("'" + long29 + "' != '" + 4324199948L + "'", long29 == 4324199948L);
        org.junit.Assert.assertNotNull(dateTimeZone31);
// flaky:         org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str35 + "' != '" + "+00:00:00.052" + "'", str35, "+00:00:00.052");
// flaky:         org.junit.Assert.assertEquals("'" + str36 + "' != '" + "+00:00:00.052" + "'", str36, "+00:00:00.052");
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + (-1L) + "'", long38 == (-1L));
// flaky:         org.junit.Assert.assertEquals("'" + str40 + "' != '" + "+00:00:00.052" + "'", str40, "+00:00:00.052");
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(durationField42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
    }

    @Test
    public void test19120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19120");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = gJChronology2.halfdays();
        java.util.TimeZone timeZone4 = null;
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forTimeZone(timeZone4);
        org.joda.time.chrono.GJChronology gJChronology6 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone5);
        long long10 = dateTimeZone5.convertLocalToUTC((long) (byte) -1, true, 0L);
        boolean boolean12 = dateTimeZone5.equals((java.lang.Object) true);
        org.joda.time.Chronology chronology13 = gJChronology2.withZone(dateTimeZone5);
        org.joda.time.LocalDateTime localDateTime14 = null;
        boolean boolean15 = dateTimeZone5.isLocalDateTimeGap(localDateTime14);
        java.util.TimeZone timeZone16 = null;
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forTimeZone(timeZone16);
        org.joda.time.chrono.GJChronology gJChronology18 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone17);
        org.joda.time.DurationField durationField19 = gJChronology18.halfdays();
        long long23 = gJChronology18.add((long) 'a', (-1L), (int) (short) 0);
        boolean boolean25 = gJChronology18.equals((java.lang.Object) 0);
        org.joda.time.DateTimeField dateTimeField26 = gJChronology18.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField27 = gJChronology18.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField28 = gJChronology18.clockhourOfDay();
        long long33 = gJChronology18.getDateTimeMillis(10, (int) (short) 10, 4, (int) (byte) 1);
        org.joda.time.DateTimeField dateTimeField34 = gJChronology18.millisOfDay();
        java.lang.String str35 = gJChronology18.toString();
        org.joda.time.DateTimeField dateTimeField36 = gJChronology18.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField37 = gJChronology18.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField38 = gJChronology18.halfdayOfDay();
        java.util.TimeZone timeZone39 = null;
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.forTimeZone(timeZone39);
        org.joda.time.chrono.GJChronology gJChronology41 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone40);
        org.joda.time.DurationField durationField42 = gJChronology41.halfdays();
        long long46 = gJChronology41.add((long) 'a', (-1L), (int) (short) 0);
        long long50 = gJChronology41.add((long) (byte) 0, (long) '4', 100);
        org.joda.time.DurationField durationField51 = gJChronology41.years();
        org.joda.time.DateTimeField dateTimeField52 = gJChronology41.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone53 = gJChronology41.getZone();
        org.joda.time.Chronology chronology54 = gJChronology18.withZone(dateTimeZone53);
        org.joda.time.DurationField durationField55 = gJChronology18.days();
        org.joda.time.DurationField durationField56 = gJChronology18.years();
        org.joda.time.DurationField durationField57 = gJChronology18.centuries();
        boolean boolean58 = dateTimeZone5.equals((java.lang.Object) gJChronology18);
        boolean boolean60 = dateTimeZone5.isStandardOffset((-17174412L));
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(gJChronology6);
// flaky:         org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-53L) + "'", long10 == (-53L));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(gJChronology18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 97L + "'", long23 == 97L);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
// flaky:         org.junit.Assert.assertTrue("'" + long33 + "' != '" + (-61827926400051L) + "'", long33 == (-61827926400051L));
        org.junit.Assert.assertNotNull(dateTimeField34);
// flaky:         org.junit.Assert.assertEquals("'" + str35 + "' != '" + "GJChronology[+00:00:00.052]" + "'", str35, "GJChronology[+00:00:00.052]");
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertNotNull(gJChronology41);
        org.junit.Assert.assertNotNull(durationField42);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 97L + "'", long46 == 97L);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 5200L + "'", long50 == 5200L);
        org.junit.Assert.assertNotNull(durationField51);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(dateTimeZone53);
        org.junit.Assert.assertNotNull(chronology54);
        org.junit.Assert.assertNotNull(durationField55);
        org.junit.Assert.assertNotNull(durationField56);
        org.junit.Assert.assertNotNull(durationField57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
    }

    @Test
    public void test19121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19121");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField3 = gJChronology2.millisOfSecond();
        org.joda.time.DurationField durationField4 = gJChronology2.millis();
        org.joda.time.DurationField durationField5 = gJChronology2.weeks();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology2.year();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology2.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField8 = gJChronology2.hourOfHalfday();
        org.joda.time.DurationField durationField9 = gJChronology2.months();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(durationField9);
    }

    @Test
    public void test19122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19122");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = gJChronology2.halfdays();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.millisOfDay();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.minuteOfDay();
        org.joda.time.DurationField durationField6 = gJChronology2.centuries();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology2.dayOfYear();
        java.lang.String str8 = gJChronology2.toString();
        org.joda.time.DateTimeField dateTimeField9 = gJChronology2.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone10 = gJChronology2.getZone();
        org.joda.time.chrono.GJChronology gJChronology11 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone10);
        long long13 = dateTimeZone10.nextTransition(1L);
        long long15 = dateTimeZone10.convertUTCToLocal((long) (byte) 0);
        java.util.Locale locale17 = java.util.Locale.ENGLISH;
        java.lang.String str18 = locale17.getDisplayScript();
        java.lang.String str19 = locale17.getDisplayVariant();
        java.util.Locale locale21 = new java.util.Locale("hi!");
        java.lang.String str22 = locale21.getCountry();
        java.lang.String str23 = locale21.getScript();
        java.util.Locale locale24 = java.util.Locale.ITALIAN;
        java.util.Locale locale25 = locale24.stripExtensions();
        java.util.Locale locale26 = java.util.Locale.CANADA;
        java.lang.String str27 = locale24.getDisplayVariant(locale26);
        java.lang.String str28 = locale21.getDisplayScript(locale24);
        java.lang.String str29 = locale21.getVariant();
        java.lang.String str30 = locale17.getDisplayCountry(locale21);
        java.lang.String str31 = locale21.getDisplayScript();
        java.lang.String str32 = dateTimeZone10.getShortName(3039005480742000L, locale21);
        java.util.TimeZone timeZone33 = null;
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.forTimeZone(timeZone33);
        java.util.Locale locale36 = java.util.Locale.ENGLISH;
        java.lang.String str37 = dateTimeZone34.getShortName((-2246399965L), locale36);
        java.util.Locale locale40 = new java.util.Locale("hi!");
        java.lang.String str41 = locale40.getCountry();
        java.lang.String str42 = locale40.getScript();
        java.util.Locale locale43 = java.util.Locale.ITALIAN;
        java.util.Locale locale44 = locale43.stripExtensions();
        java.util.Locale locale45 = java.util.Locale.CANADA;
        java.lang.String str46 = locale43.getDisplayVariant(locale45);
        java.lang.String str47 = locale40.getDisplayScript(locale43);
        java.util.Locale locale49 = java.util.Locale.forLanguageTag("");
        java.util.Locale locale50 = java.util.Locale.GERMAN;
        java.lang.String str51 = locale50.getDisplayCountry();
        java.lang.String str52 = locale49.getDisplayLanguage(locale50);
        java.lang.String str53 = locale40.getDisplayScript(locale50);
        java.util.Locale locale54 = locale50.stripExtensions();
        java.util.Set<java.lang.String> strSet55 = locale54.getUnicodeLocaleAttributes();
        java.lang.String str56 = dateTimeZone34.getName((long) (short) 100, locale54);
        java.lang.String str57 = locale54.getVariant();
        java.util.Locale locale60 = new java.util.Locale("", "cinese");
        java.lang.String str61 = locale54.getDisplayLanguage(locale60);
        java.lang.String str62 = locale21.getDisplayName(locale54);
        boolean boolean63 = locale54.hasExtensions();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "GJChronology[+00:00:00.052]" + "'", str8, "GJChronology[+00:00:00.052]");
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(gJChronology11);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1L + "'", long13 == 1L);
// flaky:         org.junit.Assert.assertTrue("'" + long15 + "' != '" + 52L + "'", long15 == 52L);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "en");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals(locale21.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "it");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "it");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
// flaky:         org.junit.Assert.assertEquals("'" + str32 + "' != '" + "+00:00:00.052" + "'", str32, "+00:00:00.052");
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "en");
// flaky:         org.junit.Assert.assertEquals("'" + str37 + "' != '" + "+00:00:00.052" + "'", str37, "+00:00:00.052");
        org.junit.Assert.assertEquals(locale40.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "it");
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "it");
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "");
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "de");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "de");
        org.junit.Assert.assertNotNull(strSet55);
// flaky:         org.junit.Assert.assertEquals("'" + str56 + "' != '" + "+00:00:00.052" + "'", str56, "+00:00:00.052");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertEquals(locale60.toString(), "_CINESE");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "German" + "'", str61, "German");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "hi!" + "'", str62, "hi!");
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
    }

    @Test
    public void test19123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19123");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField3 = gJChronology2.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.weekyear();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology2.centuryOfEra();
        java.lang.String str7 = gJChronology2.toString();
        org.joda.time.DateTimeField dateTimeField8 = gJChronology2.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField9 = gJChronology2.yearOfCentury();
        java.util.TimeZone timeZone10 = null;
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forTimeZone(timeZone10);
        java.lang.String str13 = dateTimeZone11.getNameKey((long) 100);
        boolean boolean14 = dateTimeZone11.isFixed();
        org.joda.time.chrono.GJChronology gJChronology15 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone11);
        org.joda.time.DurationField durationField16 = gJChronology15.hours();
        org.joda.time.DateTimeField dateTimeField17 = gJChronology15.year();
        boolean boolean18 = gJChronology2.equals((java.lang.Object) gJChronology15);
        org.joda.time.DateTimeField dateTimeField19 = gJChronology2.dayOfYear();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "GJChronology[+00:00:00.052]" + "'", str7, "GJChronology[+00:00:00.052]");
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeZone11);
// flaky:         org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(gJChronology15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(dateTimeField19);
    }

    @Test
    public void test19124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19124");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = gJChronology2.halfdays();
        long long7 = gJChronology2.add((long) 'a', (-1L), (int) (short) 0);
        long long11 = gJChronology2.add((long) (byte) 0, (long) '4', 100);
        org.joda.time.DurationField durationField12 = gJChronology2.years();
        org.joda.time.Instant instant13 = gJChronology2.getGregorianCutover();
        org.joda.time.DateTimeField dateTimeField14 = gJChronology2.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology2.dayOfYear();
        org.joda.time.DurationField durationField16 = gJChronology2.days();
        org.joda.time.DateTimeField dateTimeField17 = gJChronology2.year();
        org.joda.time.DurationField durationField18 = gJChronology2.hours();
        org.joda.time.DateTimeField dateTimeField19 = gJChronology2.weekOfWeekyear();
        org.joda.time.DurationField durationField20 = gJChronology2.months();
        org.joda.time.DateTimeField dateTimeField21 = gJChronology2.dayOfWeek();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 97L + "'", long7 == 97L);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 5200L + "'", long11 == 5200L);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(instant13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
    }

    @Test
    public void test19125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19125");
        java.util.Locale.Category category0 = null;
        java.util.TimeZone timeZone1 = null;
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forTimeZone(timeZone1);
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone2);
        org.joda.time.DurationField durationField4 = gJChronology3.halfdays();
        org.joda.time.Chronology chronology5 = gJChronology3.withUTC();
        java.lang.String str6 = gJChronology3.toString();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology3.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(1, 10);
        org.joda.time.Chronology chronology11 = gJChronology3.withZone(dateTimeZone10);
        java.util.Locale locale14 = java.util.Locale.forLanguageTag("hi!");
        java.lang.String str15 = locale14.toLanguageTag();
        java.lang.String str16 = locale14.getCountry();
        java.lang.String str17 = dateTimeZone10.getName(43200100L, locale14);
        java.util.Locale.Builder builder18 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder19 = builder18.clear();
        java.util.Locale.Builder builder21 = builder19.removeUnicodeLocaleAttribute("und");
        java.util.Locale.Builder builder22 = builder21.clear();
        java.util.Locale.Builder builder23 = builder21.clear();
        java.util.Locale.Builder builder25 = builder21.setLanguageTag("zh");
        java.util.Locale locale26 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str27 = locale26.getLanguage();
        java.util.Set<java.lang.Character> charSet28 = locale26.getExtensionKeys();
        java.util.Locale locale30 = new java.util.Locale("hi!");
        java.lang.String str31 = locale30.getVariant();
        java.util.Locale locale33 = java.util.Locale.forLanguageTag("hi!");
        java.lang.String str34 = locale33.toLanguageTag();
        java.lang.String str35 = locale30.getDisplayName(locale33);
        java.lang.String str36 = locale26.getDisplayScript(locale33);
        java.lang.String str37 = locale33.getDisplayCountry();
        java.util.Locale.Builder builder38 = builder25.setLocale(locale33);
        java.lang.String str39 = locale33.toLanguageTag();
        java.lang.String str40 = locale33.getDisplayScript();
        java.lang.String str41 = locale14.getDisplayName(locale33);
        java.lang.String str42 = locale33.getVariant();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.setDefault(category0, locale33);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Category cannot be NULL");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(gJChronology3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(chronology5);
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "GJChronology[+00:00:00.052]" + "'", str6, "GJChronology[+00:00:00.052]");
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "und" + "'", str15, "und");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "+01:10" + "'", str17, "+01:10");
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "zh" + "'", str27, "zh");
        org.junit.Assert.assertNotNull(charSet28);
        org.junit.Assert.assertEquals(locale30.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "und" + "'", str34, "und");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "hi!" + "'", str35, "hi!");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "und" + "'", str39, "und");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
    }

    @Test
    public void test19126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19126");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str3 = dateTimeZone1.getNameKey((long) 100);
        boolean boolean4 = dateTimeZone1.isFixed();
        org.joda.time.chrono.GJChronology gJChronology5 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        int int6 = gJChronology5.getMinimumDaysInFirstWeek();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology5.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField8 = gJChronology5.dayOfMonth();
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(gJChronology5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 4 + "'", int6 == 4);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
    }

    @Test
    public void test19127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19127");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField3 = gJChronology2.era();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.centuryOfEra();
        org.joda.time.DurationField durationField5 = gJChronology2.hours();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology2.monthOfYear();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology2.dayOfWeek();
        java.util.TimeZone timeZone8 = null;
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forTimeZone(timeZone8);
        org.joda.time.chrono.GJChronology gJChronology10 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone9);
        int int12 = dateTimeZone9.getStandardOffset((long) (byte) 0);
        org.joda.time.Chronology chronology13 = gJChronology2.withZone(dateTimeZone9);
        org.joda.time.DateTimeField dateTimeField14 = gJChronology2.hourOfDay();
        org.joda.time.DurationField durationField15 = gJChronology2.years();
        org.joda.time.DurationField durationField16 = gJChronology2.months();
        org.joda.time.DateTimeField dateTimeField17 = gJChronology2.secondOfDay();
        org.joda.time.DurationField durationField18 = gJChronology2.weeks();
        org.joda.time.DurationField durationField19 = gJChronology2.days();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(gJChronology10);
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + 52 + "'", int12 == 52);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(durationField19);
    }

    @Test
    public void test19128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19128");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField3 = gJChronology2.millisOfSecond();
        org.joda.time.DurationField durationField4 = gJChronology2.millis();
        org.joda.time.DurationField durationField5 = gJChronology2.weeks();
        org.joda.time.DurationField durationField6 = gJChronology2.days();
        org.joda.time.DurationField durationField7 = gJChronology2.months();
        java.util.TimeZone timeZone8 = null;
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forTimeZone(timeZone8);
        org.joda.time.chrono.GJChronology gJChronology10 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone9);
        org.joda.time.DateTimeField dateTimeField11 = gJChronology10.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField12 = gJChronology10.weekyearOfCentury();
        org.joda.time.Instant instant13 = gJChronology10.getGregorianCutover();
        org.joda.time.Instant instant15 = instant13.withMillis(0L);
        org.joda.time.Instant instant17 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone18 = null;
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forTimeZone(timeZone18);
        org.joda.time.chrono.GJChronology gJChronology20 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone19);
        org.joda.time.DateTimeField dateTimeField21 = gJChronology20.millisOfSecond();
        int int22 = instant17.get(dateTimeField21);
        org.joda.time.Instant instant24 = instant17.plus(0L);
        int int25 = instant15.compareTo((org.joda.time.ReadableInstant) instant24);
        org.joda.time.Instant instant27 = new org.joda.time.Instant(52L);
        boolean boolean28 = instant27.isEqualNow();
        org.joda.time.ReadableDuration readableDuration29 = null;
        org.joda.time.Instant instant30 = instant27.plus(readableDuration29);
        boolean boolean32 = instant30.equals((java.lang.Object) ' ');
        boolean boolean33 = instant24.isEqual((org.joda.time.ReadableInstant) instant30);
        boolean boolean34 = gJChronology2.equals((java.lang.Object) boolean33);
        org.joda.time.DateTimeField dateTimeField35 = gJChronology2.halfdayOfDay();
        org.joda.time.Chronology chronology36 = gJChronology2.withUTC();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(gJChronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(instant13);
        org.junit.Assert.assertNotNull(instant15);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(gJChronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
// flaky:         org.junit.Assert.assertTrue("'" + int22 + "' != '" + 104 + "'", int22 == 104);
        org.junit.Assert.assertNotNull(instant24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(instant30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(chronology36);
    }

    @Test
    public void test19129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19129");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("\u6cd5\u6587");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=??");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test19130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19130");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField3 = gJChronology2.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.millisOfSecond();
        org.joda.time.DurationField durationField6 = gJChronology2.days();
        java.util.TimeZone timeZone7 = null;
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forTimeZone(timeZone7);
        java.lang.String str10 = dateTimeZone8.getNameKey((long) 100);
        boolean boolean11 = dateTimeZone8.isFixed();
        java.util.Locale locale15 = new java.util.Locale("DurationField[halfdays]", "\u82f1\u6587");
        java.lang.String str16 = dateTimeZone8.getName((long) (short) 10, locale15);
        java.lang.String str18 = dateTimeZone8.getNameKey(17296800000L);
        org.joda.time.Chronology chronology19 = gJChronology2.withZone(dateTimeZone8);
        java.lang.String str20 = gJChronology2.toString();
        org.joda.time.DateTimeField dateTimeField21 = gJChronology2.monthOfYear();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone8);
// flaky:         org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
// flaky:         org.junit.Assert.assertEquals(locale15.toString(), "\u82f1\u6587");
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "+00:00:00.052" + "'", str16, "+00:00:00.052");
// flaky:         org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNotNull(chronology19);
// flaky:         org.junit.Assert.assertEquals("'" + str20 + "' != '" + "GJChronology[+00:00:00.052]" + "'", str20, "GJChronology[+00:00:00.052]");
        org.junit.Assert.assertNotNull(dateTimeField21);
    }

    @Test
    public void test19131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19131");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField3 = gJChronology2.millisOfSecond();
        org.joda.time.DurationField durationField4 = gJChronology2.millis();
        org.joda.time.DurationField durationField5 = gJChronology2.weeks();
        org.joda.time.DurationField durationField6 = gJChronology2.days();
        org.joda.time.DurationField durationField7 = gJChronology2.months();
        org.joda.time.DateTimeField dateTimeField8 = gJChronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField9 = gJChronology2.centuryOfEra();
        org.joda.time.DurationField durationField10 = gJChronology2.millis();
        org.joda.time.DateTimeField dateTimeField11 = gJChronology2.millisOfSecond();
        org.joda.time.DurationField durationField12 = gJChronology2.millis();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(durationField12);
    }

    @Test
    public void test19132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19132");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str3 = dateTimeZone1.getNameKey((long) 100);
        boolean boolean4 = dateTimeZone1.isFixed();
        org.joda.time.chrono.GJChronology gJChronology5 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        int int6 = gJChronology5.getMinimumDaysInFirstWeek();
        java.lang.String str7 = gJChronology5.toString();
        org.joda.time.DateTimeField dateTimeField8 = gJChronology5.yearOfEra();
        org.joda.time.DateTimeField dateTimeField9 = gJChronology5.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField10 = gJChronology5.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField11 = gJChronology5.clockhourOfHalfday();
        org.joda.time.DurationField durationField12 = gJChronology5.millis();
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(gJChronology5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 4 + "'", int6 == 4);
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "GJChronology[+00:00:00.052]" + "'", str7, "GJChronology[+00:00:00.052]");
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(durationField12);
    }

    @Test
    public void test19133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19133");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str3 = dateTimeZone1.getNameKey((long) 100);
        boolean boolean4 = dateTimeZone1.isFixed();
        org.joda.time.chrono.GJChronology gJChronology5 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        int int6 = gJChronology5.getMinimumDaysInFirstWeek();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology5.clockhourOfDay();
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        long long11 = gJChronology5.add(readablePeriod8, (long) (short) -1, (int) (byte) 10);
        org.joda.time.DateTimeField dateTimeField12 = gJChronology5.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField13 = gJChronology5.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField14 = gJChronology5.yearOfEra();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology5.weekyear();
        java.util.TimeZone timeZone16 = null;
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forTimeZone(timeZone16);
        org.joda.time.chrono.GJChronology gJChronology18 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone17);
        org.joda.time.DateTimeField dateTimeField19 = gJChronology18.millisOfSecond();
        org.joda.time.DurationField durationField20 = gJChronology18.millis();
        org.joda.time.DurationField durationField21 = gJChronology18.weeks();
        org.joda.time.DurationField durationField22 = gJChronology18.days();
        org.joda.time.DateTimeField dateTimeField23 = gJChronology18.year();
        org.joda.time.DateTimeField dateTimeField24 = gJChronology18.millisOfDay();
        org.joda.time.DateTimeField dateTimeField25 = gJChronology18.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField26 = gJChronology18.dayOfWeek();
        java.util.TimeZone timeZone27 = null;
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forTimeZone(timeZone27);
        org.joda.time.chrono.GJChronology gJChronology29 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone28);
        org.joda.time.DurationField durationField30 = gJChronology29.halfdays();
        long long34 = gJChronology29.add((long) 'a', (-1L), (int) (short) 0);
        boolean boolean36 = gJChronology29.equals((java.lang.Object) 0);
        org.joda.time.DateTimeField dateTimeField37 = gJChronology29.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField38 = gJChronology29.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField39 = gJChronology29.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField40 = gJChronology29.clockhourOfHalfday();
        org.joda.time.DurationField durationField41 = gJChronology29.weekyears();
        org.joda.time.DurationField durationField42 = gJChronology29.weekyears();
        org.joda.time.DateTimeField dateTimeField43 = gJChronology29.minuteOfDay();
        org.joda.time.DurationField durationField44 = gJChronology29.weeks();
        org.joda.time.DurationField durationField45 = gJChronology29.millis();
        org.joda.time.DateTimeZone dateTimeZone48 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(1, 10);
        java.util.TimeZone timeZone49 = null;
        org.joda.time.DateTimeZone dateTimeZone50 = org.joda.time.DateTimeZone.forTimeZone(timeZone49);
        long long52 = dateTimeZone48.getMillisKeepLocal(dateTimeZone50, 4320000000L);
        java.lang.String str53 = dateTimeZone48.getID();
        boolean boolean54 = dateTimeZone48.isFixed();
        org.joda.time.Chronology chronology55 = gJChronology29.withZone(dateTimeZone48);
        java.lang.String str56 = dateTimeZone48.toString();
        org.joda.time.Chronology chronology57 = gJChronology18.withZone(dateTimeZone48);
        org.joda.time.Chronology chronology58 = gJChronology5.withZone(dateTimeZone48);
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(gJChronology5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 4 + "'", int6 == 4);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-1L) + "'", long11 == (-1L));
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(gJChronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(gJChronology29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 97L + "'", long34 == 97L);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(durationField41);
        org.junit.Assert.assertNotNull(durationField42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(durationField44);
        org.junit.Assert.assertNotNull(durationField45);
        org.junit.Assert.assertNotNull(dateTimeZone48);
        org.junit.Assert.assertNotNull(dateTimeZone50);
// flaky:         org.junit.Assert.assertTrue("'" + long52 + "' != '" + 4324199948L + "'", long52 == 4324199948L);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "+01:10" + "'", str53, "+01:10");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(chronology55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "+01:10" + "'", str56, "+01:10");
        org.junit.Assert.assertNotNull(chronology57);
        org.junit.Assert.assertNotNull(chronology58);
    }

    @Test
    public void test19134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19134");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str3 = dateTimeZone1.getNameKey((long) 100);
        boolean boolean4 = dateTimeZone1.isFixed();
        org.joda.time.chrono.GJChronology gJChronology5 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        long long7 = dateTimeZone1.convertUTCToLocal(5200L);
        java.util.Locale.LanguageRange[] languageRangeArray8 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList9 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList9, languageRangeArray8);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap11 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList12 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList9, strMap11);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap13 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList14 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList12, strMap13);
        java.util.Locale.LanguageRange[] languageRangeArray15 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList16 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList16, languageRangeArray15);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap18 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList19 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList16, strMap18);
        java.lang.String[] strArray23 = new java.lang.String[] { "English", "English", "hi!" };
        java.util.ArrayList<java.lang.String> strList24 = new java.util.ArrayList<java.lang.String>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList24, strArray23);
        java.util.List<java.lang.String> strList26 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList16, (java.util.Collection<java.lang.String>) strList24);
        java.util.Locale.FilteringMode filteringMode27 = null;
        java.util.List<java.lang.String> strList28 = java.util.Locale.filterTags(languageRangeList14, (java.util.Collection<java.lang.String>) strList24, filteringMode27);
        java.util.Locale.LanguageRange[] languageRangeArray29 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList30 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList30, languageRangeArray29);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap32 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList33 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList30, strMap32);
        java.util.Locale.LanguageRange[] languageRangeArray34 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList35 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean36 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList35, languageRangeArray34);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap37 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList38 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList35, strMap37);
        java.lang.String[] strArray42 = new java.lang.String[] { "English", "English", "hi!" };
        java.util.ArrayList<java.lang.String> strList43 = new java.util.ArrayList<java.lang.String>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList43, strArray42);
        java.util.List<java.lang.String> strList45 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList35, (java.util.Collection<java.lang.String>) strList43);
        java.util.List<java.lang.String> strList46 = java.util.Locale.filterTags(languageRangeList33, (java.util.Collection<java.lang.String>) strList45);
        java.util.List<java.lang.String> strList47 = java.util.Locale.filterTags(languageRangeList14, (java.util.Collection<java.lang.String>) strList46);
        java.util.Locale.LanguageRange[] languageRangeArray48 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList49 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean50 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList49, languageRangeArray48);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap51 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList52 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList49, strMap51);
        java.lang.String[] strArray56 = new java.lang.String[] { "English", "English", "hi!" };
        java.util.ArrayList<java.lang.String> strList57 = new java.util.ArrayList<java.lang.String>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList57, strArray56);
        java.util.List<java.lang.String> strList59 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList49, (java.util.Collection<java.lang.String>) strList57);
        java.util.List<java.lang.String> strList60 = java.util.Locale.filterTags(languageRangeList14, (java.util.Collection<java.lang.String>) strList59);
        boolean boolean61 = dateTimeZone1.equals((java.lang.Object) languageRangeList14);
        java.util.Locale locale63 = java.util.Locale.CANADA;
        java.lang.String str64 = locale63.getISO3Language();
        java.lang.String str65 = dateTimeZone1.getShortName((long) 'a', locale63);
        java.util.TimeZone timeZone66 = dateTimeZone1.toTimeZone();
        long long68 = dateTimeZone1.convertUTCToLocal((-599903L));
        long long70 = dateTimeZone1.previousTransition((long) (short) 10);
        java.lang.String str71 = dateTimeZone1.toString();
        java.util.TimeZone timeZone72 = null;
        org.joda.time.DateTimeZone dateTimeZone73 = org.joda.time.DateTimeZone.forTimeZone(timeZone72);
        java.lang.String str75 = dateTimeZone73.getNameKey((long) 100);
        boolean boolean76 = dateTimeZone73.isFixed();
        java.util.Locale locale80 = new java.util.Locale("DurationField[halfdays]", "\u82f1\u6587");
        java.lang.String str81 = dateTimeZone73.getName((long) (short) 10, locale80);
        org.joda.time.Instant instant83 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone84 = null;
        org.joda.time.DateTimeZone dateTimeZone85 = org.joda.time.DateTimeZone.forTimeZone(timeZone84);
        org.joda.time.chrono.GJChronology gJChronology86 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone85);
        org.joda.time.DateTimeField dateTimeField87 = gJChronology86.millisOfSecond();
        int int88 = instant83.get(dateTimeField87);
        org.joda.time.Chronology chronology89 = instant83.getChronology();
        org.joda.time.chrono.GJChronology gJChronology90 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone73, (org.joda.time.ReadableInstant) instant83);
        long long91 = instant83.getMillis();
        java.lang.String str92 = instant83.toString();
        org.joda.time.Chronology chronology93 = instant83.getChronology();
        org.joda.time.MutableDateTime mutableDateTime94 = instant83.toMutableDateTimeISO();
        org.joda.time.Instant instant96 = instant83.withMillis(94920000L);
        int int97 = dateTimeZone1.getOffset((org.joda.time.ReadableInstant) instant83);
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(gJChronology5);
// flaky:         org.junit.Assert.assertTrue("'" + long7 + "' != '" + 5252L + "'", long7 == 5252L);
        org.junit.Assert.assertNotNull(languageRangeArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(languageRangeList12);
        org.junit.Assert.assertNotNull(languageRangeList14);
        org.junit.Assert.assertNotNull(languageRangeArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(languageRangeList19);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(strList26);
        org.junit.Assert.assertNotNull(strList28);
        org.junit.Assert.assertNotNull(languageRangeArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(languageRangeList33);
        org.junit.Assert.assertNotNull(languageRangeArray34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(languageRangeList38);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(strList45);
        org.junit.Assert.assertNotNull(strList46);
        org.junit.Assert.assertNotNull(strList47);
        org.junit.Assert.assertNotNull(languageRangeArray48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(languageRangeList52);
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(strList59);
        org.junit.Assert.assertNotNull(strList60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "eng" + "'", str64, "eng");
// flaky:         org.junit.Assert.assertEquals("'" + str65 + "' != '" + "+00:00:00.052" + "'", str65, "+00:00:00.052");
        org.junit.Assert.assertNotNull(timeZone66);
// flaky:         org.junit.Assert.assertEquals(timeZone66.getDisplayName(), "GMT+00:00");
// flaky:         org.junit.Assert.assertTrue("'" + long68 + "' != '" + (-599851L) + "'", long68 == (-599851L));
        org.junit.Assert.assertTrue("'" + long70 + "' != '" + 10L + "'", long70 == 10L);
// flaky:         org.junit.Assert.assertEquals("'" + str71 + "' != '" + "+00:00:00.052" + "'", str71, "+00:00:00.052");
        org.junit.Assert.assertNotNull(dateTimeZone73);
// flaky:         org.junit.Assert.assertNull(str75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
// flaky:         org.junit.Assert.assertEquals(locale80.toString(), "\u82f1\u6587");
// flaky:         org.junit.Assert.assertEquals("'" + str81 + "' != '" + "+00:00:00.052" + "'", str81, "+00:00:00.052");
        org.junit.Assert.assertNotNull(dateTimeZone85);
        org.junit.Assert.assertNotNull(gJChronology86);
        org.junit.Assert.assertNotNull(dateTimeField87);
// flaky:         org.junit.Assert.assertTrue("'" + int88 + "' != '" + 104 + "'", int88 == 104);
        org.junit.Assert.assertNotNull(chronology89);
        org.junit.Assert.assertNotNull(gJChronology90);
        org.junit.Assert.assertTrue("'" + long91 + "' != '" + 52L + "'", long91 == 52L);
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "1970-01-01T00:00:00.052Z" + "'", str92, "1970-01-01T00:00:00.052Z");
        org.junit.Assert.assertNotNull(chronology93);
        org.junit.Assert.assertNotNull(mutableDateTime94);
        org.junit.Assert.assertNotNull(instant96);
// flaky:         org.junit.Assert.assertTrue("'" + int97 + "' != '" + 52 + "'", int97 == 52);
    }

    @Test
    public void test19135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19135");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, 0);
        java.lang.String str3 = dateTimeZone2.toString();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "+100:00" + "'", str3, "+100:00");
    }

    @Test
    public void test19136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19136");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        boolean boolean2 = instant1.isEqualNow();
        boolean boolean4 = instant1.isEqual(0L);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = null;
        boolean boolean6 = instant1.isSupported(dateTimeFieldType5);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = null;
        boolean boolean8 = instant1.isSupported(dateTimeFieldType7);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = null;
        boolean boolean10 = instant1.isSupported(dateTimeFieldType9);
        org.joda.time.Chronology chronology11 = instant1.getChronology();
        org.joda.time.Instant instant13 = instant1.minus(0L);
        long long14 = instant13.getMillis();
        org.joda.time.Instant instant16 = new org.joda.time.Instant(52L);
        boolean boolean17 = instant16.isEqualNow();
        java.lang.String str18 = instant16.toString();
        java.lang.String str19 = instant16.toString();
        org.joda.time.Instant instant22 = instant16.withDurationAdded(115200000L, (int) (short) 1);
        org.joda.time.Instant instant24 = new org.joda.time.Instant(52L);
        boolean boolean25 = instant24.isEqualNow();
        java.lang.String str26 = instant24.toString();
        org.joda.time.Instant instant28 = new org.joda.time.Instant(52L);
        boolean boolean29 = instant28.isEqualNow();
        java.lang.String str30 = instant28.toString();
        java.lang.String str31 = instant28.toString();
        org.joda.time.Instant instant34 = instant28.withDurationAdded(115200000L, (int) (short) 1);
        int int35 = instant24.compareTo((org.joda.time.ReadableInstant) instant28);
        int int36 = instant22.compareTo((org.joda.time.ReadableInstant) instant24);
        org.joda.time.ReadableInstant readableInstant37 = null;
        boolean boolean38 = instant24.isAfter(readableInstant37);
        org.joda.time.ReadableDuration readableDuration39 = null;
        org.joda.time.Instant instant41 = instant24.withDurationAdded(readableDuration39, 0);
        boolean boolean42 = instant13.isEqual((org.joda.time.ReadableInstant) instant24);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(instant13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 52L + "'", long14 == 52L);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "1970-01-01T00:00:00.052Z" + "'", str18, "1970-01-01T00:00:00.052Z");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "1970-01-01T00:00:00.052Z" + "'", str19, "1970-01-01T00:00:00.052Z");
        org.junit.Assert.assertNotNull(instant22);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "1970-01-01T00:00:00.052Z" + "'", str26, "1970-01-01T00:00:00.052Z");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "1970-01-01T00:00:00.052Z" + "'", str30, "1970-01-01T00:00:00.052Z");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "1970-01-01T00:00:00.052Z" + "'", str31, "1970-01-01T00:00:00.052Z");
        org.junit.Assert.assertNotNull(instant34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(instant41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
    }

    @Test
    public void test19137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19137");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = gJChronology2.halfdays();
        long long7 = gJChronology2.add((long) 'a', (-1L), (int) (short) 0);
        boolean boolean9 = gJChronology2.equals((java.lang.Object) 0);
        org.joda.time.DateTimeField dateTimeField10 = gJChronology2.dayOfMonth();
        org.joda.time.DurationField durationField11 = gJChronology2.days();
        org.joda.time.DateTimeField dateTimeField12 = gJChronology2.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField13 = gJChronology2.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField14 = gJChronology2.hourOfDay();
        org.joda.time.DurationField durationField15 = gJChronology2.hours();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 97L + "'", long7 == 97L);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(durationField15);
    }

    @Test
    public void test19138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19138");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = gJChronology2.halfdays();
        long long7 = gJChronology2.add((long) 'a', (-1L), (int) (short) 0);
        boolean boolean9 = gJChronology2.equals((java.lang.Object) 0);
        org.joda.time.DateTimeField dateTimeField10 = gJChronology2.secondOfMinute();
        org.joda.time.DurationField durationField11 = gJChronology2.years();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(1, 10);
        java.util.TimeZone timeZone15 = null;
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forTimeZone(timeZone15);
        long long18 = dateTimeZone14.getMillisKeepLocal(dateTimeZone16, 4320000000L);
        java.util.TimeZone timeZone19 = null;
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forTimeZone(timeZone19);
        java.lang.String str22 = dateTimeZone20.getNameKey((long) 100);
        boolean boolean23 = dateTimeZone20.isFixed();
        java.lang.String str24 = dateTimeZone20.toString();
        java.lang.String str25 = dateTimeZone20.getID();
        long long27 = dateTimeZone16.getMillisKeepLocal(dateTimeZone20, (long) (byte) -1);
        java.util.Locale locale29 = java.util.Locale.getDefault();
        boolean boolean30 = locale29.hasExtensions();
        java.lang.String str31 = dateTimeZone20.getName((-99L), locale29);
        org.joda.time.Chronology chronology32 = gJChronology2.withZone(dateTimeZone20);
        java.util.TimeZone timeZone33 = null;
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.forTimeZone(timeZone33);
        org.joda.time.chrono.GJChronology gJChronology35 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone34);
        org.joda.time.DurationField durationField36 = gJChronology35.halfdays();
        long long40 = gJChronology35.add((long) 'a', (-1L), (int) (short) 0);
        org.joda.time.DateTimeField dateTimeField41 = gJChronology35.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField42 = gJChronology35.secondOfMinute();
        org.joda.time.Instant instant44 = new org.joda.time.Instant(52L);
        boolean boolean45 = instant44.isEqualNow();
        org.joda.time.ReadableDuration readableDuration46 = null;
        org.joda.time.Instant instant47 = instant44.plus(readableDuration46);
        boolean boolean48 = gJChronology35.equals((java.lang.Object) instant44);
        org.joda.time.DateTimeFieldType dateTimeFieldType49 = null;
        boolean boolean50 = instant44.isSupported(dateTimeFieldType49);
        org.joda.time.DateTimeFieldType dateTimeFieldType51 = null;
        boolean boolean52 = instant44.isSupported(dateTimeFieldType51);
        org.joda.time.DateTimeZone dateTimeZone53 = instant44.getZone();
        long long55 = dateTimeZone53.convertUTCToLocal(337659343200000L);
        java.util.TimeZone timeZone56 = null;
        org.joda.time.DateTimeZone dateTimeZone57 = org.joda.time.DateTimeZone.forTimeZone(timeZone56);
        org.joda.time.chrono.GJChronology gJChronology58 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone57);
        org.joda.time.DateTimeField dateTimeField59 = gJChronology58.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField60 = gJChronology58.weekyearOfCentury();
        org.joda.time.Instant instant61 = gJChronology58.getGregorianCutover();
        org.joda.time.Instant instant63 = instant61.withMillis(0L);
        boolean boolean65 = instant63.isBefore(3155760000000L);
        org.joda.time.chrono.GJChronology gJChronology66 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone53, (org.joda.time.ReadableInstant) instant63);
        long long68 = dateTimeZone20.getMillisKeepLocal(dateTimeZone53, (-25575169557600052L));
        boolean boolean69 = dateTimeZone53.isFixed();
        java.lang.String str71 = dateTimeZone53.getName(7816188L);
        java.lang.String str73 = dateTimeZone53.getNameKey(3732479999999993L);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 97L + "'", long7 == 97L);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(dateTimeZone16);
// flaky:         org.junit.Assert.assertTrue("'" + long18 + "' != '" + 4324199948L + "'", long18 == 4324199948L);
        org.junit.Assert.assertNotNull(dateTimeZone20);
// flaky:         org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str24 + "' != '" + "+00:00:00.052" + "'", str24, "+00:00:00.052");
// flaky:         org.junit.Assert.assertEquals("'" + str25 + "' != '" + "+00:00:00.052" + "'", str25, "+00:00:00.052");
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + (-1L) + "'", long27 == (-1L));
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "en_CA");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str31 + "' != '" + "+00:00:00.052" + "'", str31, "+00:00:00.052");
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertNotNull(gJChronology35);
        org.junit.Assert.assertNotNull(durationField36);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 97L + "'", long40 == 97L);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(instant47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(dateTimeZone53);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 337659343200000L + "'", long55 == 337659343200000L);
        org.junit.Assert.assertNotNull(dateTimeZone57);
        org.junit.Assert.assertNotNull(gJChronology58);
        org.junit.Assert.assertNotNull(dateTimeField59);
        org.junit.Assert.assertNotNull(dateTimeField60);
        org.junit.Assert.assertNotNull(instant61);
        org.junit.Assert.assertNotNull(instant63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(gJChronology66);
// flaky:         org.junit.Assert.assertTrue("'" + long68 + "' != '" + (-25575169557600000L) + "'", long68 == (-25575169557600000L));
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "+00:00" + "'", str71, "+00:00");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "UTC" + "'", str73, "UTC");
    }

    @Test
    public void test19139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19139");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        boolean boolean2 = instant1.isEqualNow();
        java.lang.String str3 = instant1.toString();
        java.lang.String str4 = instant1.toString();
        org.joda.time.Instant instant6 = new org.joda.time.Instant(52L);
        boolean boolean7 = instant6.isEqualNow();
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.Instant instant9 = instant6.plus(readableDuration8);
        boolean boolean10 = instant1.isBefore((org.joda.time.ReadableInstant) instant9);
        org.joda.time.Instant instant12 = instant9.plus((long) (short) 100);
        org.joda.time.Instant instant14 = instant12.withMillis(14452100L);
        java.util.Date date15 = instant14.toDate();
        org.joda.time.Instant instant18 = instant14.withDurationAdded((-50L), 360000);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "1970-01-01T00:00:00.052Z" + "'", str3, "1970-01-01T00:00:00.052Z");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "1970-01-01T00:00:00.052Z" + "'", str4, "1970-01-01T00:00:00.052Z");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(instant9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(instant12);
        org.junit.Assert.assertNotNull(instant14);
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 04:00:52 UTC 1970");
        org.junit.Assert.assertNotNull(instant18);
    }

    @Test
    public void test19140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19140");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = gJChronology2.halfdays();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.millisOfDay();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.minuteOfDay();
        org.joda.time.DurationField durationField6 = gJChronology2.centuries();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology2.dayOfYear();
        java.lang.String str8 = gJChronology2.toString();
        org.joda.time.DateTimeField dateTimeField9 = gJChronology2.dayOfYear();
        org.joda.time.DateTimeField dateTimeField10 = gJChronology2.dayOfMonth();
        org.joda.time.DurationField durationField11 = gJChronology2.years();
        org.joda.time.DateTimeField dateTimeField12 = gJChronology2.minuteOfHour();
        org.joda.time.DurationField durationField13 = gJChronology2.halfdays();
        org.joda.time.DateTimeField dateTimeField14 = gJChronology2.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology2.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField16 = gJChronology2.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField17 = gJChronology2.weekyearOfCentury();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "GJChronology[+00:00:00.052]" + "'", str8, "GJChronology[+00:00:00.052]");
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
    }

    @Test
    public void test19141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19141");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forTimeZone(timeZone2);
        org.joda.time.chrono.GJChronology gJChronology4 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone3);
        org.joda.time.DateTimeField dateTimeField5 = gJChronology4.millisOfSecond();
        int int6 = instant1.get(dateTimeField5);
        org.joda.time.Instant instant8 = instant1.plus(0L);
        org.joda.time.Instant instant9 = instant8.toInstant();
        org.joda.time.Instant instant11 = new org.joda.time.Instant(52L);
        boolean boolean12 = instant11.isEqualNow();
        java.lang.String str13 = instant11.toString();
        java.lang.String str14 = instant11.toString();
        org.joda.time.Instant instant16 = new org.joda.time.Instant(52L);
        boolean boolean17 = instant16.isEqualNow();
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.Instant instant19 = instant16.plus(readableDuration18);
        boolean boolean20 = instant11.isBefore((org.joda.time.ReadableInstant) instant19);
        org.joda.time.Instant instant22 = instant11.minus((long) 0);
        int int23 = instant8.compareTo((org.joda.time.ReadableInstant) instant11);
        boolean boolean25 = instant8.equals((java.lang.Object) 349200L);
        boolean boolean26 = instant8.isEqualNow();
        org.joda.time.ReadableDuration readableDuration27 = null;
        org.joda.time.Instant instant28 = instant8.minus(readableDuration27);
        boolean boolean29 = instant28.isAfterNow();
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = null;
        boolean boolean31 = instant28.isSupported(dateTimeFieldType30);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(gJChronology4);
        org.junit.Assert.assertNotNull(dateTimeField5);
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 104 + "'", int6 == 104);
        org.junit.Assert.assertNotNull(instant8);
        org.junit.Assert.assertNotNull(instant9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "1970-01-01T00:00:00.052Z" + "'", str13, "1970-01-01T00:00:00.052Z");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "1970-01-01T00:00:00.052Z" + "'", str14, "1970-01-01T00:00:00.052Z");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(instant19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(instant22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(instant28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
    }

    @Test
    public void test19142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19142");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = gJChronology2.halfdays();
        long long7 = gJChronology2.add((long) 'a', (-1L), (int) (short) 0);
        org.joda.time.DateTimeField dateTimeField8 = gJChronology2.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField9 = gJChronology2.secondOfMinute();
        org.joda.time.Instant instant11 = new org.joda.time.Instant(52L);
        boolean boolean12 = instant11.isEqualNow();
        org.joda.time.ReadableDuration readableDuration13 = null;
        org.joda.time.Instant instant14 = instant11.plus(readableDuration13);
        boolean boolean15 = gJChronology2.equals((java.lang.Object) instant11);
        java.lang.String str16 = gJChronology2.toString();
        org.joda.time.DurationField durationField17 = gJChronology2.hours();
        org.joda.time.DurationField durationField18 = gJChronology2.seconds();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 97L + "'", long7 == 97L);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(instant14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "GJChronology[+00:00:00.052]" + "'", str16, "GJChronology[+00:00:00.052]");
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(durationField18);
    }

    @Test
    public void test19143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19143");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = gJChronology2.halfdays();
        long long7 = gJChronology2.add((long) 'a', (-1L), (int) (short) 0);
        boolean boolean9 = gJChronology2.equals((java.lang.Object) 0);
        org.joda.time.DateTimeField dateTimeField10 = gJChronology2.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField11 = gJChronology2.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField12 = gJChronology2.clockhourOfDay();
        long long17 = gJChronology2.getDateTimeMillis(10, (int) (short) 10, 4, (int) (byte) 1);
        org.joda.time.DateTimeField dateTimeField18 = gJChronology2.millisOfDay();
        java.lang.String str19 = gJChronology2.toString();
        org.joda.time.DateTimeField dateTimeField20 = gJChronology2.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField21 = gJChronology2.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField22 = gJChronology2.halfdayOfDay();
        java.util.TimeZone timeZone23 = null;
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forTimeZone(timeZone23);
        org.joda.time.chrono.GJChronology gJChronology25 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone24);
        org.joda.time.DurationField durationField26 = gJChronology25.halfdays();
        long long30 = gJChronology25.add((long) 'a', (-1L), (int) (short) 0);
        long long34 = gJChronology25.add((long) (byte) 0, (long) '4', 100);
        org.joda.time.DurationField durationField35 = gJChronology25.years();
        org.joda.time.DateTimeField dateTimeField36 = gJChronology25.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone37 = gJChronology25.getZone();
        org.joda.time.Chronology chronology38 = gJChronology2.withZone(dateTimeZone37);
        org.joda.time.DurationField durationField39 = chronology38.days();
        long long43 = chronology38.add(13026386198L, 17296740000L, 111000052);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 97L + "'", long7 == 97L);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
// flaky:         org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-61827926400051L) + "'", long17 == (-61827926400051L));
        org.junit.Assert.assertNotNull(dateTimeField18);
// flaky:         org.junit.Assert.assertEquals("'" + str19 + "' != '" + "GJChronology[+00:00:00.052]" + "'", str19, "GJChronology[+00:00:00.052]");
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(gJChronology25);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 97L + "'", long30 == 97L);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 5200L + "'", long34 == 5200L);
        org.junit.Assert.assertNotNull(durationField35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(durationField39);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 1919939052456866198L + "'", long43 == 1919939052456866198L);
    }

    @Test
    public void test19144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19144");
        java.util.Locale locale2 = new java.util.Locale("", "anglais");
        org.junit.Assert.assertEquals(locale2.toString(), "_ANGLAIS");
    }

    @Test
    public void test19145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19145");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(864000000L);
        boolean boolean3 = instant1.isAfter(0L);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
    }

    @Test
    public void test19146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19146");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = gJChronology2.halfdays();
        long long7 = gJChronology2.add((long) 'a', (-1L), (int) (short) 0);
        boolean boolean9 = gJChronology2.equals((java.lang.Object) 0);
        org.joda.time.DateTimeField dateTimeField10 = gJChronology2.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField11 = gJChronology2.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField12 = gJChronology2.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField13 = gJChronology2.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField14 = gJChronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField16 = gJChronology2.era();
        org.joda.time.DurationField durationField17 = gJChronology2.halfdays();
        org.joda.time.DateTimeField dateTimeField18 = gJChronology2.minuteOfDay();
        org.joda.time.Chronology chronology19 = gJChronology2.withUTC();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 97L + "'", long7 == 97L);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(chronology19);
    }

    @Test
    public void test19147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19147");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = gJChronology2.halfdays();
        org.joda.time.Chronology chronology4 = gJChronology2.withUTC();
        long long8 = gJChronology2.add((long) (byte) 0, 4324200000L, 4);
        long long12 = gJChronology2.add(3155760000000L, (long) (short) 10, (int) 'u');
        org.joda.time.DurationField durationField13 = gJChronology2.halfdays();
        java.lang.String str14 = gJChronology2.toString();
        int int15 = gJChronology2.getMinimumDaysInFirstWeek();
        org.joda.time.Instant instant17 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone18 = null;
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forTimeZone(timeZone18);
        org.joda.time.chrono.GJChronology gJChronology20 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone19);
        org.joda.time.DateTimeField dateTimeField21 = gJChronology20.millisOfSecond();
        int int22 = instant17.get(dateTimeField21);
        org.joda.time.Instant instant24 = instant17.plus(0L);
        java.util.TimeZone timeZone25 = null;
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forTimeZone(timeZone25);
        org.joda.time.chrono.GJChronology gJChronology27 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone26);
        org.joda.time.DurationField durationField28 = gJChronology27.halfdays();
        org.joda.time.Chronology chronology29 = gJChronology27.withUTC();
        java.lang.String str30 = gJChronology27.toString();
        org.joda.time.DateTimeField dateTimeField31 = gJChronology27.hourOfHalfday();
        int int32 = instant17.get(dateTimeField31);
        org.joda.time.Instant instant34 = new org.joda.time.Instant(52L);
        boolean boolean35 = instant34.isEqualNow();
        org.joda.time.ReadableDuration readableDuration36 = null;
        org.joda.time.Instant instant37 = instant34.plus(readableDuration36);
        org.joda.time.Instant instant39 = new org.joda.time.Instant(52L);
        org.joda.time.Instant instant41 = instant39.withMillis((long) 'u');
        boolean boolean42 = instant34.isBefore((org.joda.time.ReadableInstant) instant39);
        boolean boolean43 = instant17.isEqual((org.joda.time.ReadableInstant) instant39);
        org.joda.time.Chronology chronology44 = instant39.getChronology();
        org.joda.time.ReadableDuration readableDuration45 = null;
        org.joda.time.Instant instant46 = instant39.plus(readableDuration45);
        java.lang.String str47 = instant46.toString();
        org.joda.time.Chronology chronology48 = instant46.getChronology();
        org.joda.time.DateTimeZone dateTimeZone49 = instant46.getZone();
        java.lang.String str51 = dateTimeZone49.getName(4701974400000000L);
        org.joda.time.Chronology chronology52 = gJChronology2.withZone(dateTimeZone49);
        long long56 = gJChronology2.add((long) (-876576), (-7948800000L), (-457585131));
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 17296800000L + "'", long8 == 17296800000L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 3155760001170L + "'", long12 == 3155760001170L);
        org.junit.Assert.assertNotNull(durationField13);
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "GJChronology[+00:00:00.052]" + "'", str14, "GJChronology[+00:00:00.052]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 4 + "'", int15 == 4);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(gJChronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
// flaky:         org.junit.Assert.assertTrue("'" + int22 + "' != '" + 104 + "'", int22 == 104);
        org.junit.Assert.assertNotNull(instant24);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertNotNull(gJChronology27);
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertNotNull(chronology29);
// flaky:         org.junit.Assert.assertEquals("'" + str30 + "' != '" + "GJChronology[+00:00:00.052]" + "'", str30, "GJChronology[+00:00:00.052]");
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(instant37);
        org.junit.Assert.assertNotNull(instant41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(instant46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "1970-01-01T00:00:00.052Z" + "'", str47, "1970-01-01T00:00:00.052Z");
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertNotNull(dateTimeZone49);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "+00:00" + "'", str51, "+00:00");
        org.junit.Assert.assertNotNull(chronology52);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 3637252689291923424L + "'", long56 == 3637252689291923424L);
    }

    @Test
    public void test19148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19148");
        java.util.Locale locale0 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale1 = java.util.Locale.ENGLISH;
        java.lang.String str2 = locale0.getDisplayLanguage(locale1);
        java.util.Locale locale3 = java.util.Locale.CANADA;
        java.lang.String str4 = locale3.getISO3Language();
        java.lang.String str5 = locale0.getDisplayVariant(locale3);
        java.util.Set<java.lang.String> strSet6 = locale0.getUnicodeLocaleKeys();
        java.util.Locale locale10 = new java.util.Locale("zh", "en", "");
        java.lang.String str11 = locale0.getDisplayName(locale10);
        java.util.Locale locale14 = new java.util.Locale("CN", "English (United States)");
        java.lang.String str15 = locale0.getDisplayScript(locale14);
        java.util.Locale locale16 = locale14.stripExtensions();
        java.lang.Class<?> wildcardClass17 = locale16.getClass();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "en");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Chinese" + "'", str2, "Chinese");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "eng" + "'", str4, "eng");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(strSet6);
        org.junit.Assert.assertEquals(locale10.toString(), "zh_EN");
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\u4e2d\u6587\u53f0\u6e7e\u5730\u533a)" + "'", str11, "\u4e2d\u6587\u53f0\u6e7e\u5730\u533a)");
        org.junit.Assert.assertEquals(locale14.toString(), "cn_ENGLISH (UNITED STATES)");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "cn_ENGLISH (UNITED STATES)");
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test19149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19149");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Instant instant1 = org.joda.time.Instant.parse("\u82f1\u6587\u7f8e\u56fd)");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"?? (??)\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test19150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19150");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = gJChronology2.halfdays();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.millisOfDay();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.minuteOfDay();
        org.joda.time.DurationField durationField6 = gJChronology2.centuries();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology2.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField8 = gJChronology2.year();
        org.joda.time.DurationField durationField9 = gJChronology2.weekyears();
        org.joda.time.DateTimeField dateTimeField10 = gJChronology2.dayOfYear();
        org.joda.time.DateTimeField dateTimeField11 = gJChronology2.millisOfDay();
        org.joda.time.Chronology chronology12 = gJChronology2.withUTC();
        org.joda.time.DurationField durationField13 = chronology12.halfdays();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(durationField13);
    }

    @Test
    public void test19151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19151");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        long long6 = dateTimeZone1.convertLocalToUTC((long) (byte) -1, true, 0L);
        boolean boolean8 = dateTimeZone1.equals((java.lang.Object) true);
        org.joda.time.chrono.GJChronology gJChronology9 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField10 = gJChronology9.weekyear();
        org.joda.time.DateTimeField dateTimeField11 = gJChronology9.era();
        org.joda.time.DateTimeZone dateTimeZone12 = gJChronology9.getZone();
        org.joda.time.DurationField durationField13 = gJChronology9.months();
        org.joda.time.DurationField durationField14 = gJChronology9.weeks();
        org.joda.time.ReadablePartial readablePartial15 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long17 = gJChronology9.set(readablePartial15, (-5999947L));
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(gJChronology2);
// flaky:         org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-53L) + "'", long6 == (-53L));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(gJChronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(durationField14);
    }

    @Test
    public void test19152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19152");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = gJChronology2.years();
        java.util.TimeZone timeZone4 = null;
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forTimeZone(timeZone4);
        org.joda.time.chrono.GJChronology gJChronology6 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone5);
        org.joda.time.DurationField durationField7 = gJChronology6.halfdays();
        org.joda.time.DateTimeField dateTimeField8 = gJChronology6.millisOfDay();
        org.joda.time.DateTimeField dateTimeField9 = gJChronology6.minuteOfDay();
        org.joda.time.DurationField durationField10 = gJChronology6.centuries();
        java.util.TimeZone timeZone11 = null;
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forTimeZone(timeZone11);
        org.joda.time.chrono.GJChronology gJChronology13 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone12);
        org.joda.time.DurationField durationField14 = gJChronology13.halfdays();
        long long17 = durationField14.add((long) 100, 100L);
        boolean boolean18 = durationField14.isPrecise();
        int int19 = durationField10.compareTo(durationField14);
        boolean boolean20 = gJChronology2.equals((java.lang.Object) durationField10);
        org.joda.time.DateTimeField dateTimeField21 = gJChronology2.dayOfYear();
        org.joda.time.DateTimeField dateTimeField22 = gJChronology2.clockhourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone23 = gJChronology2.getZone();
        org.joda.time.LocalDateTime localDateTime24 = null;
        boolean boolean25 = dateTimeZone23.isLocalDateTimeGap(localDateTime24);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone23);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(gJChronology6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(gJChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 4320000100L + "'", long17 == 4320000100L);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test19153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19153");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField3 = gJChronology2.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.weekyearOfCentury();
        org.joda.time.Instant instant5 = gJChronology2.getGregorianCutover();
        org.joda.time.Instant instant7 = instant5.withMillis(0L);
        org.joda.time.Instant instant9 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone10 = null;
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forTimeZone(timeZone10);
        org.joda.time.chrono.GJChronology gJChronology12 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone11);
        org.joda.time.DateTimeField dateTimeField13 = gJChronology12.millisOfSecond();
        int int14 = instant9.get(dateTimeField13);
        org.joda.time.Instant instant16 = instant9.plus(0L);
        int int17 = instant7.compareTo((org.joda.time.ReadableInstant) instant16);
        org.joda.time.Chronology chronology18 = instant16.getChronology();
        org.joda.time.DurationField durationField19 = chronology18.halfdays();
        org.joda.time.DateTimeField dateTimeField20 = chronology18.secondOfMinute();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(instant5);
        org.junit.Assert.assertNotNull(instant7);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(gJChronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
// flaky:         org.junit.Assert.assertTrue("'" + int14 + "' != '" + 104 + "'", int14 == 104);
        org.junit.Assert.assertNotNull(instant16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
    }

    @Test
    public void test19154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19154");
        java.util.Locale locale0 = java.util.Locale.ENGLISH;
        java.lang.String str1 = locale0.getDisplayScript();
        java.lang.String str2 = locale0.getDisplayVariant();
        java.util.Locale locale4 = new java.util.Locale("hi!");
        java.lang.String str5 = locale4.getCountry();
        java.lang.String str6 = locale4.getScript();
        java.util.Locale locale7 = java.util.Locale.ITALIAN;
        java.util.Locale locale8 = locale7.stripExtensions();
        java.util.Locale locale9 = java.util.Locale.CANADA;
        java.lang.String str10 = locale7.getDisplayVariant(locale9);
        java.lang.String str11 = locale4.getDisplayScript(locale7);
        java.lang.String str12 = locale4.getVariant();
        java.lang.String str13 = locale0.getDisplayCountry(locale4);
        java.util.Locale locale14 = locale4.stripExtensions();
        java.lang.String str15 = locale14.getISO3Country();
        java.util.Set<java.lang.String> strSet16 = locale14.getUnicodeLocaleKeys();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertEquals(locale4.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "it");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "it");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(strSet16);
    }

    @Test
    public void test19155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19155");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = gJChronology2.halfdays();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.millisOfDay();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.minuteOfDay();
        org.joda.time.DurationField durationField6 = gJChronology2.centuries();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology2.dayOfYear();
        org.joda.time.DateTimeField dateTimeField8 = gJChronology2.millisOfDay();
        org.joda.time.DateTimeField dateTimeField9 = gJChronology2.year();
        org.joda.time.DateTimeField dateTimeField10 = gJChronology2.weekyear();
        org.joda.time.DurationField durationField11 = gJChronology2.weeks();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(durationField11);
    }

    @Test
    public void test19156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19156");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = gJChronology2.halfdays();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.millisOfDay();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.minuteOfDay();
        org.joda.time.DurationField durationField6 = gJChronology2.centuries();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology2.dayOfYear();
        org.joda.time.DateTimeField dateTimeField8 = gJChronology2.weekyearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(1, 10);
        java.util.TimeZone timeZone12 = null;
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forTimeZone(timeZone12);
        long long15 = dateTimeZone11.getMillisKeepLocal(dateTimeZone13, 4320000000L);
        java.util.TimeZone timeZone16 = null;
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forTimeZone(timeZone16);
        java.lang.String str19 = dateTimeZone17.getNameKey((long) 100);
        boolean boolean20 = dateTimeZone17.isFixed();
        java.lang.String str21 = dateTimeZone17.toString();
        java.lang.String str22 = dateTimeZone17.getID();
        long long24 = dateTimeZone13.getMillisKeepLocal(dateTimeZone17, (long) (byte) -1);
        org.joda.time.Chronology chronology25 = gJChronology2.withZone(dateTimeZone17);
        org.joda.time.DurationField durationField26 = gJChronology2.halfdays();
        org.joda.time.DateTimeField dateTimeField27 = gJChronology2.millisOfDay();
        org.joda.time.Chronology chronology28 = gJChronology2.withUTC();
        org.joda.time.DateTimeField dateTimeField29 = gJChronology2.clockhourOfDay();
        org.joda.time.DateTimeZone dateTimeZone30 = gJChronology2.getZone();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(dateTimeZone13);
// flaky:         org.junit.Assert.assertTrue("'" + long15 + "' != '" + 4324199948L + "'", long15 == 4324199948L);
        org.junit.Assert.assertNotNull(dateTimeZone17);
// flaky:         org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str21 + "' != '" + "+00:00:00.052" + "'", str21, "+00:00:00.052");
// flaky:         org.junit.Assert.assertEquals("'" + str22 + "' != '" + "+00:00:00.052" + "'", str22, "+00:00:00.052");
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + (-1L) + "'", long24 == (-1L));
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeZone30);
    }

    @Test
    public void test19157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19157");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = gJChronology2.halfdays();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.millisOfDay();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology2.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology2.secondOfDay();
        org.joda.time.DateTimeField dateTimeField8 = gJChronology2.yearOfCentury();
        org.joda.time.DurationField durationField9 = gJChronology2.seconds();
        boolean boolean10 = durationField9.isPrecise();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
    }

    @Test
    public void test19158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19158");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((-378248374953213L));
    }

    @Test
    public void test19159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19159");
        java.util.Locale.Category category0 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale1 = java.util.Locale.CANADA;
        java.lang.String str2 = locale1.getISO3Language();
        java.util.Locale.setDefault(category0, locale1);
        java.util.Locale locale6 = new java.util.Locale("cinese (Taiwan)", "DurationField[weekyears]");
        java.util.Set<java.lang.String> strSet7 = locale6.getUnicodeLocaleAttributes();
        java.lang.String str8 = locale1.getDisplayLanguage(locale6);
        java.util.Locale locale10 = new java.util.Locale("hi!");
        java.lang.String str11 = locale10.getCountry();
        java.lang.String str12 = locale10.getScript();
        java.util.Locale locale13 = java.util.Locale.ITALIAN;
        java.util.Locale locale14 = locale13.stripExtensions();
        java.util.Locale locale15 = java.util.Locale.CANADA;
        java.lang.String str16 = locale13.getDisplayVariant(locale15);
        java.lang.String str17 = locale10.getDisplayScript(locale13);
        java.lang.String str18 = locale13.getDisplayCountry();
        java.lang.String str19 = locale1.getDisplayScript(locale13);
        java.util.Locale.setDefault(locale13);
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category0.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "eng" + "'", str2, "eng");
        org.junit.Assert.assertEquals(locale6.toString(), "cinese (taiwan)_DURATIONFIELD[WEEKYEARS]");
        org.junit.Assert.assertNotNull(strSet7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "English" + "'", str8, "English");
        org.junit.Assert.assertEquals(locale10.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "it");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "it");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
    }

    @Test
    public void test19160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19160");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = gJChronology2.halfdays();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.millisOfDay();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.minuteOfDay();
        org.joda.time.DurationField durationField6 = gJChronology2.centuries();
        int int7 = gJChronology2.getMinimumDaysInFirstWeek();
        org.joda.time.DateTimeField dateTimeField8 = gJChronology2.weekyear();
        org.joda.time.DateTimeField dateTimeField9 = gJChronology2.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField10 = gJChronology2.hourOfDay();
        org.joda.time.DateTimeField dateTimeField11 = gJChronology2.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField12 = gJChronology2.hourOfDay();
        org.joda.time.DateTimeField dateTimeField13 = gJChronology2.hourOfDay();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 4 + "'", int7 == 4);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
    }

    @Test
    public void test19161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19161");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = gJChronology2.halfdays();
        org.joda.time.Chronology chronology4 = gJChronology2.withUTC();
        java.lang.String str5 = gJChronology2.toString();
        org.joda.time.Chronology chronology6 = gJChronology2.withUTC();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology2.era();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(chronology4);
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "GJChronology[+00:00:00.052]" + "'", str5, "GJChronology[+00:00:00.052]");
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
    }

    @Test
    public void test19162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19162");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forID("+04:52");
        boolean boolean3 = dateTimeZone1.isStandardOffset((long) 6171680);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
    }

    @Test
    public void test19163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19163");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forTimeZone(timeZone2);
        org.joda.time.chrono.GJChronology gJChronology4 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone3);
        org.joda.time.DateTimeField dateTimeField5 = gJChronology4.millisOfSecond();
        int int6 = instant1.get(dateTimeField5);
        boolean boolean7 = instant1.isEqualNow();
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.Instant instant10 = instant1.withDurationAdded(readableDuration8, (int) (short) 0);
        java.lang.String str11 = instant10.toString();
        java.util.TimeZone timeZone12 = null;
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forTimeZone(timeZone12);
        org.joda.time.chrono.GJChronology gJChronology14 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone13);
        org.joda.time.DateTimeField dateTimeField15 = gJChronology14.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField16 = gJChronology14.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField17 = gJChronology14.minuteOfHour();
        org.joda.time.DurationField durationField18 = gJChronology14.centuries();
        org.joda.time.Chronology chronology19 = gJChronology14.withUTC();
        boolean boolean20 = instant10.equals((java.lang.Object) chronology19);
        org.joda.time.DateTimeField dateTimeField21 = chronology19.hourOfHalfday();
        org.joda.time.DurationField durationField22 = chronology19.days();
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(gJChronology4);
        org.junit.Assert.assertNotNull(dateTimeField5);
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 104 + "'", int6 == 104);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(instant10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "1970-01-01T00:00:00.052Z" + "'", str11, "1970-01-01T00:00:00.052Z");
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(gJChronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(durationField22);
    }

    @Test
    public void test19164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19164");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField3 = gJChronology2.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.weekyear();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.halfdayOfDay();
        org.joda.time.DurationField durationField6 = gJChronology2.years();
        org.joda.time.DurationField durationField7 = gJChronology2.minutes();
        java.util.TimeZone timeZone8 = null;
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forTimeZone(timeZone8);
        java.lang.String str11 = dateTimeZone9.getNameKey((long) 100);
        boolean boolean12 = dateTimeZone9.isFixed();
        org.joda.time.chrono.GJChronology gJChronology13 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone9);
        int int14 = gJChronology13.getMinimumDaysInFirstWeek();
        java.lang.String str15 = gJChronology13.toString();
        org.joda.time.DateTimeField dateTimeField16 = gJChronology13.yearOfEra();
        org.joda.time.DateTimeField dateTimeField17 = gJChronology13.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField18 = gJChronology13.dayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology20 = gJChronology13.withZone(dateTimeZone19);
        org.joda.time.Chronology chronology21 = gJChronology2.withZone(dateTimeZone19);
        org.joda.time.DurationField durationField22 = gJChronology2.years();
        org.joda.time.DateTimeField dateTimeField23 = gJChronology2.year();
        org.joda.time.DateTimeField dateTimeField24 = gJChronology2.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField25 = gJChronology2.secondOfDay();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeZone9);
// flaky:         org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(gJChronology13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 4 + "'", int14 == 4);
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "GJChronology[+00:00:00.052]" + "'", str15, "GJChronology[+00:00:00.052]");
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
    }

    @Test
    public void test19165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19165");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = gJChronology2.halfdays();
        long long7 = gJChronology2.add((long) 'a', (-1L), (int) (short) 0);
        boolean boolean9 = gJChronology2.equals((java.lang.Object) 0);
        org.joda.time.DateTimeField dateTimeField10 = gJChronology2.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField11 = gJChronology2.hourOfHalfday();
        org.joda.time.Instant instant12 = gJChronology2.getGregorianCutover();
        java.util.TimeZone timeZone13 = null;
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forTimeZone(timeZone13);
        org.joda.time.chrono.GJChronology gJChronology15 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone14);
        org.joda.time.DurationField durationField16 = gJChronology15.halfdays();
        org.joda.time.DateTimeField dateTimeField17 = gJChronology15.millisOfDay();
        org.joda.time.DateTimeField dateTimeField18 = gJChronology15.minuteOfDay();
        org.joda.time.DurationField durationField19 = gJChronology15.centuries();
        org.joda.time.DateTimeField dateTimeField20 = gJChronology15.dayOfYear();
        java.lang.String str21 = gJChronology15.toString();
        org.joda.time.DateTimeField dateTimeField22 = gJChronology15.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone23 = gJChronology15.getZone();
        org.joda.time.chrono.GJChronology gJChronology24 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone23);
        org.joda.time.DateTimeField dateTimeField25 = gJChronology24.clockhourOfDay();
        org.joda.time.DurationField durationField26 = gJChronology24.centuries();
        org.joda.time.DurationField durationField27 = gJChronology24.months();
        org.joda.time.DateTimeField dateTimeField28 = gJChronology24.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField29 = gJChronology24.minuteOfDay();
        java.util.TimeZone timeZone30 = null;
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forTimeZone(timeZone30);
        org.joda.time.chrono.GJChronology gJChronology32 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone31);
        org.joda.time.DurationField durationField33 = gJChronology32.halfdays();
        org.joda.time.DateTimeField dateTimeField34 = gJChronology32.millisOfDay();
        org.joda.time.DateTimeField dateTimeField35 = gJChronology32.minuteOfDay();
        org.joda.time.DurationField durationField36 = gJChronology32.centuries();
        org.joda.time.DateTimeField dateTimeField37 = gJChronology32.yearOfCentury();
        org.joda.time.Chronology chronology38 = gJChronology32.withUTC();
        org.joda.time.DateTimeZone dateTimeZone39 = gJChronology32.getZone();
        int int41 = dateTimeZone39.getOffset((long) 73050);
        java.lang.String str43 = dateTimeZone39.getShortName((long) (byte) 1);
        org.joda.time.Chronology chronology44 = gJChronology24.withZone(dateTimeZone39);
        org.joda.time.DateTime dateTime45 = instant12.toDateTime(dateTimeZone39);
        org.joda.time.Chronology chronology46 = instant12.getChronology();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 97L + "'", long7 == 97L);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(instant12);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(gJChronology15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
// flaky:         org.junit.Assert.assertEquals("'" + str21 + "' != '" + "GJChronology[+00:00:00.052]" + "'", str21, "GJChronology[+00:00:00.052]");
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(gJChronology24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertNotNull(gJChronology32);
        org.junit.Assert.assertNotNull(durationField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(durationField36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(dateTimeZone39);
// flaky:         org.junit.Assert.assertTrue("'" + int41 + "' != '" + 52 + "'", int41 == 52);
// flaky:         org.junit.Assert.assertEquals("'" + str43 + "' != '" + "+00:00:00.052" + "'", str43, "+00:00:00.052");
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(chronology46);
    }

    @Test
    public void test19166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19166");
        java.util.List<java.util.Locale.LanguageRange> languageRangeList1 = java.util.Locale.LanguageRange.parse("JP");
        java.util.List<java.util.Locale.LanguageRange> languageRangeList3 = java.util.Locale.LanguageRange.parse("halfdays");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap4 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList5 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList3, strMap4);
        java.util.Locale.LanguageRange[] languageRangeArray6 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList7 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList7, languageRangeArray6);
        java.util.Set<java.lang.String> strSet9 = org.joda.time.DateTimeZone.getAvailableIDs();
        java.lang.String str10 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList7, (java.util.Collection<java.lang.String>) strSet9);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap11 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList12 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList7, strMap11);
        java.util.List<java.util.Locale.LanguageRange> languageRangeList14 = java.util.Locale.LanguageRange.parse("halfdays");
        java.util.TimeZone timeZone15 = null;
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forTimeZone(timeZone15);
        org.joda.time.chrono.GJChronology gJChronology17 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone16);
        java.util.Locale locale19 = new java.util.Locale("hi!");
        java.lang.String str20 = locale19.getCountry();
        java.util.Locale locale21 = java.util.Locale.getDefault();
        java.lang.String str22 = locale21.getDisplayName();
        java.lang.String str23 = locale19.getDisplayScript(locale21);
        boolean boolean24 = dateTimeZone16.equals((java.lang.Object) locale21);
        java.util.Set<java.lang.String> strSet25 = locale21.getUnicodeLocaleKeys();
        java.lang.String str26 = java.util.Locale.lookupTag(languageRangeList14, (java.util.Collection<java.lang.String>) strSet25);
        java.util.List<java.util.Locale.LanguageRange> languageRangeList28 = java.util.Locale.LanguageRange.parse("halfdays");
        java.util.List<java.util.Locale.LanguageRange> languageRangeList30 = java.util.Locale.LanguageRange.parse("halfdays");
        java.util.Locale locale31 = java.util.Locale.getDefault();
        java.lang.String str32 = locale31.getDisplayLanguage();
        java.util.Locale locale33 = java.util.Locale.CANADA;
        java.lang.String str34 = locale33.getDisplayVariant();
        java.util.Locale locale35 = java.util.Locale.JAPAN;
        java.lang.String str36 = locale35.getCountry();
        java.util.Locale locale37 = java.util.Locale.KOREA;
        java.util.Locale locale38 = java.util.Locale.GERMANY;
        java.util.Locale locale40 = java.util.Locale.forLanguageTag("hi!");
        java.lang.String str41 = locale40.toLanguageTag();
        java.util.Locale locale43 = new java.util.Locale("hi!");
        java.lang.String str44 = locale43.getCountry();
        java.lang.String str45 = locale43.getLanguage();
        java.util.Locale locale47 = java.util.Locale.forLanguageTag("halfdays");
        boolean boolean48 = locale47.hasExtensions();
        java.util.Locale locale49 = java.util.Locale.getDefault();
        java.lang.String str50 = locale49.getISO3Language();
        java.util.Locale locale52 = new java.util.Locale("hi!");
        java.lang.String str53 = locale52.getCountry();
        java.lang.String str54 = locale52.getCountry();
        java.util.Locale locale55 = java.util.Locale.getDefault();
        java.util.Locale locale56 = java.util.Locale.CHINA;
        java.util.Locale locale57 = java.util.Locale.getDefault();
        java.lang.String str58 = locale57.getDisplayName();
        java.lang.String str59 = locale57.getDisplayVariant();
        java.util.Locale locale60 = java.util.Locale.ROOT;
        java.lang.String str61 = locale60.getDisplayScript();
        java.util.Locale locale62 = java.util.Locale.getDefault();
        java.lang.String str63 = locale62.getDisplayName();
        java.util.Locale locale64 = java.util.Locale.CANADA;
        java.lang.String str65 = locale64.getISO3Language();
        java.util.Locale locale66 = java.util.Locale.getDefault();
        java.lang.String str67 = locale66.getDisplayLanguage();
        java.lang.String str68 = locale66.toLanguageTag();
        java.util.Locale locale70 = new java.util.Locale("hi!");
        java.lang.String str71 = locale70.getCountry();
        java.util.Locale locale72 = java.util.Locale.getDefault();
        java.lang.String str73 = locale72.getDisplayName();
        java.lang.String str74 = locale70.getDisplayScript(locale72);
        java.util.Locale locale75 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Locale locale76 = java.util.Locale.JAPAN;
        java.lang.String str77 = locale76.getCountry();
        java.util.Locale locale79 = new java.util.Locale("hi!");
        java.lang.String str80 = locale79.getCountry();
        java.lang.String str81 = locale79.getScript();
        java.util.Locale locale82 = java.util.Locale.CANADA;
        java.lang.String str83 = locale82.getISO3Language();
        java.util.Locale locale84 = java.util.Locale.getDefault();
        java.lang.String str85 = locale84.getDisplayName();
        java.lang.String str86 = locale84.getDisplayVariant();
        java.util.Locale[] localeArray87 = new java.util.Locale[] { locale31, locale33, locale35, locale37, locale38, locale40, locale43, locale47, locale49, locale52, locale55, locale56, locale57, locale60, locale62, locale64, locale66, locale70, locale75, locale76, locale79, locale82, locale84 };
        java.util.ArrayList<java.util.Locale> localeList88 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean89 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList88, localeArray87);
        java.util.Locale locale90 = java.util.Locale.lookup(languageRangeList30, (java.util.Collection<java.util.Locale>) localeList88);
        java.util.Locale locale91 = java.util.Locale.lookup(languageRangeList28, (java.util.Collection<java.util.Locale>) localeList88);
        java.util.Locale.FilteringMode filteringMode92 = null;
        java.util.List<java.util.Locale> localeList93 = java.util.Locale.filter(languageRangeList14, (java.util.Collection<java.util.Locale>) localeList88, filteringMode92);
        java.util.Locale.FilteringMode filteringMode94 = java.util.Locale.FilteringMode.EXTENDED_FILTERING;
        java.util.List<java.util.Locale> localeList95 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList7, (java.util.Collection<java.util.Locale>) localeList88, filteringMode94);
        java.util.List<java.util.Locale> localeList96 = java.util.Locale.filter(languageRangeList5, (java.util.Collection<java.util.Locale>) localeList88);
        java.util.Locale locale97 = java.util.Locale.lookup(languageRangeList1, (java.util.Collection<java.util.Locale>) localeList96);
        org.junit.Assert.assertNotNull(languageRangeList1);
        org.junit.Assert.assertNotNull(languageRangeList3);
        org.junit.Assert.assertNotNull(languageRangeList5);
        org.junit.Assert.assertNotNull(languageRangeArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(strSet9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(languageRangeList12);
        org.junit.Assert.assertNotNull(languageRangeList14);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(gJChronology17);
        org.junit.Assert.assertEquals(locale19.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "it");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "italiano" + "'", str22, "italiano");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(strSet25);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNotNull(languageRangeList28);
        org.junit.Assert.assertNotNull(languageRangeList30);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "it");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "italiano" + "'", str32, "italiano");
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "JP" + "'", str36, "JP");
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "de_DE");
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "und" + "'", str41, "und");
        org.junit.Assert.assertEquals(locale43.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "hi!" + "'", str45, "hi!");
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "halfdays");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "it");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "ita" + "'", str50, "ita");
        org.junit.Assert.assertEquals(locale52.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "it");
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "it");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "italiano" + "'", str58, "italiano");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "it");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "italiano" + "'", str63, "italiano");
        org.junit.Assert.assertNotNull(locale64);
        org.junit.Assert.assertEquals(locale64.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "eng" + "'", str65, "eng");
        org.junit.Assert.assertNotNull(locale66);
        org.junit.Assert.assertEquals(locale66.toString(), "it");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "italiano" + "'", str67, "italiano");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "it" + "'", str68, "it");
        org.junit.Assert.assertEquals(locale70.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "" + "'", str71, "");
        org.junit.Assert.assertNotNull(locale72);
        org.junit.Assert.assertEquals(locale72.toString(), "it");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "italiano" + "'", str73, "italiano");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "" + "'", str74, "");
        org.junit.Assert.assertNotNull(locale75);
        org.junit.Assert.assertEquals(locale75.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale76);
        org.junit.Assert.assertEquals(locale76.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "JP" + "'", str77, "JP");
        org.junit.Assert.assertEquals(locale79.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "" + "'", str80, "");
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "" + "'", str81, "");
        org.junit.Assert.assertNotNull(locale82);
        org.junit.Assert.assertEquals(locale82.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "eng" + "'", str83, "eng");
        org.junit.Assert.assertNotNull(locale84);
        org.junit.Assert.assertEquals(locale84.toString(), "it");
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "italiano" + "'", str85, "italiano");
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "" + "'", str86, "");
        org.junit.Assert.assertNotNull(localeArray87);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertNotNull(locale90);
        org.junit.Assert.assertEquals(locale90.toString(), "halfdays");
        org.junit.Assert.assertNotNull(locale91);
        org.junit.Assert.assertEquals(locale91.toString(), "halfdays");
        org.junit.Assert.assertNotNull(localeList93);
        org.junit.Assert.assertTrue("'" + filteringMode94 + "' != '" + java.util.Locale.FilteringMode.EXTENDED_FILTERING + "'", filteringMode94.equals(java.util.Locale.FilteringMode.EXTENDED_FILTERING));
        org.junit.Assert.assertNotNull(localeList95);
        org.junit.Assert.assertNotNull(localeList96);
        org.junit.Assert.assertNull(locale97);
    }

    @Test
    public void test19167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19167");
        org.joda.time.chrono.GJChronology gJChronology0 = org.joda.time.chrono.GJChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = gJChronology0.era();
        org.joda.time.DateTimeField dateTimeField2 = gJChronology0.secondOfDay();
        org.joda.time.DateTimeField dateTimeField3 = gJChronology0.weekyear();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology0.monthOfYear();
        org.joda.time.DurationField durationField5 = gJChronology0.months();
        org.joda.time.DateTimeZone dateTimeZone6 = gJChronology0.getZone();
        org.junit.Assert.assertNotNull(gJChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
    }

    @Test
    public void test19168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19168");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Instant instant2 = org.joda.time.Instant.parse("DurationField[weeks]", dateTimeFormatter1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test19169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19169");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = gJChronology2.halfdays();
        long long7 = gJChronology2.add((long) 'a', (-1L), (int) (short) 0);
        org.joda.time.DateTimeField dateTimeField8 = gJChronology2.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField9 = gJChronology2.year();
        org.joda.time.DurationField durationField10 = gJChronology2.millis();
        org.joda.time.DurationField durationField11 = gJChronology2.seconds();
        org.joda.time.DateTimeField dateTimeField12 = gJChronology2.millisOfDay();
        java.lang.String str13 = gJChronology2.toString();
        // The following exception was thrown during execution in test generation
        try {
            long long21 = gJChronology2.getDateTimeMillis(91, 6171680, 0, (int) 'x', (-3), 0, 17520000);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 120 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 97L + "'", long7 == 97L);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "GJChronology[+00:00:00.052]" + "'", str13, "GJChronology[+00:00:00.052]");
    }

    @Test
    public void test19170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19170");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(0, (int) (short) 10);
        int int4 = dateTimeZone2.getOffsetFromLocal((long) 236785);
        long long6 = dateTimeZone2.nextTransition((-64983772799999L));
        boolean boolean7 = dateTimeZone2.isFixed();
        java.util.Locale locale10 = new java.util.Locale("hi!");
        java.lang.String str11 = locale10.getCountry();
        java.lang.String str12 = locale10.getLanguage();
        java.lang.String str13 = locale10.getLanguage();
        boolean boolean14 = locale10.hasExtensions();
        java.util.Locale.Builder builder15 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder16 = builder15.clear();
        java.util.Locale.Builder builder18 = builder16.removeUnicodeLocaleAttribute("und");
        java.util.Locale.Builder builder19 = builder18.clearExtensions();
        java.util.Locale.Builder builder20 = builder19.clearExtensions();
        java.util.Locale locale21 = builder19.build();
        java.util.Locale.Builder builder23 = builder19.setLanguageTag("en-US");
        java.util.Locale locale24 = builder23.build();
        java.lang.String str25 = locale10.getDisplayLanguage(locale24);
        java.lang.String str26 = dateTimeZone2.getShortName(14452100L, locale10);
        java.lang.String str27 = locale10.toLanguageTag();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 600000 + "'", int4 == 600000);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-64983772799999L) + "'", long6 == (-64983772799999L));
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertEquals(locale10.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "");
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "hi!" + "'", str25, "hi!");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "+00:10" + "'", str26, "+00:10");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "und" + "'", str27, "und");
    }

    @Test
    public void test19171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19171");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = gJChronology2.halfdays();
        long long7 = gJChronology2.add((long) 'a', (-1L), (int) (short) 0);
        boolean boolean9 = gJChronology2.equals((java.lang.Object) 0);
        org.joda.time.DateTimeField dateTimeField10 = gJChronology2.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField11 = gJChronology2.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField12 = gJChronology2.clockhourOfDay();
        long long17 = gJChronology2.getDateTimeMillis(10, (int) (short) 10, 4, (int) (byte) 1);
        org.joda.time.DateTimeField dateTimeField18 = gJChronology2.millisOfDay();
        java.lang.String str19 = gJChronology2.toString();
        org.joda.time.DateTimeField dateTimeField20 = gJChronology2.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField21 = gJChronology2.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField22 = gJChronology2.halfdayOfDay();
        java.util.TimeZone timeZone23 = null;
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forTimeZone(timeZone23);
        org.joda.time.chrono.GJChronology gJChronology25 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone24);
        org.joda.time.DurationField durationField26 = gJChronology25.halfdays();
        long long30 = gJChronology25.add((long) 'a', (-1L), (int) (short) 0);
        long long34 = gJChronology25.add((long) (byte) 0, (long) '4', 100);
        org.joda.time.DurationField durationField35 = gJChronology25.years();
        org.joda.time.DateTimeField dateTimeField36 = gJChronology25.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone37 = gJChronology25.getZone();
        org.joda.time.Chronology chronology38 = gJChronology2.withZone(dateTimeZone37);
        org.joda.time.DurationField durationField39 = gJChronology2.days();
        org.joda.time.DurationField durationField40 = gJChronology2.years();
        org.joda.time.DateTimeZone dateTimeZone41 = gJChronology2.getZone();
        java.util.TimeZone timeZone42 = null;
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.forTimeZone(timeZone42);
        int int45 = dateTimeZone43.getOffsetFromLocal((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone48 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(0, (int) (short) 10);
        long long50 = dateTimeZone43.getMillisKeepLocal(dateTimeZone48, (-61827926399999L));
        long long52 = dateTimeZone41.getMillisKeepLocal(dateTimeZone48, (long) 'a');
        java.util.TimeZone timeZone53 = null;
        org.joda.time.DateTimeZone dateTimeZone54 = org.joda.time.DateTimeZone.forTimeZone(timeZone53);
        org.joda.time.chrono.GJChronology gJChronology55 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone54);
        org.joda.time.DurationField durationField56 = gJChronology55.halfdays();
        java.util.TimeZone timeZone57 = null;
        org.joda.time.DateTimeZone dateTimeZone58 = org.joda.time.DateTimeZone.forTimeZone(timeZone57);
        org.joda.time.chrono.GJChronology gJChronology59 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone58);
        long long63 = dateTimeZone58.convertLocalToUTC((long) (byte) -1, true, 0L);
        boolean boolean65 = dateTimeZone58.equals((java.lang.Object) true);
        org.joda.time.Chronology chronology66 = gJChronology55.withZone(dateTimeZone58);
        org.joda.time.LocalDateTime localDateTime67 = null;
        boolean boolean68 = dateTimeZone58.isLocalDateTimeGap(localDateTime67);
        boolean boolean69 = dateTimeZone58.isFixed();
        java.lang.String str71 = dateTimeZone58.getName(0L);
        long long73 = dateTimeZone41.getMillisKeepLocal(dateTimeZone58, (long) (short) 1);
        java.util.Locale.Builder builder74 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder75 = builder74.clear();
        java.util.Locale.Builder builder76 = builder74.clearExtensions();
        java.util.Locale.Builder builder78 = builder74.setVariant("halfdays");
        java.util.Locale.Builder builder80 = builder74.setScript("");
        java.util.Locale.Builder builder81 = builder74.clearExtensions();
        java.util.Locale.Builder builder83 = builder74.setRegion("CN");
        java.util.Locale.Builder builder84 = builder83.clear();
        boolean boolean85 = dateTimeZone41.equals((java.lang.Object) builder84);
        long long87 = dateTimeZone41.convertUTCToLocal((long) 100);
        java.lang.String str89 = dateTimeZone41.getNameKey(117599L);
        java.lang.String str90 = dateTimeZone41.toString();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 97L + "'", long7 == 97L);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
// flaky:         org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-61827926400051L) + "'", long17 == (-61827926400051L));
        org.junit.Assert.assertNotNull(dateTimeField18);
// flaky:         org.junit.Assert.assertEquals("'" + str19 + "' != '" + "GJChronology[+00:00:00.052]" + "'", str19, "GJChronology[+00:00:00.052]");
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(gJChronology25);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 97L + "'", long30 == 97L);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 5200L + "'", long34 == 5200L);
        org.junit.Assert.assertNotNull(durationField35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(durationField39);
        org.junit.Assert.assertNotNull(durationField40);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertNotNull(dateTimeZone43);
// flaky:         org.junit.Assert.assertTrue("'" + int45 + "' != '" + 52 + "'", int45 == 52);
        org.junit.Assert.assertNotNull(dateTimeZone48);
// flaky:         org.junit.Assert.assertTrue("'" + long50 + "' != '" + (-61827926999947L) + "'", long50 == (-61827926999947L));
// flaky:         org.junit.Assert.assertTrue("'" + long52 + "' != '" + (-599851L) + "'", long52 == (-599851L));
        org.junit.Assert.assertNotNull(dateTimeZone54);
        org.junit.Assert.assertNotNull(gJChronology55);
        org.junit.Assert.assertNotNull(durationField56);
        org.junit.Assert.assertNotNull(dateTimeZone58);
        org.junit.Assert.assertNotNull(gJChronology59);
// flaky:         org.junit.Assert.assertTrue("'" + long63 + "' != '" + (-53L) + "'", long63 == (-53L));
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(chronology66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str71 + "' != '" + "+00:00:00.052" + "'", str71, "+00:00:00.052");
        org.junit.Assert.assertTrue("'" + long73 + "' != '" + 1L + "'", long73 == 1L);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertNotNull(builder81);
        org.junit.Assert.assertNotNull(builder83);
        org.junit.Assert.assertNotNull(builder84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long87 + "' != '" + 152L + "'", long87 == 152L);
// flaky:         org.junit.Assert.assertNull(str89);
// flaky:         org.junit.Assert.assertEquals("'" + str90 + "' != '" + "+00:00:00.052" + "'", str90, "+00:00:00.052");
    }

    @Test
    public void test19172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19172");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(3155760000000L);
        org.joda.time.Instant instant2 = instant1.toInstant();
        org.joda.time.Instant instant4 = instant1.withMillis(0L);
        boolean boolean6 = instant4.isAfter((-23458387L));
        org.joda.time.Instant instant8 = new org.joda.time.Instant(52L);
        boolean boolean9 = instant8.isEqualNow();
        java.lang.String str10 = instant8.toString();
        java.lang.String str11 = instant8.toString();
        org.joda.time.Instant instant14 = instant8.withDurationAdded(115200000L, (int) (short) 1);
        org.joda.time.Instant instant16 = new org.joda.time.Instant(52L);
        boolean boolean17 = instant16.isEqualNow();
        java.lang.String str18 = instant16.toString();
        org.joda.time.Instant instant20 = new org.joda.time.Instant(52L);
        boolean boolean21 = instant20.isEqualNow();
        java.lang.String str22 = instant20.toString();
        java.lang.String str23 = instant20.toString();
        org.joda.time.Instant instant26 = instant20.withDurationAdded(115200000L, (int) (short) 1);
        int int27 = instant16.compareTo((org.joda.time.ReadableInstant) instant20);
        int int28 = instant14.compareTo((org.joda.time.ReadableInstant) instant16);
        boolean boolean29 = instant4.isEqual((org.joda.time.ReadableInstant) instant14);
        org.joda.time.Instant instant31 = instant4.minus(1136050274678400052L);
        org.junit.Assert.assertNotNull(instant2);
        org.junit.Assert.assertNotNull(instant4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1970-01-01T00:00:00.052Z" + "'", str10, "1970-01-01T00:00:00.052Z");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "1970-01-01T00:00:00.052Z" + "'", str11, "1970-01-01T00:00:00.052Z");
        org.junit.Assert.assertNotNull(instant14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "1970-01-01T00:00:00.052Z" + "'", str18, "1970-01-01T00:00:00.052Z");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "1970-01-01T00:00:00.052Z" + "'", str22, "1970-01-01T00:00:00.052Z");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "1970-01-01T00:00:00.052Z" + "'", str23, "1970-01-01T00:00:00.052Z");
        org.junit.Assert.assertNotNull(instant26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(instant31);
    }

    @Test
    public void test19173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19173");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = gJChronology2.halfdays();
        org.joda.time.Chronology chronology4 = gJChronology2.withUTC();
        long long8 = gJChronology2.add((long) (byte) 0, 4324200000L, 4);
        long long12 = gJChronology2.add(3155760000000L, (long) (short) 10, (int) 'u');
        org.joda.time.DurationField durationField13 = gJChronology2.weekyears();
        org.joda.time.DateTimeField dateTimeField14 = gJChronology2.secondOfDay();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology2.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField16 = gJChronology2.secondOfDay();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 17296800000L + "'", long8 == 17296800000L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 3155760001170L + "'", long12 == 3155760001170L);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
    }

    @Test
    public void test19174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19174");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        java.util.Locale locale4 = new java.util.Locale("hi!");
        java.lang.String str5 = locale4.getCountry();
        java.util.Locale locale6 = java.util.Locale.getDefault();
        java.lang.String str7 = locale6.getDisplayName();
        java.lang.String str8 = locale4.getDisplayScript(locale6);
        boolean boolean9 = dateTimeZone1.equals((java.lang.Object) locale6);
        org.joda.time.LocalDateTime localDateTime10 = null;
        boolean boolean11 = dateTimeZone1.isLocalDateTimeGap(localDateTime10);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertEquals(locale4.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "it");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "italiano" + "'", str7, "italiano");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test19175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19175");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField3 = gJChronology2.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.weekyearOfCentury();
        org.joda.time.Instant instant5 = gJChronology2.getGregorianCutover();
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        long long9 = gJChronology2.add(readablePeriod6, 432000001L, (int) (byte) 10);
        org.joda.time.Chronology chronology10 = gJChronology2.withUTC();
        org.joda.time.DateTimeField dateTimeField11 = gJChronology2.secondOfDay();
        org.joda.time.DateTimeField dateTimeField12 = gJChronology2.yearOfCentury();
        org.joda.time.DurationField durationField13 = gJChronology2.months();
        org.joda.time.DateTimeField dateTimeField14 = gJChronology2.clockhourOfHalfday();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(instant5);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 432000001L + "'", long9 == 432000001L);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
    }

    @Test
    public void test19176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19176");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = gJChronology2.halfdays();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.millisOfDay();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.minuteOfDay();
        org.joda.time.DurationField durationField6 = gJChronology2.centuries();
        int int7 = gJChronology2.getMinimumDaysInFirstWeek();
        org.joda.time.DateTimeField dateTimeField8 = gJChronology2.weekyear();
        org.joda.time.DateTimeField dateTimeField9 = gJChronology2.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField10 = gJChronology2.centuryOfEra();
        org.joda.time.DurationField durationField11 = gJChronology2.millis();
        org.joda.time.DateTimeZone dateTimeZone12 = gJChronology2.getZone();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 4 + "'", int7 == 4);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeZone12);
    }

    @Test
    public void test19177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19177");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = gJChronology2.halfdays();
        long long7 = gJChronology2.add((long) 'a', (-1L), (int) (short) 0);
        org.joda.time.DateTimeField dateTimeField8 = gJChronology2.halfdayOfDay();
        org.joda.time.Chronology chronology9 = gJChronology2.withUTC();
        org.joda.time.DateTimeField dateTimeField10 = gJChronology2.clockhourOfHalfday();
        org.joda.time.DurationField durationField11 = gJChronology2.millis();
        org.joda.time.DurationField durationField12 = gJChronology2.minutes();
        boolean boolean13 = durationField12.isSupported();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 97L + "'", long7 == 97L);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
    }

    @Test
    public void test19178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19178");
        java.util.Locale locale0 = java.util.Locale.GERMANY;
        java.lang.String str1 = locale0.getDisplayLanguage();
        java.lang.String str2 = locale0.getISO3Language();
        java.lang.String str3 = locale0.getISO3Country();
        java.util.Locale locale4 = locale0.stripExtensions();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "tedesco" + "'", str1, "tedesco");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "deu" + "'", str2, "deu");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "DEU" + "'", str3, "DEU");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "de_DE");
    }

    @Test
    public void test19179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19179");
        java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("cinese");
        java.lang.String str2 = languageRange1.getRange();
        double double3 = languageRange1.getWeight();
        java.util.TimeZone timeZone4 = null;
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forTimeZone(timeZone4);
        org.joda.time.chrono.GJChronology gJChronology6 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone5);
        long long10 = dateTimeZone5.convertLocalToUTC((long) (byte) -1, true, 0L);
        boolean boolean12 = dateTimeZone5.equals((java.lang.Object) true);
        org.joda.time.chrono.GJChronology gJChronology13 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone5);
        org.joda.time.DateTimeField dateTimeField14 = gJChronology13.weekyear();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology13.era();
        org.joda.time.DateTimeField dateTimeField16 = gJChronology13.centuryOfEra();
        org.joda.time.Chronology chronology17 = gJChronology13.withUTC();
        org.joda.time.Chronology chronology18 = gJChronology13.withUTC();
        org.joda.time.DateTimeField dateTimeField19 = gJChronology13.hourOfHalfday();
        org.joda.time.Instant instant20 = gJChronology13.getGregorianCutover();
        org.joda.time.DurationField durationField21 = gJChronology13.years();
        boolean boolean22 = languageRange1.equals((java.lang.Object) durationField21);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "cinese" + "'", str2, "cinese");
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 1.0d + "'", double3 == 1.0d);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(gJChronology6);
// flaky:         org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-53L) + "'", long10 == (-53L));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(gJChronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(instant20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test19180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19180");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = gJChronology2.halfdays();
        long long7 = gJChronology2.add((long) 'a', (-1L), (int) (short) 0);
        org.joda.time.DateTimeField dateTimeField8 = gJChronology2.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField9 = gJChronology2.centuryOfEra();
        long long13 = gJChronology2.add(262974600000L, (long) (byte) 100, (int) '4');
        org.joda.time.DateTimeField dateTimeField14 = gJChronology2.clockhourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(1, 10);
        java.util.TimeZone timeZone18 = null;
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forTimeZone(timeZone18);
        long long21 = dateTimeZone17.getMillisKeepLocal(dateTimeZone19, 4320000000L);
        long long24 = dateTimeZone19.adjustOffset((-60479999900000L), true);
        org.joda.time.Chronology chronology25 = gJChronology2.withZone(dateTimeZone19);
        org.joda.time.DateTimeField dateTimeField26 = gJChronology2.secondOfDay();
        org.joda.time.DateTimeField dateTimeField27 = gJChronology2.hourOfHalfday();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 97L + "'", long7 == 97L);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 262974605200L + "'", long13 == 262974605200L);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(dateTimeZone19);
// flaky:         org.junit.Assert.assertTrue("'" + long21 + "' != '" + 4324199948L + "'", long21 == 4324199948L);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + (-60479999900000L) + "'", long24 == (-60479999900000L));
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
    }

    @Test
    public void test19181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19181");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField3 = gJChronology2.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.weekyear();
        org.joda.time.DurationField durationField5 = gJChronology2.centuries();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology2.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology2.era();
        org.joda.time.DurationField durationField8 = gJChronology2.weekyears();
        org.joda.time.DurationField durationField9 = gJChronology2.halfdays();
        org.joda.time.DurationField durationField10 = gJChronology2.seconds();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(durationField10);
    }

    @Test
    public void test19182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19182");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField3 = gJChronology2.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.weekyearOfCentury();
        org.joda.time.Instant instant5 = gJChronology2.getGregorianCutover();
        org.joda.time.Instant instant7 = instant5.withMillis(0L);
        org.joda.time.Instant instant9 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone10 = null;
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forTimeZone(timeZone10);
        org.joda.time.chrono.GJChronology gJChronology12 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone11);
        org.joda.time.DateTimeField dateTimeField13 = gJChronology12.millisOfSecond();
        int int14 = instant9.get(dateTimeField13);
        org.joda.time.Instant instant16 = instant9.plus(0L);
        int int17 = instant7.compareTo((org.joda.time.ReadableInstant) instant16);
        org.joda.time.Instant instant19 = new org.joda.time.Instant(52L);
        boolean boolean20 = instant19.isEqualNow();
        org.joda.time.ReadableDuration readableDuration21 = null;
        org.joda.time.Instant instant22 = instant19.plus(readableDuration21);
        boolean boolean24 = instant22.equals((java.lang.Object) ' ');
        boolean boolean25 = instant16.isEqual((org.joda.time.ReadableInstant) instant22);
        java.lang.String str26 = instant16.toString();
        org.joda.time.Instant instant27 = new org.joda.time.Instant((java.lang.Object) str26);
        org.joda.time.Instant instant29 = instant27.plus(3692163384000L);
        org.joda.time.Instant instant31 = new org.joda.time.Instant(52L);
        boolean boolean32 = instant31.isEqualNow();
        org.joda.time.ReadableDuration readableDuration33 = null;
        org.joda.time.Instant instant34 = instant31.plus(readableDuration33);
        long long35 = instant31.getMillis();
        java.lang.Object obj36 = null;
        boolean boolean37 = instant31.equals(obj36);
        boolean boolean38 = instant29.isAfter((org.joda.time.ReadableInstant) instant31);
        org.joda.time.Chronology chronology39 = instant29.getChronology();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(instant5);
        org.junit.Assert.assertNotNull(instant7);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(gJChronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
// flaky:         org.junit.Assert.assertTrue("'" + int14 + "' != '" + 104 + "'", int14 == 104);
        org.junit.Assert.assertNotNull(instant16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(instant22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "1970-01-01T00:00:00.052Z" + "'", str26, "1970-01-01T00:00:00.052Z");
        org.junit.Assert.assertNotNull(instant29);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(instant34);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 52L + "'", long35 == 52L);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(chronology39);
    }

    @Test
    public void test19183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19183");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 0, (int) (byte) 1);
        boolean boolean4 = dateTimeZone2.isStandardOffset(186641343849600000L);
        org.joda.time.chrono.GJChronology gJChronology5 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone2);
        org.joda.time.ReadableInstant readableInstant6 = null;
        int int7 = dateTimeZone2.getOffset(readableInstant6);
        java.lang.String str9 = dateTimeZone2.getShortName(15765280290000L);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(gJChronology5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 60000 + "'", int7 == 60000);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+00:01" + "'", str9, "+00:01");
    }

    @Test
    public void test19184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19184");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = gJChronology2.halfdays();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.millisOfDay();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.minuteOfDay();
        org.joda.time.DurationField durationField6 = gJChronology2.centuries();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology2.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField8 = gJChronology2.year();
        org.joda.time.DurationField durationField9 = gJChronology2.weekyears();
        java.lang.String str10 = gJChronology2.toString();
        org.joda.time.DateTimeField dateTimeField11 = gJChronology2.hourOfHalfday();
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        long long15 = gJChronology2.add(readablePeriod12, 4492800000L, (-102228));
        org.joda.time.DurationField durationField16 = gJChronology2.months();
        int int19 = durationField16.getDifference(2203937527684200000L, 399686400000L);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(durationField9);
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "GJChronology[+00:00:00.052]" + "'", str10, "GJChronology[+00:00:00.052]");
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 4492800000L + "'", long15 == 4492800000L);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 838079848 + "'", int19 == 838079848);
    }

    @Test
    public void test19185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19185");
        java.util.Locale locale2 = new java.util.Locale("cinese (Taiwan)", "DurationField[weekyears]");
        java.util.Locale locale4 = java.util.Locale.forLanguageTag("hi!");
        java.lang.String str5 = locale4.toLanguageTag();
        java.lang.String str6 = locale4.getCountry();
        java.util.Locale locale7 = java.util.Locale.ROOT;
        java.util.Locale locale8 = java.util.Locale.GERMAN;
        java.lang.String str9 = locale8.getDisplayCountry();
        java.lang.String str10 = locale7.getDisplayLanguage(locale8);
        java.lang.String str11 = locale4.getDisplayVariant(locale7);
        java.lang.String str12 = locale2.getDisplayVariant(locale4);
        java.lang.String str13 = locale4.getDisplayLanguage();
        java.lang.String str14 = locale4.getDisplayVariant();
        org.junit.Assert.assertEquals(locale2.toString(), "cinese (taiwan)_DURATIONFIELD[WEEKYEARS]");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "und" + "'", str5, "und");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "de");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
    }

    @Test
    public void test19186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19186");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = gJChronology2.halfdays();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.millisOfDay();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology2.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology2.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField8 = gJChronology2.weekOfWeekyear();
        org.joda.time.Chronology chronology9 = gJChronology2.withUTC();
        org.joda.time.DateTimeField dateTimeField10 = gJChronology2.minuteOfHour();
        org.joda.time.DateTimeZone dateTimeZone11 = gJChronology2.getZone();
        // The following exception was thrown during execution in test generation
        try {
            long long19 = gJChronology2.getDateTimeMillis((-283655), (-2106656), (-102228), (-93), (-9200), 8, (-15));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -93 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
    }

    @Test
    public void test19187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19187");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = gJChronology2.halfdays();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.millisOfDay();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.minuteOfDay();
        org.joda.time.DurationField durationField6 = gJChronology2.centuries();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology2.dayOfYear();
        java.lang.String str8 = gJChronology2.toString();
        org.joda.time.DateTimeField dateTimeField9 = gJChronology2.dayOfYear();
        org.joda.time.DateTimeField dateTimeField10 = gJChronology2.dayOfMonth();
        org.joda.time.DurationField durationField11 = gJChronology2.years();
        org.joda.time.DateTimeField dateTimeField12 = gJChronology2.minuteOfHour();
        java.util.TimeZone timeZone13 = null;
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forTimeZone(timeZone13);
        org.joda.time.chrono.GJChronology gJChronology15 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone14);
        org.joda.time.DurationField durationField16 = gJChronology15.halfdays();
        long long20 = gJChronology15.add((long) 'a', (-1L), (int) (short) 0);
        boolean boolean22 = gJChronology15.equals((java.lang.Object) 0);
        org.joda.time.DateTimeField dateTimeField23 = gJChronology15.dayOfMonth();
        org.joda.time.DurationField durationField24 = gJChronology15.days();
        long long28 = gJChronology15.add((long) '4', 432000000L, (int) (short) 0);
        org.joda.time.DurationField durationField29 = gJChronology15.years();
        java.util.TimeZone timeZone30 = null;
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forTimeZone(timeZone30);
        java.lang.String str33 = dateTimeZone31.getNameKey((long) 100);
        boolean boolean34 = dateTimeZone31.isFixed();
        java.lang.String str35 = dateTimeZone31.toString();
        boolean boolean37 = dateTimeZone31.isStandardOffset((long) (byte) 0);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone31);
        org.joda.time.Chronology chronology39 = gJChronology15.withZone(dateTimeZone31);
        org.joda.time.Chronology chronology40 = gJChronology2.withZone(dateTimeZone31);
        org.joda.time.DateTimeField dateTimeField41 = chronology40.monthOfYear();
        org.joda.time.ReadablePeriod readablePeriod42 = null;
        long long45 = chronology40.add(readablePeriod42, 259200006000000L, (-313));
        // The following exception was thrown during execution in test generation
        try {
            long long50 = chronology40.getDateTimeMillis(1869, 828, 8, 52574046);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 828 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "GJChronology[+00:00:00.052]" + "'", str8, "GJChronology[+00:00:00.052]");
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(gJChronology15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 97L + "'", long20 == 97L);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 52L + "'", long28 == 52L);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertNotNull(dateTimeZone31);
// flaky:         org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str35 + "' != '" + "+00:00:00.052" + "'", str35, "+00:00:00.052");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 259200006000000L + "'", long45 == 259200006000000L);
    }

    @Test
    public void test19188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19188");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = gJChronology2.halfdays();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.millisOfDay();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology2.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone7 = gJChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField8 = gJChronology2.millisOfSecond();
        org.joda.time.DurationField durationField9 = gJChronology2.days();
        org.joda.time.DurationField durationField10 = gJChronology2.seconds();
        org.joda.time.DateTimeZone dateTimeZone11 = gJChronology2.getZone();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
    }

    @Test
    public void test19189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19189");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        int int3 = dateTimeZone1.getOffsetFromLocal((-2208729599948L));
        java.util.TimeZone timeZone4 = null;
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forTimeZone(timeZone4);
        org.joda.time.chrono.GJChronology gJChronology6 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone5);
        org.joda.time.DurationField durationField7 = gJChronology6.halfdays();
        long long11 = gJChronology6.add((long) 'a', (-1L), (int) (short) 0);
        boolean boolean13 = gJChronology6.equals((java.lang.Object) 0);
        org.joda.time.DateTimeField dateTimeField14 = gJChronology6.dayOfMonth();
        org.joda.time.DurationField durationField15 = gJChronology6.days();
        org.joda.time.DateTimeField dateTimeField16 = gJChronology6.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField17 = gJChronology6.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField18 = gJChronology6.hourOfDay();
        org.joda.time.DateTimeField dateTimeField19 = gJChronology6.dayOfMonth();
        boolean boolean20 = dateTimeZone1.equals((java.lang.Object) gJChronology6);
        org.joda.time.DurationField durationField21 = gJChronology6.seconds();
        org.joda.time.DateTimeField dateTimeField22 = gJChronology6.clockhourOfDay();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(gJChronology6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 97L + "'", long11 == 97L);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
    }

    @Test
    public void test19190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19190");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forID("deu");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The datetime zone id 'deu' is not recognised");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test19191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19191");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = gJChronology2.halfdays();
        long long7 = gJChronology2.add((long) 'a', (-1L), (int) (short) 0);
        long long11 = gJChronology2.add((long) (byte) 0, (long) '4', 100);
        org.joda.time.DateTimeField dateTimeField12 = gJChronology2.minuteOfHour();
        org.joda.time.DurationField durationField13 = gJChronology2.hours();
        org.joda.time.DateTimeField dateTimeField14 = gJChronology2.hourOfHalfday();
        java.util.TimeZone timeZone15 = null;
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forTimeZone(timeZone15);
        org.joda.time.chrono.GJChronology gJChronology17 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone16);
        java.util.Locale locale19 = new java.util.Locale("hi!");
        java.lang.String str20 = locale19.getCountry();
        java.util.Locale locale21 = java.util.Locale.getDefault();
        java.lang.String str22 = locale21.getDisplayName();
        java.lang.String str23 = locale19.getDisplayScript(locale21);
        boolean boolean24 = dateTimeZone16.equals((java.lang.Object) locale21);
        org.joda.time.Chronology chronology25 = gJChronology2.withZone(dateTimeZone16);
        org.joda.time.DurationField durationField26 = chronology25.hours();
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        long long30 = chronology25.add(readablePeriod27, 120L, 73050);
        org.joda.time.DateTimeField dateTimeField31 = chronology25.yearOfEra();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 97L + "'", long7 == 97L);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 5200L + "'", long11 == 5200L);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(gJChronology17);
        org.junit.Assert.assertEquals(locale19.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "it");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "italiano" + "'", str22, "italiano");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 120L + "'", long30 == 120L);
        org.junit.Assert.assertNotNull(dateTimeField31);
    }

    @Test
    public void test19192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19192");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap3 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList4 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, strMap3);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap5 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList6 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList4, strMap5);
        java.util.Locale locale7 = java.util.Locale.ENGLISH;
        java.lang.String str8 = locale7.getDisplayScript();
        java.lang.String str9 = locale7.getDisplayVariant();
        java.util.Set<java.lang.String> strSet10 = locale7.getUnicodeLocaleAttributes();
        java.util.Locale.LanguageRange[] languageRangeArray11 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList12 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList12, languageRangeArray11);
        java.util.Set<java.lang.String> strSet14 = org.joda.time.DateTimeZone.getAvailableIDs();
        java.lang.String str15 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList12, (java.util.Collection<java.lang.String>) strSet14);
        java.util.Locale locale16 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale17 = java.util.Locale.ENGLISH;
        java.lang.String str18 = locale16.getDisplayLanguage(locale17);
        java.util.Locale locale19 = java.util.Locale.CANADA;
        java.lang.String str20 = locale19.getISO3Language();
        java.lang.String str21 = locale16.getDisplayVariant(locale19);
        java.util.Set<java.lang.String> strSet22 = locale16.getUnicodeLocaleKeys();
        java.util.Locale.FilteringMode filteringMode23 = java.util.Locale.FilteringMode.AUTOSELECT_FILTERING;
        java.util.List<java.lang.String> strList24 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList12, (java.util.Collection<java.lang.String>) strSet22, filteringMode23);
        java.util.List<java.lang.String> strList25 = java.util.Locale.filterTags(languageRangeList4, (java.util.Collection<java.lang.String>) strSet10, filteringMode23);
        java.util.Locale.LanguageRange[] languageRangeArray26 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList27 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList27, languageRangeArray26);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap29 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList30 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList27, strMap29);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap31 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList32 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList30, strMap31);
        java.util.Locale locale33 = java.util.Locale.CHINA;
        java.lang.String str34 = locale33.toLanguageTag();
        java.util.Set<java.lang.String> strSet35 = locale33.getUnicodeLocaleAttributes();
        java.lang.String str36 = java.util.Locale.lookupTag(languageRangeList32, (java.util.Collection<java.lang.String>) strSet35);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap37 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList38 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList32, strMap37);
        java.util.Locale.LanguageRange[] languageRangeArray39 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList40 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList40, languageRangeArray39);
        java.util.Locale.LanguageRange[] languageRangeArray42 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList43 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList43, languageRangeArray42);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap45 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList46 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList43, strMap45);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap47 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList48 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList46, strMap47);
        java.util.Locale.LanguageRange[] languageRangeArray49 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList50 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean51 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList50, languageRangeArray49);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap52 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList53 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList50, strMap52);
        java.lang.String[] strArray57 = new java.lang.String[] { "English", "English", "hi!" };
        java.util.ArrayList<java.lang.String> strList58 = new java.util.ArrayList<java.lang.String>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList58, strArray57);
        java.util.List<java.lang.String> strList60 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList50, (java.util.Collection<java.lang.String>) strList58);
        java.util.Locale.FilteringMode filteringMode61 = null;
        java.util.List<java.lang.String> strList62 = java.util.Locale.filterTags(languageRangeList48, (java.util.Collection<java.lang.String>) strList58, filteringMode61);
        java.util.Locale.FilteringMode filteringMode63 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.lang.String> strList64 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList40, (java.util.Collection<java.lang.String>) strList62, filteringMode63);
        java.util.Collection<java.util.Locale> localeCollection65 = null;
        java.util.Locale.LanguageRange[] languageRangeArray66 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList67 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean68 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList67, languageRangeArray66);
        java.util.Set<java.lang.String> strSet69 = org.joda.time.DateTimeZone.getAvailableIDs();
        java.lang.String str70 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList67, (java.util.Collection<java.lang.String>) strSet69);
        java.util.Locale locale71 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale72 = java.util.Locale.ENGLISH;
        java.lang.String str73 = locale71.getDisplayLanguage(locale72);
        java.util.Locale locale74 = java.util.Locale.CANADA;
        java.lang.String str75 = locale74.getISO3Language();
        java.lang.String str76 = locale71.getDisplayVariant(locale74);
        java.util.Set<java.lang.String> strSet77 = locale71.getUnicodeLocaleKeys();
        java.util.Locale.FilteringMode filteringMode78 = java.util.Locale.FilteringMode.AUTOSELECT_FILTERING;
        java.util.List<java.lang.String> strList79 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList67, (java.util.Collection<java.lang.String>) strSet77, filteringMode78);
        java.util.List<java.util.Locale> localeList80 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList40, localeCollection65, filteringMode78);
        java.util.List<java.util.Locale> localeList81 = java.util.Locale.filter(languageRangeList32, (java.util.Collection<java.util.Locale>) localeList80);
        java.util.List<java.util.Locale> localeList82 = java.util.Locale.filter(languageRangeList4, (java.util.Collection<java.util.Locale>) localeList80);
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(languageRangeList4);
        org.junit.Assert.assertNotNull(languageRangeList6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "en");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(strSet10);
        org.junit.Assert.assertNotNull(languageRangeArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(strSet14);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "en");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Chinese" + "'", str18, "Chinese");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "eng" + "'", str20, "eng");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(strSet22);
        org.junit.Assert.assertTrue("'" + filteringMode23 + "' != '" + java.util.Locale.FilteringMode.AUTOSELECT_FILTERING + "'", filteringMode23.equals(java.util.Locale.FilteringMode.AUTOSELECT_FILTERING));
        org.junit.Assert.assertNotNull(strList24);
        org.junit.Assert.assertNotNull(strList25);
        org.junit.Assert.assertNotNull(languageRangeArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(languageRangeList30);
        org.junit.Assert.assertNotNull(languageRangeList32);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "zh-CN" + "'", str34, "zh-CN");
        org.junit.Assert.assertNotNull(strSet35);
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertNotNull(languageRangeList38);
        org.junit.Assert.assertNotNull(languageRangeArray39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(languageRangeArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(languageRangeList46);
        org.junit.Assert.assertNotNull(languageRangeList48);
        org.junit.Assert.assertNotNull(languageRangeArray49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(languageRangeList53);
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(strList60);
        org.junit.Assert.assertNotNull(strList62);
        org.junit.Assert.assertTrue("'" + filteringMode63 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode63.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(strList64);
        org.junit.Assert.assertNotNull(languageRangeArray66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(strSet69);
        org.junit.Assert.assertNull(str70);
        org.junit.Assert.assertNotNull(locale71);
        org.junit.Assert.assertEquals(locale71.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale72);
        org.junit.Assert.assertEquals(locale72.toString(), "en");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "Chinese" + "'", str73, "Chinese");
        org.junit.Assert.assertNotNull(locale74);
        org.junit.Assert.assertEquals(locale74.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "eng" + "'", str75, "eng");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "" + "'", str76, "");
        org.junit.Assert.assertNotNull(strSet77);
        org.junit.Assert.assertTrue("'" + filteringMode78 + "' != '" + java.util.Locale.FilteringMode.AUTOSELECT_FILTERING + "'", filteringMode78.equals(java.util.Locale.FilteringMode.AUTOSELECT_FILTERING));
        org.junit.Assert.assertNotNull(strList79);
        org.junit.Assert.assertNotNull(localeList80);
        org.junit.Assert.assertNotNull(localeList81);
        org.junit.Assert.assertNotNull(localeList82);
    }

    @Test
    public void test19193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19193");
        java.util.Locale locale0 = java.util.Locale.ROOT;
        java.util.Locale locale1 = java.util.Locale.ITALIAN;
        java.lang.String str2 = locale0.getDisplayName(locale1);
        java.util.Locale locale3 = java.util.Locale.ENGLISH;
        java.lang.String str5 = locale3.getUnicodeLocaleType("zh");
        java.lang.String str6 = locale0.getDisplayCountry(locale3);
        java.util.Locale locale7 = java.util.Locale.ITALIAN;
        java.util.Locale locale8 = locale7.stripExtensions();
        java.lang.String str9 = locale7.getDisplayVariant();
        java.util.Set<java.lang.Character> charSet10 = locale7.getExtensionKeys();
        java.lang.String str11 = locale0.getDisplayCountry(locale7);
        java.util.Locale locale12 = java.util.Locale.GERMANY;
        java.lang.String str13 = locale12.getDisplayLanguage();
        java.util.Locale locale14 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str15 = locale12.getDisplayVariant(locale14);
        java.lang.String str16 = locale0.getDisplayLanguage(locale14);
        java.lang.String str17 = locale0.getVariant();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "it");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "en");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "it");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "it");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(charSet10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "tedesco" + "'", str13, "tedesco");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
    }

    @Test
    public void test19194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19194");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forTimeZone(timeZone2);
        org.joda.time.chrono.GJChronology gJChronology4 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone3);
        org.joda.time.DateTimeField dateTimeField5 = gJChronology4.millisOfSecond();
        int int6 = instant1.get(dateTimeField5);
        boolean boolean7 = instant1.isEqualNow();
        org.joda.time.Instant instant8 = instant1.toInstant();
        org.joda.time.Instant instant10 = new org.joda.time.Instant(52L);
        boolean boolean11 = instant10.isEqualNow();
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.Instant instant13 = instant10.plus(readableDuration12);
        org.joda.time.Instant instant15 = new org.joda.time.Instant(52L);
        org.joda.time.Instant instant17 = instant15.withMillis((long) 'u');
        boolean boolean18 = instant10.isBefore((org.joda.time.ReadableInstant) instant15);
        org.joda.time.ReadableInstant readableInstant19 = null;
        boolean boolean20 = instant10.isEqual(readableInstant19);
        org.joda.time.Instant instant22 = instant10.plus(85905030L);
        boolean boolean23 = instant8.isAfter((org.joda.time.ReadableInstant) instant10);
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = null;
        boolean boolean25 = instant8.isSupported(dateTimeFieldType24);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(gJChronology4);
        org.junit.Assert.assertNotNull(dateTimeField5);
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 104 + "'", int6 == 104);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(instant8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(instant13);
        org.junit.Assert.assertNotNull(instant17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(instant22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test19195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19195");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField3 = gJChronology2.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.minuteOfHour();
        org.joda.time.DurationField durationField6 = gJChronology2.halfdays();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology2.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField8 = gJChronology2.year();
        org.joda.time.DateTimeField dateTimeField9 = gJChronology2.minuteOfHour();
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        long long13 = gJChronology2.add(readablePeriod10, (-7077547900L), 4);
        org.joda.time.DurationField durationField14 = gJChronology2.halfdays();
        // The following exception was thrown during execution in test generation
        try {
            long long19 = gJChronology2.getDateTimeMillis(83, 236785, 784, 784);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 236785 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-7077547900L) + "'", long13 == (-7077547900L));
        org.junit.Assert.assertNotNull(durationField14);
    }

    @Test
    public void test19196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19196");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        java.util.Locale locale4 = new java.util.Locale("hi!");
        java.lang.String str5 = locale4.getCountry();
        java.util.Locale locale6 = java.util.Locale.getDefault();
        java.lang.String str7 = locale6.getDisplayName();
        java.lang.String str8 = locale4.getDisplayScript(locale6);
        boolean boolean9 = dateTimeZone1.equals((java.lang.Object) locale6);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetMillis((int) '4');
        java.util.TimeZone timeZone12 = dateTimeZone11.toTimeZone();
        long long15 = dateTimeZone11.adjustOffset((long) 0, false);
        int int17 = dateTimeZone11.getOffsetFromLocal((-26438399999L));
        long long19 = dateTimeZone1.getMillisKeepLocal(dateTimeZone11, (long) (byte) 10);
        int int21 = dateTimeZone1.getOffsetFromLocal(715369017600100L);
        java.lang.String str22 = dateTimeZone1.toString();
        org.joda.time.chrono.GJChronology gJChronology23 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        long long26 = dateTimeZone1.convertLocalToUTC(97L, false);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertEquals(locale4.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "it");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "italiano" + "'", str7, "italiano");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(timeZone12);
        org.junit.Assert.assertEquals(timeZone12.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 52 + "'", int17 == 52);
// flaky:         org.junit.Assert.assertTrue("'" + long19 + "' != '" + 10L + "'", long19 == 10L);
// flaky:         org.junit.Assert.assertTrue("'" + int21 + "' != '" + 52 + "'", int21 == 52);
// flaky:         org.junit.Assert.assertEquals("'" + str22 + "' != '" + "+00:00:00.052" + "'", str22, "+00:00:00.052");
        org.junit.Assert.assertNotNull(gJChronology23);
// flaky:         org.junit.Assert.assertTrue("'" + long26 + "' != '" + 45L + "'", long26 == 45L);
    }

    @Test
    public void test19197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19197");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        int int3 = dateTimeZone1.getOffsetFromLocal((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(0, (int) (short) 10);
        long long8 = dateTimeZone1.getMillisKeepLocal(dateTimeZone6, (-61827926399999L));
        java.util.TimeZone timeZone9 = null;
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forTimeZone(timeZone9);
        java.lang.String str12 = dateTimeZone10.getNameKey((long) 100);
        boolean boolean13 = dateTimeZone10.isFixed();
        org.joda.time.chrono.GJChronology gJChronology14 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone10);
        long long16 = dateTimeZone10.convertUTCToLocal(5200L);
        java.util.Locale.LanguageRange[] languageRangeArray17 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList18 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList18, languageRangeArray17);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap20 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList21 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList18, strMap20);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap22 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList23 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList21, strMap22);
        java.util.Locale.LanguageRange[] languageRangeArray24 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList25 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList25, languageRangeArray24);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap27 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList28 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList25, strMap27);
        java.lang.String[] strArray32 = new java.lang.String[] { "English", "English", "hi!" };
        java.util.ArrayList<java.lang.String> strList33 = new java.util.ArrayList<java.lang.String>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList33, strArray32);
        java.util.List<java.lang.String> strList35 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList25, (java.util.Collection<java.lang.String>) strList33);
        java.util.Locale.FilteringMode filteringMode36 = null;
        java.util.List<java.lang.String> strList37 = java.util.Locale.filterTags(languageRangeList23, (java.util.Collection<java.lang.String>) strList33, filteringMode36);
        java.util.Locale.LanguageRange[] languageRangeArray38 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList39 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList39, languageRangeArray38);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap41 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList42 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList39, strMap41);
        java.util.Locale.LanguageRange[] languageRangeArray43 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList44 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList44, languageRangeArray43);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap46 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList47 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList44, strMap46);
        java.lang.String[] strArray51 = new java.lang.String[] { "English", "English", "hi!" };
        java.util.ArrayList<java.lang.String> strList52 = new java.util.ArrayList<java.lang.String>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList52, strArray51);
        java.util.List<java.lang.String> strList54 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList44, (java.util.Collection<java.lang.String>) strList52);
        java.util.List<java.lang.String> strList55 = java.util.Locale.filterTags(languageRangeList42, (java.util.Collection<java.lang.String>) strList54);
        java.util.List<java.lang.String> strList56 = java.util.Locale.filterTags(languageRangeList23, (java.util.Collection<java.lang.String>) strList55);
        java.util.Locale.LanguageRange[] languageRangeArray57 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList58 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList58, languageRangeArray57);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap60 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList61 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList58, strMap60);
        java.lang.String[] strArray65 = new java.lang.String[] { "English", "English", "hi!" };
        java.util.ArrayList<java.lang.String> strList66 = new java.util.ArrayList<java.lang.String>();
        boolean boolean67 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList66, strArray65);
        java.util.List<java.lang.String> strList68 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList58, (java.util.Collection<java.lang.String>) strList66);
        java.util.List<java.lang.String> strList69 = java.util.Locale.filterTags(languageRangeList23, (java.util.Collection<java.lang.String>) strList68);
        boolean boolean70 = dateTimeZone10.equals((java.lang.Object) languageRangeList23);
        long long72 = dateTimeZone1.getMillisKeepLocal(dateTimeZone10, (long) 'u');
        org.joda.time.LocalDateTime localDateTime73 = null;
        boolean boolean74 = dateTimeZone10.isLocalDateTimeGap(localDateTime73);
        java.lang.String str76 = dateTimeZone10.getShortName((long) 104);
        org.joda.time.Instant instant78 = new org.joda.time.Instant(52L);
        boolean boolean79 = instant78.isEqualNow();
        org.joda.time.Instant instant81 = new org.joda.time.Instant(52L);
        org.joda.time.Instant instant83 = instant81.withMillis((long) 'u');
        boolean boolean84 = instant78.isAfter((org.joda.time.ReadableInstant) instant81);
        org.joda.time.chrono.GJChronology gJChronology85 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone10, (org.joda.time.ReadableInstant) instant78);
        org.joda.time.DurationField durationField86 = gJChronology85.weeks();
        long long89 = durationField86.getMillis((int) '#', (long) (-166));
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 52 + "'", int3 == 52);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-61827926999947L) + "'", long8 == (-61827926999947L));
        org.junit.Assert.assertNotNull(dateTimeZone10);
// flaky:         org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(gJChronology14);
// flaky:         org.junit.Assert.assertTrue("'" + long16 + "' != '" + 5252L + "'", long16 == 5252L);
        org.junit.Assert.assertNotNull(languageRangeArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(languageRangeList21);
        org.junit.Assert.assertNotNull(languageRangeList23);
        org.junit.Assert.assertNotNull(languageRangeArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(languageRangeList28);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(strList35);
        org.junit.Assert.assertNotNull(strList37);
        org.junit.Assert.assertNotNull(languageRangeArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(languageRangeList42);
        org.junit.Assert.assertNotNull(languageRangeArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(languageRangeList47);
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(strList54);
        org.junit.Assert.assertNotNull(strList55);
        org.junit.Assert.assertNotNull(strList56);
        org.junit.Assert.assertNotNull(languageRangeArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(languageRangeList61);
        org.junit.Assert.assertNotNull(strArray65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(strList68);
        org.junit.Assert.assertNotNull(strList69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + long72 + "' != '" + 117L + "'", long72 == 117L);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str76 + "' != '" + "+00:00:00.052" + "'", str76, "+00:00:00.052");
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(instant83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(gJChronology85);
        org.junit.Assert.assertNotNull(durationField86);
        org.junit.Assert.assertTrue("'" + long89 + "' != '" + 21168000000L + "'", long89 == 21168000000L);
    }

    @Test
    public void test19198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19198");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField3 = gJChronology2.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.weekyearOfCentury();
        org.joda.time.Instant instant5 = gJChronology2.getGregorianCutover();
        org.joda.time.Instant instant7 = instant5.withMillis(0L);
        org.joda.time.Instant instant9 = instant7.minus((long) (-1916));
        org.joda.time.Instant instant10 = instant9.toInstant();
        org.joda.time.DateTime dateTime11 = instant9.toDateTime();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(instant5);
        org.junit.Assert.assertNotNull(instant7);
        org.junit.Assert.assertNotNull(instant9);
        org.junit.Assert.assertNotNull(instant10);
        org.junit.Assert.assertNotNull(dateTime11);
    }

    @Test
    public void test19199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19199");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = gJChronology2.halfdays();
        long long7 = gJChronology2.add((long) 'a', (-1L), (int) (short) 0);
        boolean boolean9 = gJChronology2.equals((java.lang.Object) 0);
        org.joda.time.DateTimeField dateTimeField10 = gJChronology2.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField11 = gJChronology2.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField12 = gJChronology2.clockhourOfDay();
        long long17 = gJChronology2.getDateTimeMillis(10, (int) (short) 10, 4, (int) (byte) 1);
        org.joda.time.Instant instant18 = gJChronology2.getGregorianCutover();
        org.joda.time.DateTimeField dateTimeField19 = gJChronology2.yearOfEra();
        org.joda.time.DurationField durationField20 = gJChronology2.minutes();
        org.joda.time.DurationField durationField21 = gJChronology2.centuries();
        java.lang.String str22 = gJChronology2.toString();
        org.joda.time.DateTimeField dateTimeField23 = gJChronology2.weekyear();
        org.joda.time.DateTimeField dateTimeField24 = gJChronology2.dayOfMonth();
        org.joda.time.Chronology chronology25 = gJChronology2.withUTC();
        org.joda.time.DateTimeField dateTimeField26 = chronology25.minuteOfDay();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 97L + "'", long7 == 97L);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
// flaky:         org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-61827926400051L) + "'", long17 == (-61827926400051L));
        org.junit.Assert.assertNotNull(instant18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(durationField21);
// flaky:         org.junit.Assert.assertEquals("'" + str22 + "' != '" + "GJChronology[+00:00:00.052]" + "'", str22, "GJChronology[+00:00:00.052]");
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTimeField26);
    }

    @Test
    public void test19200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19200");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forTimeZone(timeZone2);
        org.joda.time.chrono.GJChronology gJChronology4 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone3);
        org.joda.time.DateTimeField dateTimeField5 = gJChronology4.millisOfSecond();
        int int6 = instant1.get(dateTimeField5);
        org.joda.time.Instant instant8 = instant1.plus(0L);
        long long9 = instant1.getMillis();
        org.joda.time.Instant instant11 = new org.joda.time.Instant(52L);
        boolean boolean12 = instant11.isEqualNow();
        java.lang.String str13 = instant11.toString();
        java.lang.String str14 = instant11.toString();
        org.joda.time.Instant instant16 = new org.joda.time.Instant(52L);
        boolean boolean17 = instant16.isEqualNow();
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.Instant instant19 = instant16.plus(readableDuration18);
        boolean boolean20 = instant11.isBefore((org.joda.time.ReadableInstant) instant19);
        org.joda.time.ReadableDuration readableDuration21 = null;
        org.joda.time.Instant instant22 = instant19.minus(readableDuration21);
        boolean boolean23 = instant1.isAfter((org.joda.time.ReadableInstant) instant19);
        boolean boolean25 = instant1.isBefore(192102945300000L);
        boolean boolean27 = instant1.isEqual(14452100L);
        org.joda.time.ReadableDuration readableDuration28 = null;
        org.joda.time.Instant instant30 = instant1.withDurationAdded(readableDuration28, 43081);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(gJChronology4);
        org.junit.Assert.assertNotNull(dateTimeField5);
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 104 + "'", int6 == 104);
        org.junit.Assert.assertNotNull(instant8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 52L + "'", long9 == 52L);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "1970-01-01T00:00:00.052Z" + "'", str13, "1970-01-01T00:00:00.052Z");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "1970-01-01T00:00:00.052Z" + "'", str14, "1970-01-01T00:00:00.052Z");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(instant19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(instant22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(instant30);
    }

    @Test
    public void test19201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19201");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = gJChronology2.halfdays();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.millisOfDay();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.minuteOfDay();
        org.joda.time.DurationField durationField6 = gJChronology2.centuries();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology2.dayOfYear();
        java.lang.String str8 = gJChronology2.toString();
        org.joda.time.DateTimeField dateTimeField9 = gJChronology2.dayOfYear();
        org.joda.time.DateTimeField dateTimeField10 = gJChronology2.dayOfMonth();
        org.joda.time.DurationField durationField11 = gJChronology2.years();
        org.joda.time.DateTimeField dateTimeField12 = gJChronology2.dayOfYear();
        org.joda.time.DurationField durationField13 = gJChronology2.weeks();
        int int16 = durationField13.getDifference((-9238291L), (-201360000L));
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "GJChronology[+00:00:00.052]" + "'", str8, "GJChronology[+00:00:00.052]");
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
    }

    @Test
    public void test19202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19202");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap1 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList2 = java.util.Locale.LanguageRange.parse("French", strMap1);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap3 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList4 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList2, strMap3);
        org.junit.Assert.assertNotNull(languageRangeList2);
        org.junit.Assert.assertNotNull(languageRangeList4);
    }

    @Test
    public void test19203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19203");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = gJChronology2.halfdays();
        long long7 = gJChronology2.add((long) 'a', (-1L), (int) (short) 0);
        boolean boolean9 = gJChronology2.equals((java.lang.Object) 0);
        org.joda.time.DateTimeField dateTimeField10 = gJChronology2.dayOfMonth();
        org.joda.time.DurationField durationField11 = gJChronology2.days();
        org.joda.time.DateTimeField dateTimeField12 = gJChronology2.millisOfSecond();
        org.joda.time.DurationField durationField13 = gJChronology2.millis();
        org.joda.time.DateTimeField dateTimeField14 = gJChronology2.hourOfHalfday();
        org.joda.time.DurationField durationField15 = gJChronology2.years();
        org.joda.time.DateTimeField dateTimeField16 = gJChronology2.minuteOfHour();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 97L + "'", long7 == 97L);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
    }

    @Test
    public void test19204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19204");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = gJChronology2.halfdays();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.millisOfDay();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.minuteOfDay();
        org.joda.time.DurationField durationField6 = gJChronology2.centuries();
        int int7 = gJChronology2.getMinimumDaysInFirstWeek();
        org.joda.time.DateTimeField dateTimeField8 = gJChronology2.weekyear();
        org.joda.time.DateTimeField dateTimeField9 = gJChronology2.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField10 = gJChronology2.centuryOfEra();
        org.joda.time.DurationField durationField11 = gJChronology2.millis();
        int int13 = durationField11.getValue((long) (short) 10);
        long long15 = durationField11.getValueAsLong(10220536184000L);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 4 + "'", int7 == 4);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 10 + "'", int13 == 10);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 10220536184000L + "'", long15 == 10220536184000L);
    }

    @Test
    public void test19205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19205");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = gJChronology2.halfdays();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.millisOfDay();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.minuteOfDay();
        org.joda.time.DurationField durationField6 = gJChronology2.centuries();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology2.dayOfYear();
        java.lang.String str8 = gJChronology2.toString();
        org.joda.time.DurationField durationField9 = gJChronology2.years();
        org.joda.time.DateTimeField dateTimeField10 = gJChronology2.yearOfEra();
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(0, (int) (short) 10);
        org.joda.time.Chronology chronology14 = gJChronology2.withZone(dateTimeZone13);
        org.joda.time.DurationField durationField15 = gJChronology2.years();
        org.joda.time.DateTimeField dateTimeField16 = gJChronology2.hourOfDay();
        org.joda.time.DateTimeField dateTimeField17 = gJChronology2.millisOfDay();
        org.joda.time.DateTimeField dateTimeField18 = gJChronology2.millisOfSecond();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "GJChronology[+00:00:00.052]" + "'", str8, "GJChronology[+00:00:00.052]");
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
    }

    @Test
    public void test19206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19206");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clear();
        java.util.Locale.Builder builder3 = builder1.removeUnicodeLocaleAttribute("und");
        java.util.Locale.Builder builder4 = builder3.clearExtensions();
        java.util.Locale.Builder builder6 = builder4.setLanguage("de");
        java.util.Locale.Builder builder7 = builder4.clear();
        java.util.Locale.Builder builder9 = builder7.setVariant("");
        java.util.Locale.Builder builder11 = builder7.setLanguageTag("it");
        java.util.Locale locale12 = java.util.Locale.CHINESE;
        boolean boolean13 = locale12.hasExtensions();
        java.lang.String str15 = locale12.getExtension('a');
        java.util.Locale.Builder builder16 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder17 = builder16.clear();
        java.util.Locale.Builder builder19 = builder17.removeUnicodeLocaleAttribute("und");
        java.util.Locale.Builder builder20 = builder19.clearExtensions();
        java.util.Locale.Builder builder21 = builder20.clearExtensions();
        java.util.Locale locale22 = builder20.build();
        java.lang.String str23 = locale22.getDisplayVariant();
        java.lang.String str24 = locale12.getDisplayCountry(locale22);
        java.lang.String str25 = locale22.getDisplayVariant();
        java.util.Locale.Builder builder26 = builder7.setLocale(locale22);
        java.util.Locale.Builder builder28 = builder7.setLanguageTag("halfdays");
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "zh");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
    }

    @Test
    public void test19207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19207");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        java.util.Locale locale4 = new java.util.Locale("hi!");
        java.lang.String str5 = locale4.getCountry();
        java.util.Locale locale6 = java.util.Locale.getDefault();
        java.lang.String str7 = locale6.getDisplayName();
        java.lang.String str8 = locale4.getDisplayScript(locale6);
        boolean boolean9 = dateTimeZone1.equals((java.lang.Object) locale6);
        int int11 = dateTimeZone1.getOffsetFromLocal((long) (short) 10);
        java.util.TimeZone timeZone12 = null;
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forTimeZone(timeZone12);
        org.joda.time.chrono.GJChronology gJChronology14 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone13);
        org.joda.time.DateTimeField dateTimeField15 = gJChronology14.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField16 = gJChronology14.weekyearOfCentury();
        org.joda.time.Instant instant17 = gJChronology14.getGregorianCutover();
        org.joda.time.Instant instant19 = instant17.withMillis(0L);
        org.joda.time.Instant instant21 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone22 = null;
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        org.joda.time.chrono.GJChronology gJChronology24 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone23);
        org.joda.time.DateTimeField dateTimeField25 = gJChronology24.millisOfSecond();
        int int26 = instant21.get(dateTimeField25);
        org.joda.time.Instant instant28 = instant21.plus(0L);
        int int29 = instant19.compareTo((org.joda.time.ReadableInstant) instant28);
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = null;
        boolean boolean31 = instant28.isSupported(dateTimeFieldType30);
        int int32 = dateTimeZone1.getOffset((org.joda.time.ReadableInstant) instant28);
        boolean boolean34 = instant28.isAfter(1000L);
        org.joda.time.Instant instant35 = instant28.toInstant();
        org.joda.time.Instant instant37 = instant28.minus(3600000L);
        java.util.Date date38 = instant28.toDate();
        org.joda.time.DateTimeZone dateTimeZone39 = instant28.getZone();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertEquals(locale4.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "it");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "italiano" + "'", str7, "italiano");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int11 + "' != '" + 52 + "'", int11 == 52);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(gJChronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(instant17);
        org.junit.Assert.assertNotNull(instant19);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(gJChronology24);
        org.junit.Assert.assertNotNull(dateTimeField25);
// flaky:         org.junit.Assert.assertTrue("'" + int26 + "' != '" + 104 + "'", int26 == 104);
        org.junit.Assert.assertNotNull(instant28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int32 + "' != '" + 52 + "'", int32 == 52);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(instant35);
        org.junit.Assert.assertNotNull(instant37);
        org.junit.Assert.assertNotNull(date38);
        org.junit.Assert.assertEquals(date38.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(dateTimeZone39);
    }

    @Test
    public void test19208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19208");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = gJChronology2.halfdays();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.millisOfDay();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.minuteOfDay();
        org.joda.time.DurationField durationField6 = gJChronology2.centuries();
        int int7 = gJChronology2.getMinimumDaysInFirstWeek();
        org.joda.time.DateTimeField dateTimeField8 = gJChronology2.weekyear();
        org.joda.time.DateTimeField dateTimeField9 = gJChronology2.weekyearOfCentury();
        org.joda.time.DurationField durationField10 = gJChronology2.halfdays();
        org.joda.time.DateTimeField dateTimeField11 = gJChronology2.clockhourOfDay();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.getDefault();
        boolean boolean14 = dateTimeZone12.isStandardOffset(115200000L);
        org.joda.time.chrono.GJChronology gJChronology17 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone12, (long) 10, 4);
        org.joda.time.Chronology chronology18 = gJChronology2.withZone(dateTimeZone12);
        long long21 = dateTimeZone12.adjustOffset(46230843600000L, true);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 4 + "'", int7 == 4);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(gJChronology17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 46230843600000L + "'", long21 == 46230843600000L);
    }

    @Test
    public void test19209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19209");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = gJChronology2.halfdays();
        long long7 = gJChronology2.add((long) 'a', (-1L), (int) (short) 0);
        boolean boolean9 = gJChronology2.equals((java.lang.Object) 0);
        org.joda.time.DateTimeField dateTimeField10 = gJChronology2.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField11 = gJChronology2.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField12 = gJChronology2.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField13 = gJChronology2.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField14 = gJChronology2.secondOfMinute();
        java.util.TimeZone timeZone15 = null;
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forTimeZone(timeZone15);
        java.lang.String str18 = dateTimeZone16.getNameKey((long) 100);
        boolean boolean19 = dateTimeZone16.isFixed();
        long long22 = dateTimeZone16.adjustOffset((long) (short) 10, true);
        int int24 = dateTimeZone16.getOffset(1L);
        org.joda.time.Chronology chronology25 = gJChronology2.withZone(dateTimeZone16);
        org.joda.time.Instant instant26 = gJChronology2.getGregorianCutover();
        java.util.TimeZone timeZone27 = null;
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forTimeZone(timeZone27);
        int int30 = dateTimeZone28.getOffsetFromLocal((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(0, (int) (short) 10);
        long long35 = dateTimeZone28.getMillisKeepLocal(dateTimeZone33, (-61827926399999L));
        boolean boolean36 = dateTimeZone28.isFixed();
        java.lang.String str38 = dateTimeZone28.getNameKey(10412712236785L);
        org.joda.time.DateTime dateTime39 = instant26.toDateTime(dateTimeZone28);
        org.joda.time.Instant instant40 = new org.joda.time.Instant((java.lang.Object) instant26);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 97L + "'", long7 == 97L);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeZone16);
// flaky:         org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 10L + "'", long22 == 10L);
// flaky:         org.junit.Assert.assertTrue("'" + int24 + "' != '" + 52 + "'", int24 == 52);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(instant26);
        org.junit.Assert.assertNotNull(dateTimeZone28);
// flaky:         org.junit.Assert.assertTrue("'" + int30 + "' != '" + 52 + "'", int30 == 52);
        org.junit.Assert.assertNotNull(dateTimeZone33);
// flaky:         org.junit.Assert.assertTrue("'" + long35 + "' != '" + (-61827926999947L) + "'", long35 == (-61827926999947L));
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
// flaky:         org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertNotNull(dateTime39);
    }

    @Test
    public void test19210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19210");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField3 = gJChronology2.yearOfCentury();
        org.joda.time.DurationField durationField4 = gJChronology2.minutes();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.clockhourOfDay();
        org.joda.time.Instant instant6 = gJChronology2.getGregorianCutover();
        org.joda.time.Chronology chronology7 = gJChronology2.withUTC();
        org.joda.time.ReadablePartial readablePartial8 = null;
        int[] intArray14 = new int[] { (-59138), 85904895, 1775006, 720000000, 210 };
        // The following exception was thrown during execution in test generation
        try {
            gJChronology2.validate(readablePartial8, intArray14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(instant6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-59138, 85904895, 1775006, 720000000, 210]");
    }

    @Test
    public void test19211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19211");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Instant instant2 = org.joda.time.Instant.parse("2022-02-11T09:45:37.001Z", dateTimeFormatter1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test19212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19212");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clear();
        java.util.Locale.Builder builder3 = builder1.removeUnicodeLocaleAttribute("und");
        java.util.Locale locale4 = builder3.build();
        java.util.Locale.Builder builder6 = builder3.setLanguage("inglese");
        java.util.Locale.Builder builder9 = builder3.setExtension('u', "Italian");
        java.util.Locale.Builder builder10 = builder3.clearExtensions();
        java.util.Locale.Builder builder13 = builder3.setUnicodeLocaleKeyword("zh", "chinese");
        java.util.Locale locale14 = builder3.build();
        java.util.Locale locale18 = new java.util.Locale("-01:52", "", "Canada");
        java.lang.String str19 = locale18.toLanguageTag();
        java.util.Locale locale20 = java.util.Locale.ITALIAN;
        java.lang.String str21 = locale20.getCountry();
        java.util.Locale locale22 = java.util.Locale.UK;
        java.lang.String str23 = locale22.getDisplayCountry();
        java.util.Set<java.lang.Character> charSet24 = locale22.getExtensionKeys();
        java.util.Locale locale25 = locale22.stripExtensions();
        java.lang.String str26 = locale20.getDisplayVariant(locale25);
        java.lang.String str27 = locale25.getScript();
        java.lang.String str28 = locale18.getDisplayCountry(locale25);
        java.util.Locale.Builder builder29 = builder3.setLocale(locale25);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "");
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "inglese__#u-zh-chinese");
        org.junit.Assert.assertEquals(locale18.toString(), "-01:52__Canada");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "und-Canada" + "'", str19, "und-Canada");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "it");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Regno Unito" + "'", str23, "Regno Unito");
        org.junit.Assert.assertNotNull(charSet24);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(builder29);
    }

    @Test
    public void test19213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19213");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = gJChronology2.halfdays();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.millisOfDay();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.minuteOfDay();
        org.joda.time.DurationField durationField6 = gJChronology2.centuries();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology2.dayOfYear();
        java.lang.String str8 = gJChronology2.toString();
        org.joda.time.DateTimeField dateTimeField9 = gJChronology2.dayOfYear();
        org.joda.time.DateTimeField dateTimeField10 = gJChronology2.minuteOfHour();
        org.joda.time.DurationField durationField11 = gJChronology2.halfdays();
        org.joda.time.DurationField durationField12 = gJChronology2.weeks();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "GJChronology[+00:00:00.052]" + "'", str8, "GJChronology[+00:00:00.052]");
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(durationField12);
    }

    @Test
    public void test19214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19214");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = gJChronology2.halfdays();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.millisOfDay();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.minuteOfDay();
        org.joda.time.DurationField durationField6 = gJChronology2.centuries();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology2.millisOfSecond();
        org.joda.time.Chronology chronology8 = gJChronology2.withUTC();
        org.joda.time.DateTimeField dateTimeField9 = gJChronology2.monthOfYear();
        org.joda.time.DurationField durationField10 = gJChronology2.days();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(durationField10);
    }

    @Test
    public void test19215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19215");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clear();
        java.util.Locale.Builder builder3 = builder1.removeUnicodeLocaleAttribute("und");
        java.util.Locale.Builder builder4 = builder3.clearExtensions();
        java.util.Locale.Builder builder5 = builder4.clearExtensions();
        java.util.Locale locale6 = builder4.build();
        java.util.Locale.Builder builder8 = builder4.setLanguageTag("en-US");
        java.util.Locale.Builder builder10 = builder4.addUnicodeLocaleAttribute("deu");
        java.util.Locale locale11 = builder10.build();
        java.util.Locale.Builder builder14 = builder10.setExtension('x', "de");
        java.util.Locale.Builder builder15 = builder10.clear();
        java.util.Locale.Builder builder17 = builder10.setRegion("en");
        java.util.Locale.Builder builder18 = builder10.clear();
        java.util.Locale.Builder builder19 = builder10.clear();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder22 = builder10.setUnicodeLocaleKeyword("\u7fa9\u5927\u5229\u6587\u7fa9\u5927\u5229)", "english (united states) (WEEKS)");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale keyword key: ???? (???) [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "");
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "en_US_#u-deu");
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder19);
    }

    @Test
    public void test19216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19216");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = gJChronology2.halfdays();
        long long7 = gJChronology2.add((long) 'a', (-1L), (int) (short) 0);
        long long11 = gJChronology2.add((long) (byte) 0, (long) '4', 100);
        org.joda.time.DateTimeField dateTimeField12 = gJChronology2.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField13 = gJChronology2.year();
        org.joda.time.DateTimeField dateTimeField14 = gJChronology2.monthOfYear();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology2.year();
        org.joda.time.DateTimeField dateTimeField16 = gJChronology2.clockhourOfHalfday();
        org.joda.time.DurationField durationField17 = gJChronology2.weekyears();
        org.joda.time.DateTimeField dateTimeField18 = gJChronology2.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField19 = gJChronology2.dayOfYear();
        java.util.TimeZone timeZone20 = null;
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forTimeZone(timeZone20);
        org.joda.time.chrono.GJChronology gJChronology22 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone21);
        org.joda.time.DateTimeField dateTimeField23 = gJChronology22.millisOfSecond();
        org.joda.time.DurationField durationField24 = gJChronology22.millis();
        org.joda.time.DurationField durationField25 = gJChronology22.weekyears();
        org.joda.time.DateTimeField dateTimeField26 = gJChronology22.dayOfYear();
        org.joda.time.DateTimeField dateTimeField27 = gJChronology22.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField28 = gJChronology22.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField29 = gJChronology22.yearOfEra();
        org.joda.time.DurationField durationField30 = gJChronology22.weeks();
        org.joda.time.DateTimeField dateTimeField31 = gJChronology22.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone32 = gJChronology22.getZone();
        org.joda.time.Chronology chronology33 = gJChronology2.withZone(dateTimeZone32);
        org.joda.time.DateTimeField dateTimeField34 = gJChronology2.monthOfYear();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 97L + "'", long7 == 97L);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 5200L + "'", long11 == 5200L);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(gJChronology22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(dateTimeField34);
    }

    @Test
    public void test19217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19217");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = gJChronology2.halfdays();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.millisOfDay();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.minuteOfDay();
        org.joda.time.DurationField durationField6 = gJChronology2.centuries();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology2.millisOfSecond();
        org.joda.time.Chronology chronology8 = gJChronology2.withUTC();
        org.joda.time.DurationField durationField9 = gJChronology2.years();
        int int12 = durationField9.getDifference((-60479999300000L), 1382400001L);
        long long15 = durationField9.subtract(43081L, 5995);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1916) + "'", int12 == (-1916));
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-189155174356919L) + "'", long15 == (-189155174356919L));
    }

    @Test
    public void test19218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19218");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clear();
        java.util.Locale.Builder builder3 = builder1.removeUnicodeLocaleAttribute("und");
        java.util.Locale locale4 = builder3.build();
        java.util.Locale.Builder builder5 = builder3.clear();
        java.util.Locale.Builder builder8 = builder5.setUnicodeLocaleKeyword("en", "");
        java.util.Locale locale10 = java.util.Locale.forLanguageTag("hi!");
        java.lang.String str11 = locale10.toLanguageTag();
        java.lang.String str12 = locale10.getCountry();
        java.util.Locale locale13 = java.util.Locale.ROOT;
        java.util.Locale locale14 = java.util.Locale.GERMAN;
        java.lang.String str15 = locale14.getDisplayCountry();
        java.lang.String str16 = locale13.getDisplayLanguage(locale14);
        java.lang.String str17 = locale10.getDisplayVariant(locale13);
        java.util.Locale.Builder builder18 = builder5.setLocale(locale13);
        java.util.Locale.Builder builder19 = builder18.clearExtensions();
        java.util.Locale.Builder builder20 = builder18.clearExtensions();
        java.util.Locale.Builder builder22 = builder18.removeUnicodeLocaleAttribute("Japan");
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "");
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "und" + "'", str11, "und");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "de");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
    }

    @Test
    public void test19219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19219");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = gJChronology2.halfdays();
        long long7 = gJChronology2.add((long) 'a', (-1L), (int) (short) 0);
        long long11 = gJChronology2.add((long) (byte) 0, (long) '4', 100);
        org.joda.time.DurationField durationField12 = gJChronology2.years();
        org.joda.time.DateTimeField dateTimeField13 = gJChronology2.dayOfYear();
        org.joda.time.DateTimeField dateTimeField14 = gJChronology2.halfdayOfDay();
        boolean boolean15 = dateTimeField14.isLenient();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 97L + "'", long7 == 97L);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 5200L + "'", long11 == 5200L);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test19220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19220");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        boolean boolean2 = instant1.isEqualNow();
        java.lang.String str3 = instant1.toString();
        java.util.TimeZone timeZone4 = null;
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forTimeZone(timeZone4);
        org.joda.time.chrono.GJChronology gJChronology6 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone5);
        java.util.Locale locale8 = new java.util.Locale("hi!");
        java.lang.String str9 = locale8.getCountry();
        java.util.Locale locale10 = java.util.Locale.getDefault();
        java.lang.String str11 = locale10.getDisplayName();
        java.lang.String str12 = locale8.getDisplayScript(locale10);
        boolean boolean13 = dateTimeZone5.equals((java.lang.Object) locale10);
        int int15 = dateTimeZone5.getOffsetFromLocal((long) (short) 10);
        java.util.TimeZone timeZone16 = null;
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forTimeZone(timeZone16);
        org.joda.time.chrono.GJChronology gJChronology18 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone17);
        org.joda.time.DateTimeField dateTimeField19 = gJChronology18.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField20 = gJChronology18.weekyearOfCentury();
        org.joda.time.Instant instant21 = gJChronology18.getGregorianCutover();
        org.joda.time.Instant instant23 = instant21.withMillis(0L);
        org.joda.time.Instant instant25 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone26 = null;
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forTimeZone(timeZone26);
        org.joda.time.chrono.GJChronology gJChronology28 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone27);
        org.joda.time.DateTimeField dateTimeField29 = gJChronology28.millisOfSecond();
        int int30 = instant25.get(dateTimeField29);
        org.joda.time.Instant instant32 = instant25.plus(0L);
        int int33 = instant23.compareTo((org.joda.time.ReadableInstant) instant32);
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = null;
        boolean boolean35 = instant32.isSupported(dateTimeFieldType34);
        int int36 = dateTimeZone5.getOffset((org.joda.time.ReadableInstant) instant32);
        boolean boolean37 = instant1.isAfter((org.joda.time.ReadableInstant) instant32);
        org.joda.time.ReadableDuration readableDuration38 = null;
        org.joda.time.Instant instant40 = instant1.withDurationAdded(readableDuration38, 1);
        boolean boolean41 = instant40.isEqualNow();
        boolean boolean43 = instant40.isEqual(349200L);
        java.lang.String str44 = instant40.toString();
        java.util.TimeZone timeZone45 = null;
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.forTimeZone(timeZone45);
        org.joda.time.chrono.GJChronology gJChronology47 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone46);
        org.joda.time.DateTimeField dateTimeField48 = gJChronology47.millisOfSecond();
        org.joda.time.DurationField durationField49 = gJChronology47.millis();
        org.joda.time.DurationField durationField50 = gJChronology47.weekyears();
        org.joda.time.DateTimeField dateTimeField51 = gJChronology47.dayOfYear();
        org.joda.time.DateTimeField dateTimeField52 = gJChronology47.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField53 = gJChronology47.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField54 = gJChronology47.yearOfEra();
        org.joda.time.DateTimeField dateTimeField55 = gJChronology47.dayOfWeek();
        boolean boolean56 = instant40.equals((java.lang.Object) gJChronology47);
        org.joda.time.ReadableDuration readableDuration57 = null;
        org.joda.time.Instant instant58 = instant40.plus(readableDuration57);
        org.joda.time.ReadableDuration readableDuration59 = null;
        org.joda.time.Instant instant61 = instant58.withDurationAdded(readableDuration59, 838079848);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "1970-01-01T00:00:00.052Z" + "'", str3, "1970-01-01T00:00:00.052Z");
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(gJChronology6);
        org.junit.Assert.assertEquals(locale8.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "it");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "italiano" + "'", str11, "italiano");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int15 + "' != '" + 52 + "'", int15 == 52);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(gJChronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(instant21);
        org.junit.Assert.assertNotNull(instant23);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertNotNull(gJChronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
// flaky:         org.junit.Assert.assertTrue("'" + int30 + "' != '" + 104 + "'", int30 == 104);
        org.junit.Assert.assertNotNull(instant32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int36 + "' != '" + 52 + "'", int36 == 52);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(instant40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "1970-01-01T00:00:00.052Z" + "'", str44, "1970-01-01T00:00:00.052Z");
        org.junit.Assert.assertNotNull(dateTimeZone46);
        org.junit.Assert.assertNotNull(gJChronology47);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertNotNull(durationField49);
        org.junit.Assert.assertNotNull(durationField50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(instant58);
        org.junit.Assert.assertNotNull(instant61);
    }

    @Test
    public void test19221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19221");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField3 = gJChronology2.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.weekyear();
        org.joda.time.DurationField durationField5 = gJChronology2.centuries();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology2.millisOfDay();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField8 = gJChronology2.clockhourOfHalfday();
        org.joda.time.DurationField durationField9 = gJChronology2.years();
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        long long13 = gJChronology2.add(readablePeriod10, 0L, 7816188);
        org.joda.time.DateTimeField dateTimeField14 = gJChronology2.clockhourOfDay();
        java.lang.String str15 = gJChronology2.toString();
        java.lang.String str16 = gJChronology2.toString();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(dateTimeField14);
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "GJChronology[+00:00:00.052]" + "'", str15, "GJChronology[+00:00:00.052]");
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "GJChronology[+00:00:00.052]" + "'", str16, "GJChronology[+00:00:00.052]");
    }

    @Test
    public void test19222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19222");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(432086114);
        long long4 = dateTimeZone1.adjustOffset(13867527L, false);
        long long7 = dateTimeZone1.adjustOffset(903875289378600001L, false);
        java.lang.String str8 = dateTimeZone1.getID();
        java.util.TimeZone timeZone9 = dateTimeZone1.toTimeZone();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 13867527L + "'", long4 == 13867527L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 903875289378600001L + "'", long7 == 903875289378600001L);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "+120:01:26.114" + "'", str8, "+120:01:26.114");
        org.junit.Assert.assertNotNull(timeZone9);
        org.junit.Assert.assertEquals(timeZone9.getDisplayName(), "GMT+<0:01");
    }

    @Test
    public void test19223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19223");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clear();
        java.util.Locale.Builder builder3 = builder1.removeUnicodeLocaleAttribute("und");
        java.util.Locale.Builder builder4 = builder3.clearExtensions();
        java.util.Locale.Builder builder5 = builder4.clearExtensions();
        java.util.Locale locale6 = builder4.build();
        java.util.Locale.Builder builder8 = builder4.setLanguageTag("en-US");
        java.util.Locale.Builder builder10 = builder4.addUnicodeLocaleAttribute("deu");
        java.util.Locale.Builder builder11 = builder10.clearExtensions();
        java.util.Locale.Builder builder12 = builder11.clear();
        java.util.Locale.Builder builder13 = builder12.clear();
        java.util.Locale.Builder builder15 = builder13.setRegion("zh");
        java.util.Locale.Builder builder16 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder17 = builder16.clear();
        java.util.Locale.Builder builder19 = builder17.removeUnicodeLocaleAttribute("und");
        java.util.Locale.Builder builder20 = builder19.clearExtensions();
        java.util.Locale.Builder builder21 = builder20.clearExtensions();
        java.util.Locale locale22 = builder20.build();
        java.util.Locale locale23 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale24 = java.util.Locale.ENGLISH;
        java.lang.String str25 = locale23.getDisplayLanguage(locale24);
        java.util.Locale locale26 = java.util.Locale.CANADA;
        java.lang.String str27 = locale26.getISO3Language();
        java.lang.String str28 = locale23.getDisplayVariant(locale26);
        java.util.Set<java.lang.String> strSet29 = locale23.getUnicodeLocaleKeys();
        java.util.Locale locale33 = new java.util.Locale("zh", "en", "");
        java.lang.String str34 = locale23.getDisplayName(locale33);
        java.lang.String str35 = locale33.getVariant();
        java.lang.String str36 = locale22.getDisplayName(locale33);
        java.util.Locale.Builder builder37 = builder13.setLocale(locale33);
        java.util.Locale locale38 = locale33.stripExtensions();
        java.lang.String str39 = locale33.getVariant();
        java.util.TimeZone timeZone40 = null;
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.forTimeZone(timeZone40);
        int int43 = dateTimeZone41.getOffsetFromLocal((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(0, (int) (short) 10);
        long long48 = dateTimeZone41.getMillisKeepLocal(dateTimeZone46, (-61827926399999L));
        java.util.Locale locale50 = new java.util.Locale("hi!");
        boolean boolean51 = dateTimeZone41.equals((java.lang.Object) locale50);
        java.lang.String str52 = locale33.getDisplayVariant(locale50);
        java.lang.String str53 = locale33.getISO3Language();
        java.lang.String str54 = locale33.getDisplayLanguage();
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "");
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "en");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Chinese" + "'", str25, "Chinese");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "eng" + "'", str27, "eng");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(strSet29);
        org.junit.Assert.assertEquals(locale33.toString(), "zh_EN");
// flaky:         org.junit.Assert.assertEquals("'" + str34 + "' != '" + "\u4e2d\u6587\u53f0\u6e7e\u5730\u533a)" + "'", str34, "\u4e2d\u6587\u53f0\u6e7e\u5730\u533a)");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "zh_EN");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertNotNull(dateTimeZone41);
// flaky:         org.junit.Assert.assertTrue("'" + int43 + "' != '" + 52 + "'", int43 == 52);
        org.junit.Assert.assertNotNull(dateTimeZone46);
// flaky:         org.junit.Assert.assertTrue("'" + long48 + "' != '" + (-61827926999947L) + "'", long48 == (-61827926999947L));
        org.junit.Assert.assertEquals(locale50.toString(), "hi!");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "zho" + "'", str53, "zho");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "cinese" + "'", str54, "cinese");
    }

    @Test
    public void test19224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19224");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = gJChronology2.halfdays();
        org.joda.time.Chronology chronology4 = gJChronology2.withUTC();
        java.lang.String str5 = gJChronology2.toString();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology2.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(1, 10);
        org.joda.time.Chronology chronology10 = gJChronology2.withZone(dateTimeZone9);
        long long12 = dateTimeZone9.convertUTCToLocal((-43829L));
        boolean boolean13 = dateTimeZone9.isFixed();
        java.util.Locale locale15 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str16 = dateTimeZone9.getName((-72948L), locale15);
        org.joda.time.Instant instant18 = new org.joda.time.Instant(52L);
        boolean boolean19 = instant18.isEqualNow();
        java.lang.String str20 = instant18.toString();
        java.lang.String str21 = instant18.toString();
        org.joda.time.Instant instant24 = instant18.withDurationAdded(115200000L, (int) (short) 1);
        org.joda.time.Instant instant25 = instant18.toInstant();
        org.joda.time.Instant instant27 = instant25.minus(4492800100L);
        org.joda.time.DateTimeZone dateTimeZone28 = instant27.getZone();
        org.joda.time.chrono.GJChronology gJChronology29 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone9, (org.joda.time.ReadableInstant) instant27);
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray33 = gJChronology29.get(readablePeriod30, (-46690800L), 506880475200000L);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(chronology4);
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "GJChronology[+00:00:00.052]" + "'", str5, "GJChronology[+00:00:00.052]");
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 4156171L + "'", long12 == 4156171L);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "+01:10" + "'", str16, "+01:10");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "1970-01-01T00:00:00.052Z" + "'", str20, "1970-01-01T00:00:00.052Z");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "1970-01-01T00:00:00.052Z" + "'", str21, "1970-01-01T00:00:00.052Z");
        org.junit.Assert.assertNotNull(instant24);
        org.junit.Assert.assertNotNull(instant25);
        org.junit.Assert.assertNotNull(instant27);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(gJChronology29);
    }

    @Test
    public void test19225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19225");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = gJChronology2.halfdays();
        long long7 = gJChronology2.add(0L, (long) (short) -1, (int) '4');
        java.util.TimeZone timeZone8 = null;
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forTimeZone(timeZone8);
        org.joda.time.chrono.GJChronology gJChronology10 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone9);
        org.joda.time.DurationField durationField11 = gJChronology10.halfdays();
        org.joda.time.DateTimeField dateTimeField12 = gJChronology10.millisOfDay();
        org.joda.time.DateTimeField dateTimeField13 = gJChronology10.minuteOfDay();
        org.joda.time.DurationField durationField14 = gJChronology10.centuries();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology10.dayOfYear();
        java.lang.String str16 = gJChronology10.toString();
        org.joda.time.DurationField durationField17 = gJChronology10.years();
        org.joda.time.DateTimeField dateTimeField18 = gJChronology10.yearOfEra();
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(0, (int) (short) 10);
        org.joda.time.Chronology chronology22 = gJChronology10.withZone(dateTimeZone21);
        org.joda.time.Chronology chronology23 = gJChronology2.withZone(dateTimeZone21);
        org.joda.time.DurationField durationField24 = gJChronology2.halfdays();
        org.joda.time.Instant instant25 = gJChronology2.getGregorianCutover();
        org.joda.time.Instant instant27 = instant25.withMillis((long) (short) -1);
        long long28 = instant25.getMillis();
        org.joda.time.DateTimeZone dateTimeZone29 = instant25.getZone();
        long long32 = dateTimeZone29.convertLocalToUTC(7092000000000L, true);
        java.lang.String str33 = dateTimeZone29.getID();
        java.util.Locale.Builder builder35 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder36 = builder35.clear();
        java.util.Locale.Builder builder38 = builder36.removeUnicodeLocaleAttribute("und");
        java.util.Locale locale39 = builder38.build();
        java.lang.String str40 = locale39.getDisplayName();
        java.util.Locale locale41 = java.util.Locale.ITALIAN;
        java.util.Locale locale42 = locale41.stripExtensions();
        java.lang.String str43 = locale41.getDisplayVariant();
        java.util.Set<java.lang.String> strSet44 = locale41.getUnicodeLocaleKeys();
        java.lang.String str45 = locale39.getDisplayName(locale41);
        java.lang.String str46 = locale39.getISO3Language();
        java.util.Set<java.lang.Character> charSet47 = locale39.getExtensionKeys();
        java.util.Locale locale50 = new java.util.Locale("English (United States)", "");
        java.util.Locale locale51 = java.util.Locale.GERMAN;
        java.lang.String str52 = locale51.getCountry();
        java.lang.String str53 = locale51.getDisplayName();
        java.util.Locale locale54 = java.util.Locale.CANADA;
        java.lang.String str55 = locale54.getDisplayVariant();
        java.lang.String str56 = locale51.getDisplayCountry(locale54);
        java.lang.String str57 = locale54.getCountry();
        java.lang.String str58 = locale50.getDisplayLanguage(locale54);
        java.util.Set<java.lang.String> strSet59 = locale54.getUnicodeLocaleKeys();
        java.lang.String str60 = locale39.getDisplayLanguage(locale54);
        java.lang.String str61 = dateTimeZone29.getName(5935258842600053L, locale39);
        java.util.TimeZone timeZone62 = null;
        org.joda.time.DateTimeZone dateTimeZone63 = org.joda.time.DateTimeZone.forTimeZone(timeZone62);
        org.joda.time.chrono.GJChronology gJChronology64 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone63);
        org.joda.time.DurationField durationField65 = gJChronology64.halfdays();
        org.joda.time.DateTimeField dateTimeField66 = gJChronology64.millisOfDay();
        org.joda.time.DateTimeField dateTimeField67 = gJChronology64.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField68 = gJChronology64.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone69 = gJChronology64.getZone();
        org.joda.time.DurationField durationField70 = gJChronology64.minutes();
        org.joda.time.DateTimeField dateTimeField71 = gJChronology64.millisOfSecond();
        int int72 = gJChronology64.getMinimumDaysInFirstWeek();
        org.joda.time.DateTimeField dateTimeField73 = gJChronology64.minuteOfDay();
        org.joda.time.Instant instant75 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone76 = null;
        org.joda.time.DateTimeZone dateTimeZone77 = org.joda.time.DateTimeZone.forTimeZone(timeZone76);
        org.joda.time.chrono.GJChronology gJChronology78 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone77);
        org.joda.time.DateTimeField dateTimeField79 = gJChronology78.millisOfSecond();
        int int80 = instant75.get(dateTimeField79);
        boolean boolean81 = instant75.isEqualNow();
        boolean boolean82 = instant75.isAfterNow();
        boolean boolean83 = gJChronology64.equals((java.lang.Object) instant75);
        int int84 = dateTimeZone29.getOffset((org.joda.time.ReadableInstant) instant75);
        org.joda.time.ReadableDuration readableDuration85 = null;
        org.joda.time.Instant instant86 = instant75.plus(readableDuration85);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-52L) + "'", long7 == (-52L));
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(gJChronology10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "GJChronology[+00:00:00.052]" + "'", str16, "GJChronology[+00:00:00.052]");
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertNotNull(instant25);
        org.junit.Assert.assertNotNull(instant27);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + (-12219292800000L) + "'", long28 == (-12219292800000L));
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 7092000000000L + "'", long32 == 7092000000000L);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "UTC" + "'", str33, "UTC");
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "it");
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "it");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertNotNull(strSet44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertNotNull(charSet47);
        org.junit.Assert.assertEquals(locale50.toString(), "english (united states)");
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "de");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "tedesco" + "'", str53, "tedesco");
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "CA" + "'", str57, "CA");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "english (united states)" + "'", str58, "english (united states)");
        org.junit.Assert.assertNotNull(strSet59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "+00:00" + "'", str61, "+00:00");
        org.junit.Assert.assertNotNull(dateTimeZone63);
        org.junit.Assert.assertNotNull(gJChronology64);
        org.junit.Assert.assertNotNull(durationField65);
        org.junit.Assert.assertNotNull(dateTimeField66);
        org.junit.Assert.assertNotNull(dateTimeField67);
        org.junit.Assert.assertNotNull(dateTimeField68);
        org.junit.Assert.assertNotNull(dateTimeZone69);
        org.junit.Assert.assertNotNull(durationField70);
        org.junit.Assert.assertNotNull(dateTimeField71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 4 + "'", int72 == 4);
        org.junit.Assert.assertNotNull(dateTimeField73);
        org.junit.Assert.assertNotNull(dateTimeZone77);
        org.junit.Assert.assertNotNull(gJChronology78);
        org.junit.Assert.assertNotNull(dateTimeField79);
// flaky:         org.junit.Assert.assertTrue("'" + int80 + "' != '" + 104 + "'", int80 == 104);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
        org.junit.Assert.assertNotNull(instant86);
    }

    @Test
    public void test19226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19226");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = gJChronology2.halfdays();
        long long7 = gJChronology2.add((long) 'a', (-1L), (int) (short) 0);
        long long11 = gJChronology2.add((long) (byte) 0, (long) '4', 100);
        org.joda.time.DateTimeField dateTimeField12 = gJChronology2.minuteOfHour();
        org.joda.time.DurationField durationField13 = gJChronology2.hours();
        org.joda.time.DateTimeField dateTimeField14 = gJChronology2.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology2.millisOfSecond();
        org.joda.time.DurationField durationField16 = gJChronology2.months();
        long long19 = durationField16.getDifferenceAsLong(715L, 62207999990L);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 97L + "'", long7 == 97L);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 5200L + "'", long11 == 5200L);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-23L) + "'", long19 == (-23L));
    }

    @Test
    public void test19227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19227");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        boolean boolean2 = instant1.isEqualNow();
        java.lang.String str3 = instant1.toString();
        java.util.TimeZone timeZone4 = null;
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forTimeZone(timeZone4);
        org.joda.time.chrono.GJChronology gJChronology6 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone5);
        java.util.Locale locale8 = new java.util.Locale("hi!");
        java.lang.String str9 = locale8.getCountry();
        java.util.Locale locale10 = java.util.Locale.getDefault();
        java.lang.String str11 = locale10.getDisplayName();
        java.lang.String str12 = locale8.getDisplayScript(locale10);
        boolean boolean13 = dateTimeZone5.equals((java.lang.Object) locale10);
        int int15 = dateTimeZone5.getOffsetFromLocal((long) (short) 10);
        java.util.TimeZone timeZone16 = null;
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forTimeZone(timeZone16);
        org.joda.time.chrono.GJChronology gJChronology18 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone17);
        org.joda.time.DateTimeField dateTimeField19 = gJChronology18.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField20 = gJChronology18.weekyearOfCentury();
        org.joda.time.Instant instant21 = gJChronology18.getGregorianCutover();
        org.joda.time.Instant instant23 = instant21.withMillis(0L);
        org.joda.time.Instant instant25 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone26 = null;
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forTimeZone(timeZone26);
        org.joda.time.chrono.GJChronology gJChronology28 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone27);
        org.joda.time.DateTimeField dateTimeField29 = gJChronology28.millisOfSecond();
        int int30 = instant25.get(dateTimeField29);
        org.joda.time.Instant instant32 = instant25.plus(0L);
        int int33 = instant23.compareTo((org.joda.time.ReadableInstant) instant32);
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = null;
        boolean boolean35 = instant32.isSupported(dateTimeFieldType34);
        int int36 = dateTimeZone5.getOffset((org.joda.time.ReadableInstant) instant32);
        boolean boolean37 = instant1.isAfter((org.joda.time.ReadableInstant) instant32);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter38 = null;
        java.lang.String str39 = instant1.toString(dateTimeFormatter38);
        boolean boolean41 = instant1.isAfter(45L);
        org.joda.time.DateTimeZone dateTimeZone42 = instant1.getZone();
        boolean boolean44 = dateTimeZone42.isStandardOffset((-599581L));
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "1970-01-01T00:00:00.052Z" + "'", str3, "1970-01-01T00:00:00.052Z");
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(gJChronology6);
        org.junit.Assert.assertEquals(locale8.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "it");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "italiano" + "'", str11, "italiano");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int15 + "' != '" + 52 + "'", int15 == 52);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(gJChronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(instant21);
        org.junit.Assert.assertNotNull(instant23);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertNotNull(gJChronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
// flaky:         org.junit.Assert.assertTrue("'" + int30 + "' != '" + 104 + "'", int30 == 104);
        org.junit.Assert.assertNotNull(instant32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int36 + "' != '" + 52 + "'", int36 == 52);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "1970-01-01T00:00:00.052Z" + "'", str39, "1970-01-01T00:00:00.052Z");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
    }

    @Test
    public void test19228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19228");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField3 = gJChronology2.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.weekyear();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.halfdayOfDay();
        org.joda.time.DurationField durationField6 = gJChronology2.years();
        org.joda.time.DurationField durationField7 = gJChronology2.minutes();
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        long long11 = gJChronology2.add(readablePeriod8, (-42L), (int) '4');
        org.joda.time.Chronology chronology12 = gJChronology2.withUTC();
        org.joda.time.DateTimeField dateTimeField13 = gJChronology2.minuteOfHour();
        org.joda.time.DurationField durationField14 = gJChronology2.minutes();
        org.joda.time.DurationField durationField15 = gJChronology2.centuries();
        org.joda.time.DateTimeZone dateTimeZone16 = gJChronology2.getZone();
        int int18 = dateTimeZone16.getOffsetFromLocal((-2246999L));
        java.lang.String str19 = dateTimeZone16.toString();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-42L) + "'", long11 == (-42L));
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
// flaky:         org.junit.Assert.assertTrue("'" + int18 + "' != '" + 52 + "'", int18 == 52);
// flaky:         org.junit.Assert.assertEquals("'" + str19 + "' != '" + "+00:00:00.052" + "'", str19, "+00:00:00.052");
    }

    @Test
    public void test19229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19229");
        java.util.Locale locale1 = new java.util.Locale("hi!");
        java.lang.String str2 = locale1.getCountry();
        java.lang.String str3 = locale1.getCountry();
        java.util.Locale locale5 = new java.util.Locale("hi!");
        java.lang.String str6 = locale5.getCountry();
        java.lang.String str7 = locale5.getScript();
        java.util.Locale locale8 = java.util.Locale.ITALIAN;
        java.util.Locale locale9 = locale8.stripExtensions();
        java.util.Locale locale10 = java.util.Locale.CANADA;
        java.lang.String str11 = locale8.getDisplayVariant(locale10);
        java.lang.String str12 = locale5.getDisplayScript(locale8);
        java.lang.String str13 = locale1.getDisplayCountry(locale5);
        java.lang.String str14 = locale1.getDisplayScript();
        java.lang.String str15 = locale1.getLanguage();
        java.lang.String str16 = locale1.getDisplayName();
        java.lang.String str17 = locale1.getDisplayLanguage();
        java.util.Locale locale19 = java.util.Locale.forLanguageTag("hi!");
        java.lang.String str20 = locale19.toLanguageTag();
        java.lang.String str21 = locale19.getCountry();
        java.util.Locale locale22 = java.util.Locale.ROOT;
        java.util.Locale locale23 = java.util.Locale.GERMAN;
        java.lang.String str24 = locale23.getDisplayCountry();
        java.lang.String str25 = locale22.getDisplayLanguage(locale23);
        java.lang.String str26 = locale19.getDisplayVariant(locale22);
        java.lang.String str27 = locale19.getDisplayName();
        java.util.TimeZone timeZone28 = null;
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forTimeZone(timeZone28);
        org.joda.time.chrono.GJChronology gJChronology30 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone29);
        org.joda.time.DurationField durationField31 = gJChronology30.halfdays();
        org.joda.time.Chronology chronology32 = gJChronology30.withUTC();
        java.lang.String str33 = gJChronology30.toString();
        org.joda.time.DateTimeField dateTimeField34 = gJChronology30.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(1, 10);
        org.joda.time.Chronology chronology38 = gJChronology30.withZone(dateTimeZone37);
        java.util.Locale locale41 = java.util.Locale.forLanguageTag("hi!");
        java.lang.String str42 = locale41.toLanguageTag();
        java.lang.String str43 = locale41.getCountry();
        java.lang.String str44 = dateTimeZone37.getName(43200100L, locale41);
        java.util.Locale.Builder builder45 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder46 = builder45.clear();
        java.util.Locale.Builder builder48 = builder46.removeUnicodeLocaleAttribute("und");
        java.util.Locale.Builder builder49 = builder48.clear();
        java.util.Locale.Builder builder50 = builder48.clear();
        java.util.Locale.Builder builder52 = builder48.setLanguageTag("zh");
        java.util.Locale locale53 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str54 = locale53.getLanguage();
        java.util.Set<java.lang.Character> charSet55 = locale53.getExtensionKeys();
        java.util.Locale locale57 = new java.util.Locale("hi!");
        java.lang.String str58 = locale57.getVariant();
        java.util.Locale locale60 = java.util.Locale.forLanguageTag("hi!");
        java.lang.String str61 = locale60.toLanguageTag();
        java.lang.String str62 = locale57.getDisplayName(locale60);
        java.lang.String str63 = locale53.getDisplayScript(locale60);
        java.lang.String str64 = locale60.getDisplayCountry();
        java.util.Locale.Builder builder65 = builder52.setLocale(locale60);
        java.lang.String str66 = locale60.toLanguageTag();
        java.lang.String str67 = locale60.getDisplayScript();
        java.lang.String str68 = locale41.getDisplayName(locale60);
        java.lang.String str69 = locale19.getDisplayName(locale41);
        java.lang.String str70 = locale1.getDisplayLanguage(locale19);
        java.util.Set<java.lang.Character> charSet71 = locale19.getExtensionKeys();
        java.util.Set<java.lang.String> strSet72 = locale19.getUnicodeLocaleKeys();
        org.junit.Assert.assertEquals(locale1.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals(locale5.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "it");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "it");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hi!" + "'", str15, "hi!");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hi!" + "'", str17, "hi!");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "und" + "'", str20, "und");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "de");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(gJChronology30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertNotNull(chronology32);
// flaky:         org.junit.Assert.assertEquals("'" + str33 + "' != '" + "GJChronology[+00:00:00.052]" + "'", str33, "GJChronology[+00:00:00.052]");
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "und" + "'", str42, "und");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "+01:10" + "'", str44, "+01:10");
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "zh" + "'", str54, "zh");
        org.junit.Assert.assertNotNull(charSet55);
        org.junit.Assert.assertEquals(locale57.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "und" + "'", str61, "und");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "hi!" + "'", str62, "hi!");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "" + "'", str63, "");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "" + "'", str64, "");
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "und" + "'", str66, "und");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "" + "'", str67, "");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "" + "'", str68, "");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "" + "'", str69, "");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "hi!" + "'", str70, "hi!");
        org.junit.Assert.assertNotNull(charSet71);
        org.junit.Assert.assertNotNull(strSet72);
    }

    @Test
    public void test19230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19230");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField3 = gJChronology2.millisOfSecond();
        org.joda.time.DurationField durationField4 = gJChronology2.millis();
        org.joda.time.DurationField durationField5 = gJChronology2.weeks();
        org.joda.time.DurationField durationField6 = gJChronology2.days();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology2.yearOfCentury();
        org.joda.time.DurationField durationField8 = gJChronology2.weekyears();
        org.joda.time.DurationField durationField9 = gJChronology2.minutes();
        org.joda.time.DateTimeField dateTimeField10 = gJChronology2.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField11 = gJChronology2.monthOfYear();
        org.joda.time.DateTimeField dateTimeField12 = gJChronology2.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField13 = gJChronology2.era();
        org.joda.time.DateTimeField dateTimeField14 = gJChronology2.hourOfDay();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
    }

    @Test
    public void test19231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19231");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.Instant instant2 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone3 = null;
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forTimeZone(timeZone3);
        org.joda.time.chrono.GJChronology gJChronology5 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone4);
        org.joda.time.DateTimeField dateTimeField6 = gJChronology5.millisOfSecond();
        int int7 = instant2.get(dateTimeField6);
        org.joda.time.Instant instant9 = instant2.plus(0L);
        java.util.TimeZone timeZone10 = null;
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forTimeZone(timeZone10);
        org.joda.time.chrono.GJChronology gJChronology12 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone11);
        org.joda.time.DurationField durationField13 = gJChronology12.halfdays();
        org.joda.time.Chronology chronology14 = gJChronology12.withUTC();
        java.lang.String str15 = gJChronology12.toString();
        org.joda.time.DateTimeField dateTimeField16 = gJChronology12.hourOfHalfday();
        int int17 = instant2.get(dateTimeField16);
        org.joda.time.Instant instant19 = new org.joda.time.Instant(52L);
        boolean boolean20 = instant19.isEqualNow();
        org.joda.time.ReadableDuration readableDuration21 = null;
        org.joda.time.Instant instant22 = instant19.plus(readableDuration21);
        org.joda.time.Instant instant24 = new org.joda.time.Instant(52L);
        org.joda.time.Instant instant26 = instant24.withMillis((long) 'u');
        boolean boolean27 = instant19.isBefore((org.joda.time.ReadableInstant) instant24);
        boolean boolean28 = instant2.isEqual((org.joda.time.ReadableInstant) instant24);
        org.joda.time.ReadableDuration readableDuration29 = null;
        org.joda.time.Instant instant31 = instant2.withDurationAdded(readableDuration29, 0);
        java.lang.String str32 = instant31.toString();
        org.joda.time.chrono.GJChronology gJChronology33 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, (org.joda.time.ReadableInstant) instant31);
        org.joda.time.DateTimeField dateTimeField34 = gJChronology33.weekyear();
        org.joda.time.DateTimeField dateTimeField35 = gJChronology33.minuteOfDay();
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(gJChronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 104 + "'", int7 == 104);
        org.junit.Assert.assertNotNull(instant9);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(gJChronology12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(chronology14);
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "GJChronology[+00:00:00.052]" + "'", str15, "GJChronology[+00:00:00.052]");
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(instant22);
        org.junit.Assert.assertNotNull(instant26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(instant31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "1970-01-01T00:00:00.052Z" + "'", str32, "1970-01-01T00:00:00.052Z");
        org.junit.Assert.assertNotNull(gJChronology33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTimeField35);
    }

    @Test
    public void test19232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19232");
        java.util.Locale locale3 = new java.util.Locale("GBR", "1970-02-20T00:00:00.100Z", "French (Canada)");
        org.junit.Assert.assertEquals(locale3.toString(), "gbr_1970-02-20T00:00:00.100Z_French (Canada)");
    }

    @Test
    public void test19233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19233");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = gJChronology2.halfdays();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.millisOfDay();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.minuteOfDay();
        org.joda.time.DurationField durationField6 = gJChronology2.centuries();
        int int7 = gJChronology2.getMinimumDaysInFirstWeek();
        org.joda.time.DateTimeField dateTimeField8 = gJChronology2.weekyear();
        org.joda.time.DateTimeField dateTimeField9 = gJChronology2.weekyearOfCentury();
        org.joda.time.DurationField durationField10 = gJChronology2.halfdays();
        org.joda.time.DateTimeField dateTimeField11 = gJChronology2.hourOfDay();
        org.joda.time.DurationField durationField12 = gJChronology2.weeks();
        org.joda.time.DurationField durationField13 = gJChronology2.minutes();
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray17 = gJChronology2.get(readablePeriod14, (-498818369280L), (-35999929L));
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 4 + "'", int7 == 4);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(durationField13);
    }

    @Test
    public void test19234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19234");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = gJChronology2.halfdays();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.millisOfDay();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.minuteOfDay();
        org.joda.time.DurationField durationField6 = gJChronology2.centuries();
        int int7 = gJChronology2.getMinimumDaysInFirstWeek();
        org.joda.time.DateTimeField dateTimeField8 = gJChronology2.weekyear();
        org.joda.time.DateTimeField dateTimeField9 = gJChronology2.weekyearOfCentury();
        org.joda.time.DurationField durationField10 = gJChronology2.halfdays();
        org.joda.time.Instant instant11 = gJChronology2.getGregorianCutover();
        org.joda.time.Instant instant12 = gJChronology2.getGregorianCutover();
        boolean boolean13 = instant12.isAfterNow();
        java.util.TimeZone timeZone14 = null;
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forTimeZone(timeZone14);
        org.joda.time.chrono.GJChronology gJChronology16 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone15);
        long long20 = dateTimeZone15.convertLocalToUTC((long) (byte) -1, true, 0L);
        boolean boolean22 = dateTimeZone15.equals((java.lang.Object) true);
        org.joda.time.chrono.GJChronology gJChronology23 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone15);
        org.joda.time.DateTimeField dateTimeField24 = gJChronology23.weekyear();
        org.joda.time.DateTimeField dateTimeField25 = gJChronology23.era();
        org.joda.time.DateTimeField dateTimeField26 = gJChronology23.centuryOfEra();
        org.joda.time.Chronology chronology27 = gJChronology23.withUTC();
        org.joda.time.DurationField durationField28 = gJChronology23.years();
        org.joda.time.DurationField durationField29 = gJChronology23.halfdays();
        org.joda.time.MutableDateTime mutableDateTime30 = instant12.toMutableDateTime((org.joda.time.Chronology) gJChronology23);
        org.joda.time.ReadablePeriod readablePeriod31 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray33 = gJChronology23.get(readablePeriod31, (-61381953555L));
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 4 + "'", int7 == 4);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(instant11);
        org.junit.Assert.assertNotNull(instant12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(gJChronology16);
// flaky:         org.junit.Assert.assertTrue("'" + long20 + "' != '" + (-53L) + "'", long20 == (-53L));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(gJChronology23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertNotNull(mutableDateTime30);
    }

    @Test
    public void test19235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19235");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str3 = dateTimeZone1.getNameKey((long) 100);
        boolean boolean4 = dateTimeZone1.isFixed();
        org.joda.time.chrono.GJChronology gJChronology5 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField6 = gJChronology5.hours();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology5.weekyear();
        long long11 = gJChronology5.add((long) 10, 42600100L, 4);
        org.joda.time.DateTimeZone dateTimeZone12 = gJChronology5.getZone();
        java.lang.String str13 = dateTimeZone12.toString();
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(gJChronology5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 170400410L + "'", long11 == 170400410L);
        org.junit.Assert.assertNotNull(dateTimeZone12);
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+00:00:00.052" + "'", str13, "+00:00:00.052");
    }

    @Test
    public void test19236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19236");
        java.util.Locale locale1 = new java.util.Locale("3929-04-02T00:00:00.051Z");
        java.util.Set<java.lang.String> strSet2 = locale1.getUnicodeLocaleAttributes();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str4 = locale1.getUnicodeLocaleType("1999-08-12T23:59:56.516Z");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Ill-formed Unicode locale key: 1999-08-12T23:59:56.516Z");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(locale1.toString(), "3929-04-02t00:00:00.051z");
        org.junit.Assert.assertNotNull(strSet2);
    }

    @Test
    public void test19237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19237");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField3 = gJChronology2.millisOfSecond();
        org.joda.time.DurationField durationField4 = gJChronology2.millis();
        org.joda.time.DurationField durationField5 = gJChronology2.weeks();
        long long9 = gJChronology2.add(43201764L, 262974600000L, (int) (short) 100);
        org.joda.time.DateTimeField dateTimeField10 = gJChronology2.era();
        org.joda.time.DurationField durationField11 = gJChronology2.months();
        org.joda.time.DateTimeField dateTimeField12 = gJChronology2.hourOfHalfday();
        org.joda.time.DurationField durationField13 = gJChronology2.minutes();
        org.joda.time.DurationField durationField14 = gJChronology2.months();
        org.joda.time.DurationFieldType durationFieldType15 = durationField14.getType();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 26297503201764L + "'", long9 == 26297503201764L);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(durationFieldType15);
    }

    @Test
    public void test19238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19238");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = gJChronology2.halfdays();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.millisOfDay();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.minuteOfDay();
        org.joda.time.DurationField durationField6 = gJChronology2.centuries();
        int int7 = gJChronology2.getMinimumDaysInFirstWeek();
        org.joda.time.DateTimeField dateTimeField8 = gJChronology2.weekyear();
        org.joda.time.DateTimeField dateTimeField9 = gJChronology2.weekyearOfCentury();
        org.joda.time.DurationField durationField10 = gJChronology2.halfdays();
        org.joda.time.Instant instant11 = gJChronology2.getGregorianCutover();
        java.lang.String str12 = gJChronology2.toString();
        org.joda.time.DateTimeField dateTimeField13 = gJChronology2.weekyearOfCentury();
        java.lang.String str14 = gJChronology2.toString();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology2.monthOfYear();
        org.joda.time.DurationField durationField16 = gJChronology2.weekyears();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 4 + "'", int7 == 4);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(instant11);
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "GJChronology[+00:00:00.052]" + "'", str12, "GJChronology[+00:00:00.052]");
        org.junit.Assert.assertNotNull(dateTimeField13);
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "GJChronology[+00:00:00.052]" + "'", str14, "GJChronology[+00:00:00.052]");
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(durationField16);
    }

    @Test
    public void test19239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19239");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forTimeZone(timeZone2);
        org.joda.time.chrono.GJChronology gJChronology4 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone3);
        org.joda.time.DateTimeField dateTimeField5 = gJChronology4.millisOfSecond();
        int int6 = instant1.get(dateTimeField5);
        boolean boolean7 = instant1.isEqualNow();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = null;
        java.lang.String str9 = instant1.toString(dateTimeFormatter8);
        java.lang.String str10 = instant1.toString();
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.Instant instant13 = instant1.withDurationAdded(readableDuration11, (-612));
        org.joda.time.DateTime dateTime14 = instant13.toDateTime();
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(gJChronology4);
        org.junit.Assert.assertNotNull(dateTimeField5);
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 104 + "'", int6 == 104);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "1970-01-01T00:00:00.052Z" + "'", str9, "1970-01-01T00:00:00.052Z");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1970-01-01T00:00:00.052Z" + "'", str10, "1970-01-01T00:00:00.052Z");
        org.junit.Assert.assertNotNull(instant13);
        org.junit.Assert.assertNotNull(dateTime14);
    }

    @Test
    public void test19240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19240");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.GJChronology gJChronology1 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = gJChronology1.era();
        org.joda.time.DateTimeField dateTimeField3 = gJChronology1.weekyearOfCentury();
        org.joda.time.DurationField durationField4 = gJChronology1.days();
        org.junit.Assert.assertNotNull(gJChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
    }

    @Test
    public void test19241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19241");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str3 = dateTimeZone1.getNameKey((long) 100);
        boolean boolean4 = dateTimeZone1.isFixed();
        org.joda.time.chrono.GJChronology gJChronology5 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        int int6 = gJChronology5.getMinimumDaysInFirstWeek();
        java.lang.String str7 = gJChronology5.toString();
        org.joda.time.DateTimeField dateTimeField8 = gJChronology5.yearOfEra();
        org.joda.time.DateTimeField dateTimeField9 = gJChronology5.yearOfCentury();
        org.joda.time.DurationField durationField10 = gJChronology5.eras();
        boolean boolean11 = durationField10.isSupported();
        boolean boolean12 = durationField10.isPrecise();
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(gJChronology5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 4 + "'", int6 == 4);
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "GJChronology[+00:00:00.052]" + "'", str7, "GJChronology[+00:00:00.052]");
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
    }

    @Test
    public void test19242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19242");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = gJChronology2.halfdays();
        long long7 = gJChronology2.add((long) 'a', (-1L), (int) (short) 0);
        boolean boolean9 = gJChronology2.equals((java.lang.Object) 0);
        org.joda.time.DateTimeField dateTimeField10 = gJChronology2.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField11 = gJChronology2.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField12 = gJChronology2.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField13 = gJChronology2.clockhourOfHalfday();
        org.joda.time.DurationField durationField14 = gJChronology2.weekyears();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology2.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField16 = gJChronology2.yearOfCentury();
        long long20 = gJChronology2.add(1325391962472L, 0L, 1969);
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        long long24 = gJChronology2.add(readablePeriod21, 262974553L, (-562));
        org.joda.time.DurationField durationField25 = gJChronology2.years();
        // The following exception was thrown during execution in test generation
        try {
            long long31 = gJChronology2.getDateTimeMillis((-432085L), 104, (-457585131), 55296000, 0);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 104 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 97L + "'", long7 == 97L);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 1325391962472L + "'", long20 == 1325391962472L);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 262974553L + "'", long24 == 262974553L);
        org.junit.Assert.assertNotNull(durationField25);
    }

    @Test
    public void test19243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19243");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((-220870497598236L));
        org.joda.time.Instant instant4 = instant1.withDurationAdded((long) (byte) 10, 0);
        java.util.Date date5 = instant1.toDate();
        org.junit.Assert.assertNotNull(instant4);
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Thu Jan 01 12:00:01 UTC 5030");
    }

    @Test
    public void test19244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19244");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str3 = dateTimeZone1.getNameKey((long) 100);
        boolean boolean4 = dateTimeZone1.isFixed();
        org.joda.time.chrono.GJChronology gJChronology5 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        int int6 = gJChronology5.getMinimumDaysInFirstWeek();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology5.clockhourOfDay();
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        long long11 = gJChronology5.add(readablePeriod8, (long) (short) -1, (int) (byte) 10);
        org.joda.time.DateTimeField dateTimeField12 = gJChronology5.secondOfMinute();
        org.joda.time.DurationField durationField13 = gJChronology5.seconds();
        org.joda.time.DateTimeField dateTimeField14 = gJChronology5.millisOfDay();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology5.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone16 = gJChronology5.getZone();
        boolean boolean18 = dateTimeZone16.isStandardOffset((-61828113599999L));
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(gJChronology5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 4 + "'", int6 == 4);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-1L) + "'", long11 == (-1L));
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
    }

    @Test
    public void test19245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19245");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = gJChronology2.halfdays();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.millisOfDay();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.minuteOfDay();
        org.joda.time.DurationField durationField6 = gJChronology2.centuries();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology2.halfdayOfDay();
        java.util.Locale locale8 = java.util.Locale.ITALIAN;
        java.util.Locale locale9 = locale8.stripExtensions();
        java.util.Locale locale10 = java.util.Locale.CANADA;
        java.lang.String str11 = locale8.getDisplayVariant(locale10);
        boolean boolean12 = gJChronology2.equals((java.lang.Object) locale10);
        org.joda.time.DateTimeField dateTimeField13 = gJChronology2.secondOfMinute();
        org.joda.time.DurationField durationField14 = gJChronology2.years();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology2.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField16 = gJChronology2.millisOfDay();
        org.joda.time.Chronology chronology17 = gJChronology2.withUTC();
        org.joda.time.DateTimeField dateTimeField18 = gJChronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField19 = gJChronology2.halfdayOfDay();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "it");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "it");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
    }

    @Test
    public void test19246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19246");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        int int3 = dateTimeZone1.getOffsetFromLocal((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(0, (int) (short) 10);
        long long8 = dateTimeZone1.getMillisKeepLocal(dateTimeZone6, (-61827926399999L));
        java.util.TimeZone timeZone9 = null;
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forTimeZone(timeZone9);
        java.lang.String str12 = dateTimeZone10.getNameKey((long) 100);
        boolean boolean13 = dateTimeZone10.isFixed();
        org.joda.time.chrono.GJChronology gJChronology14 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone10);
        long long16 = dateTimeZone10.convertUTCToLocal(5200L);
        java.util.Locale.LanguageRange[] languageRangeArray17 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList18 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList18, languageRangeArray17);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap20 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList21 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList18, strMap20);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap22 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList23 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList21, strMap22);
        java.util.Locale.LanguageRange[] languageRangeArray24 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList25 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList25, languageRangeArray24);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap27 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList28 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList25, strMap27);
        java.lang.String[] strArray32 = new java.lang.String[] { "English", "English", "hi!" };
        java.util.ArrayList<java.lang.String> strList33 = new java.util.ArrayList<java.lang.String>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList33, strArray32);
        java.util.List<java.lang.String> strList35 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList25, (java.util.Collection<java.lang.String>) strList33);
        java.util.Locale.FilteringMode filteringMode36 = null;
        java.util.List<java.lang.String> strList37 = java.util.Locale.filterTags(languageRangeList23, (java.util.Collection<java.lang.String>) strList33, filteringMode36);
        java.util.Locale.LanguageRange[] languageRangeArray38 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList39 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList39, languageRangeArray38);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap41 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList42 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList39, strMap41);
        java.util.Locale.LanguageRange[] languageRangeArray43 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList44 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList44, languageRangeArray43);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap46 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList47 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList44, strMap46);
        java.lang.String[] strArray51 = new java.lang.String[] { "English", "English", "hi!" };
        java.util.ArrayList<java.lang.String> strList52 = new java.util.ArrayList<java.lang.String>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList52, strArray51);
        java.util.List<java.lang.String> strList54 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList44, (java.util.Collection<java.lang.String>) strList52);
        java.util.List<java.lang.String> strList55 = java.util.Locale.filterTags(languageRangeList42, (java.util.Collection<java.lang.String>) strList54);
        java.util.List<java.lang.String> strList56 = java.util.Locale.filterTags(languageRangeList23, (java.util.Collection<java.lang.String>) strList55);
        java.util.Locale.LanguageRange[] languageRangeArray57 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList58 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList58, languageRangeArray57);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap60 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList61 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList58, strMap60);
        java.lang.String[] strArray65 = new java.lang.String[] { "English", "English", "hi!" };
        java.util.ArrayList<java.lang.String> strList66 = new java.util.ArrayList<java.lang.String>();
        boolean boolean67 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList66, strArray65);
        java.util.List<java.lang.String> strList68 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList58, (java.util.Collection<java.lang.String>) strList66);
        java.util.List<java.lang.String> strList69 = java.util.Locale.filterTags(languageRangeList23, (java.util.Collection<java.lang.String>) strList68);
        boolean boolean70 = dateTimeZone10.equals((java.lang.Object) languageRangeList23);
        long long72 = dateTimeZone1.getMillisKeepLocal(dateTimeZone10, (long) 'u');
        int int74 = dateTimeZone1.getOffsetFromLocal(12888000000L);
        java.util.TimeZone timeZone75 = dateTimeZone1.toTimeZone();
        java.util.TimeZone timeZone76 = null;
        org.joda.time.DateTimeZone dateTimeZone77 = org.joda.time.DateTimeZone.forTimeZone(timeZone76);
        org.joda.time.chrono.GJChronology gJChronology78 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone77);
        org.joda.time.DurationField durationField79 = gJChronology78.halfdays();
        long long83 = gJChronology78.add((long) 'a', (-1L), (int) (short) 0);
        boolean boolean85 = gJChronology78.equals((java.lang.Object) 0);
        org.joda.time.DateTimeField dateTimeField86 = gJChronology78.dayOfMonth();
        org.joda.time.DurationField durationField87 = gJChronology78.days();
        org.joda.time.DateTimeZone dateTimeZone88 = gJChronology78.getZone();
        boolean boolean89 = dateTimeZone1.equals((java.lang.Object) gJChronology78);
        java.lang.String str91 = dateTimeZone1.getShortName(14452100L);
        int int93 = dateTimeZone1.getOffsetFromLocal(262974600000L);
        boolean boolean95 = dateTimeZone1.isStandardOffset(11481480000052L);
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 52 + "'", int3 == 52);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-61827926999947L) + "'", long8 == (-61827926999947L));
        org.junit.Assert.assertNotNull(dateTimeZone10);
// flaky:         org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(gJChronology14);
// flaky:         org.junit.Assert.assertTrue("'" + long16 + "' != '" + 5252L + "'", long16 == 5252L);
        org.junit.Assert.assertNotNull(languageRangeArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(languageRangeList21);
        org.junit.Assert.assertNotNull(languageRangeList23);
        org.junit.Assert.assertNotNull(languageRangeArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(languageRangeList28);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(strList35);
        org.junit.Assert.assertNotNull(strList37);
        org.junit.Assert.assertNotNull(languageRangeArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(languageRangeList42);
        org.junit.Assert.assertNotNull(languageRangeArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(languageRangeList47);
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(strList54);
        org.junit.Assert.assertNotNull(strList55);
        org.junit.Assert.assertNotNull(strList56);
        org.junit.Assert.assertNotNull(languageRangeArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(languageRangeList61);
        org.junit.Assert.assertNotNull(strArray65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(strList68);
        org.junit.Assert.assertNotNull(strList69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + long72 + "' != '" + 117L + "'", long72 == 117L);
// flaky:         org.junit.Assert.assertTrue("'" + int74 + "' != '" + 52 + "'", int74 == 52);
        org.junit.Assert.assertNotNull(timeZone75);
// flaky:         org.junit.Assert.assertEquals(timeZone75.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTimeZone77);
        org.junit.Assert.assertNotNull(gJChronology78);
        org.junit.Assert.assertNotNull(durationField79);
        org.junit.Assert.assertTrue("'" + long83 + "' != '" + 97L + "'", long83 == 97L);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(dateTimeField86);
        org.junit.Assert.assertNotNull(durationField87);
        org.junit.Assert.assertNotNull(dateTimeZone88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str91 + "' != '" + "+00:00:00.052" + "'", str91, "+00:00:00.052");
// flaky:         org.junit.Assert.assertTrue("'" + int93 + "' != '" + 52 + "'", int93 == 52);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + true + "'", boolean95 == true);
    }

    @Test
    public void test19247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19247");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = gJChronology2.halfdays();
        long long7 = gJChronology2.add((long) 'a', (-1L), (int) (short) 0);
        org.joda.time.DateTimeField dateTimeField8 = gJChronology2.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField9 = gJChronology2.centuryOfEra();
        long long13 = gJChronology2.add(262974600000L, (long) (byte) 100, (int) '4');
        org.joda.time.DurationField durationField14 = gJChronology2.months();
        org.joda.time.DurationField durationField15 = gJChronology2.years();
        org.joda.time.DateTimeField dateTimeField16 = gJChronology2.dayOfYear();
        long long20 = gJChronology2.add((-740275191619200000L), 14698634023260000L, (int) (byte) -1);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 97L + "'", long7 == 97L);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 262974605200L + "'", long13 == 262974605200L);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + (-754973825642460000L) + "'", long20 == (-754973825642460000L));
    }

    @Test
    public void test19248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19248");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = gJChronology2.halfdays();
        long long7 = gJChronology2.add((long) 'a', (-1L), (int) (short) 0);
        boolean boolean9 = gJChronology2.equals((java.lang.Object) 0);
        org.joda.time.DateTimeField dateTimeField10 = gJChronology2.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField11 = gJChronology2.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField12 = gJChronology2.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField13 = gJChronology2.clockhourOfHalfday();
        org.joda.time.DurationField durationField14 = gJChronology2.weekyears();
        org.joda.time.DurationField durationField15 = gJChronology2.weekyears();
        org.joda.time.DateTimeField dateTimeField16 = gJChronology2.minuteOfDay();
        org.joda.time.DurationField durationField17 = gJChronology2.weekyears();
        org.joda.time.DateTimeField dateTimeField18 = gJChronology2.secondOfDay();
        boolean boolean19 = dateTimeField18.isLenient();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 97L + "'", long7 == 97L);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test19249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19249");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (short) 0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = gJChronology2.millis();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(durationField3);
    }

    @Test
    public void test19250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19250");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = gJChronology2.halfdays();
        org.joda.time.Chronology chronology4 = gJChronology2.withUTC();
        java.lang.String str5 = gJChronology2.toString();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology2.hourOfHalfday();
        org.joda.time.DurationField durationField7 = gJChronology2.millis();
        org.joda.time.DurationField durationField8 = gJChronology2.hours();
        org.joda.time.DurationField durationField9 = gJChronology2.halfdays();
        org.joda.time.DateTimeField dateTimeField10 = gJChronology2.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField11 = gJChronology2.millisOfDay();
        org.joda.time.DateTimeField dateTimeField12 = gJChronology2.clockhourOfDay();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(chronology4);
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "GJChronology[+00:00:00.052]" + "'", str5, "GJChronology[+00:00:00.052]");
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
    }

    @Test
    public void test19251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19251");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField3 = gJChronology2.yearOfCentury();
        org.joda.time.DurationField durationField4 = gJChronology2.minutes();
        org.joda.time.DurationField durationField5 = gJChronology2.weeks();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology2.secondOfDay();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
    }

    @Test
    public void test19252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19252");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) -1, 52);
        int int4 = dateTimeZone2.getOffset(831201L);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-6720000) + "'", int4 == (-6720000));
    }

    @Test
    public void test19253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19253");
        java.util.Locale.Category category0 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale1 = java.util.Locale.getDefault();
        boolean boolean2 = locale1.hasExtensions();
        java.lang.String str3 = locale1.getISO3Language();
        java.util.Locale.setDefault(category0, locale1);
        java.util.Locale locale5 = java.util.Locale.ITALIAN;
        java.util.Locale locale6 = locale5.stripExtensions();
        java.util.Locale.setDefault(category0, locale6);
        java.util.Locale locale10 = new java.util.Locale("DurationField[halfdays]", "\u82f1\u6587");
        java.util.Locale.setDefault(category0, locale10);
        java.util.Locale locale12 = java.util.Locale.getDefault(category0);
        java.util.TimeZone timeZone13 = null;
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forTimeZone(timeZone13);
        org.joda.time.chrono.GJChronology gJChronology15 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone14);
        java.util.Locale locale17 = new java.util.Locale("hi!");
        java.lang.String str18 = locale17.getCountry();
        java.util.Locale locale19 = java.util.Locale.getDefault();
        java.lang.String str20 = locale19.getDisplayName();
        java.lang.String str21 = locale17.getDisplayScript(locale19);
        boolean boolean22 = dateTimeZone14.equals((java.lang.Object) locale19);
        java.util.Set<java.lang.String> strSet23 = locale19.getUnicodeLocaleKeys();
        java.util.Locale.setDefault(category0, locale19);
        java.util.TimeZone timeZone25 = null;
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forTimeZone(timeZone25);
        org.joda.time.chrono.GJChronology gJChronology27 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone26);
        int int29 = dateTimeZone26.getOffsetFromLocal((long) (-1));
        int int31 = dateTimeZone26.getOffset((-61827926399999L));
        int int33 = dateTimeZone26.getOffset((-244872043829L));
        java.util.Locale locale36 = java.util.Locale.forLanguageTag("Italian");
        java.lang.String str37 = dateTimeZone26.getShortName(3061065600000L, locale36);
        java.util.Locale locale38 = java.util.Locale.CANADA;
        java.lang.String str39 = locale36.getDisplayCountry(locale38);
        java.util.Locale.setDefault(category0, locale38);
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category0.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "it");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "ita" + "'", str3, "ita");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "it");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "it");
// flaky:         org.junit.Assert.assertEquals(locale10.toString(), "\u82f1\u6587");
        org.junit.Assert.assertNotNull(locale12);
// flaky:         org.junit.Assert.assertEquals(locale12.toString(), "\u82f1\u6587");
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(gJChronology15);
        org.junit.Assert.assertEquals(locale17.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "it");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Italian" + "'", str20, "Italian");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(strSet23);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertNotNull(gJChronology27);
// flaky:         org.junit.Assert.assertTrue("'" + int29 + "' != '" + 52 + "'", int29 == 52);
// flaky:         org.junit.Assert.assertTrue("'" + int31 + "' != '" + 52 + "'", int31 == 52);
// flaky:         org.junit.Assert.assertTrue("'" + int33 + "' != '" + 52 + "'", int33 == 52);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "italian");
// flaky:         org.junit.Assert.assertEquals("'" + str37 + "' != '" + "+00:00:00.052" + "'", str37, "+00:00:00.052");
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
    }

    @Test
    public void test19254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19254");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField3 = gJChronology2.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology2.hourOfHalfday();
        org.joda.time.DurationField durationField7 = gJChronology2.halfdays();
        org.joda.time.DateTimeField dateTimeField8 = gJChronology2.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField9 = gJChronology2.minuteOfHour();
        java.lang.String str10 = gJChronology2.toString();
        java.util.TimeZone timeZone11 = null;
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forTimeZone(timeZone11);
        java.lang.String str14 = dateTimeZone12.getNameKey((long) 100);
        boolean boolean15 = dateTimeZone12.isFixed();
        org.joda.time.chrono.GJChronology gJChronology16 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone12);
        int int17 = gJChronology16.getMinimumDaysInFirstWeek();
        java.lang.String str18 = gJChronology16.toString();
        org.joda.time.DateTimeField dateTimeField19 = gJChronology16.yearOfEra();
        org.joda.time.DateTimeField dateTimeField20 = gJChronology16.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField21 = gJChronology16.dayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology23 = gJChronology16.withZone(dateTimeZone22);
        org.joda.time.DateTimeField dateTimeField24 = chronology23.millisOfSecond();
        java.util.TimeZone timeZone25 = null;
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forTimeZone(timeZone25);
        org.joda.time.chrono.GJChronology gJChronology27 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone26);
        int int29 = dateTimeZone26.getOffsetFromLocal((long) (-1));
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forOffsetHours((int) '4');
        long long33 = dateTimeZone26.getMillisKeepLocal(dateTimeZone31, (-8380800000L));
        org.joda.time.Chronology chronology34 = chronology23.withZone(dateTimeZone26);
        java.lang.String str35 = dateTimeZone26.getID();
        java.util.TimeZone timeZone36 = null;
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.forTimeZone(timeZone36);
        int int39 = dateTimeZone37.getOffsetFromLocal((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(0, (int) (short) 10);
        long long44 = dateTimeZone37.getMillisKeepLocal(dateTimeZone42, (-61827926399999L));
        java.util.Locale locale46 = new java.util.Locale("hi!");
        boolean boolean47 = dateTimeZone37.equals((java.lang.Object) locale46);
        java.lang.String str48 = dateTimeZone37.getID();
        long long50 = dateTimeZone26.getMillisKeepLocal(dateTimeZone37, (-9903L));
        org.joda.time.Chronology chronology51 = gJChronology2.withZone(dateTimeZone26);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "GJChronology[+00:00:00.052]" + "'", str10, "GJChronology[+00:00:00.052]");
        org.junit.Assert.assertNotNull(dateTimeZone12);
// flaky:         org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(gJChronology16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 4 + "'", int17 == 4);
// flaky:         org.junit.Assert.assertEquals("'" + str18 + "' != '" + "GJChronology[+00:00:00.052]" + "'", str18, "GJChronology[+00:00:00.052]");
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertNotNull(gJChronology27);
// flaky:         org.junit.Assert.assertTrue("'" + int29 + "' != '" + 52 + "'", int29 == 52);
        org.junit.Assert.assertNotNull(dateTimeZone31);
// flaky:         org.junit.Assert.assertTrue("'" + long33 + "' != '" + (-8567999948L) + "'", long33 == (-8567999948L));
        org.junit.Assert.assertNotNull(chronology34);
// flaky:         org.junit.Assert.assertEquals("'" + str35 + "' != '" + "+00:00:00.052" + "'", str35, "+00:00:00.052");
        org.junit.Assert.assertNotNull(dateTimeZone37);
// flaky:         org.junit.Assert.assertTrue("'" + int39 + "' != '" + 52 + "'", int39 == 52);
        org.junit.Assert.assertNotNull(dateTimeZone42);
// flaky:         org.junit.Assert.assertTrue("'" + long44 + "' != '" + (-61827926999947L) + "'", long44 == (-61827926999947L));
        org.junit.Assert.assertEquals(locale46.toString(), "hi!");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str48 + "' != '" + "+00:00:00.052" + "'", str48, "+00:00:00.052");
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + (-9903L) + "'", long50 == (-9903L));
        org.junit.Assert.assertNotNull(chronology51);
    }

    @Test
    public void test19255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19255");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = gJChronology2.halfdays();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.millisOfDay();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.monthOfYear();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology2.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology2.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField8 = gJChronology2.clockhourOfHalfday();
        org.joda.time.DurationField durationField9 = gJChronology2.centuries();
        org.joda.time.DurationField durationField10 = gJChronology2.halfdays();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(durationField10);
    }

    @Test
    public void test19256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19256");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = gJChronology2.halfdays();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.millisOfDay();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.minuteOfDay();
        org.joda.time.DurationField durationField6 = gJChronology2.centuries();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology2.dayOfYear();
        java.lang.String str8 = gJChronology2.toString();
        org.joda.time.DateTimeField dateTimeField9 = gJChronology2.dayOfYear();
        org.joda.time.DateTimeField dateTimeField10 = gJChronology2.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField11 = gJChronology2.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField12 = gJChronology2.monthOfYear();
        org.joda.time.DateTimeField dateTimeField13 = gJChronology2.yearOfCentury();
        boolean boolean14 = dateTimeField13.isLenient();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "GJChronology[+00:00:00.052]" + "'", str8, "GJChronology[+00:00:00.052]");
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test19257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19257");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = gJChronology2.halfdays();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.millisOfDay();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.minuteOfDay();
        org.joda.time.DurationField durationField6 = gJChronology2.centuries();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology2.dayOfYear();
        java.lang.String str8 = gJChronology2.toString();
        org.joda.time.DateTimeField dateTimeField9 = gJChronology2.dayOfYear();
        org.joda.time.DateTimeField dateTimeField10 = gJChronology2.dayOfMonth();
        org.joda.time.DurationField durationField11 = gJChronology2.years();
        org.joda.time.DateTimeZone dateTimeZone12 = gJChronology2.getZone();
        org.joda.time.DurationField durationField13 = gJChronology2.millis();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "GJChronology[+00:00:00.052]" + "'", str8, "GJChronology[+00:00:00.052]");
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(durationField13);
    }

    @Test
    public void test19258() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19258");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = gJChronology2.halfdays();
        long long7 = gJChronology2.add((long) 'a', (-1L), (int) (short) 0);
        boolean boolean9 = gJChronology2.equals((java.lang.Object) 0);
        org.joda.time.DateTimeField dateTimeField10 = gJChronology2.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField11 = gJChronology2.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField12 = gJChronology2.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField13 = gJChronology2.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField14 = gJChronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField16 = gJChronology2.era();
        org.joda.time.DurationField durationField17 = gJChronology2.millis();
        org.joda.time.DateTimeField dateTimeField18 = gJChronology2.monthOfYear();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 97L + "'", long7 == 97L);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
    }

    @Test
    public void test19259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19259");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = gJChronology2.halfdays();
        long long7 = gJChronology2.add((long) 'a', (-1L), (int) (short) 0);
        boolean boolean9 = gJChronology2.equals((java.lang.Object) 0);
        org.joda.time.DateTimeField dateTimeField10 = gJChronology2.dayOfMonth();
        org.joda.time.DurationField durationField11 = gJChronology2.days();
        org.joda.time.DateTimeField dateTimeField12 = gJChronology2.minuteOfDay();
        org.joda.time.Chronology chronology13 = gJChronology2.withUTC();
        org.joda.time.DateTimeField dateTimeField14 = gJChronology2.era();
        java.lang.String str15 = gJChronology2.toString();
        int int16 = gJChronology2.getMinimumDaysInFirstWeek();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 97L + "'", long7 == 97L);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "GJChronology[+00:00:00.052]" + "'", str15, "GJChronology[+00:00:00.052]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 4 + "'", int16 == 4);
    }

    @Test
    public void test19260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19260");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        long long6 = dateTimeZone1.convertLocalToUTC((long) (byte) -1, true, 0L);
        boolean boolean8 = dateTimeZone1.equals((java.lang.Object) true);
        org.joda.time.chrono.GJChronology gJChronology9 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField10 = gJChronology9.weekyear();
        org.joda.time.DateTimeField dateTimeField11 = gJChronology9.era();
        org.joda.time.DateTimeField dateTimeField12 = gJChronology9.centuryOfEra();
        org.joda.time.Chronology chronology13 = gJChronology9.withUTC();
        org.joda.time.Chronology chronology14 = gJChronology9.withUTC();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology9.hourOfHalfday();
        java.lang.String str16 = gJChronology9.toString();
        org.joda.time.Chronology chronology17 = gJChronology9.withUTC();
        org.joda.time.DateTimeField dateTimeField18 = gJChronology9.yearOfEra();
        java.util.TimeZone timeZone19 = null;
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forTimeZone(timeZone19);
        org.joda.time.chrono.GJChronology gJChronology21 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone20);
        org.joda.time.DurationField durationField22 = gJChronology21.halfdays();
        long long26 = gJChronology21.add((long) 'a', (-1L), (int) (short) 0);
        long long30 = gJChronology21.add((long) (byte) 0, (long) '4', 100);
        org.joda.time.DateTimeField dateTimeField31 = gJChronology21.minuteOfHour();
        org.joda.time.DurationField durationField32 = gJChronology21.hours();
        org.joda.time.DateTimeField dateTimeField33 = gJChronology21.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField34 = gJChronology21.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField35 = gJChronology21.secondOfDay();
        org.joda.time.DateTimeField dateTimeField36 = gJChronology21.secondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone37 = gJChronology21.getZone();
        org.joda.time.DateTimeField dateTimeField38 = gJChronology21.era();
        org.joda.time.DateTimeField dateTimeField39 = gJChronology21.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField40 = gJChronology21.hourOfDay();
        org.joda.time.DurationField durationField41 = gJChronology21.days();
        org.joda.time.DurationField durationField42 = gJChronology21.weekyears();
        org.joda.time.DurationField durationField43 = gJChronology21.halfdays();
        java.util.TimeZone timeZone44 = null;
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.forTimeZone(timeZone44);
        org.joda.time.chrono.GJChronology gJChronology46 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone45);
        org.joda.time.DateTimeField dateTimeField47 = gJChronology46.millisOfSecond();
        org.joda.time.DurationField durationField48 = gJChronology46.millis();
        org.joda.time.DateTimeZone dateTimeZone49 = gJChronology46.getZone();
        long long51 = dateTimeZone49.nextTransition(4320000000L);
        org.joda.time.Chronology chronology52 = gJChronology21.withZone(dateTimeZone49);
        org.joda.time.Chronology chronology53 = gJChronology9.withZone(dateTimeZone49);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(gJChronology2);
// flaky:         org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-53L) + "'", long6 == (-53L));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(gJChronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "GJChronology[+00:00:00.052]" + "'", str16, "GJChronology[+00:00:00.052]");
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(gJChronology21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 97L + "'", long26 == 97L);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 5200L + "'", long30 == 5200L);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(durationField41);
        org.junit.Assert.assertNotNull(durationField42);
        org.junit.Assert.assertNotNull(durationField43);
        org.junit.Assert.assertNotNull(dateTimeZone45);
        org.junit.Assert.assertNotNull(gJChronology46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(durationField48);
        org.junit.Assert.assertNotNull(dateTimeZone49);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 4320000000L + "'", long51 == 4320000000L);
        org.junit.Assert.assertNotNull(chronology52);
        org.junit.Assert.assertNotNull(chronology53);
    }

    @Test
    public void test19261() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19261");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField3 = gJChronology2.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.weekyear();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.dayOfMonth();
        org.joda.time.DurationField durationField6 = gJChronology2.hours();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology2.monthOfYear();
        org.joda.time.DateTimeField dateTimeField8 = gJChronology2.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField9 = gJChronology2.secondOfMinute();
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        long long13 = gJChronology2.add(readablePeriod10, 55299600000L, 60000);
        org.joda.time.DateTimeField dateTimeField14 = gJChronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology2.hourOfHalfday();
        org.joda.time.DurationField durationField16 = gJChronology2.weeks();
        java.lang.String str17 = durationField16.getName();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 55299600000L + "'", long13 == 55299600000L);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "weeks" + "'", str17, "weeks");
    }

    @Test
    public void test19262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19262");
        java.util.Locale.Category category0 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale1 = java.util.Locale.CANADA;
        java.lang.String str2 = locale1.getISO3Language();
        java.util.Locale.setDefault(category0, locale1);
        java.util.Locale locale6 = new java.util.Locale("UTC", "zh_TW");
        java.util.Locale locale7 = java.util.Locale.CHINESE;
        boolean boolean8 = locale7.hasExtensions();
        java.util.Locale.setDefault(locale7);
        java.lang.String str10 = locale6.getDisplayLanguage(locale7);
        java.lang.String str11 = locale7.getVariant();
        java.lang.String str12 = locale7.getCountry();
        java.util.Locale.setDefault(category0, locale7);
        java.util.Locale locale14 = java.util.Locale.CANADA_FRENCH;
        boolean boolean15 = locale14.hasExtensions();
        java.lang.String str16 = locale14.getDisplayLanguage();
        java.util.Locale.setDefault(category0, locale14);
        java.util.Locale locale21 = new java.util.Locale("\u4e2d\u6587\u53f0\u6e7e\u5730\u533a)", "\u4e2d\u6587\u53f0\u6e7e\u5730\u533a)", "zh_TW");
        java.util.Locale.setDefault(category0, locale21);
        java.util.Locale locale23 = java.util.Locale.getDefault(category0);
        java.util.Locale locale24 = java.util.Locale.getDefault(category0);
        java.lang.String str25 = locale24.getScript();
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category0.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "eng" + "'", str2, "eng");
        org.junit.Assert.assertEquals(locale6.toString(), "utc_ZH_TW");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "zh");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "utc" + "'", str10, "utc");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "fr_CA");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "\u6cd5\u6587" + "'", str16, "\u6cd5\u6587");
// flaky:         org.junit.Assert.assertEquals(locale21.toString(), "\u4e2d\u6587\u53f0\u6e7e\u5730\u533a\u4e2d\u6587\u53f0\u6e7e\u5730\u533a)_zh_TW");
        org.junit.Assert.assertNotNull(locale23);
// flaky:         org.junit.Assert.assertEquals(locale23.toString(), "\u4e2d\u6587\u53f0\u6e7e\u5730\u533a\u4e2d\u6587\u53f0\u6e7e\u5730\u533a)_zh_TW");
        org.junit.Assert.assertNotNull(locale24);
// flaky:         org.junit.Assert.assertEquals(locale24.toString(), "\u4e2d\u6587\u53f0\u6e7e\u5730\u533a\u4e2d\u6587\u53f0\u6e7e\u5730\u533a)_zh_TW");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
    }

    @Test
    public void test19263() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19263");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = gJChronology2.halfdays();
        long long7 = gJChronology2.add((long) 'a', (-1L), (int) (short) 0);
        long long11 = gJChronology2.add((long) (byte) 0, (long) '4', 100);
        org.joda.time.DateTimeField dateTimeField12 = gJChronology2.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField13 = gJChronology2.year();
        org.joda.time.DurationField durationField14 = gJChronology2.months();
        org.joda.time.DurationField durationField15 = gJChronology2.hours();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 97L + "'", long7 == 97L);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 5200L + "'", long11 == 5200L);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(durationField15);
    }

    @Test
    public void test19264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19264");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = gJChronology2.halfdays();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.millisOfDay();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.minuteOfDay();
        org.joda.time.DurationField durationField6 = gJChronology2.centuries();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology2.dayOfYear();
        java.lang.String str8 = gJChronology2.toString();
        org.joda.time.DateTimeField dateTimeField9 = gJChronology2.dayOfYear();
        org.joda.time.DateTimeField dateTimeField10 = gJChronology2.dayOfMonth();
        org.joda.time.DurationField durationField11 = gJChronology2.years();
        org.joda.time.DateTimeField dateTimeField12 = gJChronology2.minuteOfHour();
        org.joda.time.DurationField durationField13 = gJChronology2.halfdays();
        org.joda.time.DateTimeField dateTimeField14 = gJChronology2.yearOfCentury();
        long long18 = gJChronology2.add(47400100L, (-2246400010L), 152);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "GJChronology[+00:00:00.052]" + "'", str8, "GJChronology[+00:00:00.052]");
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-341405401420L) + "'", long18 == (-341405401420L));
    }

    @Test
    public void test19265() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19265");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField3 = gJChronology2.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.secondOfMinute();
        org.joda.time.Chronology chronology6 = gJChronology2.withUTC();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology2.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField8 = gJChronology2.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField9 = gJChronology2.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone10 = gJChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField11 = gJChronology2.yearOfEra();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(dateTimeField11);
    }

    @Test
    public void test19266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19266");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(0, (int) (short) 10);
        int int4 = dateTimeZone2.getOffsetFromLocal((long) 236785);
        long long6 = dateTimeZone2.nextTransition((-64983772799999L));
        java.lang.String str7 = dateTimeZone2.toString();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 600000 + "'", int4 == 600000);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-64983772799999L) + "'", long6 == (-64983772799999L));
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "+00:10" + "'", str7, "+00:10");
    }

    @Test
    public void test19267() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19267");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clear();
        java.util.Locale.Builder builder3 = builder1.removeUnicodeLocaleAttribute("und");
        java.util.Locale.Builder builder4 = builder3.clearExtensions();
        java.util.Locale.Builder builder5 = builder4.clearExtensions();
        java.util.Locale locale6 = builder4.build();
        java.lang.String str7 = locale6.getDisplayName();
        java.util.TimeZone timeZone8 = null;
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forTimeZone(timeZone8);
        org.joda.time.chrono.GJChronology gJChronology10 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone9);
        org.joda.time.DurationField durationField11 = gJChronology10.halfdays();
        java.util.TimeZone timeZone12 = null;
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forTimeZone(timeZone12);
        org.joda.time.chrono.GJChronology gJChronology14 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone13);
        long long18 = dateTimeZone13.convertLocalToUTC((long) (byte) -1, true, 0L);
        boolean boolean20 = dateTimeZone13.equals((java.lang.Object) true);
        org.joda.time.Chronology chronology21 = gJChronology10.withZone(dateTimeZone13);
        org.joda.time.LocalDateTime localDateTime22 = null;
        boolean boolean23 = dateTimeZone13.isLocalDateTimeGap(localDateTime22);
        org.joda.time.chrono.GJChronology gJChronology24 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone13);
        java.util.Locale locale26 = java.util.Locale.KOREA;
        java.lang.String str27 = dateTimeZone13.getName(4492800100L, locale26);
        java.lang.String str28 = locale6.getDisplayLanguage(locale26);
        java.util.Locale locale30 = java.util.Locale.forLanguageTag("chinois");
        java.lang.String str31 = locale30.getISO3Country();
        java.util.Locale.Builder builder32 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder33 = builder32.clear();
        java.util.Locale.Builder builder35 = builder33.removeUnicodeLocaleAttribute("und");
        java.util.Locale.Builder builder36 = builder35.clearExtensions();
        java.util.Locale.Builder builder37 = builder36.clearExtensions();
        java.util.Locale locale38 = builder36.build();
        java.util.Locale.Builder builder40 = builder36.setLanguageTag("en-US");
        java.util.Locale.Builder builder42 = builder36.addUnicodeLocaleAttribute("deu");
        java.util.Locale locale43 = builder42.build();
        java.util.Set<java.lang.String> strSet44 = locale43.getUnicodeLocaleAttributes();
        java.lang.String str45 = locale43.getDisplayLanguage();
        java.util.Locale locale46 = null;
        java.lang.String str47 = locale43.getDisplayVariant(locale46);
        java.lang.String str48 = locale30.getDisplayCountry(locale43);
        java.lang.String str49 = locale6.getDisplayLanguage(locale43);
        java.lang.String str50 = locale6.toLanguageTag();
        java.util.Locale.setDefault(locale6);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(gJChronology10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(gJChronology14);
// flaky:         org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-53L) + "'", long18 == (-53L));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(gJChronology24);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "ko_KR");
// flaky:         org.junit.Assert.assertEquals("'" + str27 + "' != '" + "+00:00:00.052" + "'", str27, "+00:00:00.052");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "chinois");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "");
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "en_US_#u-deu");
        org.junit.Assert.assertNotNull(strSet44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "English" + "'", str45, "English");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "und" + "'", str50, "und");
    }

    @Test
    public void test19268() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19268");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((-315566928000000L));
        java.util.TimeZone timeZone2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forTimeZone(timeZone2);
        org.joda.time.chrono.GJChronology gJChronology4 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone3);
        org.joda.time.DurationField durationField5 = gJChronology4.halfdays();
        long long9 = gJChronology4.add((long) 'a', (-1L), (int) (short) 0);
        org.joda.time.DateTimeField dateTimeField10 = gJChronology4.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField11 = gJChronology4.centuryOfEra();
        long long15 = gJChronology4.add(262974600000L, (long) (byte) 100, (int) '4');
        org.joda.time.DateTimeField dateTimeField16 = gJChronology4.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField17 = gJChronology4.weekOfWeekyear();
        org.joda.time.DateTime dateTime18 = instant1.toDateTime((org.joda.time.Chronology) gJChronology4);
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int20 = instant1.get(dateTimeFieldType19);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The DateTimeFieldType must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(gJChronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 97L + "'", long9 == 97L);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 262974605200L + "'", long15 == 262974605200L);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTime18);
    }

    @Test
    public void test19269() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19269");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        long long6 = dateTimeZone1.convertLocalToUTC((long) (byte) -1, true, 0L);
        boolean boolean8 = dateTimeZone1.equals((java.lang.Object) true);
        org.joda.time.chrono.GJChronology gJChronology9 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField10 = gJChronology9.weekyear();
        org.joda.time.DateTimeField dateTimeField11 = gJChronology9.era();
        org.joda.time.DateTimeField dateTimeField12 = gJChronology9.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        long long16 = gJChronology9.add(readablePeriod13, (-26438399999L), (int) (byte) 100);
        org.joda.time.DurationField durationField17 = gJChronology9.hours();
        long long20 = durationField17.getValueAsLong(309258108000000L, (-6720000L));
        long long21 = durationField17.getUnitMillis();
        long long24 = durationField17.add(10229112000000L, (long) 87696);
        long long27 = durationField17.getDifferenceAsLong(46800100L, 2073600000L);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(gJChronology2);
// flaky:         org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-53L) + "'", long6 == (-53L));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(gJChronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-26438399999L) + "'", long16 == (-26438399999L));
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 85905030L + "'", long20 == 85905030L);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 3600000L + "'", long21 == 3600000L);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 10544817600000L + "'", long24 == 10544817600000L);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + (-562L) + "'", long27 == (-562L));
    }

    @Test
    public void test19270() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19270");
        java.util.Locale.Category category0 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale1 = java.util.Locale.getDefault();
        boolean boolean2 = locale1.hasExtensions();
        java.lang.String str3 = locale1.getISO3Language();
        java.util.Locale.setDefault(category0, locale1);
        java.util.Locale locale5 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale6 = java.util.Locale.ENGLISH;
        java.lang.String str7 = locale5.getDisplayLanguage(locale6);
        java.util.Locale locale8 = java.util.Locale.CANADA;
        java.lang.String str9 = locale8.getISO3Language();
        java.lang.String str10 = locale5.getDisplayVariant(locale8);
        java.lang.String str11 = locale5.getDisplayName();
        java.util.Locale.setDefault(category0, locale5);
        java.util.Locale locale13 = java.util.Locale.getDefault(category0);
        java.util.Locale locale14 = java.util.Locale.CHINESE;
        java.lang.String str15 = locale13.getDisplayScript(locale14);
        java.util.Set<java.lang.Character> charSet16 = locale14.getExtensionKeys();
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category0.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "en");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Chinese" + "'", str7, "Chinese");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "eng" + "'", str9, "eng");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Chinese (Taiwan)" + "'", str11, "Chinese (Taiwan)");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(charSet16);
    }

    @Test
    public void test19271() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19271");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField3 = gJChronology2.millisOfSecond();
        org.joda.time.DurationField durationField4 = gJChronology2.millis();
        org.joda.time.DurationField durationField5 = gJChronology2.weekyears();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology2.dayOfYear();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology2.yearOfEra();
        org.joda.time.DateTimeField dateTimeField8 = gJChronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField9 = gJChronology2.year();
        org.joda.time.DateTimeField dateTimeField10 = gJChronology2.millisOfSecond();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
    }

    @Test
    public void test19272() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19272");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = gJChronology2.halfdays();
        long long7 = gJChronology2.add((long) 'a', (-1L), (int) (short) 0);
        long long11 = gJChronology2.add((long) (byte) 0, (long) '4', 100);
        org.joda.time.DurationField durationField12 = gJChronology2.years();
        org.joda.time.DateTimeField dateTimeField13 = gJChronology2.dayOfYear();
        org.joda.time.DurationField durationField14 = gJChronology2.minutes();
        int int16 = durationField14.getValue(0L);
        long long18 = durationField14.getValueAsLong(1136050590211200000L);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 97L + "'", long7 == 97L);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 5200L + "'", long11 == 5200L);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 18934176503520L + "'", long18 == 18934176503520L);
    }

    @Test
    public void test19273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19273");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = gJChronology2.halfdays();
        long long7 = gJChronology2.add((long) 'a', (-1L), (int) (short) 0);
        long long11 = gJChronology2.add((long) (byte) 0, (long) '4', 100);
        org.joda.time.DateTimeField dateTimeField12 = gJChronology2.minuteOfHour();
        org.joda.time.DurationField durationField13 = gJChronology2.hours();
        org.joda.time.DateTimeField dateTimeField14 = gJChronology2.hourOfHalfday();
        java.util.TimeZone timeZone15 = null;
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forTimeZone(timeZone15);
        org.joda.time.chrono.GJChronology gJChronology17 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone16);
        java.util.Locale locale19 = new java.util.Locale("hi!");
        java.lang.String str20 = locale19.getCountry();
        java.util.Locale locale21 = java.util.Locale.getDefault();
        java.lang.String str22 = locale21.getDisplayName();
        java.lang.String str23 = locale19.getDisplayScript(locale21);
        boolean boolean24 = dateTimeZone16.equals((java.lang.Object) locale21);
        org.joda.time.Chronology chronology25 = gJChronology2.withZone(dateTimeZone16);
        org.joda.time.DateTimeField dateTimeField26 = gJChronology2.secondOfDay();
        org.joda.time.DurationField durationField27 = gJChronology2.minutes();
        org.joda.time.DateTimeField dateTimeField28 = gJChronology2.era();
        org.joda.time.Chronology chronology29 = gJChronology2.withUTC();
        org.joda.time.ReadablePartial readablePartial30 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray32 = gJChronology2.get(readablePartial30, (-86310444L));
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 97L + "'", long7 == 97L);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 5200L + "'", long11 == 5200L);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(gJChronology17);
        org.junit.Assert.assertEquals(locale19.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(chronology29);
    }

    @Test
    public void test19274() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19274");
        java.util.Locale locale1 = new java.util.Locale("Twi");
        org.junit.Assert.assertEquals(locale1.toString(), "twi");
    }

    @Test
    public void test19275() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19275");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Instant instant2 = org.joda.time.Instant.parse("weekyears", dateTimeFormatter1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test19276() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19276");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str3 = dateTimeZone1.getNameKey((long) 100);
        long long6 = dateTimeZone1.convertLocalToUTC((-2246399965L), true);
        long long10 = dateTimeZone1.convertLocalToUTC(4320000000L, true, (long) 'a');
        boolean boolean11 = dateTimeZone1.isFixed();
        java.util.TimeZone timeZone12 = null;
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forTimeZone(timeZone12);
        org.joda.time.chrono.GJChronology gJChronology14 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone13);
        org.joda.time.DurationField durationField15 = gJChronology14.halfdays();
        long long19 = gJChronology14.add((long) 'a', (-1L), (int) (short) 0);
        long long23 = gJChronology14.add((long) (byte) 0, (long) '4', 100);
        org.joda.time.DateTimeField dateTimeField24 = gJChronology14.minuteOfHour();
        org.joda.time.DurationField durationField25 = gJChronology14.hours();
        org.joda.time.DateTimeField dateTimeField26 = gJChronology14.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField27 = gJChronology14.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField28 = gJChronology14.secondOfDay();
        org.joda.time.DateTimeField dateTimeField29 = gJChronology14.secondOfMinute();
        boolean boolean30 = dateTimeZone1.equals((java.lang.Object) dateTimeField29);
        java.util.TimeZone timeZone31 = null;
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.forTimeZone(timeZone31);
        org.joda.time.chrono.GJChronology gJChronology33 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone32);
        long long37 = dateTimeZone32.convertLocalToUTC((long) (byte) -1, true, 0L);
        boolean boolean39 = dateTimeZone32.equals((java.lang.Object) true);
        java.util.Locale locale41 = java.util.Locale.getDefault();
        java.lang.String str42 = locale41.getDisplayLanguage();
        java.lang.String str43 = locale41.toLanguageTag();
        java.lang.String str44 = dateTimeZone32.getShortName(0L, locale41);
        long long46 = dateTimeZone1.getMillisKeepLocal(dateTimeZone32, (long) 12);
        java.lang.String str48 = dateTimeZone32.getShortName((-6048119851L));
        long long50 = dateTimeZone32.previousTransition((-3L));
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertNull(str3);
// flaky:         org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-2246400017L) + "'", long6 == (-2246400017L));
// flaky:         org.junit.Assert.assertTrue("'" + long10 + "' != '" + 4319999948L + "'", long10 == 4319999948L);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(gJChronology14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 97L + "'", long19 == 97L);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 5200L + "'", long23 == 5200L);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertNotNull(gJChronology33);
// flaky:         org.junit.Assert.assertTrue("'" + long37 + "' != '" + (-53L) + "'", long37 == (-53L));
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "und" + "'", str43, "und");
// flaky:         org.junit.Assert.assertEquals("'" + str44 + "' != '" + "+00:00:00.052" + "'", str44, "+00:00:00.052");
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 12L + "'", long46 == 12L);
// flaky:         org.junit.Assert.assertEquals("'" + str48 + "' != '" + "+00:00:00.052" + "'", str48, "+00:00:00.052");
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + (-3L) + "'", long50 == (-3L));
    }

    @Test
    public void test19277() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19277");
        java.util.List<java.util.Locale.LanguageRange> languageRangeList1 = java.util.Locale.LanguageRange.parse("halfdays");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap2 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList3 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList1, strMap2);
        java.util.List<java.util.Locale.LanguageRange> languageRangeList5 = java.util.Locale.LanguageRange.parse("halfdays");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap6 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList7 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList5, strMap6);
        java.util.Locale locale9 = new java.util.Locale("hi!");
        java.lang.String str10 = locale9.getCountry();
        java.util.Set<java.lang.String> strSet11 = locale9.getUnicodeLocaleKeys();
        java.util.Locale.FilteringMode filteringMode12 = java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES;
        java.util.List<java.lang.String> strList13 = java.util.Locale.filterTags(languageRangeList7, (java.util.Collection<java.lang.String>) strSet11, filteringMode12);
        java.lang.String str14 = java.util.Locale.lookupTag(languageRangeList1, (java.util.Collection<java.lang.String>) strList13);
        java.util.Locale locale17 = new java.util.Locale("hi!", "en-US");
        java.util.Set<java.lang.String> strSet18 = locale17.getUnicodeLocaleKeys();
        java.lang.String str19 = java.util.Locale.lookupTag(languageRangeList1, (java.util.Collection<java.lang.String>) strSet18);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap20 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList21 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList1, strMap20);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap22 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList23 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList21, strMap22);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap24 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList25 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList21, strMap24);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap26 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList27 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList25, strMap26);
        org.junit.Assert.assertNotNull(languageRangeList1);
        org.junit.Assert.assertNotNull(languageRangeList3);
        org.junit.Assert.assertNotNull(languageRangeList5);
        org.junit.Assert.assertNotNull(languageRangeList7);
        org.junit.Assert.assertEquals(locale9.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(strSet11);
        org.junit.Assert.assertTrue("'" + filteringMode12 + "' != '" + java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES + "'", filteringMode12.equals(java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(strList13);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertEquals(locale17.toString(), "hi!_EN-US");
        org.junit.Assert.assertNotNull(strSet18);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNotNull(languageRangeList21);
        org.junit.Assert.assertNotNull(languageRangeList23);
        org.junit.Assert.assertNotNull(languageRangeList25);
        org.junit.Assert.assertNotNull(languageRangeList27);
    }

    @Test
    public void test19278() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19278");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = gJChronology2.halfdays();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.millisOfDay();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.minuteOfDay();
        org.joda.time.DurationField durationField6 = gJChronology2.centuries();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology2.halfdayOfDay();
        java.util.Locale locale8 = java.util.Locale.ITALIAN;
        java.util.Locale locale9 = locale8.stripExtensions();
        java.util.Locale locale10 = java.util.Locale.CANADA;
        java.lang.String str11 = locale8.getDisplayVariant(locale10);
        boolean boolean12 = gJChronology2.equals((java.lang.Object) locale10);
        org.joda.time.DateTimeField dateTimeField13 = gJChronology2.monthOfYear();
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        long long17 = gJChronology2.add(readablePeriod14, (-261273587716800000L), 2);
        org.joda.time.DateTimeField dateTimeField18 = gJChronology2.yearOfCentury();
        org.joda.time.DurationField durationField19 = gJChronology2.minutes();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "it");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "it");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-261273587716800000L) + "'", long17 == (-261273587716800000L));
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
    }

    @Test
    public void test19279() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19279");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = gJChronology2.halfdays();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.millisOfDay();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.minuteOfDay();
        org.joda.time.DurationField durationField6 = gJChronology2.centuries();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology2.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField8 = gJChronology2.year();
        org.joda.time.Instant instant9 = gJChronology2.getGregorianCutover();
        java.util.TimeZone timeZone10 = null;
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forTimeZone(timeZone10);
        org.joda.time.chrono.GJChronology gJChronology12 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone11);
        org.joda.time.DurationField durationField13 = gJChronology12.halfdays();
        org.joda.time.DateTimeField dateTimeField14 = gJChronology12.millisOfDay();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology12.minuteOfDay();
        org.joda.time.DurationField durationField16 = gJChronology12.centuries();
        org.joda.time.DateTimeField dateTimeField17 = gJChronology12.dayOfYear();
        java.lang.String str18 = gJChronology12.toString();
        org.joda.time.DateTimeField dateTimeField19 = gJChronology12.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone20 = gJChronology12.getZone();
        org.joda.time.chrono.GJChronology gJChronology21 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone20);
        org.joda.time.Chronology chronology22 = gJChronology2.withZone(dateTimeZone20);
        long long25 = dateTimeZone20.convertLocalToUTC(349200L, false);
        java.lang.Object obj26 = null;
        boolean boolean27 = dateTimeZone20.equals(obj26);
        long long29 = dateTimeZone20.nextTransition(99L);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(instant9);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(gJChronology12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
// flaky:         org.junit.Assert.assertEquals("'" + str18 + "' != '" + "GJChronology[+00:00:00.052]" + "'", str18, "GJChronology[+00:00:00.052]");
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(gJChronology21);
        org.junit.Assert.assertNotNull(chronology22);
// flaky:         org.junit.Assert.assertTrue("'" + long25 + "' != '" + 349148L + "'", long25 == 349148L);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 99L + "'", long29 == 99L);
    }

    @Test
    public void test19280() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19280");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField3 = gJChronology2.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology2.hourOfHalfday();
        org.joda.time.DurationField durationField7 = gJChronology2.halfdays();
        org.joda.time.DateTimeField dateTimeField8 = gJChronology2.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField9 = gJChronology2.clockhourOfHalfday();
        org.joda.time.Instant instant10 = gJChronology2.getGregorianCutover();
        org.joda.time.DurationField durationField11 = gJChronology2.centuries();
        org.joda.time.DateTimeField dateTimeField12 = gJChronology2.weekyear();
        org.joda.time.DateTimeField dateTimeField13 = gJChronology2.era();
        org.joda.time.ReadablePartial readablePartial14 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long16 = gJChronology2.set(readablePartial14, 35000L);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(instant10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
    }

    @Test
    public void test19281() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19281");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str3 = dateTimeZone1.getNameKey((long) 100);
        boolean boolean4 = dateTimeZone1.isFixed();
        org.joda.time.chrono.GJChronology gJChronology5 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        int int6 = gJChronology5.getMinimumDaysInFirstWeek();
        java.lang.String str7 = gJChronology5.toString();
        org.joda.time.DateTimeField dateTimeField8 = gJChronology5.clockhourOfDay();
        // The following exception was thrown during execution in test generation
        try {
            long long13 = gJChronology5.getDateTimeMillis(55299599, (-19), (-125844), (-49998));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -49998 for millisOfDay must be in the range [0,86399999]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(gJChronology5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 4 + "'", int6 == 4);
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "GJChronology[+00:00:00.052]" + "'", str7, "GJChronology[+00:00:00.052]");
        org.junit.Assert.assertNotNull(dateTimeField8);
    }

    @Test
    public void test19282() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19282");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = gJChronology2.halfdays();
        long long7 = gJChronology2.add((long) 'a', (-1L), (int) (short) 0);
        long long11 = gJChronology2.add((long) (byte) 0, (long) '4', 100);
        org.joda.time.DateTimeField dateTimeField12 = gJChronology2.minuteOfHour();
        org.joda.time.DurationField durationField13 = gJChronology2.hours();
        org.joda.time.DateTimeField dateTimeField14 = gJChronology2.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology2.millisOfSecond();
        org.joda.time.DurationField durationField16 = gJChronology2.seconds();
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        long long20 = gJChronology2.add(readablePeriod17, (long) 1431201, (int) (short) 1);
        org.joda.time.DurationField durationField21 = gJChronology2.seconds();
        org.joda.time.DateTimeField dateTimeField22 = gJChronology2.halfdayOfDay();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 97L + "'", long7 == 97L);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 5200L + "'", long11 == 5200L);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 1431201L + "'", long20 == 1431201L);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
    }

    @Test
    public void test19283() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19283");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField3 = gJChronology2.era();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.centuryOfEra();
        org.joda.time.DurationField durationField5 = gJChronology2.hours();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology2.monthOfYear();
        org.joda.time.DurationField durationField7 = gJChronology2.weekyears();
        org.joda.time.DurationField durationField8 = gJChronology2.centuries();
        org.joda.time.DateTimeField dateTimeField9 = gJChronology2.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField10 = gJChronology2.yearOfEra();
        org.joda.time.DurationField durationField11 = gJChronology2.weekyears();
        org.joda.time.DurationField durationField12 = gJChronology2.centuries();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(durationField12);
    }

    @Test
    public void test19284() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19284");
        java.util.Locale locale0 = java.util.Locale.TAIWAN;
        java.lang.String str1 = locale0.getVariant();
        java.util.Locale locale2 = java.util.Locale.ENGLISH;
        java.lang.String str3 = locale0.getDisplayScript(locale2);
        java.lang.String str4 = locale2.getDisplayCountry();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "en");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
    }

    @Test
    public void test19285() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19285");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = gJChronology2.halfdays();
        long long7 = gJChronology2.add((long) 'a', (-1L), (int) (short) 0);
        boolean boolean9 = gJChronology2.equals((java.lang.Object) 0);
        org.joda.time.DateTimeField dateTimeField10 = gJChronology2.dayOfMonth();
        org.joda.time.DurationField durationField11 = gJChronology2.days();
        org.joda.time.DurationField durationField12 = gJChronology2.seconds();
        org.joda.time.DateTimeField dateTimeField13 = gJChronology2.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField14 = gJChronology2.clockhourOfDay();
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        long long18 = gJChronology2.add(readablePeriod15, (long) 'a', 7200);
        org.joda.time.DateTimeField dateTimeField19 = gJChronology2.monthOfYear();
        org.joda.time.DateTimeField dateTimeField20 = gJChronology2.monthOfYear();
        org.joda.time.DurationField durationField21 = gJChronology2.weekyears();
        org.joda.time.DateTimeField dateTimeField22 = gJChronology2.year();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 97L + "'", long7 == 97L);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 97L + "'", long18 == 97L);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
    }

    @Test
    public void test19286() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19286");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        boolean boolean2 = instant1.isEqualNow();
        java.lang.String str3 = instant1.toString();
        org.joda.time.Instant instant5 = new org.joda.time.Instant(52L);
        boolean boolean6 = instant5.isEqualNow();
        java.lang.String str7 = instant5.toString();
        java.lang.String str8 = instant5.toString();
        org.joda.time.Instant instant11 = instant5.withDurationAdded(115200000L, (int) (short) 1);
        int int12 = instant1.compareTo((org.joda.time.ReadableInstant) instant5);
        org.joda.time.Instant instant14 = new org.joda.time.Instant(52L);
        boolean boolean15 = instant14.isEqualNow();
        org.joda.time.ReadableDuration readableDuration16 = null;
        org.joda.time.Instant instant17 = instant14.plus(readableDuration16);
        boolean boolean19 = instant17.equals((java.lang.Object) ' ');
        boolean boolean20 = instant5.isAfter((org.joda.time.ReadableInstant) instant17);
        java.lang.String str21 = instant17.toString();
        long long22 = instant17.getMillis();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "1970-01-01T00:00:00.052Z" + "'", str3, "1970-01-01T00:00:00.052Z");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "1970-01-01T00:00:00.052Z" + "'", str7, "1970-01-01T00:00:00.052Z");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "1970-01-01T00:00:00.052Z" + "'", str8, "1970-01-01T00:00:00.052Z");
        org.junit.Assert.assertNotNull(instant11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(instant17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "1970-01-01T00:00:00.052Z" + "'", str21, "1970-01-01T00:00:00.052Z");
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 52L + "'", long22 == 52L);
    }

    @Test
    public void test19287() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19287");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField3 = gJChronology2.millisOfSecond();
        org.joda.time.DurationField durationField4 = gJChronology2.millis();
        org.joda.time.DurationField durationField5 = gJChronology2.weeks();
        org.joda.time.DurationField durationField6 = gJChronology2.months();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology2.hourOfDay();
        org.joda.time.Instant instant8 = gJChronology2.getGregorianCutover();
        org.joda.time.DurationField durationField9 = gJChronology2.seconds();
        org.joda.time.DateTimeField dateTimeField10 = gJChronology2.era();
        org.joda.time.DateTimeField dateTimeField11 = gJChronology2.minuteOfDay();
        org.joda.time.DurationField durationField12 = gJChronology2.weekyears();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(instant8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(durationField12);
    }

    @Test
    public void test19288() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19288");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        long long4 = dateTimeZone1.previousTransition((-2246399965L));
        java.util.Locale locale9 = new java.util.Locale("zho", "+52:00", "");
        java.lang.String str10 = locale9.getDisplayName();
        java.lang.String str11 = locale9.getLanguage();
        java.lang.String str12 = dateTimeZone1.getShortName(315705540000L, locale9);
        java.util.Locale.setDefault(locale9);
        java.util.TimeZone timeZone14 = null;
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forTimeZone(timeZone14);
        java.lang.String str17 = dateTimeZone15.getNameKey((long) 100);
        boolean boolean18 = dateTimeZone15.isFixed();
        org.joda.time.chrono.GJChronology gJChronology19 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone15);
        java.lang.String str20 = dateTimeZone15.toString();
        long long23 = dateTimeZone15.adjustOffset((-61827739199999L), false);
        boolean boolean25 = dateTimeZone15.isStandardOffset(289240212400L);
        org.joda.time.chrono.GJChronology gJChronology26 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone15);
        boolean boolean27 = locale9.equals((java.lang.Object) gJChronology26);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-2246399965L) + "'", long4 == (-2246399965L));
        org.junit.Assert.assertEquals(locale9.toString(), "zho_+52:00");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "zho (+52:00)" + "'", str10, "zho (+52:00)");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "zho" + "'", str11, "zho");
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+00:00:00.052" + "'", str12, "+00:00:00.052");
        org.junit.Assert.assertNotNull(dateTimeZone15);
// flaky:         org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(gJChronology19);
// flaky:         org.junit.Assert.assertEquals("'" + str20 + "' != '" + "+00:00:00.052" + "'", str20, "+00:00:00.052");
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + (-61827739199999L) + "'", long23 == (-61827739199999L));
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(gJChronology26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test19289() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19289");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField3 = gJChronology2.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.weekyear();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.halfdayOfDay();
        org.joda.time.DurationField durationField6 = gJChronology2.years();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology2.clockhourOfDay();
        java.util.TimeZone timeZone8 = null;
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forTimeZone(timeZone8);
        org.joda.time.chrono.GJChronology gJChronology10 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone9);
        org.joda.time.DurationField durationField11 = gJChronology10.halfdays();
        org.joda.time.DateTimeField dateTimeField12 = gJChronology10.millisOfDay();
        org.joda.time.DateTimeField dateTimeField13 = gJChronology10.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField14 = gJChronology10.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone15 = gJChronology10.getZone();
        boolean boolean16 = dateTimeZone15.isFixed();
        boolean boolean17 = dateTimeZone15.isFixed();
        org.joda.time.Chronology chronology18 = gJChronology2.withZone(dateTimeZone15);
        java.util.TimeZone timeZone19 = null;
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forTimeZone(timeZone19);
        org.joda.time.chrono.GJChronology gJChronology21 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone20);
        org.joda.time.DurationField durationField22 = gJChronology21.halfdays();
        org.joda.time.DateTimeField dateTimeField23 = gJChronology21.millisOfDay();
        org.joda.time.DateTimeField dateTimeField24 = gJChronology21.minuteOfDay();
        org.joda.time.DurationField durationField25 = gJChronology21.centuries();
        org.joda.time.DateTimeField dateTimeField26 = gJChronology21.dayOfYear();
        org.joda.time.DateTimeField dateTimeField27 = gJChronology21.millisOfDay();
        org.joda.time.DateTimeField dateTimeField28 = gJChronology21.year();
        org.joda.time.DateTimeField dateTimeField29 = gJChronology21.weekyear();
        org.joda.time.DateTimeZone dateTimeZone30 = gJChronology21.getZone();
        boolean boolean31 = gJChronology2.equals((java.lang.Object) gJChronology21);
        org.joda.time.ReadablePeriod readablePeriod32 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray35 = gJChronology2.get(readablePeriod32, (-598845L), (-3703934725113598183L));
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(gJChronology10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(gJChronology21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
    }

    @Test
    public void test19290() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19290");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = gJChronology2.halfdays();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.millisOfDay();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.monthOfYear();
        org.joda.time.Chronology chronology6 = gJChronology2.withUTC();
        org.joda.time.Instant instant7 = gJChronology2.getGregorianCutover();
        java.util.TimeZone timeZone8 = null;
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forTimeZone(timeZone8);
        org.joda.time.chrono.GJChronology gJChronology10 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone9);
        org.joda.time.DateTimeField dateTimeField11 = gJChronology10.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField12 = gJChronology10.weekyearOfCentury();
        org.joda.time.Instant instant13 = gJChronology10.getGregorianCutover();
        org.joda.time.Instant instant15 = instant13.withMillis(0L);
        org.joda.time.Instant instant17 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone18 = null;
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forTimeZone(timeZone18);
        org.joda.time.chrono.GJChronology gJChronology20 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone19);
        org.joda.time.DateTimeField dateTimeField21 = gJChronology20.millisOfSecond();
        int int22 = instant17.get(dateTimeField21);
        org.joda.time.Instant instant24 = instant17.plus(0L);
        int int25 = instant15.compareTo((org.joda.time.ReadableInstant) instant24);
        java.util.TimeZone timeZone26 = null;
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forTimeZone(timeZone26);
        org.joda.time.chrono.GJChronology gJChronology28 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone27);
        org.joda.time.DurationField durationField29 = gJChronology28.halfdays();
        org.joda.time.DateTimeField dateTimeField30 = gJChronology28.millisOfDay();
        org.joda.time.DateTimeField dateTimeField31 = gJChronology28.minuteOfDay();
        org.joda.time.DurationField durationField32 = gJChronology28.centuries();
        org.joda.time.DateTimeField dateTimeField33 = gJChronology28.halfdayOfDay();
        java.util.Locale locale34 = java.util.Locale.ITALIAN;
        java.util.Locale locale35 = locale34.stripExtensions();
        java.util.Locale locale36 = java.util.Locale.CANADA;
        java.lang.String str37 = locale34.getDisplayVariant(locale36);
        boolean boolean38 = gJChronology28.equals((java.lang.Object) locale36);
        org.joda.time.DateTime dateTime39 = instant15.toDateTime((org.joda.time.Chronology) gJChronology28);
        boolean boolean40 = instant7.isAfter((org.joda.time.ReadableInstant) dateTime39);
        org.joda.time.Instant instant42 = new org.joda.time.Instant(52L);
        boolean boolean43 = instant42.isEqualNow();
        org.joda.time.ReadableDuration readableDuration44 = null;
        org.joda.time.Instant instant45 = instant42.plus(readableDuration44);
        boolean boolean47 = instant45.equals((java.lang.Object) ' ');
        org.joda.time.Instant instant49 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone50 = null;
        org.joda.time.DateTimeZone dateTimeZone51 = org.joda.time.DateTimeZone.forTimeZone(timeZone50);
        org.joda.time.chrono.GJChronology gJChronology52 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone51);
        org.joda.time.DateTimeField dateTimeField53 = gJChronology52.millisOfSecond();
        int int54 = instant49.get(dateTimeField53);
        boolean boolean55 = instant49.isEqualNow();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter56 = null;
        java.lang.String str57 = instant49.toString(dateTimeFormatter56);
        boolean boolean58 = instant49.isAfterNow();
        org.joda.time.Instant instant59 = instant49.toInstant();
        org.joda.time.Instant instant61 = instant49.plus(1512000000L);
        boolean boolean62 = instant45.isAfter((org.joda.time.ReadableInstant) instant61);
        boolean boolean63 = dateTime39.isAfter((org.joda.time.ReadableInstant) instant61);
        org.joda.time.Instant instant65 = org.joda.time.Instant.parse("2022-02-11T08:35:58.840Z");
        org.joda.time.ReadableDuration readableDuration66 = null;
        org.joda.time.Instant instant68 = instant65.withDurationAdded(readableDuration66, (-61352915));
        boolean boolean69 = dateTime39.isAfter((org.joda.time.ReadableInstant) instant65);
        java.util.TimeZone timeZone70 = null;
        org.joda.time.DateTimeZone dateTimeZone71 = org.joda.time.DateTimeZone.forTimeZone(timeZone70);
        org.joda.time.chrono.GJChronology gJChronology72 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone71);
        org.joda.time.DurationField durationField73 = gJChronology72.halfdays();
        long long77 = gJChronology72.add((long) 'a', (-1L), (int) (short) 0);
        org.joda.time.DateTimeField dateTimeField78 = gJChronology72.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField79 = gJChronology72.secondOfMinute();
        org.joda.time.Instant instant81 = new org.joda.time.Instant(52L);
        boolean boolean82 = instant81.isEqualNow();
        org.joda.time.ReadableDuration readableDuration83 = null;
        org.joda.time.Instant instant84 = instant81.plus(readableDuration83);
        boolean boolean85 = gJChronology72.equals((java.lang.Object) instant81);
        org.joda.time.ReadableDuration readableDuration86 = null;
        org.joda.time.Instant instant88 = instant81.withDurationAdded(readableDuration86, 52);
        boolean boolean89 = dateTime39.isAfter((org.joda.time.ReadableInstant) instant81);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter90 = null;
        java.lang.String str91 = dateTime39.toString(dateTimeFormatter90);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter92 = null;
        java.lang.String str93 = dateTime39.toString(dateTimeFormatter92);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(instant7);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(gJChronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(instant13);
        org.junit.Assert.assertNotNull(instant15);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(gJChronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
// flaky:         org.junit.Assert.assertTrue("'" + int22 + "' != '" + 104 + "'", int22 == 104);
        org.junit.Assert.assertNotNull(instant24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertNotNull(gJChronology28);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "it");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "it");
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(instant45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(dateTimeZone51);
        org.junit.Assert.assertNotNull(gJChronology52);
        org.junit.Assert.assertNotNull(dateTimeField53);
// flaky:         org.junit.Assert.assertTrue("'" + int54 + "' != '" + 104 + "'", int54 == 104);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "1970-01-01T00:00:00.052Z" + "'", str57, "1970-01-01T00:00:00.052Z");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(instant59);
        org.junit.Assert.assertNotNull(instant61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(instant65);
        org.junit.Assert.assertNotNull(instant68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(dateTimeZone71);
        org.junit.Assert.assertNotNull(gJChronology72);
        org.junit.Assert.assertNotNull(durationField73);
        org.junit.Assert.assertTrue("'" + long77 + "' != '" + 97L + "'", long77 == 97L);
        org.junit.Assert.assertNotNull(dateTimeField78);
        org.junit.Assert.assertNotNull(dateTimeField79);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(instant84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(instant88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str91 + "' != '" + "1970-01-01T00:00:00.052+00:00:00.052" + "'", str91, "1970-01-01T00:00:00.052+00:00:00.052");
// flaky:         org.junit.Assert.assertEquals("'" + str93 + "' != '" + "1970-01-01T00:00:00.052+00:00:00.052" + "'", str93, "1970-01-01T00:00:00.052+00:00:00.052");
    }

    @Test
    public void test19291() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19291");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = gJChronology2.halfdays();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.millisOfDay();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.minuteOfDay();
        org.joda.time.DurationField durationField6 = gJChronology2.centuries();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology2.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField8 = gJChronology2.year();
        org.joda.time.DurationField durationField9 = gJChronology2.weekyears();
        java.lang.String str10 = gJChronology2.toString();
        org.joda.time.Chronology chronology11 = gJChronology2.withUTC();
        org.joda.time.DurationField durationField12 = gJChronology2.halfdays();
        org.joda.time.DateTimeField dateTimeField13 = gJChronology2.clockhourOfDay();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(durationField9);
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "GJChronology[+00:00:00.052]" + "'", str10, "GJChronology[+00:00:00.052]");
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
    }

    @Test
    public void test19292() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19292");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clear();
        java.util.Locale.Builder builder2 = builder0.clearExtensions();
        java.util.Locale.Builder builder4 = builder0.setVariant("halfdays");
        java.util.Locale.Builder builder6 = builder0.setScript("");
        java.util.Locale.Builder builder7 = builder0.clearExtensions();
        java.util.Locale.Builder builder9 = builder0.setRegion("CN");
        java.util.Locale.Builder builder10 = builder0.clear();
        java.util.Locale.Builder builder11 = builder0.clearExtensions();
        java.util.Locale.Builder builder12 = builder11.clear();
        java.util.Locale.Builder builder14 = builder11.setLanguage("days");
        java.util.Locale.Builder builder16 = builder14.setLanguage("english");
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
    }

    @Test
    public void test19293() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19293");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forTimeZone(timeZone2);
        org.joda.time.chrono.GJChronology gJChronology4 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone3);
        org.joda.time.DateTimeField dateTimeField5 = gJChronology4.millisOfSecond();
        int int6 = instant1.get(dateTimeField5);
        org.joda.time.Instant instant8 = instant1.plus(0L);
        long long9 = instant1.getMillis();
        org.joda.time.Instant instant11 = new org.joda.time.Instant(52L);
        boolean boolean12 = instant11.isEqualNow();
        java.lang.String str13 = instant11.toString();
        java.lang.String str14 = instant11.toString();
        org.joda.time.Instant instant16 = new org.joda.time.Instant(52L);
        boolean boolean17 = instant16.isEqualNow();
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.Instant instant19 = instant16.plus(readableDuration18);
        boolean boolean20 = instant11.isBefore((org.joda.time.ReadableInstant) instant19);
        org.joda.time.ReadableDuration readableDuration21 = null;
        org.joda.time.Instant instant22 = instant19.minus(readableDuration21);
        boolean boolean23 = instant1.isAfter((org.joda.time.ReadableInstant) instant19);
        boolean boolean25 = instant1.isBefore(192102945300000L);
        boolean boolean27 = instant1.isEqual(14452100L);
        org.joda.time.Chronology chronology28 = instant1.getChronology();
        org.joda.time.DateTimeZone dateTimeZone29 = instant1.getZone();
        org.joda.time.ReadableDuration readableDuration30 = null;
        org.joda.time.Instant instant31 = instant1.minus(readableDuration30);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(gJChronology4);
        org.junit.Assert.assertNotNull(dateTimeField5);
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 104 + "'", int6 == 104);
        org.junit.Assert.assertNotNull(instant8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 52L + "'", long9 == 52L);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "1970-01-01T00:00:00.052Z" + "'", str13, "1970-01-01T00:00:00.052Z");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "1970-01-01T00:00:00.052Z" + "'", str14, "1970-01-01T00:00:00.052Z");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(instant19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(instant22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(instant31);
    }

    @Test
    public void test19294() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19294");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = gJChronology2.halfdays();
        long long7 = gJChronology2.add((long) 'a', (-1L), (int) (short) 0);
        long long11 = gJChronology2.add((long) (byte) 0, (long) '4', 100);
        org.joda.time.DurationField durationField12 = gJChronology2.years();
        org.joda.time.Instant instant13 = gJChronology2.getGregorianCutover();
        java.util.TimeZone timeZone14 = null;
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forTimeZone(timeZone14);
        org.joda.time.chrono.GJChronology gJChronology16 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone15);
        org.joda.time.DurationField durationField17 = gJChronology16.halfdays();
        org.joda.time.DateTimeField dateTimeField18 = gJChronology16.millisOfDay();
        org.joda.time.DateTimeField dateTimeField19 = gJChronology16.minuteOfDay();
        org.joda.time.DurationField durationField20 = gJChronology16.centuries();
        org.joda.time.DateTimeField dateTimeField21 = gJChronology16.yearOfCentury();
        org.joda.time.Chronology chronology22 = gJChronology16.withUTC();
        org.joda.time.DateTimeZone dateTimeZone23 = gJChronology16.getZone();
        java.lang.String str25 = dateTimeZone23.getName((long) 100);
        int int27 = dateTimeZone23.getOffset(432000000L);
        long long29 = dateTimeZone23.nextTransition((long) 52);
        java.lang.String str31 = dateTimeZone23.getShortName((long) ' ');
        org.joda.time.Chronology chronology32 = gJChronology2.withZone(dateTimeZone23);
        java.lang.String str33 = gJChronology2.toString();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 97L + "'", long7 == 97L);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 5200L + "'", long11 == 5200L);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(instant13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(gJChronology16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateTimeZone23);
// flaky:         org.junit.Assert.assertEquals("'" + str25 + "' != '" + "+00:00:00.052" + "'", str25, "+00:00:00.052");
// flaky:         org.junit.Assert.assertTrue("'" + int27 + "' != '" + 52 + "'", int27 == 52);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 52L + "'", long29 == 52L);
// flaky:         org.junit.Assert.assertEquals("'" + str31 + "' != '" + "+00:00:00.052" + "'", str31, "+00:00:00.052");
        org.junit.Assert.assertNotNull(chronology32);
// flaky:         org.junit.Assert.assertEquals("'" + str33 + "' != '" + "GJChronology[+00:00:00.052]" + "'", str33, "GJChronology[+00:00:00.052]");
    }

    @Test
    public void test19295() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19295");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = gJChronology2.halfdays();
        long long7 = gJChronology2.add((long) 'a', (-1L), (int) (short) 0);
        boolean boolean9 = gJChronology2.equals((java.lang.Object) 0);
        org.joda.time.DateTimeField dateTimeField10 = gJChronology2.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField11 = gJChronology2.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField12 = gJChronology2.clockhourOfDay();
        long long17 = gJChronology2.getDateTimeMillis(10, (int) (short) 10, 4, (int) (byte) 1);
        org.joda.time.DateTimeField dateTimeField18 = gJChronology2.millisOfDay();
        java.lang.String str19 = gJChronology2.toString();
        org.joda.time.DateTimeField dateTimeField20 = gJChronology2.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField21 = gJChronology2.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField22 = gJChronology2.halfdayOfDay();
        java.util.TimeZone timeZone23 = null;
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forTimeZone(timeZone23);
        org.joda.time.chrono.GJChronology gJChronology25 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone24);
        org.joda.time.DurationField durationField26 = gJChronology25.halfdays();
        long long30 = gJChronology25.add((long) 'a', (-1L), (int) (short) 0);
        long long34 = gJChronology25.add((long) (byte) 0, (long) '4', 100);
        org.joda.time.DurationField durationField35 = gJChronology25.years();
        org.joda.time.DateTimeField dateTimeField36 = gJChronology25.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone37 = gJChronology25.getZone();
        org.joda.time.Chronology chronology38 = gJChronology2.withZone(dateTimeZone37);
        org.joda.time.DateTimeField dateTimeField39 = gJChronology2.secondOfMinute();
        java.util.TimeZone timeZone40 = null;
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.forTimeZone(timeZone40);
        org.joda.time.chrono.GJChronology gJChronology42 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone41);
        java.util.Locale locale44 = new java.util.Locale("hi!");
        java.lang.String str45 = locale44.getCountry();
        java.util.Locale locale46 = java.util.Locale.getDefault();
        java.lang.String str47 = locale46.getDisplayName();
        java.lang.String str48 = locale44.getDisplayScript(locale46);
        boolean boolean49 = dateTimeZone41.equals((java.lang.Object) locale46);
        org.joda.time.DateTimeZone dateTimeZone51 = org.joda.time.DateTimeZone.forOffsetMillis((int) '4');
        java.util.TimeZone timeZone52 = dateTimeZone51.toTimeZone();
        long long55 = dateTimeZone51.adjustOffset((long) 0, false);
        int int57 = dateTimeZone51.getOffsetFromLocal((-26438399999L));
        long long59 = dateTimeZone41.getMillisKeepLocal(dateTimeZone51, (long) (byte) 10);
        org.joda.time.chrono.GJChronology gJChronology60 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone51);
        java.lang.String str61 = dateTimeZone51.toString();
        org.joda.time.Chronology chronology62 = gJChronology2.withZone(dateTimeZone51);
        org.joda.time.DurationField durationField63 = gJChronology2.minutes();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 97L + "'", long7 == 97L);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
// flaky:         org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-61827926400051L) + "'", long17 == (-61827926400051L));
        org.junit.Assert.assertNotNull(dateTimeField18);
// flaky:         org.junit.Assert.assertEquals("'" + str19 + "' != '" + "GJChronology[+00:00:00.052]" + "'", str19, "GJChronology[+00:00:00.052]");
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(gJChronology25);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 97L + "'", long30 == 97L);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 5200L + "'", long34 == 5200L);
        org.junit.Assert.assertNotNull(durationField35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertNotNull(gJChronology42);
        org.junit.Assert.assertEquals(locale44.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "zho_+52:00");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "zho (+52:00)" + "'", str47, "zho (+52:00)");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(dateTimeZone51);
        org.junit.Assert.assertNotNull(timeZone52);
        org.junit.Assert.assertEquals(timeZone52.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 0L + "'", long55 == 0L);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 52 + "'", int57 == 52);
// flaky:         org.junit.Assert.assertTrue("'" + long59 + "' != '" + 10L + "'", long59 == 10L);
        org.junit.Assert.assertNotNull(gJChronology60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "+00:00:00.052" + "'", str61, "+00:00:00.052");
        org.junit.Assert.assertNotNull(chronology62);
        org.junit.Assert.assertNotNull(durationField63);
    }

    @Test
    public void test19296() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19296");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField3 = gJChronology2.era();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.centuryOfEra();
        org.joda.time.DurationField durationField5 = gJChronology2.hours();
        org.joda.time.DateTimeZone dateTimeZone6 = gJChronology2.getZone();
        org.joda.time.DurationField durationField7 = gJChronology2.millis();
        org.joda.time.DurationField durationField8 = gJChronology2.weeks();
        org.joda.time.DateTimeField dateTimeField9 = gJChronology2.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField10 = gJChronology2.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone11 = gJChronology2.getZone();
        java.lang.String str12 = gJChronology2.toString();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "GJChronology[+00:00:00.052]" + "'", str12, "GJChronology[+00:00:00.052]");
    }

    @Test
    public void test19297() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19297");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clear();
        java.util.Locale.Builder builder3 = builder1.removeUnicodeLocaleAttribute("und");
        java.util.Locale.Builder builder4 = builder3.clearExtensions();
        java.util.Locale.Builder builder6 = builder3.setLanguageTag("en");
        java.util.Locale.Builder builder7 = builder3.clear();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder9 = builder7.setScript("Chinese");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed script: Chinese [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
    }

    @Test
    public void test19298() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19298");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField3 = gJChronology2.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.weekyear();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.halfdayOfDay();
        org.joda.time.DurationField durationField6 = gJChronology2.years();
        org.joda.time.DurationField durationField7 = gJChronology2.minutes();
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        long long11 = gJChronology2.add(readablePeriod8, (-42L), (int) '4');
        org.joda.time.Chronology chronology12 = gJChronology2.withUTC();
        org.joda.time.DateTimeField dateTimeField13 = gJChronology2.hourOfHalfday();
        org.joda.time.DurationField durationField14 = gJChronology2.minutes();
        org.joda.time.DateTimeZone dateTimeZone15 = gJChronology2.getZone();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-42L) + "'", long11 == (-42L));
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeZone15);
    }

    @Test
    public void test19299() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19299");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField3 = gJChronology2.millisOfSecond();
        org.joda.time.DurationField durationField4 = gJChronology2.millis();
        org.joda.time.DurationField durationField5 = gJChronology2.weeks();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology2.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology2.weekyearOfCentury();
        org.joda.time.DurationField durationField8 = gJChronology2.months();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
    }

    @Test
    public void test19300() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19300");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField3 = gJChronology2.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.weekyear();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology2.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology2.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField8 = gJChronology2.hourOfDay();
        org.joda.time.Chronology chronology9 = gJChronology2.withUTC();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(chronology9);
    }

    @Test
    public void test19301() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19301");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 0, (int) (byte) 1);
        boolean boolean4 = dateTimeZone2.isStandardOffset(186641343849600000L);
        org.joda.time.chrono.GJChronology gJChronology5 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone2);
        java.lang.String str7 = dateTimeZone2.getName(37300317264000L);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(gJChronology5);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "+00:01" + "'", str7, "+00:01");
    }

    @Test
    public void test19302() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19302");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField3 = gJChronology2.yearOfCentury();
        org.joda.time.DurationField durationField4 = gJChronology2.minutes();
        java.lang.String str5 = gJChronology2.toString();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology2.dayOfYear();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology2.hourOfDay();
        long long11 = gJChronology2.add(72599948L, 130913020800000L, 292);
        org.joda.time.DurationField durationField12 = gJChronology2.minutes();
        boolean boolean13 = durationField12.isPrecise();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "GJChronology[+00:00:00.052]" + "'", str5, "GJChronology[+00:00:00.052]");
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 38226602146199948L + "'", long11 == 38226602146199948L);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
    }

    @Test
    public void test19303() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19303");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange2 = new java.util.Locale.LanguageRange("de-DE", (double) (-3144960098681L));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: weight=-3.144960098681E12");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test19304() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19304");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField3 = gJChronology2.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.weekyearOfCentury();
        org.joda.time.Instant instant5 = gJChronology2.getGregorianCutover();
        org.joda.time.Instant instant7 = instant5.withMillis(0L);
        org.joda.time.Instant instant9 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone10 = null;
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forTimeZone(timeZone10);
        org.joda.time.chrono.GJChronology gJChronology12 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone11);
        org.joda.time.DateTimeField dateTimeField13 = gJChronology12.millisOfSecond();
        int int14 = instant9.get(dateTimeField13);
        org.joda.time.Instant instant16 = instant9.plus(0L);
        int int17 = instant7.compareTo((org.joda.time.ReadableInstant) instant16);
        boolean boolean19 = instant16.isBefore(35000L);
        java.util.TimeZone timeZone20 = null;
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forTimeZone(timeZone20);
        org.joda.time.chrono.GJChronology gJChronology22 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone21);
        org.joda.time.DurationField durationField23 = gJChronology22.halfdays();
        org.joda.time.Chronology chronology24 = gJChronology22.withUTC();
        java.lang.String str25 = gJChronology22.toString();
        org.joda.time.DateTimeField dateTimeField26 = gJChronology22.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(1, 10);
        org.joda.time.Chronology chronology30 = gJChronology22.withZone(dateTimeZone29);
        long long32 = dateTimeZone29.convertUTCToLocal((-43829L));
        boolean boolean33 = dateTimeZone29.isFixed();
        java.util.Locale locale35 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str36 = dateTimeZone29.getName((-72948L), locale35);
        org.joda.time.DateTime dateTime37 = instant16.toDateTime(dateTimeZone29);
        java.util.Date date38 = dateTime37.toDate();
        org.joda.time.Chronology chronology39 = dateTime37.getChronology();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(instant5);
        org.junit.Assert.assertNotNull(instant7);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(gJChronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
// flaky:         org.junit.Assert.assertTrue("'" + int14 + "' != '" + 104 + "'", int14 == 104);
        org.junit.Assert.assertNotNull(instant16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(gJChronology22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(chronology24);
// flaky:         org.junit.Assert.assertEquals("'" + str25 + "' != '" + "GJChronology[+00:00:00.052]" + "'", str25, "GJChronology[+00:00:00.052]");
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 4156171L + "'", long32 == 4156171L);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "+01:10" + "'", str36, "+01:10");
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(date38);
        org.junit.Assert.assertEquals(date38.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(chronology39);
    }

    @Test
    public void test19305() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19305");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forTimeZone(timeZone2);
        org.joda.time.chrono.GJChronology gJChronology4 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone3);
        org.joda.time.DateTimeField dateTimeField5 = gJChronology4.millisOfSecond();
        int int6 = instant1.get(dateTimeField5);
        org.joda.time.Instant instant8 = instant1.plus(0L);
        long long9 = instant1.getMillis();
        org.joda.time.Instant instant11 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone12 = null;
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forTimeZone(timeZone12);
        org.joda.time.chrono.GJChronology gJChronology14 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone13);
        org.joda.time.DateTimeField dateTimeField15 = gJChronology14.millisOfSecond();
        int int16 = instant11.get(dateTimeField15);
        org.joda.time.Instant instant18 = instant11.plus(0L);
        long long19 = instant11.getMillis();
        org.joda.time.Instant instant21 = new org.joda.time.Instant(52L);
        boolean boolean22 = instant21.isEqualNow();
        java.lang.String str23 = instant21.toString();
        java.lang.String str24 = instant21.toString();
        org.joda.time.Instant instant26 = new org.joda.time.Instant(52L);
        boolean boolean27 = instant26.isEqualNow();
        org.joda.time.ReadableDuration readableDuration28 = null;
        org.joda.time.Instant instant29 = instant26.plus(readableDuration28);
        boolean boolean30 = instant21.isBefore((org.joda.time.ReadableInstant) instant29);
        org.joda.time.ReadableDuration readableDuration31 = null;
        org.joda.time.Instant instant32 = instant29.minus(readableDuration31);
        boolean boolean33 = instant11.isAfter((org.joda.time.ReadableInstant) instant29);
        boolean boolean34 = instant29.isEqualNow();
        boolean boolean35 = instant1.isAfter((org.joda.time.ReadableInstant) instant29);
        org.joda.time.Instant instant37 = instant29.minus(7020000L);
        org.joda.time.Instant instant39 = new org.joda.time.Instant(52L);
        boolean boolean40 = instant39.isEqualNow();
        org.joda.time.ReadableDuration readableDuration41 = null;
        org.joda.time.Instant instant42 = instant39.plus(readableDuration41);
        org.joda.time.Instant instant44 = instant39.withMillis((long) 4);
        org.joda.time.Instant instant46 = instant44.withMillis((-5919628L));
        java.util.TimeZone timeZone47 = null;
        org.joda.time.DateTimeZone dateTimeZone48 = org.joda.time.DateTimeZone.forTimeZone(timeZone47);
        org.joda.time.chrono.GJChronology gJChronology49 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone48);
        org.joda.time.DateTimeField dateTimeField50 = gJChronology49.millisOfSecond();
        org.joda.time.DurationField durationField51 = gJChronology49.weeks();
        org.joda.time.DurationField durationField52 = gJChronology49.months();
        java.lang.String str53 = gJChronology49.toString();
        org.joda.time.DateTimeField dateTimeField54 = gJChronology49.centuryOfEra();
        org.joda.time.DateTime dateTime55 = instant44.toDateTime((org.joda.time.Chronology) gJChronology49);
        org.joda.time.Chronology chronology56 = instant44.getChronology();
        int int57 = instant29.compareTo((org.joda.time.ReadableInstant) instant44);
        org.joda.time.ReadableDuration readableDuration58 = null;
        org.joda.time.Instant instant60 = instant44.withDurationAdded(readableDuration58, 3736557);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(gJChronology4);
        org.junit.Assert.assertNotNull(dateTimeField5);
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 104 + "'", int6 == 104);
        org.junit.Assert.assertNotNull(instant8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 52L + "'", long9 == 52L);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(gJChronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
// flaky:         org.junit.Assert.assertTrue("'" + int16 + "' != '" + 104 + "'", int16 == 104);
        org.junit.Assert.assertNotNull(instant18);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 52L + "'", long19 == 52L);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "1970-01-01T00:00:00.052Z" + "'", str23, "1970-01-01T00:00:00.052Z");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "1970-01-01T00:00:00.052Z" + "'", str24, "1970-01-01T00:00:00.052Z");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(instant29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(instant32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(instant37);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(instant42);
        org.junit.Assert.assertNotNull(instant44);
        org.junit.Assert.assertNotNull(instant46);
        org.junit.Assert.assertNotNull(dateTimeZone48);
        org.junit.Assert.assertNotNull(gJChronology49);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(durationField51);
        org.junit.Assert.assertNotNull(durationField52);
// flaky:         org.junit.Assert.assertEquals("'" + str53 + "' != '" + "GJChronology[+00:00:00.052]" + "'", str53, "GJChronology[+00:00:00.052]");
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(chronology56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
        org.junit.Assert.assertNotNull(instant60);
    }

    @Test
    public void test19306() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19306");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        long long6 = dateTimeZone1.convertLocalToUTC((long) (byte) -1, true, 0L);
        boolean boolean8 = dateTimeZone1.equals((java.lang.Object) true);
        java.util.Locale locale10 = java.util.Locale.getDefault();
        java.lang.String str11 = locale10.getDisplayLanguage();
        java.lang.String str12 = locale10.toLanguageTag();
        java.lang.String str13 = dateTimeZone1.getShortName(0L, locale10);
        java.util.TimeZone timeZone14 = null;
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forTimeZone(timeZone14);
        org.joda.time.chrono.GJChronology gJChronology16 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone15);
        org.joda.time.DateTimeField dateTimeField17 = gJChronology16.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField18 = gJChronology16.weekyearOfCentury();
        org.joda.time.Instant instant19 = gJChronology16.getGregorianCutover();
        org.joda.time.Instant instant21 = instant19.withMillis(0L);
        org.joda.time.chrono.GJChronology gJChronology23 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1, (org.joda.time.ReadableInstant) instant19, 4);
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forOffsetMillis((int) '4');
        java.util.TimeZone timeZone26 = dateTimeZone25.toTimeZone();
        java.lang.String str27 = dateTimeZone25.toString();
        boolean boolean29 = dateTimeZone25.isStandardOffset((long) 'u');
        long long32 = dateTimeZone25.convertLocalToUTC((long) 1959, false);
        long long34 = dateTimeZone1.getMillisKeepLocal(dateTimeZone25, 3732632409600000L);
        org.joda.time.LocalDateTime localDateTime35 = null;
        boolean boolean36 = dateTimeZone25.isLocalDateTimeGap(localDateTime35);
        java.util.TimeZone timeZone37 = null;
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forTimeZone(timeZone37);
        org.joda.time.chrono.GJChronology gJChronology39 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone38);
        org.joda.time.DurationField durationField40 = gJChronology39.halfdays();
        org.joda.time.DateTimeField dateTimeField41 = gJChronology39.millisOfDay();
        org.joda.time.DateTimeField dateTimeField42 = gJChronology39.minuteOfDay();
        org.joda.time.DurationField durationField43 = gJChronology39.centuries();
        org.joda.time.DateTimeField dateTimeField44 = gJChronology39.halfdayOfDay();
        java.util.Locale locale45 = java.util.Locale.ITALIAN;
        java.util.Locale locale46 = locale45.stripExtensions();
        java.util.Locale locale47 = java.util.Locale.CANADA;
        java.lang.String str48 = locale45.getDisplayVariant(locale47);
        boolean boolean49 = gJChronology39.equals((java.lang.Object) locale47);
        org.joda.time.DurationField durationField50 = gJChronology39.months();
        org.joda.time.Chronology chronology51 = gJChronology39.withUTC();
        org.joda.time.DateTimeField dateTimeField52 = gJChronology39.yearOfCentury();
        org.joda.time.Chronology chronology53 = gJChronology39.withUTC();
        org.joda.time.DateTimeField dateTimeField54 = gJChronology39.secondOfDay();
        boolean boolean55 = dateTimeZone25.equals((java.lang.Object) gJChronology39);
        org.joda.time.ReadablePeriod readablePeriod56 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray59 = gJChronology39.get(readablePeriod56, (-636696130825L), (long) (-480000));
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(gJChronology2);
// flaky:         org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-53L) + "'", long6 == (-53L));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "zho_+52:00");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "zho" + "'", str11, "zho");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "zho" + "'", str12, "zho");
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+00:00:00.052" + "'", str13, "+00:00:00.052");
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(gJChronology16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(instant19);
        org.junit.Assert.assertNotNull(instant21);
        org.junit.Assert.assertNotNull(gJChronology23);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(timeZone26);
        org.junit.Assert.assertEquals(timeZone26.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "+00:00:00.052" + "'", str27, "+00:00:00.052");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 1907L + "'", long32 == 1907L);
// flaky:         org.junit.Assert.assertTrue("'" + long34 + "' != '" + 3732632409600000L + "'", long34 == 3732632409600000L);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertNotNull(gJChronology39);
        org.junit.Assert.assertNotNull(durationField40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(durationField43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "it");
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "it");
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(durationField50);
        org.junit.Assert.assertNotNull(chronology51);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
    }

    @Test
    public void test19307() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19307");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = gJChronology2.halfdays();
        long long7 = gJChronology2.add((long) 'a', (-1L), (int) (short) 0);
        boolean boolean9 = gJChronology2.equals((java.lang.Object) 0);
        org.joda.time.DateTimeField dateTimeField10 = gJChronology2.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField11 = gJChronology2.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField12 = gJChronology2.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField13 = gJChronology2.clockhourOfHalfday();
        org.joda.time.DurationField durationField14 = gJChronology2.halfdays();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology2.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField16 = gJChronology2.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField17 = gJChronology2.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField18 = gJChronology2.year();
        org.joda.time.DateTimeField dateTimeField19 = gJChronology2.secondOfMinute();
        org.joda.time.Instant instant20 = gJChronology2.getGregorianCutover();
        org.joda.time.MutableDateTime mutableDateTime21 = instant20.toMutableDateTime();
        org.joda.time.DateTimeZone dateTimeZone22 = instant20.getZone();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 97L + "'", long7 == 97L);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(instant20);
        org.junit.Assert.assertNotNull(mutableDateTime21);
        org.junit.Assert.assertNotNull(dateTimeZone22);
    }

    @Test
    public void test19308() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19308");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = gJChronology2.halfdays();
        long long7 = gJChronology2.add((long) 'a', (-1L), (int) (short) 0);
        boolean boolean9 = gJChronology2.equals((java.lang.Object) 0);
        org.joda.time.DateTimeField dateTimeField10 = gJChronology2.dayOfMonth();
        org.joda.time.DurationField durationField11 = gJChronology2.days();
        org.joda.time.DurationField durationField12 = gJChronology2.seconds();
        org.joda.time.DateTimeField dateTimeField13 = gJChronology2.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField14 = gJChronology2.clockhourOfDay();
        java.util.TimeZone timeZone15 = null;
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forTimeZone(timeZone15);
        org.joda.time.chrono.GJChronology gJChronology17 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone16);
        int int19 = dateTimeZone16.getStandardOffset((long) (byte) 0);
        org.joda.time.Chronology chronology20 = gJChronology2.withZone(dateTimeZone16);
        long long22 = dateTimeZone16.convertUTCToLocal(604800000L);
        int int24 = dateTimeZone16.getStandardOffset(432000001L);
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forOffsetHours(10);
        long long28 = dateTimeZone16.getMillisKeepLocal(dateTimeZone26, (-72948L));
        java.util.Locale.Category category30 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale31 = java.util.Locale.CANADA;
        java.lang.String str32 = locale31.getISO3Language();
        java.util.Locale.setDefault(category30, locale31);
        java.util.Locale locale36 = new java.util.Locale("cinese (Taiwan)", "DurationField[weekyears]");
        java.util.Set<java.lang.String> strSet37 = locale36.getUnicodeLocaleAttributes();
        java.lang.String str38 = locale31.getDisplayLanguage(locale36);
        java.util.Locale locale40 = new java.util.Locale("hi!");
        java.lang.String str41 = locale40.getCountry();
        java.lang.String str42 = locale40.getScript();
        java.util.Locale locale43 = java.util.Locale.ITALIAN;
        java.util.Locale locale44 = locale43.stripExtensions();
        java.util.Locale locale45 = java.util.Locale.CANADA;
        java.lang.String str46 = locale43.getDisplayVariant(locale45);
        java.lang.String str47 = locale40.getDisplayScript(locale43);
        java.lang.String str48 = locale43.getDisplayCountry();
        java.lang.String str49 = locale31.getDisplayScript(locale43);
        java.lang.String str50 = dateTimeZone26.getShortName(115200000L, locale43);
        java.lang.String str51 = locale43.toLanguageTag();
        java.lang.String str52 = locale43.getDisplayName();
        java.lang.String str53 = locale43.getVariant();
        java.lang.String str54 = locale43.getDisplayScript();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 97L + "'", long7 == 97L);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(gJChronology17);
// flaky:         org.junit.Assert.assertTrue("'" + int19 + "' != '" + 52 + "'", int19 == 52);
        org.junit.Assert.assertNotNull(chronology20);
// flaky:         org.junit.Assert.assertTrue("'" + long22 + "' != '" + 604800052L + "'", long22 == 604800052L);
// flaky:         org.junit.Assert.assertTrue("'" + int24 + "' != '" + 52 + "'", int24 == 52);
        org.junit.Assert.assertNotNull(dateTimeZone26);
// flaky:         org.junit.Assert.assertTrue("'" + long28 + "' != '" + (-36072896L) + "'", long28 == (-36072896L));
        org.junit.Assert.assertTrue("'" + category30 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category30.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "eng" + "'", str32, "eng");
        org.junit.Assert.assertEquals(locale36.toString(), "cinese (taiwan)_DURATIONFIELD[WEEKYEARS]");
        org.junit.Assert.assertNotNull(strSet37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "English" + "'", str38, "English");
        org.junit.Assert.assertEquals(locale40.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "it");
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "it");
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "+10:00" + "'", str50, "+10:00");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "it" + "'", str51, "it");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "Italian" + "'", str52, "Italian");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
    }

    @Test
    public void test19309() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19309");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = gJChronology2.halfdays();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.millisOfDay();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.minuteOfDay();
        org.joda.time.DurationField durationField6 = gJChronology2.centuries();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology2.dayOfYear();
        java.lang.String str8 = gJChronology2.toString();
        org.joda.time.DurationField durationField9 = gJChronology2.years();
        org.joda.time.DateTimeField dateTimeField10 = gJChronology2.yearOfEra();
        org.joda.time.DateTimeField dateTimeField11 = gJChronology2.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField12 = gJChronology2.minuteOfDay();
        long long16 = gJChronology2.add((-22858387L), 2100000000L, (-1916));
        org.joda.time.DurationField durationField17 = gJChronology2.months();
        org.joda.time.DateTimeField dateTimeField18 = gJChronology2.dayOfMonth();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "GJChronology[+00:00:00.052]" + "'", str8, "GJChronology[+00:00:00.052]");
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-4023622858387L) + "'", long16 == (-4023622858387L));
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
    }

    @Test
    public void test19310() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19310");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(1, 10);
        java.lang.String str4 = dateTimeZone2.getShortName(97L);
        org.joda.time.chrono.GJChronology gJChronology7 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone2, (long) (byte) 100, 1);
        java.util.TimeZone timeZone9 = null;
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forTimeZone(timeZone9);
        java.lang.String str12 = dateTimeZone10.getNameKey((long) 100);
        boolean boolean13 = dateTimeZone10.isFixed();
        java.util.Locale locale17 = new java.util.Locale("DurationField[halfdays]", "\u82f1\u6587");
        java.lang.String str18 = dateTimeZone10.getName((long) (short) 10, locale17);
        org.joda.time.Instant instant20 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone21 = null;
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forTimeZone(timeZone21);
        org.joda.time.chrono.GJChronology gJChronology23 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone22);
        org.joda.time.DateTimeField dateTimeField24 = gJChronology23.millisOfSecond();
        int int25 = instant20.get(dateTimeField24);
        org.joda.time.Chronology chronology26 = instant20.getChronology();
        org.joda.time.chrono.GJChronology gJChronology27 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone10, (org.joda.time.ReadableInstant) instant20);
        long long28 = instant20.getMillis();
        org.joda.time.ReadableDuration readableDuration29 = null;
        org.joda.time.Instant instant30 = instant20.minus(readableDuration29);
        java.util.Locale.Category category31 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale32 = java.util.Locale.getDefault();
        boolean boolean33 = locale32.hasExtensions();
        java.lang.String str34 = locale32.getISO3Language();
        java.util.Locale.setDefault(category31, locale32);
        java.util.Locale locale36 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale37 = java.util.Locale.ENGLISH;
        java.lang.String str38 = locale36.getDisplayLanguage(locale37);
        java.util.Locale locale39 = java.util.Locale.CANADA;
        java.lang.String str40 = locale39.getISO3Language();
        java.lang.String str41 = locale36.getDisplayVariant(locale39);
        java.lang.String str42 = locale36.getDisplayName();
        java.util.Locale.setDefault(category31, locale36);
        boolean boolean44 = instant20.equals((java.lang.Object) locale36);
        java.lang.String str45 = dateTimeZone2.getShortName((-2208729596000L), locale36);
        int int47 = dateTimeZone2.getStandardOffset((-599968L));
        long long50 = dateTimeZone2.adjustOffset((-248400000L), true);
        int int52 = dateTimeZone2.getOffset((-6498377280005080L));
        long long54 = dateTimeZone2.previousTransition(0L);
        org.joda.time.chrono.GJChronology gJChronology55 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone2);
        org.joda.time.DateTimeField dateTimeField56 = gJChronology55.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField57 = gJChronology55.weekyear();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+01:10" + "'", str4, "+01:10");
        org.junit.Assert.assertNotNull(gJChronology7);
        org.junit.Assert.assertNotNull(dateTimeZone10);
// flaky:         org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
// flaky:         org.junit.Assert.assertEquals(locale17.toString(), "\u82f1\u6587");
// flaky:         org.junit.Assert.assertEquals("'" + str18 + "' != '" + "+00:00:00.052" + "'", str18, "+00:00:00.052");
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(gJChronology23);
        org.junit.Assert.assertNotNull(dateTimeField24);
// flaky:         org.junit.Assert.assertTrue("'" + int25 + "' != '" + 104 + "'", int25 == 104);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(gJChronology27);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 52L + "'", long28 == 52L);
        org.junit.Assert.assertNotNull(instant30);
        org.junit.Assert.assertTrue("'" + category31 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category31.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "zho_+52:00");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "zho" + "'", str34, "zho");
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "en");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "Chinese" + "'", str38, "Chinese");
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "eng" + "'", str40, "eng");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "Chinese (Taiwan)" + "'", str42, "Chinese (Taiwan)");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "+01:10" + "'", str45, "+01:10");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 4200000 + "'", int47 == 4200000);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + (-248400000L) + "'", long50 == (-248400000L));
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 4200000 + "'", int52 == 4200000);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 0L + "'", long54 == 0L);
        org.junit.Assert.assertNotNull(gJChronology55);
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertNotNull(dateTimeField57);
    }

    @Test
    public void test19311() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19311");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = gJChronology2.halfdays();
        long long7 = gJChronology2.add((long) 'a', (-1L), (int) (short) 0);
        org.joda.time.DateTimeField dateTimeField8 = gJChronology2.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField9 = gJChronology2.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField10 = gJChronology2.dayOfYear();
        org.joda.time.DateTimeField dateTimeField11 = gJChronology2.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField12 = gJChronology2.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField13 = gJChronology2.dayOfWeek();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 97L + "'", long7 == 97L);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
    }

    @Test
    public void test19312() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19312");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = gJChronology2.halfdays();
        long long7 = gJChronology2.add((long) 'a', (-1L), (int) (short) 0);
        boolean boolean9 = gJChronology2.equals((java.lang.Object) 0);
        org.joda.time.DateTimeField dateTimeField10 = gJChronology2.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField11 = gJChronology2.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField12 = gJChronology2.clockhourOfDay();
        long long17 = gJChronology2.getDateTimeMillis(10, (int) (short) 10, 4, (int) (byte) 1);
        org.joda.time.DateTimeField dateTimeField18 = gJChronology2.millisOfSecond();
        org.joda.time.DurationField durationField19 = gJChronology2.seconds();
        java.lang.String str20 = durationField19.getName();
        // The following exception was thrown during execution in test generation
        try {
            long long23 = durationField19.getMillis(518057858246400000L, 5778120000000L);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Multiplication overflows a long: 518057858246400000 * 1000");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 97L + "'", long7 == 97L);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
// flaky:         org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-61827926400051L) + "'", long17 == (-61827926400051L));
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "seconds" + "'", str20, "seconds");
    }

    @Test
    public void test19313() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19313");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = gJChronology2.halfdays();
        long long7 = gJChronology2.add((long) 'a', (-1L), (int) (short) 0);
        org.joda.time.DateTimeField dateTimeField8 = gJChronology2.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField9 = gJChronology2.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField10 = gJChronology2.dayOfYear();
        org.joda.time.DateTimeField dateTimeField11 = gJChronology2.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField12 = gJChronology2.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField13 = gJChronology2.minuteOfDay();
        org.joda.time.DurationField durationField14 = gJChronology2.eras();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 97L + "'", long7 == 97L);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(durationField14);
    }

    @Test
    public void test19314() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19314");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField3 = gJChronology2.era();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.centuryOfEra();
        org.joda.time.DurationField durationField5 = gJChronology2.hours();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology2.monthOfYear();
        org.joda.time.Chronology chronology7 = gJChronology2.withUTC();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(chronology7);
    }

    @Test
    public void test19315() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19315");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str3 = dateTimeZone1.getNameKey((long) 100);
        boolean boolean4 = dateTimeZone1.isFixed();
        org.joda.time.chrono.GJChronology gJChronology5 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        int int6 = gJChronology5.getMinimumDaysInFirstWeek();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology5.clockhourOfDay();
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        long long11 = gJChronology5.add(readablePeriod8, (long) (short) -1, (int) (byte) 10);
        org.joda.time.DateTimeField dateTimeField12 = gJChronology5.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField13 = gJChronology5.minuteOfDay();
        org.joda.time.DurationField durationField14 = gJChronology5.hours();
        org.joda.time.DurationField durationField15 = gJChronology5.minutes();
        java.lang.String str16 = gJChronology5.toString();
        // The following exception was thrown during execution in test generation
        try {
            long long21 = gJChronology5.getDateTimeMillis((-499), 3, 1869, (-10006816));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -10006816 for millisOfDay must be in the range [0,86399999]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(gJChronology5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 4 + "'", int6 == 4);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-1L) + "'", long11 == (-1L));
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(durationField15);
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "GJChronology[+00:00:00.052]" + "'", str16, "GJChronology[+00:00:00.052]");
    }

    @Test
    public void test19316() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19316");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = gJChronology2.halfdays();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.yearOfCentury();
        org.joda.time.DurationField durationField5 = gJChronology2.minutes();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology2.yearOfCentury();
        org.joda.time.Chronology chronology7 = gJChronology2.withUTC();
        org.joda.time.DurationField durationField8 = gJChronology2.minutes();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(durationField8);
    }

    @Test
    public void test19317() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19317");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = gJChronology2.years();
        java.util.TimeZone timeZone4 = null;
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forTimeZone(timeZone4);
        org.joda.time.chrono.GJChronology gJChronology6 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone5);
        org.joda.time.DurationField durationField7 = gJChronology6.halfdays();
        org.joda.time.DateTimeField dateTimeField8 = gJChronology6.millisOfDay();
        org.joda.time.DateTimeField dateTimeField9 = gJChronology6.minuteOfDay();
        org.joda.time.DurationField durationField10 = gJChronology6.centuries();
        java.util.TimeZone timeZone11 = null;
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forTimeZone(timeZone11);
        org.joda.time.chrono.GJChronology gJChronology13 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone12);
        org.joda.time.DurationField durationField14 = gJChronology13.halfdays();
        long long17 = durationField14.add((long) 100, 100L);
        boolean boolean18 = durationField14.isPrecise();
        int int19 = durationField10.compareTo(durationField14);
        boolean boolean20 = gJChronology2.equals((java.lang.Object) durationField10);
        org.joda.time.DateTimeField dateTimeField21 = gJChronology2.dayOfYear();
        org.joda.time.DateTimeField dateTimeField22 = gJChronology2.era();
        org.joda.time.DateTimeZone dateTimeZone23 = gJChronology2.getZone();
        java.lang.String str24 = dateTimeZone23.getID();
        java.lang.String str25 = dateTimeZone23.toString();
        int int27 = dateTimeZone23.getOffsetFromLocal((-31449594748L));
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(gJChronology6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(gJChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 4320000100L + "'", long17 == 4320000100L);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeZone23);
// flaky:         org.junit.Assert.assertEquals("'" + str24 + "' != '" + "+00:00:00.052" + "'", str24, "+00:00:00.052");
// flaky:         org.junit.Assert.assertEquals("'" + str25 + "' != '" + "+00:00:00.052" + "'", str25, "+00:00:00.052");
// flaky:         org.junit.Assert.assertTrue("'" + int27 + "' != '" + 52 + "'", int27 == 52);
    }

    @Test
    public void test19318() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19318");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forTimeZone(timeZone2);
        org.joda.time.chrono.GJChronology gJChronology4 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone3);
        org.joda.time.DateTimeField dateTimeField5 = gJChronology4.millisOfSecond();
        int int6 = instant1.get(dateTimeField5);
        org.joda.time.Instant instant8 = instant1.plus(0L);
        java.util.TimeZone timeZone9 = null;
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forTimeZone(timeZone9);
        org.joda.time.chrono.GJChronology gJChronology11 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone10);
        org.joda.time.DurationField durationField12 = gJChronology11.halfdays();
        org.joda.time.Chronology chronology13 = gJChronology11.withUTC();
        java.lang.String str14 = gJChronology11.toString();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology11.hourOfHalfday();
        int int16 = instant1.get(dateTimeField15);
        java.util.TimeZone timeZone17 = null;
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forTimeZone(timeZone17);
        org.joda.time.chrono.GJChronology gJChronology19 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone18);
        org.joda.time.DurationField durationField20 = gJChronology19.halfdays();
        long long24 = gJChronology19.add((long) 'a', (-1L), (int) (short) 0);
        org.joda.time.DateTimeField dateTimeField25 = gJChronology19.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField26 = gJChronology19.secondOfMinute();
        org.joda.time.Instant instant28 = new org.joda.time.Instant(52L);
        boolean boolean29 = instant28.isEqualNow();
        org.joda.time.ReadableDuration readableDuration30 = null;
        org.joda.time.Instant instant31 = instant28.plus(readableDuration30);
        boolean boolean32 = gJChronology19.equals((java.lang.Object) instant28);
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = null;
        boolean boolean34 = instant28.isSupported(dateTimeFieldType33);
        org.joda.time.DateTimeFieldType dateTimeFieldType35 = null;
        boolean boolean36 = instant28.isSupported(dateTimeFieldType35);
        org.joda.time.DateTimeZone dateTimeZone37 = instant28.getZone();
        boolean boolean38 = instant1.isAfter((org.joda.time.ReadableInstant) instant28);
        org.joda.time.Instant instant40 = instant28.plus((long) 4);
        org.joda.time.Instant instant42 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone43 = null;
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.forTimeZone(timeZone43);
        org.joda.time.chrono.GJChronology gJChronology45 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone44);
        org.joda.time.DateTimeField dateTimeField46 = gJChronology45.millisOfSecond();
        int int47 = instant42.get(dateTimeField46);
        org.joda.time.Instant instant49 = instant42.plus(0L);
        java.util.TimeZone timeZone50 = null;
        org.joda.time.DateTimeZone dateTimeZone51 = org.joda.time.DateTimeZone.forTimeZone(timeZone50);
        org.joda.time.chrono.GJChronology gJChronology52 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone51);
        org.joda.time.DurationField durationField53 = gJChronology52.halfdays();
        org.joda.time.Chronology chronology54 = gJChronology52.withUTC();
        java.lang.String str55 = gJChronology52.toString();
        org.joda.time.DateTimeField dateTimeField56 = gJChronology52.hourOfHalfday();
        int int57 = instant42.get(dateTimeField56);
        org.joda.time.Instant instant59 = new org.joda.time.Instant(52L);
        boolean boolean60 = instant59.isEqualNow();
        java.lang.String str61 = instant59.toString();
        org.joda.time.Instant instant63 = new org.joda.time.Instant(52L);
        boolean boolean64 = instant63.isEqualNow();
        java.lang.String str65 = instant63.toString();
        java.lang.String str66 = instant63.toString();
        org.joda.time.Instant instant69 = instant63.withDurationAdded(115200000L, (int) (short) 1);
        int int70 = instant59.compareTo((org.joda.time.ReadableInstant) instant63);
        org.joda.time.Instant instant72 = new org.joda.time.Instant(52L);
        boolean boolean73 = instant72.isEqualNow();
        org.joda.time.ReadableDuration readableDuration74 = null;
        org.joda.time.Instant instant75 = instant72.plus(readableDuration74);
        boolean boolean77 = instant75.equals((java.lang.Object) ' ');
        boolean boolean78 = instant63.isAfter((org.joda.time.ReadableInstant) instant75);
        int int79 = instant42.compareTo((org.joda.time.ReadableInstant) instant63);
        long long80 = instant63.getMillis();
        java.util.TimeZone timeZone81 = null;
        org.joda.time.DateTimeZone dateTimeZone82 = org.joda.time.DateTimeZone.forTimeZone(timeZone81);
        java.lang.String str84 = dateTimeZone82.getNameKey((long) 100);
        boolean boolean85 = dateTimeZone82.isFixed();
        org.joda.time.chrono.GJChronology gJChronology86 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone82);
        int int87 = gJChronology86.getMinimumDaysInFirstWeek();
        java.lang.String str88 = gJChronology86.toString();
        org.joda.time.DateTimeField dateTimeField89 = gJChronology86.yearOfEra();
        org.joda.time.DateTimeField dateTimeField90 = gJChronology86.yearOfCentury();
        int int91 = instant63.get(dateTimeField90);
        boolean boolean92 = instant40.isBefore((org.joda.time.ReadableInstant) instant63);
        org.joda.time.Instant instant94 = instant40.plus(1247262110179199981L);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(gJChronology4);
        org.junit.Assert.assertNotNull(dateTimeField5);
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 104 + "'", int6 == 104);
        org.junit.Assert.assertNotNull(instant8);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(gJChronology11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(chronology13);
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "GJChronology[+00:00:00.052]" + "'", str14, "GJChronology[+00:00:00.052]");
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(gJChronology19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 97L + "'", long24 == 97L);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(instant31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(instant40);
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertNotNull(gJChronology45);
        org.junit.Assert.assertNotNull(dateTimeField46);
// flaky:         org.junit.Assert.assertTrue("'" + int47 + "' != '" + 104 + "'", int47 == 104);
        org.junit.Assert.assertNotNull(instant49);
        org.junit.Assert.assertNotNull(dateTimeZone51);
        org.junit.Assert.assertNotNull(gJChronology52);
        org.junit.Assert.assertNotNull(durationField53);
        org.junit.Assert.assertNotNull(chronology54);
// flaky:         org.junit.Assert.assertEquals("'" + str55 + "' != '" + "GJChronology[+00:00:00.052]" + "'", str55, "GJChronology[+00:00:00.052]");
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "1970-01-01T00:00:00.052Z" + "'", str61, "1970-01-01T00:00:00.052Z");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "1970-01-01T00:00:00.052Z" + "'", str65, "1970-01-01T00:00:00.052Z");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "1970-01-01T00:00:00.052Z" + "'", str66, "1970-01-01T00:00:00.052Z");
        org.junit.Assert.assertNotNull(instant69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(instant75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertTrue("'" + long80 + "' != '" + 52L + "'", long80 == 52L);
        org.junit.Assert.assertNotNull(dateTimeZone82);
// flaky:         org.junit.Assert.assertNull(str84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertNotNull(gJChronology86);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 4 + "'", int87 == 4);
// flaky:         org.junit.Assert.assertEquals("'" + str88 + "' != '" + "GJChronology[+00:00:00.052]" + "'", str88, "GJChronology[+00:00:00.052]");
        org.junit.Assert.assertNotNull(dateTimeField89);
        org.junit.Assert.assertNotNull(dateTimeField90);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 70 + "'", int91 == 70);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertNotNull(instant94);
    }

    @Test
    public void test19319() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19319");
        java.util.Locale locale1 = java.util.Locale.forLanguageTag("\u52a0\u62ff\u5927");
        java.util.Locale locale3 = java.util.Locale.forLanguageTag("1970-01-01T00:00:00.052Z");
        java.util.Locale locale5 = new java.util.Locale("hi!");
        java.lang.String str6 = locale3.getDisplayCountry(locale5);
        java.util.Locale.setDefault(locale5);
        java.lang.String str8 = locale1.getDisplayLanguage(locale5);
        java.lang.String str9 = locale1.getDisplayScript();
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "");
        org.junit.Assert.assertEquals(locale5.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
    }

    @Test
    public void test19320() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19320");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str3 = dateTimeZone1.getNameKey((long) 100);
        boolean boolean4 = dateTimeZone1.isFixed();
        java.util.Locale locale8 = new java.util.Locale("DurationField[halfdays]", "\u82f1\u6587");
        java.lang.String str9 = dateTimeZone1.getName((long) (short) 10, locale8);
        org.joda.time.Instant instant11 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone12 = null;
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forTimeZone(timeZone12);
        org.joda.time.chrono.GJChronology gJChronology14 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone13);
        org.joda.time.DateTimeField dateTimeField15 = gJChronology14.millisOfSecond();
        int int16 = instant11.get(dateTimeField15);
        org.joda.time.Chronology chronology17 = instant11.getChronology();
        org.joda.time.chrono.GJChronology gJChronology18 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1, (org.joda.time.ReadableInstant) instant11);
        java.util.TimeZone timeZone19 = null;
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forTimeZone(timeZone19);
        org.joda.time.chrono.GJChronology gJChronology21 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone20);
        org.joda.time.DurationField durationField22 = gJChronology21.halfdays();
        org.joda.time.Chronology chronology23 = gJChronology21.withUTC();
        java.lang.String str24 = gJChronology21.toString();
        org.joda.time.DateTimeField dateTimeField25 = gJChronology21.hourOfHalfday();
        java.util.TimeZone timeZone26 = null;
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forTimeZone(timeZone26);
        java.lang.String str29 = dateTimeZone27.getNameKey((long) 100);
        boolean boolean30 = dateTimeZone27.isFixed();
        org.joda.time.chrono.GJChronology gJChronology31 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone27);
        java.lang.String str32 = dateTimeZone27.toString();
        long long35 = dateTimeZone27.adjustOffset((-61827739199999L), false);
        org.joda.time.Chronology chronology36 = gJChronology21.withZone(dateTimeZone27);
        org.joda.time.Chronology chronology37 = gJChronology18.withZone(dateTimeZone27);
        org.joda.time.Instant instant39 = new org.joda.time.Instant(52L);
        boolean boolean40 = instant39.isEqualNow();
        java.lang.String str41 = instant39.toString();
        org.joda.time.Instant instant43 = new org.joda.time.Instant(52L);
        boolean boolean44 = instant43.isEqualNow();
        java.lang.String str45 = instant43.toString();
        java.lang.String str46 = instant43.toString();
        org.joda.time.Instant instant49 = instant43.withDurationAdded(115200000L, (int) (short) 1);
        int int50 = instant39.compareTo((org.joda.time.ReadableInstant) instant43);
        org.joda.time.Instant instant52 = new org.joda.time.Instant(52L);
        boolean boolean53 = instant52.isEqualNow();
        org.joda.time.ReadableDuration readableDuration54 = null;
        org.joda.time.Instant instant55 = instant52.plus(readableDuration54);
        boolean boolean57 = instant55.equals((java.lang.Object) ' ');
        boolean boolean58 = instant43.isAfter((org.joda.time.ReadableInstant) instant55);
        org.joda.time.chrono.GJChronology gJChronology59 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone27, (org.joda.time.ReadableInstant) instant55);
        org.joda.time.Chronology chronology60 = gJChronology59.withUTC();
        org.joda.time.DateTimeField dateTimeField61 = chronology60.yearOfEra();
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
// flaky:         org.junit.Assert.assertEquals(locale8.toString(), "\u82f1\u6587");
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+00:00:00.052" + "'", str9, "+00:00:00.052");
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(gJChronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
// flaky:         org.junit.Assert.assertTrue("'" + int16 + "' != '" + 104 + "'", int16 == 104);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(gJChronology18);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(gJChronology21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(chronology23);
// flaky:         org.junit.Assert.assertEquals("'" + str24 + "' != '" + "GJChronology[+00:00:00.052]" + "'", str24, "GJChronology[+00:00:00.052]");
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeZone27);
// flaky:         org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(gJChronology31);
// flaky:         org.junit.Assert.assertEquals("'" + str32 + "' != '" + "+00:00:00.052" + "'", str32, "+00:00:00.052");
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + (-61827739199999L) + "'", long35 == (-61827739199999L));
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "1970-01-01T00:00:00.052Z" + "'", str41, "1970-01-01T00:00:00.052Z");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "1970-01-01T00:00:00.052Z" + "'", str45, "1970-01-01T00:00:00.052Z");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "1970-01-01T00:00:00.052Z" + "'", str46, "1970-01-01T00:00:00.052Z");
        org.junit.Assert.assertNotNull(instant49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(instant55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(gJChronology59);
        org.junit.Assert.assertNotNull(chronology60);
        org.junit.Assert.assertNotNull(dateTimeField61);
    }

    @Test
    public void test19321() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19321");
        java.util.List<java.util.Locale.LanguageRange> languageRangeList1 = java.util.Locale.LanguageRange.parse("it");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap2 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList3 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList1, strMap2);
        org.junit.Assert.assertNotNull(languageRangeList1);
        org.junit.Assert.assertNotNull(languageRangeList3);
    }

    @Test
    public void test19322() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19322");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = gJChronology2.years();
        java.util.TimeZone timeZone4 = null;
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forTimeZone(timeZone4);
        org.joda.time.chrono.GJChronology gJChronology6 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone5);
        org.joda.time.DurationField durationField7 = gJChronology6.halfdays();
        org.joda.time.DateTimeField dateTimeField8 = gJChronology6.millisOfDay();
        org.joda.time.DateTimeField dateTimeField9 = gJChronology6.minuteOfDay();
        org.joda.time.DurationField durationField10 = gJChronology6.centuries();
        java.util.TimeZone timeZone11 = null;
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forTimeZone(timeZone11);
        org.joda.time.chrono.GJChronology gJChronology13 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone12);
        org.joda.time.DurationField durationField14 = gJChronology13.halfdays();
        long long17 = durationField14.add((long) 100, 100L);
        boolean boolean18 = durationField14.isPrecise();
        int int19 = durationField10.compareTo(durationField14);
        boolean boolean20 = gJChronology2.equals((java.lang.Object) durationField10);
        org.joda.time.DateTimeField dateTimeField21 = gJChronology2.dayOfYear();
        org.joda.time.DateTimeField dateTimeField22 = gJChronology2.era();
        org.joda.time.DateTimeZone dateTimeZone23 = gJChronology2.getZone();
        org.joda.time.Instant instant24 = gJChronology2.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration25 = null;
        org.joda.time.Instant instant26 = instant24.plus(readableDuration25);
        org.joda.time.Instant instant27 = org.joda.time.Instant.now();
        java.util.TimeZone timeZone28 = null;
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forTimeZone(timeZone28);
        org.joda.time.chrono.GJChronology gJChronology30 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone29);
        org.joda.time.DurationField durationField31 = gJChronology30.halfdays();
        org.joda.time.DateTimeField dateTimeField32 = gJChronology30.millisOfDay();
        org.joda.time.DateTimeField dateTimeField33 = gJChronology30.halfdayOfDay();
        int int34 = instant27.get(dateTimeField33);
        java.util.TimeZone timeZone35 = null;
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.forTimeZone(timeZone35);
        org.joda.time.chrono.GJChronology gJChronology37 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone36);
        long long41 = dateTimeZone36.convertLocalToUTC((long) (byte) -1, true, 0L);
        boolean boolean43 = dateTimeZone36.equals((java.lang.Object) true);
        org.joda.time.chrono.GJChronology gJChronology44 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone36);
        org.joda.time.DateTimeField dateTimeField45 = gJChronology44.weekyear();
        org.joda.time.DateTimeField dateTimeField46 = gJChronology44.clockhourOfHalfday();
        org.joda.time.MutableDateTime mutableDateTime47 = instant27.toMutableDateTime((org.joda.time.Chronology) gJChronology44);
        boolean boolean48 = instant24.isAfter((org.joda.time.ReadableInstant) instant27);
        org.joda.time.Instant instant51 = instant27.withDurationAdded(3692163384000L, 70);
        long long52 = instant27.getMillis();
        java.util.TimeZone timeZone53 = null;
        org.joda.time.DateTimeZone dateTimeZone54 = org.joda.time.DateTimeZone.forTimeZone(timeZone53);
        org.joda.time.chrono.GJChronology gJChronology55 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone54);
        org.joda.time.DateTimeField dateTimeField56 = gJChronology55.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField57 = gJChronology55.millisOfSecond();
        org.joda.time.DurationField durationField58 = gJChronology55.days();
        org.joda.time.DurationField durationField59 = gJChronology55.hours();
        org.joda.time.DurationField durationField60 = gJChronology55.weeks();
        boolean boolean61 = instant27.equals((java.lang.Object) gJChronology55);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(gJChronology6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(gJChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 4320000100L + "'", long17 == 4320000100L);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(instant24);
        org.junit.Assert.assertNotNull(instant26);
        org.junit.Assert.assertNotNull(instant27);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(gJChronology30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertNotNull(gJChronology37);
// flaky:         org.junit.Assert.assertTrue("'" + long41 + "' != '" + (-53L) + "'", long41 == (-53L));
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(gJChronology44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(mutableDateTime47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(instant51);
// flaky:         org.junit.Assert.assertTrue("'" + long52 + "' != '" + 1644573113482L + "'", long52 == 1644573113482L);
        org.junit.Assert.assertNotNull(dateTimeZone54);
        org.junit.Assert.assertNotNull(gJChronology55);
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertNotNull(durationField58);
        org.junit.Assert.assertNotNull(durationField59);
        org.junit.Assert.assertNotNull(durationField60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
    }

    @Test
    public void test19323() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19323");
        java.util.Locale locale1 = java.util.Locale.forLanguageTag("\u82f1\u6587\u82f1\u570b)");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
    }

    @Test
    public void test19324() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19324");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        int int3 = dateTimeZone1.getOffsetFromLocal((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(0, (int) (short) 10);
        long long8 = dateTimeZone1.getMillisKeepLocal(dateTimeZone6, (-61827926399999L));
        java.util.Locale locale10 = java.util.Locale.getDefault();
        java.lang.String str11 = locale10.getDisplayLanguage();
        java.lang.String str12 = dateTimeZone6.getShortName(186805440000000000L, locale10);
        java.util.Locale locale14 = java.util.Locale.GERMANY;
        java.lang.String str15 = locale14.getDisplayLanguage();
        java.util.Locale locale16 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str17 = locale14.getDisplayVariant(locale16);
        java.lang.String str18 = dateTimeZone6.getName(31556952000L, locale14);
        org.joda.time.chrono.GJChronology gJChronology19 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone6);
        org.joda.time.Chronology chronology20 = gJChronology19.withUTC();
        long long24 = gJChronology19.add((-59958208800000L), 1431205L, 1182);
        org.joda.time.Chronology chronology25 = gJChronology19.withUTC();
        // The following exception was thrown during execution in test generation
        try {
            long long30 = chronology25.getDateTimeMillis((-8575816), 47040000, 4200000, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 47040000 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 52 + "'", int3 == 52);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-61827926999947L) + "'", long8 == (-61827926999947L));
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+00:10" + "'", str12, "+00:10");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "German" + "'", str15, "German");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "+00:10" + "'", str18, "+00:10");
        org.junit.Assert.assertNotNull(gJChronology19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + (-59956517115690L) + "'", long24 == (-59956517115690L));
        org.junit.Assert.assertNotNull(chronology25);
    }

    @Test
    public void test19325() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19325");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField3 = gJChronology2.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.weekyear();
        org.joda.time.DurationField durationField5 = gJChronology2.centuries();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology2.halfdayOfDay();
        org.joda.time.DurationField durationField7 = gJChronology2.minutes();
        org.joda.time.DateTimeField dateTimeField8 = gJChronology2.year();
        org.joda.time.DateTimeField dateTimeField9 = gJChronology2.hourOfDay();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
    }

    @Test
    public void test19326() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19326");
        java.util.Locale locale1 = new java.util.Locale("DurationField[months]");
        java.util.Locale locale3 = java.util.Locale.forLanguageTag("English (United States)");
        java.lang.String str4 = locale1.getDisplayName(locale3);
        java.lang.Object obj5 = locale3.clone();
        org.junit.Assert.assertEquals(locale1.toString(), "durationfield[months]");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "durationfield[months]" + "'", str4, "durationfield[months]");
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "");
    }

    @Test
    public void test19327() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19327");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        boolean boolean2 = instant1.isEqualNow();
        org.joda.time.Instant instant4 = new org.joda.time.Instant(52L);
        org.joda.time.Instant instant6 = instant4.withMillis((long) 'u');
        boolean boolean7 = instant1.isAfter((org.joda.time.ReadableInstant) instant4);
        org.joda.time.Instant instant10 = instant1.withDurationAdded(747221751619200000L, (int) (byte) 0);
        org.joda.time.Instant instant13 = instant10.withDurationAdded(1217116991556L, (int) 'a');
        org.joda.time.Instant instant14 = instant13.toInstant();
        org.joda.time.Instant instant16 = instant13.minus(0L);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(instant6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(instant10);
        org.junit.Assert.assertNotNull(instant13);
        org.junit.Assert.assertNotNull(instant14);
        org.junit.Assert.assertNotNull(instant16);
    }

    @Test
    public void test19328() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19328");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = gJChronology2.halfdays();
        long long7 = gJChronology2.add(0L, (long) (short) -1, (int) '4');
        java.util.TimeZone timeZone8 = null;
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forTimeZone(timeZone8);
        org.joda.time.chrono.GJChronology gJChronology10 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone9);
        org.joda.time.DurationField durationField11 = gJChronology10.halfdays();
        org.joda.time.DateTimeField dateTimeField12 = gJChronology10.millisOfDay();
        org.joda.time.DateTimeField dateTimeField13 = gJChronology10.minuteOfDay();
        org.joda.time.DurationField durationField14 = gJChronology10.centuries();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology10.dayOfYear();
        java.lang.String str16 = gJChronology10.toString();
        org.joda.time.DurationField durationField17 = gJChronology10.years();
        org.joda.time.DateTimeField dateTimeField18 = gJChronology10.yearOfEra();
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(0, (int) (short) 10);
        org.joda.time.Chronology chronology22 = gJChronology10.withZone(dateTimeZone21);
        org.joda.time.Chronology chronology23 = gJChronology2.withZone(dateTimeZone21);
        org.joda.time.DurationField durationField24 = gJChronology2.halfdays();
        org.joda.time.Instant instant25 = gJChronology2.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration26 = null;
        org.joda.time.Instant instant27 = instant25.plus(readableDuration26);
        java.util.TimeZone timeZone28 = null;
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forTimeZone(timeZone28);
        java.lang.String str31 = dateTimeZone29.getNameKey((long) 100);
        boolean boolean32 = dateTimeZone29.isFixed();
        java.util.Locale locale36 = new java.util.Locale("DurationField[halfdays]", "\u82f1\u6587");
        java.lang.String str37 = dateTimeZone29.getName((long) (short) 10, locale36);
        org.joda.time.Instant instant39 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone40 = null;
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.forTimeZone(timeZone40);
        org.joda.time.chrono.GJChronology gJChronology42 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone41);
        org.joda.time.DateTimeField dateTimeField43 = gJChronology42.millisOfSecond();
        int int44 = instant39.get(dateTimeField43);
        org.joda.time.Chronology chronology45 = instant39.getChronology();
        org.joda.time.chrono.GJChronology gJChronology46 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone29, (org.joda.time.ReadableInstant) instant39);
        org.joda.time.Instant instant49 = instant39.withDurationAdded(4320000001L, 432086114);
        boolean boolean50 = instant27.isAfter((org.joda.time.ReadableInstant) instant49);
        java.lang.String str51 = instant27.toString();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter52 = null;
        java.lang.String str53 = instant27.toString(dateTimeFormatter52);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-52L) + "'", long7 == (-52L));
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(gJChronology10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "GJChronology[+00:00:00.052]" + "'", str16, "GJChronology[+00:00:00.052]");
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertNotNull(instant25);
        org.junit.Assert.assertNotNull(instant27);
        org.junit.Assert.assertNotNull(dateTimeZone29);
// flaky:         org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
// flaky:         org.junit.Assert.assertEquals(locale36.toString(), "\u82f1\u6587");
// flaky:         org.junit.Assert.assertEquals("'" + str37 + "' != '" + "+00:00:00.052" + "'", str37, "+00:00:00.052");
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertNotNull(gJChronology42);
        org.junit.Assert.assertNotNull(dateTimeField43);
// flaky:         org.junit.Assert.assertTrue("'" + int44 + "' != '" + 104 + "'", int44 == 104);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(gJChronology46);
        org.junit.Assert.assertNotNull(instant49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "1582-10-15T00:00:00.000Z" + "'", str51, "1582-10-15T00:00:00.000Z");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "1582-10-15T00:00:00.000Z" + "'", str53, "1582-10-15T00:00:00.000Z");
    }

    @Test
    public void test19329() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19329");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = gJChronology2.halfdays();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.millisOfDay();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.minuteOfDay();
        org.joda.time.DurationField durationField6 = gJChronology2.centuries();
        int int7 = gJChronology2.getMinimumDaysInFirstWeek();
        org.joda.time.DateTimeField dateTimeField8 = gJChronology2.weekyear();
        org.joda.time.DateTimeField dateTimeField9 = gJChronology2.weekyearOfCentury();
        org.joda.time.DurationField durationField10 = gJChronology2.halfdays();
        java.lang.String str11 = gJChronology2.toString();
        org.joda.time.DateTimeField dateTimeField12 = gJChronology2.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField13 = gJChronology2.clockhourOfDay();
        org.joda.time.DurationField durationField14 = gJChronology2.weekyears();
        org.joda.time.DurationField durationField15 = gJChronology2.weekyears();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 4 + "'", int7 == 4);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(durationField10);
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "GJChronology[+00:00:00.052]" + "'", str11, "GJChronology[+00:00:00.052]");
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(durationField15);
    }

    @Test
    public void test19330() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19330");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str3 = dateTimeZone1.getNameKey((long) 100);
        boolean boolean4 = dateTimeZone1.isFixed();
        org.joda.time.chrono.GJChronology gJChronology5 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        int int6 = gJChronology5.getMinimumDaysInFirstWeek();
        java.lang.String str7 = gJChronology5.toString();
        org.joda.time.DateTimeField dateTimeField8 = gJChronology5.yearOfEra();
        org.joda.time.DateTimeField dateTimeField9 = gJChronology5.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField10 = gJChronology5.dayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology12 = gJChronology5.withZone(dateTimeZone11);
        org.joda.time.Chronology chronology13 = chronology12.withUTC();
        org.joda.time.DateTimeField dateTimeField14 = chronology12.clockhourOfDay();
        org.joda.time.DurationField durationField15 = chronology12.minutes();
        long long18 = durationField15.getDifferenceAsLong(1244166547800097L, 0L);
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(gJChronology5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 4 + "'", int6 == 4);
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "GJChronology[+00:00:00.052]" + "'", str7, "GJChronology[+00:00:00.052]");
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 20736109130L + "'", long18 == 20736109130L);
    }

    @Test
    public void test19331() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19331");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = gJChronology2.halfdays();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.minuteOfDay();
        java.util.TimeZone timeZone5 = null;
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        java.lang.String str8 = dateTimeZone6.getNameKey((long) 100);
        boolean boolean9 = dateTimeZone6.isFixed();
        java.lang.String str10 = dateTimeZone6.toString();
        boolean boolean12 = dateTimeZone6.isStandardOffset((long) (byte) 0);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone6);
        org.joda.time.Chronology chronology14 = gJChronology2.withZone(dateTimeZone6);
        java.lang.String str16 = dateTimeZone6.getName(7769534999952L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "+00:00:00.052" + "'", str10, "+00:00:00.052");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(chronology14);
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "+00:00:00.052" + "'", str16, "+00:00:00.052");
    }

    @Test
    public void test19332() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19332");
        java.util.Locale locale2 = new java.util.Locale("GJChronology[+00:10]", "TW");
        java.lang.String str3 = locale2.getDisplayScript();
        org.junit.Assert.assertEquals(locale2.toString(), "gjchronology[+00:10]_TW");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
    }

    @Test
    public void test19333() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19333");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField3 = gJChronology2.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.weekyear();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology2.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology2.minuteOfDay();
        java.util.TimeZone timeZone8 = null;
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forTimeZone(timeZone8);
        org.joda.time.chrono.GJChronology gJChronology10 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone9);
        org.joda.time.DateTimeField dateTimeField11 = gJChronology10.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField12 = gJChronology10.weekyearOfCentury();
        org.joda.time.Instant instant13 = gJChronology10.getGregorianCutover();
        org.joda.time.Instant instant15 = instant13.withMillis(0L);
        org.joda.time.Instant instant17 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone18 = null;
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forTimeZone(timeZone18);
        org.joda.time.chrono.GJChronology gJChronology20 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone19);
        org.joda.time.DateTimeField dateTimeField21 = gJChronology20.millisOfSecond();
        int int22 = instant17.get(dateTimeField21);
        org.joda.time.Instant instant24 = instant17.plus(0L);
        int int25 = instant15.compareTo((org.joda.time.ReadableInstant) instant24);
        org.joda.time.DateTimeZone dateTimeZone26 = instant24.getZone();
        int int28 = dateTimeZone26.getOffset((-2246400017L));
        org.joda.time.Instant instant30 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone31 = null;
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.forTimeZone(timeZone31);
        org.joda.time.chrono.GJChronology gJChronology33 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone32);
        org.joda.time.DateTimeField dateTimeField34 = gJChronology33.millisOfSecond();
        int int35 = instant30.get(dateTimeField34);
        org.joda.time.Instant instant37 = instant30.plus(0L);
        long long38 = instant37.getMillis();
        org.joda.time.Instant instant41 = instant37.withDurationAdded((long) 12, 97);
        int int42 = dateTimeZone26.getOffset((org.joda.time.ReadableInstant) instant41);
        long long44 = dateTimeZone26.nextTransition(3732480000000000L);
        org.joda.time.LocalDateTime localDateTime45 = null;
        boolean boolean46 = dateTimeZone26.isLocalDateTimeGap(localDateTime45);
        java.lang.String str48 = dateTimeZone26.getNameKey(55299599896L);
        org.joda.time.Chronology chronology49 = gJChronology2.withZone(dateTimeZone26);
        org.joda.time.DateTimeField dateTimeField50 = gJChronology2.centuryOfEra();
        // The following exception was thrown during execution in test generation
        try {
            long long55 = gJChronology2.getDateTimeMillis((int) (short) 100, (-86403528), 1164, (-75428));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -75428 for millisOfDay must be in the range [0,86399999]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(gJChronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(instant13);
        org.junit.Assert.assertNotNull(instant15);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(gJChronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
// flaky:         org.junit.Assert.assertTrue("'" + int22 + "' != '" + 104 + "'", int22 == 104);
        org.junit.Assert.assertNotNull(instant24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertNotNull(gJChronology33);
        org.junit.Assert.assertNotNull(dateTimeField34);
// flaky:         org.junit.Assert.assertTrue("'" + int35 + "' != '" + 104 + "'", int35 == 104);
        org.junit.Assert.assertNotNull(instant37);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 52L + "'", long38 == 52L);
        org.junit.Assert.assertNotNull(instant41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 3732480000000000L + "'", long44 == 3732480000000000L);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "UTC" + "'", str48, "UTC");
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertNotNull(dateTimeField50);
    }

    @Test
    public void test19334() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19334");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = gJChronology2.halfdays();
        long long7 = gJChronology2.add((long) 'a', (-1L), (int) (short) 0);
        boolean boolean9 = gJChronology2.equals((java.lang.Object) 0);
        org.joda.time.DateTimeField dateTimeField10 = gJChronology2.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField11 = gJChronology2.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField12 = gJChronology2.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField13 = gJChronology2.year();
        org.joda.time.DurationField durationField14 = gJChronology2.years();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology2.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField16 = gJChronology2.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField17 = gJChronology2.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField18 = gJChronology2.monthOfYear();
        java.util.TimeZone timeZone19 = null;
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forTimeZone(timeZone19);
        org.joda.time.chrono.GJChronology gJChronology21 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone20);
        org.joda.time.DurationField durationField22 = gJChronology21.halfdays();
        long long26 = gJChronology21.add((long) 'a', (-1L), (int) (short) 0);
        long long30 = gJChronology21.add((long) (byte) 0, (long) '4', 100);
        org.joda.time.DateTimeField dateTimeField31 = gJChronology21.weekyearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.forOffsetMillis((int) '4');
        java.util.TimeZone timeZone34 = dateTimeZone33.toTimeZone();
        long long37 = dateTimeZone33.adjustOffset((long) 0, false);
        int int39 = dateTimeZone33.getOffsetFromLocal((-26438399999L));
        long long41 = dateTimeZone33.previousTransition((long) (byte) 1);
        java.lang.String str42 = dateTimeZone33.getID();
        org.joda.time.LocalDateTime localDateTime43 = null;
        boolean boolean44 = dateTimeZone33.isLocalDateTimeGap(localDateTime43);
        org.joda.time.Chronology chronology45 = gJChronology21.withZone(dateTimeZone33);
        long long48 = dateTimeZone33.convertLocalToUTC((-2208729599948L), true);
        org.joda.time.Chronology chronology49 = gJChronology2.withZone(dateTimeZone33);
        org.joda.time.DateTimeField dateTimeField50 = gJChronology2.secondOfDay();
        org.joda.time.DurationField durationField51 = gJChronology2.minutes();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 97L + "'", long7 == 97L);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(gJChronology21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 97L + "'", long26 == 97L);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 5200L + "'", long30 == 5200L);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertNotNull(timeZone34);
        org.junit.Assert.assertEquals(timeZone34.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 52 + "'", int39 == 52);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 1L + "'", long41 == 1L);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "+00:00:00.052" + "'", str42, "+00:00:00.052");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + (-2208729600000L) + "'", long48 == (-2208729600000L));
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(durationField51);
    }

    @Test
    public void test19335() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19335");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clear();
        java.util.Locale.Builder builder2 = builder0.clearExtensions();
        java.util.Locale.Builder builder4 = builder0.setVariant("halfdays");
        java.util.Locale.Builder builder6 = builder0.setScript("");
        java.util.Locale.Builder builder7 = builder0.clearExtensions();
        java.util.Locale locale8 = builder0.build();
        java.util.Locale.Builder builder10 = builder0.addUnicodeLocaleAttribute("jpn");
        java.util.Locale locale14 = new java.util.Locale("zho", "+52:00", "");
        java.lang.String str15 = locale14.getDisplayName();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder16 = builder10.setLocale(locale14);
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed region: +52:00 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "");
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertEquals(locale14.toString(), "zho_+52:00");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "zho (+52:00)" + "'", str15, "zho (+52:00)");
    }

    @Test
    public void test19336() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19336");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField3 = gJChronology2.era();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.weekyear();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.weekyearOfCentury();
        org.joda.time.DurationField durationField6 = gJChronology2.millis();
        org.joda.time.DurationField durationField7 = gJChronology2.halfdays();
        org.joda.time.DurationField durationField8 = gJChronology2.halfdays();
        int int9 = gJChronology2.getMinimumDaysInFirstWeek();
        org.joda.time.DurationField durationField10 = gJChronology2.hours();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 4 + "'", int9 == 4);
        org.junit.Assert.assertNotNull(durationField10);
    }

    @Test
    public void test19337() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19337");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = gJChronology2.halfdays();
        long long7 = gJChronology2.add((long) 'a', (-1L), (int) (short) 0);
        boolean boolean9 = gJChronology2.equals((java.lang.Object) 0);
        org.joda.time.DateTimeField dateTimeField10 = gJChronology2.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField11 = gJChronology2.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField12 = gJChronology2.clockhourOfDay();
        long long17 = gJChronology2.getDateTimeMillis(10, (int) (short) 10, 4, (int) (byte) 1);
        org.joda.time.DateTimeField dateTimeField18 = gJChronology2.millisOfDay();
        java.lang.String str19 = gJChronology2.toString();
        org.joda.time.DateTimeField dateTimeField20 = gJChronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField21 = gJChronology2.clockhourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone22 = gJChronology2.getZone();
        org.joda.time.DurationField durationField23 = gJChronology2.months();
        long long25 = durationField23.getValueAsLong((-17174412L));
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 97L + "'", long7 == 97L);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
// flaky:         org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-61827926400051L) + "'", long17 == (-61827926400051L));
        org.junit.Assert.assertNotNull(dateTimeField18);
// flaky:         org.junit.Assert.assertEquals("'" + str19 + "' != '" + "GJChronology[+00:00:00.052]" + "'", str19, "GJChronology[+00:00:00.052]");
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
    }

    @Test
    public void test19338() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19338");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str3 = dateTimeZone1.getNameKey((long) 100);
        boolean boolean4 = dateTimeZone1.isFixed();
        org.joda.time.chrono.GJChronology gJChronology5 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        int int6 = gJChronology5.getMinimumDaysInFirstWeek();
        java.lang.String str7 = gJChronology5.toString();
        org.joda.time.DateTimeField dateTimeField8 = gJChronology5.yearOfEra();
        org.joda.time.DateTimeField dateTimeField9 = gJChronology5.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField10 = gJChronology5.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField11 = gJChronology5.millisOfDay();
        org.joda.time.DurationField durationField12 = gJChronology5.years();
        org.joda.time.ReadablePartial readablePartial13 = null;
        int[] intArray19 = new int[] { (-876576), 4157, 100, (-28), 3736557 };
        // The following exception was thrown during execution in test generation
        try {
            gJChronology5.validate(readablePartial13, intArray19);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(gJChronology5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 4 + "'", int6 == 4);
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "GJChronology[+00:00:00.052]" + "'", str7, "GJChronology[+00:00:00.052]");
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-876576, 4157, 100, -28, 3736557]");
    }

    @Test
    public void test19339() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19339");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        boolean boolean2 = instant1.isEqualNow();
        org.joda.time.ReadableDuration readableDuration3 = null;
        org.joda.time.Instant instant4 = instant1.plus(readableDuration3);
        long long5 = instant1.getMillis();
        java.lang.Object obj6 = null;
        boolean boolean7 = instant1.equals(obj6);
        org.joda.time.Chronology chronology8 = instant1.getChronology();
        org.joda.time.Instant instant10 = instant1.minus((long) (byte) 10);
        java.util.TimeZone timeZone11 = null;
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forTimeZone(timeZone11);
        org.joda.time.chrono.GJChronology gJChronology13 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone12);
        org.joda.time.DateTimeField dateTimeField14 = gJChronology13.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology13.yearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone16 = gJChronology13.getZone();
        org.joda.time.DateTimeField dateTimeField17 = gJChronology13.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField18 = gJChronology13.hourOfDay();
        int int19 = instant1.get(dateTimeField18);
        org.joda.time.Instant instant21 = new org.joda.time.Instant(52L);
        boolean boolean22 = instant21.isEqualNow();
        java.lang.String str23 = instant21.toString();
        java.util.TimeZone timeZone24 = null;
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forTimeZone(timeZone24);
        org.joda.time.chrono.GJChronology gJChronology26 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone25);
        java.util.Locale locale28 = new java.util.Locale("hi!");
        java.lang.String str29 = locale28.getCountry();
        java.util.Locale locale30 = java.util.Locale.getDefault();
        java.lang.String str31 = locale30.getDisplayName();
        java.lang.String str32 = locale28.getDisplayScript(locale30);
        boolean boolean33 = dateTimeZone25.equals((java.lang.Object) locale30);
        int int35 = dateTimeZone25.getOffsetFromLocal((long) (short) 10);
        java.util.TimeZone timeZone36 = null;
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.forTimeZone(timeZone36);
        org.joda.time.chrono.GJChronology gJChronology38 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone37);
        org.joda.time.DateTimeField dateTimeField39 = gJChronology38.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField40 = gJChronology38.weekyearOfCentury();
        org.joda.time.Instant instant41 = gJChronology38.getGregorianCutover();
        org.joda.time.Instant instant43 = instant41.withMillis(0L);
        org.joda.time.Instant instant45 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone46 = null;
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.forTimeZone(timeZone46);
        org.joda.time.chrono.GJChronology gJChronology48 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone47);
        org.joda.time.DateTimeField dateTimeField49 = gJChronology48.millisOfSecond();
        int int50 = instant45.get(dateTimeField49);
        org.joda.time.Instant instant52 = instant45.plus(0L);
        int int53 = instant43.compareTo((org.joda.time.ReadableInstant) instant52);
        org.joda.time.DateTimeFieldType dateTimeFieldType54 = null;
        boolean boolean55 = instant52.isSupported(dateTimeFieldType54);
        int int56 = dateTimeZone25.getOffset((org.joda.time.ReadableInstant) instant52);
        boolean boolean57 = instant21.isAfter((org.joda.time.ReadableInstant) instant52);
        org.joda.time.ReadableDuration readableDuration58 = null;
        org.joda.time.Instant instant60 = instant21.withDurationAdded(readableDuration58, 1);
        boolean boolean61 = instant60.isEqualNow();
        org.joda.time.Instant instant62 = instant60.toInstant();
        org.joda.time.Instant instant64 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone65 = null;
        org.joda.time.DateTimeZone dateTimeZone66 = org.joda.time.DateTimeZone.forTimeZone(timeZone65);
        org.joda.time.chrono.GJChronology gJChronology67 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone66);
        org.joda.time.DateTimeField dateTimeField68 = gJChronology67.millisOfSecond();
        int int69 = instant64.get(dateTimeField68);
        org.joda.time.Instant instant71 = instant64.plus(0L);
        java.util.TimeZone timeZone72 = null;
        org.joda.time.DateTimeZone dateTimeZone73 = org.joda.time.DateTimeZone.forTimeZone(timeZone72);
        org.joda.time.chrono.GJChronology gJChronology74 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone73);
        org.joda.time.DurationField durationField75 = gJChronology74.halfdays();
        org.joda.time.Chronology chronology76 = gJChronology74.withUTC();
        java.lang.String str77 = gJChronology74.toString();
        org.joda.time.DateTimeField dateTimeField78 = gJChronology74.hourOfHalfday();
        int int79 = instant64.get(dateTimeField78);
        org.joda.time.Instant instant81 = new org.joda.time.Instant(52L);
        boolean boolean82 = instant81.isEqualNow();
        org.joda.time.ReadableDuration readableDuration83 = null;
        org.joda.time.Instant instant84 = instant81.plus(readableDuration83);
        org.joda.time.Instant instant86 = new org.joda.time.Instant(52L);
        org.joda.time.Instant instant88 = instant86.withMillis((long) 'u');
        boolean boolean89 = instant81.isBefore((org.joda.time.ReadableInstant) instant86);
        boolean boolean90 = instant64.isEqual((org.joda.time.ReadableInstant) instant86);
        boolean boolean91 = instant62.equals((java.lang.Object) instant86);
        java.lang.String str92 = instant86.toString();
        org.joda.time.DateTimeZone dateTimeZone93 = instant86.getZone();
        org.joda.time.Instant instant94 = instant86.toInstant();
        boolean boolean95 = instant1.isEqual((org.joda.time.ReadableInstant) instant94);
        org.joda.time.Instant instant96 = instant94.toInstant();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(instant4);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 52L + "'", long5 == 52L);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(instant10);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(gJChronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "1970-01-01T00:00:00.052Z" + "'", str23, "1970-01-01T00:00:00.052Z");
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(gJChronology26);
        org.junit.Assert.assertEquals(locale28.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "hi!" + "'", str31, "hi!");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int35 + "' != '" + 52 + "'", int35 == 52);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertNotNull(gJChronology38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(instant41);
        org.junit.Assert.assertNotNull(instant43);
        org.junit.Assert.assertNotNull(dateTimeZone47);
        org.junit.Assert.assertNotNull(gJChronology48);
        org.junit.Assert.assertNotNull(dateTimeField49);
// flaky:         org.junit.Assert.assertTrue("'" + int50 + "' != '" + 104 + "'", int50 == 104);
        org.junit.Assert.assertNotNull(instant52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-1) + "'", int53 == (-1));
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int56 + "' != '" + 52 + "'", int56 == 52);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(instant60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(instant62);
        org.junit.Assert.assertNotNull(dateTimeZone66);
        org.junit.Assert.assertNotNull(gJChronology67);
        org.junit.Assert.assertNotNull(dateTimeField68);
// flaky:         org.junit.Assert.assertTrue("'" + int69 + "' != '" + 104 + "'", int69 == 104);
        org.junit.Assert.assertNotNull(instant71);
        org.junit.Assert.assertNotNull(dateTimeZone73);
        org.junit.Assert.assertNotNull(gJChronology74);
        org.junit.Assert.assertNotNull(durationField75);
        org.junit.Assert.assertNotNull(chronology76);
// flaky:         org.junit.Assert.assertEquals("'" + str77 + "' != '" + "GJChronology[+00:00:00.052]" + "'", str77, "GJChronology[+00:00:00.052]");
        org.junit.Assert.assertNotNull(dateTimeField78);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(instant84);
        org.junit.Assert.assertNotNull(instant88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "1970-01-01T00:00:00.052Z" + "'", str92, "1970-01-01T00:00:00.052Z");
        org.junit.Assert.assertNotNull(dateTimeZone93);
        org.junit.Assert.assertNotNull(instant94);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + true + "'", boolean95 == true);
        org.junit.Assert.assertNotNull(instant96);
    }

    @Test
    public void test19340() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19340");
        java.util.Locale locale1 = new java.util.Locale("kanada (ITALIANO)");
        org.junit.Assert.assertEquals(locale1.toString(), "kanada (italiano)");
    }

    @Test
    public void test19341() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19341");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = gJChronology2.halfdays();
        long long7 = gJChronology2.add((long) 'a', (-1L), (int) (short) 0);
        boolean boolean9 = gJChronology2.equals((java.lang.Object) 0);
        org.joda.time.DateTimeField dateTimeField10 = gJChronology2.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField11 = gJChronology2.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField12 = gJChronology2.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField13 = gJChronology2.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField14 = gJChronology2.weekyear();
        java.util.TimeZone timeZone15 = null;
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forTimeZone(timeZone15);
        org.joda.time.chrono.GJChronology gJChronology17 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone16);
        org.joda.time.DateTimeField dateTimeField18 = gJChronology17.millisOfSecond();
        org.joda.time.DurationField durationField19 = gJChronology17.millis();
        org.joda.time.DateTimeZone dateTimeZone20 = gJChronology17.getZone();
        org.joda.time.Chronology chronology21 = gJChronology2.withZone(dateTimeZone20);
        boolean boolean22 = dateTimeZone20.isFixed();
        boolean boolean24 = dateTimeZone20.isStandardOffset((long) 432086114);
        long long26 = dateTimeZone20.previousTransition((-132541887340800000L));
        java.util.TimeZone timeZone27 = dateTimeZone20.toTimeZone();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 97L + "'", long7 == 97L);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(gJChronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + (-132541887340800000L) + "'", long26 == (-132541887340800000L));
        org.junit.Assert.assertNotNull(timeZone27);
// flaky:         org.junit.Assert.assertEquals(timeZone27.getDisplayName(), "GMT+00:00");
    }

    @Test
    public void test19342() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19342");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField3 = gJChronology2.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.weekyear();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.halfdayOfDay();
        org.joda.time.DurationField durationField6 = gJChronology2.years();
        org.joda.time.DurationField durationField7 = gJChronology2.minutes();
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        long long11 = gJChronology2.add(readablePeriod8, (-42L), (int) '4');
        org.joda.time.Chronology chronology12 = gJChronology2.withUTC();
        org.joda.time.DateTimeField dateTimeField13 = gJChronology2.minuteOfHour();
        org.joda.time.DurationField durationField14 = gJChronology2.minutes();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology2.era();
        org.joda.time.DateTimeField dateTimeField16 = gJChronology2.hourOfHalfday();
        org.joda.time.DurationField durationField17 = gJChronology2.millis();
        org.joda.time.ReadablePeriod readablePeriod18 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray21 = gJChronology2.get(readablePeriod18, (-25916976000000L), (-3755713788000L));
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-42L) + "'", long11 == (-42L));
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(durationField17);
    }

    @Test
    public void test19343() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19343");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = gJChronology2.halfdays();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.millisOfDay();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.minuteOfDay();
        org.joda.time.DurationField durationField6 = gJChronology2.centuries();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology2.yearOfCentury();
        org.joda.time.Chronology chronology8 = gJChronology2.withUTC();
        org.joda.time.DateTimeZone dateTimeZone9 = gJChronology2.getZone();
        int int11 = dateTimeZone9.getOffset((long) 73050);
        long long13 = dateTimeZone9.previousTransition(747217518019309440L);
        java.util.TimeZone timeZone14 = dateTimeZone9.toTimeZone();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forTimeZone(timeZone14);
// flaky:             org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The datetime zone id '+00:00:00.052' is not recognised");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
// flaky:         org.junit.Assert.assertTrue("'" + int11 + "' != '" + 52 + "'", int11 == 52);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 747217518019309440L + "'", long13 == 747217518019309440L);
        org.junit.Assert.assertNotNull(timeZone14);
// flaky:         org.junit.Assert.assertEquals(timeZone14.getDisplayName(), "GMT+00:00");
    }

    @Test
    public void test19344() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19344");
        org.joda.time.Instant instant0 = org.joda.time.Instant.now();
        org.joda.time.Instant instant3 = instant0.withDurationAdded(306102434400000L, (int) (short) 100);
        org.joda.time.Instant instant5 = new org.joda.time.Instant(164096150400000L);
        boolean boolean6 = instant0.isEqual((org.joda.time.ReadableInstant) instant5);
        org.junit.Assert.assertNotNull(instant0);
        org.junit.Assert.assertNotNull(instant3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test19345() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19345");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        boolean boolean2 = instant1.isEqualNow();
        java.lang.String str3 = instant1.toString();
        java.lang.String str4 = instant1.toString();
        org.joda.time.Instant instant6 = new org.joda.time.Instant(52L);
        boolean boolean7 = instant6.isEqualNow();
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.Instant instant9 = instant6.plus(readableDuration8);
        boolean boolean10 = instant1.isBefore((org.joda.time.ReadableInstant) instant9);
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.Instant instant12 = instant9.minus(readableDuration11);
        boolean boolean13 = instant12.isBeforeNow();
        org.joda.time.Chronology chronology14 = instant12.getChronology();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "1970-01-01T00:00:00.052Z" + "'", str3, "1970-01-01T00:00:00.052Z");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "1970-01-01T00:00:00.052Z" + "'", str4, "1970-01-01T00:00:00.052Z");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(instant9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(instant12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(chronology14);
    }

    @Test
    public void test19346() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19346");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clear();
        java.util.Locale.Builder builder3 = builder1.removeUnicodeLocaleAttribute("und");
        java.util.Locale.Builder builder4 = builder3.clearExtensions();
        java.util.Locale.Builder builder5 = builder4.clearExtensions();
        java.util.Locale locale6 = builder4.build();
        java.util.Locale.Builder builder8 = builder4.setLanguageTag("en-US");
        java.util.Locale.Builder builder10 = builder4.addUnicodeLocaleAttribute("deu");
        java.util.Locale.Builder builder11 = builder10.clearExtensions();
        java.util.Locale.Builder builder12 = builder10.clear();
        java.util.Locale locale16 = new java.util.Locale("zh", "en", "");
        java.util.Locale.Builder builder17 = builder12.setLocale(locale16);
        java.util.Locale.Builder builder18 = builder17.clearExtensions();
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "");
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertEquals(locale16.toString(), "zh_EN");
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder18);
    }

    @Test
    public void test19347() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19347");
        java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("seconds");
        double double2 = languageRange1.getWeight();
        java.lang.String str3 = languageRange1.getRange();
        java.lang.String str4 = languageRange1.getRange();
        java.lang.String str5 = languageRange1.getRange();
        double double6 = languageRange1.getWeight();
        double double7 = languageRange1.getWeight();
        java.lang.String str8 = languageRange1.getRange();
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1.0d + "'", double2 == 1.0d);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "seconds" + "'", str3, "seconds");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "seconds" + "'", str4, "seconds");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "seconds" + "'", str5, "seconds");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1.0d + "'", double6 == 1.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 1.0d + "'", double7 == 1.0d);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "seconds" + "'", str8, "seconds");
    }

    @Test
    public void test19348() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19348");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clear();
        java.util.Locale.Builder builder3 = builder1.removeUnicodeLocaleAttribute("und");
        java.util.Locale.Builder builder4 = builder3.clearExtensions();
        java.util.Locale.Builder builder5 = builder4.clearExtensions();
        java.util.Locale locale6 = builder4.build();
        java.util.Locale.Builder builder8 = builder4.setLanguageTag("en-US");
        java.util.Locale.Builder builder10 = builder4.addUnicodeLocaleAttribute("deu");
        java.util.Locale.Builder builder11 = builder10.clearExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder14 = builder11.setUnicodeLocaleKeyword("2022-02-11T10:58:32.257+01:10", "DurationField[hours]");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale keyword key: 2022-02-11T10:58:32.257+01:10 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "");
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder11);
    }

    @Test
    public void test19349() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19349");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        boolean boolean2 = instant1.isEqualNow();
        java.lang.String str3 = instant1.toString();
        java.lang.String str4 = instant1.toString();
        org.joda.time.Instant instant6 = new org.joda.time.Instant(52L);
        boolean boolean7 = instant6.isEqualNow();
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.Instant instant9 = instant6.plus(readableDuration8);
        boolean boolean10 = instant1.isBefore((org.joda.time.ReadableInstant) instant9);
        org.joda.time.Instant instant12 = new org.joda.time.Instant(52L);
        boolean boolean13 = instant12.isEqualNow();
        org.joda.time.ReadableDuration readableDuration14 = null;
        org.joda.time.Instant instant15 = instant12.plus(readableDuration14);
        long long16 = instant12.getMillis();
        java.lang.String str17 = instant12.toString();
        org.joda.time.Instant instant18 = instant12.toInstant();
        boolean boolean19 = instant9.isAfter((org.joda.time.ReadableInstant) instant12);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int21 = instant12.get(dateTimeFieldType20);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The DateTimeFieldType must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "1970-01-01T00:00:00.052Z" + "'", str3, "1970-01-01T00:00:00.052Z");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "1970-01-01T00:00:00.052Z" + "'", str4, "1970-01-01T00:00:00.052Z");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(instant9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(instant15);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 52L + "'", long16 == 52L);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "1970-01-01T00:00:00.052Z" + "'", str17, "1970-01-01T00:00:00.052Z");
        org.junit.Assert.assertNotNull(instant18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test19350() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19350");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, 4315200000L, (-608750));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid min days in first week: -608750");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test19351() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19351");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = gJChronology2.halfdays();
        long long7 = gJChronology2.add((long) 'a', (-1L), (int) (short) 0);
        org.joda.time.DateTimeField dateTimeField8 = gJChronology2.halfdayOfDay();
        org.joda.time.Chronology chronology9 = gJChronology2.withUTC();
        java.lang.String str10 = gJChronology2.toString();
        int int11 = gJChronology2.getMinimumDaysInFirstWeek();
        org.joda.time.Chronology chronology12 = gJChronology2.withUTC();
        org.joda.time.DurationField durationField13 = gJChronology2.minutes();
        org.joda.time.DurationField durationField14 = gJChronology2.weeks();
        org.joda.time.DurationField durationField15 = gJChronology2.minutes();
        long long18 = durationField15.getMillis(48L, (-68L));
        long long20 = durationField15.getValueAsLong((-26055914976000000L));
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 97L + "'", long7 == 97L);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(chronology9);
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "GJChronology[+00:00:00.052]" + "'", str10, "GJChronology[+00:00:00.052]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 4 + "'", int11 == 4);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 2880000L + "'", long18 == 2880000L);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + (-434265249600L) + "'", long20 == (-434265249600L));
    }

    @Test
    public void test19352() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19352");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField3 = gJChronology2.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology2.hourOfHalfday();
        org.joda.time.DurationField durationField7 = gJChronology2.halfdays();
        org.joda.time.DateTimeField dateTimeField8 = gJChronology2.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField9 = gJChronology2.millisOfDay();
        org.joda.time.DateTimeField dateTimeField10 = gJChronology2.era();
        org.joda.time.DurationField durationField11 = gJChronology2.millis();
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        long long15 = gJChronology2.add(readablePeriod12, (-2723694538406688000L), (-400));
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-2723694538406688000L) + "'", long15 == (-2723694538406688000L));
    }

    @Test
    public void test19353() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19353");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = gJChronology2.halfdays();
        long long7 = gJChronology2.add(0L, (long) (short) -1, (int) '4');
        java.util.TimeZone timeZone8 = null;
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forTimeZone(timeZone8);
        org.joda.time.chrono.GJChronology gJChronology10 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone9);
        org.joda.time.DurationField durationField11 = gJChronology10.halfdays();
        org.joda.time.DateTimeField dateTimeField12 = gJChronology10.millisOfDay();
        org.joda.time.DateTimeField dateTimeField13 = gJChronology10.minuteOfDay();
        org.joda.time.DurationField durationField14 = gJChronology10.centuries();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology10.dayOfYear();
        java.lang.String str16 = gJChronology10.toString();
        org.joda.time.DurationField durationField17 = gJChronology10.years();
        org.joda.time.DateTimeField dateTimeField18 = gJChronology10.yearOfEra();
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(0, (int) (short) 10);
        org.joda.time.Chronology chronology22 = gJChronology10.withZone(dateTimeZone21);
        org.joda.time.Chronology chronology23 = gJChronology2.withZone(dateTimeZone21);
        org.joda.time.DurationField durationField24 = gJChronology2.halfdays();
        org.joda.time.Instant instant25 = gJChronology2.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration26 = null;
        org.joda.time.Instant instant27 = instant25.plus(readableDuration26);
        org.joda.time.ReadableDuration readableDuration28 = null;
        org.joda.time.Instant instant30 = instant27.withDurationAdded(readableDuration28, 46);
        org.joda.time.Instant instant32 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone33 = null;
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.forTimeZone(timeZone33);
        org.joda.time.chrono.GJChronology gJChronology35 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone34);
        org.joda.time.DateTimeField dateTimeField36 = gJChronology35.millisOfSecond();
        int int37 = instant32.get(dateTimeField36);
        org.joda.time.Instant instant39 = instant32.plus(0L);
        java.util.TimeZone timeZone40 = null;
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.forTimeZone(timeZone40);
        org.joda.time.chrono.GJChronology gJChronology42 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone41);
        org.joda.time.DurationField durationField43 = gJChronology42.halfdays();
        org.joda.time.Chronology chronology44 = gJChronology42.withUTC();
        java.lang.String str45 = gJChronology42.toString();
        org.joda.time.DateTimeField dateTimeField46 = gJChronology42.hourOfHalfday();
        int int47 = instant32.get(dateTimeField46);
        java.util.TimeZone timeZone48 = null;
        org.joda.time.DateTimeZone dateTimeZone49 = org.joda.time.DateTimeZone.forTimeZone(timeZone48);
        org.joda.time.chrono.GJChronology gJChronology50 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone49);
        org.joda.time.DurationField durationField51 = gJChronology50.halfdays();
        long long55 = gJChronology50.add((long) 'a', (-1L), (int) (short) 0);
        org.joda.time.DateTimeField dateTimeField56 = gJChronology50.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField57 = gJChronology50.secondOfMinute();
        org.joda.time.Instant instant59 = new org.joda.time.Instant(52L);
        boolean boolean60 = instant59.isEqualNow();
        org.joda.time.ReadableDuration readableDuration61 = null;
        org.joda.time.Instant instant62 = instant59.plus(readableDuration61);
        boolean boolean63 = gJChronology50.equals((java.lang.Object) instant59);
        org.joda.time.DateTimeFieldType dateTimeFieldType64 = null;
        boolean boolean65 = instant59.isSupported(dateTimeFieldType64);
        org.joda.time.DateTimeFieldType dateTimeFieldType66 = null;
        boolean boolean67 = instant59.isSupported(dateTimeFieldType66);
        org.joda.time.DateTimeZone dateTimeZone68 = instant59.getZone();
        boolean boolean69 = instant32.isAfter((org.joda.time.ReadableInstant) instant59);
        org.joda.time.Instant instant71 = instant32.minus((long) 70);
        boolean boolean72 = instant30.isAfter((org.joda.time.ReadableInstant) instant71);
        org.joda.time.MutableDateTime mutableDateTime73 = instant71.toMutableDateTime();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-52L) + "'", long7 == (-52L));
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(gJChronology10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "GJChronology[+00:00:00.052]" + "'", str16, "GJChronology[+00:00:00.052]");
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertNotNull(instant25);
        org.junit.Assert.assertNotNull(instant27);
        org.junit.Assert.assertNotNull(instant30);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertNotNull(gJChronology35);
        org.junit.Assert.assertNotNull(dateTimeField36);
// flaky:         org.junit.Assert.assertTrue("'" + int37 + "' != '" + 104 + "'", int37 == 104);
        org.junit.Assert.assertNotNull(instant39);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertNotNull(gJChronology42);
        org.junit.Assert.assertNotNull(durationField43);
        org.junit.Assert.assertNotNull(chronology44);
// flaky:         org.junit.Assert.assertEquals("'" + str45 + "' != '" + "GJChronology[+00:00:00.052]" + "'", str45, "GJChronology[+00:00:00.052]");
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone49);
        org.junit.Assert.assertNotNull(gJChronology50);
        org.junit.Assert.assertNotNull(durationField51);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 97L + "'", long55 == 97L);
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(instant62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(dateTimeZone68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(instant71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(mutableDateTime73);
    }

    @Test
    public void test19354() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19354");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = gJChronology2.halfdays();
        java.util.TimeZone timeZone4 = null;
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forTimeZone(timeZone4);
        org.joda.time.chrono.GJChronology gJChronology6 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone5);
        long long10 = dateTimeZone5.convertLocalToUTC((long) (byte) -1, true, 0L);
        boolean boolean12 = dateTimeZone5.equals((java.lang.Object) true);
        org.joda.time.Chronology chronology13 = gJChronology2.withZone(dateTimeZone5);
        org.joda.time.LocalDateTime localDateTime14 = null;
        boolean boolean15 = dateTimeZone5.isLocalDateTimeGap(localDateTime14);
        org.joda.time.chrono.GJChronology gJChronology16 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone5);
        java.util.Locale locale18 = java.util.Locale.KOREA;
        java.lang.String str19 = dateTimeZone5.getName(4492800100L, locale18);
        java.util.Locale locale20 = locale18.stripExtensions();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(gJChronology6);
// flaky:         org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-53L) + "'", long10 == (-53L));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(gJChronology16);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "ko_KR");
// flaky:         org.junit.Assert.assertEquals("'" + str19 + "' != '" + "+00:00:00.052" + "'", str19, "+00:00:00.052");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "ko_KR");
    }

    @Test
    public void test19355() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19355");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField3 = gJChronology2.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.weekyear();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology2.weekyearOfCentury();
        int int7 = gJChronology2.getMinimumDaysInFirstWeek();
        org.joda.time.DateTimeField dateTimeField8 = gJChronology2.yearOfCentury();
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray11 = gJChronology2.get(readablePeriod9, (-4200001L));
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 4 + "'", int7 == 4);
        org.junit.Assert.assertNotNull(dateTimeField8);
    }

    @Test
    public void test19356() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19356");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str3 = dateTimeZone1.getNameKey((long) 100);
        boolean boolean4 = dateTimeZone1.isFixed();
        org.joda.time.chrono.GJChronology gJChronology5 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        int int6 = gJChronology5.getMinimumDaysInFirstWeek();
        java.lang.String str7 = gJChronology5.toString();
        org.joda.time.DateTimeField dateTimeField8 = gJChronology5.yearOfEra();
        org.joda.time.DateTimeField dateTimeField9 = gJChronology5.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField10 = gJChronology5.dayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology12 = gJChronology5.withZone(dateTimeZone11);
        org.joda.time.DurationField durationField13 = gJChronology5.weekyears();
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.Chronology chronology15 = gJChronology5.withZone(dateTimeZone14);
        org.joda.time.DateTimeField dateTimeField16 = gJChronology5.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField17 = gJChronology5.millisOfSecond();
        org.joda.time.Instant instant19 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone20 = null;
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forTimeZone(timeZone20);
        org.joda.time.chrono.GJChronology gJChronology22 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone21);
        org.joda.time.DateTimeField dateTimeField23 = gJChronology22.millisOfSecond();
        int int24 = instant19.get(dateTimeField23);
        org.joda.time.Instant instant26 = instant19.plus(0L);
        org.joda.time.Instant instant27 = instant26.toInstant();
        org.joda.time.Instant instant29 = new org.joda.time.Instant(52L);
        boolean boolean30 = instant29.isEqualNow();
        java.lang.String str31 = instant29.toString();
        java.lang.String str32 = instant29.toString();
        org.joda.time.Instant instant34 = new org.joda.time.Instant(52L);
        boolean boolean35 = instant34.isEqualNow();
        org.joda.time.ReadableDuration readableDuration36 = null;
        org.joda.time.Instant instant37 = instant34.plus(readableDuration36);
        boolean boolean38 = instant29.isBefore((org.joda.time.ReadableInstant) instant37);
        org.joda.time.Instant instant40 = instant29.minus((long) 0);
        int int41 = instant26.compareTo((org.joda.time.ReadableInstant) instant29);
        org.joda.time.Instant instant44 = instant29.withDurationAdded((long) (short) 100, 70);
        org.joda.time.ReadableDuration readableDuration45 = null;
        org.joda.time.Instant instant46 = instant29.minus(readableDuration45);
        java.util.TimeZone timeZone47 = null;
        org.joda.time.DateTimeZone dateTimeZone48 = org.joda.time.DateTimeZone.forTimeZone(timeZone47);
        java.lang.String str50 = dateTimeZone48.getNameKey((long) 100);
        boolean boolean51 = dateTimeZone48.isFixed();
        java.util.Locale locale55 = new java.util.Locale("DurationField[halfdays]", "\u82f1\u6587");
        java.lang.String str56 = dateTimeZone48.getName((long) (short) 10, locale55);
        org.joda.time.Instant instant58 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone59 = null;
        org.joda.time.DateTimeZone dateTimeZone60 = org.joda.time.DateTimeZone.forTimeZone(timeZone59);
        org.joda.time.chrono.GJChronology gJChronology61 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone60);
        org.joda.time.DateTimeField dateTimeField62 = gJChronology61.millisOfSecond();
        int int63 = instant58.get(dateTimeField62);
        org.joda.time.Chronology chronology64 = instant58.getChronology();
        org.joda.time.chrono.GJChronology gJChronology65 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone48, (org.joda.time.ReadableInstant) instant58);
        long long66 = instant58.getMillis();
        org.joda.time.ReadableDuration readableDuration67 = null;
        org.joda.time.Instant instant68 = instant58.minus(readableDuration67);
        java.lang.String str69 = instant58.toString();
        org.joda.time.Instant instant71 = instant58.withMillis(3155760000000L);
        boolean boolean72 = instant46.isAfter((org.joda.time.ReadableInstant) instant71);
        boolean boolean73 = instant46.isEqualNow();
        org.joda.time.DateTimeZone dateTimeZone74 = instant46.getZone();
        org.joda.time.LocalDateTime localDateTime75 = null;
        boolean boolean76 = dateTimeZone74.isLocalDateTimeGap(localDateTime75);
        org.joda.time.Chronology chronology77 = gJChronology5.withZone(dateTimeZone74);
        org.joda.time.Instant instant78 = gJChronology5.getGregorianCutover();
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(gJChronology5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 4 + "'", int6 == 4);
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "GJChronology[+00:00:00.052]" + "'", str7, "GJChronology[+00:00:00.052]");
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(gJChronology22);
        org.junit.Assert.assertNotNull(dateTimeField23);
// flaky:         org.junit.Assert.assertTrue("'" + int24 + "' != '" + 104 + "'", int24 == 104);
        org.junit.Assert.assertNotNull(instant26);
        org.junit.Assert.assertNotNull(instant27);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "1970-01-01T00:00:00.052Z" + "'", str31, "1970-01-01T00:00:00.052Z");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "1970-01-01T00:00:00.052Z" + "'", str32, "1970-01-01T00:00:00.052Z");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(instant37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(instant40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(instant44);
        org.junit.Assert.assertNotNull(instant46);
        org.junit.Assert.assertNotNull(dateTimeZone48);
// flaky:         org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
// flaky:         org.junit.Assert.assertEquals(locale55.toString(), "\u82f1\u6587");
// flaky:         org.junit.Assert.assertEquals("'" + str56 + "' != '" + "+00:00:00.052" + "'", str56, "+00:00:00.052");
        org.junit.Assert.assertNotNull(dateTimeZone60);
        org.junit.Assert.assertNotNull(gJChronology61);
        org.junit.Assert.assertNotNull(dateTimeField62);
// flaky:         org.junit.Assert.assertTrue("'" + int63 + "' != '" + 104 + "'", int63 == 104);
        org.junit.Assert.assertNotNull(chronology64);
        org.junit.Assert.assertNotNull(gJChronology65);
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 52L + "'", long66 == 52L);
        org.junit.Assert.assertNotNull(instant68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "1970-01-01T00:00:00.052Z" + "'", str69, "1970-01-01T00:00:00.052Z");
        org.junit.Assert.assertNotNull(instant71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(dateTimeZone74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(chronology77);
        org.junit.Assert.assertNotNull(instant78);
    }

    @Test
    public void test19357() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19357");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = gJChronology2.halfdays();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.millisOfDay();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.minuteOfDay();
        org.joda.time.DurationField durationField6 = gJChronology2.centuries();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology2.dayOfYear();
        java.lang.String str8 = gJChronology2.toString();
        org.joda.time.DateTimeField dateTimeField9 = gJChronology2.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone10 = gJChronology2.getZone();
        org.joda.time.chrono.GJChronology gJChronology11 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone10);
        org.joda.time.DateTimeField dateTimeField12 = gJChronology11.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField13 = gJChronology11.weekOfWeekyear();
        java.util.TimeZone timeZone14 = null;
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forTimeZone(timeZone14);
        org.joda.time.chrono.GJChronology gJChronology16 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone15);
        int int18 = dateTimeZone15.getOffsetFromLocal(1000L);
        org.joda.time.Chronology chronology19 = gJChronology11.withZone(dateTimeZone15);
        org.joda.time.DateTimeField dateTimeField20 = gJChronology11.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField21 = gJChronology11.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField22 = gJChronology11.monthOfYear();
        org.joda.time.DateTimeField dateTimeField23 = gJChronology11.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField24 = gJChronology11.year();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "GJChronology[+00:00:00.052]" + "'", str8, "GJChronology[+00:00:00.052]");
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(gJChronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(gJChronology16);
// flaky:         org.junit.Assert.assertTrue("'" + int18 + "' != '" + 52 + "'", int18 == 52);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
    }

    @Test
    public void test19358() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19358");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = gJChronology2.halfdays();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.millisOfDay();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.minuteOfDay();
        org.joda.time.DurationField durationField6 = gJChronology2.centuries();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology2.dayOfYear();
        java.lang.String str8 = gJChronology2.toString();
        org.joda.time.DateTimeField dateTimeField9 = gJChronology2.minuteOfDay();
        org.joda.time.DurationField durationField10 = gJChronology2.seconds();
        org.joda.time.DateTimeField dateTimeField11 = gJChronology2.year();
        java.util.TimeZone timeZone12 = null;
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forTimeZone(timeZone12);
        org.joda.time.chrono.GJChronology gJChronology14 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone13);
        org.joda.time.DateTimeField dateTimeField15 = gJChronology14.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField16 = gJChronology14.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField17 = gJChronology14.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField18 = gJChronology14.hourOfHalfday();
        org.joda.time.DurationField durationField19 = gJChronology14.halfdays();
        org.joda.time.DateTimeField dateTimeField20 = gJChronology14.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField21 = gJChronology14.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField22 = gJChronology14.weekyear();
        boolean boolean23 = gJChronology2.equals((java.lang.Object) gJChronology14);
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        long long27 = gJChronology14.add(readablePeriod24, 1590470380800000L, 35);
        org.joda.time.DateTimeField dateTimeField28 = gJChronology14.dayOfWeek();
        org.joda.time.DurationField durationField29 = gJChronology14.seconds();
        long long32 = durationField29.getMillis(600, (-60479999705624L));
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "GJChronology[+00:00:00.052]" + "'", str8, "GJChronology[+00:00:00.052]");
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(gJChronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 1590470380800000L + "'", long27 == 1590470380800000L);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 600000L + "'", long32 == 600000L);
    }

    @Test
    public void test19359() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19359");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forTimeZone(timeZone2);
        org.joda.time.chrono.GJChronology gJChronology4 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone3);
        org.joda.time.DateTimeField dateTimeField5 = gJChronology4.millisOfSecond();
        int int6 = instant1.get(dateTimeField5);
        org.joda.time.Instant instant8 = instant1.plus(0L);
        org.joda.time.Instant instant9 = instant8.toInstant();
        org.joda.time.Instant instant11 = new org.joda.time.Instant(52L);
        boolean boolean12 = instant11.isEqualNow();
        java.lang.String str13 = instant11.toString();
        java.lang.String str14 = instant11.toString();
        org.joda.time.Instant instant16 = new org.joda.time.Instant(52L);
        boolean boolean17 = instant16.isEqualNow();
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.Instant instant19 = instant16.plus(readableDuration18);
        boolean boolean20 = instant11.isBefore((org.joda.time.ReadableInstant) instant19);
        org.joda.time.Instant instant22 = instant11.minus((long) 0);
        int int23 = instant8.compareTo((org.joda.time.ReadableInstant) instant11);
        org.joda.time.Instant instant26 = instant11.withDurationAdded((long) (short) 100, 70);
        org.joda.time.ReadableDuration readableDuration27 = null;
        org.joda.time.Instant instant28 = instant11.minus(readableDuration27);
        org.joda.time.Instant instant30 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone31 = null;
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.forTimeZone(timeZone31);
        org.joda.time.chrono.GJChronology gJChronology33 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone32);
        org.joda.time.DateTimeField dateTimeField34 = gJChronology33.millisOfSecond();
        int int35 = instant30.get(dateTimeField34);
        boolean boolean36 = instant30.isEqualNow();
        org.joda.time.tz.NameProvider nameProvider37 = org.joda.time.DateTimeZone.getNameProvider();
        org.joda.time.DateTimeZone.setNameProvider(nameProvider37);
        org.joda.time.DateTimeZone.setNameProvider(nameProvider37);
        boolean boolean40 = instant30.equals((java.lang.Object) nameProvider37);
        org.joda.time.Instant instant42 = instant30.minus(0L);
        int int43 = instant28.compareTo((org.joda.time.ReadableInstant) instant30);
        org.joda.time.ReadableDuration readableDuration44 = null;
        org.joda.time.Instant instant45 = instant30.minus(readableDuration44);
        java.util.Date date46 = instant45.toDate();
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(gJChronology4);
        org.junit.Assert.assertNotNull(dateTimeField5);
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 104 + "'", int6 == 104);
        org.junit.Assert.assertNotNull(instant8);
        org.junit.Assert.assertNotNull(instant9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "1970-01-01T00:00:00.052Z" + "'", str13, "1970-01-01T00:00:00.052Z");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "1970-01-01T00:00:00.052Z" + "'", str14, "1970-01-01T00:00:00.052Z");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(instant19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(instant22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(instant26);
        org.junit.Assert.assertNotNull(instant28);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertNotNull(gJChronology33);
        org.junit.Assert.assertNotNull(dateTimeField34);
// flaky:         org.junit.Assert.assertTrue("'" + int35 + "' != '" + 104 + "'", int35 == 104);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(nameProvider37);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(instant42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(instant45);
        org.junit.Assert.assertNotNull(date46);
        org.junit.Assert.assertEquals(date46.toString(), "Thu Jan 01 00:00:00 UTC 1970");
    }

    @Test
    public void test19360() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19360");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forTimeZone(timeZone2);
        org.joda.time.chrono.GJChronology gJChronology4 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone3);
        org.joda.time.DateTimeField dateTimeField5 = gJChronology4.millisOfSecond();
        int int6 = instant1.get(dateTimeField5);
        org.joda.time.Instant instant8 = instant1.plus(0L);
        org.joda.time.Instant instant9 = instant8.toInstant();
        org.joda.time.Instant instant11 = new org.joda.time.Instant(52L);
        boolean boolean12 = instant11.isEqualNow();
        java.lang.String str13 = instant11.toString();
        java.lang.String str14 = instant11.toString();
        org.joda.time.Instant instant16 = new org.joda.time.Instant(52L);
        boolean boolean17 = instant16.isEqualNow();
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.Instant instant19 = instant16.plus(readableDuration18);
        boolean boolean20 = instant11.isBefore((org.joda.time.ReadableInstant) instant19);
        org.joda.time.Instant instant22 = instant11.minus((long) 0);
        int int23 = instant8.compareTo((org.joda.time.ReadableInstant) instant11);
        org.joda.time.Instant instant26 = instant11.withDurationAdded((long) (short) 100, 70);
        org.joda.time.MutableDateTime mutableDateTime27 = instant26.toMutableDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone28 = instant26.getZone();
        org.joda.time.MutableDateTime mutableDateTime29 = instant26.toMutableDateTime();
        org.joda.time.Instant instant31 = instant26.withMillis((-3155673600000L));
        org.joda.time.DateTimeZone dateTimeZone32 = instant26.getZone();
        java.util.TimeZone timeZone33 = null;
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.forTimeZone(timeZone33);
        org.joda.time.chrono.GJChronology gJChronology35 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone34);
        org.joda.time.DurationField durationField36 = gJChronology35.halfdays();
        long long40 = gJChronology35.add((long) 'a', (-1L), (int) (short) 0);
        long long44 = gJChronology35.add((long) (byte) 0, (long) '4', 100);
        org.joda.time.DateTimeField dateTimeField45 = gJChronology35.minuteOfHour();
        org.joda.time.DurationField durationField46 = gJChronology35.hours();
        org.joda.time.DateTimeField dateTimeField47 = gJChronology35.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField48 = gJChronology35.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField49 = gJChronology35.centuryOfEra();
        java.util.TimeZone timeZone50 = null;
        org.joda.time.DateTimeZone dateTimeZone51 = org.joda.time.DateTimeZone.forTimeZone(timeZone50);
        org.joda.time.chrono.GJChronology gJChronology52 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone51);
        org.joda.time.DurationField durationField53 = gJChronology52.halfdays();
        long long57 = gJChronology52.add((long) 'a', (-1L), (int) (short) 0);
        long long61 = gJChronology52.add((long) (byte) 0, (long) '4', 100);
        org.joda.time.DateTimeField dateTimeField62 = gJChronology52.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField63 = gJChronology52.year();
        org.joda.time.DurationField durationField64 = gJChronology52.centuries();
        org.joda.time.DateTimeField dateTimeField65 = gJChronology52.dayOfMonth();
        boolean boolean66 = gJChronology35.equals((java.lang.Object) dateTimeField65);
        org.joda.time.Instant instant67 = gJChronology35.getGregorianCutover();
        org.joda.time.DateTimeField dateTimeField68 = gJChronology35.era();
        org.joda.time.DateTimeZone dateTimeZone69 = gJChronology35.getZone();
        long long71 = dateTimeZone69.previousTransition(315569563408156L);
        org.joda.time.DateTime dateTime72 = instant26.toDateTime(dateTimeZone69);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(gJChronology4);
        org.junit.Assert.assertNotNull(dateTimeField5);
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 104 + "'", int6 == 104);
        org.junit.Assert.assertNotNull(instant8);
        org.junit.Assert.assertNotNull(instant9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "1970-01-01T00:00:00.052Z" + "'", str13, "1970-01-01T00:00:00.052Z");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "1970-01-01T00:00:00.052Z" + "'", str14, "1970-01-01T00:00:00.052Z");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(instant19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(instant22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(instant26);
        org.junit.Assert.assertNotNull(mutableDateTime27);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(mutableDateTime29);
        org.junit.Assert.assertNotNull(instant31);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertNotNull(gJChronology35);
        org.junit.Assert.assertNotNull(durationField36);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 97L + "'", long40 == 97L);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 5200L + "'", long44 == 5200L);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(durationField46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(dateTimeZone51);
        org.junit.Assert.assertNotNull(gJChronology52);
        org.junit.Assert.assertNotNull(durationField53);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 97L + "'", long57 == 97L);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 5200L + "'", long61 == 5200L);
        org.junit.Assert.assertNotNull(dateTimeField62);
        org.junit.Assert.assertNotNull(dateTimeField63);
        org.junit.Assert.assertNotNull(durationField64);
        org.junit.Assert.assertNotNull(dateTimeField65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(instant67);
        org.junit.Assert.assertNotNull(dateTimeField68);
        org.junit.Assert.assertNotNull(dateTimeZone69);
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + 315569563408156L + "'", long71 == 315569563408156L);
        org.junit.Assert.assertNotNull(dateTime72);
    }

    @Test
    public void test19361() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19361");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str3 = dateTimeZone1.getNameKey((long) 100);
        boolean boolean4 = dateTimeZone1.isFixed();
        java.lang.String str5 = dateTimeZone1.toString();
        boolean boolean7 = dateTimeZone1.isStandardOffset((long) (byte) 0);
        java.util.TimeZone timeZone8 = null;
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forTimeZone(timeZone8);
        org.joda.time.chrono.GJChronology gJChronology10 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone9);
        org.joda.time.DurationField durationField11 = gJChronology10.halfdays();
        org.joda.time.DateTimeField dateTimeField12 = gJChronology10.millisOfDay();
        org.joda.time.DateTimeField dateTimeField13 = gJChronology10.minuteOfDay();
        org.joda.time.DurationField durationField14 = gJChronology10.centuries();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology10.dayOfYear();
        org.joda.time.DateTimeField dateTimeField16 = gJChronology10.weekyearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(1, 10);
        java.util.TimeZone timeZone20 = null;
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forTimeZone(timeZone20);
        long long23 = dateTimeZone19.getMillisKeepLocal(dateTimeZone21, 4320000000L);
        java.util.TimeZone timeZone24 = null;
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forTimeZone(timeZone24);
        java.lang.String str27 = dateTimeZone25.getNameKey((long) 100);
        boolean boolean28 = dateTimeZone25.isFixed();
        java.lang.String str29 = dateTimeZone25.toString();
        java.lang.String str30 = dateTimeZone25.getID();
        long long32 = dateTimeZone21.getMillisKeepLocal(dateTimeZone25, (long) (byte) -1);
        org.joda.time.Chronology chronology33 = gJChronology10.withZone(dateTimeZone25);
        org.joda.time.Instant instant34 = gJChronology10.getGregorianCutover();
        int int35 = dateTimeZone1.getOffset((org.joda.time.ReadableInstant) instant34);
        java.lang.String str36 = dateTimeZone1.toString();
        long long38 = dateTimeZone1.previousTransition(13867527L);
        org.joda.time.chrono.GJChronology gJChronology39 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        java.util.TimeZone timeZone40 = null;
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.forTimeZone(timeZone40);
        org.joda.time.chrono.GJChronology gJChronology42 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone41);
        org.joda.time.DurationField durationField43 = gJChronology42.halfdays();
        org.joda.time.DateTimeField dateTimeField44 = gJChronology42.millisOfDay();
        org.joda.time.DateTimeField dateTimeField45 = gJChronology42.minuteOfDay();
        org.joda.time.DurationField durationField46 = gJChronology42.centuries();
        org.joda.time.DateTimeField dateTimeField47 = gJChronology42.dayOfYear();
        java.lang.String str48 = gJChronology42.toString();
        org.joda.time.DateTimeField dateTimeField49 = gJChronology42.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone50 = gJChronology42.getZone();
        java.util.TimeZone timeZone51 = null;
        org.joda.time.DateTimeZone dateTimeZone52 = org.joda.time.DateTimeZone.forTimeZone(timeZone51);
        org.joda.time.chrono.GJChronology gJChronology53 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone52);
        java.util.Locale locale55 = new java.util.Locale("hi!");
        java.lang.String str56 = locale55.getCountry();
        java.util.Locale locale57 = java.util.Locale.getDefault();
        java.lang.String str58 = locale57.getDisplayName();
        java.lang.String str59 = locale55.getDisplayScript(locale57);
        boolean boolean60 = dateTimeZone52.equals((java.lang.Object) locale57);
        org.joda.time.Chronology chronology61 = gJChronology42.withZone(dateTimeZone52);
        boolean boolean62 = dateTimeZone52.isFixed();
        long long64 = dateTimeZone1.getMillisKeepLocal(dateTimeZone52, (-24103993L));
        java.lang.Class<?> wildcardClass65 = dateTimeZone52.getClass();
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "+00:00:00.052" + "'", str5, "+00:00:00.052");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(gJChronology10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(dateTimeZone21);
// flaky:         org.junit.Assert.assertTrue("'" + long23 + "' != '" + 4324199948L + "'", long23 == 4324199948L);
        org.junit.Assert.assertNotNull(dateTimeZone25);
// flaky:         org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str29 + "' != '" + "+00:00:00.052" + "'", str29, "+00:00:00.052");
// flaky:         org.junit.Assert.assertEquals("'" + str30 + "' != '" + "+00:00:00.052" + "'", str30, "+00:00:00.052");
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + (-1L) + "'", long32 == (-1L));
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(instant34);
// flaky:         org.junit.Assert.assertTrue("'" + int35 + "' != '" + 52 + "'", int35 == 52);
// flaky:         org.junit.Assert.assertEquals("'" + str36 + "' != '" + "+00:00:00.052" + "'", str36, "+00:00:00.052");
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 13867527L + "'", long38 == 13867527L);
        org.junit.Assert.assertNotNull(gJChronology39);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertNotNull(gJChronology42);
        org.junit.Assert.assertNotNull(durationField43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(durationField46);
        org.junit.Assert.assertNotNull(dateTimeField47);
// flaky:         org.junit.Assert.assertEquals("'" + str48 + "' != '" + "GJChronology[+00:00:00.052]" + "'", str48, "GJChronology[+00:00:00.052]");
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(dateTimeZone50);
        org.junit.Assert.assertNotNull(dateTimeZone52);
        org.junit.Assert.assertNotNull(gJChronology53);
        org.junit.Assert.assertEquals(locale55.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "hi!" + "'", str58, "hi!");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(chronology61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + (-24103993L) + "'", long64 == (-24103993L));
        org.junit.Assert.assertNotNull(wildcardClass65);
    }

    @Test
    public void test19362() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19362");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField3 = gJChronology2.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology2.halfdayOfDay();
        int int7 = gJChronology2.getMinimumDaysInFirstWeek();
        org.joda.time.DateTimeField dateTimeField8 = gJChronology2.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField9 = gJChronology2.year();
        org.joda.time.DateTimeField dateTimeField10 = gJChronology2.clockhourOfHalfday();
        org.joda.time.DurationField durationField11 = gJChronology2.eras();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 4 + "'", int7 == 4);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(durationField11);
    }

    @Test
    public void test19363() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19363");
        java.util.Locale locale0 = java.util.Locale.ITALIAN;
        java.lang.String str1 = locale0.getCountry();
        java.util.Locale locale2 = java.util.Locale.UK;
        java.lang.String str3 = locale2.getDisplayCountry();
        java.util.Set<java.lang.Character> charSet4 = locale2.getExtensionKeys();
        java.util.Locale locale5 = locale2.stripExtensions();
        java.lang.String str6 = locale0.getDisplayVariant(locale5);
        java.lang.String str8 = locale5.getUnicodeLocaleType("de");
        java.util.Locale locale10 = new java.util.Locale("hi!");
        java.lang.String str11 = locale10.getVariant();
        java.util.Locale locale13 = java.util.Locale.forLanguageTag("hi!");
        java.lang.String str14 = locale13.toLanguageTag();
        java.lang.String str15 = locale10.getDisplayName(locale13);
        java.util.Locale locale16 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale17 = java.util.Locale.ENGLISH;
        java.lang.String str18 = locale16.getDisplayLanguage(locale17);
        java.util.Locale locale19 = java.util.Locale.CANADA;
        java.lang.String str20 = locale19.getISO3Language();
        java.lang.String str21 = locale16.getDisplayVariant(locale19);
        java.lang.String str22 = locale13.getDisplayCountry(locale19);
        java.lang.String str23 = locale5.getDisplayCountry(locale13);
        java.util.Set<java.lang.Character> charSet24 = locale13.getExtensionKeys();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "it");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "en_GB");
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Regno Unito" + "'", str3, "Regno Unito");
        org.junit.Assert.assertNotNull(charSet4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertEquals(locale10.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "und" + "'", str14, "und");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hi!" + "'", str15, "hi!");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "en");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Chinese" + "'", str18, "Chinese");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "eng" + "'", str20, "eng");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "United Kingdom" + "'", str23, "United Kingdom");
        org.junit.Assert.assertNotNull(charSet24);
    }

    @Test
    public void test19364() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19364");
        java.util.Locale locale1 = java.util.Locale.forLanguageTag("kanada (ITALIANO)");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
    }

    @Test
    public void test19365() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19365");
        org.joda.time.Instant instant0 = org.joda.time.Instant.now();
        java.util.TimeZone timeZone1 = null;
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forTimeZone(timeZone1);
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone2);
        org.joda.time.DurationField durationField4 = gJChronology3.halfdays();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology3.millisOfDay();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology3.halfdayOfDay();
        int int7 = instant0.get(dateTimeField6);
        org.joda.time.Instant instant9 = instant0.minus(4156171L);
        boolean boolean11 = instant9.isAfter((-1000L));
        org.joda.time.Instant instant13 = instant9.plus(1247262110179199981L);
        org.joda.time.DateTime dateTime14 = instant13.toDateTime();
        long long15 = instant13.getMillis();
        org.junit.Assert.assertNotNull(instant0);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(gJChronology3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(instant9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(instant13);
        org.junit.Assert.assertNotNull(dateTime14);
// flaky:         org.junit.Assert.assertTrue("'" + long15 + "' != '" + 1247263754748158001L + "'", long15 == 1247263754748158001L);
    }

    @Test
    public void test19366() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19366");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField3 = gJChronology2.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.weekyear();
        org.joda.time.DurationField durationField5 = gJChronology2.centuries();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology2.millisOfDay();
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        long long10 = gJChronology2.add(readablePeriod7, (long) '4', (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField11 = gJChronology2.hourOfHalfday();
        org.joda.time.DurationField durationField12 = gJChronology2.eras();
        org.joda.time.ReadablePartial readablePartial13 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long15 = gJChronology2.set(readablePartial13, (-157784400000L));
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 52L + "'", long10 == 52L);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(durationField12);
    }

    @Test
    public void test19367() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19367");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = gJChronology2.halfdays();
        long long7 = gJChronology2.add(0L, (long) (short) -1, (int) '4');
        java.util.TimeZone timeZone8 = null;
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forTimeZone(timeZone8);
        org.joda.time.chrono.GJChronology gJChronology10 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone9);
        org.joda.time.DurationField durationField11 = gJChronology10.halfdays();
        org.joda.time.DateTimeField dateTimeField12 = gJChronology10.millisOfDay();
        org.joda.time.DateTimeField dateTimeField13 = gJChronology10.minuteOfDay();
        org.joda.time.DurationField durationField14 = gJChronology10.centuries();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology10.dayOfYear();
        java.lang.String str16 = gJChronology10.toString();
        org.joda.time.DurationField durationField17 = gJChronology10.years();
        org.joda.time.DateTimeField dateTimeField18 = gJChronology10.yearOfEra();
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(0, (int) (short) 10);
        org.joda.time.Chronology chronology22 = gJChronology10.withZone(dateTimeZone21);
        org.joda.time.Chronology chronology23 = gJChronology2.withZone(dateTimeZone21);
        org.joda.time.DurationField durationField24 = gJChronology2.halfdays();
        org.joda.time.Instant instant25 = gJChronology2.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration26 = null;
        org.joda.time.Instant instant27 = instant25.plus(readableDuration26);
        org.joda.time.Instant instant29 = instant25.plus((long) 1155627);
        boolean boolean30 = instant29.isEqualNow();
        java.util.TimeZone timeZone31 = null;
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.forTimeZone(timeZone31);
        org.joda.time.chrono.GJChronology gJChronology33 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone32);
        org.joda.time.DateTimeField dateTimeField34 = gJChronology33.millisOfSecond();
        org.joda.time.DurationField durationField35 = gJChronology33.millis();
        org.joda.time.ReadablePeriod readablePeriod36 = null;
        long long39 = gJChronology33.add(readablePeriod36, (long) 'a', (int) '4');
        org.joda.time.DateTimeZone dateTimeZone40 = gJChronology33.getZone();
        org.joda.time.DurationField durationField41 = gJChronology33.years();
        boolean boolean42 = instant29.equals((java.lang.Object) gJChronology33);
        org.joda.time.DateTimeField dateTimeField43 = gJChronology33.clockhourOfDay();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-52L) + "'", long7 == (-52L));
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(gJChronology10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "GJChronology[+00:00:00.052]" + "'", str16, "GJChronology[+00:00:00.052]");
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertNotNull(instant25);
        org.junit.Assert.assertNotNull(instant27);
        org.junit.Assert.assertNotNull(instant29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertNotNull(gJChronology33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(durationField35);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 97L + "'", long39 == 97L);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertNotNull(durationField41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(dateTimeField43);
    }

    @Test
    public void test19368() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19368");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = gJChronology2.halfdays();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.millisOfDay();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.minuteOfDay();
        org.joda.time.DurationField durationField6 = gJChronology2.centuries();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology2.dayOfYear();
        org.joda.time.DateTimeField dateTimeField8 = gJChronology2.millisOfDay();
        java.util.TimeZone timeZone9 = null;
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forTimeZone(timeZone9);
        org.joda.time.chrono.GJChronology gJChronology11 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone10);
        org.joda.time.DurationField durationField12 = gJChronology11.halfdays();
        org.joda.time.DateTimeField dateTimeField13 = gJChronology11.millisOfDay();
        org.joda.time.DateTimeField dateTimeField14 = gJChronology11.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology11.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone16 = gJChronology11.getZone();
        boolean boolean17 = dateTimeZone16.isFixed();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone16);
        long long20 = dateTimeZone16.convertUTCToLocal(43200100L);
        long long23 = dateTimeZone16.adjustOffset((-4199880L), false);
        java.util.TimeZone timeZone24 = null;
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forTimeZone(timeZone24);
        java.lang.String str27 = dateTimeZone25.getNameKey((long) 100);
        boolean boolean28 = dateTimeZone25.isFixed();
        org.joda.time.chrono.GJChronology gJChronology29 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone25);
        int int30 = gJChronology29.getMinimumDaysInFirstWeek();
        java.lang.String str31 = gJChronology29.toString();
        org.joda.time.DateTimeField dateTimeField32 = gJChronology29.yearOfEra();
        org.joda.time.DateTimeField dateTimeField33 = gJChronology29.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField34 = gJChronology29.dayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology36 = gJChronology29.withZone(dateTimeZone35);
        org.joda.time.DateTimeField dateTimeField37 = chronology36.millisOfSecond();
        java.util.TimeZone timeZone38 = null;
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.forTimeZone(timeZone38);
        org.joda.time.chrono.GJChronology gJChronology40 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone39);
        int int42 = dateTimeZone39.getOffsetFromLocal((long) (-1));
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.forOffsetHours((int) '4');
        long long46 = dateTimeZone39.getMillisKeepLocal(dateTimeZone44, (-8380800000L));
        org.joda.time.Chronology chronology47 = chronology36.withZone(dateTimeZone39);
        boolean boolean49 = dateTimeZone39.isStandardOffset(3600000L);
        long long51 = dateTimeZone16.getMillisKeepLocal(dateTimeZone39, 747221760000000000L);
        org.joda.time.Chronology chronology52 = gJChronology2.withZone(dateTimeZone16);
        org.joda.time.DurationField durationField53 = gJChronology2.weeks();
        long long56 = durationField53.add(17520000L, 164166);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(gJChronology11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
// flaky:         org.junit.Assert.assertTrue("'" + long20 + "' != '" + 43200152L + "'", long20 == 43200152L);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + (-4199880L) + "'", long23 == (-4199880L));
        org.junit.Assert.assertNotNull(dateTimeZone25);
// flaky:         org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(gJChronology29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 4 + "'", int30 == 4);
// flaky:         org.junit.Assert.assertEquals("'" + str31 + "' != '" + "GJChronology[+00:00:00.052]" + "'", str31, "GJChronology[+00:00:00.052]");
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertNotNull(gJChronology40);
// flaky:         org.junit.Assert.assertTrue("'" + int42 + "' != '" + 52 + "'", int42 == 52);
        org.junit.Assert.assertNotNull(dateTimeZone44);
// flaky:         org.junit.Assert.assertTrue("'" + long46 + "' != '" + (-8567999948L) + "'", long46 == (-8567999948L));
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 747221760000000000L + "'", long51 == 747221760000000000L);
        org.junit.Assert.assertNotNull(chronology52);
        org.junit.Assert.assertNotNull(durationField53);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 99287614320000L + "'", long56 == 99287614320000L);
    }

    @Test
    public void test19369() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19369");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str1 = dateTimeZone0.toString();
        java.util.TimeZone timeZone2 = dateTimeZone0.toTimeZone();
        java.lang.String str4 = dateTimeZone0.getShortName((long) 164166);
        org.junit.Assert.assertNotNull(dateTimeZone0);
// flaky:         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "+00:00:00.052" + "'", str1, "+00:00:00.052");
        org.junit.Assert.assertNotNull(timeZone2);
// flaky:         org.junit.Assert.assertEquals(timeZone2.getDisplayName(), "GMT+00:00");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00:00.052" + "'", str4, "+00:00:00.052");
    }

    @Test
    public void test19370() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19370");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        boolean boolean2 = instant1.isEqualNow();
        java.lang.String str3 = instant1.toString();
        java.lang.String str4 = instant1.toString();
        org.joda.time.Instant instant6 = new org.joda.time.Instant(52L);
        boolean boolean7 = instant6.isEqualNow();
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.Instant instant9 = instant6.plus(readableDuration8);
        boolean boolean10 = instant1.isBefore((org.joda.time.ReadableInstant) instant9);
        org.joda.time.Instant instant12 = instant1.minus((long) 0);
        long long13 = instant12.getMillis();
        org.joda.time.DateTimeZone dateTimeZone14 = instant12.getZone();
        int int16 = dateTimeZone14.getStandardOffset((-80740752900000L));
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "1970-01-01T00:00:00.052Z" + "'", str3, "1970-01-01T00:00:00.052Z");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "1970-01-01T00:00:00.052Z" + "'", str4, "1970-01-01T00:00:00.052Z");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(instant9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(instant12);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 52L + "'", long13 == 52L);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
    }

    @Test
    public void test19371() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19371");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField3 = gJChronology2.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology2.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology2.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField8 = gJChronology2.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField9 = gJChronology2.monthOfYear();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
    }

    @Test
    public void test19372() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19372");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = gJChronology2.halfdays();
        long long7 = gJChronology2.add((long) 'a', (-1L), (int) (short) 0);
        long long11 = gJChronology2.add((long) (byte) 0, (long) '4', 100);
        org.joda.time.DateTimeField dateTimeField12 = gJChronology2.minuteOfHour();
        org.joda.time.DurationField durationField13 = gJChronology2.hours();
        org.joda.time.DateTimeField dateTimeField14 = gJChronology2.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology2.millisOfSecond();
        org.joda.time.DurationField durationField16 = gJChronology2.seconds();
        java.lang.String str17 = gJChronology2.toString();
        org.joda.time.ReadablePeriod readablePeriod18 = null;
        long long21 = gJChronology2.add(readablePeriod18, 349200000L, 0);
        org.joda.time.DateTimeField dateTimeField22 = gJChronology2.dayOfWeek();
        java.util.TimeZone timeZone23 = null;
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forTimeZone(timeZone23);
        org.joda.time.chrono.GJChronology gJChronology25 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone24);
        org.joda.time.DurationField durationField26 = gJChronology25.years();
        java.util.TimeZone timeZone27 = null;
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forTimeZone(timeZone27);
        org.joda.time.chrono.GJChronology gJChronology29 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone28);
        org.joda.time.DurationField durationField30 = gJChronology29.halfdays();
        org.joda.time.DateTimeField dateTimeField31 = gJChronology29.millisOfDay();
        org.joda.time.DateTimeField dateTimeField32 = gJChronology29.minuteOfDay();
        org.joda.time.DurationField durationField33 = gJChronology29.centuries();
        java.util.TimeZone timeZone34 = null;
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.forTimeZone(timeZone34);
        org.joda.time.chrono.GJChronology gJChronology36 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone35);
        org.joda.time.DurationField durationField37 = gJChronology36.halfdays();
        long long40 = durationField37.add((long) 100, 100L);
        boolean boolean41 = durationField37.isPrecise();
        int int42 = durationField33.compareTo(durationField37);
        boolean boolean43 = gJChronology25.equals((java.lang.Object) durationField33);
        org.joda.time.DateTimeField dateTimeField44 = gJChronology25.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone45 = gJChronology25.getZone();
        org.joda.time.Chronology chronology46 = gJChronology2.withZone(dateTimeZone45);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 97L + "'", long7 == 97L);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 5200L + "'", long11 == 5200L);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(durationField16);
// flaky:         org.junit.Assert.assertEquals("'" + str17 + "' != '" + "GJChronology[+00:00:00.052]" + "'", str17, "GJChronology[+00:00:00.052]");
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 349200000L + "'", long21 == 349200000L);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(gJChronology25);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(gJChronology29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(durationField33);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertNotNull(gJChronology36);
        org.junit.Assert.assertNotNull(durationField37);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 4320000100L + "'", long40 == 4320000100L);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(dateTimeZone45);
        org.junit.Assert.assertNotNull(chronology46);
    }

    @Test
    public void test19373() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19373");
        java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("utc");
        double double2 = languageRange1.getWeight();
        double double3 = languageRange1.getWeight();
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1.0d + "'", double2 == 1.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 1.0d + "'", double3 == 1.0d);
    }

    @Test
    public void test19374() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19374");
        java.util.Locale locale0 = java.util.Locale.CHINA;
        java.lang.String str1 = locale0.getDisplayVariant();
        java.lang.String str2 = locale0.getDisplayLanguage();
        java.lang.String str3 = locale0.getDisplayScript();
        java.lang.String str4 = locale0.getDisplayVariant();
        java.lang.String str5 = locale0.getLanguage();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "cinese" + "'", str2, "cinese");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "zh" + "'", str5, "zh");
    }

    @Test
    public void test19375() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19375");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = gJChronology2.halfdays();
        long long7 = gJChronology2.add((long) 'a', (-1L), (int) (short) 0);
        boolean boolean9 = gJChronology2.equals((java.lang.Object) 0);
        org.joda.time.DateTimeField dateTimeField10 = gJChronology2.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField11 = gJChronology2.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField12 = gJChronology2.clockhourOfDay();
        long long17 = gJChronology2.getDateTimeMillis(10, (int) (short) 10, 4, (int) (byte) 1);
        org.joda.time.Instant instant18 = gJChronology2.getGregorianCutover();
        org.joda.time.DateTimeField dateTimeField19 = gJChronology2.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField20 = gJChronology2.weekyear();
        org.joda.time.DateTimeField dateTimeField21 = gJChronology2.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField22 = gJChronology2.millisOfDay();
        org.joda.time.DurationField durationField23 = gJChronology2.millis();
        org.joda.time.DurationField durationField24 = gJChronology2.hours();
        java.lang.String str25 = durationField24.getName();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 97L + "'", long7 == 97L);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
// flaky:         org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-61827926400051L) + "'", long17 == (-61827926400051L));
        org.junit.Assert.assertNotNull(instant18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "hours" + "'", str25, "hours");
    }

    @Test
    public void test19376() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19376");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = gJChronology2.halfdays();
        long long7 = gJChronology2.add((long) 'a', (-1L), (int) (short) 0);
        boolean boolean9 = gJChronology2.equals((java.lang.Object) 0);
        org.joda.time.DateTimeField dateTimeField10 = gJChronology2.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField11 = gJChronology2.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField12 = gJChronology2.clockhourOfDay();
        long long17 = gJChronology2.getDateTimeMillis(10, (int) (short) 10, 4, (int) (byte) 1);
        org.joda.time.DateTimeField dateTimeField18 = gJChronology2.millisOfSecond();
        org.joda.time.DurationField durationField19 = gJChronology2.months();
        java.lang.String str20 = gJChronology2.toString();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 97L + "'", long7 == 97L);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
// flaky:         org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-61827926400051L) + "'", long17 == (-61827926400051L));
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
// flaky:         org.junit.Assert.assertEquals("'" + str20 + "' != '" + "GJChronology[+00:00:00.052]" + "'", str20, "GJChronology[+00:00:00.052]");
    }

    @Test
    public void test19377() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19377");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        boolean boolean2 = instant1.isEqualNow();
        org.joda.time.ReadableDuration readableDuration3 = null;
        org.joda.time.Instant instant4 = instant1.plus(readableDuration3);
        long long5 = instant1.getMillis();
        java.lang.String str6 = instant1.toString();
        boolean boolean7 = instant1.isBeforeNow();
        java.lang.String str8 = instant1.toString();
        boolean boolean10 = instant1.isEqual(8351995800000L);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(instant4);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 52L + "'", long5 == 52L);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "1970-01-01T00:00:00.052Z" + "'", str6, "1970-01-01T00:00:00.052Z");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "1970-01-01T00:00:00.052Z" + "'", str8, "1970-01-01T00:00:00.052Z");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test19378() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19378");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = gJChronology2.halfdays();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.millisOfDay();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology2.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology2.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField8 = gJChronology2.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField9 = gJChronology2.yearOfCentury();
        java.lang.String str10 = gJChronology2.toString();
        org.joda.time.DateTimeField dateTimeField11 = gJChronology2.year();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "GJChronology[+00:00:00.052]" + "'", str10, "GJChronology[+00:00:00.052]");
        org.junit.Assert.assertNotNull(dateTimeField11);
    }

    @Test
    public void test19379() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19379");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = gJChronology2.halfdays();
        long long7 = gJChronology2.add((long) 'a', (-1L), (int) (short) 0);
        boolean boolean9 = gJChronology2.equals((java.lang.Object) 0);
        org.joda.time.DateTimeField dateTimeField10 = gJChronology2.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField11 = gJChronology2.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField12 = gJChronology2.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField13 = gJChronology2.clockhourOfHalfday();
        org.joda.time.DurationField durationField14 = gJChronology2.halfdays();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology2.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField16 = gJChronology2.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField17 = gJChronology2.weekyearOfCentury();
        java.util.TimeZone timeZone18 = null;
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forTimeZone(timeZone18);
        org.joda.time.chrono.GJChronology gJChronology20 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone19);
        org.joda.time.DurationField durationField21 = gJChronology20.halfdays();
        org.joda.time.DateTimeField dateTimeField22 = gJChronology20.millisOfDay();
        org.joda.time.DateTimeField dateTimeField23 = gJChronology20.minuteOfDay();
        org.joda.time.DurationField durationField24 = gJChronology20.centuries();
        org.joda.time.DateTimeField dateTimeField25 = gJChronology20.yearOfEra();
        boolean boolean26 = gJChronology2.equals((java.lang.Object) gJChronology20);
        org.joda.time.Chronology chronology27 = gJChronology20.withUTC();
        org.joda.time.DateTimeField dateTimeField28 = gJChronology20.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField29 = gJChronology20.hourOfDay();
        org.joda.time.DateTimeField dateTimeField30 = gJChronology20.minuteOfDay();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 97L + "'", long7 == 97L);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(gJChronology20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
    }

    @Test
    public void test19380() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19380");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField3 = gJChronology2.era();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.centuryOfEra();
        java.util.TimeZone timeZone5 = null;
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        org.joda.time.chrono.GJChronology gJChronology7 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone6);
        int int9 = dateTimeZone6.getOffsetFromLocal((long) (-1));
        int int11 = dateTimeZone6.getOffset((-61827926399999L));
        org.joda.time.Chronology chronology12 = gJChronology2.withZone(dateTimeZone6);
        org.joda.time.DateTimeField dateTimeField13 = gJChronology2.dayOfMonth();
        org.joda.time.DurationField durationField14 = gJChronology2.centuries();
        org.joda.time.DurationField durationField15 = gJChronology2.halfdays();
        org.joda.time.DurationField durationField16 = gJChronology2.hours();
        org.joda.time.DurationField durationField17 = gJChronology2.weeks();
        org.joda.time.DateTimeField dateTimeField18 = gJChronology2.minuteOfHour();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(gJChronology7);
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 52 + "'", int9 == 52);
// flaky:         org.junit.Assert.assertTrue("'" + int11 + "' != '" + 52 + "'", int11 == 52);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
    }

    @Test
    public void test19381() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19381");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = gJChronology2.halfdays();
        long long7 = gJChronology2.add((long) 'a', (-1L), (int) (short) 0);
        long long11 = gJChronology2.add((long) (byte) 0, (long) '4', 100);
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        long long15 = gJChronology2.add(readablePeriod12, 42600152L, (-5914428));
        org.joda.time.DurationField durationField16 = gJChronology2.hours();
        org.joda.time.DurationField durationField17 = gJChronology2.millis();
        long long19 = durationField17.getMillis((-8567999900L));
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 97L + "'", long7 == 97L);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 5200L + "'", long11 == 5200L);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 42600152L + "'", long15 == 42600152L);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-8567999900L) + "'", long19 == (-8567999900L));
    }

    @Test
    public void test19382() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19382");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        boolean boolean2 = instant1.isEqualNow();
        java.lang.String str3 = instant1.toString();
        org.joda.time.DateTimeZone dateTimeZone4 = instant1.getZone();
        org.joda.time.Instant instant6 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone7 = null;
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forTimeZone(timeZone7);
        org.joda.time.chrono.GJChronology gJChronology9 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone8);
        org.joda.time.DateTimeField dateTimeField10 = gJChronology9.millisOfSecond();
        int int11 = instant6.get(dateTimeField10);
        org.joda.time.Instant instant13 = instant6.plus(0L);
        java.util.TimeZone timeZone14 = null;
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forTimeZone(timeZone14);
        org.joda.time.chrono.GJChronology gJChronology16 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone15);
        org.joda.time.DurationField durationField17 = gJChronology16.halfdays();
        org.joda.time.Chronology chronology18 = gJChronology16.withUTC();
        java.lang.String str19 = gJChronology16.toString();
        org.joda.time.DateTimeField dateTimeField20 = gJChronology16.hourOfHalfday();
        int int21 = instant6.get(dateTimeField20);
        java.util.TimeZone timeZone22 = null;
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        org.joda.time.chrono.GJChronology gJChronology24 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone23);
        org.joda.time.DurationField durationField25 = gJChronology24.halfdays();
        long long29 = gJChronology24.add((long) 'a', (-1L), (int) (short) 0);
        org.joda.time.DateTimeField dateTimeField30 = gJChronology24.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField31 = gJChronology24.secondOfMinute();
        org.joda.time.Instant instant33 = new org.joda.time.Instant(52L);
        boolean boolean34 = instant33.isEqualNow();
        org.joda.time.ReadableDuration readableDuration35 = null;
        org.joda.time.Instant instant36 = instant33.plus(readableDuration35);
        boolean boolean37 = gJChronology24.equals((java.lang.Object) instant33);
        org.joda.time.DateTimeFieldType dateTimeFieldType38 = null;
        boolean boolean39 = instant33.isSupported(dateTimeFieldType38);
        org.joda.time.DateTimeFieldType dateTimeFieldType40 = null;
        boolean boolean41 = instant33.isSupported(dateTimeFieldType40);
        org.joda.time.DateTimeZone dateTimeZone42 = instant33.getZone();
        boolean boolean43 = instant6.isAfter((org.joda.time.ReadableInstant) instant33);
        org.joda.time.Instant instant45 = instant6.minus((long) 70);
        org.joda.time.Instant instant47 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone48 = null;
        org.joda.time.DateTimeZone dateTimeZone49 = org.joda.time.DateTimeZone.forTimeZone(timeZone48);
        org.joda.time.chrono.GJChronology gJChronology50 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone49);
        org.joda.time.DateTimeField dateTimeField51 = gJChronology50.millisOfSecond();
        int int52 = instant47.get(dateTimeField51);
        boolean boolean53 = instant47.isEqualNow();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter54 = null;
        java.lang.String str55 = instant47.toString(dateTimeFormatter54);
        boolean boolean56 = instant6.isAfter((org.joda.time.ReadableInstant) instant47);
        org.joda.time.Chronology chronology57 = instant6.getChronology();
        org.joda.time.ReadableDuration readableDuration58 = null;
        org.joda.time.Instant instant60 = instant6.withDurationAdded(readableDuration58, 35);
        org.joda.time.chrono.GJChronology gJChronology61 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone4, (org.joda.time.ReadableInstant) instant60);
        org.joda.time.Instant instant63 = instant60.minus((long) (-49998));
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "1970-01-01T00:00:00.052Z" + "'", str3, "1970-01-01T00:00:00.052Z");
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(gJChronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
// flaky:         org.junit.Assert.assertTrue("'" + int11 + "' != '" + 104 + "'", int11 == 104);
        org.junit.Assert.assertNotNull(instant13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(gJChronology16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(chronology18);
// flaky:         org.junit.Assert.assertEquals("'" + str19 + "' != '" + "GJChronology[+00:00:00.052]" + "'", str19, "GJChronology[+00:00:00.052]");
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(gJChronology24);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 97L + "'", long29 == 97L);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(instant36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(instant45);
        org.junit.Assert.assertNotNull(dateTimeZone49);
        org.junit.Assert.assertNotNull(gJChronology50);
        org.junit.Assert.assertNotNull(dateTimeField51);
// flaky:         org.junit.Assert.assertTrue("'" + int52 + "' != '" + 104 + "'", int52 == 104);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "1970-01-01T00:00:00.052Z" + "'", str55, "1970-01-01T00:00:00.052Z");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(chronology57);
        org.junit.Assert.assertNotNull(instant60);
        org.junit.Assert.assertNotNull(gJChronology61);
        org.junit.Assert.assertNotNull(instant63);
    }

    @Test
    public void test19383() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19383");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        long long6 = dateTimeZone1.convertLocalToUTC((long) (byte) -1, true, 0L);
        boolean boolean8 = dateTimeZone1.equals((java.lang.Object) true);
        org.joda.time.chrono.GJChronology gJChronology9 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField10 = gJChronology9.weekyear();
        org.joda.time.DateTimeField dateTimeField11 = gJChronology9.era();
        org.joda.time.DateTimeField dateTimeField12 = gJChronology9.centuryOfEra();
        org.joda.time.Chronology chronology13 = gJChronology9.withUTC();
        org.joda.time.DurationField durationField14 = gJChronology9.eras();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology9.secondOfDay();
        org.joda.time.DateTimeField dateTimeField16 = gJChronology9.halfdayOfDay();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(gJChronology2);
// flaky:         org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-53L) + "'", long6 == (-53L));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(gJChronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
    }

    @Test
    public void test19384() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19384");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str3 = dateTimeZone1.getNameKey((long) 100);
        boolean boolean4 = dateTimeZone1.isFixed();
        org.joda.time.chrono.GJChronology gJChronology5 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        int int6 = gJChronology5.getMinimumDaysInFirstWeek();
        java.lang.String str7 = gJChronology5.toString();
        org.joda.time.DateTimeField dateTimeField8 = gJChronology5.yearOfEra();
        org.joda.time.DateTimeField dateTimeField9 = gJChronology5.dayOfWeek();
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        long long13 = gJChronology5.add(readablePeriod10, (-23458387L), (int) '#');
        long long17 = gJChronology5.add((-60479999900000L), 1869L, 104);
        org.joda.time.DateTimeField dateTimeField18 = gJChronology5.weekyear();
        boolean boolean19 = dateTimeField18.isLenient();
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(gJChronology5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 4 + "'", int6 == 4);
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "GJChronology[+00:00:00.052]" + "'", str7, "GJChronology[+00:00:00.052]");
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-23458387L) + "'", long13 == (-23458387L));
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-60479999705624L) + "'", long17 == (-60479999705624L));
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test19385() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19385");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = gJChronology2.halfdays();
        long long7 = gJChronology2.add((long) 'a', (-1L), (int) (short) 0);
        boolean boolean9 = gJChronology2.equals((java.lang.Object) 0);
        org.joda.time.DateTimeField dateTimeField10 = gJChronology2.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField11 = gJChronology2.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField12 = gJChronology2.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField13 = gJChronology2.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField14 = gJChronology2.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology2.yearOfEra();
        org.joda.time.DateTimeField dateTimeField16 = gJChronology2.weekyear();
        org.joda.time.DurationField durationField17 = gJChronology2.years();
        org.joda.time.DateTimeField dateTimeField18 = gJChronology2.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField19 = gJChronology2.year();
        org.joda.time.Chronology chronology20 = gJChronology2.withUTC();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 97L + "'", long7 == 97L);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(chronology20);
    }

    @Test
    public void test19386() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19386");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = gJChronology2.halfdays();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.millisOfDay();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.minuteOfDay();
        org.joda.time.DurationField durationField6 = gJChronology2.centuries();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology2.dayOfYear();
        java.lang.String str8 = gJChronology2.toString();
        org.joda.time.DateTimeField dateTimeField9 = gJChronology2.dayOfYear();
        org.joda.time.Instant instant11 = new org.joda.time.Instant(52L);
        boolean boolean12 = instant11.isEqualNow();
        org.joda.time.ReadableDuration readableDuration13 = null;
        org.joda.time.Instant instant14 = instant11.plus(readableDuration13);
        long long15 = instant11.getMillis();
        java.lang.String str16 = instant11.toString();
        org.joda.time.Instant instant17 = instant11.toInstant();
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.Instant instant20 = instant11.withDurationAdded(readableDuration18, (int) 'x');
        org.joda.time.DateTimeZone dateTimeZone21 = instant11.getZone();
        java.util.TimeZone timeZone22 = null;
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        org.joda.time.chrono.GJChronology gJChronology24 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone23);
        org.joda.time.DurationField durationField25 = gJChronology24.halfdays();
        org.joda.time.DateTimeField dateTimeField26 = gJChronology24.millisOfDay();
        org.joda.time.DateTimeField dateTimeField27 = gJChronology24.minuteOfDay();
        org.joda.time.DurationField durationField28 = gJChronology24.centuries();
        org.joda.time.DateTimeField dateTimeField29 = gJChronology24.dayOfYear();
        java.lang.String str30 = gJChronology24.toString();
        org.joda.time.DateTimeField dateTimeField31 = gJChronology24.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone32 = gJChronology24.getZone();
        org.joda.time.chrono.GJChronology gJChronology33 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone32);
        long long35 = dateTimeZone32.nextTransition(1L);
        long long37 = dateTimeZone21.getMillisKeepLocal(dateTimeZone32, (long) (byte) 1);
        org.joda.time.Chronology chronology38 = gJChronology2.withZone(dateTimeZone21);
        int int40 = dateTimeZone21.getStandardOffset((-51L));
        java.util.Locale.Builder builder42 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder43 = builder42.clear();
        java.util.Locale.Builder builder45 = builder43.removeUnicodeLocaleAttribute("und");
        java.util.Locale.Builder builder46 = builder45.clear();
        java.util.Locale.Builder builder47 = builder45.clear();
        java.util.Locale.Builder builder49 = builder45.setLanguageTag("zh");
        java.util.Locale locale50 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str51 = locale50.getLanguage();
        java.util.Set<java.lang.Character> charSet52 = locale50.getExtensionKeys();
        java.util.Locale locale54 = new java.util.Locale("hi!");
        java.lang.String str55 = locale54.getVariant();
        java.util.Locale locale57 = java.util.Locale.forLanguageTag("hi!");
        java.lang.String str58 = locale57.toLanguageTag();
        java.lang.String str59 = locale54.getDisplayName(locale57);
        java.lang.String str60 = locale50.getDisplayScript(locale57);
        java.lang.String str61 = locale57.getDisplayCountry();
        java.util.Locale.Builder builder62 = builder49.setLocale(locale57);
        java.lang.String str63 = locale57.toLanguageTag();
        java.lang.String str64 = locale57.getDisplayCountry();
        java.util.Locale locale65 = locale57.stripExtensions();
        java.util.Locale locale66 = java.util.Locale.JAPAN;
        java.lang.String str67 = locale65.getDisplayLanguage(locale66);
        java.lang.String str68 = dateTimeZone21.getName((-3155695116618L), locale66);
        org.joda.time.LocalDateTime localDateTime69 = null;
        boolean boolean70 = dateTimeZone21.isLocalDateTimeGap(localDateTime69);
        java.util.TimeZone timeZone71 = dateTimeZone21.toTimeZone();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "GJChronology[+00:00:00.052]" + "'", str8, "GJChronology[+00:00:00.052]");
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(instant14);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 52L + "'", long15 == 52L);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "1970-01-01T00:00:00.052Z" + "'", str16, "1970-01-01T00:00:00.052Z");
        org.junit.Assert.assertNotNull(instant17);
        org.junit.Assert.assertNotNull(instant20);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(gJChronology24);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
// flaky:         org.junit.Assert.assertEquals("'" + str30 + "' != '" + "GJChronology[+00:00:00.052]" + "'", str30, "GJChronology[+00:00:00.052]");
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertNotNull(gJChronology33);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 1L + "'", long35 == 1L);
// flaky:         org.junit.Assert.assertTrue("'" + long37 + "' != '" + (-51L) + "'", long37 == (-51L));
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "zh" + "'", str51, "zh");
        org.junit.Assert.assertNotNull(charSet52);
        org.junit.Assert.assertEquals(locale54.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "und" + "'", str58, "und");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "hi!" + "'", str59, "hi!");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "und" + "'", str63, "und");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "" + "'", str64, "");
        org.junit.Assert.assertNotNull(locale65);
        org.junit.Assert.assertEquals(locale65.toString(), "");
        org.junit.Assert.assertNotNull(locale66);
        org.junit.Assert.assertEquals(locale66.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "" + "'", str67, "");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "+00:00" + "'", str68, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(timeZone71);
// flaky:         org.junit.Assert.assertEquals(timeZone71.getDisplayName(), "Tempo universale coordinato");
    }

    @Test
    public void test19387() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19387");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = gJChronology2.halfdays();
        long long7 = gJChronology2.add((long) 'a', (-1L), (int) (short) 0);
        org.joda.time.DateTimeField dateTimeField8 = gJChronology2.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField9 = gJChronology2.secondOfMinute();
        org.joda.time.Instant instant11 = new org.joda.time.Instant(52L);
        boolean boolean12 = instant11.isEqualNow();
        org.joda.time.ReadableDuration readableDuration13 = null;
        org.joda.time.Instant instant14 = instant11.plus(readableDuration13);
        boolean boolean15 = gJChronology2.equals((java.lang.Object) instant11);
        org.joda.time.DateTimeField dateTimeField16 = gJChronology2.weekyearOfCentury();
        // The following exception was thrown during execution in test generation
        try {
            long long21 = gJChronology2.getDateTimeMillis(33000052, 533793, 1775006, 0);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 533793 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 97L + "'", long7 == 97L);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(instant14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(dateTimeField16);
    }

    @Test
    public void test19388() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19388");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField3 = gJChronology2.millisOfSecond();
        org.joda.time.DurationField durationField4 = gJChronology2.millis();
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        long long8 = gJChronology2.add(readablePeriod5, (long) 'a', (int) '4');
        org.joda.time.DateTimeField dateTimeField9 = gJChronology2.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField10 = gJChronology2.yearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.Chronology chronology12 = gJChronology2.withZone(dateTimeZone11);
        org.joda.time.DateTimeField dateTimeField13 = gJChronology2.year();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 97L + "'", long8 == 97L);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
    }

    @Test
    public void test19389() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19389");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forTimeZone(timeZone2);
        org.joda.time.chrono.GJChronology gJChronology4 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone3);
        org.joda.time.DateTimeField dateTimeField5 = gJChronology4.millisOfSecond();
        int int6 = instant1.get(dateTimeField5);
        org.joda.time.Instant instant8 = instant1.plus(0L);
        java.util.TimeZone timeZone9 = null;
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forTimeZone(timeZone9);
        org.joda.time.chrono.GJChronology gJChronology11 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone10);
        org.joda.time.DurationField durationField12 = gJChronology11.halfdays();
        org.joda.time.Chronology chronology13 = gJChronology11.withUTC();
        java.lang.String str14 = gJChronology11.toString();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology11.hourOfHalfday();
        int int16 = instant1.get(dateTimeField15);
        org.joda.time.Instant instant18 = new org.joda.time.Instant(52L);
        boolean boolean19 = instant18.isEqualNow();
        java.lang.String str20 = instant18.toString();
        org.joda.time.Instant instant22 = new org.joda.time.Instant(52L);
        boolean boolean23 = instant22.isEqualNow();
        java.lang.String str24 = instant22.toString();
        java.lang.String str25 = instant22.toString();
        org.joda.time.Instant instant28 = instant22.withDurationAdded(115200000L, (int) (short) 1);
        int int29 = instant18.compareTo((org.joda.time.ReadableInstant) instant22);
        org.joda.time.Instant instant31 = new org.joda.time.Instant(52L);
        boolean boolean32 = instant31.isEqualNow();
        org.joda.time.ReadableDuration readableDuration33 = null;
        org.joda.time.Instant instant34 = instant31.plus(readableDuration33);
        boolean boolean36 = instant34.equals((java.lang.Object) ' ');
        boolean boolean37 = instant22.isAfter((org.joda.time.ReadableInstant) instant34);
        int int38 = instant1.compareTo((org.joda.time.ReadableInstant) instant22);
        long long39 = instant1.getMillis();
        org.joda.time.ReadableDuration readableDuration40 = null;
        org.joda.time.Instant instant42 = instant1.withDurationAdded(readableDuration40, 12);
        org.joda.time.MutableDateTime mutableDateTime43 = instant1.toMutableDateTime();
        boolean boolean44 = mutableDateTime43.isEqualNow();
        long long45 = mutableDateTime43.getMillis();
        boolean boolean46 = mutableDateTime43.isBeforeNow();
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(gJChronology4);
        org.junit.Assert.assertNotNull(dateTimeField5);
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 104 + "'", int6 == 104);
        org.junit.Assert.assertNotNull(instant8);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(gJChronology11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(chronology13);
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "GJChronology[+00:00:00.052]" + "'", str14, "GJChronology[+00:00:00.052]");
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "1970-01-01T00:00:00.052Z" + "'", str20, "1970-01-01T00:00:00.052Z");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "1970-01-01T00:00:00.052Z" + "'", str24, "1970-01-01T00:00:00.052Z");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "1970-01-01T00:00:00.052Z" + "'", str25, "1970-01-01T00:00:00.052Z");
        org.junit.Assert.assertNotNull(instant28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(instant34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 52L + "'", long39 == 52L);
        org.junit.Assert.assertNotNull(instant42);
        org.junit.Assert.assertNotNull(mutableDateTime43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 52L + "'", long45 == 52L);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
    }

    @Test
    public void test19390() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19390");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField3 = gJChronology2.millisOfSecond();
        org.joda.time.DurationField durationField4 = gJChronology2.millis();
        org.joda.time.DurationField durationField5 = gJChronology2.weekyears();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology2.dayOfYear();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology2.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField8 = gJChronology2.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField9 = gJChronology2.yearOfEra();
        org.joda.time.DurationField durationField10 = gJChronology2.weeks();
        org.joda.time.DateTimeField dateTimeField11 = gJChronology2.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone12 = gJChronology2.getZone();
        java.lang.String str14 = dateTimeZone12.getName((-38201767789440L));
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeZone12);
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "+00:00:00.052" + "'", str14, "+00:00:00.052");
    }

    @Test
    public void test19391() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19391");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clear();
        java.util.Locale.Builder builder3 = builder1.removeUnicodeLocaleAttribute("und");
        java.util.Locale.Builder builder4 = builder3.clear();
        java.util.Locale.Builder builder5 = builder3.clear();
        java.util.Locale.Builder builder7 = builder5.setVariant("");
        java.util.Locale.Builder builder8 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder9 = builder8.clear();
        java.util.Locale.Builder builder11 = builder9.removeUnicodeLocaleAttribute("und");
        java.util.Locale.Builder builder12 = builder11.clearExtensions();
        java.util.Locale.Builder builder13 = builder12.clearExtensions();
        java.util.Locale locale14 = builder12.build();
        java.util.Locale locale15 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale16 = java.util.Locale.ENGLISH;
        java.lang.String str17 = locale15.getDisplayLanguage(locale16);
        java.util.Locale locale18 = java.util.Locale.CANADA;
        java.lang.String str19 = locale18.getISO3Language();
        java.lang.String str20 = locale15.getDisplayVariant(locale18);
        java.util.Set<java.lang.String> strSet21 = locale15.getUnicodeLocaleKeys();
        java.util.Locale locale25 = new java.util.Locale("zh", "en", "");
        java.lang.String str26 = locale15.getDisplayName(locale25);
        java.lang.String str27 = locale25.getVariant();
        java.lang.String str28 = locale14.getDisplayName(locale25);
        java.lang.String str29 = locale25.toLanguageTag();
        java.util.Locale.Builder builder30 = builder5.setLocale(locale25);
        java.util.Locale.Builder builder32 = builder5.setScript("");
        java.util.Locale.Category category33 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale34 = java.util.Locale.CANADA;
        java.lang.String str35 = locale34.getISO3Language();
        java.util.Locale.setDefault(category33, locale34);
        java.util.Locale locale39 = new java.util.Locale("UTC", "zh_TW");
        java.util.Locale locale40 = java.util.Locale.CHINESE;
        boolean boolean41 = locale40.hasExtensions();
        java.util.Locale.setDefault(locale40);
        java.lang.String str43 = locale39.getDisplayLanguage(locale40);
        java.lang.String str44 = locale40.getVariant();
        java.lang.String str45 = locale40.getCountry();
        java.util.Locale.setDefault(category33, locale40);
        java.util.Locale locale47 = java.util.Locale.CANADA_FRENCH;
        boolean boolean48 = locale47.hasExtensions();
        java.lang.String str49 = locale47.getDisplayLanguage();
        java.util.Locale.setDefault(category33, locale47);
        java.util.Locale locale54 = new java.util.Locale("\u4e2d\u6587\u53f0\u6e7e\u5730\u533a)", "\u4e2d\u6587\u53f0\u6e7e\u5730\u533a)", "zh_TW");
        java.util.Locale.setDefault(category33, locale54);
        java.util.Locale locale56 = java.util.Locale.getDefault(category33);
        java.util.Locale locale57 = java.util.Locale.ITALIAN;
        java.util.Locale locale58 = locale57.stripExtensions();
        java.util.Locale locale59 = java.util.Locale.CANADA;
        java.lang.String str60 = locale57.getDisplayVariant(locale59);
        java.lang.String str61 = locale59.getDisplayLanguage();
        java.lang.String str62 = locale59.getDisplayCountry();
        java.lang.String str63 = locale59.getDisplayVariant();
        java.util.Locale.setDefault(locale59);
        java.util.Locale locale65 = java.util.Locale.CANADA;
        java.lang.String str66 = locale65.getCountry();
        java.lang.String str67 = locale59.getDisplayVariant(locale65);
        java.util.Locale.setDefault(category33, locale65);
        java.util.Locale.Builder builder69 = builder5.setLocale(locale65);
        java.lang.String str71 = locale65.getExtension('a');
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "en");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Chinese" + "'", str17, "Chinese");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "eng" + "'", str19, "eng");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(strSet21);
        org.junit.Assert.assertEquals(locale25.toString(), "zh_EN");
// flaky:         org.junit.Assert.assertEquals("'" + str26 + "' != '" + "\u4e2d\u6587\u53f0\u6e7e\u5730\u533a)" + "'", str26, "\u4e2d\u6587\u53f0\u6e7e\u5730\u533a)");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "zh-EN" + "'", str29, "zh-EN");
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertTrue("'" + category33 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category33.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "eng" + "'", str35, "eng");
        org.junit.Assert.assertEquals(locale39.toString(), "utc_ZH_TW");
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "zh");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "utc" + "'", str43, "utc");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "fr_CA");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "\u6cd5\u6587" + "'", str49, "\u6cd5\u6587");
// flaky:         org.junit.Assert.assertEquals(locale54.toString(), "\u4e2d\u6587\u53f0\u6e7e\u5730\u533a\u4e2d\u6587\u53f0\u6e7e\u5730\u533a)_zh_TW");
        org.junit.Assert.assertNotNull(locale56);
// flaky:         org.junit.Assert.assertEquals(locale56.toString(), "\u4e2d\u6587\u53f0\u6e7e\u5730\u533a\u4e2d\u6587\u53f0\u6e7e\u5730\u533a)_zh_TW");
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "it");
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "it");
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "English" + "'", str61, "English");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "Canada" + "'", str62, "Canada");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "" + "'", str63, "");
        org.junit.Assert.assertNotNull(locale65);
        org.junit.Assert.assertEquals(locale65.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "CA" + "'", str66, "CA");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "" + "'", str67, "");
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNull(str71);
    }

    @Test
    public void test19392() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19392");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField3 = gJChronology2.era();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.weekyear();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.weekyearOfCentury();
        org.joda.time.DurationField durationField6 = gJChronology2.millis();
        org.joda.time.DurationField durationField7 = gJChronology2.seconds();
        long long10 = durationField7.subtract((long) 35, 0L);
        int int12 = durationField7.getValue(0L);
        java.util.TimeZone timeZone13 = null;
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forTimeZone(timeZone13);
        org.joda.time.chrono.GJChronology gJChronology15 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone14);
        org.joda.time.DateTimeField dateTimeField16 = gJChronology15.era();
        org.joda.time.DurationField durationField17 = gJChronology15.months();
        long long20 = durationField17.getDifferenceAsLong(432000001L, 4324200000L);
        long long23 = durationField17.getValueAsLong((long) 52, (long) (byte) -1);
        java.lang.String str24 = durationField17.toString();
        int int25 = durationField7.compareTo(durationField17);
        boolean boolean26 = durationField17.isSupported();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 35L + "'", long10 == 35L);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(gJChronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + (-1L) + "'", long20 == (-1L));
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "DurationField[months]" + "'", str24, "DurationField[months]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
    }

    @Test
    public void test19393() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19393");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = gJChronology2.halfdays();
        long long7 = gJChronology2.add((long) 'a', (-1L), (int) (short) 0);
        long long11 = gJChronology2.add((long) (byte) 0, (long) '4', 100);
        org.joda.time.DateTimeField dateTimeField12 = gJChronology2.minuteOfHour();
        org.joda.time.DurationField durationField13 = gJChronology2.hours();
        org.joda.time.DateTimeField dateTimeField14 = gJChronology2.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology2.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField16 = gJChronology2.centuryOfEra();
        java.util.TimeZone timeZone17 = null;
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forTimeZone(timeZone17);
        org.joda.time.chrono.GJChronology gJChronology19 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone18);
        org.joda.time.DurationField durationField20 = gJChronology19.halfdays();
        long long24 = gJChronology19.add((long) 'a', (-1L), (int) (short) 0);
        long long28 = gJChronology19.add((long) (byte) 0, (long) '4', 100);
        org.joda.time.DateTimeField dateTimeField29 = gJChronology19.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField30 = gJChronology19.year();
        org.joda.time.DurationField durationField31 = gJChronology19.centuries();
        org.joda.time.DateTimeField dateTimeField32 = gJChronology19.dayOfMonth();
        boolean boolean33 = gJChronology2.equals((java.lang.Object) dateTimeField32);
        org.joda.time.DateTimeZone dateTimeZone34 = gJChronology2.getZone();
        org.joda.time.Instant instant36 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone37 = null;
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forTimeZone(timeZone37);
        org.joda.time.chrono.GJChronology gJChronology39 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone38);
        org.joda.time.DateTimeField dateTimeField40 = gJChronology39.millisOfSecond();
        int int41 = instant36.get(dateTimeField40);
        org.joda.time.Instant instant43 = instant36.plus(0L);
        java.util.TimeZone timeZone44 = null;
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.forTimeZone(timeZone44);
        org.joda.time.chrono.GJChronology gJChronology46 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone45);
        org.joda.time.DurationField durationField47 = gJChronology46.halfdays();
        org.joda.time.Chronology chronology48 = gJChronology46.withUTC();
        java.lang.String str49 = gJChronology46.toString();
        org.joda.time.DateTimeField dateTimeField50 = gJChronology46.hourOfHalfday();
        int int51 = instant36.get(dateTimeField50);
        java.util.TimeZone timeZone52 = null;
        org.joda.time.DateTimeZone dateTimeZone53 = org.joda.time.DateTimeZone.forTimeZone(timeZone52);
        org.joda.time.chrono.GJChronology gJChronology54 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone53);
        org.joda.time.DurationField durationField55 = gJChronology54.halfdays();
        long long59 = gJChronology54.add((long) 'a', (-1L), (int) (short) 0);
        org.joda.time.DateTimeField dateTimeField60 = gJChronology54.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField61 = gJChronology54.secondOfMinute();
        org.joda.time.Instant instant63 = new org.joda.time.Instant(52L);
        boolean boolean64 = instant63.isEqualNow();
        org.joda.time.ReadableDuration readableDuration65 = null;
        org.joda.time.Instant instant66 = instant63.plus(readableDuration65);
        boolean boolean67 = gJChronology54.equals((java.lang.Object) instant63);
        org.joda.time.DateTimeFieldType dateTimeFieldType68 = null;
        boolean boolean69 = instant63.isSupported(dateTimeFieldType68);
        org.joda.time.DateTimeFieldType dateTimeFieldType70 = null;
        boolean boolean71 = instant63.isSupported(dateTimeFieldType70);
        org.joda.time.DateTimeZone dateTimeZone72 = instant63.getZone();
        boolean boolean73 = instant36.isAfter((org.joda.time.ReadableInstant) instant63);
        org.joda.time.Instant instant75 = instant63.plus((long) 4);
        org.joda.time.chrono.GJChronology gJChronology76 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone34, (org.joda.time.ReadableInstant) instant75);
        org.joda.time.DurationField durationField77 = gJChronology76.months();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 97L + "'", long7 == 97L);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 5200L + "'", long11 == 5200L);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(gJChronology19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 97L + "'", long24 == 97L);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 5200L + "'", long28 == 5200L);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertNotNull(gJChronology39);
        org.junit.Assert.assertNotNull(dateTimeField40);
// flaky:         org.junit.Assert.assertTrue("'" + int41 + "' != '" + 104 + "'", int41 == 104);
        org.junit.Assert.assertNotNull(instant43);
        org.junit.Assert.assertNotNull(dateTimeZone45);
        org.junit.Assert.assertNotNull(gJChronology46);
        org.junit.Assert.assertNotNull(durationField47);
        org.junit.Assert.assertNotNull(chronology48);
// flaky:         org.junit.Assert.assertEquals("'" + str49 + "' != '" + "GJChronology[+00:00:00.052]" + "'", str49, "GJChronology[+00:00:00.052]");
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone53);
        org.junit.Assert.assertNotNull(gJChronology54);
        org.junit.Assert.assertNotNull(durationField55);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 97L + "'", long59 == 97L);
        org.junit.Assert.assertNotNull(dateTimeField60);
        org.junit.Assert.assertNotNull(dateTimeField61);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(instant66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(dateTimeZone72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(instant75);
        org.junit.Assert.assertNotNull(gJChronology76);
        org.junit.Assert.assertNotNull(durationField77);
    }

    @Test
    public void test19394() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19394");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = gJChronology2.halfdays();
        long long7 = gJChronology2.add((long) 'a', (-1L), (int) (short) 0);
        org.joda.time.DateTimeField dateTimeField8 = gJChronology2.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField9 = gJChronology2.secondOfMinute();
        org.joda.time.Instant instant11 = new org.joda.time.Instant(52L);
        boolean boolean12 = instant11.isEqualNow();
        org.joda.time.ReadableDuration readableDuration13 = null;
        org.joda.time.Instant instant14 = instant11.plus(readableDuration13);
        boolean boolean15 = gJChronology2.equals((java.lang.Object) instant11);
        org.joda.time.ReadableDuration readableDuration16 = null;
        org.joda.time.Instant instant18 = instant11.withDurationAdded(readableDuration16, 52);
        org.joda.time.Instant instant20 = new org.joda.time.Instant(4320000100L);
        java.util.TimeZone timeZone21 = null;
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forTimeZone(timeZone21);
        org.joda.time.chrono.GJChronology gJChronology23 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone22);
        org.joda.time.DurationField durationField24 = gJChronology23.halfdays();
        org.joda.time.DateTimeField dateTimeField25 = gJChronology23.millisOfDay();
        org.joda.time.DateTimeField dateTimeField26 = gJChronology23.minuteOfDay();
        org.joda.time.DurationField durationField27 = gJChronology23.centuries();
        org.joda.time.DateTimeField dateTimeField28 = gJChronology23.dayOfYear();
        java.lang.String str29 = gJChronology23.toString();
        org.joda.time.DateTimeField dateTimeField30 = gJChronology23.dayOfYear();
        org.joda.time.DateTimeField dateTimeField31 = gJChronology23.dayOfMonth();
        int int32 = instant20.get(dateTimeField31);
        boolean boolean33 = instant11.isBefore((org.joda.time.ReadableInstant) instant20);
        org.joda.time.MutableDateTime mutableDateTime34 = instant11.toMutableDateTimeISO();
        java.util.TimeZone timeZone35 = null;
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.forTimeZone(timeZone35);
        org.joda.time.chrono.GJChronology gJChronology37 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone36);
        org.joda.time.DurationField durationField38 = gJChronology37.years();
        java.util.TimeZone timeZone39 = null;
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.forTimeZone(timeZone39);
        org.joda.time.chrono.GJChronology gJChronology41 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone40);
        org.joda.time.DurationField durationField42 = gJChronology41.halfdays();
        org.joda.time.DateTimeField dateTimeField43 = gJChronology41.millisOfDay();
        org.joda.time.DateTimeField dateTimeField44 = gJChronology41.minuteOfDay();
        org.joda.time.DurationField durationField45 = gJChronology41.centuries();
        java.util.TimeZone timeZone46 = null;
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.forTimeZone(timeZone46);
        org.joda.time.chrono.GJChronology gJChronology48 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone47);
        org.joda.time.DurationField durationField49 = gJChronology48.halfdays();
        long long52 = durationField49.add((long) 100, 100L);
        boolean boolean53 = durationField49.isPrecise();
        int int54 = durationField45.compareTo(durationField49);
        boolean boolean55 = gJChronology37.equals((java.lang.Object) durationField45);
        org.joda.time.DateTimeField dateTimeField56 = gJChronology37.clockhourOfDay();
        org.joda.time.DateTimeZone dateTimeZone59 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(1, 10);
        java.util.TimeZone timeZone60 = null;
        org.joda.time.DateTimeZone dateTimeZone61 = org.joda.time.DateTimeZone.forTimeZone(timeZone60);
        long long63 = dateTimeZone59.getMillisKeepLocal(dateTimeZone61, 4320000000L);
        org.joda.time.Instant instant65 = new org.joda.time.Instant(52L);
        boolean boolean66 = instant65.isEqualNow();
        org.joda.time.ReadableDuration readableDuration67 = null;
        org.joda.time.Instant instant68 = instant65.plus(readableDuration67);
        long long69 = instant65.getMillis();
        java.lang.String str70 = instant65.toString();
        org.joda.time.Instant instant71 = instant65.toInstant();
        org.joda.time.ReadableDuration readableDuration72 = null;
        org.joda.time.Instant instant74 = instant65.withDurationAdded(readableDuration72, (int) 'x');
        org.joda.time.Instant instant75 = instant65.toInstant();
        int int76 = dateTimeZone59.getOffset((org.joda.time.ReadableInstant) instant65);
        org.joda.time.Instant instant78 = new org.joda.time.Instant(52L);
        boolean boolean79 = instant78.isEqualNow();
        org.joda.time.ReadableDuration readableDuration80 = null;
        org.joda.time.Instant instant81 = instant78.plus(readableDuration80);
        long long82 = instant78.getMillis();
        java.lang.String str83 = instant78.toString();
        boolean boolean85 = instant78.isAfter((long) (-1));
        java.lang.Object obj86 = null;
        boolean boolean87 = instant78.equals(obj86);
        org.joda.time.ReadableDuration readableDuration88 = null;
        org.joda.time.Instant instant89 = instant78.minus(readableDuration88);
        org.joda.time.chrono.GJChronology gJChronology90 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone59, (org.joda.time.ReadableInstant) instant78);
        org.joda.time.Chronology chronology91 = gJChronology37.withZone(dateTimeZone59);
        boolean boolean92 = mutableDateTime34.equals((java.lang.Object) gJChronology37);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 97L + "'", long7 == 97L);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(instant14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(instant18);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(gJChronology23);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
// flaky:         org.junit.Assert.assertEquals("'" + str29 + "' != '" + "GJChronology[+00:00:00.052]" + "'", str29, "GJChronology[+00:00:00.052]");
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 20 + "'", int32 == 20);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(mutableDateTime34);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertNotNull(gJChronology37);
        org.junit.Assert.assertNotNull(durationField38);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertNotNull(gJChronology41);
        org.junit.Assert.assertNotNull(durationField42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(durationField45);
        org.junit.Assert.assertNotNull(dateTimeZone47);
        org.junit.Assert.assertNotNull(gJChronology48);
        org.junit.Assert.assertNotNull(durationField49);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 4320000100L + "'", long52 == 4320000100L);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertNotNull(dateTimeZone59);
        org.junit.Assert.assertNotNull(dateTimeZone61);
// flaky:         org.junit.Assert.assertTrue("'" + long63 + "' != '" + 4324199948L + "'", long63 == 4324199948L);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(instant68);
        org.junit.Assert.assertTrue("'" + long69 + "' != '" + 52L + "'", long69 == 52L);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "1970-01-01T00:00:00.052Z" + "'", str70, "1970-01-01T00:00:00.052Z");
        org.junit.Assert.assertNotNull(instant71);
        org.junit.Assert.assertNotNull(instant74);
        org.junit.Assert.assertNotNull(instant75);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 4200000 + "'", int76 == 4200000);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(instant81);
        org.junit.Assert.assertTrue("'" + long82 + "' != '" + 52L + "'", long82 == 52L);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "1970-01-01T00:00:00.052Z" + "'", str83, "1970-01-01T00:00:00.052Z");
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(instant89);
        org.junit.Assert.assertNotNull(gJChronology90);
        org.junit.Assert.assertNotNull(chronology91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
    }

    @Test
    public void test19395() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19395");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clear();
        java.util.Locale.Builder builder3 = builder1.removeUnicodeLocaleAttribute("und");
        java.util.Locale.Builder builder4 = builder3.clearExtensions();
        java.util.Locale locale5 = builder4.build();
        java.util.Locale locale6 = builder4.build();
        java.util.Locale.Builder builder7 = builder4.clearExtensions();
        java.util.Locale locale8 = builder7.build();
        java.util.Locale.Builder builder9 = builder7.clearExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder11 = builder7.setVariant("inglese (Canada)");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed variant: inglese (Canada) [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "");
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "");
        org.junit.Assert.assertNotNull(builder9);
    }

    @Test
    public void test19396() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19396");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) '#');
        java.util.TimeZone timeZone2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forTimeZone(timeZone2);
        org.joda.time.chrono.GJChronology gJChronology4 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone3);
        org.joda.time.DateTimeField dateTimeField5 = gJChronology4.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology4.weekyearOfCentury();
        org.joda.time.Instant instant7 = gJChronology4.getGregorianCutover();
        boolean boolean8 = instant1.equals((java.lang.Object) gJChronology4);
        org.joda.time.DateTimeField dateTimeField9 = gJChronology4.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField10 = gJChronology4.weekOfWeekyear();
        java.lang.String str11 = gJChronology4.toString();
        org.joda.time.DateTimeField dateTimeField12 = gJChronology4.hourOfDay();
        org.joda.time.DateTimeField dateTimeField13 = gJChronology4.millisOfSecond();
        org.joda.time.DurationField durationField14 = gJChronology4.days();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology4.millisOfSecond();
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(gJChronology4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(instant7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "GJChronology[+00:00:00.052]" + "'", str11, "GJChronology[+00:00:00.052]");
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
    }

    @Test
    public void test19397() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19397");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = gJChronology2.halfdays();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.millisOfDay();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.minuteOfDay();
        org.joda.time.DurationField durationField6 = gJChronology2.centuries();
        int int7 = gJChronology2.getMinimumDaysInFirstWeek();
        org.joda.time.DateTimeField dateTimeField8 = gJChronology2.weekyear();
        org.joda.time.DateTimeField dateTimeField9 = gJChronology2.weekyearOfCentury();
        org.joda.time.DurationField durationField10 = gJChronology2.halfdays();
        org.joda.time.Instant instant11 = gJChronology2.getGregorianCutover();
        org.joda.time.Instant instant12 = gJChronology2.getGregorianCutover();
        org.joda.time.DateTimeField dateTimeField13 = gJChronology2.clockhourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone14 = gJChronology2.getZone();
        long long17 = dateTimeZone14.adjustOffset((-60479995700000L), false);
        java.util.Locale locale19 = java.util.Locale.ROOT;
        java.util.Locale locale20 = java.util.Locale.ITALIAN;
        java.lang.String str21 = locale19.getDisplayName(locale20);
        java.util.Locale locale22 = java.util.Locale.ENGLISH;
        java.lang.String str24 = locale22.getUnicodeLocaleType("zh");
        java.lang.String str25 = locale19.getDisplayCountry(locale22);
        java.util.Locale locale26 = java.util.Locale.ITALIAN;
        java.util.Locale locale27 = locale26.stripExtensions();
        java.lang.String str28 = locale26.getDisplayVariant();
        java.util.Set<java.lang.Character> charSet29 = locale26.getExtensionKeys();
        java.lang.String str30 = locale19.getDisplayCountry(locale26);
        java.util.Locale locale31 = locale26.stripExtensions();
        java.util.Set<java.lang.String> strSet32 = locale26.getUnicodeLocaleKeys();
        java.lang.String str33 = dateTimeZone14.getName((-135003600000L), locale26);
        java.lang.String str34 = locale26.getLanguage();
        java.lang.String str35 = locale26.getDisplayScript();
        java.lang.String str37 = locale26.getExtension('x');
        java.util.Locale locale38 = java.util.Locale.ROOT;
        java.util.Locale locale39 = java.util.Locale.GERMAN;
        java.lang.String str40 = locale39.getDisplayCountry();
        java.lang.String str41 = locale38.getDisplayLanguage(locale39);
        java.lang.String str42 = locale39.getDisplayCountry();
        java.lang.String str43 = locale26.getDisplayCountry(locale39);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 4 + "'", int7 == 4);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(instant11);
        org.junit.Assert.assertNotNull(instant12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-60479995700000L) + "'", long17 == (-60479995700000L));
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "it");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "en");
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "it");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "it");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(charSet29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "it");
        org.junit.Assert.assertNotNull(strSet32);
// flaky:         org.junit.Assert.assertEquals("'" + str33 + "' != '" + "+00:00:00.052" + "'", str33, "+00:00:00.052");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "it" + "'", str34, "it");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "");
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "de");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
    }

    @Test
    public void test19398() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19398");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        boolean boolean2 = instant1.isEqualNow();
        org.joda.time.ReadableDuration readableDuration3 = null;
        org.joda.time.Instant instant4 = instant1.plus(readableDuration3);
        boolean boolean6 = instant4.equals((java.lang.Object) ' ');
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(1, 10);
        java.util.TimeZone timeZone10 = null;
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forTimeZone(timeZone10);
        long long13 = dateTimeZone9.getMillisKeepLocal(dateTimeZone11, 4320000000L);
        boolean boolean14 = instant4.equals((java.lang.Object) 4320000000L);
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = null;
        boolean boolean16 = instant4.isSupported(dateTimeFieldType15);
        org.joda.time.DateTimeZone dateTimeZone17 = instant4.getZone();
        org.joda.time.chrono.GJChronology gJChronology18 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone17);
        java.util.TimeZone timeZone19 = dateTimeZone17.toTimeZone();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(instant4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateTimeZone11);
// flaky:         org.junit.Assert.assertTrue("'" + long13 + "' != '" + 4324199948L + "'", long13 == 4324199948L);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(gJChronology18);
        org.junit.Assert.assertNotNull(timeZone19);
        org.junit.Assert.assertEquals(timeZone19.getDisplayName(), "Coordinated Universal Time");
    }

    @Test
    public void test19399() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19399");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = gJChronology2.halfdays();
        long long7 = gJChronology2.add((long) 'a', (-1L), (int) (short) 0);
        boolean boolean9 = gJChronology2.equals((java.lang.Object) 0);
        org.joda.time.DateTimeField dateTimeField10 = gJChronology2.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField11 = gJChronology2.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField12 = gJChronology2.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField13 = gJChronology2.clockhourOfHalfday();
        org.joda.time.DurationField durationField14 = gJChronology2.weekyears();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology2.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField16 = gJChronology2.monthOfYear();
        org.joda.time.DurationField durationField17 = gJChronology2.weeks();
        org.joda.time.DateTimeField dateTimeField18 = gJChronology2.weekyear();
        org.joda.time.DurationField durationField19 = gJChronology2.hours();
        org.joda.time.DateTimeField dateTimeField20 = gJChronology2.secondOfMinute();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 97L + "'", long7 == 97L);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
    }

    @Test
    public void test19400() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19400");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = gJChronology2.halfdays();
        long long7 = gJChronology2.add((long) 'a', (-1L), (int) (short) 0);
        boolean boolean9 = gJChronology2.equals((java.lang.Object) 0);
        org.joda.time.DateTimeField dateTimeField10 = gJChronology2.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField11 = gJChronology2.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField12 = gJChronology2.yearOfEra();
        org.joda.time.DateTimeField dateTimeField13 = gJChronology2.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField14 = gJChronology2.dayOfYear();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology2.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField16 = gJChronology2.secondOfDay();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 97L + "'", long7 == 97L);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
    }

    @Test
    public void test19401() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19401");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap1 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.Locale.LanguageRange> languageRangeList2 = java.util.Locale.LanguageRange.parse("GJChronology[+13:04,cutover=1970-01-01T00:00:00.052Z]", strMap1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=gjchronology[+13:04");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test19402() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19402");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField3 = gJChronology2.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.millisOfSecond();
        org.joda.time.DurationField durationField5 = gJChronology2.days();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology2.clockhourOfDay();
        org.joda.time.DateTimeZone dateTimeZone7 = gJChronology2.getZone();
        org.joda.time.DurationField durationField8 = gJChronology2.millis();
        long long11 = durationField8.getDifferenceAsLong((-17035938075906L), (-360033411L));
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-17035578042495L) + "'", long11 == (-17035578042495L));
    }

    @Test
    public void test19403() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19403");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = gJChronology2.halfdays();
        long long7 = gJChronology2.add(0L, (long) (short) -1, (int) '4');
        java.util.TimeZone timeZone8 = null;
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forTimeZone(timeZone8);
        org.joda.time.chrono.GJChronology gJChronology10 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone9);
        org.joda.time.DurationField durationField11 = gJChronology10.halfdays();
        org.joda.time.DateTimeField dateTimeField12 = gJChronology10.millisOfDay();
        org.joda.time.DateTimeField dateTimeField13 = gJChronology10.minuteOfDay();
        org.joda.time.DurationField durationField14 = gJChronology10.centuries();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology10.dayOfYear();
        java.lang.String str16 = gJChronology10.toString();
        org.joda.time.DurationField durationField17 = gJChronology10.years();
        org.joda.time.DateTimeField dateTimeField18 = gJChronology10.yearOfEra();
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(0, (int) (short) 10);
        org.joda.time.Chronology chronology22 = gJChronology10.withZone(dateTimeZone21);
        org.joda.time.Chronology chronology23 = gJChronology2.withZone(dateTimeZone21);
        org.joda.time.DurationField durationField24 = gJChronology2.halfdays();
        org.joda.time.Instant instant25 = gJChronology2.getGregorianCutover();
        org.joda.time.Instant instant27 = instant25.withMillis((long) (short) -1);
        org.joda.time.Instant instant30 = instant27.withDurationAdded((long) (-5914428), 236785);
        org.joda.time.ReadableDuration readableDuration31 = null;
        org.joda.time.Instant instant32 = instant27.minus(readableDuration31);
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int34 = instant32.get(dateTimeFieldType33);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The DateTimeFieldType must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-52L) + "'", long7 == (-52L));
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(gJChronology10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "GJChronology[+00:00:00.052]" + "'", str16, "GJChronology[+00:00:00.052]");
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertNotNull(instant25);
        org.junit.Assert.assertNotNull(instant27);
        org.junit.Assert.assertNotNull(instant30);
        org.junit.Assert.assertNotNull(instant32);
    }

    @Test
    public void test19404() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19404");
        java.util.Locale.Category category0 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale1 = java.util.Locale.CANADA;
        java.lang.String str2 = locale1.getISO3Language();
        java.util.Locale.setDefault(category0, locale1);
        java.util.Locale locale5 = java.util.Locale.forLanguageTag("halfdays");
        boolean boolean6 = locale5.hasExtensions();
        java.util.Set<java.lang.Character> charSet7 = locale5.getExtensionKeys();
        java.util.Locale.setDefault(category0, locale5);
        java.util.Locale locale9 = java.util.Locale.getDefault(category0);
        java.util.Locale.Category category10 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale11 = java.util.Locale.CANADA;
        java.lang.String str12 = locale11.getISO3Language();
        java.util.Locale.setDefault(category10, locale11);
        java.util.Locale locale15 = java.util.Locale.forLanguageTag("halfdays");
        boolean boolean16 = locale15.hasExtensions();
        java.util.Set<java.lang.Character> charSet17 = locale15.getExtensionKeys();
        java.util.Locale.setDefault(category10, locale15);
        java.util.Locale locale19 = java.util.Locale.getDefault(category10);
        java.util.Set<java.lang.String> strSet20 = locale19.getUnicodeLocaleAttributes();
        java.util.Locale.Builder builder21 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder22 = builder21.clear();
        java.util.Locale.Builder builder24 = builder22.removeUnicodeLocaleAttribute("und");
        java.util.Locale locale25 = builder24.build();
        java.lang.String str26 = locale25.getDisplayName();
        java.lang.String str27 = locale19.getDisplayScript(locale25);
        java.util.Locale.setDefault(category0, locale19);
        java.util.Locale locale29 = java.util.Locale.getDefault(category0);
        java.util.Locale locale30 = java.util.Locale.getDefault(category0);
        java.util.Locale locale31 = java.util.Locale.getDefault();
        java.lang.String str32 = locale31.getVariant();
        java.lang.String str34 = locale31.getExtension('u');
        java.util.Locale.setDefault(locale31);
        java.lang.String str36 = locale31.getLanguage();
        java.util.Locale.setDefault(category0, locale31);
        boolean boolean38 = locale31.hasExtensions();
        java.util.Locale.Category category39 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale40 = java.util.Locale.CANADA;
        java.lang.String str41 = locale40.getISO3Language();
        java.util.Locale.setDefault(category39, locale40);
        java.util.Locale locale44 = java.util.Locale.forLanguageTag("halfdays");
        boolean boolean45 = locale44.hasExtensions();
        java.util.Set<java.lang.Character> charSet46 = locale44.getExtensionKeys();
        java.util.Locale.setDefault(category39, locale44);
        java.util.Locale locale48 = java.util.Locale.getDefault(category39);
        java.util.Locale.Category category49 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale50 = java.util.Locale.CANADA;
        java.lang.String str51 = locale50.getISO3Language();
        java.util.Locale.setDefault(category49, locale50);
        java.util.Locale locale54 = java.util.Locale.forLanguageTag("halfdays");
        boolean boolean55 = locale54.hasExtensions();
        java.util.Set<java.lang.Character> charSet56 = locale54.getExtensionKeys();
        java.util.Locale.setDefault(category49, locale54);
        java.util.Locale locale58 = java.util.Locale.getDefault(category49);
        java.util.Set<java.lang.String> strSet59 = locale58.getUnicodeLocaleAttributes();
        java.util.Locale.Builder builder60 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder61 = builder60.clear();
        java.util.Locale.Builder builder63 = builder61.removeUnicodeLocaleAttribute("und");
        java.util.Locale locale64 = builder63.build();
        java.lang.String str65 = locale64.getDisplayName();
        java.lang.String str66 = locale58.getDisplayScript(locale64);
        java.util.Locale.setDefault(category39, locale58);
        java.util.Locale locale68 = java.util.Locale.getDefault(category39);
        java.util.Locale locale69 = java.util.Locale.getDefault(category39);
        java.util.Locale locale70 = java.util.Locale.getDefault(category39);
        java.lang.String str71 = locale31.getDisplayCountry(locale70);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str73 = locale31.getExtension(' ');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Ill-formed extension key:  ");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category0.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "eng" + "'", str2, "eng");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "halfdays");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(charSet7);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "halfdays");
        org.junit.Assert.assertTrue("'" + category10 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category10.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "eng" + "'", str12, "eng");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "halfdays");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(charSet17);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "halfdays");
        org.junit.Assert.assertNotNull(strSet20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "halfdays");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "halfdays");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "en" + "'", str36, "en");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + category39 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category39.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "eng" + "'", str41, "eng");
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "halfdays");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(charSet46);
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "halfdays");
        org.junit.Assert.assertTrue("'" + category49 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category49.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "eng" + "'", str51, "eng");
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "halfdays");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(charSet56);
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "halfdays");
        org.junit.Assert.assertNotNull(strSet59);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(locale64);
        org.junit.Assert.assertEquals(locale64.toString(), "");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "" + "'", str65, "");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "" + "'", str66, "");
        org.junit.Assert.assertNotNull(locale68);
        org.junit.Assert.assertEquals(locale68.toString(), "halfdays");
        org.junit.Assert.assertNotNull(locale69);
        org.junit.Assert.assertEquals(locale69.toString(), "halfdays");
        org.junit.Assert.assertNotNull(locale70);
        org.junit.Assert.assertEquals(locale70.toString(), "halfdays");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "Canada" + "'", str71, "Canada");
    }

    @Test
    public void test19405() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19405");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField3 = gJChronology2.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.weekyear();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.dayOfMonth();
        java.lang.String str6 = gJChronology2.toString();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology2.clockhourOfHalfday();
        org.joda.time.DurationField durationField8 = gJChronology2.hours();
        org.joda.time.DateTimeField dateTimeField9 = gJChronology2.yearOfEra();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "GJChronology[+00:00:00.052]" + "'", str6, "GJChronology[+00:00:00.052]");
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
    }

    @Test
    public void test19406() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19406");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = gJChronology2.halfdays();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.millisOfDay();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.minuteOfDay();
        org.joda.time.DurationField durationField6 = gJChronology2.centuries();
        int int7 = gJChronology2.getMinimumDaysInFirstWeek();
        org.joda.time.DateTimeField dateTimeField8 = gJChronology2.weekyear();
        org.joda.time.DateTimeField dateTimeField9 = gJChronology2.weekyearOfCentury();
        org.joda.time.DurationField durationField10 = gJChronology2.halfdays();
        org.joda.time.DateTimeField dateTimeField11 = gJChronology2.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField12 = gJChronology2.dayOfYear();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 4 + "'", int7 == 4);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
    }

    @Test
    public void test19407() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19407");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = gJChronology2.halfdays();
        long long7 = gJChronology2.add((long) 'a', (-1L), (int) (short) 0);
        long long11 = gJChronology2.add((long) (byte) 0, (long) '4', 100);
        org.joda.time.DateTimeField dateTimeField12 = gJChronology2.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField13 = gJChronology2.year();
        org.joda.time.DateTimeField dateTimeField14 = gJChronology2.monthOfYear();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology2.year();
        org.joda.time.Chronology chronology16 = gJChronology2.withUTC();
        org.joda.time.DurationField durationField17 = gJChronology2.hours();
        org.joda.time.DateTimeField dateTimeField18 = gJChronology2.clockhourOfDay();
        org.joda.time.DurationField durationField19 = gJChronology2.weekyears();
        org.joda.time.DurationField durationField20 = gJChronology2.minutes();
        long long23 = durationField20.subtract(111000097L, (-718));
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 97L + "'", long7 == 97L);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 5200L + "'", long11 == 5200L);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 154080097L + "'", long23 == 154080097L);
    }

    @Test
    public void test19408() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19408");
        java.util.Locale.Category category0 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale1 = java.util.Locale.CANADA;
        java.lang.String str2 = locale1.getISO3Language();
        java.util.Locale.setDefault(category0, locale1);
        java.util.Locale locale5 = java.util.Locale.forLanguageTag("halfdays");
        boolean boolean6 = locale5.hasExtensions();
        java.util.Set<java.lang.Character> charSet7 = locale5.getExtensionKeys();
        java.util.Locale.setDefault(category0, locale5);
        java.util.Locale locale10 = new java.util.Locale("hi!");
        java.lang.String str11 = locale10.getCountry();
        java.util.Locale locale12 = java.util.Locale.getDefault();
        java.lang.String str13 = locale12.getDisplayName();
        java.lang.String str14 = locale10.getDisplayScript(locale12);
        java.util.Set<java.lang.Character> charSet15 = locale12.getExtensionKeys();
        java.util.Locale.setDefault(category0, locale12);
        java.util.Locale locale17 = java.util.Locale.getDefault(category0);
        java.util.Locale locale18 = java.util.Locale.getDefault(category0);
        java.lang.String str19 = locale18.getCountry();
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category0.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "eng" + "'", str2, "eng");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "halfdays");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(charSet7);
        org.junit.Assert.assertEquals(locale10.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "English (Canada)" + "'", str13, "English (Canada)");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(charSet15);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "CA" + "'", str19, "CA");
    }

    @Test
    public void test19409() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19409");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = gJChronology2.halfdays();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.millisOfDay();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.minuteOfDay();
        org.joda.time.DurationField durationField6 = gJChronology2.centuries();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology2.dayOfYear();
        java.lang.String str8 = gJChronology2.toString();
        org.joda.time.DateTimeField dateTimeField9 = gJChronology2.dayOfYear();
        org.joda.time.DateTimeField dateTimeField10 = gJChronology2.dayOfMonth();
        org.joda.time.DurationField durationField11 = gJChronology2.years();
        org.joda.time.DateTimeField dateTimeField12 = gJChronology2.yearOfEra();
        org.joda.time.DateTimeField dateTimeField13 = gJChronology2.secondOfMinute();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "GJChronology[+00:00:00.052]" + "'", str8, "GJChronology[+00:00:00.052]");
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
    }

    @Test
    public void test19410() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19410");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = gJChronology2.halfdays();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.millisOfDay();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.secondOfMinute();
        org.joda.time.DurationField durationField6 = gJChronology2.weekyears();
        java.lang.String str7 = gJChronology2.toString();
        org.joda.time.DurationField durationField8 = gJChronology2.seconds();
        long long10 = durationField8.getValueAsLong(604800052L);
        java.util.TimeZone timeZone11 = null;
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forTimeZone(timeZone11);
        org.joda.time.chrono.GJChronology gJChronology13 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone12);
        org.joda.time.DurationField durationField14 = gJChronology13.halfdays();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology13.millisOfDay();
        org.joda.time.DateTimeField dateTimeField16 = gJChronology13.minuteOfDay();
        org.joda.time.DurationField durationField17 = gJChronology13.centuries();
        org.joda.time.DateTimeField dateTimeField18 = gJChronology13.dayOfYear();
        java.lang.String str19 = gJChronology13.toString();
        org.joda.time.DateTimeField dateTimeField20 = gJChronology13.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone21 = gJChronology13.getZone();
        org.joda.time.chrono.GJChronology gJChronology22 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone21);
        org.joda.time.DateTimeField dateTimeField23 = gJChronology22.clockhourOfDay();
        org.joda.time.DurationField durationField24 = gJChronology22.centuries();
        org.joda.time.DurationField durationField25 = gJChronology22.months();
        boolean boolean26 = durationField25.isPrecise();
        int int27 = durationField8.compareTo(durationField25);
        long long30 = durationField25.subtract(220870496998333L, (-10006816));
        long long33 = durationField25.add(259200006000052L, (-69));
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(durationField6);
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "GJChronology[+00:00:00.052]" + "'", str7, "GJChronology[+00:00:00.052]");
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 604800L + "'", long10 == 604800L);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(gJChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
// flaky:         org.junit.Assert.assertEquals("'" + str19 + "' != '" + "GJChronology[+00:00:00.052]" + "'", str19, "GJChronology[+00:00:00.052]");
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(gJChronology22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 26536254695398333L + "'", long30 == 26536254695398333L);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 259018566000052L + "'", long33 == 259018566000052L);
    }

    @Test
    public void test19411() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19411");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap1 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.Locale.LanguageRange> languageRangeList2 = java.util.Locale.LanguageRange.parse("2022-02-11t09:43:44.107z", strMap1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=2022-02-11t09:43:44.107z");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test19412() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19412");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField3 = gJChronology2.millisOfSecond();
        org.joda.time.DurationField durationField4 = gJChronology2.millis();
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        long long8 = gJChronology2.add(readablePeriod5, (long) 'a', (int) '4');
        org.joda.time.DateTimeField dateTimeField9 = gJChronology2.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField10 = gJChronology2.dayOfYear();
        org.joda.time.DateTimeField dateTimeField11 = gJChronology2.hourOfDay();
        org.joda.time.DateTimeField dateTimeField12 = gJChronology2.yearOfEra();
        org.joda.time.DurationField durationField13 = gJChronology2.years();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis((int) '4');
        java.util.TimeZone timeZone16 = dateTimeZone15.toTimeZone();
        long long19 = dateTimeZone15.adjustOffset((long) 0, false);
        long long21 = dateTimeZone15.previousTransition((-186624002289594748L));
        org.joda.time.Chronology chronology22 = gJChronology2.withZone(dateTimeZone15);
        org.joda.time.DateTimeField dateTimeField23 = gJChronology2.minuteOfHour();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 97L + "'", long8 == 97L);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(timeZone16);
        org.junit.Assert.assertEquals(timeZone16.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + (-186624002289594748L) + "'", long21 == (-186624002289594748L));
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateTimeField23);
    }

    @Test
    public void test19413() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19413");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clear();
        java.util.Locale.Builder builder3 = builder1.removeUnicodeLocaleAttribute("und");
        java.util.Locale.Builder builder4 = builder3.clearExtensions();
        java.util.Locale.Builder builder6 = builder4.setLanguage("de");
        java.util.Locale locale7 = java.util.Locale.FRENCH;
        java.util.Locale locale8 = java.util.Locale.ITALIAN;
        java.util.Locale locale9 = locale8.stripExtensions();
        java.util.Locale locale10 = java.util.Locale.CANADA;
        java.lang.String str11 = locale8.getDisplayVariant(locale10);
        java.lang.String str12 = locale7.getDisplayScript(locale8);
        java.util.Set<java.lang.Character> charSet13 = locale8.getExtensionKeys();
        java.util.Locale.Builder builder14 = builder4.setLocale(locale8);
        java.util.Locale locale15 = builder14.build();
        java.util.Locale locale17 = java.util.Locale.forLanguageTag("hi!");
        java.lang.String str18 = locale17.toLanguageTag();
        java.lang.String str19 = locale17.getCountry();
        java.util.Locale locale21 = java.util.Locale.forLanguageTag("");
        java.util.TimeZone timeZone22 = null;
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        org.joda.time.chrono.GJChronology gJChronology24 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone23);
        org.joda.time.DurationField durationField25 = gJChronology24.halfdays();
        org.joda.time.DateTimeField dateTimeField26 = gJChronology24.millisOfDay();
        org.joda.time.DateTimeField dateTimeField27 = gJChronology24.minuteOfDay();
        org.joda.time.DurationField durationField28 = gJChronology24.centuries();
        org.joda.time.DateTimeField dateTimeField29 = gJChronology24.halfdayOfDay();
        java.util.Locale locale30 = java.util.Locale.ITALIAN;
        java.util.Locale locale31 = locale30.stripExtensions();
        java.util.Locale locale32 = java.util.Locale.CANADA;
        java.lang.String str33 = locale30.getDisplayVariant(locale32);
        boolean boolean34 = gJChronology24.equals((java.lang.Object) locale32);
        java.lang.String str35 = locale21.getDisplayLanguage(locale32);
        java.lang.String str37 = locale32.getUnicodeLocaleType("en");
        java.lang.String str38 = locale17.getDisplayName(locale32);
        java.lang.String str39 = locale32.getISO3Country();
        java.util.Locale.setDefault(locale32);
        java.lang.String str41 = locale15.getDisplayVariant(locale32);
        java.util.TimeZone timeZone42 = null;
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.forTimeZone(timeZone42);
        org.joda.time.chrono.GJChronology gJChronology44 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone43);
        org.joda.time.DurationField durationField45 = gJChronology44.years();
        java.util.TimeZone timeZone46 = null;
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.forTimeZone(timeZone46);
        org.joda.time.chrono.GJChronology gJChronology48 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone47);
        org.joda.time.DurationField durationField49 = gJChronology48.halfdays();
        org.joda.time.DateTimeField dateTimeField50 = gJChronology48.millisOfDay();
        org.joda.time.DateTimeField dateTimeField51 = gJChronology48.minuteOfDay();
        org.joda.time.DurationField durationField52 = gJChronology48.centuries();
        java.util.TimeZone timeZone53 = null;
        org.joda.time.DateTimeZone dateTimeZone54 = org.joda.time.DateTimeZone.forTimeZone(timeZone53);
        org.joda.time.chrono.GJChronology gJChronology55 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone54);
        org.joda.time.DurationField durationField56 = gJChronology55.halfdays();
        long long59 = durationField56.add((long) 100, 100L);
        boolean boolean60 = durationField56.isPrecise();
        int int61 = durationField52.compareTo(durationField56);
        boolean boolean62 = gJChronology44.equals((java.lang.Object) durationField52);
        org.joda.time.DateTimeField dateTimeField63 = gJChronology44.dayOfYear();
        org.joda.time.DateTimeField dateTimeField64 = gJChronology44.clockhourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone65 = gJChronology44.getZone();
        java.util.TimeZone timeZone67 = null;
        org.joda.time.DateTimeZone dateTimeZone68 = org.joda.time.DateTimeZone.forTimeZone(timeZone67);
        org.joda.time.chrono.GJChronology gJChronology69 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone68);
        int int71 = dateTimeZone68.getOffsetFromLocal((long) (-1));
        boolean boolean72 = dateTimeZone68.isFixed();
        java.util.TimeZone timeZone73 = null;
        org.joda.time.DateTimeZone dateTimeZone74 = org.joda.time.DateTimeZone.forTimeZone(timeZone73);
        org.joda.time.chrono.GJChronology gJChronology75 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone74);
        org.joda.time.DurationField durationField76 = gJChronology75.halfdays();
        org.joda.time.DateTimeField dateTimeField77 = gJChronology75.millisOfDay();
        org.joda.time.DateTimeField dateTimeField78 = gJChronology75.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField79 = gJChronology75.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField80 = gJChronology75.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone81 = gJChronology75.getZone();
        long long83 = dateTimeZone68.getMillisKeepLocal(dateTimeZone81, 186641343849600000L);
        java.util.Locale locale85 = java.util.Locale.ITALIAN;
        java.util.Locale locale86 = locale85.stripExtensions();
        java.util.Locale locale87 = java.util.Locale.CANADA;
        java.lang.String str88 = locale85.getDisplayVariant(locale87);
        java.lang.String str89 = locale87.getDisplayLanguage();
        java.lang.String str90 = dateTimeZone68.getName((-99L), locale87);
        java.lang.String str91 = dateTimeZone65.getShortName(86400000L, locale87);
        java.lang.String str92 = locale87.getISO3Language();
        java.lang.String str93 = locale32.getDisplayLanguage(locale87);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "fr");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "it");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "it");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(charSet13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "it");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "und" + "'", str18, "und");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "");
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(gJChronology24);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "it");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "it");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "CAN" + "'", str39, "CAN");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertNotNull(dateTimeZone43);
        org.junit.Assert.assertNotNull(gJChronology44);
        org.junit.Assert.assertNotNull(durationField45);
        org.junit.Assert.assertNotNull(dateTimeZone47);
        org.junit.Assert.assertNotNull(gJChronology48);
        org.junit.Assert.assertNotNull(durationField49);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(durationField52);
        org.junit.Assert.assertNotNull(dateTimeZone54);
        org.junit.Assert.assertNotNull(gJChronology55);
        org.junit.Assert.assertNotNull(durationField56);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 4320000100L + "'", long59 == 4320000100L);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(dateTimeField63);
        org.junit.Assert.assertNotNull(dateTimeField64);
        org.junit.Assert.assertNotNull(dateTimeZone65);
        org.junit.Assert.assertNotNull(dateTimeZone68);
        org.junit.Assert.assertNotNull(gJChronology69);
// flaky:         org.junit.Assert.assertTrue("'" + int71 + "' != '" + 52 + "'", int71 == 52);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(dateTimeZone74);
        org.junit.Assert.assertNotNull(gJChronology75);
        org.junit.Assert.assertNotNull(durationField76);
        org.junit.Assert.assertNotNull(dateTimeField77);
        org.junit.Assert.assertNotNull(dateTimeField78);
        org.junit.Assert.assertNotNull(dateTimeField79);
        org.junit.Assert.assertNotNull(dateTimeField80);
        org.junit.Assert.assertNotNull(dateTimeZone81);
        org.junit.Assert.assertTrue("'" + long83 + "' != '" + 186641343849600000L + "'", long83 == 186641343849600000L);
        org.junit.Assert.assertNotNull(locale85);
        org.junit.Assert.assertEquals(locale85.toString(), "it");
        org.junit.Assert.assertNotNull(locale86);
        org.junit.Assert.assertEquals(locale86.toString(), "it");
        org.junit.Assert.assertNotNull(locale87);
        org.junit.Assert.assertEquals(locale87.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "" + "'", str88, "");
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "English" + "'", str89, "English");
// flaky:         org.junit.Assert.assertEquals("'" + str90 + "' != '" + "+00:00:00.052" + "'", str90, "+00:00:00.052");
// flaky:         org.junit.Assert.assertEquals("'" + str91 + "' != '" + "+00:00:00.052" + "'", str91, "+00:00:00.052");
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "eng" + "'", str92, "eng");
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "English" + "'", str93, "English");
    }

    @Test
    public void test19414() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19414");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forTimeZone(timeZone2);
        org.joda.time.chrono.GJChronology gJChronology4 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone3);
        org.joda.time.DateTimeField dateTimeField5 = gJChronology4.millisOfSecond();
        int int6 = instant1.get(dateTimeField5);
        boolean boolean7 = instant1.isEqualNow();
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.Instant instant10 = instant1.withDurationAdded(readableDuration8, (int) (short) 0);
        org.joda.time.Instant instant12 = instant1.plus(35000L);
        long long13 = instant12.getMillis();
        java.util.TimeZone timeZone14 = null;
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forTimeZone(timeZone14);
        org.joda.time.chrono.GJChronology gJChronology16 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone15);
        org.joda.time.DurationField durationField17 = gJChronology16.halfdays();
        long long21 = gJChronology16.add((long) 'a', (-1L), (int) (short) 0);
        long long25 = gJChronology16.add((long) (byte) 0, (long) '4', 100);
        org.joda.time.DateTimeField dateTimeField26 = gJChronology16.minuteOfHour();
        org.joda.time.DurationField durationField27 = gJChronology16.hours();
        org.joda.time.DateTimeField dateTimeField28 = gJChronology16.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField29 = gJChronology16.millisOfSecond();
        org.joda.time.DurationField durationField30 = gJChronology16.months();
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.forOffsetMillis((int) '4');
        java.util.TimeZone timeZone33 = dateTimeZone32.toTimeZone();
        long long36 = dateTimeZone32.adjustOffset((long) 0, false);
        int int38 = dateTimeZone32.getOffsetFromLocal((-26438399999L));
        long long40 = dateTimeZone32.previousTransition((long) (byte) 1);
        java.lang.String str41 = dateTimeZone32.getID();
        org.joda.time.LocalDateTime localDateTime42 = null;
        boolean boolean43 = dateTimeZone32.isLocalDateTimeGap(localDateTime42);
        java.util.Locale locale46 = new java.util.Locale("hi!");
        java.lang.String str47 = locale46.getCountry();
        java.lang.String str48 = locale46.getCountry();
        java.lang.String str49 = dateTimeZone32.getName(747221760000000000L, locale46);
        org.joda.time.Chronology chronology50 = gJChronology16.withZone(dateTimeZone32);
        org.joda.time.DurationField durationField51 = gJChronology16.weeks();
        org.joda.time.DateTime dateTime52 = instant12.toDateTime((org.joda.time.Chronology) gJChronology16);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(gJChronology4);
        org.junit.Assert.assertNotNull(dateTimeField5);
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 104 + "'", int6 == 104);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(instant10);
        org.junit.Assert.assertNotNull(instant12);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 35052L + "'", long13 == 35052L);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(gJChronology16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 97L + "'", long21 == 97L);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 5200L + "'", long25 == 5200L);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertNotNull(timeZone33);
        org.junit.Assert.assertEquals(timeZone33.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 52 + "'", int38 == 52);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 1L + "'", long40 == 1L);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "+00:00:00.052" + "'", str41, "+00:00:00.052");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertEquals(locale46.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "+00:00:00.052" + "'", str49, "+00:00:00.052");
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertNotNull(durationField51);
        org.junit.Assert.assertNotNull(dateTime52);
    }

    @Test
    public void test19415() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19415");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = gJChronology2.halfdays();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.millisOfDay();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.minuteOfDay();
        org.joda.time.DurationField durationField6 = gJChronology2.centuries();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology2.dayOfYear();
        java.lang.String str8 = gJChronology2.toString();
        org.joda.time.DateTimeField dateTimeField9 = gJChronology2.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone10 = gJChronology2.getZone();
        java.util.TimeZone timeZone11 = null;
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forTimeZone(timeZone11);
        org.joda.time.chrono.GJChronology gJChronology13 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone12);
        java.util.Locale locale15 = new java.util.Locale("hi!");
        java.lang.String str16 = locale15.getCountry();
        java.util.Locale locale17 = java.util.Locale.getDefault();
        java.lang.String str18 = locale17.getDisplayName();
        java.lang.String str19 = locale15.getDisplayScript(locale17);
        boolean boolean20 = dateTimeZone12.equals((java.lang.Object) locale17);
        org.joda.time.Chronology chronology21 = gJChronology2.withZone(dateTimeZone12);
        org.joda.time.DateTimeField dateTimeField22 = gJChronology2.secondOfDay();
        org.joda.time.DateTimeField dateTimeField23 = gJChronology2.minuteOfHour();
        org.joda.time.DurationField durationField24 = gJChronology2.weeks();
        org.joda.time.DateTimeZone dateTimeZone25 = gJChronology2.getZone();
        java.lang.String str27 = dateTimeZone25.getName(600393600000L);
        java.lang.String str29 = dateTimeZone25.getNameKey(0L);
        long long32 = dateTimeZone25.adjustOffset((-2555032895998131L), false);
        long long36 = dateTimeZone25.convertLocalToUTC(262978799880000L, false, (long) 46);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone25);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "GJChronology[+00:00:00.052]" + "'", str8, "GJChronology[+00:00:00.052]");
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(gJChronology13);
        org.junit.Assert.assertEquals(locale15.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "English (Canada)" + "'", str18, "English (Canada)");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertNotNull(dateTimeZone25);
// flaky:         org.junit.Assert.assertEquals("'" + str27 + "' != '" + "+00:00:00.052" + "'", str27, "+00:00:00.052");
// flaky:         org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + (-2555032895998131L) + "'", long32 == (-2555032895998131L));
// flaky:         org.junit.Assert.assertTrue("'" + long36 + "' != '" + 262978799879948L + "'", long36 == 262978799879948L);
    }

    @Test
    public void test19416() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19416");
        java.util.Locale.Category category0 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale1 = java.util.Locale.CANADA;
        java.lang.String str2 = locale1.getISO3Language();
        java.util.Locale.setDefault(category0, locale1);
        java.util.Locale locale6 = new java.util.Locale("DurationField[halfdays]", "\u82f1\u6587");
        java.util.Set<java.lang.Character> charSet7 = locale6.getExtensionKeys();
        java.util.Locale.Builder builder8 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder9 = builder8.clear();
        java.util.Locale.Builder builder11 = builder9.removeUnicodeLocaleAttribute("und");
        java.util.Locale locale12 = java.util.Locale.CHINESE;
        boolean boolean13 = locale12.hasExtensions();
        java.util.Locale.Builder builder14 = builder9.setLocale(locale12);
        java.lang.String str16 = locale12.getExtension('u');
        java.lang.String str17 = locale6.getDisplayName(locale12);
        java.util.Locale.setDefault(category0, locale12);
        java.util.Locale locale22 = new java.util.Locale("en_US", "\u610f\u5927\u5229\u6587", "x-lvariant-ja");
        java.util.Locale.setDefault(category0, locale22);
        java.util.Locale.Builder builder24 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder25 = builder24.clear();
        java.util.Locale.Builder builder26 = builder24.clearExtensions();
        java.util.Locale.Builder builder28 = builder24.setVariant("halfdays");
        java.util.Locale.Builder builder30 = builder24.setScript("");
        java.util.Locale.Builder builder31 = builder24.clearExtensions();
        java.util.Locale.Builder builder33 = builder24.setRegion("CN");
        java.util.Locale.Builder builder34 = builder24.clear();
        java.util.Locale.Builder builder36 = builder24.addUnicodeLocaleAttribute("und");
        java.util.Locale.Builder builder38 = builder36.setVariant("French");
        java.util.Locale locale39 = builder38.build();
        java.util.Set<java.lang.String> strSet40 = locale39.getUnicodeLocaleKeys();
        java.lang.String str41 = locale39.getDisplayScript();
        java.util.Locale.setDefault(category0, locale39);
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category0.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "eng" + "'", str2, "eng");
// flaky:         org.junit.Assert.assertEquals(locale6.toString(), "\u82f1\u6587");
        org.junit.Assert.assertNotNull(charSet7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "zh");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNull(str16);
// flaky:         org.junit.Assert.assertEquals("'" + str17 + "' != '" + "\u82f1\u6587)" + "'", str17, "\u82f1\u6587)");
// flaky:         org.junit.Assert.assertEquals(locale22.toString(), "\u610f\u5927\u5229\u6587_x-lvariant-ja");
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "");
        org.junit.Assert.assertNotNull(strSet40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
    }

    @Test
    public void test19417() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19417");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        java.util.Locale locale4 = new java.util.Locale("hi!");
        java.lang.String str5 = locale4.getCountry();
        java.util.Locale locale6 = java.util.Locale.getDefault();
        java.lang.String str7 = locale6.getDisplayName();
        java.lang.String str8 = locale4.getDisplayScript(locale6);
        boolean boolean9 = dateTimeZone1.equals((java.lang.Object) locale6);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetMillis((int) '4');
        java.util.TimeZone timeZone12 = dateTimeZone11.toTimeZone();
        long long15 = dateTimeZone11.adjustOffset((long) 0, false);
        int int17 = dateTimeZone11.getOffsetFromLocal((-26438399999L));
        long long19 = dateTimeZone1.getMillisKeepLocal(dateTimeZone11, (long) (byte) 10);
        org.joda.time.chrono.GJChronology gJChronology20 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone11);
        org.joda.time.DateTimeField dateTimeField21 = gJChronology20.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField22 = gJChronology20.millisOfSecond();
        org.joda.time.DurationField durationField23 = gJChronology20.minutes();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertEquals(locale4.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "English (Canada)" + "'", str7, "English (Canada)");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(timeZone12);
        org.junit.Assert.assertEquals(timeZone12.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 52 + "'", int17 == 52);
// flaky:         org.junit.Assert.assertTrue("'" + long19 + "' != '" + 10L + "'", long19 == 10L);
        org.junit.Assert.assertNotNull(gJChronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(durationField23);
    }

    @Test
    public void test19418() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19418");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forTimeZone(timeZone2);
        org.joda.time.chrono.GJChronology gJChronology4 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone3);
        org.joda.time.DateTimeField dateTimeField5 = gJChronology4.millisOfSecond();
        int int6 = instant1.get(dateTimeField5);
        org.joda.time.Instant instant8 = instant1.plus(0L);
        java.util.TimeZone timeZone9 = null;
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forTimeZone(timeZone9);
        org.joda.time.chrono.GJChronology gJChronology11 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone10);
        org.joda.time.DurationField durationField12 = gJChronology11.halfdays();
        org.joda.time.Chronology chronology13 = gJChronology11.withUTC();
        java.lang.String str14 = gJChronology11.toString();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology11.hourOfHalfday();
        int int16 = instant1.get(dateTimeField15);
        java.util.TimeZone timeZone17 = null;
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forTimeZone(timeZone17);
        org.joda.time.chrono.GJChronology gJChronology19 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone18);
        org.joda.time.DurationField durationField20 = gJChronology19.halfdays();
        long long24 = gJChronology19.add((long) 'a', (-1L), (int) (short) 0);
        org.joda.time.DateTimeField dateTimeField25 = gJChronology19.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField26 = gJChronology19.secondOfMinute();
        org.joda.time.Instant instant28 = new org.joda.time.Instant(52L);
        boolean boolean29 = instant28.isEqualNow();
        org.joda.time.ReadableDuration readableDuration30 = null;
        org.joda.time.Instant instant31 = instant28.plus(readableDuration30);
        boolean boolean32 = gJChronology19.equals((java.lang.Object) instant28);
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = null;
        boolean boolean34 = instant28.isSupported(dateTimeFieldType33);
        org.joda.time.DateTimeFieldType dateTimeFieldType35 = null;
        boolean boolean36 = instant28.isSupported(dateTimeFieldType35);
        org.joda.time.DateTimeZone dateTimeZone37 = instant28.getZone();
        boolean boolean38 = instant1.isAfter((org.joda.time.ReadableInstant) instant28);
        org.joda.time.Instant instant39 = instant1.toInstant();
        org.joda.time.ReadableDuration readableDuration40 = null;
        org.joda.time.Instant instant41 = instant39.minus(readableDuration40);
        java.util.TimeZone timeZone42 = null;
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.forTimeZone(timeZone42);
        org.joda.time.chrono.GJChronology gJChronology44 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone43);
        org.joda.time.DurationField durationField45 = gJChronology44.halfdays();
        long long49 = gJChronology44.add((long) 'a', (-1L), (int) (short) 0);
        boolean boolean51 = gJChronology44.equals((java.lang.Object) 0);
        org.joda.time.DateTimeField dateTimeField52 = gJChronology44.dayOfMonth();
        org.joda.time.DurationField durationField53 = gJChronology44.days();
        long long57 = gJChronology44.add((long) '4', 432000000L, (int) (short) 0);
        org.joda.time.DurationField durationField58 = gJChronology44.minutes();
        org.joda.time.DateTimeField dateTimeField59 = gJChronology44.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField60 = gJChronology44.hourOfHalfday();
        org.joda.time.DurationField durationField61 = gJChronology44.minutes();
        org.joda.time.DateTime dateTime62 = instant39.toDateTime((org.joda.time.Chronology) gJChronology44);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(gJChronology4);
        org.junit.Assert.assertNotNull(dateTimeField5);
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 104 + "'", int6 == 104);
        org.junit.Assert.assertNotNull(instant8);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(gJChronology11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(chronology13);
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "GJChronology[+00:00:00.052]" + "'", str14, "GJChronology[+00:00:00.052]");
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(gJChronology19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 97L + "'", long24 == 97L);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(instant31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(instant39);
        org.junit.Assert.assertNotNull(instant41);
        org.junit.Assert.assertNotNull(dateTimeZone43);
        org.junit.Assert.assertNotNull(gJChronology44);
        org.junit.Assert.assertNotNull(durationField45);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 97L + "'", long49 == 97L);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(durationField53);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 52L + "'", long57 == 52L);
        org.junit.Assert.assertNotNull(durationField58);
        org.junit.Assert.assertNotNull(dateTimeField59);
        org.junit.Assert.assertNotNull(dateTimeField60);
        org.junit.Assert.assertNotNull(durationField61);
        org.junit.Assert.assertNotNull(dateTime62);
    }

    @Test
    public void test19419() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19419");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clear();
        java.util.Locale.Builder builder2 = builder0.clearExtensions();
        java.util.Locale.Builder builder4 = builder0.setVariant("halfdays");
        java.util.Locale.Builder builder6 = builder0.setScript("");
        java.util.Locale.Builder builder7 = builder0.clearExtensions();
        java.util.Locale.Builder builder9 = builder0.setRegion("CN");
        java.util.Locale.Builder builder11 = builder0.setRegion("CN");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder13 = builder11.addUnicodeLocaleAttribute("2022-02-11T09:50:55.575Z");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute: 2022-02-11T09:50:55.575Z [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
    }

    @Test
    public void test19420() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19420");
        java.util.Locale locale0 = java.util.Locale.JAPAN;
        boolean boolean1 = locale0.hasExtensions();
        java.lang.String str2 = locale0.getCountry();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str4 = locale0.getExtension('4');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Ill-formed extension key: 4");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ja_JP");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "JP" + "'", str2, "JP");
    }

    @Test
    public void test19421() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19421");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = gJChronology2.halfdays();
        long long7 = gJChronology2.add((long) 'a', (-1L), (int) (short) 0);
        org.joda.time.DateTimeField dateTimeField8 = gJChronology2.halfdayOfDay();
        org.joda.time.Chronology chronology9 = gJChronology2.withUTC();
        org.joda.time.Chronology chronology10 = chronology9.withUTC();
        org.joda.time.Chronology chronology11 = chronology9.withUTC();
        org.joda.time.DateTimeField dateTimeField12 = chronology11.minuteOfDay();
        org.joda.time.DurationField durationField13 = chronology11.weekyears();
        // The following exception was thrown during execution in test generation
        try {
            long long16 = durationField13.add((-13125348978L), 1640995200000L);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Value cannot fit in an int: 1640995200000");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 97L + "'", long7 == 97L);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField13);
    }

    @Test
    public void test19422() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19422");
        java.util.Locale.Category category0 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale1 = java.util.Locale.getDefault();
        boolean boolean2 = locale1.hasExtensions();
        java.lang.String str3 = locale1.getISO3Language();
        java.util.Locale.setDefault(category0, locale1);
        java.util.Locale locale5 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale6 = java.util.Locale.ENGLISH;
        java.lang.String str7 = locale5.getDisplayLanguage(locale6);
        java.util.Locale locale8 = java.util.Locale.CANADA;
        java.lang.String str9 = locale8.getISO3Language();
        java.lang.String str10 = locale5.getDisplayVariant(locale8);
        java.lang.String str11 = locale5.getDisplayName();
        java.util.Locale.setDefault(category0, locale5);
        java.util.Locale locale13 = java.util.Locale.getDefault(category0);
        java.util.Locale locale14 = java.util.Locale.getDefault(category0);
        java.util.Locale locale15 = java.util.Locale.ENGLISH;
        java.lang.String str16 = locale15.getDisplayScript();
        java.lang.String str17 = locale15.getDisplayVariant();
        java.util.Locale.setDefault(category0, locale15);
        java.util.Locale locale19 = java.util.Locale.getDefault(category0);
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category0.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "en_CA");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "eng" + "'", str3, "eng");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "en");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Chinese" + "'", str7, "Chinese");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "eng" + "'", str9, "eng");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Chinese (Taiwan)" + "'", str11, "Chinese (Taiwan)");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "en");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "en");
    }

    @Test
    public void test19423() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19423");
        java.util.Locale locale0 = java.util.Locale.CHINA;
        org.joda.time.Instant instant2 = new org.joda.time.Instant(52L);
        boolean boolean3 = instant2.isEqualNow();
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Instant instant5 = instant2.plus(readableDuration4);
        org.joda.time.Instant instant7 = new org.joda.time.Instant(52L);
        org.joda.time.Instant instant9 = instant7.withMillis((long) 'u');
        boolean boolean10 = instant2.isBefore((org.joda.time.ReadableInstant) instant7);
        org.joda.time.DateTimeZone dateTimeZone11 = instant7.getZone();
        java.util.TimeZone timeZone12 = null;
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forTimeZone(timeZone12);
        org.joda.time.chrono.GJChronology gJChronology14 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone13);
        org.joda.time.DateTimeField dateTimeField15 = gJChronology14.era();
        org.joda.time.DateTimeField dateTimeField16 = gJChronology14.era();
        java.util.TimeZone timeZone17 = null;
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forTimeZone(timeZone17);
        java.lang.String str20 = dateTimeZone18.getNameKey((long) 100);
        boolean boolean21 = dateTimeZone18.isFixed();
        java.util.Locale locale25 = new java.util.Locale("DurationField[halfdays]", "\u82f1\u6587");
        java.lang.String str26 = dateTimeZone18.getName((long) (short) 10, locale25);
        org.joda.time.Instant instant28 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone29 = null;
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forTimeZone(timeZone29);
        org.joda.time.chrono.GJChronology gJChronology31 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone30);
        org.joda.time.DateTimeField dateTimeField32 = gJChronology31.millisOfSecond();
        int int33 = instant28.get(dateTimeField32);
        org.joda.time.Chronology chronology34 = instant28.getChronology();
        org.joda.time.chrono.GJChronology gJChronology35 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone18, (org.joda.time.ReadableInstant) instant28);
        boolean boolean36 = dateTimeZone18.isFixed();
        org.joda.time.Chronology chronology37 = gJChronology14.withZone(dateTimeZone18);
        long long39 = dateTimeZone11.getMillisKeepLocal(dateTimeZone18, (-31535940000L));
        java.util.Locale locale43 = new java.util.Locale("UTC", "zh_TW");
        java.util.Locale locale44 = java.util.Locale.CHINESE;
        boolean boolean45 = locale44.hasExtensions();
        java.util.Locale.setDefault(locale44);
        java.lang.String str47 = locale43.getDisplayLanguage(locale44);
        java.util.Set<java.lang.String> strSet48 = locale43.getUnicodeLocaleAttributes();
        java.util.Locale locale49 = java.util.Locale.getDefault();
        java.lang.String str50 = locale49.getDisplayName();
        java.util.Locale locale51 = java.util.Locale.CHINESE;
        boolean boolean52 = locale51.hasExtensions();
        java.util.Locale.setDefault(locale51);
        java.lang.String str54 = locale51.getCountry();
        java.lang.String str55 = locale49.getDisplayScript(locale51);
        java.lang.String str56 = locale43.getDisplayCountry(locale49);
        java.lang.String str57 = dateTimeZone18.getShortName(1136276729856000000L, locale43);
        java.lang.String str58 = locale0.getDisplayName(locale43);
        java.lang.String str59 = locale0.getScript();
        java.util.TimeZone timeZone60 = null;
        org.joda.time.DateTimeZone dateTimeZone61 = org.joda.time.DateTimeZone.forTimeZone(timeZone60);
        int int63 = dateTimeZone61.getOffsetFromLocal((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone66 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(0, (int) (short) 10);
        long long68 = dateTimeZone61.getMillisKeepLocal(dateTimeZone66, (-61827926399999L));
        java.util.TimeZone timeZone69 = dateTimeZone66.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone70 = org.joda.time.DateTimeZone.forTimeZone(timeZone69);
        boolean boolean71 = locale0.equals((java.lang.Object) dateTimeZone70);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_CN");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(instant5);
        org.junit.Assert.assertNotNull(instant9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(gJChronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeZone18);
// flaky:         org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
// flaky:         org.junit.Assert.assertEquals(locale25.toString(), "\u82f1\u6587");
// flaky:         org.junit.Assert.assertEquals("'" + str26 + "' != '" + "+00:00:00.052" + "'", str26, "+00:00:00.052");
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertNotNull(gJChronology31);
        org.junit.Assert.assertNotNull(dateTimeField32);
// flaky:         org.junit.Assert.assertTrue("'" + int33 + "' != '" + 104 + "'", int33 == 104);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(gJChronology35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(chronology37);
// flaky:         org.junit.Assert.assertTrue("'" + long39 + "' != '" + (-31535940052L) + "'", long39 == (-31535940052L));
        org.junit.Assert.assertEquals(locale43.toString(), "utc_ZH_TW");
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "zh");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "utc" + "'", str47, "utc");
        org.junit.Assert.assertNotNull(strSet48);
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "\u4e2d\u6587" + "'", str50, "\u4e2d\u6587");
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "zh");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "ZH_TW" + "'", str56, "ZH_TW");
// flaky:         org.junit.Assert.assertEquals("'" + str57 + "' != '" + "+00:00:00.052" + "'", str57, "+00:00:00.052");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "Chinese (China)" + "'", str58, "Chinese (China)");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertNotNull(dateTimeZone61);
// flaky:         org.junit.Assert.assertTrue("'" + int63 + "' != '" + 52 + "'", int63 == 52);
        org.junit.Assert.assertNotNull(dateTimeZone66);
// flaky:         org.junit.Assert.assertTrue("'" + long68 + "' != '" + (-61827926999947L) + "'", long68 == (-61827926999947L));
        org.junit.Assert.assertNotNull(timeZone69);
        org.junit.Assert.assertEquals(timeZone69.getDisplayName(), "GMT+00:10");
        org.junit.Assert.assertNotNull(dateTimeZone70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
    }

    @Test
    public void test19424() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19424");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str3 = dateTimeZone1.getNameKey((long) 100);
        boolean boolean4 = dateTimeZone1.isFixed();
        java.util.Locale locale8 = new java.util.Locale("DurationField[halfdays]", "\u82f1\u6587");
        java.lang.String str9 = dateTimeZone1.getName((long) (short) 10, locale8);
        org.joda.time.Instant instant11 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone12 = null;
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forTimeZone(timeZone12);
        org.joda.time.chrono.GJChronology gJChronology14 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone13);
        org.joda.time.DateTimeField dateTimeField15 = gJChronology14.millisOfSecond();
        int int16 = instant11.get(dateTimeField15);
        org.joda.time.Chronology chronology17 = instant11.getChronology();
        org.joda.time.chrono.GJChronology gJChronology18 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1, (org.joda.time.ReadableInstant) instant11);
        long long19 = instant11.getMillis();
        org.joda.time.ReadableDuration readableDuration20 = null;
        org.joda.time.Instant instant21 = instant11.minus(readableDuration20);
        java.util.Locale.Category category22 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale23 = java.util.Locale.getDefault();
        boolean boolean24 = locale23.hasExtensions();
        java.lang.String str25 = locale23.getISO3Language();
        java.util.Locale.setDefault(category22, locale23);
        java.util.Locale locale27 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale28 = java.util.Locale.ENGLISH;
        java.lang.String str29 = locale27.getDisplayLanguage(locale28);
        java.util.Locale locale30 = java.util.Locale.CANADA;
        java.lang.String str31 = locale30.getISO3Language();
        java.lang.String str32 = locale27.getDisplayVariant(locale30);
        java.lang.String str33 = locale27.getDisplayName();
        java.util.Locale.setDefault(category22, locale27);
        boolean boolean35 = instant11.equals((java.lang.Object) locale27);
        org.joda.time.Instant instant38 = instant11.withDurationAdded((long) 1959, 10);
        org.joda.time.ReadableDuration readableDuration39 = null;
        org.joda.time.Instant instant41 = instant38.withDurationAdded(readableDuration39, (-59138));
        org.joda.time.Chronology chronology42 = instant38.getChronology();
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
// flaky:         org.junit.Assert.assertEquals(locale8.toString(), "\u82f1\u6587");
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+00:00:00.052" + "'", str9, "+00:00:00.052");
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(gJChronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
// flaky:         org.junit.Assert.assertTrue("'" + int16 + "' != '" + 104 + "'", int16 == 104);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(gJChronology18);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 52L + "'", long19 == 52L);
        org.junit.Assert.assertNotNull(instant21);
        org.junit.Assert.assertTrue("'" + category22 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category22.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "zh");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "zho" + "'", str25, "zho");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "en");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Chinese" + "'", str29, "Chinese");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "eng" + "'", str31, "eng");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
// flaky:         org.junit.Assert.assertEquals("'" + str33 + "' != '" + "\u4e2d\u6587\u53f0\u6e7e\u5730\u533a)" + "'", str33, "\u4e2d\u6587\u53f0\u6e7e\u5730\u533a)");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(instant38);
        org.junit.Assert.assertNotNull(instant41);
        org.junit.Assert.assertNotNull(chronology42);
    }

    @Test
    public void test19425() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19425");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forID("-00:00:00.019");
        boolean boolean3 = dateTimeZone1.isStandardOffset(656L);
        java.util.TimeZone timeZone4 = null;
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forTimeZone(timeZone4);
        org.joda.time.chrono.GJChronology gJChronology6 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone5);
        org.joda.time.DateTimeField dateTimeField7 = gJChronology6.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField8 = gJChronology6.weekyear();
        org.joda.time.DateTimeField dateTimeField9 = gJChronology6.dayOfMonth();
        org.joda.time.DurationField durationField10 = gJChronology6.hours();
        java.lang.String str11 = durationField10.getName();
        boolean boolean12 = dateTimeZone1.equals((java.lang.Object) durationField10);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(gJChronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hours" + "'", str11, "hours");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test19426() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19426");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clear();
        java.util.Locale.Builder builder2 = builder0.clearExtensions();
        java.util.Locale.Builder builder4 = builder0.setVariant("halfdays");
        java.util.Locale.Builder builder6 = builder0.setScript("");
        java.util.Locale.Builder builder9 = builder0.setExtension('u', "fr_CA");
        java.util.Locale.Builder builder11 = builder9.setLanguageTag("eras");
        java.util.Locale.Builder builder13 = builder9.addUnicodeLocaleAttribute("eng");
        java.util.Locale.Builder builder14 = builder9.clearExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder16 = builder9.addUnicodeLocaleAttribute("inglese (stati uniti)");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute: inglese (stati uniti) [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder14);
    }

    @Test
    public void test19427() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19427");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = gJChronology2.halfdays();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.millisOfDay();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.minuteOfDay();
        org.joda.time.DurationField durationField6 = gJChronology2.centuries();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology2.halfdayOfDay();
        java.util.Locale locale8 = java.util.Locale.ITALIAN;
        java.util.Locale locale9 = locale8.stripExtensions();
        java.util.Locale locale10 = java.util.Locale.CANADA;
        java.lang.String str11 = locale8.getDisplayVariant(locale10);
        boolean boolean12 = gJChronology2.equals((java.lang.Object) locale10);
        org.joda.time.DurationField durationField13 = gJChronology2.months();
        org.joda.time.DurationFieldType durationFieldType14 = durationField13.getType();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "it");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "it");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(durationFieldType14);
    }

    @Test
    public void test19428() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19428");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = gJChronology2.halfdays();
        long long7 = gJChronology2.add((long) 'a', (-1L), (int) (short) 0);
        boolean boolean9 = gJChronology2.equals((java.lang.Object) 0);
        org.joda.time.DateTimeField dateTimeField10 = gJChronology2.dayOfMonth();
        org.joda.time.DurationField durationField11 = gJChronology2.days();
        org.joda.time.DateTimeField dateTimeField12 = gJChronology2.millisOfSecond();
        org.joda.time.DurationField durationField13 = gJChronology2.millis();
        org.joda.time.DateTimeField dateTimeField14 = gJChronology2.hourOfHalfday();
        org.joda.time.DurationField durationField15 = gJChronology2.years();
        int int18 = durationField15.getValue((long) 1155627, 4320000048L);
        java.lang.String str19 = durationField15.getName();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 97L + "'", long7 == 97L);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "years" + "'", str19, "years");
    }

    @Test
    public void test19429() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19429");
        java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("UTC");
        double double2 = languageRange1.getWeight();
        java.lang.String str3 = languageRange1.getRange();
        java.lang.String str4 = languageRange1.getRange();
        java.util.TimeZone timeZone5 = null;
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        org.joda.time.chrono.GJChronology gJChronology7 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone6);
        org.joda.time.DurationField durationField8 = gJChronology7.halfdays();
        long long12 = gJChronology7.add((long) 'a', (-1L), (int) (short) 0);
        boolean boolean14 = gJChronology7.equals((java.lang.Object) 0);
        org.joda.time.DateTimeField dateTimeField15 = gJChronology7.dayOfMonth();
        org.joda.time.DurationField durationField16 = gJChronology7.days();
        org.joda.time.DurationField durationField17 = gJChronology7.minutes();
        boolean boolean18 = languageRange1.equals((java.lang.Object) durationField17);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1.0d + "'", double2 == 1.0d);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "utc" + "'", str3, "utc");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "utc" + "'", str4, "utc");
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(gJChronology7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 97L + "'", long12 == 97L);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test19430() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19430");
        java.util.List<java.util.Locale.LanguageRange> languageRangeList1 = java.util.Locale.LanguageRange.parse("halfdays");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap2 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList3 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList1, strMap2);
        java.util.Locale locale5 = new java.util.Locale("hi!");
        java.lang.String str6 = locale5.getCountry();
        java.util.Set<java.lang.String> strSet7 = locale5.getUnicodeLocaleKeys();
        java.util.Locale.FilteringMode filteringMode8 = java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES;
        java.util.List<java.lang.String> strList9 = java.util.Locale.filterTags(languageRangeList3, (java.util.Collection<java.lang.String>) strSet7, filteringMode8);
        java.util.Locale.LanguageRange[] languageRangeArray10 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList11 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList11, languageRangeArray10);
        java.util.Set<java.lang.String> strSet13 = org.joda.time.DateTimeZone.getAvailableIDs();
        java.lang.String str14 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList11, (java.util.Collection<java.lang.String>) strSet13);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap15 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList16 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList11, strMap15);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap17 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList18 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList11, strMap17);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap19 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList20 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList18, strMap19);
        java.util.Locale.LanguageRange[] languageRangeArray21 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList22 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList22, languageRangeArray21);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap24 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList25 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList22, strMap24);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap26 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList27 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList25, strMap26);
        java.util.Locale locale29 = java.util.Locale.forLanguageTag("hi!");
        java.lang.String str30 = locale29.toLanguageTag();
        java.util.Set<java.lang.String> strSet31 = locale29.getUnicodeLocaleKeys();
        java.util.Set<java.lang.String> strSet32 = locale29.getUnicodeLocaleKeys();
        java.lang.String str33 = java.util.Locale.lookupTag(languageRangeList25, (java.util.Collection<java.lang.String>) strSet32);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap34 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList35 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList25, strMap34);
        java.util.Collection<java.util.Locale> localeCollection36 = null;
        java.util.List<java.util.Locale> localeList37 = java.util.Locale.filter(languageRangeList35, localeCollection36);
        java.util.Locale locale38 = java.util.Locale.lookup(languageRangeList20, localeCollection36);
        java.util.Locale.LanguageRange[] languageRangeArray39 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList40 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList40, languageRangeArray39);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap42 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList43 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList40, strMap42);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap44 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList45 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList43, strMap44);
        java.util.Locale locale46 = java.util.Locale.CHINA;
        java.lang.String str47 = locale46.toLanguageTag();
        java.util.Set<java.lang.String> strSet48 = locale46.getUnicodeLocaleAttributes();
        java.lang.String str49 = java.util.Locale.lookupTag(languageRangeList45, (java.util.Collection<java.lang.String>) strSet48);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap50 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList51 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList45, strMap50);
        java.util.Locale.LanguageRange[] languageRangeArray52 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList53 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean54 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList53, languageRangeArray52);
        java.util.Locale.LanguageRange[] languageRangeArray55 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList56 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean57 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList56, languageRangeArray55);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap58 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList59 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList56, strMap58);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap60 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList61 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList59, strMap60);
        java.util.Locale.LanguageRange[] languageRangeArray62 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList63 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean64 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList63, languageRangeArray62);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap65 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList66 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList63, strMap65);
        java.lang.String[] strArray70 = new java.lang.String[] { "English", "English", "hi!" };
        java.util.ArrayList<java.lang.String> strList71 = new java.util.ArrayList<java.lang.String>();
        boolean boolean72 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList71, strArray70);
        java.util.List<java.lang.String> strList73 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList63, (java.util.Collection<java.lang.String>) strList71);
        java.util.Locale.FilteringMode filteringMode74 = null;
        java.util.List<java.lang.String> strList75 = java.util.Locale.filterTags(languageRangeList61, (java.util.Collection<java.lang.String>) strList71, filteringMode74);
        java.util.Locale.FilteringMode filteringMode76 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.lang.String> strList77 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList53, (java.util.Collection<java.lang.String>) strList75, filteringMode76);
        java.util.Collection<java.util.Locale> localeCollection78 = null;
        java.util.Locale.LanguageRange[] languageRangeArray79 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList80 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean81 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList80, languageRangeArray79);
        java.util.Set<java.lang.String> strSet82 = org.joda.time.DateTimeZone.getAvailableIDs();
        java.lang.String str83 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList80, (java.util.Collection<java.lang.String>) strSet82);
        java.util.Locale locale84 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale85 = java.util.Locale.ENGLISH;
        java.lang.String str86 = locale84.getDisplayLanguage(locale85);
        java.util.Locale locale87 = java.util.Locale.CANADA;
        java.lang.String str88 = locale87.getISO3Language();
        java.lang.String str89 = locale84.getDisplayVariant(locale87);
        java.util.Set<java.lang.String> strSet90 = locale84.getUnicodeLocaleKeys();
        java.util.Locale.FilteringMode filteringMode91 = java.util.Locale.FilteringMode.AUTOSELECT_FILTERING;
        java.util.List<java.lang.String> strList92 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList80, (java.util.Collection<java.lang.String>) strSet90, filteringMode91);
        java.util.List<java.util.Locale> localeList93 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList53, localeCollection78, filteringMode91);
        java.util.List<java.util.Locale> localeList94 = java.util.Locale.filter(languageRangeList45, (java.util.Collection<java.util.Locale>) localeList93);
        java.util.Locale.FilteringMode filteringMode95 = null;
        java.util.List<java.util.Locale> localeList96 = java.util.Locale.filter(languageRangeList20, (java.util.Collection<java.util.Locale>) localeList93, filteringMode95);
        java.util.Locale locale97 = java.util.Locale.lookup(languageRangeList3, (java.util.Collection<java.util.Locale>) localeList96);
        org.junit.Assert.assertNotNull(languageRangeList1);
        org.junit.Assert.assertNotNull(languageRangeList3);
        org.junit.Assert.assertEquals(locale5.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(strSet7);
        org.junit.Assert.assertTrue("'" + filteringMode8 + "' != '" + java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES + "'", filteringMode8.equals(java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(strList9);
        org.junit.Assert.assertNotNull(languageRangeArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strSet13);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(languageRangeList16);
        org.junit.Assert.assertNotNull(languageRangeList18);
        org.junit.Assert.assertNotNull(languageRangeList20);
        org.junit.Assert.assertNotNull(languageRangeArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(languageRangeList25);
        org.junit.Assert.assertNotNull(languageRangeList27);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "und" + "'", str30, "und");
        org.junit.Assert.assertNotNull(strSet31);
        org.junit.Assert.assertNotNull(strSet32);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNotNull(languageRangeList35);
        org.junit.Assert.assertNotNull(localeList37);
        org.junit.Assert.assertNull(locale38);
        org.junit.Assert.assertNotNull(languageRangeArray39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(languageRangeList43);
        org.junit.Assert.assertNotNull(languageRangeList45);
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "zh-CN" + "'", str47, "zh-CN");
        org.junit.Assert.assertNotNull(strSet48);
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertNotNull(languageRangeList51);
        org.junit.Assert.assertNotNull(languageRangeArray52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(languageRangeArray55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(languageRangeList59);
        org.junit.Assert.assertNotNull(languageRangeList61);
        org.junit.Assert.assertNotNull(languageRangeArray62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(languageRangeList66);
        org.junit.Assert.assertNotNull(strArray70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(strList73);
        org.junit.Assert.assertNotNull(strList75);
        org.junit.Assert.assertTrue("'" + filteringMode76 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode76.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(strList77);
        org.junit.Assert.assertNotNull(languageRangeArray79);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(strSet82);
        org.junit.Assert.assertNull(str83);
        org.junit.Assert.assertNotNull(locale84);
        org.junit.Assert.assertEquals(locale84.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale85);
        org.junit.Assert.assertEquals(locale85.toString(), "en");
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "Chinese" + "'", str86, "Chinese");
        org.junit.Assert.assertNotNull(locale87);
        org.junit.Assert.assertEquals(locale87.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "eng" + "'", str88, "eng");
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "" + "'", str89, "");
        org.junit.Assert.assertNotNull(strSet90);
        org.junit.Assert.assertTrue("'" + filteringMode91 + "' != '" + java.util.Locale.FilteringMode.AUTOSELECT_FILTERING + "'", filteringMode91.equals(java.util.Locale.FilteringMode.AUTOSELECT_FILTERING));
        org.junit.Assert.assertNotNull(strList92);
        org.junit.Assert.assertNotNull(localeList93);
        org.junit.Assert.assertNotNull(localeList94);
        org.junit.Assert.assertNotNull(localeList96);
        org.junit.Assert.assertNull(locale97);
    }

    @Test
    public void test19431() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19431");
        java.util.Locale locale0 = java.util.Locale.CANADA;
        java.lang.String str1 = locale0.getDisplayVariant();
        java.util.Locale locale4 = new java.util.Locale("inglese", "tedesco");
        java.util.Locale locale5 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str6 = locale5.getLanguage();
        java.util.Set<java.lang.Character> charSet7 = locale5.getExtensionKeys();
        java.util.Locale locale9 = new java.util.Locale("hi!");
        java.lang.String str10 = locale9.getVariant();
        java.util.Locale locale12 = java.util.Locale.forLanguageTag("hi!");
        java.lang.String str13 = locale12.toLanguageTag();
        java.lang.String str14 = locale9.getDisplayName(locale12);
        java.lang.String str15 = locale5.getDisplayScript(locale12);
        java.lang.String str16 = locale4.getDisplayVariant(locale12);
        java.lang.String str17 = locale0.getDisplayVariant(locale4);
        java.lang.String str18 = locale4.getDisplayName();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertEquals(locale4.toString(), "inglese_TEDESCO");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "zh" + "'", str6, "zh");
        org.junit.Assert.assertNotNull(charSet7);
        org.junit.Assert.assertEquals(locale9.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "und" + "'", str13, "und");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hi!" + "'", str14, "hi!");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "inglese (TEDESCO)" + "'", str18, "inglese (TEDESCO)");
    }

    @Test
    public void test19432() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19432");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = gJChronology2.halfdays();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.millisOfDay();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.minuteOfDay();
        org.joda.time.DurationField durationField6 = gJChronology2.centuries();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology2.dayOfYear();
        java.lang.String str8 = gJChronology2.toString();
        org.joda.time.DurationField durationField9 = gJChronology2.years();
        org.joda.time.DateTimeField dateTimeField10 = gJChronology2.yearOfEra();
        org.joda.time.DateTimeField dateTimeField11 = gJChronology2.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField12 = gJChronology2.minuteOfDay();
        long long16 = gJChronology2.add((-22858387L), 2100000000L, (-1916));
        org.joda.time.DurationField durationField17 = gJChronology2.months();
        org.joda.time.DateTimeField dateTimeField18 = gJChronology2.centuryOfEra();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "GJChronology[+00:00:00.052]" + "'", str8, "GJChronology[+00:00:00.052]");
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-4023622858387L) + "'", long16 == (-4023622858387L));
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
    }

    @Test
    public void test19433() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19433");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = gJChronology2.halfdays();
        long long7 = gJChronology2.add((long) 'a', (-1L), (int) (short) 0);
        boolean boolean9 = gJChronology2.equals((java.lang.Object) 0);
        org.joda.time.DateTimeField dateTimeField10 = gJChronology2.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField11 = gJChronology2.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField12 = gJChronology2.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField13 = gJChronology2.clockhourOfHalfday();
        org.joda.time.DurationField durationField14 = gJChronology2.weekyears();
        org.joda.time.DurationField durationField15 = gJChronology2.weekyears();
        org.joda.time.DateTimeField dateTimeField16 = gJChronology2.minuteOfDay();
        org.joda.time.DurationField durationField17 = gJChronology2.weekyears();
        org.joda.time.DateTimeField dateTimeField18 = gJChronology2.dayOfMonth();
        org.joda.time.DurationField durationField19 = gJChronology2.minutes();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 97L + "'", long7 == 97L);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
    }

    @Test
    public void test19434() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19434");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = gJChronology2.halfdays();
        long long7 = gJChronology2.add(0L, (long) (short) -1, (int) '4');
        org.joda.time.DateTimeField dateTimeField8 = gJChronology2.dayOfYear();
        org.joda.time.DateTimeField dateTimeField9 = gJChronology2.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField10 = gJChronology2.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField11 = gJChronology2.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone12 = gJChronology2.getZone();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-52L) + "'", long7 == (-52L));
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeZone12);
    }

    @Test
    public void test19435() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19435");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = gJChronology2.halfdays();
        long long7 = gJChronology2.add((long) 'a', (-1L), (int) (short) 0);
        boolean boolean9 = gJChronology2.equals((java.lang.Object) 0);
        org.joda.time.DateTimeField dateTimeField10 = gJChronology2.secondOfMinute();
        org.joda.time.DurationField durationField11 = gJChronology2.years();
        org.joda.time.DateTimeField dateTimeField12 = gJChronology2.yearOfCentury();
        org.joda.time.Chronology chronology13 = gJChronology2.withUTC();
        org.joda.time.Instant instant15 = new org.joda.time.Instant(52L);
        boolean boolean16 = instant15.isEqualNow();
        java.lang.String str17 = instant15.toString();
        java.util.TimeZone timeZone18 = null;
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forTimeZone(timeZone18);
        org.joda.time.chrono.GJChronology gJChronology20 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone19);
        java.util.Locale locale22 = new java.util.Locale("hi!");
        java.lang.String str23 = locale22.getCountry();
        java.util.Locale locale24 = java.util.Locale.getDefault();
        java.lang.String str25 = locale24.getDisplayName();
        java.lang.String str26 = locale22.getDisplayScript(locale24);
        boolean boolean27 = dateTimeZone19.equals((java.lang.Object) locale24);
        int int29 = dateTimeZone19.getOffsetFromLocal((long) (short) 10);
        java.util.TimeZone timeZone30 = null;
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forTimeZone(timeZone30);
        org.joda.time.chrono.GJChronology gJChronology32 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone31);
        org.joda.time.DateTimeField dateTimeField33 = gJChronology32.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField34 = gJChronology32.weekyearOfCentury();
        org.joda.time.Instant instant35 = gJChronology32.getGregorianCutover();
        org.joda.time.Instant instant37 = instant35.withMillis(0L);
        org.joda.time.Instant instant39 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone40 = null;
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.forTimeZone(timeZone40);
        org.joda.time.chrono.GJChronology gJChronology42 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone41);
        org.joda.time.DateTimeField dateTimeField43 = gJChronology42.millisOfSecond();
        int int44 = instant39.get(dateTimeField43);
        org.joda.time.Instant instant46 = instant39.plus(0L);
        int int47 = instant37.compareTo((org.joda.time.ReadableInstant) instant46);
        org.joda.time.DateTimeFieldType dateTimeFieldType48 = null;
        boolean boolean49 = instant46.isSupported(dateTimeFieldType48);
        int int50 = dateTimeZone19.getOffset((org.joda.time.ReadableInstant) instant46);
        boolean boolean51 = instant15.isAfter((org.joda.time.ReadableInstant) instant46);
        org.joda.time.ReadableDuration readableDuration52 = null;
        org.joda.time.Instant instant54 = instant15.withDurationAdded(readableDuration52, 1);
        boolean boolean55 = instant54.isEqualNow();
        org.joda.time.Instant instant56 = instant54.toInstant();
        org.joda.time.Instant instant58 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone59 = null;
        org.joda.time.DateTimeZone dateTimeZone60 = org.joda.time.DateTimeZone.forTimeZone(timeZone59);
        org.joda.time.chrono.GJChronology gJChronology61 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone60);
        org.joda.time.DateTimeField dateTimeField62 = gJChronology61.millisOfSecond();
        int int63 = instant58.get(dateTimeField62);
        org.joda.time.Instant instant65 = instant58.plus(0L);
        java.util.TimeZone timeZone66 = null;
        org.joda.time.DateTimeZone dateTimeZone67 = org.joda.time.DateTimeZone.forTimeZone(timeZone66);
        org.joda.time.chrono.GJChronology gJChronology68 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone67);
        org.joda.time.DurationField durationField69 = gJChronology68.halfdays();
        org.joda.time.Chronology chronology70 = gJChronology68.withUTC();
        java.lang.String str71 = gJChronology68.toString();
        org.joda.time.DateTimeField dateTimeField72 = gJChronology68.hourOfHalfday();
        int int73 = instant58.get(dateTimeField72);
        org.joda.time.Instant instant75 = new org.joda.time.Instant(52L);
        boolean boolean76 = instant75.isEqualNow();
        org.joda.time.ReadableDuration readableDuration77 = null;
        org.joda.time.Instant instant78 = instant75.plus(readableDuration77);
        org.joda.time.Instant instant80 = new org.joda.time.Instant(52L);
        org.joda.time.Instant instant82 = instant80.withMillis((long) 'u');
        boolean boolean83 = instant75.isBefore((org.joda.time.ReadableInstant) instant80);
        boolean boolean84 = instant58.isEqual((org.joda.time.ReadableInstant) instant80);
        boolean boolean85 = instant56.equals((java.lang.Object) instant80);
        org.joda.time.DateTimeZone dateTimeZone86 = instant80.getZone();
        java.lang.String str87 = instant80.toString();
        org.joda.time.DateTimeZone dateTimeZone88 = instant80.getZone();
        boolean boolean89 = gJChronology2.equals((java.lang.Object) dateTimeZone88);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 97L + "'", long7 == 97L);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "1970-01-01T00:00:00.052Z" + "'", str17, "1970-01-01T00:00:00.052Z");
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(gJChronology20);
        org.junit.Assert.assertEquals(locale22.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "\u4e2d\u6587" + "'", str25, "\u4e2d\u6587");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int29 + "' != '" + 52 + "'", int29 == 52);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertNotNull(gJChronology32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(instant35);
        org.junit.Assert.assertNotNull(instant37);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertNotNull(gJChronology42);
        org.junit.Assert.assertNotNull(dateTimeField43);
// flaky:         org.junit.Assert.assertTrue("'" + int44 + "' != '" + 104 + "'", int44 == 104);
        org.junit.Assert.assertNotNull(instant46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-1) + "'", int47 == (-1));
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int50 + "' != '" + 52 + "'", int50 == 52);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(instant54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(instant56);
        org.junit.Assert.assertNotNull(dateTimeZone60);
        org.junit.Assert.assertNotNull(gJChronology61);
        org.junit.Assert.assertNotNull(dateTimeField62);
// flaky:         org.junit.Assert.assertTrue("'" + int63 + "' != '" + 104 + "'", int63 == 104);
        org.junit.Assert.assertNotNull(instant65);
        org.junit.Assert.assertNotNull(dateTimeZone67);
        org.junit.Assert.assertNotNull(gJChronology68);
        org.junit.Assert.assertNotNull(durationField69);
        org.junit.Assert.assertNotNull(chronology70);
// flaky:         org.junit.Assert.assertEquals("'" + str71 + "' != '" + "GJChronology[+00:00:00.052]" + "'", str71, "GJChronology[+00:00:00.052]");
        org.junit.Assert.assertNotNull(dateTimeField72);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(instant78);
        org.junit.Assert.assertNotNull(instant82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertNotNull(dateTimeZone86);
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "1970-01-01T00:00:00.052Z" + "'", str87, "1970-01-01T00:00:00.052Z");
        org.junit.Assert.assertNotNull(dateTimeZone88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
    }

    @Test
    public void test19436() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19436");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forTimeZone(timeZone2);
        org.joda.time.chrono.GJChronology gJChronology4 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone3);
        org.joda.time.DateTimeField dateTimeField5 = gJChronology4.millisOfSecond();
        int int6 = instant1.get(dateTimeField5);
        boolean boolean7 = instant1.isEqualNow();
        boolean boolean9 = instant1.isBefore(35L);
        org.joda.time.MutableDateTime mutableDateTime10 = instant1.toMutableDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone11 = instant1.getZone();
        boolean boolean13 = instant1.isBefore(1036800000L);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(gJChronology4);
        org.junit.Assert.assertNotNull(dateTimeField5);
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 104 + "'", int6 == 104);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(mutableDateTime10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
    }

    @Test
    public void test19437() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19437");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = gJChronology2.years();
        java.util.TimeZone timeZone4 = null;
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forTimeZone(timeZone4);
        org.joda.time.chrono.GJChronology gJChronology6 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone5);
        org.joda.time.DurationField durationField7 = gJChronology6.halfdays();
        org.joda.time.DateTimeField dateTimeField8 = gJChronology6.millisOfDay();
        org.joda.time.DateTimeField dateTimeField9 = gJChronology6.minuteOfDay();
        org.joda.time.DurationField durationField10 = gJChronology6.centuries();
        java.util.TimeZone timeZone11 = null;
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forTimeZone(timeZone11);
        org.joda.time.chrono.GJChronology gJChronology13 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone12);
        org.joda.time.DurationField durationField14 = gJChronology13.halfdays();
        long long17 = durationField14.add((long) 100, 100L);
        boolean boolean18 = durationField14.isPrecise();
        int int19 = durationField10.compareTo(durationField14);
        boolean boolean20 = gJChronology2.equals((java.lang.Object) durationField10);
        org.joda.time.DateTimeField dateTimeField21 = gJChronology2.dayOfYear();
        org.joda.time.DateTimeField dateTimeField22 = gJChronology2.era();
        org.joda.time.DateTimeZone dateTimeZone23 = gJChronology2.getZone();
        org.joda.time.Instant instant24 = gJChronology2.getGregorianCutover();
        org.joda.time.DurationField durationField25 = gJChronology2.days();
        org.joda.time.DurationField durationField26 = gJChronology2.years();
        org.joda.time.DateTimeField dateTimeField27 = gJChronology2.secondOfMinute();
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray31 = gJChronology2.get(readablePeriod28, (long) (-93), 8727L);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(gJChronology6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(gJChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 4320000100L + "'", long17 == 4320000100L);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(instant24);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
    }

    @Test
    public void test19438() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19438");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forTimeZone(timeZone2);
        org.joda.time.chrono.GJChronology gJChronology4 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone3);
        org.joda.time.DateTimeField dateTimeField5 = gJChronology4.millisOfSecond();
        int int6 = instant1.get(dateTimeField5);
        org.joda.time.Instant instant8 = instant1.plus(0L);
        java.util.TimeZone timeZone9 = null;
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forTimeZone(timeZone9);
        org.joda.time.chrono.GJChronology gJChronology11 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone10);
        org.joda.time.DurationField durationField12 = gJChronology11.halfdays();
        org.joda.time.Chronology chronology13 = gJChronology11.withUTC();
        java.lang.String str14 = gJChronology11.toString();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology11.hourOfHalfday();
        int int16 = instant1.get(dateTimeField15);
        org.joda.time.Instant instant18 = new org.joda.time.Instant(52L);
        boolean boolean19 = instant18.isEqualNow();
        org.joda.time.ReadableDuration readableDuration20 = null;
        org.joda.time.Instant instant21 = instant18.plus(readableDuration20);
        org.joda.time.Instant instant23 = new org.joda.time.Instant(52L);
        org.joda.time.Instant instant25 = instant23.withMillis((long) 'u');
        boolean boolean26 = instant18.isBefore((org.joda.time.ReadableInstant) instant23);
        boolean boolean27 = instant1.isEqual((org.joda.time.ReadableInstant) instant23);
        org.joda.time.Chronology chronology28 = instant23.getChronology();
        java.util.TimeZone timeZone29 = null;
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forTimeZone(timeZone29);
        org.joda.time.chrono.GJChronology gJChronology31 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone30);
        org.joda.time.DurationField durationField32 = gJChronology31.halfdays();
        long long36 = gJChronology31.add((long) 'a', (-1L), (int) (short) 0);
        boolean boolean38 = gJChronology31.equals((java.lang.Object) 0);
        org.joda.time.DateTimeField dateTimeField39 = gJChronology31.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField40 = gJChronology31.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField41 = gJChronology31.clockhourOfDay();
        long long46 = gJChronology31.getDateTimeMillis(10, (int) (short) 10, 4, (int) (byte) 1);
        org.joda.time.DateTimeField dateTimeField47 = gJChronology31.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField48 = gJChronology31.weekyear();
        boolean boolean49 = instant23.equals((java.lang.Object) gJChronology31);
        org.joda.time.DurationField durationField50 = gJChronology31.minutes();
        org.joda.time.DateTimeField dateTimeField51 = gJChronology31.weekyear();
        org.joda.time.DateTimeField dateTimeField52 = gJChronology31.millisOfDay();
        org.joda.time.DateTimeField dateTimeField53 = gJChronology31.dayOfYear();
        org.joda.time.DurationField durationField54 = gJChronology31.days();
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(gJChronology4);
        org.junit.Assert.assertNotNull(dateTimeField5);
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 104 + "'", int6 == 104);
        org.junit.Assert.assertNotNull(instant8);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(gJChronology11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(chronology13);
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "GJChronology[+00:00:00.052]" + "'", str14, "GJChronology[+00:00:00.052]");
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(instant21);
        org.junit.Assert.assertNotNull(instant25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertNotNull(gJChronology31);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 97L + "'", long36 == 97L);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(dateTimeField41);
// flaky:         org.junit.Assert.assertTrue("'" + long46 + "' != '" + (-61827926400051L) + "'", long46 == (-61827926400051L));
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(durationField50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertNotNull(durationField54);
    }

    @Test
    public void test19439() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19439");
        java.util.Locale locale0 = java.util.Locale.UK;
        java.util.TimeZone timeZone1 = null;
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forTimeZone(timeZone1);
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone2);
        org.joda.time.DateTimeField dateTimeField4 = gJChronology3.millisOfSecond();
        org.joda.time.DurationField durationField5 = gJChronology3.millis();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology3.hourOfHalfday();
        java.util.TimeZone timeZone7 = null;
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forTimeZone(timeZone7);
        java.lang.String str10 = dateTimeZone8.getNameKey((long) 100);
        boolean boolean11 = dateTimeZone8.isFixed();
        org.joda.time.chrono.GJChronology gJChronology12 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone8);
        long long14 = dateTimeZone8.convertUTCToLocal(5200L);
        java.util.Locale.LanguageRange[] languageRangeArray15 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList16 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList16, languageRangeArray15);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap18 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList19 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList16, strMap18);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap20 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList21 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList19, strMap20);
        java.util.Locale.LanguageRange[] languageRangeArray22 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList23 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList23, languageRangeArray22);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap25 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList26 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList23, strMap25);
        java.lang.String[] strArray30 = new java.lang.String[] { "English", "English", "hi!" };
        java.util.ArrayList<java.lang.String> strList31 = new java.util.ArrayList<java.lang.String>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList31, strArray30);
        java.util.List<java.lang.String> strList33 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList23, (java.util.Collection<java.lang.String>) strList31);
        java.util.Locale.FilteringMode filteringMode34 = null;
        java.util.List<java.lang.String> strList35 = java.util.Locale.filterTags(languageRangeList21, (java.util.Collection<java.lang.String>) strList31, filteringMode34);
        java.util.Locale.LanguageRange[] languageRangeArray36 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList37 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList37, languageRangeArray36);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap39 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList40 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList37, strMap39);
        java.util.Locale.LanguageRange[] languageRangeArray41 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList42 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList42, languageRangeArray41);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap44 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList45 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList42, strMap44);
        java.lang.String[] strArray49 = new java.lang.String[] { "English", "English", "hi!" };
        java.util.ArrayList<java.lang.String> strList50 = new java.util.ArrayList<java.lang.String>();
        boolean boolean51 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList50, strArray49);
        java.util.List<java.lang.String> strList52 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList42, (java.util.Collection<java.lang.String>) strList50);
        java.util.List<java.lang.String> strList53 = java.util.Locale.filterTags(languageRangeList40, (java.util.Collection<java.lang.String>) strList52);
        java.util.List<java.lang.String> strList54 = java.util.Locale.filterTags(languageRangeList21, (java.util.Collection<java.lang.String>) strList53);
        java.util.Locale.LanguageRange[] languageRangeArray55 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList56 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean57 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList56, languageRangeArray55);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap58 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList59 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList56, strMap58);
        java.lang.String[] strArray63 = new java.lang.String[] { "English", "English", "hi!" };
        java.util.ArrayList<java.lang.String> strList64 = new java.util.ArrayList<java.lang.String>();
        boolean boolean65 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList64, strArray63);
        java.util.List<java.lang.String> strList66 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList56, (java.util.Collection<java.lang.String>) strList64);
        java.util.List<java.lang.String> strList67 = java.util.Locale.filterTags(languageRangeList21, (java.util.Collection<java.lang.String>) strList66);
        boolean boolean68 = dateTimeZone8.equals((java.lang.Object) languageRangeList21);
        java.util.Locale locale70 = java.util.Locale.CANADA;
        java.lang.String str71 = locale70.getISO3Language();
        java.lang.String str72 = dateTimeZone8.getShortName((long) 'a', locale70);
        boolean boolean73 = gJChronology3.equals((java.lang.Object) locale70);
        java.lang.String str74 = locale70.getISO3Country();
        java.lang.String str75 = locale0.getDisplayVariant(locale70);
        java.util.Locale.setDefault(locale0);
        java.lang.String str77 = locale0.getLanguage();
        java.lang.String str78 = locale0.getCountry();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en_GB");
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(gJChronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeZone8);
// flaky:         org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(gJChronology12);
// flaky:         org.junit.Assert.assertTrue("'" + long14 + "' != '" + 5252L + "'", long14 == 5252L);
        org.junit.Assert.assertNotNull(languageRangeArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(languageRangeList19);
        org.junit.Assert.assertNotNull(languageRangeList21);
        org.junit.Assert.assertNotNull(languageRangeArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(languageRangeList26);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(strList33);
        org.junit.Assert.assertNotNull(strList35);
        org.junit.Assert.assertNotNull(languageRangeArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(languageRangeList40);
        org.junit.Assert.assertNotNull(languageRangeArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(languageRangeList45);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(strList52);
        org.junit.Assert.assertNotNull(strList53);
        org.junit.Assert.assertNotNull(strList54);
        org.junit.Assert.assertNotNull(languageRangeArray55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(languageRangeList59);
        org.junit.Assert.assertNotNull(strArray63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(strList66);
        org.junit.Assert.assertNotNull(strList67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(locale70);
        org.junit.Assert.assertEquals(locale70.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "eng" + "'", str71, "eng");
// flaky:         org.junit.Assert.assertEquals("'" + str72 + "' != '" + "+00:00:00.052" + "'", str72, "+00:00:00.052");
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "CAN" + "'", str74, "CAN");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "" + "'", str75, "");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "en" + "'", str77, "en");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "GB" + "'", str78, "GB");
    }

    @Test
    public void test19440() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19440");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = gJChronology2.halfdays();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.millisOfDay();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.minuteOfDay();
        org.joda.time.DurationField durationField6 = gJChronology2.centuries();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology2.dayOfYear();
        java.lang.String str8 = gJChronology2.toString();
        org.joda.time.DateTimeField dateTimeField9 = gJChronology2.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone10 = gJChronology2.getZone();
        org.joda.time.chrono.GJChronology gJChronology11 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone10);
        org.joda.time.DateTimeField dateTimeField12 = gJChronology11.clockhourOfDay();
        org.joda.time.DurationField durationField13 = gJChronology11.centuries();
        org.joda.time.DurationField durationField14 = gJChronology11.months();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology11.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField16 = gJChronology11.secondOfDay();
        org.joda.time.DurationField durationField17 = gJChronology11.days();
        org.joda.time.DurationField durationField18 = gJChronology11.halfdays();
        org.joda.time.DateTimeField dateTimeField19 = gJChronology11.clockhourOfDay();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "GJChronology[+00:00:00.052]" + "'", str8, "GJChronology[+00:00:00.052]");
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(gJChronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
    }

    @Test
    public void test19441() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19441");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = gJChronology2.halfdays();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.millisOfDay();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.monthOfYear();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology2.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology2.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField8 = gJChronology2.weekyearOfCentury();
        org.joda.time.DurationField durationField9 = gJChronology2.weeks();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(durationField9);
    }

    @Test
    public void test19442() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19442");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField3 = gJChronology2.millisOfSecond();
        org.joda.time.DurationField durationField4 = gJChronology2.millis();
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        long long8 = gJChronology2.add(readablePeriod5, (long) 'a', (int) '4');
        org.joda.time.DateTimeField dateTimeField9 = gJChronology2.clockhourOfDay();
        org.joda.time.DurationField durationField10 = gJChronology2.halfdays();
        org.joda.time.Chronology chronology11 = gJChronology2.withUTC();
        org.joda.time.DurationField durationField12 = chronology11.seconds();
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray15 = chronology11.get(readablePeriod13, 111000097L);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 97L + "'", long8 == 97L);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(durationField12);
    }

    @Test
    public void test19443() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19443");
        java.util.Locale locale2 = new java.util.Locale("Vereinigtes K\366nigreich", "\u53f0\u7063");
        java.util.Locale locale4 = new java.util.Locale("zh_TW");
        java.lang.String str5 = locale2.getDisplayLanguage(locale4);
        boolean boolean6 = locale4.hasExtensions();
        java.lang.String str7 = locale4.getDisplayVariant();
// flaky:         org.junit.Assert.assertEquals(locale2.toString(), "vereinigtes k\366\u53f0\u7063");
        org.junit.Assert.assertEquals(locale4.toString(), "zh_tw");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "vereinigtes k\366nigreich" + "'", str5, "vereinigtes k\366nigreich");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
    }

    @Test
    public void test19444() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19444");
        java.util.Locale locale2 = new java.util.Locale("DURATIONFIELD[WEEKYEARS]", "+52:00");
        java.util.Locale.Builder builder3 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder4 = builder3.clear();
        java.util.Locale.Builder builder6 = builder4.removeUnicodeLocaleAttribute("und");
        java.util.Locale.Builder builder7 = builder6.clearExtensions();
        java.util.Locale locale8 = builder7.build();
        java.util.Locale locale9 = builder7.build();
        java.util.Locale locale10 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale11 = java.util.Locale.ENGLISH;
        java.lang.String str12 = locale10.getDisplayLanguage(locale11);
        java.util.Locale.Builder builder13 = builder7.setLocale(locale11);
        java.util.Locale locale14 = java.util.Locale.getDefault();
        java.lang.String str15 = locale14.getDisplayName();
        java.util.Locale locale16 = java.util.Locale.CHINESE;
        boolean boolean17 = locale16.hasExtensions();
        java.util.Locale.setDefault(locale16);
        java.lang.String str19 = locale16.getCountry();
        java.lang.String str20 = locale14.getDisplayScript(locale16);
        java.util.TimeZone timeZone21 = null;
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forTimeZone(timeZone21);
        org.joda.time.chrono.GJChronology gJChronology23 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone22);
        org.joda.time.DurationField durationField24 = gJChronology23.halfdays();
        long long28 = gJChronology23.add((long) 'a', (-1L), (int) (short) 0);
        boolean boolean30 = gJChronology23.equals((java.lang.Object) 0);
        org.joda.time.DateTimeField dateTimeField31 = gJChronology23.dayOfMonth();
        org.joda.time.DurationField durationField32 = gJChronology23.days();
        org.joda.time.DateTimeZone dateTimeZone33 = gJChronology23.getZone();
        java.lang.String str34 = dateTimeZone33.toString();
        java.util.Locale locale36 = java.util.Locale.FRENCH;
        java.util.Locale locale37 = java.util.Locale.getDefault();
        boolean boolean38 = locale37.hasExtensions();
        java.lang.String str39 = locale36.getDisplayLanguage(locale37);
        boolean boolean40 = locale37.hasExtensions();
        java.lang.String str41 = dateTimeZone33.getName((-61827739199999L), locale37);
        java.lang.String str42 = locale16.getDisplayName(locale37);
        java.util.Locale.Builder builder43 = builder13.setLocale(locale16);
        java.lang.String str44 = locale16.getDisplayScript();
        java.lang.String str45 = locale2.getDisplayVariant(locale16);
        org.junit.Assert.assertEquals(locale2.toString(), "durationfield[weekyears]_+52:00");
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "en");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Chinese" + "'", str12, "Chinese");
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "English (United Kingdom)" + "'", str15, "English (United Kingdom)");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "zh");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(gJChronology23);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 97L + "'", long28 == 97L);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertNotNull(dateTimeZone33);
// flaky:         org.junit.Assert.assertEquals("'" + str34 + "' != '" + "+00:00:00.052" + "'", str34, "+00:00:00.052");
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "fr");
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "zh");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "\u6cd5\u6587" + "'", str39, "\u6cd5\u6587");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str41 + "' != '" + "+00:00:00.052" + "'", str41, "+00:00:00.052");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "\u4e2d\u6587" + "'", str42, "\u4e2d\u6587");
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
    }

    @Test
    public void test19445() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19445");
        java.util.Locale locale0 = java.util.Locale.ITALIAN;
        java.util.Locale locale1 = locale0.stripExtensions();
        java.util.Locale locale2 = java.util.Locale.CANADA;
        java.lang.String str3 = locale0.getDisplayVariant(locale2);
        java.lang.String str4 = locale2.getDisplayLanguage();
        java.lang.String str5 = locale2.getDisplayScript();
        java.lang.String str6 = locale2.getLanguage();
        java.lang.String str7 = locale2.getVariant();
        java.lang.String str8 = locale2.getLanguage();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "it");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "it");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u82f1\u6587" + "'", str4, "\u82f1\u6587");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "en" + "'", str6, "en");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "en" + "'", str8, "en");
    }

    @Test
    public void test19446() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19446");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = gJChronology2.halfdays();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.millisOfDay();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.minuteOfDay();
        org.joda.time.DurationField durationField6 = gJChronology2.centuries();
        int int7 = gJChronology2.getMinimumDaysInFirstWeek();
        org.joda.time.DateTimeField dateTimeField8 = gJChronology2.weekyear();
        org.joda.time.DateTimeField dateTimeField9 = gJChronology2.weekyearOfCentury();
        org.joda.time.DurationField durationField10 = gJChronology2.halfdays();
        org.joda.time.Instant instant11 = gJChronology2.getGregorianCutover();
        org.joda.time.DateTimeField dateTimeField12 = gJChronology2.hourOfHalfday();
        org.joda.time.DurationField durationField13 = gJChronology2.centuries();
        int int15 = durationField13.getValue(2073600000L);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 4 + "'", int7 == 4);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(instant11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
    }

    @Test
    public void test19447() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19447");
        java.util.Locale locale1 = java.util.Locale.forLanguageTag("\u7fa9\u5927\u5229\u6587");
        java.lang.Object obj2 = locale1.clone();
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertNotNull(obj2);
        org.junit.Assert.assertEquals(obj2.toString(), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj2), "");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj2), "");
    }

    @Test
    public void test19448() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19448");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        boolean boolean2 = instant1.isEqualNow();
        org.joda.time.ReadableDuration readableDuration3 = null;
        org.joda.time.Instant instant4 = instant1.plus(readableDuration3);
        long long5 = instant1.getMillis();
        java.lang.String str6 = instant1.toString();
        org.joda.time.Instant instant7 = instant1.toInstant();
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.Instant instant10 = instant1.withDurationAdded(readableDuration8, (int) 'x');
        org.joda.time.DateTimeZone dateTimeZone11 = instant1.getZone();
        org.joda.time.Instant instant13 = new org.joda.time.Instant(52L);
        boolean boolean14 = instant13.isEqualNow();
        java.lang.String str15 = instant13.toString();
        java.util.TimeZone timeZone16 = null;
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forTimeZone(timeZone16);
        org.joda.time.chrono.GJChronology gJChronology18 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone17);
        java.util.Locale locale20 = new java.util.Locale("hi!");
        java.lang.String str21 = locale20.getCountry();
        java.util.Locale locale22 = java.util.Locale.getDefault();
        java.lang.String str23 = locale22.getDisplayName();
        java.lang.String str24 = locale20.getDisplayScript(locale22);
        boolean boolean25 = dateTimeZone17.equals((java.lang.Object) locale22);
        int int27 = dateTimeZone17.getOffsetFromLocal((long) (short) 10);
        java.util.TimeZone timeZone28 = null;
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forTimeZone(timeZone28);
        org.joda.time.chrono.GJChronology gJChronology30 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone29);
        org.joda.time.DateTimeField dateTimeField31 = gJChronology30.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField32 = gJChronology30.weekyearOfCentury();
        org.joda.time.Instant instant33 = gJChronology30.getGregorianCutover();
        org.joda.time.Instant instant35 = instant33.withMillis(0L);
        org.joda.time.Instant instant37 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone38 = null;
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.forTimeZone(timeZone38);
        org.joda.time.chrono.GJChronology gJChronology40 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone39);
        org.joda.time.DateTimeField dateTimeField41 = gJChronology40.millisOfSecond();
        int int42 = instant37.get(dateTimeField41);
        org.joda.time.Instant instant44 = instant37.plus(0L);
        int int45 = instant35.compareTo((org.joda.time.ReadableInstant) instant44);
        org.joda.time.DateTimeFieldType dateTimeFieldType46 = null;
        boolean boolean47 = instant44.isSupported(dateTimeFieldType46);
        int int48 = dateTimeZone17.getOffset((org.joda.time.ReadableInstant) instant44);
        boolean boolean49 = instant13.isAfter((org.joda.time.ReadableInstant) instant44);
        org.joda.time.Instant instant51 = instant44.withMillis((long) 10);
        boolean boolean52 = instant1.isEqual((org.joda.time.ReadableInstant) instant51);
        boolean boolean53 = instant1.isBeforeNow();
        org.joda.time.DateTimeZone dateTimeZone54 = instant1.getZone();
        boolean boolean56 = dateTimeZone54.isStandardOffset((long) (-457585131));
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(instant4);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 52L + "'", long5 == 52L);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "1970-01-01T00:00:00.052Z" + "'", str6, "1970-01-01T00:00:00.052Z");
        org.junit.Assert.assertNotNull(instant7);
        org.junit.Assert.assertNotNull(instant10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "1970-01-01T00:00:00.052Z" + "'", str15, "1970-01-01T00:00:00.052Z");
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(gJChronology18);
        org.junit.Assert.assertEquals(locale20.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "\u4e2d\u6587" + "'", str23, "\u4e2d\u6587");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int27 + "' != '" + 52 + "'", int27 == 52);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(gJChronology30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(instant33);
        org.junit.Assert.assertNotNull(instant35);
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertNotNull(gJChronology40);
        org.junit.Assert.assertNotNull(dateTimeField41);
// flaky:         org.junit.Assert.assertTrue("'" + int42 + "' != '" + 104 + "'", int42 == 104);
        org.junit.Assert.assertNotNull(instant44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int48 + "' != '" + 52 + "'", int48 == 52);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(instant51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(dateTimeZone54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
    }

    @Test
    public void test19449() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19449");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) -1, 1431201);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Minutes out of range: 1431201");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test19450() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19450");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = gJChronology2.halfdays();
        long long7 = gJChronology2.add((long) 'a', (-1L), (int) (short) 0);
        boolean boolean9 = gJChronology2.equals((java.lang.Object) 0);
        org.joda.time.DateTimeField dateTimeField10 = gJChronology2.dayOfMonth();
        org.joda.time.DurationField durationField11 = gJChronology2.seconds();
        org.joda.time.DateTimeField dateTimeField12 = gJChronology2.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField13 = gJChronology2.era();
        org.joda.time.DateTimeField dateTimeField14 = gJChronology2.hourOfDay();
        java.lang.String str15 = gJChronology2.toString();
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        long long19 = gJChronology2.add(readablePeriod16, 3732632410199948L, 12);
        org.joda.time.DateTimeField dateTimeField20 = gJChronology2.millisOfSecond();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 97L + "'", long7 == 97L);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "GJChronology[+00:00:00.052]" + "'", str15, "GJChronology[+00:00:00.052]");
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 3732632410199948L + "'", long19 == 3732632410199948L);
        org.junit.Assert.assertNotNull(dateTimeField20);
    }

    @Test
    public void test19451() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19451");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forTimeZone(timeZone2);
        org.joda.time.chrono.GJChronology gJChronology4 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone3);
        org.joda.time.DateTimeField dateTimeField5 = gJChronology4.millisOfSecond();
        int int6 = instant1.get(dateTimeField5);
        org.joda.time.Instant instant8 = instant1.plus(0L);
        java.util.TimeZone timeZone9 = null;
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forTimeZone(timeZone9);
        org.joda.time.chrono.GJChronology gJChronology11 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone10);
        org.joda.time.DurationField durationField12 = gJChronology11.halfdays();
        org.joda.time.Chronology chronology13 = gJChronology11.withUTC();
        java.lang.String str14 = gJChronology11.toString();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology11.hourOfHalfday();
        int int16 = instant1.get(dateTimeField15);
        org.joda.time.Instant instant18 = new org.joda.time.Instant(52L);
        boolean boolean19 = instant18.isEqualNow();
        java.lang.String str20 = instant18.toString();
        org.joda.time.Instant instant22 = new org.joda.time.Instant(52L);
        boolean boolean23 = instant22.isEqualNow();
        java.lang.String str24 = instant22.toString();
        java.lang.String str25 = instant22.toString();
        org.joda.time.Instant instant28 = instant22.withDurationAdded(115200000L, (int) (short) 1);
        int int29 = instant18.compareTo((org.joda.time.ReadableInstant) instant22);
        org.joda.time.Instant instant31 = new org.joda.time.Instant(52L);
        boolean boolean32 = instant31.isEqualNow();
        org.joda.time.ReadableDuration readableDuration33 = null;
        org.joda.time.Instant instant34 = instant31.plus(readableDuration33);
        boolean boolean36 = instant34.equals((java.lang.Object) ' ');
        boolean boolean37 = instant22.isAfter((org.joda.time.ReadableInstant) instant34);
        int int38 = instant1.compareTo((org.joda.time.ReadableInstant) instant22);
        org.joda.time.Instant instant40 = instant1.minus((long) (-99137));
        org.joda.time.Instant instant43 = instant40.withDurationAdded(61825636800000L, (int) (byte) 10);
        java.lang.String str44 = instant43.toString();
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(gJChronology4);
        org.junit.Assert.assertNotNull(dateTimeField5);
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 104 + "'", int6 == 104);
        org.junit.Assert.assertNotNull(instant8);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(gJChronology11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(chronology13);
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "GJChronology[+00:00:00.052]" + "'", str14, "GJChronology[+00:00:00.052]");
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "1970-01-01T00:00:00.052Z" + "'", str20, "1970-01-01T00:00:00.052Z");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "1970-01-01T00:00:00.052Z" + "'", str24, "1970-01-01T00:00:00.052Z");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "1970-01-01T00:00:00.052Z" + "'", str25, "1970-01-01T00:00:00.052Z");
        org.junit.Assert.assertNotNull(instant28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(instant34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(instant40);
        org.junit.Assert.assertNotNull(instant43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "21561-10-07T00:01:39.189Z" + "'", str44, "21561-10-07T00:01:39.189Z");
    }

    @Test
    public void test19452() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19452");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((java.lang.Object) 3732479999999948L);
        java.util.TimeZone timeZone2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forTimeZone(timeZone2);
        org.joda.time.chrono.GJChronology gJChronology4 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone3);
        org.joda.time.DateTimeField dateTimeField5 = gJChronology4.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology4.weekyearOfCentury();
        org.joda.time.Instant instant7 = gJChronology4.getGregorianCutover();
        org.joda.time.Instant instant9 = instant7.withMillis(0L);
        org.joda.time.Instant instant11 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone12 = null;
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forTimeZone(timeZone12);
        org.joda.time.chrono.GJChronology gJChronology14 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone13);
        org.joda.time.DateTimeField dateTimeField15 = gJChronology14.millisOfSecond();
        int int16 = instant11.get(dateTimeField15);
        org.joda.time.Instant instant18 = instant11.plus(0L);
        int int19 = instant9.compareTo((org.joda.time.ReadableInstant) instant18);
        org.joda.time.Instant instant21 = new org.joda.time.Instant(52L);
        boolean boolean22 = instant21.isEqualNow();
        org.joda.time.ReadableDuration readableDuration23 = null;
        org.joda.time.Instant instant24 = instant21.plus(readableDuration23);
        boolean boolean26 = instant24.equals((java.lang.Object) ' ');
        boolean boolean27 = instant18.isEqual((org.joda.time.ReadableInstant) instant24);
        org.joda.time.ReadableDuration readableDuration28 = null;
        org.joda.time.Instant instant30 = instant18.withDurationAdded(readableDuration28, 0);
        int int31 = instant1.compareTo((org.joda.time.ReadableInstant) instant18);
        org.joda.time.DateTimeZone dateTimeZone32 = instant18.getZone();
        org.joda.time.Instant instant34 = instant18.plus((-11L));
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(gJChronology4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(instant7);
        org.junit.Assert.assertNotNull(instant9);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(gJChronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
// flaky:         org.junit.Assert.assertTrue("'" + int16 + "' != '" + 104 + "'", int16 == 104);
        org.junit.Assert.assertNotNull(instant18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(instant24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(instant30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertNotNull(instant34);
    }

    @Test
    public void test19453() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19453");
        java.util.Locale locale1 = new java.util.Locale("hi!");
        java.lang.String str2 = locale1.getCountry();
        java.lang.String str3 = locale1.getCountry();
        java.util.Locale locale5 = new java.util.Locale("hi!");
        java.lang.String str6 = locale5.getCountry();
        java.lang.String str7 = locale5.getScript();
        java.util.Locale locale8 = java.util.Locale.ITALIAN;
        java.util.Locale locale9 = locale8.stripExtensions();
        java.util.Locale locale10 = java.util.Locale.CANADA;
        java.lang.String str11 = locale8.getDisplayVariant(locale10);
        java.lang.String str12 = locale5.getDisplayScript(locale8);
        java.lang.String str13 = locale1.getDisplayCountry(locale5);
        java.util.Locale locale14 = java.util.Locale.ENGLISH;
        java.lang.String str15 = locale1.getDisplayLanguage(locale14);
        java.lang.String str16 = locale14.getISO3Country();
        org.junit.Assert.assertEquals(locale1.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals(locale5.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "it");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "it");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "en");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hi!" + "'", str15, "hi!");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
    }

    @Test
    public void test19454() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19454");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = gJChronology2.halfdays();
        long long7 = gJChronology2.add((long) 'a', (-1L), (int) (short) 0);
        boolean boolean9 = gJChronology2.equals((java.lang.Object) 0);
        org.joda.time.DateTimeField dateTimeField10 = gJChronology2.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField11 = gJChronology2.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField12 = gJChronology2.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField13 = gJChronology2.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField14 = gJChronology2.weekyear();
        java.util.TimeZone timeZone15 = null;
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forTimeZone(timeZone15);
        org.joda.time.chrono.GJChronology gJChronology17 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone16);
        org.joda.time.DateTimeField dateTimeField18 = gJChronology17.millisOfSecond();
        org.joda.time.DurationField durationField19 = gJChronology17.millis();
        org.joda.time.DateTimeZone dateTimeZone20 = gJChronology17.getZone();
        org.joda.time.Chronology chronology21 = gJChronology2.withZone(dateTimeZone20);
        boolean boolean22 = dateTimeZone20.isFixed();
        boolean boolean24 = dateTimeZone20.isStandardOffset(0L);
        java.util.TimeZone timeZone25 = null;
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forTimeZone(timeZone25);
        java.lang.String str28 = dateTimeZone26.getNameKey((long) 100);
        boolean boolean29 = dateTimeZone26.isFixed();
        java.util.Locale locale33 = new java.util.Locale("DurationField[halfdays]", "\u82f1\u6587");
        java.lang.String str34 = dateTimeZone26.getName((long) (short) 10, locale33);
        org.joda.time.Instant instant36 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone37 = null;
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forTimeZone(timeZone37);
        org.joda.time.chrono.GJChronology gJChronology39 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone38);
        org.joda.time.DateTimeField dateTimeField40 = gJChronology39.millisOfSecond();
        int int41 = instant36.get(dateTimeField40);
        org.joda.time.Chronology chronology42 = instant36.getChronology();
        org.joda.time.chrono.GJChronology gJChronology43 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone26, (org.joda.time.ReadableInstant) instant36);
        long long44 = instant36.getMillis();
        org.joda.time.ReadableDuration readableDuration45 = null;
        org.joda.time.Instant instant46 = instant36.minus(readableDuration45);
        boolean boolean48 = instant36.isAfter(0L);
        int int49 = dateTimeZone20.getOffset((org.joda.time.ReadableInstant) instant36);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 97L + "'", long7 == 97L);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(gJChronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(dateTimeZone26);
// flaky:         org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
// flaky:         org.junit.Assert.assertEquals(locale33.toString(), "\u82f1\u6587");
// flaky:         org.junit.Assert.assertEquals("'" + str34 + "' != '" + "+00:00:00.052" + "'", str34, "+00:00:00.052");
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertNotNull(gJChronology39);
        org.junit.Assert.assertNotNull(dateTimeField40);
// flaky:         org.junit.Assert.assertTrue("'" + int41 + "' != '" + 104 + "'", int41 == 104);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(gJChronology43);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 52L + "'", long44 == 52L);
        org.junit.Assert.assertNotNull(instant46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int49 + "' != '" + 52 + "'", int49 == 52);
    }

    @Test
    public void test19455() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19455");
        java.util.Locale locale1 = new java.util.Locale("tedesco");
        java.util.Set<java.lang.Character> charSet2 = locale1.getExtensionKeys();
        java.util.Locale locale5 = new java.util.Locale("DurationField[halfdays]", "\u82f1\u6587");
        java.util.Set<java.lang.Character> charSet6 = locale5.getExtensionKeys();
        java.lang.String str7 = locale5.getDisplayCountry();
        java.lang.String str8 = locale1.getDisplayScript(locale5);
        java.util.Locale locale10 = new java.util.Locale("DurationField[centuries]");
        java.lang.String str11 = locale10.getDisplayName();
        java.lang.String str12 = locale10.getDisplayName();
        java.lang.String str13 = locale1.getDisplayCountry(locale10);
        java.util.TimeZone timeZone14 = null;
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forTimeZone(timeZone14);
        org.joda.time.chrono.GJChronology gJChronology16 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone15);
        org.joda.time.DurationField durationField17 = gJChronology16.halfdays();
        long long21 = gJChronology16.add((long) 'a', (-1L), (int) (short) 0);
        boolean boolean23 = gJChronology16.equals((java.lang.Object) 0);
        org.joda.time.DateTimeField dateTimeField24 = gJChronology16.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField25 = gJChronology16.weekOfWeekyear();
        java.util.Locale locale27 = new java.util.Locale("hi!");
        java.lang.String str28 = locale27.getCountry();
        java.util.Locale locale29 = java.util.Locale.getDefault();
        java.lang.String str30 = locale29.getDisplayName();
        java.lang.String str31 = locale27.getDisplayScript(locale29);
        java.util.Set<java.lang.Character> charSet32 = locale29.getExtensionKeys();
        java.util.Set<java.lang.String> strSet33 = locale29.getUnicodeLocaleAttributes();
        java.util.Locale locale34 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale35 = java.util.Locale.ENGLISH;
        java.lang.String str36 = locale34.getDisplayLanguage(locale35);
        java.util.Locale locale37 = java.util.Locale.CANADA;
        java.lang.String str38 = locale37.getISO3Language();
        java.lang.String str39 = locale34.getDisplayVariant(locale37);
        java.util.Set<java.lang.String> strSet40 = locale34.getUnicodeLocaleKeys();
        java.util.Locale locale44 = new java.util.Locale("zh", "en", "");
        java.lang.String str45 = locale34.getDisplayName(locale44);
        java.lang.String str46 = locale44.getVariant();
        java.lang.String str47 = locale29.getDisplayVariant(locale44);
        boolean boolean48 = gJChronology16.equals((java.lang.Object) locale29);
        java.lang.String str49 = locale10.getDisplayLanguage(locale29);
        org.junit.Assert.assertEquals(locale1.toString(), "tedesco");
        org.junit.Assert.assertNotNull(charSet2);
// flaky:         org.junit.Assert.assertEquals(locale5.toString(), "\u82f1\u6587");
        org.junit.Assert.assertNotNull(charSet6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\u82f1\u6587" + "'", str7, "\u82f1\u6587");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals(locale10.toString(), "durationfield[centuries]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "durationfield[centuries]" + "'", str11, "durationfield[centuries]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "durationfield[centuries]" + "'", str12, "durationfield[centuries]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(gJChronology16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 97L + "'", long21 == 97L);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertEquals(locale27.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "\u4e2d\u6587" + "'", str30, "\u4e2d\u6587");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(charSet32);
        org.junit.Assert.assertNotNull(strSet33);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "en");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "Chinese" + "'", str36, "Chinese");
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "eng" + "'", str38, "eng");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertNotNull(strSet40);
        org.junit.Assert.assertEquals(locale44.toString(), "zh_EN");
// flaky:         org.junit.Assert.assertEquals("'" + str45 + "' != '" + "\u4e2d\u6587\u53f0\u6e7e\u5730\u533a)" + "'", str45, "\u4e2d\u6587\u53f0\u6e7e\u5730\u533a)");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "durationfield[centuries]" + "'", str49, "durationfield[centuries]");
    }

    @Test
    public void test19456() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19456");
        java.util.Locale locale3 = new java.util.Locale("GJChronology[+52:00]", "Italienisch", "DurationField[minutes]");
        org.junit.Assert.assertEquals(locale3.toString(), "gjchronology[+52:00]_ITALIENISCH_DurationField[minutes]");
    }

    @Test
    public void test19457() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19457");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        int int4 = dateTimeZone1.getOffsetFromLocal((long) (-1));
        boolean boolean5 = dateTimeZone1.isFixed();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 0, (int) (byte) 1);
        boolean boolean12 = dateTimeZone10.isStandardOffset(186641343849600000L);
        java.lang.String str13 = dateTimeZone10.getID();
        java.util.Locale.Category category15 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale16 = java.util.Locale.getDefault();
        boolean boolean17 = locale16.hasExtensions();
        java.lang.String str18 = locale16.getISO3Language();
        java.util.Locale.setDefault(category15, locale16);
        java.lang.String str20 = locale16.getLanguage();
        java.lang.String str21 = locale16.toLanguageTag();
        java.util.Locale locale22 = locale16.stripExtensions();
        java.lang.String str23 = dateTimeZone10.getName(43200204L, locale16);
        java.util.Locale locale24 = locale16.stripExtensions();
        java.lang.String str25 = dateTimeZone1.getShortName((-18L), locale24);
        java.util.Set<java.lang.String> strSet26 = locale24.getUnicodeLocaleAttributes();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(gJChronology2);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+00:01" + "'", str13, "+00:01");
        org.junit.Assert.assertTrue("'" + category15 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category15.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "zh");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "zho" + "'", str18, "zho");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "zh" + "'", str20, "zh");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "zh" + "'", str21, "zh");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "+00:01" + "'", str23, "+00:01");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "zh");
// flaky:         org.junit.Assert.assertEquals("'" + str25 + "' != '" + "+00:00:00.052" + "'", str25, "+00:00:00.052");
        org.junit.Assert.assertNotNull(strSet26);
    }

    @Test
    public void test19458() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19458");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours(4);
        int int3 = dateTimeZone1.getStandardOffset((-1555172182800000L));
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 14400000 + "'", int3 == 14400000);
    }

    @Test
    public void test19459() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19459");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        boolean boolean2 = instant1.isEqualNow();
        org.joda.time.ReadableDuration readableDuration3 = null;
        org.joda.time.Instant instant4 = instant1.plus(readableDuration3);
        org.joda.time.Instant instant6 = new org.joda.time.Instant(52L);
        org.joda.time.Instant instant8 = instant6.withMillis((long) 'u');
        boolean boolean9 = instant1.isBefore((org.joda.time.ReadableInstant) instant6);
        org.joda.time.Instant instant10 = instant6.toInstant();
        org.joda.time.Instant instant12 = instant10.withMillis(7472212848000000L);
        boolean boolean14 = instant12.isEqual(1644572905966L);
        org.joda.time.Instant instant16 = new org.joda.time.Instant(52L);
        boolean boolean17 = instant16.isEqualNow();
        java.lang.String str18 = instant16.toString();
        org.joda.time.DateTimeZone dateTimeZone19 = instant16.getZone();
        java.util.TimeZone timeZone20 = null;
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forTimeZone(timeZone20);
        org.joda.time.chrono.GJChronology gJChronology22 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone21);
        org.joda.time.DurationField durationField23 = gJChronology22.halfdays();
        org.joda.time.DateTimeField dateTimeField24 = gJChronology22.millisOfDay();
        org.joda.time.DateTimeField dateTimeField25 = gJChronology22.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField26 = gJChronology22.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone27 = gJChronology22.getZone();
        boolean boolean28 = dateTimeZone27.isFixed();
        boolean boolean29 = dateTimeZone27.isFixed();
        java.lang.String str30 = dateTimeZone27.toString();
        java.util.TimeZone timeZone31 = null;
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.forTimeZone(timeZone31);
        org.joda.time.chrono.GJChronology gJChronology33 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone32);
        org.joda.time.DateTimeField dateTimeField34 = gJChronology33.millisOfSecond();
        org.joda.time.DurationField durationField35 = gJChronology33.millis();
        org.joda.time.ReadablePeriod readablePeriod36 = null;
        long long39 = gJChronology33.add(readablePeriod36, (long) 'a', (int) '4');
        org.joda.time.DateTimeField dateTimeField40 = gJChronology33.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField41 = gJChronology33.yearOfCentury();
        boolean boolean42 = dateTimeZone27.equals((java.lang.Object) dateTimeField41);
        int int44 = dateTimeZone27.getOffsetFromLocal((long) ' ');
        long long46 = dateTimeZone19.getMillisKeepLocal(dateTimeZone27, 1431201L);
        long long48 = dateTimeZone27.convertUTCToLocal(0L);
        int int50 = dateTimeZone27.getOffset((-6720000L));
        java.lang.String str52 = dateTimeZone27.getShortName(3155695200000L);
        int int54 = dateTimeZone27.getOffset(0L);
        org.joda.time.DateTime dateTime55 = instant12.toDateTime(dateTimeZone27);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(instant4);
        org.junit.Assert.assertNotNull(instant8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(instant10);
        org.junit.Assert.assertNotNull(instant12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "1970-01-01T00:00:00.052Z" + "'", str18, "1970-01-01T00:00:00.052Z");
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(gJChronology22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str30 + "' != '" + "+00:00:00.052" + "'", str30, "+00:00:00.052");
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertNotNull(gJChronology33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(durationField35);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 97L + "'", long39 == 97L);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int44 + "' != '" + 52 + "'", int44 == 52);
// flaky:         org.junit.Assert.assertTrue("'" + long46 + "' != '" + 1431149L + "'", long46 == 1431149L);
// flaky:         org.junit.Assert.assertTrue("'" + long48 + "' != '" + 52L + "'", long48 == 52L);
// flaky:         org.junit.Assert.assertTrue("'" + int50 + "' != '" + 52 + "'", int50 == 52);
// flaky:         org.junit.Assert.assertEquals("'" + str52 + "' != '" + "+00:00:00.052" + "'", str52, "+00:00:00.052");
// flaky:         org.junit.Assert.assertTrue("'" + int54 + "' != '" + 52 + "'", int54 == 52);
        org.junit.Assert.assertNotNull(dateTime55);
    }

    @Test
    public void test19460() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19460");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField3 = gJChronology2.millisOfSecond();
        org.joda.time.DurationField durationField4 = gJChronology2.millis();
        org.joda.time.DurationField durationField5 = gJChronology2.weekyears();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology2.dayOfYear();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology2.yearOfEra();
        org.joda.time.DateTimeField dateTimeField8 = gJChronology2.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField9 = gJChronology2.secondOfDay();
        org.joda.time.DateTimeField dateTimeField10 = gJChronology2.year();
        org.joda.time.DateTimeField dateTimeField11 = gJChronology2.secondOfMinute();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
    }

    @Test
    public void test19461() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19461");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str3 = dateTimeZone1.getNameKey((long) 100);
        boolean boolean4 = dateTimeZone1.isFixed();
        java.util.Locale locale8 = new java.util.Locale("DurationField[halfdays]", "\u82f1\u6587");
        java.lang.String str9 = dateTimeZone1.getName((long) (short) 10, locale8);
        org.joda.time.Instant instant11 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone12 = null;
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forTimeZone(timeZone12);
        org.joda.time.chrono.GJChronology gJChronology14 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone13);
        org.joda.time.DateTimeField dateTimeField15 = gJChronology14.millisOfSecond();
        int int16 = instant11.get(dateTimeField15);
        org.joda.time.Chronology chronology17 = instant11.getChronology();
        org.joda.time.chrono.GJChronology gJChronology18 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1, (org.joda.time.ReadableInstant) instant11);
        java.util.TimeZone timeZone19 = null;
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forTimeZone(timeZone19);
        org.joda.time.chrono.GJChronology gJChronology21 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone20);
        org.joda.time.DurationField durationField22 = gJChronology21.halfdays();
        org.joda.time.Chronology chronology23 = gJChronology21.withUTC();
        java.lang.String str24 = gJChronology21.toString();
        org.joda.time.DateTimeField dateTimeField25 = gJChronology21.hourOfHalfday();
        java.util.TimeZone timeZone26 = null;
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forTimeZone(timeZone26);
        java.lang.String str29 = dateTimeZone27.getNameKey((long) 100);
        boolean boolean30 = dateTimeZone27.isFixed();
        org.joda.time.chrono.GJChronology gJChronology31 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone27);
        java.lang.String str32 = dateTimeZone27.toString();
        long long35 = dateTimeZone27.adjustOffset((-61827739199999L), false);
        org.joda.time.Chronology chronology36 = gJChronology21.withZone(dateTimeZone27);
        org.joda.time.Chronology chronology37 = gJChronology18.withZone(dateTimeZone27);
        org.joda.time.DurationField durationField38 = gJChronology18.seconds();
        java.util.TimeZone timeZone39 = null;
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.forTimeZone(timeZone39);
        org.joda.time.chrono.GJChronology gJChronology41 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone40);
        long long45 = dateTimeZone40.convertLocalToUTC((long) (byte) -1, true, 0L);
        boolean boolean47 = dateTimeZone40.equals((java.lang.Object) true);
        long long51 = dateTimeZone40.convertLocalToUTC((long) 'a', true, 0L);
        int int53 = dateTimeZone40.getOffset((long) (byte) -1);
        boolean boolean55 = dateTimeZone40.isStandardOffset(600393600000L);
        java.util.TimeZone timeZone56 = null;
        org.joda.time.DateTimeZone dateTimeZone57 = org.joda.time.DateTimeZone.forTimeZone(timeZone56);
        org.joda.time.chrono.GJChronology gJChronology58 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone57);
        org.joda.time.DateTimeField dateTimeField59 = gJChronology58.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField60 = gJChronology58.weekyear();
        org.joda.time.DateTimeField dateTimeField61 = gJChronology58.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField62 = gJChronology58.dayOfYear();
        org.joda.time.DateTimeField dateTimeField63 = gJChronology58.minuteOfDay();
        boolean boolean64 = dateTimeZone40.equals((java.lang.Object) gJChronology58);
        org.joda.time.Chronology chronology65 = gJChronology18.withZone(dateTimeZone40);
        org.joda.time.chrono.GJChronology gJChronology66 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone40);
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
// flaky:         org.junit.Assert.assertEquals(locale8.toString(), "\u82f1\u6587");
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+00:00:00.052" + "'", str9, "+00:00:00.052");
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(gJChronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
// flaky:         org.junit.Assert.assertTrue("'" + int16 + "' != '" + 104 + "'", int16 == 104);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(gJChronology18);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(gJChronology21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(chronology23);
// flaky:         org.junit.Assert.assertEquals("'" + str24 + "' != '" + "GJChronology[+00:00:00.052]" + "'", str24, "GJChronology[+00:00:00.052]");
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeZone27);
// flaky:         org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(gJChronology31);
// flaky:         org.junit.Assert.assertEquals("'" + str32 + "' != '" + "+00:00:00.052" + "'", str32, "+00:00:00.052");
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + (-61827739199999L) + "'", long35 == (-61827739199999L));
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(durationField38);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertNotNull(gJChronology41);
// flaky:         org.junit.Assert.assertTrue("'" + long45 + "' != '" + (-53L) + "'", long45 == (-53L));
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long51 + "' != '" + 45L + "'", long51 == 45L);
// flaky:         org.junit.Assert.assertTrue("'" + int53 + "' != '" + 52 + "'", int53 == 52);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(dateTimeZone57);
        org.junit.Assert.assertNotNull(gJChronology58);
        org.junit.Assert.assertNotNull(dateTimeField59);
        org.junit.Assert.assertNotNull(dateTimeField60);
        org.junit.Assert.assertNotNull(dateTimeField61);
        org.junit.Assert.assertNotNull(dateTimeField62);
        org.junit.Assert.assertNotNull(dateTimeField63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(chronology65);
        org.junit.Assert.assertNotNull(gJChronology66);
    }

    @Test
    public void test19462() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19462");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = gJChronology2.halfdays();
        long long7 = gJChronology2.add((long) 'a', (-1L), (int) (short) 0);
        boolean boolean9 = gJChronology2.equals((java.lang.Object) 0);
        org.joda.time.DateTimeField dateTimeField10 = gJChronology2.dayOfWeek();
        org.joda.time.DurationField durationField11 = gJChronology2.eras();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 97L + "'", long7 == 97L);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(durationField11);
    }

    @Test
    public void test19463() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19463");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = gJChronology2.halfdays();
        long long7 = gJChronology2.add(0L, (long) (short) -1, (int) '4');
        org.joda.time.DurationField durationField8 = gJChronology2.weeks();
        org.joda.time.DurationField durationField9 = gJChronology2.hours();
        org.joda.time.DateTimeField dateTimeField10 = gJChronology2.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField11 = gJChronology2.year();
        org.joda.time.DateTimeField dateTimeField12 = gJChronology2.secondOfMinute();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-52L) + "'", long7 == (-52L));
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
    }

    @Test
    public void test19464() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19464");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = gJChronology2.halfdays();
        long long7 = gJChronology2.add((long) 'a', (-1L), (int) (short) 0);
        boolean boolean9 = gJChronology2.equals((java.lang.Object) 0);
        org.joda.time.DateTimeField dateTimeField10 = gJChronology2.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField11 = gJChronology2.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField12 = gJChronology2.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField13 = gJChronology2.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField14 = gJChronology2.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology2.yearOfEra();
        org.joda.time.DateTimeField dateTimeField16 = gJChronology2.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField17 = gJChronology2.clockhourOfDay();
        org.joda.time.DurationField durationField18 = gJChronology2.centuries();
        java.lang.String str19 = gJChronology2.toString();
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray22 = gJChronology2.get(readablePeriod20, 383346000L);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 97L + "'", long7 == 97L);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(durationField18);
// flaky:         org.junit.Assert.assertEquals("'" + str19 + "' != '" + "GJChronology[+00:00:00.052]" + "'", str19, "GJChronology[+00:00:00.052]");
    }

    @Test
    public void test19465() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19465");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField3 = gJChronology2.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.weekyear();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.halfdayOfDay();
        org.joda.time.DurationField durationField6 = gJChronology2.years();
        org.joda.time.DurationField durationField7 = gJChronology2.minutes();
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        long long11 = gJChronology2.add(readablePeriod8, (-42L), (int) '4');
        org.joda.time.Chronology chronology12 = gJChronology2.withUTC();
        org.joda.time.DateTimeField dateTimeField13 = gJChronology2.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField14 = gJChronology2.dayOfYear();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology2.yearOfEra();
        org.joda.time.DateTimeField dateTimeField16 = gJChronology2.dayOfMonth();
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        long long20 = gJChronology2.add(readablePeriod17, 747160639611200L, 1869);
        org.joda.time.DurationField durationField21 = gJChronology2.hours();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-42L) + "'", long11 == (-42L));
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 747160639611200L + "'", long20 == 747160639611200L);
        org.junit.Assert.assertNotNull(durationField21);
    }

    @Test
    public void test19466() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19466");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        java.util.Locale locale4 = new java.util.Locale("hi!");
        java.lang.String str5 = locale4.getCountry();
        java.util.Locale locale6 = java.util.Locale.getDefault();
        java.lang.String str7 = locale6.getDisplayName();
        java.lang.String str8 = locale4.getDisplayScript(locale6);
        boolean boolean9 = dateTimeZone1.equals((java.lang.Object) locale6);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetMillis((int) '4');
        java.util.TimeZone timeZone12 = dateTimeZone11.toTimeZone();
        long long15 = dateTimeZone11.adjustOffset((long) 0, false);
        int int17 = dateTimeZone11.getOffsetFromLocal((-26438399999L));
        long long19 = dateTimeZone1.getMillisKeepLocal(dateTimeZone11, (long) (byte) 10);
        org.joda.time.chrono.GJChronology gJChronology20 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone11);
        org.joda.time.DateTimeField dateTimeField21 = gJChronology20.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField22 = gJChronology20.millisOfSecond();
        org.joda.time.DurationField durationField23 = gJChronology20.seconds();
        java.lang.String str24 = durationField23.toString();
        long long27 = durationField23.add((-17131290975288000L), (long) (-298));
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertEquals(locale4.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\u4e2d\u6587" + "'", str7, "\u4e2d\u6587");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(timeZone12);
        org.junit.Assert.assertEquals(timeZone12.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 52 + "'", int17 == 52);
// flaky:         org.junit.Assert.assertTrue("'" + long19 + "' != '" + 10L + "'", long19 == 10L);
        org.junit.Assert.assertNotNull(gJChronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "DurationField[seconds]" + "'", str24, "DurationField[seconds]");
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + (-17131290975586000L) + "'", long27 == (-17131290975586000L));
    }

    @Test
    public void test19467() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19467");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) '#');
        java.lang.String str2 = instant1.toString();
        org.joda.time.DateTimeZone dateTimeZone3 = instant1.getZone();
        org.joda.time.DateTimeZone dateTimeZone4 = instant1.getZone();
        long long6 = dateTimeZone4.convertUTCToLocal(0L);
        java.lang.String str7 = dateTimeZone4.getID();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "1970-01-01T00:00:00.035Z" + "'", str2, "1970-01-01T00:00:00.035Z");
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "UTC" + "'", str7, "UTC");
    }

    @Test
    public void test19468() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19468");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = gJChronology2.halfdays();
        long long7 = gJChronology2.add((long) 'a', (-1L), (int) (short) 0);
        long long11 = gJChronology2.add((long) (byte) 0, (long) '4', 100);
        org.joda.time.DateTimeField dateTimeField12 = gJChronology2.minuteOfHour();
        org.joda.time.DurationField durationField13 = gJChronology2.hours();
        org.joda.time.DateTimeField dateTimeField14 = gJChronology2.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology2.weekyearOfCentury();
        org.joda.time.Chronology chronology16 = gJChronology2.withUTC();
        long long20 = gJChronology2.add(52L, 4320000100L, (int) (byte) -1);
        // The following exception was thrown during execution in test generation
        try {
            long long25 = gJChronology2.getDateTimeMillis(27, 135, (int) 'x', (-1020));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -1020 for millisOfDay must be in the range [0,86399999]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 97L + "'", long7 == 97L);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 5200L + "'", long11 == 5200L);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + (-4320000048L) + "'", long20 == (-4320000048L));
    }

    @Test
    public void test19469() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19469");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = gJChronology2.halfdays();
        long long7 = gJChronology2.add((long) 'a', (-1L), (int) (short) 0);
        long long11 = gJChronology2.add((long) (byte) 0, (long) '4', 100);
        org.joda.time.DurationField durationField12 = gJChronology2.years();
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        long long16 = gJChronology2.add(readablePeriod13, (long) '#', (int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(0, (int) (short) 10);
        java.util.Locale locale23 = new java.util.Locale("cinese (Taiwan)", "DurationField[weekyears]");
        java.lang.String str24 = dateTimeZone19.getShortName((long) ' ', locale23);
        org.joda.time.Chronology chronology25 = gJChronology2.withZone(dateTimeZone19);
        org.joda.time.DateTimeField dateTimeField26 = gJChronology2.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField27 = gJChronology2.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField28 = gJChronology2.secondOfDay();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 97L + "'", long7 == 97L);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 5200L + "'", long11 == 5200L);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 35L + "'", long16 == 35L);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertEquals(locale23.toString(), "cinese (taiwan)_DURATIONFIELD[WEEKYEARS]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "+00:10" + "'", str24, "+00:10");
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
    }

    @Test
    public void test19470() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19470");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = gJChronology2.halfdays();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.millisOfDay();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.minuteOfDay();
        org.joda.time.DurationField durationField6 = gJChronology2.centuries();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology2.dayOfYear();
        java.lang.String str8 = gJChronology2.toString();
        org.joda.time.DateTimeField dateTimeField9 = gJChronology2.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone10 = gJChronology2.getZone();
        org.joda.time.chrono.GJChronology gJChronology11 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone10);
        org.joda.time.DateTimeField dateTimeField12 = gJChronology11.clockhourOfDay();
        long long16 = gJChronology11.add((long) (byte) 100, 60000L, 432086114);
        org.joda.time.ReadablePartial readablePartial17 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray19 = gJChronology11.get(readablePartial17, 25107085123201869L);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "GJChronology[+00:00:00.052]" + "'", str8, "GJChronology[+00:00:00.052]");
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(gJChronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 25925166840100L + "'", long16 == 25925166840100L);
    }

    @Test
    public void test19471() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19471");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = gJChronology2.halfdays();
        long long7 = gJChronology2.add((long) 'a', (-1L), (int) (short) 0);
        boolean boolean9 = gJChronology2.equals((java.lang.Object) 0);
        org.joda.time.DateTimeField dateTimeField10 = gJChronology2.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField11 = gJChronology2.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField12 = gJChronology2.clockhourOfDay();
        long long17 = gJChronology2.getDateTimeMillis(10, (int) (short) 10, 4, (int) (byte) 1);
        org.joda.time.DateTimeField dateTimeField18 = gJChronology2.millisOfDay();
        java.lang.String str19 = gJChronology2.toString();
        org.joda.time.DateTimeField dateTimeField20 = gJChronology2.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField21 = gJChronology2.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField22 = gJChronology2.clockhourOfHalfday();
        long long26 = gJChronology2.add((-871607399880L), 7200000L, 115200);
        org.joda.time.DateTimeField dateTimeField27 = gJChronology2.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField28 = gJChronology2.yearOfCentury();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 97L + "'", long7 == 97L);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
// flaky:         org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-61827926400051L) + "'", long17 == (-61827926400051L));
        org.junit.Assert.assertNotNull(dateTimeField18);
// flaky:         org.junit.Assert.assertEquals("'" + str19 + "' != '" + "GJChronology[+00:00:00.052]" + "'", str19, "GJChronology[+00:00:00.052]");
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + (-42167399880L) + "'", long26 == (-42167399880L));
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
    }

    @Test
    public void test19472() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19472");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = gJChronology2.halfdays();
        org.joda.time.Chronology chronology4 = gJChronology2.withUTC();
        java.lang.String str5 = gJChronology2.toString();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology2.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(1, 10);
        org.joda.time.Chronology chronology10 = gJChronology2.withZone(dateTimeZone9);
        org.joda.time.DateTimeField dateTimeField11 = gJChronology2.weekyear();
        java.util.TimeZone timeZone12 = null;
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forTimeZone(timeZone12);
        org.joda.time.chrono.GJChronology gJChronology14 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone13);
        long long18 = dateTimeZone13.convertLocalToUTC((long) (byte) -1, true, 0L);
        boolean boolean20 = dateTimeZone13.equals((java.lang.Object) true);
        org.joda.time.chrono.GJChronology gJChronology21 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone13);
        org.joda.time.DateTimeField dateTimeField22 = gJChronology21.weekyear();
        org.joda.time.DateTimeField dateTimeField23 = gJChronology21.era();
        org.joda.time.DateTimeField dateTimeField24 = gJChronology21.centuryOfEra();
        org.joda.time.Chronology chronology25 = gJChronology21.withUTC();
        org.joda.time.DurationField durationField26 = gJChronology21.years();
        org.joda.time.DateTimeZone dateTimeZone27 = gJChronology21.getZone();
        org.joda.time.Chronology chronology28 = gJChronology2.withZone(dateTimeZone27);
        org.joda.time.DateTimeField dateTimeField29 = gJChronology2.secondOfMinute();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(chronology4);
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "GJChronology[+00:00:00.052]" + "'", str5, "GJChronology[+00:00:00.052]");
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(gJChronology14);
// flaky:         org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-53L) + "'", long18 == (-53L));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(gJChronology21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
    }

    @Test
    public void test19473() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19473");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = gJChronology2.years();
        java.util.TimeZone timeZone4 = null;
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forTimeZone(timeZone4);
        org.joda.time.chrono.GJChronology gJChronology6 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone5);
        org.joda.time.DurationField durationField7 = gJChronology6.halfdays();
        org.joda.time.DateTimeField dateTimeField8 = gJChronology6.millisOfDay();
        org.joda.time.DateTimeField dateTimeField9 = gJChronology6.minuteOfDay();
        org.joda.time.DurationField durationField10 = gJChronology6.centuries();
        java.util.TimeZone timeZone11 = null;
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forTimeZone(timeZone11);
        org.joda.time.chrono.GJChronology gJChronology13 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone12);
        org.joda.time.DurationField durationField14 = gJChronology13.halfdays();
        long long17 = durationField14.add((long) 100, 100L);
        boolean boolean18 = durationField14.isPrecise();
        int int19 = durationField10.compareTo(durationField14);
        boolean boolean20 = gJChronology2.equals((java.lang.Object) durationField10);
        java.util.TimeZone timeZone21 = null;
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forTimeZone(timeZone21);
        org.joda.time.chrono.GJChronology gJChronology23 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone22);
        org.joda.time.DurationField durationField24 = gJChronology23.halfdays();
        org.joda.time.DateTimeField dateTimeField25 = gJChronology23.millisOfDay();
        org.joda.time.DateTimeField dateTimeField26 = gJChronology23.minuteOfDay();
        org.joda.time.DurationField durationField27 = gJChronology23.centuries();
        org.joda.time.DateTimeField dateTimeField28 = gJChronology23.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField29 = gJChronology23.year();
        org.joda.time.DateTimeField dateTimeField30 = gJChronology23.weekOfWeekyear();
        boolean boolean31 = gJChronology2.equals((java.lang.Object) dateTimeField30);
        org.joda.time.DateTimeField dateTimeField32 = gJChronology2.secondOfDay();
        org.joda.time.Instant instant33 = gJChronology2.getGregorianCutover();
        org.joda.time.DateTimeField dateTimeField34 = gJChronology2.dayOfWeek();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(gJChronology6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(gJChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 4320000100L + "'", long17 == 4320000100L);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(gJChronology23);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(instant33);
        org.junit.Assert.assertNotNull(dateTimeField34);
    }

    @Test
    public void test19474() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19474");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str3 = dateTimeZone1.getNameKey((long) 100);
        boolean boolean4 = dateTimeZone1.isFixed();
        org.joda.time.chrono.GJChronology gJChronology5 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        int int6 = gJChronology5.getMinimumDaysInFirstWeek();
        java.lang.String str7 = gJChronology5.toString();
        org.joda.time.DurationField durationField8 = gJChronology5.hours();
        org.joda.time.DateTimeField dateTimeField9 = gJChronology5.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField10 = gJChronology5.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField11 = gJChronology5.clockhourOfHalfday();
        org.joda.time.DurationField durationField12 = gJChronology5.minutes();
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(gJChronology5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 4 + "'", int6 == 4);
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "GJChronology[+00:00:00.052]" + "'", str7, "GJChronology[+00:00:00.052]");
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(durationField12);
    }

    @Test
    public void test19475() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19475");
        java.util.Locale locale0 = java.util.Locale.ITALIAN;
        java.lang.String str1 = locale0.getCountry();
        java.lang.String str2 = locale0.getDisplayCountry();
        java.util.Set<java.lang.Character> charSet3 = locale0.getExtensionKeys();
        java.lang.Class<?> wildcardClass4 = charSet3.getClass();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "it");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(charSet3);
        org.junit.Assert.assertNotNull(wildcardClass4);
    }

    @Test
    public void test19476() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19476");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = gJChronology2.halfdays();
        long long7 = gJChronology2.add((long) 'a', (-1L), (int) (short) 0);
        boolean boolean9 = gJChronology2.equals((java.lang.Object) 0);
        org.joda.time.DateTimeField dateTimeField10 = gJChronology2.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField11 = gJChronology2.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField12 = gJChronology2.clockhourOfDay();
        long long17 = gJChronology2.getDateTimeMillis(10, (int) (short) 10, 4, (int) (byte) 1);
        org.joda.time.DateTimeField dateTimeField18 = gJChronology2.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField19 = gJChronology2.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField20 = gJChronology2.secondOfDay();
        java.util.TimeZone timeZone21 = null;
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forTimeZone(timeZone21);
        org.joda.time.chrono.GJChronology gJChronology23 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone22);
        org.joda.time.DurationField durationField24 = gJChronology23.halfdays();
        org.joda.time.DateTimeField dateTimeField25 = gJChronology23.millisOfDay();
        org.joda.time.DateTimeField dateTimeField26 = gJChronology23.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField27 = gJChronology23.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone28 = gJChronology23.getZone();
        org.joda.time.DateTimeField dateTimeField29 = gJChronology23.millisOfSecond();
        org.joda.time.DurationField durationField30 = gJChronology23.days();
        org.joda.time.DateTimeZone dateTimeZone31 = gJChronology23.getZone();
        java.util.TimeZone timeZone32 = null;
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.forTimeZone(timeZone32);
        int int35 = dateTimeZone33.getOffsetFromLocal((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(0, (int) (short) 10);
        long long40 = dateTimeZone33.getMillisKeepLocal(dateTimeZone38, (-61827926399999L));
        boolean boolean41 = dateTimeZone33.isFixed();
        java.lang.String str43 = dateTimeZone33.getNameKey(10412712236785L);
        long long45 = dateTimeZone33.previousTransition(51737772576L);
        long long47 = dateTimeZone31.getMillisKeepLocal(dateTimeZone33, 4320000048L);
        org.joda.time.Chronology chronology48 = gJChronology2.withZone(dateTimeZone31);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 97L + "'", long7 == 97L);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
// flaky:         org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-61827926400051L) + "'", long17 == (-61827926400051L));
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(gJChronology23);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertNotNull(dateTimeZone33);
// flaky:         org.junit.Assert.assertTrue("'" + int35 + "' != '" + 52 + "'", int35 == 52);
        org.junit.Assert.assertNotNull(dateTimeZone38);
// flaky:         org.junit.Assert.assertTrue("'" + long40 + "' != '" + (-61827926999947L) + "'", long40 == (-61827926999947L));
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
// flaky:         org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 51737772576L + "'", long45 == 51737772576L);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 4320000048L + "'", long47 == 4320000048L);
        org.junit.Assert.assertNotNull(chronology48);
    }

    @Test
    public void test19477() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19477");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField3 = gJChronology2.millisOfSecond();
        org.joda.time.DurationField durationField4 = gJChronology2.millis();
        org.joda.time.DurationField durationField5 = gJChronology2.weeks();
        org.joda.time.DurationField durationField6 = gJChronology2.days();
        org.joda.time.DurationField durationField7 = gJChronology2.months();
        org.joda.time.DateTimeField dateTimeField8 = gJChronology2.millisOfDay();
        org.joda.time.DurationField durationField9 = gJChronology2.months();
        org.joda.time.DateTimeField dateTimeField10 = gJChronology2.dayOfWeek();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
    }

    @Test
    public void test19478() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19478");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = gJChronology2.halfdays();
        long long7 = gJChronology2.add((long) 'a', (-1L), (int) (short) 0);
        boolean boolean9 = gJChronology2.equals((java.lang.Object) 0);
        org.joda.time.DateTimeField dateTimeField10 = gJChronology2.dayOfMonth();
        org.joda.time.DurationField durationField11 = gJChronology2.days();
        long long15 = gJChronology2.add((long) '4', 432000000L, (int) (short) 0);
        org.joda.time.DurationField durationField16 = gJChronology2.years();
        org.joda.time.DurationField durationField17 = gJChronology2.days();
        org.joda.time.DateTimeField dateTimeField18 = gJChronology2.weekyearOfCentury();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 97L + "'", long7 == 97L);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 52L + "'", long15 == 52L);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
    }

    @Test
    public void test19479() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19479");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = gJChronology2.halfdays();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.millisOfDay();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.minuteOfDay();
        org.joda.time.DurationField durationField6 = gJChronology2.centuries();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology2.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField8 = gJChronology2.year();
        org.joda.time.DurationField durationField9 = gJChronology2.weekyears();
        java.lang.String str10 = gJChronology2.toString();
        org.joda.time.DateTimeField dateTimeField11 = gJChronology2.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField12 = gJChronology2.dayOfYear();
        org.joda.time.DateTimeField dateTimeField13 = gJChronology2.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField14 = gJChronology2.weekyearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forOffsetMillis((int) '4');
        java.util.TimeZone timeZone17 = dateTimeZone16.toTimeZone();
        long long20 = dateTimeZone16.adjustOffset((long) 0, false);
        int int22 = dateTimeZone16.getOffsetFromLocal((-26438399999L));
        java.util.TimeZone timeZone23 = dateTimeZone16.toTimeZone();
        int int25 = dateTimeZone16.getOffset(259200006000000L);
        long long29 = dateTimeZone16.convertLocalToUTC((-25575169557600000L), false, 126403200L);
        org.joda.time.Chronology chronology30 = gJChronology2.withZone(dateTimeZone16);
        int int31 = gJChronology2.getMinimumDaysInFirstWeek();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(durationField9);
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "GJChronology[+00:00:00.052]" + "'", str10, "GJChronology[+00:00:00.052]");
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(timeZone17);
        org.junit.Assert.assertEquals(timeZone17.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 52 + "'", int22 == 52);
        org.junit.Assert.assertNotNull(timeZone23);
        org.junit.Assert.assertEquals(timeZone23.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 52 + "'", int25 == 52);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + (-25575169557600052L) + "'", long29 == (-25575169557600052L));
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 4 + "'", int31 == 4);
    }

    @Test
    public void test19480() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19480");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str3 = dateTimeZone1.getNameKey((long) 100);
        boolean boolean4 = dateTimeZone1.isFixed();
        java.util.Locale locale8 = new java.util.Locale("DurationField[halfdays]", "\u82f1\u6587");
        java.lang.String str9 = dateTimeZone1.getName((long) (short) 10, locale8);
        org.joda.time.Instant instant11 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone12 = null;
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forTimeZone(timeZone12);
        org.joda.time.chrono.GJChronology gJChronology14 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone13);
        org.joda.time.DateTimeField dateTimeField15 = gJChronology14.millisOfSecond();
        int int16 = instant11.get(dateTimeField15);
        org.joda.time.Chronology chronology17 = instant11.getChronology();
        org.joda.time.chrono.GJChronology gJChronology18 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1, (org.joda.time.ReadableInstant) instant11);
        org.joda.time.Instant instant19 = instant11.toInstant();
        org.joda.time.Instant instant21 = new org.joda.time.Instant(52L);
        boolean boolean22 = instant21.isEqualNow();
        org.joda.time.ReadableDuration readableDuration23 = null;
        org.joda.time.Instant instant24 = instant21.plus(readableDuration23);
        long long25 = instant21.getMillis();
        java.lang.Object obj26 = null;
        boolean boolean27 = instant21.equals(obj26);
        org.joda.time.Chronology chronology28 = instant21.getChronology();
        org.joda.time.Instant instant30 = instant21.minus((long) (byte) 10);
        org.joda.time.Instant instant32 = new org.joda.time.Instant(52L);
        boolean boolean33 = instant32.isEqualNow();
        org.joda.time.ReadableDuration readableDuration34 = null;
        org.joda.time.Instant instant35 = instant32.plus(readableDuration34);
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = null;
        boolean boolean37 = instant35.isSupported(dateTimeFieldType36);
        long long38 = instant35.getMillis();
        boolean boolean39 = instant21.isAfter((org.joda.time.ReadableInstant) instant35);
        org.joda.time.ReadableInstant readableInstant40 = null;
        boolean boolean41 = instant35.isAfter(readableInstant40);
        boolean boolean42 = instant19.isBefore(readableInstant40);
        boolean boolean43 = instant19.isAfterNow();
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
// flaky:         org.junit.Assert.assertEquals(locale8.toString(), "\u82f1\u6587");
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+00:00:00.052" + "'", str9, "+00:00:00.052");
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(gJChronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
// flaky:         org.junit.Assert.assertTrue("'" + int16 + "' != '" + 104 + "'", int16 == 104);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(gJChronology18);
        org.junit.Assert.assertNotNull(instant19);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(instant24);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 52L + "'", long25 == 52L);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(instant30);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(instant35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 52L + "'", long38 == 52L);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
    }

    @Test
    public void test19481() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19481");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forTimeZone(timeZone2);
        org.joda.time.chrono.GJChronology gJChronology4 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone3);
        org.joda.time.DateTimeField dateTimeField5 = gJChronology4.millisOfSecond();
        int int6 = instant1.get(dateTimeField5);
        boolean boolean7 = instant1.isEqualNow();
        org.joda.time.tz.NameProvider nameProvider8 = org.joda.time.DateTimeZone.getNameProvider();
        org.joda.time.DateTimeZone.setNameProvider(nameProvider8);
        org.joda.time.DateTimeZone.setNameProvider(nameProvider8);
        boolean boolean11 = instant1.equals((java.lang.Object) nameProvider8);
        org.joda.time.Instant instant13 = new org.joda.time.Instant(52L);
        boolean boolean14 = instant13.isEqualNow();
        java.lang.String str15 = instant13.toString();
        org.joda.time.DateTimeZone dateTimeZone16 = instant13.getZone();
        org.joda.time.DateTime dateTime17 = instant1.toDateTime(dateTimeZone16);
        org.joda.time.DateTimeZone dateTimeZone18 = instant1.getZone();
        org.joda.time.Instant instant20 = new org.joda.time.Instant(43200152L);
        boolean boolean21 = instant1.isBefore((org.joda.time.ReadableInstant) instant20);
        org.joda.time.Instant instant23 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone24 = null;
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forTimeZone(timeZone24);
        org.joda.time.chrono.GJChronology gJChronology26 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone25);
        org.joda.time.DateTimeField dateTimeField27 = gJChronology26.millisOfSecond();
        int int28 = instant23.get(dateTimeField27);
        boolean boolean29 = instant23.isEqualNow();
        org.joda.time.ReadableDuration readableDuration30 = null;
        org.joda.time.Instant instant32 = instant23.withDurationAdded(readableDuration30, (int) (short) 0);
        java.lang.String str33 = instant23.toString();
        boolean boolean34 = instant1.isBefore((org.joda.time.ReadableInstant) instant23);
        org.joda.time.DateTimeFieldType dateTimeFieldType35 = null;
        boolean boolean36 = instant1.isSupported(dateTimeFieldType35);
        java.util.Locale.Builder builder37 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder38 = builder37.clear();
        java.util.Locale.Builder builder40 = builder38.removeUnicodeLocaleAttribute("und");
        java.util.Locale.Builder builder41 = builder40.clearExtensions();
        java.util.Locale.Builder builder42 = builder41.clearExtensions();
        java.util.Locale locale43 = builder41.build();
        java.util.Locale.Builder builder45 = builder41.setLanguageTag("en-US");
        java.util.Locale.Builder builder47 = builder41.addUnicodeLocaleAttribute("deu");
        java.util.Locale locale48 = builder47.build();
        java.util.Locale.Builder builder51 = builder47.setExtension('x', "de");
        java.util.Locale.Builder builder53 = builder51.setLanguageTag("en-GB");
        java.util.Locale locale54 = builder51.build();
        boolean boolean55 = instant1.equals((java.lang.Object) locale54);
        java.util.Locale locale57 = new java.util.Locale("days");
        java.util.Locale.setDefault(locale57);
        java.lang.String str59 = locale54.getDisplayCountry(locale57);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(gJChronology4);
        org.junit.Assert.assertNotNull(dateTimeField5);
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 104 + "'", int6 == 104);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(nameProvider8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "1970-01-01T00:00:00.052Z" + "'", str15, "1970-01-01T00:00:00.052Z");
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(gJChronology26);
        org.junit.Assert.assertNotNull(dateTimeField27);
// flaky:         org.junit.Assert.assertTrue("'" + int28 + "' != '" + 104 + "'", int28 == 104);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(instant32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "1970-01-01T00:00:00.052Z" + "'", str33, "1970-01-01T00:00:00.052Z");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "");
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "en_US_#u-deu");
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "en_GB");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertEquals(locale57.toString(), "days");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "United Kingdom" + "'", str59, "United Kingdom");
    }

    @Test
    public void test19482() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19482");
        java.util.Locale locale0 = java.util.Locale.ITALIAN;
        java.util.Locale locale1 = locale0.stripExtensions();
        java.util.Locale locale2 = java.util.Locale.CANADA;
        java.lang.String str3 = locale0.getDisplayVariant(locale2);
        java.util.Locale locale4 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale5 = java.util.Locale.ENGLISH;
        java.lang.String str6 = locale4.getDisplayLanguage(locale5);
        java.util.Locale locale7 = java.util.Locale.CANADA;
        java.lang.String str8 = locale7.getISO3Language();
        java.lang.String str9 = locale4.getDisplayVariant(locale7);
        java.lang.String str10 = locale4.getDisplayName();
        java.lang.String str11 = locale2.getDisplayCountry(locale4);
        java.util.Set<java.lang.Character> charSet12 = locale4.getExtensionKeys();
        java.lang.String str13 = locale4.getISO3Language();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "it");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "it");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "en");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Chinese" + "'", str6, "Chinese");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "eng" + "'", str8, "eng");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Chinese (Taiwan)" + "'", str10, "Chinese (Taiwan)");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\u52a0\u62ff\u5927" + "'", str11, "\u52a0\u62ff\u5927");
        org.junit.Assert.assertNotNull(charSet12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "zho" + "'", str13, "zho");
    }

    @Test
    public void test19483() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19483");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = gJChronology2.halfdays();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.millisOfDay();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.minuteOfDay();
        org.joda.time.DurationField durationField6 = gJChronology2.centuries();
        int int7 = gJChronology2.getMinimumDaysInFirstWeek();
        org.joda.time.DateTimeField dateTimeField8 = gJChronology2.weekyear();
        org.joda.time.DateTimeField dateTimeField9 = gJChronology2.weekyearOfCentury();
        org.joda.time.DurationField durationField10 = gJChronology2.halfdays();
        org.joda.time.Instant instant11 = gJChronology2.getGregorianCutover();
        org.joda.time.Instant instant12 = gJChronology2.getGregorianCutover();
        org.joda.time.DateTimeField dateTimeField13 = gJChronology2.minuteOfHour();
        java.util.TimeZone timeZone14 = null;
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forTimeZone(timeZone14);
        org.joda.time.chrono.GJChronology gJChronology16 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone15);
        org.joda.time.DurationField durationField17 = gJChronology16.halfdays();
        org.joda.time.DateTimeField dateTimeField18 = gJChronology16.millisOfDay();
        org.joda.time.DateTimeField dateTimeField19 = gJChronology16.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField20 = gJChronology16.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone21 = gJChronology16.getZone();
        boolean boolean22 = dateTimeZone21.isFixed();
        org.joda.time.Chronology chronology23 = gJChronology2.withZone(dateTimeZone21);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 4 + "'", int7 == 4);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(instant11);
        org.junit.Assert.assertNotNull(instant12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(gJChronology16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(chronology23);
    }

    @Test
    public void test19484() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19484");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clear();
        java.util.Locale.Builder builder3 = builder1.removeUnicodeLocaleAttribute("und");
        java.util.Locale locale4 = builder3.build();
        java.lang.String str5 = locale4.getDisplayName();
        java.lang.String str6 = locale4.getISO3Country();
        java.lang.String str7 = locale4.getCountry();
        java.lang.String str8 = locale4.getCountry();
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
    }

    @Test
    public void test19485() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19485");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField3 = gJChronology2.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.millisOfSecond();
        org.joda.time.DurationField durationField6 = gJChronology2.days();
        java.util.TimeZone timeZone7 = null;
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forTimeZone(timeZone7);
        java.lang.String str10 = dateTimeZone8.getNameKey((long) 100);
        boolean boolean11 = dateTimeZone8.isFixed();
        java.util.Locale locale15 = new java.util.Locale("DurationField[halfdays]", "\u82f1\u6587");
        java.lang.String str16 = dateTimeZone8.getName((long) (short) 10, locale15);
        java.lang.String str18 = dateTimeZone8.getNameKey(17296800000L);
        org.joda.time.Chronology chronology19 = gJChronology2.withZone(dateTimeZone8);
        java.lang.String str20 = gJChronology2.toString();
        org.joda.time.DurationField durationField21 = gJChronology2.hours();
        long long25 = gJChronology2.add(311919374401L, (long) (-8), 1155627);
        org.joda.time.DateTimeField dateTimeField26 = gJChronology2.millisOfSecond();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone8);
// flaky:         org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
// flaky:         org.junit.Assert.assertEquals(locale15.toString(), "\u82f1\u6587");
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "+00:00:00.052" + "'", str16, "+00:00:00.052");
// flaky:         org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNotNull(chronology19);
// flaky:         org.junit.Assert.assertEquals("'" + str20 + "' != '" + "GJChronology[+00:00:00.052]" + "'", str20, "GJChronology[+00:00:00.052]");
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 311910129385L + "'", long25 == 311910129385L);
        org.junit.Assert.assertNotNull(dateTimeField26);
    }

    @Test
    public void test19486() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19486");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clear();
        java.util.Locale.Builder builder3 = builder1.removeUnicodeLocaleAttribute("und");
        java.util.Locale.Builder builder4 = builder1.clear();
        java.util.Locale locale5 = builder4.build();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder7 = builder4.setScript("2086-12-31T08:56:24.052Z");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed script: 2086-12-31T08:56:24.052Z [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "");
    }

    @Test
    public void test19487() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19487");
        org.joda.time.Instant instant1 = org.joda.time.Instant.parse("2022-02-11T09:48:46.133+00:01:13.050");
        org.junit.Assert.assertNotNull(instant1);
    }

    @Test
    public void test19488() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19488");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = gJChronology2.halfdays();
        long long7 = gJChronology2.add((long) 'a', (-1L), (int) (short) 0);
        org.joda.time.DateTimeField dateTimeField8 = gJChronology2.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField9 = gJChronology2.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField10 = gJChronology2.dayOfYear();
        org.joda.time.DateTimeField dateTimeField11 = gJChronology2.hourOfHalfday();
        org.joda.time.DurationField durationField12 = gJChronology2.weekyears();
        org.joda.time.DateTimeField dateTimeField13 = gJChronology2.clockhourOfHalfday();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 97L + "'", long7 == 97L);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
    }

    @Test
    public void test19489() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19489");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clear();
        java.util.Locale.Builder builder3 = builder1.removeUnicodeLocaleAttribute("und");
        java.util.Locale.Builder builder4 = builder3.clear();
        java.util.Locale locale5 = builder4.build();
        java.util.Locale locale6 = java.util.Locale.ITALIAN;
        java.util.Locale locale7 = locale6.stripExtensions();
        java.util.Locale locale8 = java.util.Locale.CANADA;
        java.lang.String str9 = locale6.getDisplayVariant(locale8);
        java.lang.String str10 = locale8.getDisplayLanguage();
        java.lang.String str11 = locale8.getDisplayScript();
        java.lang.String str12 = locale8.getLanguage();
        java.lang.String str13 = locale5.getDisplayScript(locale8);
        java.util.Locale locale17 = new java.util.Locale("durationfield[halfdays]", "1970-01-01T01:12:00.000Z", "_CN_English");
        java.lang.String str18 = locale5.getDisplayName(locale17);
        java.lang.String str19 = locale17.getDisplayVariant();
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "it");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "it");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "English" + "'", str10, "English");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "en" + "'", str12, "en");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals(locale17.toString(), "durationfield[halfdays]_1970-01-01T01:12:00.000Z__CN_English");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "CN,English" + "'", str19, "CN,English");
    }

    @Test
    public void test19490() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19490");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField3 = gJChronology2.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.weekyear();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology2.minuteOfHour();
        org.joda.time.DurationField durationField7 = gJChronology2.months();
        java.lang.String str8 = gJChronology2.toString();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(durationField7);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "GJChronology[+00:00:00.052]" + "'", str8, "GJChronology[+00:00:00.052]");
    }

    @Test
    public void test19491() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19491");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        long long6 = dateTimeZone1.convertLocalToUTC((long) (byte) -1, true, 0L);
        boolean boolean8 = dateTimeZone1.equals((java.lang.Object) true);
        java.util.Locale locale10 = java.util.Locale.getDefault();
        java.lang.String str11 = locale10.getDisplayLanguage();
        java.lang.String str12 = locale10.toLanguageTag();
        java.lang.String str13 = dateTimeZone1.getShortName(0L, locale10);
        java.util.TimeZone timeZone14 = null;
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forTimeZone(timeZone14);
        org.joda.time.chrono.GJChronology gJChronology16 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone15);
        org.joda.time.DateTimeField dateTimeField17 = gJChronology16.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField18 = gJChronology16.weekyearOfCentury();
        org.joda.time.Instant instant19 = gJChronology16.getGregorianCutover();
        org.joda.time.Instant instant21 = instant19.withMillis(0L);
        org.joda.time.chrono.GJChronology gJChronology23 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1, (org.joda.time.ReadableInstant) instant19, 4);
        org.joda.time.Instant instant25 = instant19.plus(1867084L);
        org.joda.time.Instant instant26 = instant19.toInstant();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(gJChronology2);
// flaky:         org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-53L) + "'", long6 == (-53L));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "days");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "days" + "'", str11, "days");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "days" + "'", str12, "days");
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+00:00:00.052" + "'", str13, "+00:00:00.052");
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(gJChronology16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(instant19);
        org.junit.Assert.assertNotNull(instant21);
        org.junit.Assert.assertNotNull(gJChronology23);
        org.junit.Assert.assertNotNull(instant25);
        org.junit.Assert.assertNotNull(instant26);
    }

    @Test
    public void test19492() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19492");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        boolean boolean2 = instant1.isEqualNow();
        org.joda.time.ReadableDuration readableDuration3 = null;
        org.joda.time.Instant instant4 = instant1.plus(readableDuration3);
        org.joda.time.Instant instant6 = new org.joda.time.Instant(52L);
        org.joda.time.Instant instant8 = instant6.withMillis((long) 'u');
        boolean boolean9 = instant1.isBefore((org.joda.time.ReadableInstant) instant6);
        org.joda.time.DateTimeZone dateTimeZone10 = instant6.getZone();
        java.util.TimeZone timeZone11 = null;
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forTimeZone(timeZone11);
        org.joda.time.chrono.GJChronology gJChronology13 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone12);
        org.joda.time.DateTimeField dateTimeField14 = gJChronology13.era();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology13.era();
        java.util.TimeZone timeZone16 = null;
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forTimeZone(timeZone16);
        java.lang.String str19 = dateTimeZone17.getNameKey((long) 100);
        boolean boolean20 = dateTimeZone17.isFixed();
        java.util.Locale locale24 = new java.util.Locale("DurationField[halfdays]", "\u82f1\u6587");
        java.lang.String str25 = dateTimeZone17.getName((long) (short) 10, locale24);
        org.joda.time.Instant instant27 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone28 = null;
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forTimeZone(timeZone28);
        org.joda.time.chrono.GJChronology gJChronology30 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone29);
        org.joda.time.DateTimeField dateTimeField31 = gJChronology30.millisOfSecond();
        int int32 = instant27.get(dateTimeField31);
        org.joda.time.Chronology chronology33 = instant27.getChronology();
        org.joda.time.chrono.GJChronology gJChronology34 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone17, (org.joda.time.ReadableInstant) instant27);
        boolean boolean35 = dateTimeZone17.isFixed();
        org.joda.time.Chronology chronology36 = gJChronology13.withZone(dateTimeZone17);
        long long38 = dateTimeZone10.getMillisKeepLocal(dateTimeZone17, (-31535940000L));
        java.lang.String str39 = dateTimeZone10.getID();
        java.lang.String str40 = dateTimeZone10.getID();
        org.joda.time.LocalDateTime localDateTime41 = null;
        boolean boolean42 = dateTimeZone10.isLocalDateTimeGap(localDateTime41);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(instant4);
        org.junit.Assert.assertNotNull(instant8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(gJChronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeZone17);
// flaky:         org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
// flaky:         org.junit.Assert.assertEquals(locale24.toString(), "\u82f1\u6587");
// flaky:         org.junit.Assert.assertEquals("'" + str25 + "' != '" + "+00:00:00.052" + "'", str25, "+00:00:00.052");
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(gJChronology30);
        org.junit.Assert.assertNotNull(dateTimeField31);
// flaky:         org.junit.Assert.assertTrue("'" + int32 + "' != '" + 104 + "'", int32 == 104);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(gJChronology34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(chronology36);
// flaky:         org.junit.Assert.assertTrue("'" + long38 + "' != '" + (-31535940052L) + "'", long38 == (-31535940052L));
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "UTC" + "'", str39, "UTC");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "UTC" + "'", str40, "UTC");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
    }

    @Test
    public void test19493() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19493");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        boolean boolean2 = instant1.isEqualNow();
        org.joda.time.ReadableDuration readableDuration3 = null;
        org.joda.time.Instant instant4 = instant1.plus(readableDuration3);
        long long5 = instant1.getMillis();
        java.lang.String str6 = instant1.toString();
        boolean boolean7 = instant1.isBeforeNow();
        java.lang.String str8 = instant1.toString();
        boolean boolean9 = instant1.isBeforeNow();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(instant4);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 52L + "'", long5 == 52L);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "1970-01-01T00:00:00.052Z" + "'", str6, "1970-01-01T00:00:00.052Z");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "1970-01-01T00:00:00.052Z" + "'", str8, "1970-01-01T00:00:00.052Z");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void test19494() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19494");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField3 = gJChronology2.millisOfSecond();
        org.joda.time.DurationField durationField4 = gJChronology2.millis();
        org.joda.time.DurationField durationField5 = gJChronology2.weekyears();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology2.dayOfYear();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology2.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField8 = gJChronology2.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField9 = gJChronology2.yearOfEra();
        org.joda.time.DateTimeField dateTimeField10 = gJChronology2.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField11 = gJChronology2.minuteOfDay();
        java.util.TimeZone timeZone12 = null;
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forTimeZone(timeZone12);
        org.joda.time.chrono.GJChronology gJChronology14 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone13);
        long long16 = dateTimeZone13.previousTransition((-2246399965L));
        org.joda.time.chrono.GJChronology gJChronology17 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone13);
        java.lang.String str18 = dateTimeZone13.toString();
        boolean boolean19 = gJChronology2.equals((java.lang.Object) dateTimeZone13);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(gJChronology14);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-2246399965L) + "'", long16 == (-2246399965L));
        org.junit.Assert.assertNotNull(gJChronology17);
// flaky:         org.junit.Assert.assertEquals("'" + str18 + "' != '" + "+00:00:00.052" + "'", str18, "+00:00:00.052");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test19495() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19495");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = gJChronology2.halfdays();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.millisOfDay();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.minuteOfDay();
        org.joda.time.DurationField durationField6 = gJChronology2.centuries();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology2.dayOfYear();
        org.joda.time.DateTimeField dateTimeField8 = gJChronology2.weekyearOfCentury();
        org.joda.time.DurationField durationField9 = gJChronology2.hours();
        org.joda.time.DurationField durationField10 = gJChronology2.hours();
        org.joda.time.DurationField durationField11 = gJChronology2.years();
        org.joda.time.DateTimeField dateTimeField12 = gJChronology2.dayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(1, 10);
        java.util.TimeZone timeZone16 = null;
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forTimeZone(timeZone16);
        long long19 = dateTimeZone15.getMillisKeepLocal(dateTimeZone17, 4320000000L);
        org.joda.time.Instant instant21 = new org.joda.time.Instant(52L);
        boolean boolean22 = instant21.isEqualNow();
        org.joda.time.ReadableDuration readableDuration23 = null;
        org.joda.time.Instant instant24 = instant21.plus(readableDuration23);
        long long25 = instant21.getMillis();
        java.lang.String str26 = instant21.toString();
        org.joda.time.Instant instant27 = instant21.toInstant();
        org.joda.time.ReadableDuration readableDuration28 = null;
        org.joda.time.Instant instant30 = instant21.withDurationAdded(readableDuration28, (int) 'x');
        org.joda.time.Instant instant31 = instant21.toInstant();
        int int32 = dateTimeZone15.getOffset((org.joda.time.ReadableInstant) instant21);
        org.joda.time.Instant instant34 = new org.joda.time.Instant(52L);
        boolean boolean35 = instant34.isEqualNow();
        org.joda.time.ReadableDuration readableDuration36 = null;
        org.joda.time.Instant instant37 = instant34.plus(readableDuration36);
        long long38 = instant34.getMillis();
        java.lang.String str39 = instant34.toString();
        boolean boolean41 = instant34.isAfter((long) (-1));
        java.lang.Object obj42 = null;
        boolean boolean43 = instant34.equals(obj42);
        org.joda.time.ReadableDuration readableDuration44 = null;
        org.joda.time.Instant instant45 = instant34.minus(readableDuration44);
        org.joda.time.chrono.GJChronology gJChronology46 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone15, (org.joda.time.ReadableInstant) instant34);
        java.util.TimeZone timeZone47 = null;
        org.joda.time.DateTimeZone dateTimeZone48 = org.joda.time.DateTimeZone.forTimeZone(timeZone47);
        org.joda.time.chrono.GJChronology gJChronology49 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone48);
        org.joda.time.DateTimeField dateTimeField50 = gJChronology49.era();
        org.joda.time.DurationField durationField51 = gJChronology49.months();
        java.lang.String str52 = durationField51.getName();
        java.util.TimeZone timeZone53 = null;
        org.joda.time.DateTimeZone dateTimeZone54 = org.joda.time.DateTimeZone.forTimeZone(timeZone53);
        org.joda.time.chrono.GJChronology gJChronology55 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone54);
        org.joda.time.DurationField durationField56 = gJChronology55.halfdays();
        long long59 = durationField56.add((long) 100, 100L);
        boolean boolean60 = durationField56.isPrecise();
        long long63 = durationField56.getValueAsLong(1L, (long) 0);
        int int64 = durationField51.compareTo(durationField56);
        boolean boolean65 = instant34.equals((java.lang.Object) int64);
        org.joda.time.Instant instant67 = instant34.plus(259200006000000L);
        org.joda.time.Instant instant69 = instant67.withMillis(26328952801764L);
        org.joda.time.DateTimeZone dateTimeZone70 = instant67.getZone();
        boolean boolean72 = dateTimeZone70.isStandardOffset((-599903L));
        org.joda.time.Chronology chronology73 = gJChronology2.withZone(dateTimeZone70);
        org.joda.time.DurationField durationField74 = chronology73.seconds();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(dateTimeZone17);
// flaky:         org.junit.Assert.assertTrue("'" + long19 + "' != '" + 4324199948L + "'", long19 == 4324199948L);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(instant24);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 52L + "'", long25 == 52L);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "1970-01-01T00:00:00.052Z" + "'", str26, "1970-01-01T00:00:00.052Z");
        org.junit.Assert.assertNotNull(instant27);
        org.junit.Assert.assertNotNull(instant30);
        org.junit.Assert.assertNotNull(instant31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 4200000 + "'", int32 == 4200000);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(instant37);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 52L + "'", long38 == 52L);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "1970-01-01T00:00:00.052Z" + "'", str39, "1970-01-01T00:00:00.052Z");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(instant45);
        org.junit.Assert.assertNotNull(gJChronology46);
        org.junit.Assert.assertNotNull(dateTimeZone48);
        org.junit.Assert.assertNotNull(gJChronology49);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(durationField51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "months" + "'", str52, "months");
        org.junit.Assert.assertNotNull(dateTimeZone54);
        org.junit.Assert.assertNotNull(gJChronology55);
        org.junit.Assert.assertNotNull(durationField56);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 4320000100L + "'", long59 == 4320000100L);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 0L + "'", long63 == 0L);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1 + "'", int64 == 1);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(instant67);
        org.junit.Assert.assertNotNull(instant69);
        org.junit.Assert.assertNotNull(dateTimeZone70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(chronology73);
        org.junit.Assert.assertNotNull(durationField74);
    }

    @Test
    public void test19496() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19496");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = gJChronology2.halfdays();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.millisOfDay();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.minuteOfDay();
        org.joda.time.DurationField durationField6 = gJChronology2.centuries();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology2.dayOfYear();
        java.lang.String str8 = gJChronology2.toString();
        org.joda.time.DateTimeField dateTimeField9 = gJChronology2.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField10 = gJChronology2.halfdayOfDay();
        org.joda.time.DurationField durationField11 = gJChronology2.hours();
        java.util.TimeZone timeZone12 = null;
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forTimeZone(timeZone12);
        org.joda.time.chrono.GJChronology gJChronology14 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone13);
        java.util.Locale locale16 = new java.util.Locale("hi!");
        java.lang.String str17 = locale16.getCountry();
        java.util.Locale locale18 = java.util.Locale.getDefault();
        java.lang.String str19 = locale18.getDisplayName();
        java.lang.String str20 = locale16.getDisplayScript(locale18);
        boolean boolean21 = dateTimeZone13.equals((java.lang.Object) locale18);
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forOffsetMillis((int) '4');
        java.util.TimeZone timeZone24 = dateTimeZone23.toTimeZone();
        long long27 = dateTimeZone23.adjustOffset((long) 0, false);
        int int29 = dateTimeZone23.getOffsetFromLocal((-26438399999L));
        long long31 = dateTimeZone13.getMillisKeepLocal(dateTimeZone23, (long) (byte) 10);
        org.joda.time.Instant instant33 = new org.joda.time.Instant(52L);
        boolean boolean34 = instant33.isEqualNow();
        org.joda.time.ReadableDuration readableDuration35 = null;
        org.joda.time.Instant instant36 = instant33.plus(readableDuration35);
        long long37 = instant33.getMillis();
        java.lang.String str38 = instant33.toString();
        org.joda.time.Instant instant39 = instant33.toInstant();
        org.joda.time.ReadableDuration readableDuration40 = null;
        org.joda.time.Instant instant42 = instant33.withDurationAdded(readableDuration40, (int) 'x');
        java.util.TimeZone timeZone43 = null;
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.forTimeZone(timeZone43);
        org.joda.time.chrono.GJChronology gJChronology45 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone44);
        org.joda.time.DateTimeField dateTimeField46 = gJChronology45.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField47 = gJChronology45.yearOfCentury();
        int int48 = instant42.get(dateTimeField47);
        org.joda.time.chrono.GJChronology gJChronology49 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone23, (org.joda.time.ReadableInstant) instant42);
        org.joda.time.DateTimeField dateTimeField50 = gJChronology49.minuteOfDay();
        java.util.TimeZone timeZone51 = null;
        org.joda.time.DateTimeZone dateTimeZone52 = org.joda.time.DateTimeZone.forTimeZone(timeZone51);
        org.joda.time.chrono.GJChronology gJChronology53 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone52);
        org.joda.time.DurationField durationField54 = gJChronology53.halfdays();
        org.joda.time.DateTimeField dateTimeField55 = gJChronology53.millisOfDay();
        org.joda.time.DateTimeField dateTimeField56 = gJChronology53.minuteOfDay();
        org.joda.time.DurationField durationField57 = gJChronology53.centuries();
        org.joda.time.DateTimeField dateTimeField58 = gJChronology53.dayOfYear();
        java.lang.String str59 = gJChronology53.toString();
        org.joda.time.DateTimeField dateTimeField60 = gJChronology53.dayOfYear();
        org.joda.time.Chronology chronology61 = gJChronology53.withUTC();
        org.joda.time.DateTimeZone dateTimeZone62 = gJChronology53.getZone();
        org.joda.time.Chronology chronology63 = gJChronology49.withZone(dateTimeZone62);
        org.joda.time.Chronology chronology64 = gJChronology2.withZone(dateTimeZone62);
        java.lang.String str65 = dateTimeZone62.toString();
        long long67 = dateTimeZone62.convertUTCToLocal(695771856000002L);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "GJChronology[+00:00:00.052]" + "'", str8, "GJChronology[+00:00:00.052]");
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(gJChronology14);
        org.junit.Assert.assertEquals(locale16.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "days");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "days" + "'", str19, "days");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(timeZone24);
        org.junit.Assert.assertEquals(timeZone24.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 52 + "'", int29 == 52);
// flaky:         org.junit.Assert.assertTrue("'" + long31 + "' != '" + 10L + "'", long31 == 10L);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(instant36);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 52L + "'", long37 == 52L);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "1970-01-01T00:00:00.052Z" + "'", str38, "1970-01-01T00:00:00.052Z");
        org.junit.Assert.assertNotNull(instant39);
        org.junit.Assert.assertNotNull(instant42);
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertNotNull(gJChronology45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 70 + "'", int48 == 70);
        org.junit.Assert.assertNotNull(gJChronology49);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(dateTimeZone52);
        org.junit.Assert.assertNotNull(gJChronology53);
        org.junit.Assert.assertNotNull(durationField54);
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertNotNull(durationField57);
        org.junit.Assert.assertNotNull(dateTimeField58);
// flaky:         org.junit.Assert.assertEquals("'" + str59 + "' != '" + "GJChronology[+00:00:00.052]" + "'", str59, "GJChronology[+00:00:00.052]");
        org.junit.Assert.assertNotNull(dateTimeField60);
        org.junit.Assert.assertNotNull(chronology61);
        org.junit.Assert.assertNotNull(dateTimeZone62);
        org.junit.Assert.assertNotNull(chronology63);
        org.junit.Assert.assertNotNull(chronology64);
// flaky:         org.junit.Assert.assertEquals("'" + str65 + "' != '" + "+00:00:00.052" + "'", str65, "+00:00:00.052");
// flaky:         org.junit.Assert.assertTrue("'" + long67 + "' != '" + 695771856000054L + "'", long67 == 695771856000054L);
    }

    @Test
    public void test19497() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19497");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clear();
        java.util.Locale.Builder builder3 = builder1.removeUnicodeLocaleAttribute("und");
        java.util.Locale.Builder builder4 = builder3.clearExtensions();
        java.util.Locale locale5 = builder4.build();
        java.util.Locale locale6 = builder4.build();
        java.util.Locale locale7 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale8 = java.util.Locale.ENGLISH;
        java.lang.String str9 = locale7.getDisplayLanguage(locale8);
        java.util.Locale.Builder builder10 = builder4.setLocale(locale8);
        java.util.Locale locale11 = java.util.Locale.getDefault();
        java.lang.String str12 = locale11.getDisplayName();
        java.util.Locale locale13 = java.util.Locale.CHINESE;
        boolean boolean14 = locale13.hasExtensions();
        java.util.Locale.setDefault(locale13);
        java.lang.String str16 = locale13.getCountry();
        java.lang.String str17 = locale11.getDisplayScript(locale13);
        java.util.TimeZone timeZone18 = null;
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forTimeZone(timeZone18);
        org.joda.time.chrono.GJChronology gJChronology20 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone19);
        org.joda.time.DurationField durationField21 = gJChronology20.halfdays();
        long long25 = gJChronology20.add((long) 'a', (-1L), (int) (short) 0);
        boolean boolean27 = gJChronology20.equals((java.lang.Object) 0);
        org.joda.time.DateTimeField dateTimeField28 = gJChronology20.dayOfMonth();
        org.joda.time.DurationField durationField29 = gJChronology20.days();
        org.joda.time.DateTimeZone dateTimeZone30 = gJChronology20.getZone();
        java.lang.String str31 = dateTimeZone30.toString();
        java.util.Locale locale33 = java.util.Locale.FRENCH;
        java.util.Locale locale34 = java.util.Locale.getDefault();
        boolean boolean35 = locale34.hasExtensions();
        java.lang.String str36 = locale33.getDisplayLanguage(locale34);
        boolean boolean37 = locale34.hasExtensions();
        java.lang.String str38 = dateTimeZone30.getName((-61827739199999L), locale34);
        java.lang.String str39 = locale13.getDisplayName(locale34);
        java.util.Locale.Builder builder40 = builder10.setLocale(locale13);
        java.lang.String str41 = locale13.getISO3Country();
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "en");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Chinese" + "'", str9, "Chinese");
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "days");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "days" + "'", str12, "days");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "zh");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(gJChronology20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 97L + "'", long25 == 97L);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertNotNull(dateTimeZone30);
// flaky:         org.junit.Assert.assertEquals("'" + str31 + "' != '" + "+00:00:00.052" + "'", str31, "+00:00:00.052");
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "fr");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "zh");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "\u6cd5\u6587" + "'", str36, "\u6cd5\u6587");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str38 + "' != '" + "+00:00:00.052" + "'", str38, "+00:00:00.052");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "\u4e2d\u6587" + "'", str39, "\u4e2d\u6587");
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
    }

    @Test
    public void test19498() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19498");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        boolean boolean2 = instant1.isEqualNow();
        java.lang.String str3 = instant1.toString();
        java.lang.String str4 = instant1.toString();
        org.joda.time.Instant instant6 = new org.joda.time.Instant(52L);
        boolean boolean7 = instant6.isEqualNow();
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.Instant instant9 = instant6.plus(readableDuration8);
        boolean boolean10 = instant1.isBefore((org.joda.time.ReadableInstant) instant9);
        org.joda.time.Instant instant12 = instant9.plus(747221760000000000L);
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = null;
        boolean boolean14 = instant12.isSupported(dateTimeFieldType13);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "1970-01-01T00:00:00.052Z" + "'", str3, "1970-01-01T00:00:00.052Z");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "1970-01-01T00:00:00.052Z" + "'", str4, "1970-01-01T00:00:00.052Z");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(instant9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(instant12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test19499() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19499");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = gJChronology2.halfdays();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.millisOfDay();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.minuteOfDay();
        org.joda.time.DurationField durationField6 = gJChronology2.centuries();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology2.dayOfYear();
        java.lang.String str8 = gJChronology2.toString();
        org.joda.time.DateTimeField dateTimeField9 = gJChronology2.dayOfYear();
        org.joda.time.DateTimeField dateTimeField10 = gJChronology2.minuteOfHour();
        org.joda.time.DurationField durationField11 = gJChronology2.halfdays();
        org.joda.time.DateTimeField dateTimeField12 = gJChronology2.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField13 = gJChronology2.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField14 = gJChronology2.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology2.weekyear();
        org.joda.time.DateTimeField dateTimeField16 = gJChronology2.millisOfDay();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "GJChronology[+00:00:00.052]" + "'", str8, "GJChronology[+00:00:00.052]");
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
    }

    @Test
    public void test19500() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19500");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField3 = gJChronology2.millisOfSecond();
        org.joda.time.DurationField durationField4 = gJChronology2.millis();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.hourOfHalfday();
        org.joda.time.Chronology chronology6 = gJChronology2.withUTC();
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        long long10 = gJChronology2.add(readablePeriod7, (-59958208700020L), 600000);
        // The following exception was thrown during execution in test generation
        try {
            long long18 = gJChronology2.getDateTimeMillis(7262400, (-99137), (-20176), (-6720000), (-86403528), 70, 37439);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -6720000 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(gJChronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-59958208700020L) + "'", long10 == (-59958208700020L));
    }
}

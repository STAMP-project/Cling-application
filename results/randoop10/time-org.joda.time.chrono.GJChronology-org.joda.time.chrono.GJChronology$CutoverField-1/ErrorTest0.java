import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class ErrorTest0 {

    public static boolean debug = false;

    @Test
    public void test0001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0001");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        boolean boolean2 = instant1.isEqualNow();
        java.lang.String str3 = instant1.toString();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.MutableDateTime mutableDateTime5 = instant1.toMutableDateTime(chronology4);
        org.joda.time.Instant instant7 = new org.joda.time.Instant(52L);
        boolean boolean8 = instant7.isEqualNow();
        boolean boolean9 = instant1.isAfter((org.joda.time.ReadableInstant) instant7);
        org.joda.time.Instant instant10 = instant7.toInstant();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and mutableDateTime5", (instant1.compareTo(mutableDateTime5) == 0) == instant1.equals(mutableDateTime5));
    }

    @Test
    public void test0002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0002");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField3 = gJChronology2.era();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.centuryOfEra();
        org.joda.time.DurationField durationField5 = gJChronology2.hours();
        org.joda.time.DurationField durationField6 = gJChronology2.eras();
        org.joda.time.DurationField durationField7 = gJChronology2.weekyears();
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField5 and durationField6", Math.signum(durationField5.compareTo(durationField6)) == -Math.signum(durationField6.compareTo(durationField5)));
    }

    @Test
    public void test0003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0003");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        boolean boolean2 = instant1.isEqualNow();
        java.lang.String str3 = instant1.toString();
        java.lang.String str4 = instant1.toString();
        org.joda.time.Instant instant6 = new org.joda.time.Instant(52L);
        boolean boolean7 = instant6.isEqualNow();
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.Instant instant9 = instant6.plus(readableDuration8);
        boolean boolean10 = instant1.isBefore((org.joda.time.ReadableInstant) instant9);
        org.joda.time.Instant instant12 = instant1.minus((long) 0);
        org.joda.time.Instant instant14 = new org.joda.time.Instant(52L);
        boolean boolean15 = instant14.isEqualNow();
        java.lang.String str16 = instant14.toString();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MutableDateTime mutableDateTime18 = instant14.toMutableDateTime(chronology17);
        org.joda.time.MutableDateTime mutableDateTime19 = instant14.toMutableDateTime();
        boolean boolean20 = instant12.isEqual((org.joda.time.ReadableInstant) mutableDateTime19);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant12 and mutableDateTime18", (instant12.compareTo(mutableDateTime18) == 0) == instant12.equals(mutableDateTime18));
    }

    @Test
    public void test0004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0004");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        boolean boolean2 = instant1.isEqualNow();
        java.lang.String str3 = instant1.toString();
        java.lang.String str4 = instant1.toString();
        org.joda.time.Instant instant6 = new org.joda.time.Instant(52L);
        boolean boolean7 = instant6.isEqualNow();
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.Instant instant9 = instant6.plus(readableDuration8);
        boolean boolean10 = instant1.isBefore((org.joda.time.ReadableInstant) instant9);
        org.joda.time.DateTime dateTime11 = instant1.toDateTime();
        org.joda.time.Instant instant12 = instant1.toInstant();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant6 and dateTime11", (instant6.compareTo(dateTime11) == 0) == instant6.equals(dateTime11));
    }

    @Test
    public void test0005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0005");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        boolean boolean2 = instant1.isEqualNow();
        org.joda.time.ReadableDuration readableDuration3 = null;
        org.joda.time.Instant instant4 = instant1.plus(readableDuration3);
        long long5 = instant1.getMillis();
        java.lang.String str6 = instant1.toString();
        org.joda.time.Instant instant7 = instant1.toInstant();
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.Instant instant10 = instant1.withDurationAdded(readableDuration8, (int) 'x');
        java.util.TimeZone timeZone11 = null;
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forTimeZone(timeZone11);
        java.lang.String str14 = dateTimeZone12.getNameKey((long) 100);
        boolean boolean15 = dateTimeZone12.isFixed();
        org.joda.time.chrono.GJChronology gJChronology16 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone12);
        java.lang.String str17 = dateTimeZone12.toString();
        org.joda.time.DateTime dateTime18 = instant10.toDateTime(dateTimeZone12);
        long long20 = dateTimeZone12.convertUTCToLocal((-3155695200000L));
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and dateTime18", (instant1.compareTo(dateTime18) == 0) == instant1.equals(dateTime18));
    }

    @Test
    public void test0006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0006");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        boolean boolean2 = instant1.isEqualNow();
        java.lang.String str3 = instant1.toString();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.MutableDateTime mutableDateTime5 = instant1.toMutableDateTime(chronology4);
        org.joda.time.MutableDateTime mutableDateTime6 = instant1.toMutableDateTime();
        java.lang.String str7 = mutableDateTime6.toString();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and mutableDateTime5", (instant1.compareTo(mutableDateTime5) == 0) == instant1.equals(mutableDateTime5));
    }

    @Test
    public void test0007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0007");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = gJChronology2.halfdays();
        long long7 = gJChronology2.add((long) 'a', (-1L), (int) (short) 0);
        org.joda.time.DateTimeField dateTimeField8 = gJChronology2.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField9 = gJChronology2.secondOfMinute();
        org.joda.time.Instant instant11 = new org.joda.time.Instant(52L);
        boolean boolean12 = instant11.isEqualNow();
        org.joda.time.ReadableDuration readableDuration13 = null;
        org.joda.time.Instant instant14 = instant11.plus(readableDuration13);
        boolean boolean15 = gJChronology2.equals((java.lang.Object) instant11);
        java.lang.String str16 = gJChronology2.toString();
        org.joda.time.DurationField durationField17 = gJChronology2.eras();
        org.joda.time.DurationField durationField18 = gJChronology2.months();
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField3 and durationField17", Math.signum(durationField3.compareTo(durationField17)) == -Math.signum(durationField17.compareTo(durationField3)));
    }

    @Test
    public void test0008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0008");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        boolean boolean2 = instant1.isEqualNow();
        java.lang.String str3 = instant1.toString();
        java.lang.String str4 = instant1.toString();
        org.joda.time.Instant instant7 = instant1.withDurationAdded(115200000L, (int) (short) 1);
        java.util.TimeZone timeZone8 = null;
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forTimeZone(timeZone8);
        java.lang.String str11 = dateTimeZone9.getNameKey((long) 100);
        boolean boolean12 = dateTimeZone9.isFixed();
        org.joda.time.DateTime dateTime13 = instant1.toDateTime(dateTimeZone9);
        java.util.TimeZone timeZone14 = null;
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forTimeZone(timeZone14);
        int int17 = dateTimeZone15.getOffsetFromLocal((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(0, (int) (short) 10);
        long long22 = dateTimeZone15.getMillisKeepLocal(dateTimeZone20, (-61827926399999L));
        long long24 = dateTimeZone9.getMillisKeepLocal(dateTimeZone15, 152L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and dateTime13", (instant1.compareTo(dateTime13) == 0) == instant1.equals(dateTime13));
    }

    @Test
    public void test0009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0009");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        boolean boolean2 = instant1.isEqualNow();
        java.lang.String str3 = instant1.toString();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.MutableDateTime mutableDateTime5 = instant1.toMutableDateTime(chronology4);
        org.joda.time.Instant instant7 = new org.joda.time.Instant(52L);
        boolean boolean8 = instant7.isEqualNow();
        boolean boolean9 = instant1.isAfter((org.joda.time.ReadableInstant) instant7);
        org.joda.time.Chronology chronology10 = instant1.getChronology();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime5 and instant7", (mutableDateTime5.compareTo(instant7) == 0) == mutableDateTime5.equals(instant7));
    }

    @Test
    public void test0010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0010");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forTimeZone(timeZone2);
        org.joda.time.chrono.GJChronology gJChronology4 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone3);
        org.joda.time.DateTimeField dateTimeField5 = gJChronology4.millisOfSecond();
        int int6 = instant1.get(dateTimeField5);
        org.joda.time.Instant instant8 = instant1.plus(0L);
        org.joda.time.Instant instant9 = instant8.toInstant();
        org.joda.time.Instant instant11 = new org.joda.time.Instant(52L);
        boolean boolean12 = instant11.isEqualNow();
        java.lang.String str13 = instant11.toString();
        java.lang.String str14 = instant11.toString();
        org.joda.time.Instant instant16 = new org.joda.time.Instant(52L);
        boolean boolean17 = instant16.isEqualNow();
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.Instant instant19 = instant16.plus(readableDuration18);
        boolean boolean20 = instant11.isBefore((org.joda.time.ReadableInstant) instant19);
        org.joda.time.Instant instant22 = instant11.minus((long) 0);
        int int23 = instant8.compareTo((org.joda.time.ReadableInstant) instant11);
        org.joda.time.DateTime dateTime24 = instant8.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone25 = instant8.getZone();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant8 and dateTime24", (instant8.compareTo(dateTime24) == 0) == instant8.equals(dateTime24));
    }

    @Test
    public void test0011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0011");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = gJChronology2.halfdays();
        org.joda.time.Chronology chronology4 = gJChronology2.withUTC();
        java.lang.String str5 = gJChronology2.toString();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology2.hourOfHalfday();
        org.joda.time.Instant instant8 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone9 = null;
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forTimeZone(timeZone9);
        org.joda.time.chrono.GJChronology gJChronology11 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone10);
        org.joda.time.DateTimeField dateTimeField12 = gJChronology11.millisOfSecond();
        int int13 = instant8.get(dateTimeField12);
        java.util.TimeZone timeZone14 = null;
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forTimeZone(timeZone14);
        org.joda.time.chrono.GJChronology gJChronology16 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone15);
        org.joda.time.DurationField durationField17 = gJChronology16.halfdays();
        java.util.TimeZone timeZone18 = null;
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forTimeZone(timeZone18);
        org.joda.time.chrono.GJChronology gJChronology20 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone19);
        long long24 = dateTimeZone19.convertLocalToUTC((long) (byte) -1, true, 0L);
        boolean boolean26 = dateTimeZone19.equals((java.lang.Object) true);
        org.joda.time.Chronology chronology27 = gJChronology16.withZone(dateTimeZone19);
        org.joda.time.MutableDateTime mutableDateTime28 = instant8.toMutableDateTime(dateTimeZone19);
        org.joda.time.Chronology chronology29 = gJChronology2.withZone(dateTimeZone19);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant8 and mutableDateTime28", (instant8.compareTo(mutableDateTime28) == 0) == instant8.equals(mutableDateTime28));
    }

    @Test
    public void test0012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0012");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        boolean boolean2 = instant1.isEqualNow();
        org.joda.time.ReadableDuration readableDuration3 = null;
        org.joda.time.Instant instant4 = instant1.plus(readableDuration3);
        long long5 = instant1.getMillis();
        org.joda.time.Instant instant7 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone8 = null;
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forTimeZone(timeZone8);
        org.joda.time.chrono.GJChronology gJChronology10 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone9);
        org.joda.time.DateTimeField dateTimeField11 = gJChronology10.millisOfSecond();
        int int12 = instant7.get(dateTimeField11);
        java.util.TimeZone timeZone13 = null;
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forTimeZone(timeZone13);
        org.joda.time.chrono.GJChronology gJChronology15 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone14);
        org.joda.time.DurationField durationField16 = gJChronology15.halfdays();
        java.util.TimeZone timeZone17 = null;
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forTimeZone(timeZone17);
        org.joda.time.chrono.GJChronology gJChronology19 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone18);
        long long23 = dateTimeZone18.convertLocalToUTC((long) (byte) -1, true, 0L);
        boolean boolean25 = dateTimeZone18.equals((java.lang.Object) true);
        org.joda.time.Chronology chronology26 = gJChronology15.withZone(dateTimeZone18);
        org.joda.time.MutableDateTime mutableDateTime27 = instant7.toMutableDateTime(dateTimeZone18);
        org.joda.time.MutableDateTime mutableDateTime28 = instant1.toMutableDateTime(dateTimeZone18);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and mutableDateTime27", (instant1.compareTo(mutableDateTime27) == 0) == instant1.equals(mutableDateTime27));
    }

    @Test
    public void test0013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0013");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        boolean boolean2 = instant1.isEqualNow();
        java.lang.String str3 = instant1.toString();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.MutableDateTime mutableDateTime5 = instant1.toMutableDateTime(chronology4);
        org.joda.time.Instant instant7 = new org.joda.time.Instant(52L);
        boolean boolean8 = instant7.isEqualNow();
        boolean boolean9 = instant1.isAfter((org.joda.time.ReadableInstant) instant7);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.Instant instant12 = instant7.withDurationAdded(readableDuration10, (int) (byte) 1);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and mutableDateTime5", (instant1.compareTo(mutableDateTime5) == 0) == instant1.equals(mutableDateTime5));
    }

    @Test
    public void test0014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0014");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = gJChronology2.halfdays();
        long long7 = gJChronology2.add((long) 'a', (-1L), (int) (short) 0);
        long long11 = gJChronology2.add((long) (byte) 0, (long) '4', 100);
        org.joda.time.DurationField durationField12 = gJChronology2.years();
        java.util.TimeZone timeZone13 = null;
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forTimeZone(timeZone13);
        org.joda.time.chrono.GJChronology gJChronology15 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone14);
        org.joda.time.DurationField durationField16 = gJChronology15.halfdays();
        long long20 = gJChronology15.add((long) 'a', (-1L), (int) (short) 0);
        org.joda.time.DateTimeField dateTimeField21 = gJChronology15.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField22 = gJChronology15.secondOfMinute();
        org.joda.time.Instant instant24 = new org.joda.time.Instant(52L);
        boolean boolean25 = instant24.isEqualNow();
        org.joda.time.ReadableDuration readableDuration26 = null;
        org.joda.time.Instant instant27 = instant24.plus(readableDuration26);
        boolean boolean28 = gJChronology15.equals((java.lang.Object) instant24);
        java.lang.String str29 = gJChronology15.toString();
        org.joda.time.DurationField durationField30 = gJChronology15.eras();
        int int31 = durationField12.compareTo(durationField30);
        long long34 = durationField12.subtract((long) (short) 100, (int) 'x');
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField3 and durationField30", Math.signum(durationField3.compareTo(durationField30)) == -Math.signum(durationField30.compareTo(durationField3)));
    }

    @Test
    public void test0015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0015");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = gJChronology2.halfdays();
        long long7 = gJChronology2.add((long) 'a', (-1L), (int) (short) 0);
        org.joda.time.DateTimeField dateTimeField8 = gJChronology2.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField9 = gJChronology2.secondOfMinute();
        org.joda.time.Instant instant11 = new org.joda.time.Instant(52L);
        boolean boolean12 = instant11.isEqualNow();
        org.joda.time.ReadableDuration readableDuration13 = null;
        org.joda.time.Instant instant14 = instant11.plus(readableDuration13);
        boolean boolean15 = gJChronology2.equals((java.lang.Object) instant11);
        java.util.TimeZone timeZone16 = null;
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forTimeZone(timeZone16);
        org.joda.time.chrono.GJChronology gJChronology18 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone17);
        org.joda.time.DurationField durationField19 = gJChronology18.halfdays();
        org.joda.time.DateTimeField dateTimeField20 = gJChronology18.millisOfDay();
        org.joda.time.DateTimeField dateTimeField21 = gJChronology18.minuteOfDay();
        org.joda.time.DurationField durationField22 = gJChronology18.centuries();
        org.joda.time.DateTimeField dateTimeField23 = gJChronology18.dayOfYear();
        java.lang.String str24 = gJChronology18.toString();
        org.joda.time.DateTimeField dateTimeField25 = gJChronology18.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone26 = gJChronology18.getZone();
        org.joda.time.DateTime dateTime27 = instant11.toDateTime((org.joda.time.Chronology) gJChronology18);
        org.joda.time.DateTimeField dateTimeField28 = gJChronology18.weekyear();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant11 and dateTime27", (instant11.compareTo(dateTime27) == 0) == instant11.equals(dateTime27));
    }

    @Test
    public void test0016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0016");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forTimeZone(timeZone2);
        org.joda.time.chrono.GJChronology gJChronology4 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone3);
        org.joda.time.DateTimeField dateTimeField5 = gJChronology4.millisOfSecond();
        int int6 = instant1.get(dateTimeField5);
        org.joda.time.Instant instant8 = instant1.plus(0L);
        org.joda.time.Instant instant9 = instant8.toInstant();
        org.joda.time.Instant instant11 = new org.joda.time.Instant(52L);
        boolean boolean12 = instant11.isEqualNow();
        java.lang.String str13 = instant11.toString();
        java.lang.String str14 = instant11.toString();
        org.joda.time.Instant instant16 = new org.joda.time.Instant(52L);
        boolean boolean17 = instant16.isEqualNow();
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.Instant instant19 = instant16.plus(readableDuration18);
        boolean boolean20 = instant11.isBefore((org.joda.time.ReadableInstant) instant19);
        org.joda.time.Instant instant22 = instant11.minus((long) 0);
        int int23 = instant8.compareTo((org.joda.time.ReadableInstant) instant11);
        org.joda.time.DateTime dateTime24 = instant8.toDateTimeISO();
        org.joda.time.Instant instant26 = instant8.minus((long) 4);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant8 and dateTime24", (instant8.compareTo(dateTime24) == 0) == instant8.equals(dateTime24));
    }

    @Test
    public void test0017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0017");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField3 = gJChronology2.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.weekyearOfCentury();
        org.joda.time.Instant instant5 = gJChronology2.getGregorianCutover();
        org.joda.time.Instant instant7 = instant5.withMillis(0L);
        org.joda.time.Instant instant9 = new org.joda.time.Instant(52L);
        boolean boolean10 = instant9.isEqualNow();
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.Instant instant12 = instant9.plus(readableDuration11);
        long long13 = instant9.getMillis();
        java.lang.String str14 = instant9.toString();
        org.joda.time.Instant instant15 = instant9.toInstant();
        org.joda.time.ReadableDuration readableDuration16 = null;
        org.joda.time.Instant instant18 = instant9.withDurationAdded(readableDuration16, (int) 'x');
        java.util.TimeZone timeZone19 = null;
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forTimeZone(timeZone19);
        java.lang.String str22 = dateTimeZone20.getNameKey((long) 100);
        boolean boolean23 = dateTimeZone20.isFixed();
        org.joda.time.chrono.GJChronology gJChronology24 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone20);
        java.lang.String str25 = dateTimeZone20.toString();
        org.joda.time.DateTime dateTime26 = instant18.toDateTime(dateTimeZone20);
        int int27 = instant7.compareTo((org.joda.time.ReadableInstant) instant18);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant18 and dateTime26", (instant18.compareTo(dateTime26) == 0) == instant18.equals(dateTime26));
    }

    @Test
    public void test0018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0018");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = gJChronology2.halfdays();
        long long7 = gJChronology2.add((long) 'a', (-1L), (int) (short) 0);
        org.joda.time.DateTimeField dateTimeField8 = gJChronology2.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField9 = gJChronology2.secondOfMinute();
        org.joda.time.Instant instant11 = new org.joda.time.Instant(52L);
        boolean boolean12 = instant11.isEqualNow();
        org.joda.time.ReadableDuration readableDuration13 = null;
        org.joda.time.Instant instant14 = instant11.plus(readableDuration13);
        boolean boolean15 = gJChronology2.equals((java.lang.Object) instant11);
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = null;
        boolean boolean17 = instant11.isSupported(dateTimeFieldType16);
        org.joda.time.Instant instant19 = new org.joda.time.Instant(52L);
        boolean boolean20 = instant19.isEqualNow();
        java.lang.String str21 = instant19.toString();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.MutableDateTime mutableDateTime23 = instant19.toMutableDateTime(chronology22);
        boolean boolean24 = instant11.isBefore((org.joda.time.ReadableInstant) instant19);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant11 and mutableDateTime23", (instant11.compareTo(mutableDateTime23) == 0) == instant11.equals(mutableDateTime23));
    }

    @Test
    public void test0019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0019");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        boolean boolean2 = instant1.isEqualNow();
        java.lang.String str3 = instant1.toString();
        java.lang.String str4 = instant1.toString();
        org.joda.time.Instant instant7 = instant1.withDurationAdded(115200000L, (int) (short) 1);
        java.util.TimeZone timeZone8 = null;
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forTimeZone(timeZone8);
        java.lang.String str11 = dateTimeZone9.getNameKey((long) 100);
        boolean boolean12 = dateTimeZone9.isFixed();
        org.joda.time.DateTime dateTime13 = instant1.toDateTime(dateTimeZone9);
        java.lang.String str14 = dateTimeZone9.getID();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and dateTime13", (instant1.compareTo(dateTime13) == 0) == instant1.equals(dateTime13));
    }

    @Test
    public void test0020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0020");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        org.joda.time.Instant instant3 = instant1.withMillis((long) 'u');
        java.util.TimeZone timeZone4 = null;
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forTimeZone(timeZone4);
        org.joda.time.chrono.GJChronology gJChronology6 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone5);
        org.joda.time.DurationField durationField7 = gJChronology6.halfdays();
        long long11 = gJChronology6.add((long) 'a', (-1L), (int) (short) 0);
        boolean boolean13 = gJChronology6.equals((java.lang.Object) 0);
        org.joda.time.DateTimeField dateTimeField14 = gJChronology6.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology6.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField16 = gJChronology6.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField17 = gJChronology6.clockhourOfHalfday();
        org.joda.time.DateTime dateTime18 = instant1.toDateTime((org.joda.time.Chronology) gJChronology6);
        java.util.TimeZone timeZone19 = null;
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forTimeZone(timeZone19);
        org.joda.time.chrono.GJChronology gJChronology21 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone20);
        org.joda.time.DurationField durationField22 = gJChronology21.halfdays();
        long long26 = gJChronology21.add((long) 'a', (-1L), (int) (short) 0);
        long long30 = gJChronology21.add((long) (byte) 0, (long) '4', 100);
        org.joda.time.DateTimeField dateTimeField31 = gJChronology21.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField32 = gJChronology21.year();
        org.joda.time.DateTimeField dateTimeField33 = gJChronology21.monthOfYear();
        org.joda.time.MutableDateTime mutableDateTime34 = instant1.toMutableDateTime((org.joda.time.Chronology) gJChronology21);
        java.util.TimeZone timeZone35 = null;
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.forTimeZone(timeZone35);
        org.joda.time.chrono.GJChronology gJChronology37 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone36);
        org.joda.time.DurationField durationField38 = gJChronology37.halfdays();
        long long42 = gJChronology37.add((long) 'a', (-1L), (int) (short) 0);
        long long46 = gJChronology37.add((long) (byte) 0, (long) '4', 100);
        org.joda.time.DateTimeField dateTimeField47 = gJChronology37.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField48 = gJChronology37.year();
        org.joda.time.DateTimeField dateTimeField49 = gJChronology37.monthOfYear();
        int int50 = mutableDateTime34.get(dateTimeField49);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and dateTime18", (instant1.compareTo(dateTime18) == 0) == instant1.equals(dateTime18));
    }

    @Test
    public void test0021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0021");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        boolean boolean2 = instant1.isEqualNow();
        java.lang.String str3 = instant1.toString();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.MutableDateTime mutableDateTime5 = instant1.toMutableDateTime(chronology4);
        org.joda.time.MutableDateTime mutableDateTime6 = instant1.toMutableDateTime();
        boolean boolean8 = instant1.isEqual((long) '4');
        org.joda.time.Instant instant10 = new org.joda.time.Instant(52L);
        boolean boolean11 = instant10.isEqualNow();
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.Instant instant13 = instant10.plus(readableDuration12);
        org.joda.time.Instant instant15 = new org.joda.time.Instant(52L);
        org.joda.time.Instant instant17 = instant15.withMillis((long) 'u');
        boolean boolean18 = instant10.isBefore((org.joda.time.ReadableInstant) instant15);
        org.joda.time.Instant instant21 = instant15.withDurationAdded(4320000000L, (int) 'u');
        int int22 = instant1.compareTo((org.joda.time.ReadableInstant) instant15);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime5 and instant10", (mutableDateTime5.compareTo(instant10) == 0) == mutableDateTime5.equals(instant10));
    }

    @Test
    public void test0022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0022");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        org.joda.time.Instant instant3 = instant1.withMillis((long) 'u');
        java.util.TimeZone timeZone4 = null;
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forTimeZone(timeZone4);
        org.joda.time.chrono.GJChronology gJChronology6 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone5);
        org.joda.time.DurationField durationField7 = gJChronology6.halfdays();
        long long11 = gJChronology6.add((long) 'a', (-1L), (int) (short) 0);
        boolean boolean13 = gJChronology6.equals((java.lang.Object) 0);
        org.joda.time.DateTimeField dateTimeField14 = gJChronology6.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology6.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField16 = gJChronology6.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField17 = gJChronology6.clockhourOfHalfday();
        org.joda.time.DateTime dateTime18 = instant1.toDateTime((org.joda.time.Chronology) gJChronology6);
        java.util.TimeZone timeZone19 = null;
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forTimeZone(timeZone19);
        org.joda.time.chrono.GJChronology gJChronology21 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone20);
        org.joda.time.DurationField durationField22 = gJChronology21.halfdays();
        long long26 = gJChronology21.add((long) 'a', (-1L), (int) (short) 0);
        long long30 = gJChronology21.add((long) (byte) 0, (long) '4', 100);
        org.joda.time.DateTimeField dateTimeField31 = gJChronology21.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField32 = gJChronology21.year();
        org.joda.time.DateTimeField dateTimeField33 = gJChronology21.monthOfYear();
        org.joda.time.MutableDateTime mutableDateTime34 = instant1.toMutableDateTime((org.joda.time.Chronology) gJChronology21);
        org.joda.time.DurationField durationField35 = gJChronology21.halfdays();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and dateTime18", (instant1.compareTo(dateTime18) == 0) == instant1.equals(dateTime18));
    }

    @Test
    public void test0023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0023");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        org.joda.time.Instant instant3 = instant1.withMillis((long) 'u');
        java.util.TimeZone timeZone4 = null;
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forTimeZone(timeZone4);
        org.joda.time.chrono.GJChronology gJChronology6 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone5);
        org.joda.time.DurationField durationField7 = gJChronology6.halfdays();
        long long11 = gJChronology6.add((long) 'a', (-1L), (int) (short) 0);
        boolean boolean13 = gJChronology6.equals((java.lang.Object) 0);
        org.joda.time.DateTimeField dateTimeField14 = gJChronology6.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology6.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField16 = gJChronology6.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField17 = gJChronology6.clockhourOfHalfday();
        org.joda.time.DateTime dateTime18 = instant1.toDateTime((org.joda.time.Chronology) gJChronology6);
        org.joda.time.Instant instant20 = instant1.plus(0L);
        org.joda.time.MutableDateTime mutableDateTime21 = instant20.toMutableDateTimeISO();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant20 and dateTime18", (instant20.compareTo(dateTime18) == 0) == instant20.equals(dateTime18));
    }

    @Test
    public void test0024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0024");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        boolean boolean2 = instant1.isEqualNow();
        org.joda.time.ReadableDuration readableDuration3 = null;
        org.joda.time.Instant instant4 = instant1.plus(readableDuration3);
        long long5 = instant1.getMillis();
        java.lang.String str6 = instant1.toString();
        org.joda.time.Instant instant7 = instant1.toInstant();
        java.util.TimeZone timeZone8 = null;
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forTimeZone(timeZone8);
        java.lang.String str11 = dateTimeZone9.getNameKey((long) 100);
        long long14 = dateTimeZone9.convertLocalToUTC((-2246399965L), true);
        org.joda.time.MutableDateTime mutableDateTime15 = instant7.toMutableDateTime(dateTimeZone9);
        int int17 = dateTimeZone9.getStandardOffset(117L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and mutableDateTime15", (instant1.compareTo(mutableDateTime15) == 0) == instant1.equals(mutableDateTime15));
    }

    @Test
    public void test0025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0025");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = gJChronology2.halfdays();
        long long7 = gJChronology2.add((long) 'a', (-1L), (int) (short) 0);
        org.joda.time.DateTimeField dateTimeField8 = gJChronology2.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField9 = gJChronology2.secondOfMinute();
        org.joda.time.Instant instant11 = new org.joda.time.Instant(52L);
        boolean boolean12 = instant11.isEqualNow();
        org.joda.time.ReadableDuration readableDuration13 = null;
        org.joda.time.Instant instant14 = instant11.plus(readableDuration13);
        boolean boolean15 = gJChronology2.equals((java.lang.Object) instant11);
        java.util.TimeZone timeZone16 = null;
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forTimeZone(timeZone16);
        org.joda.time.chrono.GJChronology gJChronology18 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone17);
        org.joda.time.DurationField durationField19 = gJChronology18.halfdays();
        org.joda.time.DateTimeField dateTimeField20 = gJChronology18.millisOfDay();
        org.joda.time.DateTimeField dateTimeField21 = gJChronology18.minuteOfDay();
        org.joda.time.DurationField durationField22 = gJChronology18.centuries();
        org.joda.time.DateTimeField dateTimeField23 = gJChronology18.dayOfYear();
        java.lang.String str24 = gJChronology18.toString();
        org.joda.time.DateTimeField dateTimeField25 = gJChronology18.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone26 = gJChronology18.getZone();
        org.joda.time.DateTime dateTime27 = instant11.toDateTime((org.joda.time.Chronology) gJChronology18);
        org.joda.time.Instant instant28 = instant11.toInstant();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant28 and dateTime27", (instant28.compareTo(dateTime27) == 0) == instant28.equals(dateTime27));
    }

    @Test
    public void test0026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0026");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = gJChronology2.halfdays();
        long long7 = gJChronology2.add((long) 'a', (-1L), (int) (short) 0);
        org.joda.time.DateTimeField dateTimeField8 = gJChronology2.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField9 = gJChronology2.secondOfMinute();
        org.joda.time.Instant instant11 = new org.joda.time.Instant(52L);
        boolean boolean12 = instant11.isEqualNow();
        org.joda.time.ReadableDuration readableDuration13 = null;
        org.joda.time.Instant instant14 = instant11.plus(readableDuration13);
        boolean boolean15 = gJChronology2.equals((java.lang.Object) instant11);
        java.util.TimeZone timeZone16 = null;
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forTimeZone(timeZone16);
        org.joda.time.chrono.GJChronology gJChronology18 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone17);
        org.joda.time.DurationField durationField19 = gJChronology18.halfdays();
        org.joda.time.DateTimeField dateTimeField20 = gJChronology18.millisOfDay();
        org.joda.time.DateTimeField dateTimeField21 = gJChronology18.minuteOfDay();
        org.joda.time.DurationField durationField22 = gJChronology18.centuries();
        org.joda.time.DateTimeField dateTimeField23 = gJChronology18.dayOfYear();
        java.lang.String str24 = gJChronology18.toString();
        org.joda.time.DateTimeField dateTimeField25 = gJChronology18.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone26 = gJChronology18.getZone();
        org.joda.time.DateTime dateTime27 = instant11.toDateTime((org.joda.time.Chronology) gJChronology18);
        java.util.TimeZone timeZone28 = null;
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forTimeZone(timeZone28);
        org.joda.time.chrono.GJChronology gJChronology30 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone29);
        org.joda.time.DurationField durationField31 = gJChronology30.halfdays();
        long long35 = gJChronology30.add((long) 'a', (-1L), (int) (short) 0);
        long long39 = gJChronology30.add((long) (byte) 0, (long) '4', 100);
        org.joda.time.DurationField durationField40 = gJChronology30.years();
        org.joda.time.DateTimeField dateTimeField41 = gJChronology30.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone42 = gJChronology30.getZone();
        boolean boolean43 = instant11.equals((java.lang.Object) gJChronology30);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant11 and dateTime27", (instant11.compareTo(dateTime27) == 0) == instant11.equals(dateTime27));
    }

    @Test
    public void test0027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0027");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = gJChronology2.halfdays();
        long long7 = gJChronology2.add((long) 'a', (-1L), (int) (short) 0);
        long long11 = gJChronology2.add((long) (byte) 0, (long) '4', 100);
        org.joda.time.DurationField durationField12 = gJChronology2.years();
        java.util.TimeZone timeZone13 = null;
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forTimeZone(timeZone13);
        org.joda.time.chrono.GJChronology gJChronology15 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone14);
        org.joda.time.DurationField durationField16 = gJChronology15.halfdays();
        long long20 = gJChronology15.add((long) 'a', (-1L), (int) (short) 0);
        org.joda.time.DateTimeField dateTimeField21 = gJChronology15.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField22 = gJChronology15.secondOfMinute();
        org.joda.time.Instant instant24 = new org.joda.time.Instant(52L);
        boolean boolean25 = instant24.isEqualNow();
        org.joda.time.ReadableDuration readableDuration26 = null;
        org.joda.time.Instant instant27 = instant24.plus(readableDuration26);
        boolean boolean28 = gJChronology15.equals((java.lang.Object) instant24);
        java.lang.String str29 = gJChronology15.toString();
        org.joda.time.DurationField durationField30 = gJChronology15.eras();
        int int31 = durationField12.compareTo(durationField30);
        long long34 = durationField12.getDifferenceAsLong(262974600000L, (-61827926399999L));
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField3 and durationField30", Math.signum(durationField3.compareTo(durationField30)) == -Math.signum(durationField30.compareTo(durationField3)));
    }

    @Test
    public void test0028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0028");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forTimeZone(timeZone2);
        org.joda.time.chrono.GJChronology gJChronology4 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone3);
        org.joda.time.DateTimeField dateTimeField5 = gJChronology4.millisOfSecond();
        int int6 = instant1.get(dateTimeField5);
        java.util.TimeZone timeZone7 = null;
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forTimeZone(timeZone7);
        org.joda.time.chrono.GJChronology gJChronology9 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone8);
        org.joda.time.DurationField durationField10 = gJChronology9.halfdays();
        java.util.TimeZone timeZone11 = null;
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forTimeZone(timeZone11);
        org.joda.time.chrono.GJChronology gJChronology13 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone12);
        long long17 = dateTimeZone12.convertLocalToUTC((long) (byte) -1, true, 0L);
        boolean boolean19 = dateTimeZone12.equals((java.lang.Object) true);
        org.joda.time.Chronology chronology20 = gJChronology9.withZone(dateTimeZone12);
        org.joda.time.MutableDateTime mutableDateTime21 = instant1.toMutableDateTime(dateTimeZone12);
        boolean boolean22 = mutableDateTime21.isAfterNow();
        java.util.TimeZone timeZone23 = null;
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forTimeZone(timeZone23);
        org.joda.time.chrono.GJChronology gJChronology25 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone24);
        org.joda.time.DurationField durationField26 = gJChronology25.halfdays();
        long long30 = gJChronology25.add((long) 'a', (-1L), (int) (short) 0);
        boolean boolean31 = mutableDateTime21.equals((java.lang.Object) gJChronology25);
        java.util.TimeZone timeZone32 = null;
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.forTimeZone(timeZone32);
        org.joda.time.chrono.GJChronology gJChronology34 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone33);
        org.joda.time.DurationField durationField35 = gJChronology34.halfdays();
        org.joda.time.Chronology chronology36 = gJChronology34.withUTC();
        java.lang.String str37 = gJChronology34.toString();
        org.joda.time.DateTimeField dateTimeField38 = gJChronology34.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(1, 10);
        org.joda.time.Chronology chronology42 = gJChronology34.withZone(dateTimeZone41);
        java.util.Locale locale44 = java.util.Locale.ITALIAN;
        java.util.Locale locale45 = locale44.stripExtensions();
        java.util.Locale locale46 = java.util.Locale.CANADA;
        java.lang.String str47 = locale44.getDisplayVariant(locale46);
        java.lang.String str48 = locale46.getDisplayLanguage();
        java.lang.String str49 = dateTimeZone41.getName((long) (byte) -1, locale46);
        org.joda.time.Chronology chronology50 = gJChronology25.withZone(dateTimeZone41);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and mutableDateTime21", (instant1.compareTo(mutableDateTime21) == 0) == instant1.equals(mutableDateTime21));
    }

    @Test
    public void test0029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0029");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField3 = gJChronology2.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.weekyearOfCentury();
        org.joda.time.Instant instant5 = gJChronology2.getGregorianCutover();
        org.joda.time.Instant instant7 = instant5.withMillis(0L);
        org.joda.time.Instant instant9 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone10 = null;
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forTimeZone(timeZone10);
        org.joda.time.chrono.GJChronology gJChronology12 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone11);
        org.joda.time.DateTimeField dateTimeField13 = gJChronology12.millisOfSecond();
        int int14 = instant9.get(dateTimeField13);
        org.joda.time.Instant instant16 = instant9.plus(0L);
        int int17 = instant7.compareTo((org.joda.time.ReadableInstant) instant16);
        org.joda.time.Instant instant19 = new org.joda.time.Instant(52L);
        boolean boolean20 = instant19.isEqualNow();
        org.joda.time.ReadableDuration readableDuration21 = null;
        org.joda.time.Instant instant22 = instant19.plus(readableDuration21);
        boolean boolean24 = instant22.equals((java.lang.Object) ' ');
        boolean boolean25 = instant16.isEqual((org.joda.time.ReadableInstant) instant22);
        org.joda.time.Instant instant27 = new org.joda.time.Instant(52L);
        org.joda.time.Instant instant29 = instant27.withMillis((long) 'u');
        java.util.TimeZone timeZone30 = null;
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forTimeZone(timeZone30);
        org.joda.time.chrono.GJChronology gJChronology32 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone31);
        org.joda.time.DurationField durationField33 = gJChronology32.halfdays();
        long long37 = gJChronology32.add((long) 'a', (-1L), (int) (short) 0);
        boolean boolean39 = gJChronology32.equals((java.lang.Object) 0);
        org.joda.time.DateTimeField dateTimeField40 = gJChronology32.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField41 = gJChronology32.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField42 = gJChronology32.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField43 = gJChronology32.clockhourOfHalfday();
        org.joda.time.DateTime dateTime44 = instant27.toDateTime((org.joda.time.Chronology) gJChronology32);
        boolean boolean45 = instant16.isEqual((org.joda.time.ReadableInstant) instant27);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant16 and dateTime44", (instant16.compareTo(dateTime44) == 0) == instant16.equals(dateTime44));
    }

    @Test
    public void test0030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0030");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        boolean boolean2 = instant1.isEqualNow();
        java.lang.String str3 = instant1.toString();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.MutableDateTime mutableDateTime5 = instant1.toMutableDateTime(chronology4);
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.Instant instant7 = instant1.minus(readableDuration6);
        java.util.TimeZone timeZone8 = null;
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forTimeZone(timeZone8);
        org.joda.time.chrono.GJChronology gJChronology10 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone9);
        org.joda.time.DurationField durationField11 = gJChronology10.halfdays();
        long long15 = gJChronology10.add((long) 'a', (-1L), (int) (short) 0);
        boolean boolean17 = gJChronology10.equals((java.lang.Object) 0);
        org.joda.time.DateTimeField dateTimeField18 = gJChronology10.dayOfMonth();
        org.joda.time.DurationField durationField19 = gJChronology10.days();
        org.joda.time.DateTime dateTime20 = instant1.toDateTime((org.joda.time.Chronology) gJChronology10);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime5 and instant1", (mutableDateTime5.compareTo(instant1) == 0) == mutableDateTime5.equals(instant1));
    }

    @Test
    public void test0031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0031");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str3 = dateTimeZone1.getNameKey((long) 100);
        boolean boolean4 = dateTimeZone1.isFixed();
        java.lang.String str5 = dateTimeZone1.toString();
        org.joda.time.Instant instant7 = new org.joda.time.Instant(52L);
        boolean boolean8 = instant7.isEqualNow();
        org.joda.time.ReadableDuration readableDuration9 = null;
        org.joda.time.Instant instant10 = instant7.plus(readableDuration9);
        long long11 = instant7.getMillis();
        java.lang.String str12 = instant7.toString();
        org.joda.time.Instant instant13 = instant7.toInstant();
        org.joda.time.DateTime dateTime14 = instant7.toDateTime();
        int int15 = dateTimeZone1.getOffset((org.joda.time.ReadableInstant) instant7);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant7 and dateTime14", (instant7.compareTo(dateTime14) == 0) == instant7.equals(dateTime14));
    }

    @Test
    public void test0032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0032");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        boolean boolean2 = instant1.isEqualNow();
        org.joda.time.ReadableDuration readableDuration3 = null;
        org.joda.time.Instant instant4 = instant1.plus(readableDuration3);
        long long5 = instant1.getMillis();
        java.lang.String str6 = instant1.toString();
        org.joda.time.Instant instant7 = instant1.toInstant();
        org.joda.time.DateTime dateTime8 = instant1.toDateTime();
        boolean boolean10 = instant1.isEqual((long) '4');
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and dateTime8", (instant1.compareTo(dateTime8) == 0) == instant1.equals(dateTime8));
    }

    @Test
    public void test0033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0033");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        boolean boolean2 = instant1.isEqualNow();
        java.lang.String str3 = instant1.toString();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.MutableDateTime mutableDateTime5 = instant1.toMutableDateTime(chronology4);
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.Instant instant7 = instant1.minus(readableDuration6);
        java.util.TimeZone timeZone8 = null;
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forTimeZone(timeZone8);
        org.joda.time.chrono.GJChronology gJChronology10 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone9);
        long long14 = dateTimeZone9.convertLocalToUTC((long) (byte) -1, true, 0L);
        boolean boolean16 = dateTimeZone9.equals((java.lang.Object) true);
        org.joda.time.chrono.GJChronology gJChronology17 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone9);
        org.joda.time.DateTimeField dateTimeField18 = gJChronology17.weekyear();
        java.lang.String str19 = gJChronology17.toString();
        org.joda.time.MutableDateTime mutableDateTime20 = instant7.toMutableDateTime((org.joda.time.Chronology) gJChronology17);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant7 and mutableDateTime5", (instant7.compareTo(mutableDateTime5) == 0) == instant7.equals(mutableDateTime5));
    }

    @Test
    public void test0034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0034");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = gJChronology2.halfdays();
        long long7 = gJChronology2.add((long) 'a', (-1L), (int) (short) 0);
        org.joda.time.DateTimeField dateTimeField8 = gJChronology2.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField9 = gJChronology2.secondOfMinute();
        org.joda.time.Instant instant11 = new org.joda.time.Instant(52L);
        boolean boolean12 = instant11.isEqualNow();
        org.joda.time.ReadableDuration readableDuration13 = null;
        org.joda.time.Instant instant14 = instant11.plus(readableDuration13);
        boolean boolean15 = gJChronology2.equals((java.lang.Object) instant11);
        java.lang.String str16 = gJChronology2.toString();
        org.joda.time.DurationField durationField17 = gJChronology2.eras();
        org.joda.time.DurationField durationField18 = gJChronology2.halfdays();
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField18 and durationField17", Math.signum(durationField18.compareTo(durationField17)) == -Math.signum(durationField17.compareTo(durationField18)));
    }

    @Test
    public void test0035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0035");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        boolean boolean2 = instant1.isEqualNow();
        org.joda.time.ReadableDuration readableDuration3 = null;
        org.joda.time.Instant instant4 = instant1.plus(readableDuration3);
        boolean boolean6 = instant4.equals((java.lang.Object) ' ');
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(1, 10);
        java.util.TimeZone timeZone10 = null;
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forTimeZone(timeZone10);
        long long13 = dateTimeZone9.getMillisKeepLocal(dateTimeZone11, 4320000000L);
        boolean boolean14 = instant4.equals((java.lang.Object) 4320000000L);
        org.joda.time.Instant instant16 = instant4.withMillis(10L);
        org.joda.time.Instant instant18 = new org.joda.time.Instant(52L);
        org.joda.time.Instant instant20 = instant18.withMillis((long) 'u');
        java.util.TimeZone timeZone21 = null;
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forTimeZone(timeZone21);
        org.joda.time.chrono.GJChronology gJChronology23 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone22);
        org.joda.time.DurationField durationField24 = gJChronology23.halfdays();
        long long28 = gJChronology23.add((long) 'a', (-1L), (int) (short) 0);
        boolean boolean30 = gJChronology23.equals((java.lang.Object) 0);
        org.joda.time.DateTimeField dateTimeField31 = gJChronology23.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField32 = gJChronology23.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField33 = gJChronology23.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField34 = gJChronology23.clockhourOfHalfday();
        org.joda.time.DateTime dateTime35 = instant18.toDateTime((org.joda.time.Chronology) gJChronology23);
        java.util.TimeZone timeZone36 = null;
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.forTimeZone(timeZone36);
        org.joda.time.chrono.GJChronology gJChronology38 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone37);
        org.joda.time.DurationField durationField39 = gJChronology38.halfdays();
        long long43 = gJChronology38.add((long) 'a', (-1L), (int) (short) 0);
        long long47 = gJChronology38.add((long) (byte) 0, (long) '4', 100);
        org.joda.time.DateTimeField dateTimeField48 = gJChronology38.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField49 = gJChronology38.year();
        org.joda.time.DateTimeField dateTimeField50 = gJChronology38.monthOfYear();
        org.joda.time.MutableDateTime mutableDateTime51 = instant18.toMutableDateTime((org.joda.time.Chronology) gJChronology38);
        boolean boolean52 = instant4.isBefore((org.joda.time.ReadableInstant) instant18);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant4 and dateTime35", (instant4.compareTo(dateTime35) == 0) == instant4.equals(dateTime35));
    }

    @Test
    public void test0036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0036");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = gJChronology2.halfdays();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.millisOfDay();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.minuteOfDay();
        org.joda.time.DurationField durationField6 = gJChronology2.centuries();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology2.yearOfCentury();
        org.joda.time.Chronology chronology8 = gJChronology2.withUTC();
        org.joda.time.DateTimeField dateTimeField9 = gJChronology2.yearOfEra();
        org.joda.time.DurationField durationField10 = gJChronology2.eras();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField10, durationField3, and durationField6", !(durationField10.compareTo(durationField3) == 0) || (Math.signum(durationField10.compareTo(durationField6)) == Math.signum(durationField3.compareTo(durationField6))));
    }

    @Test
    public void test0037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0037");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        org.joda.time.Instant instant3 = instant1.withMillis((long) 'u');
        java.util.TimeZone timeZone4 = null;
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forTimeZone(timeZone4);
        org.joda.time.chrono.GJChronology gJChronology6 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone5);
        org.joda.time.DurationField durationField7 = gJChronology6.halfdays();
        long long11 = gJChronology6.add((long) 'a', (-1L), (int) (short) 0);
        boolean boolean13 = gJChronology6.equals((java.lang.Object) 0);
        org.joda.time.DateTimeField dateTimeField14 = gJChronology6.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology6.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField16 = gJChronology6.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField17 = gJChronology6.clockhourOfHalfday();
        org.joda.time.DateTime dateTime18 = instant1.toDateTime((org.joda.time.Chronology) gJChronology6);
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.getDefault();
        int int21 = dateTimeZone19.getOffset((long) (byte) 1);
        long long24 = dateTimeZone19.adjustOffset((-1L), false);
        org.joda.time.MutableDateTime mutableDateTime25 = dateTime18.toMutableDateTime(dateTimeZone19);
        boolean boolean26 = mutableDateTime25.isEqualNow();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and dateTime18", (instant1.compareTo(dateTime18) == 0) == instant1.equals(dateTime18));
    }

    @Test
    public void test0038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0038");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forTimeZone(timeZone2);
        org.joda.time.chrono.GJChronology gJChronology4 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone3);
        org.joda.time.DateTimeField dateTimeField5 = gJChronology4.millisOfSecond();
        int int6 = instant1.get(dateTimeField5);
        org.joda.time.Instant instant8 = instant1.plus(0L);
        org.joda.time.Instant instant9 = instant8.toInstant();
        org.joda.time.Instant instant11 = new org.joda.time.Instant(52L);
        boolean boolean12 = instant11.isEqualNow();
        java.lang.String str13 = instant11.toString();
        java.lang.String str14 = instant11.toString();
        org.joda.time.Instant instant16 = new org.joda.time.Instant(52L);
        boolean boolean17 = instant16.isEqualNow();
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.Instant instant19 = instant16.plus(readableDuration18);
        boolean boolean20 = instant11.isBefore((org.joda.time.ReadableInstant) instant19);
        org.joda.time.Instant instant22 = instant11.minus((long) 0);
        int int23 = instant8.compareTo((org.joda.time.ReadableInstant) instant11);
        org.joda.time.DateTime dateTime24 = instant8.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration25 = null;
        org.joda.time.Instant instant26 = instant8.plus(readableDuration25);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant26 and dateTime24", (instant26.compareTo(dateTime24) == 0) == instant26.equals(dateTime24));
    }

    @Test
    public void test0039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0039");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = gJChronology2.halfdays();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.millisOfDay();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.minuteOfDay();
        org.joda.time.DurationField durationField6 = gJChronology2.centuries();
        java.util.TimeZone timeZone7 = null;
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forTimeZone(timeZone7);
        org.joda.time.chrono.GJChronology gJChronology9 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone8);
        org.joda.time.DurationField durationField10 = gJChronology9.halfdays();
        long long13 = durationField10.add((long) 100, 100L);
        boolean boolean14 = durationField10.isPrecise();
        int int15 = durationField6.compareTo(durationField10);
        java.util.TimeZone timeZone16 = null;
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forTimeZone(timeZone16);
        org.joda.time.chrono.GJChronology gJChronology18 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone17);
        org.joda.time.DateTimeField dateTimeField19 = gJChronology18.era();
        org.joda.time.DateTimeField dateTimeField20 = gJChronology18.centuryOfEra();
        org.joda.time.DurationField durationField21 = gJChronology18.hours();
        org.joda.time.DurationField durationField22 = gJChronology18.eras();
        int int23 = durationField6.compareTo(durationField22);
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField22, durationField3, and durationField21", !(durationField22.compareTo(durationField3) == 0) || (Math.signum(durationField22.compareTo(durationField21)) == Math.signum(durationField3.compareTo(durationField21))));
    }

    @Test
    public void test0040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0040");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        boolean boolean2 = instant1.isEqualNow();
        java.lang.String str3 = instant1.toString();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.MutableDateTime mutableDateTime5 = instant1.toMutableDateTime(chronology4);
        org.joda.time.Instant instant7 = new org.joda.time.Instant(52L);
        boolean boolean8 = instant7.isEqualNow();
        boolean boolean9 = instant1.isAfter((org.joda.time.ReadableInstant) instant7);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.Instant instant11 = instant1.minus(readableDuration10);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime5 and instant7", (mutableDateTime5.compareTo(instant7) == 0) == mutableDateTime5.equals(instant7));
    }

    @Test
    public void test0041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0041");
        org.joda.time.Instant instant0 = org.joda.time.Instant.now();
        org.joda.time.Instant instant3 = instant0.withDurationAdded(306102434400000L, (int) (short) 100);
        java.util.TimeZone timeZone4 = null;
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forTimeZone(timeZone4);
        org.joda.time.chrono.GJChronology gJChronology6 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone5);
        long long10 = dateTimeZone5.convertLocalToUTC((long) (byte) -1, true, 0L);
        boolean boolean12 = dateTimeZone5.equals((java.lang.Object) true);
        long long14 = dateTimeZone5.nextTransition((long) '4');
        java.lang.String str16 = dateTimeZone5.getShortName(432000001L);
        java.util.TimeZone timeZone17 = dateTimeZone5.toTimeZone();
        org.joda.time.DateTime dateTime18 = instant0.toDateTime(dateTimeZone5);
        java.util.TimeZone timeZone19 = null;
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forTimeZone(timeZone19);
        java.lang.String str22 = dateTimeZone20.getNameKey((long) 100);
        boolean boolean23 = dateTimeZone20.isFixed();
        java.util.Locale locale27 = new java.util.Locale("DurationField[halfdays]", "\u82f1\u6587");
        java.lang.String str28 = dateTimeZone20.getName((long) (short) 10, locale27);
        org.joda.time.Instant instant30 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone31 = null;
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.forTimeZone(timeZone31);
        org.joda.time.chrono.GJChronology gJChronology33 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone32);
        org.joda.time.DateTimeField dateTimeField34 = gJChronology33.millisOfSecond();
        int int35 = instant30.get(dateTimeField34);
        org.joda.time.Chronology chronology36 = instant30.getChronology();
        org.joda.time.chrono.GJChronology gJChronology37 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone20, (org.joda.time.ReadableInstant) instant30);
        org.joda.time.DateTime dateTime38 = instant30.toDateTime();
        org.joda.time.chrono.GJChronology gJChronology40 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone5, (org.joda.time.ReadableInstant) instant30, (int) (byte) 1);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant0 and dateTime18", (instant0.compareTo(dateTime18) == 0) == instant0.equals(dateTime18));
    }

    @Test
    public void test0042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0042");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        boolean boolean2 = instant1.isEqualNow();
        java.lang.String str3 = instant1.toString();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.MutableDateTime mutableDateTime5 = instant1.toMutableDateTime(chronology4);
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.Instant instant7 = instant1.minus(readableDuration6);
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.Instant instant10 = instant1.withDurationAdded(readableDuration8, (int) (short) 0);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime5 and instant10", (mutableDateTime5.compareTo(instant10) == 0) == mutableDateTime5.equals(instant10));
    }

    @Test
    public void test0043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0043");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        boolean boolean2 = instant1.isEqualNow();
        org.joda.time.ReadableDuration readableDuration3 = null;
        org.joda.time.Instant instant4 = instant1.plus(readableDuration3);
        long long5 = instant1.getMillis();
        java.lang.String str6 = instant1.toString();
        org.joda.time.Instant instant7 = instant1.toInstant();
        org.joda.time.DateTime dateTime8 = instant1.toDateTime();
        java.util.TimeZone timeZone9 = null;
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forTimeZone(timeZone9);
        java.lang.String str12 = dateTimeZone10.getNameKey((long) 100);
        boolean boolean13 = dateTimeZone10.isFixed();
        org.joda.time.chrono.GJChronology gJChronology14 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone10);
        int int15 = gJChronology14.getMinimumDaysInFirstWeek();
        org.joda.time.DateTimeField dateTimeField16 = gJChronology14.clockhourOfDay();
        org.joda.time.MutableDateTime mutableDateTime17 = instant1.toMutableDateTime((org.joda.time.Chronology) gJChronology14);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and dateTime8", (instant1.compareTo(dateTime8) == 0) == instant1.equals(dateTime8));
    }

    @Test
    public void test0044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0044");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str3 = dateTimeZone1.getNameKey((long) 100);
        boolean boolean4 = dateTimeZone1.isFixed();
        java.util.Locale locale8 = new java.util.Locale("DurationField[halfdays]", "\u82f1\u6587");
        java.lang.String str9 = dateTimeZone1.getName((long) (short) 10, locale8);
        org.joda.time.Instant instant11 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone12 = null;
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forTimeZone(timeZone12);
        org.joda.time.chrono.GJChronology gJChronology14 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone13);
        org.joda.time.DateTimeField dateTimeField15 = gJChronology14.millisOfSecond();
        int int16 = instant11.get(dateTimeField15);
        org.joda.time.Chronology chronology17 = instant11.getChronology();
        org.joda.time.chrono.GJChronology gJChronology18 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1, (org.joda.time.ReadableInstant) instant11);
        org.joda.time.DurationField durationField19 = gJChronology18.eras();
        org.joda.time.DurationField durationField20 = gJChronology18.eras();
        org.joda.time.DurationField durationField21 = gJChronology18.millis();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField19, durationField21, and durationField19", !(durationField19.compareTo(durationField21) == 0) || (Math.signum(durationField19.compareTo(durationField19)) == Math.signum(durationField21.compareTo(durationField19))));
    }

    @Test
    public void test0045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0045");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        boolean boolean2 = instant1.isEqualNow();
        java.lang.String str3 = instant1.toString();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.MutableDateTime mutableDateTime5 = instant1.toMutableDateTime(chronology4);
        org.joda.time.Instant instant7 = new org.joda.time.Instant(52L);
        boolean boolean8 = instant7.isEqualNow();
        org.joda.time.Instant instant10 = new org.joda.time.Instant(52L);
        org.joda.time.Instant instant12 = instant10.withMillis((long) 'u');
        boolean boolean13 = instant7.isAfter((org.joda.time.ReadableInstant) instant10);
        boolean boolean14 = mutableDateTime5.isEqual((org.joda.time.ReadableInstant) instant10);
        java.util.TimeZone timeZone15 = null;
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forTimeZone(timeZone15);
        org.joda.time.chrono.GJChronology gJChronology17 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone16);
        java.util.Locale locale19 = new java.util.Locale("hi!");
        java.lang.String str20 = locale19.getCountry();
        java.util.Locale locale21 = java.util.Locale.getDefault();
        java.lang.String str22 = locale21.getDisplayName();
        java.lang.String str23 = locale19.getDisplayScript(locale21);
        boolean boolean24 = dateTimeZone16.equals((java.lang.Object) locale21);
        int int26 = dateTimeZone16.getOffsetFromLocal((long) (short) 10);
        java.util.TimeZone timeZone27 = null;
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forTimeZone(timeZone27);
        org.joda.time.chrono.GJChronology gJChronology29 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone28);
        org.joda.time.DateTimeField dateTimeField30 = gJChronology29.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField31 = gJChronology29.weekyearOfCentury();
        org.joda.time.Instant instant32 = gJChronology29.getGregorianCutover();
        org.joda.time.Instant instant34 = instant32.withMillis(0L);
        org.joda.time.Instant instant36 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone37 = null;
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forTimeZone(timeZone37);
        org.joda.time.chrono.GJChronology gJChronology39 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone38);
        org.joda.time.DateTimeField dateTimeField40 = gJChronology39.millisOfSecond();
        int int41 = instant36.get(dateTimeField40);
        org.joda.time.Instant instant43 = instant36.plus(0L);
        int int44 = instant34.compareTo((org.joda.time.ReadableInstant) instant43);
        org.joda.time.DateTimeFieldType dateTimeFieldType45 = null;
        boolean boolean46 = instant43.isSupported(dateTimeFieldType45);
        int int47 = dateTimeZone16.getOffset((org.joda.time.ReadableInstant) instant43);
        java.util.TimeZone timeZone48 = null;
        org.joda.time.DateTimeZone dateTimeZone49 = org.joda.time.DateTimeZone.forTimeZone(timeZone48);
        org.joda.time.chrono.GJChronology gJChronology50 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone49);
        org.joda.time.DateTime dateTime51 = instant43.toDateTime(dateTimeZone49);
        org.joda.time.DateTime dateTime52 = instant10.toDateTime(dateTimeZone49);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and mutableDateTime5", (instant1.compareTo(mutableDateTime5) == 0) == instant1.equals(mutableDateTime5));
    }

    @Test
    public void test0046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0046");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forTimeZone(timeZone2);
        org.joda.time.chrono.GJChronology gJChronology4 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone3);
        org.joda.time.DateTimeField dateTimeField5 = gJChronology4.millisOfSecond();
        int int6 = instant1.get(dateTimeField5);
        java.util.TimeZone timeZone7 = null;
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forTimeZone(timeZone7);
        org.joda.time.chrono.GJChronology gJChronology9 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone8);
        org.joda.time.DurationField durationField10 = gJChronology9.halfdays();
        java.util.TimeZone timeZone11 = null;
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forTimeZone(timeZone11);
        org.joda.time.chrono.GJChronology gJChronology13 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone12);
        long long17 = dateTimeZone12.convertLocalToUTC((long) (byte) -1, true, 0L);
        boolean boolean19 = dateTimeZone12.equals((java.lang.Object) true);
        org.joda.time.Chronology chronology20 = gJChronology9.withZone(dateTimeZone12);
        org.joda.time.MutableDateTime mutableDateTime21 = instant1.toMutableDateTime(dateTimeZone12);
        boolean boolean22 = mutableDateTime21.isAfterNow();
        java.util.TimeZone timeZone23 = null;
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forTimeZone(timeZone23);
        org.joda.time.chrono.GJChronology gJChronology25 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone24);
        org.joda.time.DurationField durationField26 = gJChronology25.halfdays();
        long long30 = gJChronology25.add((long) 'a', (-1L), (int) (short) 0);
        boolean boolean31 = mutableDateTime21.equals((java.lang.Object) gJChronology25);
        org.joda.time.DateTimeField dateTimeField32 = gJChronology25.minuteOfDay();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and mutableDateTime21", (instant1.compareTo(mutableDateTime21) == 0) == instant1.equals(mutableDateTime21));
    }

    @Test
    public void test0047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0047");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        boolean boolean2 = instant1.isEqualNow();
        java.lang.String str3 = instant1.toString();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.MutableDateTime mutableDateTime5 = instant1.toMutableDateTime(chronology4);
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.Instant instant7 = instant1.minus(readableDuration6);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = null;
        java.lang.String str9 = instant1.toString(dateTimeFormatter8);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime5 and instant1", (mutableDateTime5.compareTo(instant1) == 0) == mutableDateTime5.equals(instant1));
    }

    @Test
    public void test0048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0048");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forTimeZone(timeZone2);
        org.joda.time.chrono.GJChronology gJChronology4 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone3);
        org.joda.time.DateTimeField dateTimeField5 = gJChronology4.millisOfSecond();
        int int6 = instant1.get(dateTimeField5);
        org.joda.time.Instant instant8 = instant1.plus(0L);
        java.util.TimeZone timeZone9 = null;
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forTimeZone(timeZone9);
        org.joda.time.chrono.GJChronology gJChronology11 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone10);
        org.joda.time.DurationField durationField12 = gJChronology11.halfdays();
        org.joda.time.Chronology chronology13 = gJChronology11.withUTC();
        java.lang.String str14 = gJChronology11.toString();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology11.hourOfHalfday();
        int int16 = instant1.get(dateTimeField15);
        java.util.TimeZone timeZone17 = null;
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forTimeZone(timeZone17);
        org.joda.time.chrono.GJChronology gJChronology19 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone18);
        org.joda.time.DurationField durationField20 = gJChronology19.halfdays();
        long long24 = gJChronology19.add((long) 'a', (-1L), (int) (short) 0);
        org.joda.time.DateTimeField dateTimeField25 = gJChronology19.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField26 = gJChronology19.secondOfMinute();
        org.joda.time.Instant instant28 = new org.joda.time.Instant(52L);
        boolean boolean29 = instant28.isEqualNow();
        org.joda.time.ReadableDuration readableDuration30 = null;
        org.joda.time.Instant instant31 = instant28.plus(readableDuration30);
        boolean boolean32 = gJChronology19.equals((java.lang.Object) instant28);
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = null;
        boolean boolean34 = instant28.isSupported(dateTimeFieldType33);
        org.joda.time.DateTimeFieldType dateTimeFieldType35 = null;
        boolean boolean36 = instant28.isSupported(dateTimeFieldType35);
        org.joda.time.DateTimeZone dateTimeZone37 = instant28.getZone();
        boolean boolean38 = instant1.isAfter((org.joda.time.ReadableInstant) instant28);
        org.joda.time.Instant instant40 = instant1.minus((long) 70);
        org.joda.time.DateTime dateTime41 = instant1.toDateTimeISO();
        org.joda.time.Instant instant42 = instant1.toInstant();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant42 and dateTime41", (instant42.compareTo(dateTime41) == 0) == instant42.equals(dateTime41));
    }

    @Test
    public void test0049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0049");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = gJChronology2.halfdays();
        long long7 = gJChronology2.add((long) 'a', (-1L), (int) (short) 0);
        long long11 = gJChronology2.add((long) (byte) 0, (long) '4', 100);
        org.joda.time.DurationField durationField12 = gJChronology2.years();
        java.util.TimeZone timeZone13 = null;
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forTimeZone(timeZone13);
        org.joda.time.chrono.GJChronology gJChronology15 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone14);
        org.joda.time.DurationField durationField16 = gJChronology15.halfdays();
        long long20 = gJChronology15.add((long) 'a', (-1L), (int) (short) 0);
        org.joda.time.DateTimeField dateTimeField21 = gJChronology15.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField22 = gJChronology15.secondOfMinute();
        org.joda.time.Instant instant24 = new org.joda.time.Instant(52L);
        boolean boolean25 = instant24.isEqualNow();
        org.joda.time.ReadableDuration readableDuration26 = null;
        org.joda.time.Instant instant27 = instant24.plus(readableDuration26);
        boolean boolean28 = gJChronology15.equals((java.lang.Object) instant24);
        java.lang.String str29 = gJChronology15.toString();
        org.joda.time.DurationField durationField30 = gJChronology15.eras();
        int int31 = durationField12.compareTo(durationField30);
        boolean boolean32 = durationField30.isPrecise();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField30, durationField3, and durationField12", !(durationField30.compareTo(durationField3) == 0) || (Math.signum(durationField30.compareTo(durationField12)) == Math.signum(durationField3.compareTo(durationField12))));
    }

    @Test
    public void test0050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0050");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        boolean boolean2 = instant1.isEqualNow();
        org.joda.time.ReadableDuration readableDuration3 = null;
        org.joda.time.Instant instant4 = instant1.plus(readableDuration3);
        long long5 = instant1.getMillis();
        java.lang.String str6 = instant1.toString();
        org.joda.time.Instant instant7 = instant1.toInstant();
        java.util.TimeZone timeZone8 = null;
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forTimeZone(timeZone8);
        java.lang.String str11 = dateTimeZone9.getNameKey((long) 100);
        long long14 = dateTimeZone9.convertLocalToUTC((-2246399965L), true);
        org.joda.time.MutableDateTime mutableDateTime15 = instant7.toMutableDateTime(dateTimeZone9);
        java.util.Locale locale17 = null;
        java.lang.String str18 = dateTimeZone9.getName(3600000L, locale17);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and mutableDateTime15", (instant1.compareTo(mutableDateTime15) == 0) == instant1.equals(mutableDateTime15));
    }

    @Test
    public void test0051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0051");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        java.util.Locale locale4 = new java.util.Locale("hi!");
        java.lang.String str5 = locale4.getCountry();
        java.util.Locale locale6 = java.util.Locale.getDefault();
        java.lang.String str7 = locale6.getDisplayName();
        java.lang.String str8 = locale4.getDisplayScript(locale6);
        boolean boolean9 = dateTimeZone1.equals((java.lang.Object) locale6);
        int int11 = dateTimeZone1.getOffsetFromLocal((long) (short) 10);
        java.util.TimeZone timeZone12 = null;
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forTimeZone(timeZone12);
        org.joda.time.chrono.GJChronology gJChronology14 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone13);
        org.joda.time.DateTimeField dateTimeField15 = gJChronology14.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField16 = gJChronology14.weekyearOfCentury();
        org.joda.time.Instant instant17 = gJChronology14.getGregorianCutover();
        org.joda.time.Instant instant19 = instant17.withMillis(0L);
        org.joda.time.Instant instant21 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone22 = null;
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        org.joda.time.chrono.GJChronology gJChronology24 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone23);
        org.joda.time.DateTimeField dateTimeField25 = gJChronology24.millisOfSecond();
        int int26 = instant21.get(dateTimeField25);
        org.joda.time.Instant instant28 = instant21.plus(0L);
        int int29 = instant19.compareTo((org.joda.time.ReadableInstant) instant28);
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = null;
        boolean boolean31 = instant28.isSupported(dateTimeFieldType30);
        int int32 = dateTimeZone1.getOffset((org.joda.time.ReadableInstant) instant28);
        org.joda.time.DateTime dateTime33 = instant28.toDateTimeISO();
        org.joda.time.Instant instant35 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone36 = null;
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.forTimeZone(timeZone36);
        org.joda.time.chrono.GJChronology gJChronology38 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone37);
        org.joda.time.DateTimeField dateTimeField39 = gJChronology38.millisOfSecond();
        int int40 = instant35.get(dateTimeField39);
        org.joda.time.Instant instant42 = instant35.plus(0L);
        org.joda.time.Instant instant43 = instant42.toInstant();
        org.joda.time.Instant instant45 = new org.joda.time.Instant(52L);
        boolean boolean46 = instant45.isEqualNow();
        java.lang.String str47 = instant45.toString();
        java.lang.String str48 = instant45.toString();
        org.joda.time.Instant instant50 = new org.joda.time.Instant(52L);
        boolean boolean51 = instant50.isEqualNow();
        org.joda.time.ReadableDuration readableDuration52 = null;
        org.joda.time.Instant instant53 = instant50.plus(readableDuration52);
        boolean boolean54 = instant45.isBefore((org.joda.time.ReadableInstant) instant53);
        org.joda.time.Instant instant56 = instant45.minus((long) 0);
        int int57 = instant42.compareTo((org.joda.time.ReadableInstant) instant45);
        org.joda.time.Instant instant60 = instant45.withDurationAdded((long) (short) 100, 70);
        boolean boolean61 = instant28.isBefore((org.joda.time.ReadableInstant) instant60);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant28 and dateTime33", (instant28.compareTo(dateTime33) == 0) == instant28.equals(dateTime33));
    }

    @Test
    public void test0052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0052");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = gJChronology2.halfdays();
        long long7 = gJChronology2.add((long) 'a', (-1L), (int) (short) 0);
        long long11 = gJChronology2.add((long) (byte) 0, (long) '4', 100);
        org.joda.time.DurationField durationField12 = gJChronology2.years();
        java.util.TimeZone timeZone13 = null;
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forTimeZone(timeZone13);
        org.joda.time.chrono.GJChronology gJChronology15 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone14);
        org.joda.time.DurationField durationField16 = gJChronology15.halfdays();
        long long20 = gJChronology15.add((long) 'a', (-1L), (int) (short) 0);
        org.joda.time.DateTimeField dateTimeField21 = gJChronology15.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField22 = gJChronology15.secondOfMinute();
        org.joda.time.Instant instant24 = new org.joda.time.Instant(52L);
        boolean boolean25 = instant24.isEqualNow();
        org.joda.time.ReadableDuration readableDuration26 = null;
        org.joda.time.Instant instant27 = instant24.plus(readableDuration26);
        boolean boolean28 = gJChronology15.equals((java.lang.Object) instant24);
        java.lang.String str29 = gJChronology15.toString();
        org.joda.time.DurationField durationField30 = gJChronology15.eras();
        int int31 = durationField12.compareTo(durationField30);
        long long34 = durationField12.getMillis(43200100L, (-2246399965L));
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField3 and durationField30", Math.signum(durationField3.compareTo(durationField30)) == -Math.signum(durationField30.compareTo(durationField3)));
    }

    @Test
    public void test0053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0053");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = gJChronology2.halfdays();
        long long7 = gJChronology2.add((long) 'a', (-1L), (int) (short) 0);
        long long11 = gJChronology2.add((long) (byte) 0, (long) '4', 100);
        org.joda.time.DateTimeField dateTimeField12 = gJChronology2.minuteOfHour();
        org.joda.time.DurationField durationField13 = gJChronology2.hours();
        org.joda.time.DateTimeField dateTimeField14 = gJChronology2.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology2.millisOfSecond();
        org.joda.time.DurationField durationField16 = gJChronology2.seconds();
        java.lang.String str17 = gJChronology2.toString();
        org.joda.time.DurationField durationField18 = gJChronology2.weekyears();
        org.joda.time.Instant instant20 = new org.joda.time.Instant(52L);
        org.joda.time.Instant instant22 = instant20.withMillis((long) 'u');
        java.util.TimeZone timeZone23 = null;
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forTimeZone(timeZone23);
        org.joda.time.chrono.GJChronology gJChronology25 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone24);
        org.joda.time.DurationField durationField26 = gJChronology25.halfdays();
        long long30 = gJChronology25.add((long) 'a', (-1L), (int) (short) 0);
        boolean boolean32 = gJChronology25.equals((java.lang.Object) 0);
        org.joda.time.DateTimeField dateTimeField33 = gJChronology25.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField34 = gJChronology25.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField35 = gJChronology25.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField36 = gJChronology25.clockhourOfHalfday();
        org.joda.time.DateTime dateTime37 = instant20.toDateTime((org.joda.time.Chronology) gJChronology25);
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.getDefault();
        int int40 = dateTimeZone38.getOffset((long) (byte) 1);
        long long43 = dateTimeZone38.adjustOffset((-1L), false);
        org.joda.time.MutableDateTime mutableDateTime44 = dateTime37.toMutableDateTime(dateTimeZone38);
        org.joda.time.Chronology chronology45 = gJChronology2.withZone(dateTimeZone38);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant20 and dateTime37", (instant20.compareTo(dateTime37) == 0) == instant20.equals(dateTime37));
    }

    @Test
    public void test0054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0054");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        java.util.Locale locale4 = new java.util.Locale("hi!");
        java.lang.String str5 = locale4.getCountry();
        java.util.Locale locale6 = java.util.Locale.getDefault();
        java.lang.String str7 = locale6.getDisplayName();
        java.lang.String str8 = locale4.getDisplayScript(locale6);
        boolean boolean9 = dateTimeZone1.equals((java.lang.Object) locale6);
        int int11 = dateTimeZone1.getOffsetFromLocal((long) (short) 10);
        java.util.TimeZone timeZone12 = null;
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forTimeZone(timeZone12);
        org.joda.time.chrono.GJChronology gJChronology14 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone13);
        org.joda.time.DateTimeField dateTimeField15 = gJChronology14.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField16 = gJChronology14.weekyearOfCentury();
        org.joda.time.Instant instant17 = gJChronology14.getGregorianCutover();
        org.joda.time.Instant instant19 = instant17.withMillis(0L);
        org.joda.time.Instant instant21 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone22 = null;
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        org.joda.time.chrono.GJChronology gJChronology24 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone23);
        org.joda.time.DateTimeField dateTimeField25 = gJChronology24.millisOfSecond();
        int int26 = instant21.get(dateTimeField25);
        org.joda.time.Instant instant28 = instant21.plus(0L);
        int int29 = instant19.compareTo((org.joda.time.ReadableInstant) instant28);
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = null;
        boolean boolean31 = instant28.isSupported(dateTimeFieldType30);
        int int32 = dateTimeZone1.getOffset((org.joda.time.ReadableInstant) instant28);
        java.util.TimeZone timeZone33 = null;
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.forTimeZone(timeZone33);
        org.joda.time.chrono.GJChronology gJChronology35 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone34);
        org.joda.time.DateTime dateTime36 = instant28.toDateTime(dateTimeZone34);
        boolean boolean37 = dateTimeZone34.isFixed();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant21 and dateTime36", (instant21.compareTo(dateTime36) == 0) == instant21.equals(dateTime36));
    }

    @Test
    public void test0055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0055");
        java.util.Locale.Category category0 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale1 = java.util.Locale.getDefault();
        boolean boolean2 = locale1.hasExtensions();
        java.lang.String str3 = locale1.getISO3Language();
        java.util.Locale.setDefault(category0, locale1);
        org.joda.time.Instant instant6 = new org.joda.time.Instant(52L);
        boolean boolean7 = instant6.isEqualNow();
        java.lang.String str8 = instant6.toString();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.MutableDateTime mutableDateTime10 = instant6.toMutableDateTime(chronology9);
        org.joda.time.MutableDateTime mutableDateTime11 = instant6.toMutableDateTime();
        boolean boolean13 = instant6.isEqual((long) '4');
        boolean boolean14 = locale1.equals((java.lang.Object) boolean13);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant6 and mutableDateTime10", (instant6.compareTo(mutableDateTime10) == 0) == instant6.equals(mutableDateTime10));
    }

    @Test
    public void test0056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0056");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        boolean boolean2 = instant1.isEqualNow();
        org.joda.time.ReadableDuration readableDuration3 = null;
        org.joda.time.Instant instant4 = instant1.plus(readableDuration3);
        long long5 = instant1.getMillis();
        java.lang.String str6 = instant1.toString();
        org.joda.time.Instant instant7 = instant1.toInstant();
        org.joda.time.Instant instant9 = new org.joda.time.Instant(52L);
        boolean boolean10 = instant9.isEqualNow();
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.Instant instant12 = instant9.plus(readableDuration11);
        long long13 = instant9.getMillis();
        java.lang.String str14 = instant9.toString();
        org.joda.time.Instant instant15 = instant9.toInstant();
        org.joda.time.DateTime dateTime16 = instant9.toDateTime();
        boolean boolean17 = instant7.equals((java.lang.Object) dateTime16);
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.Instant instant19 = instant7.minus(readableDuration18);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant19 and dateTime16", (instant19.compareTo(dateTime16) == 0) == instant19.equals(dateTime16));
    }

    @Test
    public void test0057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0057");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        boolean boolean2 = instant1.isEqualNow();
        java.lang.String str3 = instant1.toString();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.MutableDateTime mutableDateTime5 = instant1.toMutableDateTime(chronology4);
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.Instant instant7 = instant1.minus(readableDuration6);
        org.joda.time.DateTimeZone dateTimeZone8 = instant1.getZone();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime5 and instant1", (mutableDateTime5.compareTo(instant1) == 0) == mutableDateTime5.equals(instant1));
    }

    @Test
    public void test0058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0058");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        boolean boolean2 = instant1.isEqualNow();
        org.joda.time.ReadableDuration readableDuration3 = null;
        org.joda.time.Instant instant4 = instant1.plus(readableDuration3);
        long long5 = instant1.getMillis();
        java.lang.String str6 = instant1.toString();
        org.joda.time.Instant instant7 = instant1.toInstant();
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.Instant instant10 = instant1.withDurationAdded(readableDuration8, (int) 'x');
        java.util.TimeZone timeZone11 = null;
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forTimeZone(timeZone11);
        java.lang.String str14 = dateTimeZone12.getNameKey((long) 100);
        boolean boolean15 = dateTimeZone12.isFixed();
        org.joda.time.chrono.GJChronology gJChronology16 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone12);
        java.lang.String str17 = dateTimeZone12.toString();
        org.joda.time.DateTime dateTime18 = instant10.toDateTime(dateTimeZone12);
        org.joda.time.Instant instant20 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone21 = null;
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forTimeZone(timeZone21);
        org.joda.time.chrono.GJChronology gJChronology23 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone22);
        org.joda.time.DateTimeField dateTimeField24 = gJChronology23.millisOfSecond();
        int int25 = instant20.get(dateTimeField24);
        org.joda.time.Instant instant27 = instant20.plus(0L);
        org.joda.time.Instant instant28 = instant27.toInstant();
        org.joda.time.Instant instant30 = new org.joda.time.Instant(52L);
        boolean boolean31 = instant30.isEqualNow();
        java.lang.String str32 = instant30.toString();
        java.lang.String str33 = instant30.toString();
        org.joda.time.Instant instant35 = new org.joda.time.Instant(52L);
        boolean boolean36 = instant35.isEqualNow();
        org.joda.time.ReadableDuration readableDuration37 = null;
        org.joda.time.Instant instant38 = instant35.plus(readableDuration37);
        boolean boolean39 = instant30.isBefore((org.joda.time.ReadableInstant) instant38);
        org.joda.time.Instant instant41 = instant30.minus((long) 0);
        int int42 = instant27.compareTo((org.joda.time.ReadableInstant) instant30);
        org.joda.time.Instant instant45 = instant30.withDurationAdded((long) (short) 100, 70);
        org.joda.time.chrono.GJChronology gJChronology46 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone12, (org.joda.time.ReadableInstant) instant45);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and dateTime18", (instant1.compareTo(dateTime18) == 0) == instant1.equals(dateTime18));
    }

    @Test
    public void test0059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0059");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = gJChronology2.halfdays();
        long long7 = gJChronology2.add((long) 'a', (-1L), (int) (short) 0);
        boolean boolean9 = gJChronology2.equals((java.lang.Object) 0);
        org.joda.time.DateTimeField dateTimeField10 = gJChronology2.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField11 = gJChronology2.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField12 = gJChronology2.clockhourOfDay();
        long long17 = gJChronology2.getDateTimeMillis(10, (int) (short) 10, 4, (int) (byte) 1);
        org.joda.time.DateTimeField dateTimeField18 = gJChronology2.millisOfDay();
        java.lang.String str19 = gJChronology2.toString();
        org.joda.time.DateTimeField dateTimeField20 = gJChronology2.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField21 = gJChronology2.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField22 = gJChronology2.halfdayOfDay();
        org.joda.time.DurationField durationField23 = gJChronology2.eras();
        org.joda.time.DateTimeField dateTimeField24 = gJChronology2.millisOfDay();
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField3 and durationField23", Math.signum(durationField3.compareTo(durationField23)) == -Math.signum(durationField23.compareTo(durationField3)));
    }

    @Test
    public void test0060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0060");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = gJChronology2.halfdays();
        long long7 = gJChronology2.add((long) 'a', (-1L), (int) (short) 0);
        boolean boolean9 = gJChronology2.equals((java.lang.Object) 0);
        org.joda.time.DateTimeField dateTimeField10 = gJChronology2.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField11 = gJChronology2.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField12 = gJChronology2.clockhourOfDay();
        long long17 = gJChronology2.getDateTimeMillis(10, (int) (short) 10, 4, (int) (byte) 1);
        org.joda.time.DateTimeField dateTimeField18 = gJChronology2.millisOfDay();
        java.lang.String str19 = gJChronology2.toString();
        org.joda.time.DateTimeField dateTimeField20 = gJChronology2.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField21 = gJChronology2.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField22 = gJChronology2.halfdayOfDay();
        org.joda.time.DurationField durationField23 = gJChronology2.eras();
        org.joda.time.DateTimeField dateTimeField24 = gJChronology2.millisOfSecond();
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField3 and durationField23", Math.signum(durationField3.compareTo(durationField23)) == -Math.signum(durationField23.compareTo(durationField3)));
    }

    @Test
    public void test0061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0061");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        boolean boolean2 = instant1.isEqualNow();
        java.lang.String str3 = instant1.toString();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.MutableDateTime mutableDateTime5 = instant1.toMutableDateTime(chronology4);
        org.joda.time.MutableDateTime mutableDateTime6 = instant1.toMutableDateTime();
        org.joda.time.Instant instant8 = instant1.plus(4320000001L);
        boolean boolean10 = instant8.isAfter((-99L));
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and mutableDateTime5", (instant1.compareTo(mutableDateTime5) == 0) == instant1.equals(mutableDateTime5));
    }

    @Test
    public void test0062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0062");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        boolean boolean2 = instant1.isEqualNow();
        org.joda.time.ReadableDuration readableDuration3 = null;
        org.joda.time.Instant instant4 = instant1.plus(readableDuration3);
        long long5 = instant1.getMillis();
        java.lang.Object obj6 = null;
        boolean boolean7 = instant1.equals(obj6);
        org.joda.time.Chronology chronology8 = instant1.getChronology();
        org.joda.time.Instant instant10 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone11 = null;
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forTimeZone(timeZone11);
        org.joda.time.chrono.GJChronology gJChronology13 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone12);
        org.joda.time.DateTimeField dateTimeField14 = gJChronology13.millisOfSecond();
        int int15 = instant10.get(dateTimeField14);
        boolean boolean16 = instant10.isEqualNow();
        boolean boolean18 = instant10.isBefore(35L);
        org.joda.time.MutableDateTime mutableDateTime19 = instant10.toMutableDateTimeISO();
        boolean boolean20 = instant1.isEqual((org.joda.time.ReadableInstant) instant10);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and mutableDateTime19", (instant1.compareTo(mutableDateTime19) == 0) == instant1.equals(mutableDateTime19));
    }

    @Test
    public void test0063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0063");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        boolean boolean2 = instant1.isEqualNow();
        java.lang.String str3 = instant1.toString();
        org.joda.time.Instant instant5 = new org.joda.time.Instant(52L);
        boolean boolean6 = instant5.isEqualNow();
        java.lang.String str7 = instant5.toString();
        java.lang.String str8 = instant5.toString();
        org.joda.time.Instant instant11 = instant5.withDurationAdded(115200000L, (int) (short) 1);
        int int12 = instant1.compareTo((org.joda.time.ReadableInstant) instant5);
        org.joda.time.MutableDateTime mutableDateTime13 = instant1.toMutableDateTimeISO();
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = null;
        boolean boolean15 = instant1.isSupported(dateTimeFieldType14);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant5 and mutableDateTime13", (instant5.compareTo(mutableDateTime13) == 0) == instant5.equals(mutableDateTime13));
    }

    @Test
    public void test0064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0064");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        boolean boolean2 = instant1.isEqualNow();
        org.joda.time.ReadableDuration readableDuration3 = null;
        org.joda.time.Instant instant4 = instant1.plus(readableDuration3);
        long long5 = instant1.getMillis();
        java.lang.String str6 = instant1.toString();
        org.joda.time.Instant instant7 = instant1.toInstant();
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.Instant instant10 = instant1.withDurationAdded(readableDuration8, (int) 'x');
        org.joda.time.DateTimeZone dateTimeZone11 = instant1.getZone();
        java.util.TimeZone timeZone12 = null;
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forTimeZone(timeZone12);
        org.joda.time.chrono.GJChronology gJChronology14 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone13);
        org.joda.time.DateTimeField dateTimeField15 = gJChronology14.millisOfSecond();
        org.joda.time.DurationField durationField16 = gJChronology14.millis();
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        long long20 = gJChronology14.add(readablePeriod17, (long) 'a', (int) '4');
        org.joda.time.DateTimeField dateTimeField21 = gJChronology14.clockhourOfDay();
        org.joda.time.MutableDateTime mutableDateTime22 = instant1.toMutableDateTime((org.joda.time.Chronology) gJChronology14);
        java.util.TimeZone timeZone23 = null;
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forTimeZone(timeZone23);
        org.joda.time.chrono.GJChronology gJChronology25 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone24);
        org.joda.time.DateTimeField dateTimeField26 = gJChronology25.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField27 = gJChronology25.weekyearOfCentury();
        org.joda.time.Instant instant28 = gJChronology25.getGregorianCutover();
        org.joda.time.Instant instant30 = instant28.withMillis(0L);
        org.joda.time.Instant instant32 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone33 = null;
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.forTimeZone(timeZone33);
        org.joda.time.chrono.GJChronology gJChronology35 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone34);
        org.joda.time.DateTimeField dateTimeField36 = gJChronology35.millisOfSecond();
        int int37 = instant32.get(dateTimeField36);
        org.joda.time.Instant instant39 = instant32.plus(0L);
        int int40 = instant30.compareTo((org.joda.time.ReadableInstant) instant39);
        org.joda.time.Instant instant42 = new org.joda.time.Instant(52L);
        boolean boolean43 = instant42.isEqualNow();
        org.joda.time.ReadableDuration readableDuration44 = null;
        org.joda.time.Instant instant45 = instant42.plus(readableDuration44);
        boolean boolean47 = instant45.equals((java.lang.Object) ' ');
        boolean boolean48 = instant39.isEqual((org.joda.time.ReadableInstant) instant45);
        java.lang.String str49 = instant39.toString();
        org.joda.time.Instant instant50 = new org.joda.time.Instant((java.lang.Object) str49);
        boolean boolean51 = instant1.isEqual((org.joda.time.ReadableInstant) instant50);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and mutableDateTime22", (instant1.compareTo(mutableDateTime22) == 0) == instant1.equals(mutableDateTime22));
    }

    @Test
    public void test0065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0065");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        boolean boolean2 = instant1.isEqualNow();
        boolean boolean4 = instant1.isEqual(0L);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = null;
        boolean boolean6 = instant1.isSupported(dateTimeFieldType5);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = null;
        boolean boolean8 = instant1.isSupported(dateTimeFieldType7);
        java.util.TimeZone timeZone9 = null;
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forTimeZone(timeZone9);
        org.joda.time.chrono.GJChronology gJChronology11 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone10);
        org.joda.time.DurationField durationField12 = gJChronology11.halfdays();
        org.joda.time.Chronology chronology13 = gJChronology11.withUTC();
        java.lang.String str14 = gJChronology11.toString();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology11.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(1, 10);
        org.joda.time.Chronology chronology19 = gJChronology11.withZone(dateTimeZone18);
        org.joda.time.MutableDateTime mutableDateTime20 = instant1.toMutableDateTime(dateTimeZone18);
        org.joda.time.Instant instant22 = new org.joda.time.Instant(52L);
        boolean boolean23 = instant22.isEqualNow();
        java.lang.String str24 = instant22.toString();
        java.lang.String str25 = instant22.toString();
        org.joda.time.Instant instant28 = instant22.withDurationAdded(115200000L, (int) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone29 = instant22.getZone();
        boolean boolean30 = instant1.equals((java.lang.Object) dateTimeZone29);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime20 and instant22", (mutableDateTime20.compareTo(instant22) == 0) == mutableDateTime20.equals(instant22));
    }

    @Test
    public void test0066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0066");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = gJChronology2.halfdays();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.millisOfDay();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.minuteOfDay();
        org.joda.time.DurationField durationField6 = gJChronology2.centuries();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology2.millisOfSecond();
        org.joda.time.DurationField durationField8 = gJChronology2.eras();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField8, durationField3, and durationField6", !(durationField8.compareTo(durationField3) == 0) || (Math.signum(durationField8.compareTo(durationField6)) == Math.signum(durationField3.compareTo(durationField6))));
    }

    @Test
    public void test0067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0067");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        boolean boolean2 = instant1.isEqualNow();
        org.joda.time.ReadableDuration readableDuration3 = null;
        org.joda.time.Instant instant4 = instant1.plus(readableDuration3);
        long long5 = instant1.getMillis();
        java.lang.String str6 = instant1.toString();
        org.joda.time.Instant instant7 = instant1.toInstant();
        org.joda.time.DateTime dateTime8 = instant1.toDateTime();
        org.joda.time.Instant instant11 = instant1.withDurationAdded((long) 4200000, (int) (byte) -1);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and dateTime8", (instant1.compareTo(dateTime8) == 0) == instant1.equals(dateTime8));
    }

    @Test
    public void test0068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0068");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField3 = gJChronology2.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.weekyearOfCentury();
        org.joda.time.Instant instant5 = gJChronology2.getGregorianCutover();
        org.joda.time.Instant instant7 = instant5.withMillis(0L);
        org.joda.time.Instant instant9 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone10 = null;
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forTimeZone(timeZone10);
        org.joda.time.chrono.GJChronology gJChronology12 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone11);
        org.joda.time.DateTimeField dateTimeField13 = gJChronology12.millisOfSecond();
        int int14 = instant9.get(dateTimeField13);
        org.joda.time.Instant instant16 = instant9.plus(0L);
        int int17 = instant7.compareTo((org.joda.time.ReadableInstant) instant16);
        java.util.TimeZone timeZone18 = null;
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forTimeZone(timeZone18);
        org.joda.time.chrono.GJChronology gJChronology20 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone19);
        org.joda.time.DurationField durationField21 = gJChronology20.halfdays();
        org.joda.time.DateTimeField dateTimeField22 = gJChronology20.millisOfDay();
        org.joda.time.DateTimeField dateTimeField23 = gJChronology20.minuteOfDay();
        org.joda.time.DurationField durationField24 = gJChronology20.centuries();
        org.joda.time.DateTimeField dateTimeField25 = gJChronology20.halfdayOfDay();
        java.util.Locale locale26 = java.util.Locale.ITALIAN;
        java.util.Locale locale27 = locale26.stripExtensions();
        java.util.Locale locale28 = java.util.Locale.CANADA;
        java.lang.String str29 = locale26.getDisplayVariant(locale28);
        boolean boolean30 = gJChronology20.equals((java.lang.Object) locale28);
        org.joda.time.DateTime dateTime31 = instant7.toDateTime((org.joda.time.Chronology) gJChronology20);
        org.joda.time.ReadablePeriod readablePeriod32 = null;
        long long35 = gJChronology20.add(readablePeriod32, 10L, (int) (short) 0);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant7 and dateTime31", (instant7.compareTo(dateTime31) == 0) == instant7.equals(dateTime31));
    }

    @Test
    public void test0069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0069");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        org.joda.time.Instant instant3 = instant1.withMillis((long) 'u');
        java.util.TimeZone timeZone4 = null;
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forTimeZone(timeZone4);
        org.joda.time.chrono.GJChronology gJChronology6 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone5);
        org.joda.time.DurationField durationField7 = gJChronology6.halfdays();
        long long11 = gJChronology6.add((long) 'a', (-1L), (int) (short) 0);
        boolean boolean13 = gJChronology6.equals((java.lang.Object) 0);
        org.joda.time.DateTimeField dateTimeField14 = gJChronology6.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology6.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField16 = gJChronology6.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField17 = gJChronology6.clockhourOfHalfday();
        org.joda.time.DateTime dateTime18 = instant1.toDateTime((org.joda.time.Chronology) gJChronology6);
        org.joda.time.Instant instant20 = instant1.plus(0L);
        org.joda.time.Instant instant22 = instant20.minus(4320000000L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant20 and dateTime18", (instant20.compareTo(dateTime18) == 0) == instant20.equals(dateTime18));
    }

    @Test
    public void test0070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0070");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField3 = gJChronology2.era();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.centuryOfEra();
        org.joda.time.DurationField durationField5 = gJChronology2.hours();
        org.joda.time.DurationField durationField6 = gJChronology2.eras();
        org.joda.time.Instant instant7 = gJChronology2.getGregorianCutover();
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField5 and durationField6", Math.signum(durationField5.compareTo(durationField6)) == -Math.signum(durationField6.compareTo(durationField5)));
    }

    @Test
    public void test0071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0071");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forTimeZone(timeZone2);
        org.joda.time.chrono.GJChronology gJChronology4 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone3);
        org.joda.time.DateTimeField dateTimeField5 = gJChronology4.millisOfSecond();
        int int6 = instant1.get(dateTimeField5);
        java.util.TimeZone timeZone7 = null;
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forTimeZone(timeZone7);
        org.joda.time.chrono.GJChronology gJChronology9 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone8);
        org.joda.time.DurationField durationField10 = gJChronology9.halfdays();
        java.util.TimeZone timeZone11 = null;
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forTimeZone(timeZone11);
        org.joda.time.chrono.GJChronology gJChronology13 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone12);
        long long17 = dateTimeZone12.convertLocalToUTC((long) (byte) -1, true, 0L);
        boolean boolean19 = dateTimeZone12.equals((java.lang.Object) true);
        org.joda.time.Chronology chronology20 = gJChronology9.withZone(dateTimeZone12);
        org.joda.time.MutableDateTime mutableDateTime21 = instant1.toMutableDateTime(dateTimeZone12);
        boolean boolean22 = mutableDateTime21.isAfterNow();
        java.util.TimeZone timeZone23 = null;
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forTimeZone(timeZone23);
        org.joda.time.chrono.GJChronology gJChronology25 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone24);
        org.joda.time.DurationField durationField26 = gJChronology25.halfdays();
        long long30 = gJChronology25.add((long) 'a', (-1L), (int) (short) 0);
        boolean boolean31 = mutableDateTime21.equals((java.lang.Object) gJChronology25);
        org.joda.time.Instant instant33 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone34 = null;
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.forTimeZone(timeZone34);
        org.joda.time.chrono.GJChronology gJChronology36 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone35);
        org.joda.time.DateTimeField dateTimeField37 = gJChronology36.millisOfSecond();
        int int38 = instant33.get(dateTimeField37);
        org.joda.time.Instant instant40 = instant33.plus(0L);
        long long41 = instant40.getMillis();
        java.util.TimeZone timeZone42 = null;
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.forTimeZone(timeZone42);
        org.joda.time.chrono.GJChronology gJChronology44 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone43);
        org.joda.time.DurationField durationField45 = gJChronology44.halfdays();
        long long49 = gJChronology44.add((long) 'a', (-1L), (int) (short) 0);
        long long53 = gJChronology44.add((long) (byte) 0, (long) '4', 100);
        org.joda.time.DurationField durationField54 = gJChronology44.years();
        org.joda.time.Instant instant55 = gJChronology44.getGregorianCutover();
        org.joda.time.DateTimeField dateTimeField56 = gJChronology44.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime57 = instant40.toMutableDateTime((org.joda.time.Chronology) gJChronology44);
        org.joda.time.MutableDateTime mutableDateTime58 = mutableDateTime21.toMutableDateTime((org.joda.time.Chronology) gJChronology44);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and mutableDateTime57", (instant1.compareTo(mutableDateTime57) == 0) == instant1.equals(mutableDateTime57));
    }

    @Test
    public void test0072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0072");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        boolean boolean2 = instant1.isEqualNow();
        org.joda.time.ReadableDuration readableDuration3 = null;
        org.joda.time.Instant instant4 = instant1.plus(readableDuration3);
        org.joda.time.Instant instant6 = instant1.withMillis((long) 4);
        boolean boolean7 = instant6.isBeforeNow();
        boolean boolean9 = instant6.isBefore(5185792L);
        org.joda.time.Instant instant11 = new org.joda.time.Instant(52L);
        boolean boolean12 = instant11.isEqualNow();
        java.lang.String str13 = instant11.toString();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MutableDateTime mutableDateTime15 = instant11.toMutableDateTime(chronology14);
        org.joda.time.MutableDateTime mutableDateTime16 = instant11.toMutableDateTime();
        org.joda.time.Instant instant18 = instant11.plus(4320000001L);
        boolean boolean19 = instant6.isEqual((org.joda.time.ReadableInstant) instant18);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and mutableDateTime15", (instant1.compareTo(mutableDateTime15) == 0) == instant1.equals(mutableDateTime15));
    }

    @Test
    public void test0073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0073");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        boolean boolean2 = instant1.isEqualNow();
        org.joda.time.ReadableDuration readableDuration3 = null;
        org.joda.time.Instant instant4 = instant1.plus(readableDuration3);
        org.joda.time.Instant instant6 = new org.joda.time.Instant(52L);
        org.joda.time.Instant instant8 = instant6.withMillis((long) 'u');
        java.util.TimeZone timeZone9 = null;
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forTimeZone(timeZone9);
        org.joda.time.chrono.GJChronology gJChronology11 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone10);
        org.joda.time.DurationField durationField12 = gJChronology11.halfdays();
        long long16 = gJChronology11.add((long) 'a', (-1L), (int) (short) 0);
        boolean boolean18 = gJChronology11.equals((java.lang.Object) 0);
        org.joda.time.DateTimeField dateTimeField19 = gJChronology11.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField20 = gJChronology11.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField21 = gJChronology11.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField22 = gJChronology11.clockhourOfHalfday();
        org.joda.time.DateTime dateTime23 = instant6.toDateTime((org.joda.time.Chronology) gJChronology11);
        java.lang.String str24 = dateTime23.toString();
        boolean boolean25 = instant4.isEqual((org.joda.time.ReadableInstant) dateTime23);
        java.lang.String str26 = instant4.toString();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant4 and dateTime23", (instant4.compareTo(dateTime23) == 0) == instant4.equals(dateTime23));
    }

    @Test
    public void test0074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0074");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        boolean boolean2 = instant1.isEqualNow();
        java.lang.String str3 = instant1.toString();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.MutableDateTime mutableDateTime5 = instant1.toMutableDateTime(chronology4);
        java.util.List<java.util.Locale.LanguageRange> languageRangeList7 = java.util.Locale.LanguageRange.parse("halfdays");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap8 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList9 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList7, strMap8);
        java.util.Locale.LanguageRange[] languageRangeArray10 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList11 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList11, languageRangeArray10);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap13 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList14 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList11, strMap13);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap15 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList16 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList14, strMap15);
        java.util.List<java.util.Locale.LanguageRange> languageRangeList18 = java.util.Locale.LanguageRange.parse("halfdays");
        java.util.Locale locale19 = java.util.Locale.getDefault();
        java.lang.String str20 = locale19.getDisplayLanguage();
        java.util.Locale locale21 = java.util.Locale.CANADA;
        java.lang.String str22 = locale21.getDisplayVariant();
        java.util.Locale locale23 = java.util.Locale.JAPAN;
        java.lang.String str24 = locale23.getCountry();
        java.util.Locale locale25 = java.util.Locale.KOREA;
        java.util.Locale locale26 = java.util.Locale.GERMANY;
        java.util.Locale locale28 = java.util.Locale.forLanguageTag("hi!");
        java.lang.String str29 = locale28.toLanguageTag();
        java.util.Locale locale31 = new java.util.Locale("hi!");
        java.lang.String str32 = locale31.getCountry();
        java.lang.String str33 = locale31.getLanguage();
        java.util.Locale locale35 = java.util.Locale.forLanguageTag("halfdays");
        boolean boolean36 = locale35.hasExtensions();
        java.util.Locale locale37 = java.util.Locale.getDefault();
        java.lang.String str38 = locale37.getISO3Language();
        java.util.Locale locale40 = new java.util.Locale("hi!");
        java.lang.String str41 = locale40.getCountry();
        java.lang.String str42 = locale40.getCountry();
        java.util.Locale locale43 = java.util.Locale.getDefault();
        java.util.Locale locale44 = java.util.Locale.CHINA;
        java.util.Locale locale45 = java.util.Locale.getDefault();
        java.lang.String str46 = locale45.getDisplayName();
        java.lang.String str47 = locale45.getDisplayVariant();
        java.util.Locale locale48 = java.util.Locale.ROOT;
        java.lang.String str49 = locale48.getDisplayScript();
        java.util.Locale locale50 = java.util.Locale.getDefault();
        java.lang.String str51 = locale50.getDisplayName();
        java.util.Locale locale52 = java.util.Locale.CANADA;
        java.lang.String str53 = locale52.getISO3Language();
        java.util.Locale locale54 = java.util.Locale.getDefault();
        java.lang.String str55 = locale54.getDisplayLanguage();
        java.lang.String str56 = locale54.toLanguageTag();
        java.util.Locale locale58 = new java.util.Locale("hi!");
        java.lang.String str59 = locale58.getCountry();
        java.util.Locale locale60 = java.util.Locale.getDefault();
        java.lang.String str61 = locale60.getDisplayName();
        java.lang.String str62 = locale58.getDisplayScript(locale60);
        java.util.Locale locale63 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Locale locale64 = java.util.Locale.JAPAN;
        java.lang.String str65 = locale64.getCountry();
        java.util.Locale locale67 = new java.util.Locale("hi!");
        java.lang.String str68 = locale67.getCountry();
        java.lang.String str69 = locale67.getScript();
        java.util.Locale locale70 = java.util.Locale.CANADA;
        java.lang.String str71 = locale70.getISO3Language();
        java.util.Locale locale72 = java.util.Locale.getDefault();
        java.lang.String str73 = locale72.getDisplayName();
        java.lang.String str74 = locale72.getDisplayVariant();
        java.util.Locale[] localeArray75 = new java.util.Locale[] { locale19, locale21, locale23, locale25, locale26, locale28, locale31, locale35, locale37, locale40, locale43, locale44, locale45, locale48, locale50, locale52, locale54, locale58, locale63, locale64, locale67, locale70, locale72 };
        java.util.ArrayList<java.util.Locale> localeList76 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean77 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList76, localeArray75);
        java.util.Locale locale78 = java.util.Locale.lookup(languageRangeList18, (java.util.Collection<java.util.Locale>) localeList76);
        java.util.Locale locale79 = java.util.Locale.lookup(languageRangeList16, (java.util.Collection<java.util.Locale>) localeList76);
        java.util.Locale locale80 = java.util.Locale.lookup(languageRangeList7, (java.util.Collection<java.util.Locale>) localeList76);
        java.util.Set<java.lang.String> strSet81 = locale80.getUnicodeLocaleAttributes();
        boolean boolean82 = mutableDateTime5.equals((java.lang.Object) locale80);
        java.lang.String str83 = locale80.getDisplayLanguage();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and mutableDateTime5", (instant1.compareTo(mutableDateTime5) == 0) == instant1.equals(mutableDateTime5));
    }

    @Test
    public void test0075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0075");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str3 = dateTimeZone1.getNameKey((long) 100);
        boolean boolean4 = dateTimeZone1.isFixed();
        org.joda.time.chrono.GJChronology gJChronology5 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        long long7 = dateTimeZone1.convertUTCToLocal(5200L);
        java.util.Locale.LanguageRange[] languageRangeArray8 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList9 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList9, languageRangeArray8);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap11 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList12 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList9, strMap11);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap13 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList14 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList12, strMap13);
        java.util.Locale.LanguageRange[] languageRangeArray15 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList16 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList16, languageRangeArray15);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap18 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList19 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList16, strMap18);
        java.lang.String[] strArray23 = new java.lang.String[] { "English", "English", "hi!" };
        java.util.ArrayList<java.lang.String> strList24 = new java.util.ArrayList<java.lang.String>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList24, strArray23);
        java.util.List<java.lang.String> strList26 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList16, (java.util.Collection<java.lang.String>) strList24);
        java.util.Locale.FilteringMode filteringMode27 = null;
        java.util.List<java.lang.String> strList28 = java.util.Locale.filterTags(languageRangeList14, (java.util.Collection<java.lang.String>) strList24, filteringMode27);
        java.util.Locale.LanguageRange[] languageRangeArray29 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList30 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList30, languageRangeArray29);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap32 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList33 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList30, strMap32);
        java.util.Locale.LanguageRange[] languageRangeArray34 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList35 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean36 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList35, languageRangeArray34);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap37 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList38 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList35, strMap37);
        java.lang.String[] strArray42 = new java.lang.String[] { "English", "English", "hi!" };
        java.util.ArrayList<java.lang.String> strList43 = new java.util.ArrayList<java.lang.String>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList43, strArray42);
        java.util.List<java.lang.String> strList45 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList35, (java.util.Collection<java.lang.String>) strList43);
        java.util.List<java.lang.String> strList46 = java.util.Locale.filterTags(languageRangeList33, (java.util.Collection<java.lang.String>) strList45);
        java.util.List<java.lang.String> strList47 = java.util.Locale.filterTags(languageRangeList14, (java.util.Collection<java.lang.String>) strList46);
        java.util.Locale.LanguageRange[] languageRangeArray48 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList49 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean50 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList49, languageRangeArray48);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap51 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList52 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList49, strMap51);
        java.lang.String[] strArray56 = new java.lang.String[] { "English", "English", "hi!" };
        java.util.ArrayList<java.lang.String> strList57 = new java.util.ArrayList<java.lang.String>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList57, strArray56);
        java.util.List<java.lang.String> strList59 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList49, (java.util.Collection<java.lang.String>) strList57);
        java.util.List<java.lang.String> strList60 = java.util.Locale.filterTags(languageRangeList14, (java.util.Collection<java.lang.String>) strList59);
        boolean boolean61 = dateTimeZone1.equals((java.lang.Object) languageRangeList14);
        org.joda.time.Instant instant63 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone64 = null;
        org.joda.time.DateTimeZone dateTimeZone65 = org.joda.time.DateTimeZone.forTimeZone(timeZone64);
        org.joda.time.chrono.GJChronology gJChronology66 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone65);
        org.joda.time.DateTimeField dateTimeField67 = gJChronology66.millisOfSecond();
        int int68 = instant63.get(dateTimeField67);
        org.joda.time.Instant instant70 = instant63.plus(0L);
        org.joda.time.Instant instant71 = instant70.toInstant();
        org.joda.time.Instant instant73 = new org.joda.time.Instant(52L);
        boolean boolean74 = instant73.isEqualNow();
        java.lang.String str75 = instant73.toString();
        java.lang.String str76 = instant73.toString();
        org.joda.time.Instant instant78 = new org.joda.time.Instant(52L);
        boolean boolean79 = instant78.isEqualNow();
        org.joda.time.ReadableDuration readableDuration80 = null;
        org.joda.time.Instant instant81 = instant78.plus(readableDuration80);
        boolean boolean82 = instant73.isBefore((org.joda.time.ReadableInstant) instant81);
        org.joda.time.Instant instant84 = instant73.minus((long) 0);
        int int85 = instant70.compareTo((org.joda.time.ReadableInstant) instant73);
        org.joda.time.DateTime dateTime86 = instant70.toDateTimeISO();
        int int87 = dateTimeZone1.getOffset((org.joda.time.ReadableInstant) instant70);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant70 and dateTime86", (instant70.compareTo(dateTime86) == 0) == instant70.equals(dateTime86));
    }

    @Test
    public void test0076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0076");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forTimeZone(timeZone2);
        org.joda.time.chrono.GJChronology gJChronology4 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone3);
        org.joda.time.DateTimeField dateTimeField5 = gJChronology4.millisOfSecond();
        int int6 = instant1.get(dateTimeField5);
        org.joda.time.Chronology chronology7 = instant1.getChronology();
        org.joda.time.Instant instant9 = new org.joda.time.Instant(52L);
        org.joda.time.Instant instant11 = instant9.withMillis((long) 'u');
        java.util.TimeZone timeZone12 = null;
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forTimeZone(timeZone12);
        org.joda.time.chrono.GJChronology gJChronology14 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone13);
        org.joda.time.DurationField durationField15 = gJChronology14.halfdays();
        long long19 = gJChronology14.add((long) 'a', (-1L), (int) (short) 0);
        boolean boolean21 = gJChronology14.equals((java.lang.Object) 0);
        org.joda.time.DateTimeField dateTimeField22 = gJChronology14.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField23 = gJChronology14.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField24 = gJChronology14.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField25 = gJChronology14.clockhourOfHalfday();
        org.joda.time.DateTime dateTime26 = instant9.toDateTime((org.joda.time.Chronology) gJChronology14);
        org.joda.time.Instant instant28 = instant9.plus(0L);
        int int29 = instant1.compareTo((org.joda.time.ReadableInstant) instant28);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant28 and dateTime26", (instant28.compareTo(dateTime26) == 0) == instant28.equals(dateTime26));
    }

    @Test
    public void test0077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0077");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        java.util.Locale locale4 = new java.util.Locale("hi!");
        java.lang.String str5 = locale4.getCountry();
        java.util.Locale locale6 = java.util.Locale.getDefault();
        java.lang.String str7 = locale6.getDisplayName();
        java.lang.String str8 = locale4.getDisplayScript(locale6);
        boolean boolean9 = dateTimeZone1.equals((java.lang.Object) locale6);
        int int11 = dateTimeZone1.getOffsetFromLocal((long) (short) 10);
        java.util.TimeZone timeZone12 = null;
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forTimeZone(timeZone12);
        org.joda.time.chrono.GJChronology gJChronology14 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone13);
        org.joda.time.DateTimeField dateTimeField15 = gJChronology14.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField16 = gJChronology14.weekyearOfCentury();
        org.joda.time.Instant instant17 = gJChronology14.getGregorianCutover();
        org.joda.time.Instant instant19 = instant17.withMillis(0L);
        org.joda.time.Instant instant21 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone22 = null;
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        org.joda.time.chrono.GJChronology gJChronology24 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone23);
        org.joda.time.DateTimeField dateTimeField25 = gJChronology24.millisOfSecond();
        int int26 = instant21.get(dateTimeField25);
        org.joda.time.Instant instant28 = instant21.plus(0L);
        int int29 = instant19.compareTo((org.joda.time.ReadableInstant) instant28);
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = null;
        boolean boolean31 = instant28.isSupported(dateTimeFieldType30);
        int int32 = dateTimeZone1.getOffset((org.joda.time.ReadableInstant) instant28);
        org.joda.time.DateTime dateTime33 = instant28.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration34 = null;
        org.joda.time.Instant instant35 = instant28.plus(readableDuration34);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant35 and dateTime33", (instant35.compareTo(dateTime33) == 0) == instant35.equals(dateTime33));
    }

    @Test
    public void test0078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0078");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        boolean boolean2 = instant1.isEqualNow();
        java.lang.String str3 = instant1.toString();
        java.lang.String str4 = instant1.toString();
        org.joda.time.Instant instant7 = instant1.withDurationAdded(115200000L, (int) (short) 1);
        java.util.TimeZone timeZone8 = null;
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forTimeZone(timeZone8);
        java.lang.String str11 = dateTimeZone9.getNameKey((long) 100);
        boolean boolean12 = dateTimeZone9.isFixed();
        org.joda.time.DateTime dateTime13 = instant1.toDateTime(dateTimeZone9);
        java.util.TimeZone timeZone14 = null;
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forTimeZone(timeZone14);
        org.joda.time.chrono.GJChronology gJChronology16 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone15);
        org.joda.time.DurationField durationField17 = gJChronology16.halfdays();
        org.joda.time.DateTimeField dateTimeField18 = gJChronology16.millisOfDay();
        org.joda.time.DateTimeField dateTimeField19 = gJChronology16.minuteOfDay();
        org.joda.time.DurationField durationField20 = gJChronology16.centuries();
        int int21 = gJChronology16.getMinimumDaysInFirstWeek();
        org.joda.time.DurationField durationField22 = gJChronology16.minutes();
        org.joda.time.DateTimeField dateTimeField23 = gJChronology16.minuteOfHour();
        org.joda.time.DurationField durationField24 = gJChronology16.hours();
        boolean boolean25 = dateTimeZone9.equals((java.lang.Object) gJChronology16);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and dateTime13", (instant1.compareTo(dateTime13) == 0) == instant1.equals(dateTime13));
    }

    @Test
    public void test0079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0079");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        boolean boolean2 = instant1.isEqualNow();
        java.lang.String str3 = instant1.toString();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.MutableDateTime mutableDateTime5 = instant1.toMutableDateTime(chronology4);
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.Instant instant7 = instant1.minus(readableDuration6);
        java.lang.String str8 = instant7.toString();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant7 and mutableDateTime5", (instant7.compareTo(mutableDateTime5) == 0) == instant7.equals(mutableDateTime5));
    }

    @Test
    public void test0080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0080");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        boolean boolean2 = instant1.isEqualNow();
        java.lang.String str3 = instant1.toString();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.MutableDateTime mutableDateTime5 = instant1.toMutableDateTime(chronology4);
        org.joda.time.MutableDateTime mutableDateTime6 = instant1.toMutableDateTime();
        boolean boolean8 = instant1.isEqual((long) '4');
        org.joda.time.Instant instant10 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone11 = null;
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forTimeZone(timeZone11);
        org.joda.time.chrono.GJChronology gJChronology13 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone12);
        org.joda.time.DateTimeField dateTimeField14 = gJChronology13.millisOfSecond();
        int int15 = instant10.get(dateTimeField14);
        org.joda.time.Instant instant17 = instant10.plus(0L);
        org.joda.time.Instant instant18 = instant17.toInstant();
        org.joda.time.Instant instant20 = new org.joda.time.Instant(52L);
        boolean boolean21 = instant20.isEqualNow();
        java.lang.String str22 = instant20.toString();
        java.lang.String str23 = instant20.toString();
        org.joda.time.Instant instant25 = new org.joda.time.Instant(52L);
        boolean boolean26 = instant25.isEqualNow();
        org.joda.time.ReadableDuration readableDuration27 = null;
        org.joda.time.Instant instant28 = instant25.plus(readableDuration27);
        boolean boolean29 = instant20.isBefore((org.joda.time.ReadableInstant) instant28);
        org.joda.time.Instant instant31 = instant20.minus((long) 0);
        int int32 = instant17.compareTo((org.joda.time.ReadableInstant) instant20);
        org.joda.time.DateTime dateTime33 = instant17.toDateTimeISO();
        org.joda.time.Instant instant35 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone36 = null;
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.forTimeZone(timeZone36);
        org.joda.time.chrono.GJChronology gJChronology38 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone37);
        org.joda.time.DateTimeField dateTimeField39 = gJChronology38.millisOfSecond();
        int int40 = instant35.get(dateTimeField39);
        org.joda.time.Instant instant42 = instant35.plus(0L);
        boolean boolean43 = dateTime33.isAfter((org.joda.time.ReadableInstant) instant35);
        boolean boolean44 = instant1.isAfter((org.joda.time.ReadableInstant) dateTime33);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime5 and instant10", (mutableDateTime5.compareTo(instant10) == 0) == mutableDateTime5.equals(instant10));
    }

    @Test
    public void test0081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0081");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField3 = gJChronology2.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.weekyear();
        org.joda.time.DurationField durationField5 = gJChronology2.centuries();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology2.millisOfDay();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField8 = gJChronology2.yearOfCentury();
        java.util.TimeZone timeZone9 = null;
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forTimeZone(timeZone9);
        org.joda.time.chrono.GJChronology gJChronology11 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone10);
        org.joda.time.DurationField durationField12 = gJChronology11.halfdays();
        long long16 = gJChronology11.add((long) 'a', (-1L), (int) (short) 0);
        org.joda.time.DateTimeField dateTimeField17 = gJChronology11.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField18 = gJChronology11.secondOfMinute();
        org.joda.time.Instant instant20 = new org.joda.time.Instant(52L);
        boolean boolean21 = instant20.isEqualNow();
        org.joda.time.ReadableDuration readableDuration22 = null;
        org.joda.time.Instant instant23 = instant20.plus(readableDuration22);
        boolean boolean24 = gJChronology11.equals((java.lang.Object) instant20);
        java.util.TimeZone timeZone25 = null;
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forTimeZone(timeZone25);
        org.joda.time.chrono.GJChronology gJChronology27 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone26);
        org.joda.time.DurationField durationField28 = gJChronology27.halfdays();
        org.joda.time.DateTimeField dateTimeField29 = gJChronology27.millisOfDay();
        org.joda.time.DateTimeField dateTimeField30 = gJChronology27.minuteOfDay();
        org.joda.time.DurationField durationField31 = gJChronology27.centuries();
        org.joda.time.DateTimeField dateTimeField32 = gJChronology27.dayOfYear();
        java.lang.String str33 = gJChronology27.toString();
        org.joda.time.DateTimeField dateTimeField34 = gJChronology27.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone35 = gJChronology27.getZone();
        org.joda.time.DateTime dateTime36 = instant20.toDateTime((org.joda.time.Chronology) gJChronology27);
        boolean boolean38 = dateTime36.isBefore(262974605200L);
        long long39 = dateTime36.getMillis();
        boolean boolean40 = gJChronology2.equals((java.lang.Object) long39);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant20 and dateTime36", (instant20.compareTo(dateTime36) == 0) == instant20.equals(dateTime36));
    }

    @Test
    public void test0082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0082");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forTimeZone(timeZone2);
        org.joda.time.chrono.GJChronology gJChronology4 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone3);
        org.joda.time.DateTimeField dateTimeField5 = gJChronology4.millisOfSecond();
        int int6 = instant1.get(dateTimeField5);
        boolean boolean7 = instant1.isEqualNow();
        org.joda.time.Instant instant9 = new org.joda.time.Instant(52L);
        boolean boolean10 = instant9.isEqualNow();
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.Instant instant12 = instant9.plus(readableDuration11);
        long long13 = instant9.getMillis();
        java.lang.Object obj14 = null;
        boolean boolean15 = instant9.equals(obj14);
        org.joda.time.Instant instant17 = new org.joda.time.Instant(52L);
        boolean boolean18 = instant17.isEqualNow();
        org.joda.time.ReadableDuration readableDuration19 = null;
        org.joda.time.Instant instant20 = instant17.plus(readableDuration19);
        long long21 = instant17.getMillis();
        java.lang.String str22 = instant17.toString();
        org.joda.time.Instant instant23 = instant17.toInstant();
        org.joda.time.ReadableDuration readableDuration24 = null;
        org.joda.time.Instant instant26 = instant17.withDurationAdded(readableDuration24, (int) 'x');
        org.joda.time.Instant instant27 = instant17.toInstant();
        int int28 = instant9.compareTo((org.joda.time.ReadableInstant) instant17);
        boolean boolean29 = instant1.isBefore((org.joda.time.ReadableInstant) instant17);
        java.util.TimeZone timeZone30 = null;
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forTimeZone(timeZone30);
        org.joda.time.chrono.GJChronology gJChronology32 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone31);
        org.joda.time.DateTimeField dateTimeField33 = gJChronology32.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField34 = gJChronology32.weekyearOfCentury();
        org.joda.time.Instant instant35 = gJChronology32.getGregorianCutover();
        org.joda.time.Instant instant37 = instant35.withMillis(0L);
        org.joda.time.Instant instant39 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone40 = null;
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.forTimeZone(timeZone40);
        org.joda.time.chrono.GJChronology gJChronology42 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone41);
        org.joda.time.DateTimeField dateTimeField43 = gJChronology42.millisOfSecond();
        int int44 = instant39.get(dateTimeField43);
        org.joda.time.Instant instant46 = instant39.plus(0L);
        int int47 = instant37.compareTo((org.joda.time.ReadableInstant) instant46);
        org.joda.time.Instant instant49 = new org.joda.time.Instant(52L);
        boolean boolean50 = instant49.isEqualNow();
        org.joda.time.ReadableDuration readableDuration51 = null;
        org.joda.time.Instant instant52 = instant49.plus(readableDuration51);
        boolean boolean54 = instant52.equals((java.lang.Object) ' ');
        boolean boolean55 = instant46.isEqual((org.joda.time.ReadableInstant) instant52);
        org.joda.time.MutableDateTime mutableDateTime56 = instant46.toMutableDateTime();
        boolean boolean57 = instant17.isEqual((org.joda.time.ReadableInstant) mutableDateTime56);
        java.util.TimeZone timeZone58 = null;
        org.joda.time.DateTimeZone dateTimeZone59 = org.joda.time.DateTimeZone.forTimeZone(timeZone58);
        org.joda.time.DateTime dateTime60 = mutableDateTime56.toDateTime(dateTimeZone59);
        int int62 = dateTimeZone59.getStandardOffset(747159923736000000L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and mutableDateTime56", (instant1.compareTo(mutableDateTime56) == 0) == instant1.equals(mutableDateTime56));
    }

    @Test
    public void test0083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0083");
        org.joda.time.Instant instant0 = org.joda.time.Instant.now();
        boolean boolean2 = instant0.isBefore(0L);
        org.joda.time.Instant instant4 = new org.joda.time.Instant(52L);
        org.joda.time.Instant instant6 = instant4.withMillis((long) 'u');
        java.util.TimeZone timeZone7 = null;
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forTimeZone(timeZone7);
        org.joda.time.chrono.GJChronology gJChronology9 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone8);
        org.joda.time.DurationField durationField10 = gJChronology9.halfdays();
        long long14 = gJChronology9.add((long) 'a', (-1L), (int) (short) 0);
        boolean boolean16 = gJChronology9.equals((java.lang.Object) 0);
        org.joda.time.DateTimeField dateTimeField17 = gJChronology9.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField18 = gJChronology9.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField19 = gJChronology9.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField20 = gJChronology9.clockhourOfHalfday();
        org.joda.time.DateTime dateTime21 = instant4.toDateTime((org.joda.time.Chronology) gJChronology9);
        boolean boolean22 = instant0.isEqual((org.joda.time.ReadableInstant) dateTime21);
        java.util.TimeZone timeZone23 = null;
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forTimeZone(timeZone23);
        org.joda.time.chrono.GJChronology gJChronology25 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone24);
        org.joda.time.DurationField durationField26 = gJChronology25.halfdays();
        long long30 = gJChronology25.add((long) 'a', (-1L), (int) (short) 0);
        boolean boolean32 = gJChronology25.equals((java.lang.Object) 0);
        org.joda.time.DateTimeField dateTimeField33 = gJChronology25.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField34 = gJChronology25.hourOfHalfday();
        org.joda.time.Instant instant35 = gJChronology25.getGregorianCutover();
        java.util.TimeZone timeZone36 = null;
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.forTimeZone(timeZone36);
        java.lang.String str39 = dateTimeZone37.getNameKey((long) 100);
        boolean boolean40 = dateTimeZone37.isFixed();
        org.joda.time.chrono.GJChronology gJChronology41 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone37);
        int int42 = gJChronology41.getMinimumDaysInFirstWeek();
        java.lang.String str43 = gJChronology41.toString();
        org.joda.time.DateTimeField dateTimeField44 = gJChronology41.yearOfEra();
        org.joda.time.DateTimeField dateTimeField45 = gJChronology41.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField46 = gJChronology41.weekyear();
        int int47 = instant35.get(dateTimeField46);
        int int48 = instant0.compareTo((org.joda.time.ReadableInstant) instant35);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant4 and dateTime21", (instant4.compareTo(dateTime21) == 0) == instant4.equals(dateTime21));
    }

    @Test
    public void test0084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0084");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forTimeZone(timeZone2);
        org.joda.time.chrono.GJChronology gJChronology4 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone3);
        org.joda.time.DateTimeField dateTimeField5 = gJChronology4.millisOfSecond();
        int int6 = instant1.get(dateTimeField5);
        org.joda.time.Instant instant8 = instant1.plus(0L);
        long long9 = instant8.getMillis();
        java.util.TimeZone timeZone10 = null;
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forTimeZone(timeZone10);
        org.joda.time.chrono.GJChronology gJChronology12 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone11);
        org.joda.time.DurationField durationField13 = gJChronology12.halfdays();
        long long17 = gJChronology12.add((long) 'a', (-1L), (int) (short) 0);
        long long21 = gJChronology12.add((long) (byte) 0, (long) '4', 100);
        org.joda.time.DurationField durationField22 = gJChronology12.years();
        org.joda.time.Instant instant23 = gJChronology12.getGregorianCutover();
        org.joda.time.DateTimeField dateTimeField24 = gJChronology12.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime25 = instant8.toMutableDateTime((org.joda.time.Chronology) gJChronology12);
        org.joda.time.DateTimeZone dateTimeZone26 = gJChronology12.getZone();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and mutableDateTime25", (instant1.compareTo(mutableDateTime25) == 0) == instant1.equals(mutableDateTime25));
    }

    @Test
    public void test0085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0085");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        org.joda.time.Instant instant3 = instant1.withMillis((long) 'u');
        java.util.TimeZone timeZone4 = null;
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forTimeZone(timeZone4);
        org.joda.time.chrono.GJChronology gJChronology6 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone5);
        org.joda.time.DurationField durationField7 = gJChronology6.halfdays();
        long long11 = gJChronology6.add((long) 'a', (-1L), (int) (short) 0);
        boolean boolean13 = gJChronology6.equals((java.lang.Object) 0);
        org.joda.time.DateTimeField dateTimeField14 = gJChronology6.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology6.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField16 = gJChronology6.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField17 = gJChronology6.clockhourOfHalfday();
        org.joda.time.DateTime dateTime18 = instant1.toDateTime((org.joda.time.Chronology) gJChronology6);
        java.util.TimeZone timeZone19 = null;
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forTimeZone(timeZone19);
        org.joda.time.chrono.GJChronology gJChronology21 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone20);
        org.joda.time.DurationField durationField22 = gJChronology21.halfdays();
        long long26 = gJChronology21.add((long) 'a', (-1L), (int) (short) 0);
        long long30 = gJChronology21.add((long) (byte) 0, (long) '4', 100);
        org.joda.time.DateTimeField dateTimeField31 = gJChronology21.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField32 = gJChronology21.year();
        org.joda.time.DateTimeField dateTimeField33 = gJChronology21.monthOfYear();
        org.joda.time.MutableDateTime mutableDateTime34 = instant1.toMutableDateTime((org.joda.time.Chronology) gJChronology21);
        boolean boolean35 = mutableDateTime34.isBeforeNow();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and dateTime18", (instant1.compareTo(dateTime18) == 0) == instant1.equals(dateTime18));
    }

    @Test
    public void test0086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0086");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = gJChronology2.halfdays();
        long long7 = gJChronology2.add((long) 'a', (-1L), (int) (short) 0);
        org.joda.time.DateTimeField dateTimeField8 = gJChronology2.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField9 = gJChronology2.secondOfMinute();
        org.joda.time.Instant instant11 = new org.joda.time.Instant(52L);
        boolean boolean12 = instant11.isEqualNow();
        org.joda.time.ReadableDuration readableDuration13 = null;
        org.joda.time.Instant instant14 = instant11.plus(readableDuration13);
        boolean boolean15 = gJChronology2.equals((java.lang.Object) instant11);
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = null;
        boolean boolean17 = instant11.isSupported(dateTimeFieldType16);
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = null;
        boolean boolean19 = instant11.isSupported(dateTimeFieldType18);
        org.joda.time.DateTimeZone dateTimeZone20 = instant11.getZone();
        org.joda.time.Instant instant22 = instant11.plus((long) 'a');
        org.joda.time.ReadableDuration readableDuration23 = null;
        org.joda.time.Instant instant24 = instant11.minus(readableDuration23);
        org.joda.time.Instant instant26 = new org.joda.time.Instant(52L);
        boolean boolean27 = instant26.isEqualNow();
        boolean boolean29 = instant26.isEqual(0L);
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = null;
        boolean boolean31 = instant26.isSupported(dateTimeFieldType30);
        org.joda.time.Instant instant34 = instant26.withDurationAdded((-61827926399999L), (int) (short) -1);
        org.joda.time.MutableDateTime mutableDateTime35 = instant34.toMutableDateTime();
        org.joda.time.Instant instant36 = instant34.toInstant();
        boolean boolean37 = instant11.isAfter((org.joda.time.ReadableInstant) instant36);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant36 and mutableDateTime35", (instant36.compareTo(mutableDateTime35) == 0) == instant36.equals(mutableDateTime35));
    }

    @Test
    public void test0087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0087");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField3 = gJChronology2.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.weekyearOfCentury();
        org.joda.time.Instant instant5 = gJChronology2.getGregorianCutover();
        org.joda.time.Instant instant7 = instant5.withMillis(0L);
        java.util.TimeZone timeZone8 = null;
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forTimeZone(timeZone8);
        org.joda.time.chrono.GJChronology gJChronology10 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone9);
        org.joda.time.DateTimeField dateTimeField11 = gJChronology10.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField12 = gJChronology10.weekyear();
        org.joda.time.DateTimeField dateTimeField13 = gJChronology10.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField14 = gJChronology10.weekyearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime15 = instant7.toMutableDateTime((org.joda.time.Chronology) gJChronology10);
        org.joda.time.MutableDateTime mutableDateTime16 = instant7.toMutableDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone17 = instant7.getZone();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime15 and mutableDateTime16", (mutableDateTime15.compareTo(mutableDateTime16) == 0) == mutableDateTime15.equals(mutableDateTime16));
    }

    @Test
    public void test0088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0088");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        boolean boolean2 = instant1.isEqualNow();
        org.joda.time.ReadableDuration readableDuration3 = null;
        org.joda.time.Instant instant4 = instant1.plus(readableDuration3);
        long long5 = instant1.getMillis();
        java.lang.String str6 = instant1.toString();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.getDefault();
        long long9 = dateTimeZone7.nextTransition(1000L);
        org.joda.time.DateTime dateTime10 = instant1.toDateTime(dateTimeZone7);
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.Instant instant13 = instant1.withDurationAdded(readableDuration11, 4);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant13 and dateTime10", (instant13.compareTo(dateTime10) == 0) == instant13.equals(dateTime10));
    }

    @Test
    public void test0089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0089");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        boolean boolean2 = instant1.isEqualNow();
        java.lang.String str3 = instant1.toString();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.MutableDateTime mutableDateTime5 = instant1.toMutableDateTime(chronology4);
        org.joda.time.Instant instant7 = new org.joda.time.Instant(52L);
        boolean boolean8 = instant7.isEqualNow();
        boolean boolean9 = instant1.isAfter((org.joda.time.ReadableInstant) instant7);
        boolean boolean11 = instant7.isAfter(1907L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and mutableDateTime5", (instant1.compareTo(mutableDateTime5) == 0) == instant1.equals(mutableDateTime5));
    }

    @Test
    public void test0090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0090");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        long long6 = dateTimeZone1.convertLocalToUTC((long) (byte) -1, true, 0L);
        java.lang.String str8 = dateTimeZone1.getNameKey((long) (short) 0);
        boolean boolean10 = dateTimeZone1.isStandardOffset((long) 0);
        java.lang.String str12 = dateTimeZone1.getNameKey((long) 432000001);
        org.joda.time.Instant instant14 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone15 = null;
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forTimeZone(timeZone15);
        org.joda.time.chrono.GJChronology gJChronology17 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone16);
        org.joda.time.DateTimeField dateTimeField18 = gJChronology17.millisOfSecond();
        int int19 = instant14.get(dateTimeField18);
        boolean boolean20 = instant14.isEqualNow();
        org.joda.time.Instant instant22 = new org.joda.time.Instant(52L);
        boolean boolean23 = instant22.isEqualNow();
        org.joda.time.ReadableDuration readableDuration24 = null;
        org.joda.time.Instant instant25 = instant22.plus(readableDuration24);
        long long26 = instant22.getMillis();
        java.lang.Object obj27 = null;
        boolean boolean28 = instant22.equals(obj27);
        org.joda.time.Instant instant30 = new org.joda.time.Instant(52L);
        boolean boolean31 = instant30.isEqualNow();
        org.joda.time.ReadableDuration readableDuration32 = null;
        org.joda.time.Instant instant33 = instant30.plus(readableDuration32);
        long long34 = instant30.getMillis();
        java.lang.String str35 = instant30.toString();
        org.joda.time.Instant instant36 = instant30.toInstant();
        org.joda.time.ReadableDuration readableDuration37 = null;
        org.joda.time.Instant instant39 = instant30.withDurationAdded(readableDuration37, (int) 'x');
        org.joda.time.Instant instant40 = instant30.toInstant();
        int int41 = instant22.compareTo((org.joda.time.ReadableInstant) instant30);
        boolean boolean42 = instant14.isBefore((org.joda.time.ReadableInstant) instant30);
        java.util.TimeZone timeZone43 = null;
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.forTimeZone(timeZone43);
        org.joda.time.chrono.GJChronology gJChronology45 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone44);
        org.joda.time.DurationField durationField46 = gJChronology45.halfdays();
        long long50 = gJChronology45.add((long) 'a', (-1L), (int) (short) 0);
        org.joda.time.DateTimeField dateTimeField51 = gJChronology45.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField52 = gJChronology45.secondOfMinute();
        org.joda.time.Instant instant54 = new org.joda.time.Instant(52L);
        boolean boolean55 = instant54.isEqualNow();
        org.joda.time.ReadableDuration readableDuration56 = null;
        org.joda.time.Instant instant57 = instant54.plus(readableDuration56);
        boolean boolean58 = gJChronology45.equals((java.lang.Object) instant54);
        org.joda.time.DateTimeFieldType dateTimeFieldType59 = null;
        boolean boolean60 = instant54.isSupported(dateTimeFieldType59);
        org.joda.time.DateTimeFieldType dateTimeFieldType61 = null;
        boolean boolean62 = instant54.isSupported(dateTimeFieldType61);
        java.lang.String str63 = instant54.toString();
        boolean boolean64 = instant14.isAfter((org.joda.time.ReadableInstant) instant54);
        org.joda.time.MutableDateTime mutableDateTime65 = instant54.toMutableDateTimeISO();
        int int66 = dateTimeZone1.getOffset((org.joda.time.ReadableInstant) instant54);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant14 and mutableDateTime65", (instant14.compareTo(mutableDateTime65) == 0) == instant14.equals(mutableDateTime65));
    }

    @Test
    public void test0091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0091");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField3 = gJChronology2.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.weekyearOfCentury();
        org.joda.time.Instant instant5 = gJChronology2.getGregorianCutover();
        org.joda.time.Instant instant7 = instant5.withMillis(0L);
        java.util.TimeZone timeZone8 = null;
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forTimeZone(timeZone8);
        org.joda.time.chrono.GJChronology gJChronology10 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone9);
        org.joda.time.DateTimeField dateTimeField11 = gJChronology10.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField12 = gJChronology10.weekyear();
        org.joda.time.DateTimeField dateTimeField13 = gJChronology10.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField14 = gJChronology10.weekyearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime15 = instant7.toMutableDateTime((org.joda.time.Chronology) gJChronology10);
        org.joda.time.MutableDateTime mutableDateTime16 = instant7.toMutableDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(1, 10);
        org.joda.time.LocalDateTime localDateTime20 = null;
        boolean boolean21 = dateTimeZone19.isLocalDateTimeGap(localDateTime20);
        long long25 = dateTimeZone19.convertLocalToUTC((-26438399999L), false, (long) 10);
        boolean boolean26 = instant7.equals((java.lang.Object) false);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime15 and mutableDateTime16", (mutableDateTime15.compareTo(mutableDateTime16) == 0) == mutableDateTime15.equals(mutableDateTime16));
    }

    @Test
    public void test0092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0092");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime1 = instant0.toMutableDateTime();
        org.joda.time.DateTimeZone dateTimeZone2 = mutableDateTime1.getZone();
        int int4 = dateTimeZone2.getStandardOffset(117L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant0 and mutableDateTime1", (instant0.compareTo(mutableDateTime1) == 0) == instant0.equals(mutableDateTime1));
    }

    @Test
    public void test0093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0093");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forTimeZone(timeZone2);
        org.joda.time.chrono.GJChronology gJChronology4 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone3);
        org.joda.time.DateTimeField dateTimeField5 = gJChronology4.millisOfSecond();
        int int6 = instant1.get(dateTimeField5);
        org.joda.time.Instant instant8 = instant1.plus(0L);
        java.util.TimeZone timeZone9 = null;
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forTimeZone(timeZone9);
        org.joda.time.chrono.GJChronology gJChronology11 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone10);
        org.joda.time.DurationField durationField12 = gJChronology11.halfdays();
        org.joda.time.Chronology chronology13 = gJChronology11.withUTC();
        java.lang.String str14 = gJChronology11.toString();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology11.hourOfHalfday();
        int int16 = instant1.get(dateTimeField15);
        java.util.TimeZone timeZone17 = null;
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forTimeZone(timeZone17);
        org.joda.time.chrono.GJChronology gJChronology19 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone18);
        org.joda.time.DurationField durationField20 = gJChronology19.halfdays();
        long long24 = gJChronology19.add((long) 'a', (-1L), (int) (short) 0);
        org.joda.time.DateTimeField dateTimeField25 = gJChronology19.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField26 = gJChronology19.secondOfMinute();
        org.joda.time.Instant instant28 = new org.joda.time.Instant(52L);
        boolean boolean29 = instant28.isEqualNow();
        org.joda.time.ReadableDuration readableDuration30 = null;
        org.joda.time.Instant instant31 = instant28.plus(readableDuration30);
        boolean boolean32 = gJChronology19.equals((java.lang.Object) instant28);
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = null;
        boolean boolean34 = instant28.isSupported(dateTimeFieldType33);
        org.joda.time.DateTimeFieldType dateTimeFieldType35 = null;
        boolean boolean36 = instant28.isSupported(dateTimeFieldType35);
        org.joda.time.DateTimeZone dateTimeZone37 = instant28.getZone();
        boolean boolean38 = instant1.isAfter((org.joda.time.ReadableInstant) instant28);
        long long39 = instant28.getMillis();
        org.joda.time.Instant instant41 = new org.joda.time.Instant(52L);
        boolean boolean42 = instant41.isEqualNow();
        java.lang.String str43 = instant41.toString();
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.MutableDateTime mutableDateTime45 = instant41.toMutableDateTime(chronology44);
        org.joda.time.MutableDateTime mutableDateTime46 = instant41.toMutableDateTime();
        org.joda.time.DateTimeZone dateTimeZone49 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(1, 10);
        org.joda.time.LocalDateTime localDateTime50 = null;
        boolean boolean51 = dateTimeZone49.isLocalDateTimeGap(localDateTime50);
        boolean boolean52 = dateTimeZone49.isFixed();
        java.util.Locale.Category category54 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale55 = java.util.Locale.CANADA;
        java.lang.String str56 = locale55.getISO3Language();
        java.util.Locale.setDefault(category54, locale55);
        java.util.Locale locale60 = new java.util.Locale("cinese (Taiwan)", "DurationField[weekyears]");
        java.util.Set<java.lang.String> strSet61 = locale60.getUnicodeLocaleAttributes();
        java.lang.String str62 = locale55.getDisplayLanguage(locale60);
        java.lang.String str63 = dateTimeZone49.getShortName((long) 10, locale55);
        org.joda.time.MutableDateTime mutableDateTime64 = instant41.toMutableDateTime(dateTimeZone49);
        int int65 = instant28.compareTo((org.joda.time.ReadableInstant) instant41);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and mutableDateTime45", (instant1.compareTo(mutableDateTime45) == 0) == instant1.equals(mutableDateTime45));
    }

    @Test
    public void test0094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0094");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        boolean boolean2 = instant1.isEqualNow();
        java.lang.String str3 = instant1.toString();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.MutableDateTime mutableDateTime5 = instant1.toMutableDateTime(chronology4);
        org.joda.time.MutableDateTime mutableDateTime6 = instant1.toMutableDateTime();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(1, 10);
        org.joda.time.LocalDateTime localDateTime10 = null;
        boolean boolean11 = dateTimeZone9.isLocalDateTimeGap(localDateTime10);
        boolean boolean12 = dateTimeZone9.isFixed();
        java.util.Locale.Category category14 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale15 = java.util.Locale.CANADA;
        java.lang.String str16 = locale15.getISO3Language();
        java.util.Locale.setDefault(category14, locale15);
        java.util.Locale locale20 = new java.util.Locale("cinese (Taiwan)", "DurationField[weekyears]");
        java.util.Set<java.lang.String> strSet21 = locale20.getUnicodeLocaleAttributes();
        java.lang.String str22 = locale15.getDisplayLanguage(locale20);
        java.lang.String str23 = dateTimeZone9.getShortName((long) 10, locale15);
        org.joda.time.MutableDateTime mutableDateTime24 = instant1.toMutableDateTime(dateTimeZone9);
        org.joda.time.Instant instant25 = org.joda.time.Instant.now();
        org.joda.time.Instant instant28 = instant25.withDurationAdded(306102434400000L, (int) (short) 100);
        java.util.TimeZone timeZone29 = null;
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forTimeZone(timeZone29);
        org.joda.time.chrono.GJChronology gJChronology31 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone30);
        long long35 = dateTimeZone30.convertLocalToUTC((long) (byte) -1, true, 0L);
        boolean boolean37 = dateTimeZone30.equals((java.lang.Object) true);
        long long39 = dateTimeZone30.nextTransition((long) '4');
        java.lang.String str41 = dateTimeZone30.getShortName(432000001L);
        java.util.TimeZone timeZone42 = dateTimeZone30.toTimeZone();
        org.joda.time.DateTime dateTime43 = instant25.toDateTime(dateTimeZone30);
        boolean boolean44 = instant1.isBefore((org.joda.time.ReadableInstant) dateTime43);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime5 and mutableDateTime24", (mutableDateTime5.compareTo(mutableDateTime24) == 0) == mutableDateTime5.equals(mutableDateTime24));
    }

    @Test
    public void test0095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0095");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        boolean boolean2 = instant1.isEqualNow();
        java.lang.String str3 = instant1.toString();
        java.lang.String str4 = instant1.toString();
        org.joda.time.Instant instant7 = instant1.withDurationAdded(115200000L, (int) (short) 1);
        java.util.TimeZone timeZone8 = null;
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forTimeZone(timeZone8);
        java.lang.String str11 = dateTimeZone9.getNameKey((long) 100);
        boolean boolean12 = dateTimeZone9.isFixed();
        org.joda.time.DateTime dateTime13 = instant1.toDateTime(dateTimeZone9);
        boolean boolean15 = instant1.isAfter(0L);
        org.joda.time.Instant instant17 = new org.joda.time.Instant(52L);
        boolean boolean18 = instant17.isEqualNow();
        org.joda.time.ReadableDuration readableDuration19 = null;
        org.joda.time.Instant instant20 = instant17.plus(readableDuration19);
        org.joda.time.Instant instant22 = new org.joda.time.Instant(52L);
        org.joda.time.Instant instant24 = instant22.withMillis((long) 'u');
        boolean boolean25 = instant17.isBefore((org.joda.time.ReadableInstant) instant22);
        org.joda.time.Instant instant26 = instant22.toInstant();
        org.joda.time.MutableDateTime mutableDateTime27 = instant22.toMutableDateTime();
        boolean boolean28 = instant1.isBefore((org.joda.time.ReadableInstant) mutableDateTime27);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime13 and instant17", (dateTime13.compareTo(instant17) == 0) == dateTime13.equals(instant17));
    }

    @Test
    public void test0096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0096");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forTimeZone(timeZone2);
        org.joda.time.chrono.GJChronology gJChronology4 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone3);
        org.joda.time.DateTimeField dateTimeField5 = gJChronology4.millisOfSecond();
        int int6 = instant1.get(dateTimeField5);
        boolean boolean7 = instant1.isEqualNow();
        org.joda.time.Instant instant9 = new org.joda.time.Instant(52L);
        boolean boolean10 = instant9.isEqualNow();
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.Instant instant12 = instant9.plus(readableDuration11);
        long long13 = instant9.getMillis();
        java.lang.Object obj14 = null;
        boolean boolean15 = instant9.equals(obj14);
        org.joda.time.Instant instant17 = new org.joda.time.Instant(52L);
        boolean boolean18 = instant17.isEqualNow();
        org.joda.time.ReadableDuration readableDuration19 = null;
        org.joda.time.Instant instant20 = instant17.plus(readableDuration19);
        long long21 = instant17.getMillis();
        java.lang.String str22 = instant17.toString();
        org.joda.time.Instant instant23 = instant17.toInstant();
        org.joda.time.ReadableDuration readableDuration24 = null;
        org.joda.time.Instant instant26 = instant17.withDurationAdded(readableDuration24, (int) 'x');
        org.joda.time.Instant instant27 = instant17.toInstant();
        int int28 = instant9.compareTo((org.joda.time.ReadableInstant) instant17);
        boolean boolean29 = instant1.isBefore((org.joda.time.ReadableInstant) instant17);
        java.util.TimeZone timeZone30 = null;
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forTimeZone(timeZone30);
        org.joda.time.chrono.GJChronology gJChronology32 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone31);
        org.joda.time.DateTimeField dateTimeField33 = gJChronology32.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField34 = gJChronology32.weekyearOfCentury();
        org.joda.time.Instant instant35 = gJChronology32.getGregorianCutover();
        org.joda.time.Instant instant37 = instant35.withMillis(0L);
        org.joda.time.Instant instant39 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone40 = null;
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.forTimeZone(timeZone40);
        org.joda.time.chrono.GJChronology gJChronology42 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone41);
        org.joda.time.DateTimeField dateTimeField43 = gJChronology42.millisOfSecond();
        int int44 = instant39.get(dateTimeField43);
        org.joda.time.Instant instant46 = instant39.plus(0L);
        int int47 = instant37.compareTo((org.joda.time.ReadableInstant) instant46);
        org.joda.time.Instant instant49 = new org.joda.time.Instant(52L);
        boolean boolean50 = instant49.isEqualNow();
        org.joda.time.ReadableDuration readableDuration51 = null;
        org.joda.time.Instant instant52 = instant49.plus(readableDuration51);
        boolean boolean54 = instant52.equals((java.lang.Object) ' ');
        boolean boolean55 = instant46.isEqual((org.joda.time.ReadableInstant) instant52);
        org.joda.time.MutableDateTime mutableDateTime56 = instant46.toMutableDateTime();
        boolean boolean57 = instant17.isEqual((org.joda.time.ReadableInstant) mutableDateTime56);
        boolean boolean58 = instant17.isBeforeNow();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and mutableDateTime56", (instant1.compareTo(mutableDateTime56) == 0) == instant1.equals(mutableDateTime56));
    }

    @Test
    public void test0097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0097");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField3 = gJChronology2.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.weekyearOfCentury();
        org.joda.time.Instant instant5 = gJChronology2.getGregorianCutover();
        org.joda.time.Instant instant7 = instant5.withMillis(0L);
        java.util.TimeZone timeZone8 = null;
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forTimeZone(timeZone8);
        org.joda.time.chrono.GJChronology gJChronology10 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone9);
        org.joda.time.DateTimeField dateTimeField11 = gJChronology10.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField12 = gJChronology10.weekyear();
        org.joda.time.DateTimeField dateTimeField13 = gJChronology10.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField14 = gJChronology10.weekyearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime15 = instant7.toMutableDateTime((org.joda.time.Chronology) gJChronology10);
        org.joda.time.MutableDateTime mutableDateTime16 = instant7.toMutableDateTimeISO();
        java.util.TimeZone timeZone17 = null;
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forTimeZone(timeZone17);
        org.joda.time.chrono.GJChronology gJChronology19 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone18);
        org.joda.time.DurationField durationField20 = gJChronology19.halfdays();
        long long24 = gJChronology19.add((long) 'a', (-1L), (int) (short) 0);
        boolean boolean26 = gJChronology19.equals((java.lang.Object) 0);
        org.joda.time.DateTimeField dateTimeField27 = gJChronology19.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField28 = gJChronology19.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField29 = gJChronology19.clockhourOfDay();
        long long34 = gJChronology19.getDateTimeMillis(10, (int) (short) 10, 4, (int) (byte) 1);
        org.joda.time.Instant instant35 = gJChronology19.getGregorianCutover();
        org.joda.time.DateTime dateTime36 = instant7.toDateTime((org.joda.time.Chronology) gJChronology19);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime15 and mutableDateTime16", (mutableDateTime15.compareTo(mutableDateTime16) == 0) == mutableDateTime15.equals(mutableDateTime16));
    }

    @Test
    public void test0098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0098");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        boolean boolean2 = instant1.isEqualNow();
        org.joda.time.ReadableDuration readableDuration3 = null;
        org.joda.time.Instant instant4 = instant1.plus(readableDuration3);
        long long5 = instant1.getMillis();
        java.lang.String str6 = instant1.toString();
        org.joda.time.Instant instant7 = instant1.toInstant();
        java.util.TimeZone timeZone8 = null;
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forTimeZone(timeZone8);
        java.lang.String str11 = dateTimeZone9.getNameKey((long) 100);
        long long14 = dateTimeZone9.convertLocalToUTC((-2246399965L), true);
        org.joda.time.MutableDateTime mutableDateTime15 = instant7.toMutableDateTime(dateTimeZone9);
        org.joda.time.Instant instant16 = instant7.toInstant();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant16 and mutableDateTime15", (instant16.compareTo(mutableDateTime15) == 0) == instant16.equals(mutableDateTime15));
    }

    @Test
    public void test0099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0099");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        boolean boolean2 = instant1.isEqualNow();
        org.joda.time.ReadableDuration readableDuration3 = null;
        org.joda.time.Instant instant4 = instant1.plus(readableDuration3);
        boolean boolean6 = instant4.equals((java.lang.Object) ' ');
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(1, 10);
        java.util.TimeZone timeZone10 = null;
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forTimeZone(timeZone10);
        long long13 = dateTimeZone9.getMillisKeepLocal(dateTimeZone11, 4320000000L);
        boolean boolean14 = instant4.equals((java.lang.Object) 4320000000L);
        org.joda.time.Instant instant16 = instant4.withMillis(10L);
        java.util.TimeZone timeZone17 = null;
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forTimeZone(timeZone17);
        org.joda.time.chrono.GJChronology gJChronology19 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone18);
        org.joda.time.DateTimeField dateTimeField20 = gJChronology19.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField21 = gJChronology19.weekyearOfCentury();
        org.joda.time.Instant instant22 = gJChronology19.getGregorianCutover();
        org.joda.time.Instant instant24 = instant22.withMillis(0L);
        org.joda.time.Instant instant26 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone27 = null;
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forTimeZone(timeZone27);
        org.joda.time.chrono.GJChronology gJChronology29 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone28);
        org.joda.time.DateTimeField dateTimeField30 = gJChronology29.millisOfSecond();
        int int31 = instant26.get(dateTimeField30);
        org.joda.time.Instant instant33 = instant26.plus(0L);
        int int34 = instant24.compareTo((org.joda.time.ReadableInstant) instant33);
        org.joda.time.Instant instant36 = new org.joda.time.Instant(52L);
        boolean boolean37 = instant36.isEqualNow();
        org.joda.time.ReadableDuration readableDuration38 = null;
        org.joda.time.Instant instant39 = instant36.plus(readableDuration38);
        boolean boolean41 = instant39.equals((java.lang.Object) ' ');
        boolean boolean42 = instant33.isEqual((org.joda.time.ReadableInstant) instant39);
        org.joda.time.MutableDateTime mutableDateTime43 = instant33.toMutableDateTime();
        boolean boolean44 = instant4.isEqual((org.joda.time.ReadableInstant) instant33);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant4 and mutableDateTime43", (instant4.compareTo(mutableDateTime43) == 0) == instant4.equals(mutableDateTime43));
    }

    @Test
    public void test0100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0100");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        boolean boolean2 = instant1.isEqualNow();
        java.lang.String str3 = instant1.toString();
        java.util.TimeZone timeZone4 = null;
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forTimeZone(timeZone4);
        org.joda.time.chrono.GJChronology gJChronology6 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone5);
        java.util.Locale locale8 = new java.util.Locale("hi!");
        java.lang.String str9 = locale8.getCountry();
        java.util.Locale locale10 = java.util.Locale.getDefault();
        java.lang.String str11 = locale10.getDisplayName();
        java.lang.String str12 = locale8.getDisplayScript(locale10);
        boolean boolean13 = dateTimeZone5.equals((java.lang.Object) locale10);
        int int15 = dateTimeZone5.getOffsetFromLocal((long) (short) 10);
        java.util.TimeZone timeZone16 = null;
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forTimeZone(timeZone16);
        org.joda.time.chrono.GJChronology gJChronology18 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone17);
        org.joda.time.DateTimeField dateTimeField19 = gJChronology18.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField20 = gJChronology18.weekyearOfCentury();
        org.joda.time.Instant instant21 = gJChronology18.getGregorianCutover();
        org.joda.time.Instant instant23 = instant21.withMillis(0L);
        org.joda.time.Instant instant25 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone26 = null;
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forTimeZone(timeZone26);
        org.joda.time.chrono.GJChronology gJChronology28 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone27);
        org.joda.time.DateTimeField dateTimeField29 = gJChronology28.millisOfSecond();
        int int30 = instant25.get(dateTimeField29);
        org.joda.time.Instant instant32 = instant25.plus(0L);
        int int33 = instant23.compareTo((org.joda.time.ReadableInstant) instant32);
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = null;
        boolean boolean35 = instant32.isSupported(dateTimeFieldType34);
        int int36 = dateTimeZone5.getOffset((org.joda.time.ReadableInstant) instant32);
        boolean boolean37 = instant1.isAfter((org.joda.time.ReadableInstant) instant32);
        org.joda.time.Instant instant39 = instant32.withMillis((long) 10);
        org.joda.time.DateTime dateTime40 = instant32.toDateTimeISO();
        java.lang.String str41 = dateTime40.toString();
        org.joda.time.Instant instant43 = new org.joda.time.Instant(52L);
        boolean boolean44 = instant43.isEqualNow();
        java.lang.String str45 = instant43.toString();
        org.joda.time.Instant instant47 = new org.joda.time.Instant(52L);
        boolean boolean48 = instant47.isEqualNow();
        java.lang.String str49 = instant47.toString();
        java.lang.String str50 = instant47.toString();
        org.joda.time.Instant instant53 = instant47.withDurationAdded(115200000L, (int) (short) 1);
        int int54 = instant43.compareTo((org.joda.time.ReadableInstant) instant47);
        org.joda.time.MutableDateTime mutableDateTime55 = instant43.toMutableDateTimeISO();
        boolean boolean56 = dateTime40.equals((java.lang.Object) instant43);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and mutableDateTime55", (instant1.compareTo(mutableDateTime55) == 0) == instant1.equals(mutableDateTime55));
    }

    @Test
    public void test0101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0101");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        org.joda.time.Instant instant3 = instant1.withMillis((long) 'u');
        java.util.TimeZone timeZone4 = null;
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forTimeZone(timeZone4);
        org.joda.time.chrono.GJChronology gJChronology6 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone5);
        org.joda.time.DurationField durationField7 = gJChronology6.halfdays();
        long long11 = gJChronology6.add((long) 'a', (-1L), (int) (short) 0);
        boolean boolean13 = gJChronology6.equals((java.lang.Object) 0);
        org.joda.time.DateTimeField dateTimeField14 = gJChronology6.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology6.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField16 = gJChronology6.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField17 = gJChronology6.clockhourOfHalfday();
        org.joda.time.DateTime dateTime18 = instant1.toDateTime((org.joda.time.Chronology) gJChronology6);
        org.joda.time.DateTimeField dateTimeField19 = gJChronology6.weekyearOfCentury();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and dateTime18", (instant1.compareTo(dateTime18) == 0) == instant1.equals(dateTime18));
    }

    @Test
    public void test0102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0102");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        boolean boolean2 = instant1.isEqualNow();
        java.lang.String str3 = instant1.toString();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.MutableDateTime mutableDateTime5 = instant1.toMutableDateTime(chronology4);
        org.joda.time.Instant instant7 = new org.joda.time.Instant(52L);
        boolean boolean8 = instant7.isEqualNow();
        org.joda.time.Instant instant10 = new org.joda.time.Instant(52L);
        org.joda.time.Instant instant12 = instant10.withMillis((long) 'u');
        boolean boolean13 = instant7.isAfter((org.joda.time.ReadableInstant) instant10);
        boolean boolean14 = mutableDateTime5.isEqual((org.joda.time.ReadableInstant) instant10);
        java.util.TimeZone timeZone15 = null;
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forTimeZone(timeZone15);
        org.joda.time.chrono.GJChronology gJChronology17 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone16);
        org.joda.time.DurationField durationField18 = gJChronology17.halfdays();
        org.joda.time.DateTimeField dateTimeField19 = gJChronology17.millisOfDay();
        org.joda.time.DateTimeField dateTimeField20 = gJChronology17.minuteOfDay();
        org.joda.time.DurationField durationField21 = gJChronology17.centuries();
        org.joda.time.DateTimeField dateTimeField22 = gJChronology17.dayOfYear();
        java.lang.String str23 = gJChronology17.toString();
        org.joda.time.DurationField durationField24 = gJChronology17.halfdays();
        org.joda.time.DateTimeField dateTimeField25 = gJChronology17.clockhourOfHalfday();
        org.joda.time.DateTime dateTime26 = mutableDateTime5.toDateTime((org.joda.time.Chronology) gJChronology17);
        java.util.TimeZone timeZone27 = null;
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forTimeZone(timeZone27);
        org.joda.time.chrono.GJChronology gJChronology29 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone28);
        org.joda.time.DateTimeField dateTimeField30 = gJChronology29.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField31 = gJChronology29.weekyear();
        org.joda.time.DateTimeField dateTimeField32 = gJChronology29.halfdayOfDay();
        org.joda.time.DurationField durationField33 = gJChronology29.years();
        org.joda.time.DurationField durationField34 = gJChronology29.minutes();
        org.joda.time.ReadablePeriod readablePeriod35 = null;
        long long38 = gJChronology29.add(readablePeriod35, (-42L), (int) '4');
        org.joda.time.Chronology chronology39 = gJChronology29.withUTC();
        org.joda.time.DateTimeField dateTimeField40 = gJChronology29.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField41 = gJChronology29.dayOfYear();
        int int42 = dateTime26.get(dateTimeField41);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and mutableDateTime5", (instant1.compareTo(mutableDateTime5) == 0) == instant1.equals(mutableDateTime5));
    }

    @Test
    public void test0103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0103");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = gJChronology2.halfdays();
        long long7 = gJChronology2.add((long) 'a', (-1L), (int) (short) 0);
        long long11 = gJChronology2.add((long) (byte) 0, (long) '4', 100);
        org.joda.time.DateTimeField dateTimeField12 = gJChronology2.minuteOfHour();
        org.joda.time.DurationField durationField13 = gJChronology2.hours();
        org.joda.time.DurationField durationField14 = gJChronology2.minutes();
        org.joda.time.DurationField durationField15 = gJChronology2.eras();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField15, durationField3, and durationField13", !(durationField15.compareTo(durationField3) == 0) || (Math.signum(durationField15.compareTo(durationField13)) == Math.signum(durationField3.compareTo(durationField13))));
    }

    @Test
    public void test0104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0104");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        boolean boolean2 = instant1.isEqualNow();
        java.lang.String str3 = instant1.toString();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.MutableDateTime mutableDateTime5 = instant1.toMutableDateTime(chronology4);
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.Instant instant7 = instant1.minus(readableDuration6);
        org.joda.time.Instant instant9 = instant1.minus((long) 1970);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime5 and instant1", (mutableDateTime5.compareTo(instant1) == 0) == mutableDateTime5.equals(instant1));
    }

    @Test
    public void test0105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0105");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = gJChronology2.halfdays();
        long long7 = gJChronology2.add((long) 'a', (-1L), (int) (short) 0);
        boolean boolean9 = gJChronology2.equals((java.lang.Object) 0);
        org.joda.time.DateTimeField dateTimeField10 = gJChronology2.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField11 = gJChronology2.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField12 = gJChronology2.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField13 = gJChronology2.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField14 = gJChronology2.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology2.clockhourOfHalfday();
        org.joda.time.DurationField durationField16 = gJChronology2.eras();
        org.joda.time.DurationField durationField17 = gJChronology2.eras();
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField3 and durationField17", Math.signum(durationField3.compareTo(durationField17)) == -Math.signum(durationField17.compareTo(durationField3)));
    }

    @Test
    public void test0106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0106");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        boolean boolean2 = instant1.isEqualNow();
        java.lang.String str3 = instant1.toString();
        java.util.TimeZone timeZone4 = null;
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forTimeZone(timeZone4);
        org.joda.time.chrono.GJChronology gJChronology6 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone5);
        java.util.Locale locale8 = new java.util.Locale("hi!");
        java.lang.String str9 = locale8.getCountry();
        java.util.Locale locale10 = java.util.Locale.getDefault();
        java.lang.String str11 = locale10.getDisplayName();
        java.lang.String str12 = locale8.getDisplayScript(locale10);
        boolean boolean13 = dateTimeZone5.equals((java.lang.Object) locale10);
        int int15 = dateTimeZone5.getOffsetFromLocal((long) (short) 10);
        java.util.TimeZone timeZone16 = null;
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forTimeZone(timeZone16);
        org.joda.time.chrono.GJChronology gJChronology18 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone17);
        org.joda.time.DateTimeField dateTimeField19 = gJChronology18.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField20 = gJChronology18.weekyearOfCentury();
        org.joda.time.Instant instant21 = gJChronology18.getGregorianCutover();
        org.joda.time.Instant instant23 = instant21.withMillis(0L);
        org.joda.time.Instant instant25 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone26 = null;
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forTimeZone(timeZone26);
        org.joda.time.chrono.GJChronology gJChronology28 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone27);
        org.joda.time.DateTimeField dateTimeField29 = gJChronology28.millisOfSecond();
        int int30 = instant25.get(dateTimeField29);
        org.joda.time.Instant instant32 = instant25.plus(0L);
        int int33 = instant23.compareTo((org.joda.time.ReadableInstant) instant32);
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = null;
        boolean boolean35 = instant32.isSupported(dateTimeFieldType34);
        int int36 = dateTimeZone5.getOffset((org.joda.time.ReadableInstant) instant32);
        boolean boolean37 = instant1.isAfter((org.joda.time.ReadableInstant) instant32);
        org.joda.time.Instant instant39 = instant32.withMillis((long) 10);
        org.joda.time.DateTime dateTime40 = instant32.toDateTimeISO();
        long long41 = instant32.getMillis();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and dateTime40", (instant1.compareTo(dateTime40) == 0) == instant1.equals(dateTime40));
    }

    @Test
    public void test0107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0107");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = gJChronology2.halfdays();
        long long7 = gJChronology2.add((long) 'a', (-1L), (int) (short) 0);
        long long11 = gJChronology2.add((long) (byte) 0, (long) '4', 100);
        org.joda.time.DurationField durationField12 = gJChronology2.years();
        java.util.TimeZone timeZone13 = null;
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forTimeZone(timeZone13);
        org.joda.time.chrono.GJChronology gJChronology15 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone14);
        org.joda.time.DurationField durationField16 = gJChronology15.halfdays();
        long long20 = gJChronology15.add((long) 'a', (-1L), (int) (short) 0);
        org.joda.time.DateTimeField dateTimeField21 = gJChronology15.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField22 = gJChronology15.secondOfMinute();
        org.joda.time.Instant instant24 = new org.joda.time.Instant(52L);
        boolean boolean25 = instant24.isEqualNow();
        org.joda.time.ReadableDuration readableDuration26 = null;
        org.joda.time.Instant instant27 = instant24.plus(readableDuration26);
        boolean boolean28 = gJChronology15.equals((java.lang.Object) instant24);
        java.lang.String str29 = gJChronology15.toString();
        org.joda.time.DurationField durationField30 = gJChronology15.eras();
        int int31 = durationField12.compareTo(durationField30);
        java.util.TimeZone timeZone32 = null;
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.forTimeZone(timeZone32);
        org.joda.time.chrono.GJChronology gJChronology34 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone33);
        org.joda.time.DurationField durationField35 = gJChronology34.halfdays();
        long long38 = durationField35.add((long) 100, 100L);
        java.util.TimeZone timeZone39 = null;
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.forTimeZone(timeZone39);
        org.joda.time.chrono.GJChronology gJChronology41 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone40);
        org.joda.time.DurationField durationField42 = gJChronology41.halfdays();
        long long46 = gJChronology41.add((long) 'a', (-1L), (int) (short) 0);
        boolean boolean48 = gJChronology41.equals((java.lang.Object) 0);
        org.joda.time.DateTimeField dateTimeField49 = gJChronology41.dayOfMonth();
        org.joda.time.DurationField durationField50 = gJChronology41.millis();
        int int51 = durationField35.compareTo(durationField50);
        long long54 = durationField35.getMillis((int) (short) 10, (-1L));
        boolean boolean55 = durationField35.isSupported();
        long long58 = durationField35.getValueAsLong((long) 'a', 126403200120L);
        int int60 = durationField35.getValue((long) 1431201);
        int int61 = durationField12.compareTo(durationField35);
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField35 and durationField30", Math.signum(durationField35.compareTo(durationField30)) == -Math.signum(durationField30.compareTo(durationField35)));
    }

    @Test
    public void test0108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0108");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((-64983772799999L));
        org.joda.time.DateTime dateTime2 = instant1.toDateTime();
        org.joda.time.MutableDateTime mutableDateTime3 = instant1.toMutableDateTimeISO();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = null;
        java.lang.String str5 = mutableDateTime3.toString(dateTimeFormatter4);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and dateTime2", (instant1.compareTo(dateTime2) == 0) == instant1.equals(dateTime2));
    }

    @Test
    public void test0109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0109");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        boolean boolean2 = instant1.isEqualNow();
        boolean boolean4 = instant1.isEqual(0L);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = null;
        boolean boolean6 = instant1.isSupported(dateTimeFieldType5);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = null;
        boolean boolean8 = instant1.isSupported(dateTimeFieldType7);
        java.util.TimeZone timeZone9 = null;
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forTimeZone(timeZone9);
        org.joda.time.chrono.GJChronology gJChronology11 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone10);
        org.joda.time.DurationField durationField12 = gJChronology11.halfdays();
        org.joda.time.Chronology chronology13 = gJChronology11.withUTC();
        java.lang.String str14 = gJChronology11.toString();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology11.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(1, 10);
        org.joda.time.Chronology chronology19 = gJChronology11.withZone(dateTimeZone18);
        org.joda.time.MutableDateTime mutableDateTime20 = instant1.toMutableDateTime(dateTimeZone18);
        org.joda.time.ReadableDuration readableDuration21 = null;
        org.joda.time.Instant instant23 = instant1.withDurationAdded(readableDuration21, 97);
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = null;
        boolean boolean25 = instant23.isSupported(dateTimeFieldType24);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant23 and mutableDateTime20", (instant23.compareTo(mutableDateTime20) == 0) == instant23.equals(mutableDateTime20));
    }

    @Test
    public void test0110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0110");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = gJChronology2.halfdays();
        long long7 = gJChronology2.add((long) 'a', (-1L), (int) (short) 0);
        boolean boolean9 = gJChronology2.equals((java.lang.Object) 0);
        org.joda.time.DateTimeField dateTimeField10 = gJChronology2.dayOfMonth();
        org.joda.time.DurationField durationField11 = gJChronology2.seconds();
        org.joda.time.DateTimeField dateTimeField12 = gJChronology2.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField13 = gJChronology2.era();
        org.joda.time.DurationField durationField14 = gJChronology2.eras();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField14, durationField3, and durationField11", !(durationField14.compareTo(durationField3) == 0) || (Math.signum(durationField14.compareTo(durationField11)) == Math.signum(durationField3.compareTo(durationField11))));
    }

    @Test
    public void test0111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0111");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        org.joda.time.Instant instant3 = instant1.withMillis((long) 'u');
        java.util.TimeZone timeZone4 = null;
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forTimeZone(timeZone4);
        org.joda.time.chrono.GJChronology gJChronology6 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone5);
        org.joda.time.DurationField durationField7 = gJChronology6.halfdays();
        long long11 = gJChronology6.add((long) 'a', (-1L), (int) (short) 0);
        boolean boolean13 = gJChronology6.equals((java.lang.Object) 0);
        org.joda.time.DateTimeField dateTimeField14 = gJChronology6.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology6.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField16 = gJChronology6.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField17 = gJChronology6.clockhourOfHalfday();
        org.joda.time.DateTime dateTime18 = instant1.toDateTime((org.joda.time.Chronology) gJChronology6);
        java.util.TimeZone timeZone19 = null;
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forTimeZone(timeZone19);
        org.joda.time.chrono.GJChronology gJChronology21 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone20);
        org.joda.time.DurationField durationField22 = gJChronology21.halfdays();
        long long26 = gJChronology21.add((long) 'a', (-1L), (int) (short) 0);
        long long30 = gJChronology21.add((long) (byte) 0, (long) '4', 100);
        org.joda.time.DateTimeField dateTimeField31 = gJChronology21.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField32 = gJChronology21.year();
        org.joda.time.DateTimeField dateTimeField33 = gJChronology21.monthOfYear();
        org.joda.time.MutableDateTime mutableDateTime34 = instant1.toMutableDateTime((org.joda.time.Chronology) gJChronology21);
        java.lang.String str35 = gJChronology21.toString();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and dateTime18", (instant1.compareTo(dateTime18) == 0) == instant1.equals(dateTime18));
    }

    @Test
    public void test0112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0112");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField3 = gJChronology2.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.weekyearOfCentury();
        org.joda.time.Instant instant5 = gJChronology2.getGregorianCutover();
        org.joda.time.Instant instant7 = instant5.withMillis(0L);
        org.joda.time.Instant instant9 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone10 = null;
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forTimeZone(timeZone10);
        org.joda.time.chrono.GJChronology gJChronology12 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone11);
        org.joda.time.DateTimeField dateTimeField13 = gJChronology12.millisOfSecond();
        int int14 = instant9.get(dateTimeField13);
        org.joda.time.Instant instant16 = instant9.plus(0L);
        int int17 = instant7.compareTo((org.joda.time.ReadableInstant) instant16);
        java.util.TimeZone timeZone18 = null;
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forTimeZone(timeZone18);
        org.joda.time.chrono.GJChronology gJChronology20 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone19);
        org.joda.time.DurationField durationField21 = gJChronology20.halfdays();
        org.joda.time.DateTimeField dateTimeField22 = gJChronology20.millisOfDay();
        org.joda.time.DateTimeField dateTimeField23 = gJChronology20.minuteOfDay();
        org.joda.time.DurationField durationField24 = gJChronology20.centuries();
        org.joda.time.DateTimeField dateTimeField25 = gJChronology20.halfdayOfDay();
        java.util.Locale locale26 = java.util.Locale.ITALIAN;
        java.util.Locale locale27 = locale26.stripExtensions();
        java.util.Locale locale28 = java.util.Locale.CANADA;
        java.lang.String str29 = locale26.getDisplayVariant(locale28);
        boolean boolean30 = gJChronology20.equals((java.lang.Object) locale28);
        org.joda.time.DateTime dateTime31 = instant7.toDateTime((org.joda.time.Chronology) gJChronology20);
        java.util.TimeZone timeZone32 = null;
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.forTimeZone(timeZone32);
        org.joda.time.chrono.GJChronology gJChronology34 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone33);
        org.joda.time.DurationField durationField35 = gJChronology34.halfdays();
        org.joda.time.DateTimeField dateTimeField36 = gJChronology34.millisOfDay();
        org.joda.time.DateTimeField dateTimeField37 = gJChronology34.minuteOfDay();
        org.joda.time.DurationField durationField38 = gJChronology34.centuries();
        org.joda.time.DateTimeField dateTimeField39 = gJChronology34.dayOfYear();
        java.lang.String str40 = gJChronology34.toString();
        org.joda.time.DateTimeField dateTimeField41 = gJChronology34.dayOfYear();
        org.joda.time.DateTimeField dateTimeField42 = gJChronology34.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField43 = gJChronology34.clockhourOfDay();
        org.joda.time.DurationField durationField44 = gJChronology34.months();
        org.joda.time.MutableDateTime mutableDateTime45 = dateTime31.toMutableDateTime((org.joda.time.Chronology) gJChronology34);
        java.util.TimeZone timeZone46 = null;
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.forTimeZone(timeZone46);
        org.joda.time.chrono.GJChronology gJChronology48 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone47);
        org.joda.time.DurationField durationField49 = gJChronology48.halfdays();
        org.joda.time.DateTimeField dateTimeField50 = gJChronology48.millisOfDay();
        org.joda.time.DateTimeField dateTimeField51 = gJChronology48.minuteOfDay();
        org.joda.time.DurationField durationField52 = gJChronology48.centuries();
        org.joda.time.DateTimeField dateTimeField53 = gJChronology48.dayOfYear();
        org.joda.time.DateTimeField dateTimeField54 = gJChronology48.weekyearOfCentury();
        int int55 = dateTime31.get(dateTimeField54);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant7 and mutableDateTime45", (instant7.compareTo(mutableDateTime45) == 0) == instant7.equals(mutableDateTime45));
    }

    @Test
    public void test0113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0113");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forTimeZone(timeZone2);
        org.joda.time.chrono.GJChronology gJChronology4 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone3);
        org.joda.time.DateTimeField dateTimeField5 = gJChronology4.millisOfSecond();
        int int6 = instant1.get(dateTimeField5);
        boolean boolean7 = instant1.isEqualNow();
        org.joda.time.tz.NameProvider nameProvider8 = org.joda.time.DateTimeZone.getNameProvider();
        org.joda.time.DateTimeZone.setNameProvider(nameProvider8);
        org.joda.time.DateTimeZone.setNameProvider(nameProvider8);
        boolean boolean11 = instant1.equals((java.lang.Object) nameProvider8);
        org.joda.time.Instant instant13 = new org.joda.time.Instant(52L);
        boolean boolean14 = instant13.isEqualNow();
        java.lang.String str15 = instant13.toString();
        org.joda.time.DateTimeZone dateTimeZone16 = instant13.getZone();
        org.joda.time.DateTime dateTime17 = instant1.toDateTime(dateTimeZone16);
        org.joda.time.Instant instant19 = new org.joda.time.Instant(52L);
        boolean boolean20 = instant19.isEqualNow();
        boolean boolean22 = instant19.isEqual(0L);
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = null;
        boolean boolean24 = instant19.isSupported(dateTimeFieldType23);
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = null;
        boolean boolean26 = instant19.isSupported(dateTimeFieldType25);
        java.util.TimeZone timeZone27 = null;
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forTimeZone(timeZone27);
        org.joda.time.chrono.GJChronology gJChronology29 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone28);
        org.joda.time.DurationField durationField30 = gJChronology29.halfdays();
        org.joda.time.Chronology chronology31 = gJChronology29.withUTC();
        java.lang.String str32 = gJChronology29.toString();
        org.joda.time.DateTimeField dateTimeField33 = gJChronology29.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(1, 10);
        org.joda.time.Chronology chronology37 = gJChronology29.withZone(dateTimeZone36);
        org.joda.time.MutableDateTime mutableDateTime38 = instant19.toMutableDateTime(dateTimeZone36);
        boolean boolean39 = dateTime17.isBefore((org.joda.time.ReadableInstant) instant19);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and mutableDateTime38", (instant1.compareTo(mutableDateTime38) == 0) == instant1.equals(mutableDateTime38));
    }

    @Test
    public void test0114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0114");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField3 = gJChronology2.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.weekyear();
        org.joda.time.DurationField durationField5 = gJChronology2.centuries();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology2.millisOfDay();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology2.minuteOfHour();
        org.joda.time.DurationField durationField8 = gJChronology2.seconds();
        org.joda.time.DurationField durationField9 = gJChronology2.eras();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField9, durationField5, and durationField8", !(durationField9.compareTo(durationField5) == 0) || (Math.signum(durationField9.compareTo(durationField8)) == Math.signum(durationField5.compareTo(durationField8))));
    }

    @Test
    public void test0115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0115");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = gJChronology2.halfdays();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.millisOfDay();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.minuteOfDay();
        org.joda.time.DurationField durationField6 = gJChronology2.centuries();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology2.dayOfYear();
        java.lang.String str8 = gJChronology2.toString();
        org.joda.time.DurationField durationField9 = gJChronology2.years();
        org.joda.time.DurationField durationField10 = gJChronology2.hours();
        org.joda.time.DurationField durationField11 = gJChronology2.days();
        org.joda.time.DurationField durationField12 = gJChronology2.weekyears();
        org.joda.time.DateTimeField dateTimeField13 = gJChronology2.weekyear();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on durationField9 and durationField12", (durationField9.compareTo(durationField12) == 0) == durationField9.equals(durationField12));
    }

    @Test
    public void test0116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0116");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        org.joda.time.Instant instant3 = instant1.withMillis((long) 'u');
        java.util.TimeZone timeZone4 = null;
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forTimeZone(timeZone4);
        org.joda.time.chrono.GJChronology gJChronology6 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone5);
        org.joda.time.DurationField durationField7 = gJChronology6.halfdays();
        long long11 = gJChronology6.add((long) 'a', (-1L), (int) (short) 0);
        boolean boolean13 = gJChronology6.equals((java.lang.Object) 0);
        org.joda.time.DateTimeField dateTimeField14 = gJChronology6.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology6.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField16 = gJChronology6.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField17 = gJChronology6.clockhourOfHalfday();
        org.joda.time.DateTime dateTime18 = instant1.toDateTime((org.joda.time.Chronology) gJChronology6);
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.getDefault();
        int int21 = dateTimeZone19.getOffset((long) (byte) 1);
        long long24 = dateTimeZone19.adjustOffset((-1L), false);
        org.joda.time.MutableDateTime mutableDateTime25 = dateTime18.toMutableDateTime(dateTimeZone19);
        org.joda.time.Instant instant27 = new org.joda.time.Instant(52L);
        boolean boolean28 = instant27.isEqualNow();
        org.joda.time.ReadableDuration readableDuration29 = null;
        org.joda.time.Instant instant30 = instant27.plus(readableDuration29);
        long long31 = instant27.getMillis();
        java.lang.String str32 = instant27.toString();
        org.joda.time.Instant instant33 = instant27.toInstant();
        org.joda.time.ReadableDuration readableDuration34 = null;
        org.joda.time.Instant instant36 = instant27.withDurationAdded(readableDuration34, (int) 'x');
        org.joda.time.Instant instant37 = instant27.toInstant();
        int int38 = dateTime18.compareTo((org.joda.time.ReadableInstant) instant37);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and mutableDateTime25", (instant1.compareTo(mutableDateTime25) == 0) == instant1.equals(mutableDateTime25));
    }

    @Test
    public void test0117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0117");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str3 = dateTimeZone1.getNameKey((long) 100);
        boolean boolean4 = dateTimeZone1.isFixed();
        org.joda.time.chrono.GJChronology gJChronology5 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField6 = gJChronology5.hours();
        java.util.TimeZone timeZone7 = null;
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forTimeZone(timeZone7);
        org.joda.time.chrono.GJChronology gJChronology9 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone8);
        org.joda.time.DurationField durationField10 = gJChronology9.halfdays();
        long long14 = gJChronology9.add((long) 'a', (-1L), (int) (short) 0);
        org.joda.time.DateTimeField dateTimeField15 = gJChronology9.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField16 = gJChronology9.secondOfMinute();
        org.joda.time.Instant instant18 = new org.joda.time.Instant(52L);
        boolean boolean19 = instant18.isEqualNow();
        org.joda.time.ReadableDuration readableDuration20 = null;
        org.joda.time.Instant instant21 = instant18.plus(readableDuration20);
        boolean boolean22 = gJChronology9.equals((java.lang.Object) instant18);
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = null;
        boolean boolean24 = instant18.isSupported(dateTimeFieldType23);
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = null;
        boolean boolean26 = instant18.isSupported(dateTimeFieldType25);
        org.joda.time.DateTimeZone dateTimeZone27 = instant18.getZone();
        long long29 = dateTimeZone27.nextTransition(349200L);
        org.joda.time.Chronology chronology30 = gJChronology5.withZone(dateTimeZone27);
        org.joda.time.DateTimeField dateTimeField31 = gJChronology5.weekyear();
        org.joda.time.DurationField durationField32 = gJChronology5.eras();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField32, durationField6, and durationField10", !(durationField32.compareTo(durationField6) == 0) || (Math.signum(durationField32.compareTo(durationField10)) == Math.signum(durationField6.compareTo(durationField10))));
    }

    @Test
    public void test0118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0118");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = gJChronology2.halfdays();
        long long7 = gJChronology2.add((long) 'a', (-1L), (int) (short) 0);
        org.joda.time.DateTimeField dateTimeField8 = gJChronology2.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField9 = gJChronology2.secondOfMinute();
        org.joda.time.Instant instant11 = new org.joda.time.Instant(52L);
        boolean boolean12 = instant11.isEqualNow();
        org.joda.time.ReadableDuration readableDuration13 = null;
        org.joda.time.Instant instant14 = instant11.plus(readableDuration13);
        boolean boolean15 = gJChronology2.equals((java.lang.Object) instant11);
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = null;
        boolean boolean17 = instant11.isSupported(dateTimeFieldType16);
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = null;
        boolean boolean19 = instant11.isSupported(dateTimeFieldType18);
        org.joda.time.DateTimeZone dateTimeZone20 = instant11.getZone();
        long long22 = dateTimeZone20.nextTransition(349200L);
        java.lang.String str23 = dateTimeZone20.toString();
        org.joda.time.Instant instant24 = org.joda.time.Instant.now();
        org.joda.time.Instant instant27 = instant24.withDurationAdded(306102434400000L, (int) (short) 100);
        java.util.TimeZone timeZone28 = null;
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forTimeZone(timeZone28);
        org.joda.time.chrono.GJChronology gJChronology30 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone29);
        long long34 = dateTimeZone29.convertLocalToUTC((long) (byte) -1, true, 0L);
        boolean boolean36 = dateTimeZone29.equals((java.lang.Object) true);
        long long38 = dateTimeZone29.nextTransition((long) '4');
        java.lang.String str40 = dateTimeZone29.getShortName(432000001L);
        java.util.TimeZone timeZone41 = dateTimeZone29.toTimeZone();
        org.joda.time.DateTime dateTime42 = instant24.toDateTime(dateTimeZone29);
        boolean boolean43 = dateTimeZone20.equals((java.lang.Object) dateTimeZone29);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant24 and dateTime42", (instant24.compareTo(dateTime42) == 0) == instant24.equals(dateTime42));
    }

    @Test
    public void test0119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0119");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        boolean boolean2 = instant1.isEqualNow();
        org.joda.time.ReadableDuration readableDuration3 = null;
        org.joda.time.Instant instant4 = instant1.plus(readableDuration3);
        org.joda.time.Instant instant6 = new org.joda.time.Instant(52L);
        org.joda.time.Instant instant8 = instant6.withMillis((long) 'u');
        boolean boolean9 = instant1.isBefore((org.joda.time.ReadableInstant) instant6);
        org.joda.time.Instant instant10 = instant6.toInstant();
        org.joda.time.Instant instant12 = new org.joda.time.Instant(52L);
        boolean boolean13 = instant12.isEqualNow();
        java.lang.String str14 = instant12.toString();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MutableDateTime mutableDateTime16 = instant12.toMutableDateTime(chronology15);
        org.joda.time.MutableDateTime mutableDateTime17 = instant12.toMutableDateTime();
        java.util.TimeZone timeZone18 = null;
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forTimeZone(timeZone18);
        org.joda.time.chrono.GJChronology gJChronology20 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone19);
        org.joda.time.DateTimeField dateTimeField21 = gJChronology20.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField22 = gJChronology20.weekyear();
        org.joda.time.DurationField durationField23 = gJChronology20.centuries();
        org.joda.time.DateTimeField dateTimeField24 = gJChronology20.millisOfDay();
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        long long28 = gJChronology20.add(readablePeriod25, (long) '4', (int) (byte) -1);
        org.joda.time.DurationField durationField29 = gJChronology20.weekyears();
        org.joda.time.DateTime dateTime30 = instant12.toDateTime((org.joda.time.Chronology) gJChronology20);
        boolean boolean31 = instant10.isAfter((org.joda.time.ReadableInstant) instant12);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and mutableDateTime16", (instant1.compareTo(mutableDateTime16) == 0) == instant1.equals(mutableDateTime16));
    }

    @Test
    public void test0120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0120");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        boolean boolean2 = instant1.isEqualNow();
        java.lang.String str3 = instant1.toString();
        java.lang.String str4 = instant1.toString();
        org.joda.time.Instant instant7 = instant1.withDurationAdded(115200000L, (int) (short) 1);
        boolean boolean8 = instant7.isBeforeNow();
        org.joda.time.Instant instant10 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone11 = null;
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forTimeZone(timeZone11);
        org.joda.time.chrono.GJChronology gJChronology13 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone12);
        org.joda.time.DateTimeField dateTimeField14 = gJChronology13.millisOfSecond();
        int int15 = instant10.get(dateTimeField14);
        boolean boolean16 = instant10.isEqualNow();
        org.joda.time.Instant instant18 = new org.joda.time.Instant(52L);
        boolean boolean19 = instant18.isEqualNow();
        org.joda.time.ReadableDuration readableDuration20 = null;
        org.joda.time.Instant instant21 = instant18.plus(readableDuration20);
        long long22 = instant18.getMillis();
        java.lang.Object obj23 = null;
        boolean boolean24 = instant18.equals(obj23);
        org.joda.time.Instant instant26 = new org.joda.time.Instant(52L);
        boolean boolean27 = instant26.isEqualNow();
        org.joda.time.ReadableDuration readableDuration28 = null;
        org.joda.time.Instant instant29 = instant26.plus(readableDuration28);
        long long30 = instant26.getMillis();
        java.lang.String str31 = instant26.toString();
        org.joda.time.Instant instant32 = instant26.toInstant();
        org.joda.time.ReadableDuration readableDuration33 = null;
        org.joda.time.Instant instant35 = instant26.withDurationAdded(readableDuration33, (int) 'x');
        org.joda.time.Instant instant36 = instant26.toInstant();
        int int37 = instant18.compareTo((org.joda.time.ReadableInstant) instant26);
        boolean boolean38 = instant10.isBefore((org.joda.time.ReadableInstant) instant26);
        java.util.TimeZone timeZone39 = null;
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.forTimeZone(timeZone39);
        org.joda.time.chrono.GJChronology gJChronology41 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone40);
        org.joda.time.DurationField durationField42 = gJChronology41.halfdays();
        long long46 = gJChronology41.add((long) 'a', (-1L), (int) (short) 0);
        org.joda.time.DateTimeField dateTimeField47 = gJChronology41.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField48 = gJChronology41.secondOfMinute();
        org.joda.time.Instant instant50 = new org.joda.time.Instant(52L);
        boolean boolean51 = instant50.isEqualNow();
        org.joda.time.ReadableDuration readableDuration52 = null;
        org.joda.time.Instant instant53 = instant50.plus(readableDuration52);
        boolean boolean54 = gJChronology41.equals((java.lang.Object) instant50);
        org.joda.time.DateTimeFieldType dateTimeFieldType55 = null;
        boolean boolean56 = instant50.isSupported(dateTimeFieldType55);
        org.joda.time.DateTimeFieldType dateTimeFieldType57 = null;
        boolean boolean58 = instant50.isSupported(dateTimeFieldType57);
        java.lang.String str59 = instant50.toString();
        boolean boolean60 = instant10.isAfter((org.joda.time.ReadableInstant) instant50);
        org.joda.time.MutableDateTime mutableDateTime61 = instant50.toMutableDateTimeISO();
        int int62 = instant7.compareTo((org.joda.time.ReadableInstant) mutableDateTime61);
        org.joda.time.Chronology chronology63 = instant7.getChronology();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and mutableDateTime61", (instant1.compareTo(mutableDateTime61) == 0) == instant1.equals(mutableDateTime61));
    }

    @Test
    public void test0121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0121");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        boolean boolean2 = instant1.isEqualNow();
        org.joda.time.ReadableDuration readableDuration3 = null;
        org.joda.time.Instant instant4 = instant1.plus(readableDuration3);
        org.joda.time.Instant instant6 = new org.joda.time.Instant(52L);
        org.joda.time.Instant instant8 = instant6.withMillis((long) 'u');
        boolean boolean9 = instant1.isBefore((org.joda.time.ReadableInstant) instant6);
        org.joda.time.Instant instant10 = instant6.toInstant();
        org.joda.time.MutableDateTime mutableDateTime11 = instant6.toMutableDateTime();
        boolean boolean12 = instant6.isBeforeNow();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and mutableDateTime11", (instant1.compareTo(mutableDateTime11) == 0) == instant1.equals(mutableDateTime11));
    }

    @Test
    public void test0122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0122");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        boolean boolean2 = instant1.isEqualNow();
        java.lang.String str3 = instant1.toString();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.MutableDateTime mutableDateTime5 = instant1.toMutableDateTime(chronology4);
        org.joda.time.MutableDateTime mutableDateTime6 = instant1.toMutableDateTime();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(1, 10);
        org.joda.time.LocalDateTime localDateTime10 = null;
        boolean boolean11 = dateTimeZone9.isLocalDateTimeGap(localDateTime10);
        boolean boolean12 = dateTimeZone9.isFixed();
        java.util.Locale.Category category14 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale15 = java.util.Locale.CANADA;
        java.lang.String str16 = locale15.getISO3Language();
        java.util.Locale.setDefault(category14, locale15);
        java.util.Locale locale20 = new java.util.Locale("cinese (Taiwan)", "DurationField[weekyears]");
        java.util.Set<java.lang.String> strSet21 = locale20.getUnicodeLocaleAttributes();
        java.lang.String str22 = locale15.getDisplayLanguage(locale20);
        java.lang.String str23 = dateTimeZone9.getShortName((long) 10, locale15);
        org.joda.time.MutableDateTime mutableDateTime24 = instant1.toMutableDateTime(dateTimeZone9);
        java.util.TimeZone timeZone25 = null;
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forTimeZone(timeZone25);
        org.joda.time.chrono.GJChronology gJChronology27 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone26);
        org.joda.time.DurationField durationField28 = gJChronology27.halfdays();
        long long32 = gJChronology27.add((long) 'a', (-1L), (int) (short) 0);
        org.joda.time.DateTimeField dateTimeField33 = gJChronology27.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField34 = gJChronology27.secondOfMinute();
        org.joda.time.Instant instant36 = new org.joda.time.Instant(52L);
        boolean boolean37 = instant36.isEqualNow();
        org.joda.time.ReadableDuration readableDuration38 = null;
        org.joda.time.Instant instant39 = instant36.plus(readableDuration38);
        boolean boolean40 = gJChronology27.equals((java.lang.Object) instant36);
        org.joda.time.ReadableDuration readableDuration41 = null;
        org.joda.time.Instant instant43 = instant36.withDurationAdded(readableDuration41, 52);
        org.joda.time.chrono.GJChronology gJChronology44 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone9, (org.joda.time.ReadableInstant) instant43);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and mutableDateTime5", (instant1.compareTo(mutableDateTime5) == 0) == instant1.equals(mutableDateTime5));
    }

    @Test
    public void test0123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0123");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = gJChronology2.halfdays();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.millisOfDay();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.monthOfYear();
        org.joda.time.Chronology chronology6 = gJChronology2.withUTC();
        org.joda.time.Instant instant7 = gJChronology2.getGregorianCutover();
        java.util.TimeZone timeZone8 = null;
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forTimeZone(timeZone8);
        org.joda.time.chrono.GJChronology gJChronology10 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone9);
        org.joda.time.DateTimeField dateTimeField11 = gJChronology10.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField12 = gJChronology10.weekyearOfCentury();
        org.joda.time.Instant instant13 = gJChronology10.getGregorianCutover();
        org.joda.time.Instant instant15 = instant13.withMillis(0L);
        org.joda.time.Instant instant17 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone18 = null;
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forTimeZone(timeZone18);
        org.joda.time.chrono.GJChronology gJChronology20 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone19);
        org.joda.time.DateTimeField dateTimeField21 = gJChronology20.millisOfSecond();
        int int22 = instant17.get(dateTimeField21);
        org.joda.time.Instant instant24 = instant17.plus(0L);
        int int25 = instant15.compareTo((org.joda.time.ReadableInstant) instant24);
        java.util.TimeZone timeZone26 = null;
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forTimeZone(timeZone26);
        org.joda.time.chrono.GJChronology gJChronology28 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone27);
        org.joda.time.DurationField durationField29 = gJChronology28.halfdays();
        org.joda.time.DateTimeField dateTimeField30 = gJChronology28.millisOfDay();
        org.joda.time.DateTimeField dateTimeField31 = gJChronology28.minuteOfDay();
        org.joda.time.DurationField durationField32 = gJChronology28.centuries();
        org.joda.time.DateTimeField dateTimeField33 = gJChronology28.halfdayOfDay();
        java.util.Locale locale34 = java.util.Locale.ITALIAN;
        java.util.Locale locale35 = locale34.stripExtensions();
        java.util.Locale locale36 = java.util.Locale.CANADA;
        java.lang.String str37 = locale34.getDisplayVariant(locale36);
        boolean boolean38 = gJChronology28.equals((java.lang.Object) locale36);
        org.joda.time.DateTime dateTime39 = instant15.toDateTime((org.joda.time.Chronology) gJChronology28);
        boolean boolean40 = instant7.isAfter((org.joda.time.ReadableInstant) dateTime39);
        boolean boolean41 = instant7.isBeforeNow();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant15 and dateTime39", (instant15.compareTo(dateTime39) == 0) == instant15.equals(dateTime39));
    }

    @Test
    public void test0124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0124");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        boolean boolean2 = instant1.isEqualNow();
        java.lang.String str3 = instant1.toString();
        org.joda.time.Instant instant5 = new org.joda.time.Instant(52L);
        boolean boolean6 = instant5.isEqualNow();
        java.lang.String str7 = instant5.toString();
        java.lang.String str8 = instant5.toString();
        org.joda.time.Instant instant11 = instant5.withDurationAdded(115200000L, (int) (short) 1);
        int int12 = instant1.compareTo((org.joda.time.ReadableInstant) instant5);
        org.joda.time.MutableDateTime mutableDateTime13 = instant1.toMutableDateTimeISO();
        java.util.TimeZone timeZone14 = null;
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forTimeZone(timeZone14);
        org.joda.time.chrono.GJChronology gJChronology16 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone15);
        org.joda.time.DurationField durationField17 = gJChronology16.halfdays();
        long long21 = gJChronology16.add(0L, (long) (short) -1, (int) '4');
        org.joda.time.DateTimeField dateTimeField22 = gJChronology16.hourOfDay();
        org.joda.time.MutableDateTime mutableDateTime23 = instant1.toMutableDateTime((org.joda.time.Chronology) gJChronology16);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant5 and mutableDateTime13", (instant5.compareTo(mutableDateTime13) == 0) == instant5.equals(mutableDateTime13));
    }

    @Test
    public void test0125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0125");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        boolean boolean2 = instant1.isEqualNow();
        java.lang.String str3 = instant1.toString();
        java.util.TimeZone timeZone4 = null;
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forTimeZone(timeZone4);
        org.joda.time.chrono.GJChronology gJChronology6 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone5);
        java.util.Locale locale8 = new java.util.Locale("hi!");
        java.lang.String str9 = locale8.getCountry();
        java.util.Locale locale10 = java.util.Locale.getDefault();
        java.lang.String str11 = locale10.getDisplayName();
        java.lang.String str12 = locale8.getDisplayScript(locale10);
        boolean boolean13 = dateTimeZone5.equals((java.lang.Object) locale10);
        int int15 = dateTimeZone5.getOffsetFromLocal((long) (short) 10);
        java.util.TimeZone timeZone16 = null;
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forTimeZone(timeZone16);
        org.joda.time.chrono.GJChronology gJChronology18 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone17);
        org.joda.time.DateTimeField dateTimeField19 = gJChronology18.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField20 = gJChronology18.weekyearOfCentury();
        org.joda.time.Instant instant21 = gJChronology18.getGregorianCutover();
        org.joda.time.Instant instant23 = instant21.withMillis(0L);
        org.joda.time.Instant instant25 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone26 = null;
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forTimeZone(timeZone26);
        org.joda.time.chrono.GJChronology gJChronology28 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone27);
        org.joda.time.DateTimeField dateTimeField29 = gJChronology28.millisOfSecond();
        int int30 = instant25.get(dateTimeField29);
        org.joda.time.Instant instant32 = instant25.plus(0L);
        int int33 = instant23.compareTo((org.joda.time.ReadableInstant) instant32);
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = null;
        boolean boolean35 = instant32.isSupported(dateTimeFieldType34);
        int int36 = dateTimeZone5.getOffset((org.joda.time.ReadableInstant) instant32);
        boolean boolean37 = instant1.isAfter((org.joda.time.ReadableInstant) instant32);
        org.joda.time.Instant instant39 = instant32.withMillis((long) 10);
        org.joda.time.DateTime dateTime40 = instant32.toDateTimeISO();
        org.joda.time.Instant instant42 = new org.joda.time.Instant(52L);
        boolean boolean43 = instant42.isEqualNow();
        org.joda.time.ReadableDuration readableDuration44 = null;
        org.joda.time.Instant instant45 = instant42.plus(readableDuration44);
        boolean boolean47 = instant45.equals((java.lang.Object) ' ');
        org.joda.time.DateTimeZone dateTimeZone50 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(1, 10);
        java.util.TimeZone timeZone51 = null;
        org.joda.time.DateTimeZone dateTimeZone52 = org.joda.time.DateTimeZone.forTimeZone(timeZone51);
        long long54 = dateTimeZone50.getMillisKeepLocal(dateTimeZone52, 4320000000L);
        boolean boolean55 = instant45.equals((java.lang.Object) 4320000000L);
        org.joda.time.Instant instant57 = instant45.withMillis(10L);
        java.util.TimeZone timeZone58 = null;
        org.joda.time.DateTimeZone dateTimeZone59 = org.joda.time.DateTimeZone.forTimeZone(timeZone58);
        org.joda.time.chrono.GJChronology gJChronology60 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone59);
        long long64 = dateTimeZone59.convertLocalToUTC((long) (byte) -1, true, 0L);
        boolean boolean66 = dateTimeZone59.equals((java.lang.Object) true);
        org.joda.time.chrono.GJChronology gJChronology67 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone59);
        org.joda.time.DateTimeField dateTimeField68 = gJChronology67.weekyear();
        org.joda.time.DateTimeField dateTimeField69 = gJChronology67.era();
        int int70 = instant57.get(dateTimeField69);
        int int71 = instant32.compareTo((org.joda.time.ReadableInstant) instant57);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and dateTime40", (instant1.compareTo(dateTime40) == 0) == instant1.equals(dateTime40));
    }

    @Test
    public void test0126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0126");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        boolean boolean2 = instant1.isEqualNow();
        boolean boolean4 = instant1.isEqual(0L);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = null;
        boolean boolean6 = instant1.isSupported(dateTimeFieldType5);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = null;
        boolean boolean8 = instant1.isSupported(dateTimeFieldType7);
        java.util.TimeZone timeZone9 = null;
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forTimeZone(timeZone9);
        org.joda.time.chrono.GJChronology gJChronology11 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone10);
        org.joda.time.DurationField durationField12 = gJChronology11.halfdays();
        org.joda.time.Chronology chronology13 = gJChronology11.withUTC();
        java.lang.String str14 = gJChronology11.toString();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology11.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(1, 10);
        org.joda.time.Chronology chronology19 = gJChronology11.withZone(dateTimeZone18);
        org.joda.time.MutableDateTime mutableDateTime20 = instant1.toMutableDateTime(dateTimeZone18);
        org.joda.time.ReadableDuration readableDuration21 = null;
        org.joda.time.Instant instant23 = instant1.withDurationAdded(readableDuration21, 97);
        org.joda.time.Instant instant25 = new org.joda.time.Instant((-220870497598236L));
        boolean boolean26 = instant1.isEqual((org.joda.time.ReadableInstant) instant25);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime20 and instant1", (mutableDateTime20.compareTo(instant1) == 0) == mutableDateTime20.equals(instant1));
    }

    @Test
    public void test0127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0127");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField3 = gJChronology2.era();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.centuryOfEra();
        org.joda.time.DurationField durationField5 = gJChronology2.hours();
        org.joda.time.DurationField durationField6 = gJChronology2.eras();
        org.joda.time.DurationField durationField7 = gJChronology2.hours();
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField7 and durationField6", Math.signum(durationField7.compareTo(durationField6)) == -Math.signum(durationField6.compareTo(durationField7)));
    }

    @Test
    public void test0128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0128");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forTimeZone(timeZone2);
        org.joda.time.chrono.GJChronology gJChronology4 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone3);
        org.joda.time.DateTimeField dateTimeField5 = gJChronology4.millisOfSecond();
        int int6 = instant1.get(dateTimeField5);
        org.joda.time.Instant instant8 = instant1.plus(0L);
        long long9 = instant8.getMillis();
        java.util.TimeZone timeZone10 = null;
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forTimeZone(timeZone10);
        org.joda.time.chrono.GJChronology gJChronology12 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone11);
        org.joda.time.DurationField durationField13 = gJChronology12.halfdays();
        long long17 = gJChronology12.add((long) 'a', (-1L), (int) (short) 0);
        long long21 = gJChronology12.add((long) (byte) 0, (long) '4', 100);
        org.joda.time.DurationField durationField22 = gJChronology12.years();
        org.joda.time.Instant instant23 = gJChronology12.getGregorianCutover();
        org.joda.time.DateTimeField dateTimeField24 = gJChronology12.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime25 = instant8.toMutableDateTime((org.joda.time.Chronology) gJChronology12);
        org.joda.time.ReadablePeriod readablePeriod26 = null;
        long long29 = gJChronology12.add(readablePeriod26, (long) 4200000, 7816188);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and mutableDateTime25", (instant1.compareTo(mutableDateTime25) == 0) == instant1.equals(mutableDateTime25));
    }

    @Test
    public void test0129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0129");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        boolean boolean2 = instant1.isEqualNow();
        java.lang.String str3 = instant1.toString();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.MutableDateTime mutableDateTime5 = instant1.toMutableDateTime(chronology4);
        org.joda.time.MutableDateTime mutableDateTime6 = instant1.toMutableDateTime();
        org.joda.time.MutableDateTime mutableDateTime7 = instant1.toMutableDateTime();
        org.joda.time.Instant instant9 = new org.joda.time.Instant(52L);
        boolean boolean10 = instant9.isEqualNow();
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.Instant instant12 = instant9.plus(readableDuration11);
        long long13 = instant9.getMillis();
        java.lang.String str14 = instant9.toString();
        org.joda.time.Instant instant15 = instant9.toInstant();
        org.joda.time.ReadableDuration readableDuration16 = null;
        org.joda.time.Instant instant18 = instant9.withDurationAdded(readableDuration16, (int) 'x');
        org.joda.time.DateTimeZone dateTimeZone19 = instant9.getZone();
        org.joda.time.Instant instant21 = new org.joda.time.Instant(52L);
        boolean boolean22 = instant21.isEqualNow();
        java.lang.String str23 = instant21.toString();
        java.util.TimeZone timeZone24 = null;
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forTimeZone(timeZone24);
        org.joda.time.chrono.GJChronology gJChronology26 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone25);
        java.util.Locale locale28 = new java.util.Locale("hi!");
        java.lang.String str29 = locale28.getCountry();
        java.util.Locale locale30 = java.util.Locale.getDefault();
        java.lang.String str31 = locale30.getDisplayName();
        java.lang.String str32 = locale28.getDisplayScript(locale30);
        boolean boolean33 = dateTimeZone25.equals((java.lang.Object) locale30);
        int int35 = dateTimeZone25.getOffsetFromLocal((long) (short) 10);
        java.util.TimeZone timeZone36 = null;
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.forTimeZone(timeZone36);
        org.joda.time.chrono.GJChronology gJChronology38 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone37);
        org.joda.time.DateTimeField dateTimeField39 = gJChronology38.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField40 = gJChronology38.weekyearOfCentury();
        org.joda.time.Instant instant41 = gJChronology38.getGregorianCutover();
        org.joda.time.Instant instant43 = instant41.withMillis(0L);
        org.joda.time.Instant instant45 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone46 = null;
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.forTimeZone(timeZone46);
        org.joda.time.chrono.GJChronology gJChronology48 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone47);
        org.joda.time.DateTimeField dateTimeField49 = gJChronology48.millisOfSecond();
        int int50 = instant45.get(dateTimeField49);
        org.joda.time.Instant instant52 = instant45.plus(0L);
        int int53 = instant43.compareTo((org.joda.time.ReadableInstant) instant52);
        org.joda.time.DateTimeFieldType dateTimeFieldType54 = null;
        boolean boolean55 = instant52.isSupported(dateTimeFieldType54);
        int int56 = dateTimeZone25.getOffset((org.joda.time.ReadableInstant) instant52);
        boolean boolean57 = instant21.isAfter((org.joda.time.ReadableInstant) instant52);
        org.joda.time.Instant instant59 = instant52.withMillis((long) 10);
        boolean boolean60 = instant9.isEqual((org.joda.time.ReadableInstant) instant59);
        boolean boolean61 = mutableDateTime7.isEqual((org.joda.time.ReadableInstant) instant9);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and mutableDateTime5", (instant1.compareTo(mutableDateTime5) == 0) == instant1.equals(mutableDateTime5));
    }

    @Test
    public void test0130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0130");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = gJChronology2.halfdays();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.millisOfDay();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology2.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone7 = gJChronology2.getZone();
        java.util.TimeZone timeZone8 = null;
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forTimeZone(timeZone8);
        org.joda.time.chrono.GJChronology gJChronology10 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone9);
        org.joda.time.DurationField durationField11 = gJChronology10.halfdays();
        java.util.TimeZone timeZone12 = null;
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forTimeZone(timeZone12);
        org.joda.time.chrono.GJChronology gJChronology14 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone13);
        long long18 = dateTimeZone13.convertLocalToUTC((long) (byte) -1, true, 0L);
        boolean boolean20 = dateTimeZone13.equals((java.lang.Object) true);
        org.joda.time.Chronology chronology21 = gJChronology10.withZone(dateTimeZone13);
        org.joda.time.LocalDateTime localDateTime22 = null;
        boolean boolean23 = dateTimeZone13.isLocalDateTimeGap(localDateTime22);
        boolean boolean24 = dateTimeZone13.isFixed();
        org.joda.time.LocalDateTime localDateTime25 = null;
        boolean boolean26 = dateTimeZone13.isLocalDateTimeGap(localDateTime25);
        long long28 = dateTimeZone7.getMillisKeepLocal(dateTimeZone13, (long) 1431201);
        java.util.TimeZone timeZone29 = null;
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forTimeZone(timeZone29);
        org.joda.time.chrono.GJChronology gJChronology31 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone30);
        org.joda.time.DateTimeField dateTimeField32 = gJChronology31.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField33 = gJChronology31.weekyear();
        org.joda.time.DurationField durationField34 = gJChronology31.centuries();
        org.joda.time.DateTimeField dateTimeField35 = gJChronology31.halfdayOfDay();
        int int36 = gJChronology31.getMinimumDaysInFirstWeek();
        org.joda.time.DurationField durationField37 = gJChronology31.eras();
        boolean boolean38 = dateTimeZone7.equals((java.lang.Object) durationField37);
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField37, durationField3, and durationField34", !(durationField37.compareTo(durationField3) == 0) || (Math.signum(durationField37.compareTo(durationField34)) == Math.signum(durationField3.compareTo(durationField34))));
    }

    @Test
    public void test0131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0131");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = gJChronology2.halfdays();
        long long7 = gJChronology2.add((long) 'a', (-1L), (int) (short) 0);
        long long11 = gJChronology2.add((long) (byte) 0, (long) '4', 100);
        org.joda.time.DateTimeField dateTimeField12 = gJChronology2.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField13 = gJChronology2.year();
        org.joda.time.DurationField durationField14 = gJChronology2.centuries();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology2.dayOfMonth();
        org.joda.time.DurationField durationField16 = gJChronology2.eras();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField16, durationField3, and durationField14", !(durationField16.compareTo(durationField3) == 0) || (Math.signum(durationField16.compareTo(durationField14)) == Math.signum(durationField3.compareTo(durationField14))));
    }

    @Test
    public void test0132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0132");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = gJChronology2.halfdays();
        long long7 = gJChronology2.add((long) 'a', (-1L), (int) (short) 0);
        org.joda.time.DateTimeField dateTimeField8 = gJChronology2.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField9 = gJChronology2.secondOfMinute();
        org.joda.time.Instant instant11 = new org.joda.time.Instant(52L);
        boolean boolean12 = instant11.isEqualNow();
        org.joda.time.ReadableDuration readableDuration13 = null;
        org.joda.time.Instant instant14 = instant11.plus(readableDuration13);
        boolean boolean15 = gJChronology2.equals((java.lang.Object) instant11);
        java.util.TimeZone timeZone16 = null;
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forTimeZone(timeZone16);
        org.joda.time.chrono.GJChronology gJChronology18 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone17);
        org.joda.time.DurationField durationField19 = gJChronology18.halfdays();
        org.joda.time.DateTimeField dateTimeField20 = gJChronology18.millisOfDay();
        org.joda.time.DateTimeField dateTimeField21 = gJChronology18.minuteOfDay();
        org.joda.time.DurationField durationField22 = gJChronology18.centuries();
        org.joda.time.DateTimeField dateTimeField23 = gJChronology18.dayOfYear();
        java.lang.String str24 = gJChronology18.toString();
        org.joda.time.DateTimeField dateTimeField25 = gJChronology18.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone26 = gJChronology18.getZone();
        org.joda.time.DateTime dateTime27 = instant11.toDateTime((org.joda.time.Chronology) gJChronology18);
        org.joda.time.DurationField durationField28 = gJChronology18.seconds();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant11 and dateTime27", (instant11.compareTo(dateTime27) == 0) == instant11.equals(dateTime27));
    }

    @Test
    public void test0133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0133");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        boolean boolean2 = instant1.isEqualNow();
        java.lang.String str3 = instant1.toString();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.MutableDateTime mutableDateTime5 = instant1.toMutableDateTime(chronology4);
        org.joda.time.MutableDateTime mutableDateTime6 = instant1.toMutableDateTime();
        java.util.TimeZone timeZone7 = null;
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forTimeZone(timeZone7);
        org.joda.time.chrono.GJChronology gJChronology9 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone8);
        org.joda.time.DateTimeField dateTimeField10 = gJChronology9.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField11 = gJChronology9.weekyear();
        org.joda.time.DurationField durationField12 = gJChronology9.centuries();
        org.joda.time.DateTimeField dateTimeField13 = gJChronology9.millisOfDay();
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        long long17 = gJChronology9.add(readablePeriod14, (long) '4', (int) (byte) -1);
        org.joda.time.DurationField durationField18 = gJChronology9.weekyears();
        org.joda.time.DateTime dateTime19 = instant1.toDateTime((org.joda.time.Chronology) gJChronology9);
        org.joda.time.DurationField durationField20 = gJChronology9.minutes();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and mutableDateTime5", (instant1.compareTo(mutableDateTime5) == 0) == instant1.equals(mutableDateTime5));
    }

    @Test
    public void test0134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0134");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        int int2 = dateTimeZone0.getOffset((long) (byte) 1);
        long long5 = dateTimeZone0.adjustOffset((-1L), false);
        org.joda.time.Instant instant7 = new org.joda.time.Instant(52L);
        boolean boolean8 = instant7.isEqualNow();
        java.lang.String str9 = instant7.toString();
        java.lang.String str10 = instant7.toString();
        org.joda.time.Instant instant13 = instant7.withDurationAdded(115200000L, (int) (short) 1);
        boolean boolean14 = instant13.isBeforeNow();
        org.joda.time.Instant instant16 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone17 = null;
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forTimeZone(timeZone17);
        org.joda.time.chrono.GJChronology gJChronology19 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone18);
        org.joda.time.DateTimeField dateTimeField20 = gJChronology19.millisOfSecond();
        int int21 = instant16.get(dateTimeField20);
        boolean boolean22 = instant16.isEqualNow();
        org.joda.time.Instant instant24 = new org.joda.time.Instant(52L);
        boolean boolean25 = instant24.isEqualNow();
        org.joda.time.ReadableDuration readableDuration26 = null;
        org.joda.time.Instant instant27 = instant24.plus(readableDuration26);
        long long28 = instant24.getMillis();
        java.lang.Object obj29 = null;
        boolean boolean30 = instant24.equals(obj29);
        org.joda.time.Instant instant32 = new org.joda.time.Instant(52L);
        boolean boolean33 = instant32.isEqualNow();
        org.joda.time.ReadableDuration readableDuration34 = null;
        org.joda.time.Instant instant35 = instant32.plus(readableDuration34);
        long long36 = instant32.getMillis();
        java.lang.String str37 = instant32.toString();
        org.joda.time.Instant instant38 = instant32.toInstant();
        org.joda.time.ReadableDuration readableDuration39 = null;
        org.joda.time.Instant instant41 = instant32.withDurationAdded(readableDuration39, (int) 'x');
        org.joda.time.Instant instant42 = instant32.toInstant();
        int int43 = instant24.compareTo((org.joda.time.ReadableInstant) instant32);
        boolean boolean44 = instant16.isBefore((org.joda.time.ReadableInstant) instant32);
        java.util.TimeZone timeZone45 = null;
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.forTimeZone(timeZone45);
        org.joda.time.chrono.GJChronology gJChronology47 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone46);
        org.joda.time.DurationField durationField48 = gJChronology47.halfdays();
        long long52 = gJChronology47.add((long) 'a', (-1L), (int) (short) 0);
        org.joda.time.DateTimeField dateTimeField53 = gJChronology47.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField54 = gJChronology47.secondOfMinute();
        org.joda.time.Instant instant56 = new org.joda.time.Instant(52L);
        boolean boolean57 = instant56.isEqualNow();
        org.joda.time.ReadableDuration readableDuration58 = null;
        org.joda.time.Instant instant59 = instant56.plus(readableDuration58);
        boolean boolean60 = gJChronology47.equals((java.lang.Object) instant56);
        org.joda.time.DateTimeFieldType dateTimeFieldType61 = null;
        boolean boolean62 = instant56.isSupported(dateTimeFieldType61);
        org.joda.time.DateTimeFieldType dateTimeFieldType63 = null;
        boolean boolean64 = instant56.isSupported(dateTimeFieldType63);
        java.lang.String str65 = instant56.toString();
        boolean boolean66 = instant16.isAfter((org.joda.time.ReadableInstant) instant56);
        org.joda.time.MutableDateTime mutableDateTime67 = instant56.toMutableDateTimeISO();
        int int68 = instant13.compareTo((org.joda.time.ReadableInstant) mutableDateTime67);
        org.joda.time.chrono.GJChronology gJChronology69 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, (org.joda.time.ReadableInstant) mutableDateTime67);
        org.joda.time.DateTimeField dateTimeField70 = gJChronology69.millisOfSecond();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant7 and mutableDateTime67", (instant7.compareTo(mutableDateTime67) == 0) == instant7.equals(mutableDateTime67));
    }

    @Test
    public void test0135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0135");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forTimeZone(timeZone2);
        org.joda.time.chrono.GJChronology gJChronology4 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone3);
        org.joda.time.DateTimeField dateTimeField5 = gJChronology4.millisOfSecond();
        int int6 = instant1.get(dateTimeField5);
        org.joda.time.Instant instant8 = instant1.plus(0L);
        java.util.TimeZone timeZone9 = null;
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forTimeZone(timeZone9);
        org.joda.time.chrono.GJChronology gJChronology11 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone10);
        org.joda.time.DurationField durationField12 = gJChronology11.halfdays();
        org.joda.time.Chronology chronology13 = gJChronology11.withUTC();
        java.lang.String str14 = gJChronology11.toString();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology11.hourOfHalfday();
        int int16 = instant1.get(dateTimeField15);
        org.joda.time.Instant instant18 = new org.joda.time.Instant(52L);
        boolean boolean19 = instant18.isEqualNow();
        java.lang.String str20 = instant18.toString();
        org.joda.time.Instant instant22 = new org.joda.time.Instant(52L);
        boolean boolean23 = instant22.isEqualNow();
        java.lang.String str24 = instant22.toString();
        java.lang.String str25 = instant22.toString();
        org.joda.time.Instant instant28 = instant22.withDurationAdded(115200000L, (int) (short) 1);
        int int29 = instant18.compareTo((org.joda.time.ReadableInstant) instant22);
        org.joda.time.Instant instant31 = new org.joda.time.Instant(52L);
        boolean boolean32 = instant31.isEqualNow();
        org.joda.time.ReadableDuration readableDuration33 = null;
        org.joda.time.Instant instant34 = instant31.plus(readableDuration33);
        boolean boolean36 = instant34.equals((java.lang.Object) ' ');
        boolean boolean37 = instant22.isAfter((org.joda.time.ReadableInstant) instant34);
        int int38 = instant1.compareTo((org.joda.time.ReadableInstant) instant22);
        org.joda.time.DateTime dateTime39 = instant1.toDateTimeISO();
        org.joda.time.Instant instant42 = instant1.withDurationAdded(10412712236785L, 104);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and dateTime39", (instant1.compareTo(dateTime39) == 0) == instant1.equals(dateTime39));
    }

    @Test
    public void test0136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0136");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField3 = gJChronology2.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.weekyear();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.halfdayOfDay();
        org.joda.time.DurationField durationField6 = gJChronology2.years();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology2.dayOfWeek();
        org.joda.time.DurationField durationField8 = gJChronology2.eras();
        org.joda.time.DateTimeZone dateTimeZone9 = gJChronology2.getZone();
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField6 and durationField8", Math.signum(durationField6.compareTo(durationField8)) == -Math.signum(durationField8.compareTo(durationField6)));
    }

    @Test
    public void test0137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0137");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = gJChronology2.halfdays();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.millisOfDay();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.minuteOfDay();
        org.joda.time.DurationField durationField6 = gJChronology2.centuries();
        int int7 = gJChronology2.getMinimumDaysInFirstWeek();
        org.joda.time.DurationField durationField8 = gJChronology2.minutes();
        org.joda.time.DateTimeField dateTimeField9 = gJChronology2.minuteOfHour();
        org.joda.time.DurationField durationField10 = gJChronology2.hours();
        org.joda.time.DateTimeField dateTimeField11 = gJChronology2.yearOfEra();
        org.joda.time.DurationField durationField12 = gJChronology2.eras();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField12, durationField3, and durationField6", !(durationField12.compareTo(durationField3) == 0) || (Math.signum(durationField12.compareTo(durationField6)) == Math.signum(durationField3.compareTo(durationField6))));
    }

    @Test
    public void test0138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0138");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField3 = gJChronology2.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.weekyearOfCentury();
        org.joda.time.Instant instant5 = gJChronology2.getGregorianCutover();
        org.joda.time.Instant instant7 = instant5.withMillis(0L);
        org.joda.time.Instant instant9 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone10 = null;
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forTimeZone(timeZone10);
        org.joda.time.chrono.GJChronology gJChronology12 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone11);
        org.joda.time.DateTimeField dateTimeField13 = gJChronology12.millisOfSecond();
        int int14 = instant9.get(dateTimeField13);
        org.joda.time.Instant instant16 = instant9.plus(0L);
        int int17 = instant7.compareTo((org.joda.time.ReadableInstant) instant16);
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = null;
        boolean boolean19 = instant16.isSupported(dateTimeFieldType18);
        org.joda.time.Instant instant21 = new org.joda.time.Instant(52L);
        boolean boolean22 = instant21.isEqualNow();
        org.joda.time.ReadableDuration readableDuration23 = null;
        org.joda.time.Instant instant24 = instant21.plus(readableDuration23);
        int int25 = instant16.compareTo((org.joda.time.ReadableInstant) instant21);
        org.joda.time.Chronology chronology26 = instant16.getChronology();
        org.joda.time.Instant instant28 = new org.joda.time.Instant(52L);
        boolean boolean29 = instant28.isEqualNow();
        java.lang.String str30 = instant28.toString();
        org.joda.time.Instant instant32 = new org.joda.time.Instant(52L);
        boolean boolean33 = instant32.isEqualNow();
        java.lang.String str34 = instant32.toString();
        java.lang.String str35 = instant32.toString();
        org.joda.time.Instant instant38 = instant32.withDurationAdded(115200000L, (int) (short) 1);
        int int39 = instant28.compareTo((org.joda.time.ReadableInstant) instant32);
        org.joda.time.Instant instant41 = new org.joda.time.Instant(52L);
        boolean boolean42 = instant41.isEqualNow();
        org.joda.time.ReadableDuration readableDuration43 = null;
        org.joda.time.Instant instant44 = instant41.plus(readableDuration43);
        boolean boolean46 = instant44.equals((java.lang.Object) ' ');
        boolean boolean47 = instant32.isAfter((org.joda.time.ReadableInstant) instant44);
        org.joda.time.DateTime dateTime48 = instant32.toDateTime();
        boolean boolean49 = instant16.isBefore((org.joda.time.ReadableInstant) dateTime48);
        org.joda.time.DateTime dateTime50 = instant16.toDateTime();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant16 and dateTime48", (instant16.compareTo(dateTime48) == 0) == instant16.equals(dateTime48));
    }

    @Test
    public void test0139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0139");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        boolean boolean2 = instant1.isEqualNow();
        java.lang.String str3 = instant1.toString();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.MutableDateTime mutableDateTime5 = instant1.toMutableDateTime(chronology4);
        org.joda.time.MutableDateTime mutableDateTime6 = instant1.toMutableDateTime();
        java.util.TimeZone timeZone7 = null;
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forTimeZone(timeZone7);
        org.joda.time.chrono.GJChronology gJChronology9 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone8);
        org.joda.time.DateTimeField dateTimeField10 = gJChronology9.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField11 = gJChronology9.weekyear();
        org.joda.time.DateTimeField dateTimeField12 = gJChronology9.dayOfMonth();
        org.joda.time.MutableDateTime mutableDateTime13 = instant1.toMutableDateTime((org.joda.time.Chronology) gJChronology9);
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = null;
        boolean boolean15 = mutableDateTime13.isSupported(dateTimeFieldType14);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and mutableDateTime5", (instant1.compareTo(mutableDateTime5) == 0) == instant1.equals(mutableDateTime5));
    }

    @Test
    public void test0140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0140");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        boolean boolean2 = instant1.isEqualNow();
        java.lang.String str3 = instant1.toString();
        java.util.TimeZone timeZone4 = null;
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forTimeZone(timeZone4);
        org.joda.time.chrono.GJChronology gJChronology6 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone5);
        java.util.Locale locale8 = new java.util.Locale("hi!");
        java.lang.String str9 = locale8.getCountry();
        java.util.Locale locale10 = java.util.Locale.getDefault();
        java.lang.String str11 = locale10.getDisplayName();
        java.lang.String str12 = locale8.getDisplayScript(locale10);
        boolean boolean13 = dateTimeZone5.equals((java.lang.Object) locale10);
        int int15 = dateTimeZone5.getOffsetFromLocal((long) (short) 10);
        java.util.TimeZone timeZone16 = null;
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forTimeZone(timeZone16);
        org.joda.time.chrono.GJChronology gJChronology18 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone17);
        org.joda.time.DateTimeField dateTimeField19 = gJChronology18.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField20 = gJChronology18.weekyearOfCentury();
        org.joda.time.Instant instant21 = gJChronology18.getGregorianCutover();
        org.joda.time.Instant instant23 = instant21.withMillis(0L);
        org.joda.time.Instant instant25 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone26 = null;
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forTimeZone(timeZone26);
        org.joda.time.chrono.GJChronology gJChronology28 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone27);
        org.joda.time.DateTimeField dateTimeField29 = gJChronology28.millisOfSecond();
        int int30 = instant25.get(dateTimeField29);
        org.joda.time.Instant instant32 = instant25.plus(0L);
        int int33 = instant23.compareTo((org.joda.time.ReadableInstant) instant32);
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = null;
        boolean boolean35 = instant32.isSupported(dateTimeFieldType34);
        int int36 = dateTimeZone5.getOffset((org.joda.time.ReadableInstant) instant32);
        boolean boolean37 = instant1.isAfter((org.joda.time.ReadableInstant) instant32);
        org.joda.time.ReadableDuration readableDuration38 = null;
        org.joda.time.Instant instant39 = instant1.minus(readableDuration38);
        org.joda.time.Instant instant40 = instant39.toInstant();
        java.util.Date date41 = instant39.toDate();
        java.util.TimeZone timeZone42 = null;
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.forTimeZone(timeZone42);
        org.joda.time.chrono.GJChronology gJChronology44 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone43);
        org.joda.time.DurationField durationField45 = gJChronology44.halfdays();
        long long49 = gJChronology44.add((long) 'a', (-1L), (int) (short) 0);
        boolean boolean51 = gJChronology44.equals((java.lang.Object) 0);
        org.joda.time.DateTimeField dateTimeField52 = gJChronology44.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField53 = gJChronology44.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField54 = gJChronology44.clockhourOfDay();
        long long59 = gJChronology44.getDateTimeMillis(10, (int) (short) 10, 4, (int) (byte) 1);
        org.joda.time.DateTimeField dateTimeField60 = gJChronology44.millisOfDay();
        java.lang.String str61 = gJChronology44.toString();
        org.joda.time.DateTimeField dateTimeField62 = gJChronology44.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField63 = gJChronology44.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField64 = gJChronology44.halfdayOfDay();
        java.util.TimeZone timeZone65 = null;
        org.joda.time.DateTimeZone dateTimeZone66 = org.joda.time.DateTimeZone.forTimeZone(timeZone65);
        org.joda.time.chrono.GJChronology gJChronology67 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone66);
        org.joda.time.DurationField durationField68 = gJChronology67.halfdays();
        long long72 = gJChronology67.add((long) 'a', (-1L), (int) (short) 0);
        long long76 = gJChronology67.add((long) (byte) 0, (long) '4', 100);
        org.joda.time.DurationField durationField77 = gJChronology67.years();
        org.joda.time.DateTimeField dateTimeField78 = gJChronology67.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone79 = gJChronology67.getZone();
        org.joda.time.Chronology chronology80 = gJChronology44.withZone(dateTimeZone79);
        org.joda.time.MutableDateTime mutableDateTime81 = instant39.toMutableDateTime(dateTimeZone79);
        org.joda.time.DateTimeFieldType dateTimeFieldType82 = null;
        boolean boolean83 = instant39.isSupported(dateTimeFieldType82);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant39 and mutableDateTime81", (instant39.compareTo(mutableDateTime81) == 0) == instant39.equals(mutableDateTime81));
    }

    @Test
    public void test0141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0141");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        boolean boolean2 = instant1.isEqualNow();
        java.lang.String str3 = instant1.toString();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.MutableDateTime mutableDateTime5 = instant1.toMutableDateTime(chronology4);
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.Instant instant7 = instant1.minus(readableDuration6);
        org.joda.time.Instant instant10 = instant7.withDurationAdded((long) (short) 0, (int) (short) 0);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant10 and mutableDateTime5", (instant10.compareTo(mutableDateTime5) == 0) == instant10.equals(mutableDateTime5));
    }

    @Test
    public void test0142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0142");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        boolean boolean2 = instant1.isEqualNow();
        org.joda.time.ReadableDuration readableDuration3 = null;
        org.joda.time.Instant instant4 = instant1.plus(readableDuration3);
        long long5 = instant1.getMillis();
        java.lang.String str6 = instant1.toString();
        boolean boolean8 = instant1.isAfter((long) (-1));
        java.lang.Object obj9 = null;
        boolean boolean10 = instant1.equals(obj9);
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.Instant instant12 = instant1.minus(readableDuration11);
        org.joda.time.DateTime dateTime13 = instant12.toDateTime();
        org.joda.time.Instant instant16 = instant12.withDurationAdded(4492800000L, (int) (short) -1);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant12 and dateTime13", (instant12.compareTo(dateTime13) == 0) == instant12.equals(dateTime13));
    }

    @Test
    public void test0143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0143");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        boolean boolean2 = instant1.isEqualNow();
        java.lang.String str3 = instant1.toString();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.MutableDateTime mutableDateTime5 = instant1.toMutableDateTime(chronology4);
        org.joda.time.MutableDateTime mutableDateTime6 = instant1.toMutableDateTime();
        java.util.TimeZone timeZone7 = null;
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forTimeZone(timeZone7);
        org.joda.time.chrono.GJChronology gJChronology9 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone8);
        org.joda.time.DateTimeField dateTimeField10 = gJChronology9.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField11 = gJChronology9.weekyear();
        org.joda.time.DateTimeField dateTimeField12 = gJChronology9.dayOfMonth();
        org.joda.time.MutableDateTime mutableDateTime13 = instant1.toMutableDateTime((org.joda.time.Chronology) gJChronology9);
        org.joda.time.DateTimeField dateTimeField14 = gJChronology9.yearOfEra();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and mutableDateTime5", (instant1.compareTo(mutableDateTime5) == 0) == instant1.equals(mutableDateTime5));
    }

    @Test
    public void test0144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0144");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        boolean boolean2 = instant1.isEqualNow();
        org.joda.time.ReadableDuration readableDuration3 = null;
        org.joda.time.Instant instant4 = instant1.plus(readableDuration3);
        long long5 = instant1.getMillis();
        java.lang.String str6 = instant1.toString();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.getDefault();
        long long9 = dateTimeZone7.nextTransition(1000L);
        org.joda.time.DateTime dateTime10 = instant1.toDateTime(dateTimeZone7);
        int int12 = dateTimeZone7.getOffset((long) 10);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and dateTime10", (instant1.compareTo(dateTime10) == 0) == instant1.equals(dateTime10));
    }

    @Test
    public void test0145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0145");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        org.joda.time.Instant instant3 = instant1.withMillis((long) 'u');
        java.util.TimeZone timeZone4 = null;
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forTimeZone(timeZone4);
        org.joda.time.chrono.GJChronology gJChronology6 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone5);
        org.joda.time.DurationField durationField7 = gJChronology6.halfdays();
        long long11 = gJChronology6.add((long) 'a', (-1L), (int) (short) 0);
        boolean boolean13 = gJChronology6.equals((java.lang.Object) 0);
        org.joda.time.DateTimeField dateTimeField14 = gJChronology6.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology6.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField16 = gJChronology6.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField17 = gJChronology6.clockhourOfHalfday();
        org.joda.time.DateTime dateTime18 = instant1.toDateTime((org.joda.time.Chronology) gJChronology6);
        java.util.TimeZone timeZone19 = null;
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forTimeZone(timeZone19);
        org.joda.time.chrono.GJChronology gJChronology21 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone20);
        org.joda.time.DurationField durationField22 = gJChronology21.halfdays();
        long long26 = gJChronology21.add((long) 'a', (-1L), (int) (short) 0);
        long long30 = gJChronology21.add((long) (byte) 0, (long) '4', 100);
        org.joda.time.DateTimeField dateTimeField31 = gJChronology21.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField32 = gJChronology21.year();
        org.joda.time.DateTimeField dateTimeField33 = gJChronology21.monthOfYear();
        org.joda.time.MutableDateTime mutableDateTime34 = instant1.toMutableDateTime((org.joda.time.Chronology) gJChronology21);
        org.joda.time.Instant instant35 = instant1.toInstant();
        org.joda.time.ReadableDuration readableDuration36 = null;
        org.joda.time.Instant instant37 = instant35.minus(readableDuration36);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant37 and dateTime18", (instant37.compareTo(dateTime18) == 0) == instant37.equals(dateTime18));
    }

    @Test
    public void test0146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0146");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = gJChronology2.halfdays();
        long long7 = gJChronology2.add((long) 'a', (-1L), (int) (short) 0);
        boolean boolean9 = gJChronology2.equals((java.lang.Object) 0);
        org.joda.time.DateTimeField dateTimeField10 = gJChronology2.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField11 = gJChronology2.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField12 = gJChronology2.clockhourOfDay();
        long long17 = gJChronology2.getDateTimeMillis(10, (int) (short) 10, 4, (int) (byte) 1);
        org.joda.time.DateTimeField dateTimeField18 = gJChronology2.millisOfDay();
        java.lang.String str19 = gJChronology2.toString();
        org.joda.time.DateTimeField dateTimeField20 = gJChronology2.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField21 = gJChronology2.yearOfCentury();
        org.joda.time.DurationField durationField22 = gJChronology2.eras();
        org.joda.time.DateTimeField dateTimeField23 = gJChronology2.minuteOfDay();
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField3 and durationField22", Math.signum(durationField3.compareTo(durationField22)) == -Math.signum(durationField22.compareTo(durationField3)));
    }

    @Test
    public void test0147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0147");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        boolean boolean2 = instant1.isEqualNow();
        java.lang.String str3 = instant1.toString();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.MutableDateTime mutableDateTime5 = instant1.toMutableDateTime(chronology4);
        java.util.TimeZone timeZone6 = null;
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forTimeZone(timeZone6);
        org.joda.time.chrono.GJChronology gJChronology8 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone7);
        org.joda.time.DurationField durationField9 = gJChronology8.halfdays();
        long long13 = gJChronology8.add((long) 'a', (-1L), (int) (short) 0);
        boolean boolean15 = gJChronology8.equals((java.lang.Object) 0);
        org.joda.time.DateTimeField dateTimeField16 = gJChronology8.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField17 = gJChronology8.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField18 = gJChronology8.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField19 = gJChronology8.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField20 = gJChronology8.weekyear();
        java.util.TimeZone timeZone21 = null;
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forTimeZone(timeZone21);
        org.joda.time.chrono.GJChronology gJChronology23 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone22);
        org.joda.time.DateTimeField dateTimeField24 = gJChronology23.millisOfSecond();
        org.joda.time.DurationField durationField25 = gJChronology23.millis();
        org.joda.time.DateTimeZone dateTimeZone26 = gJChronology23.getZone();
        org.joda.time.Chronology chronology27 = gJChronology8.withZone(dateTimeZone26);
        long long30 = dateTimeZone26.convertLocalToUTC(110449353600000L, false);
        org.joda.time.DateTime dateTime31 = mutableDateTime5.toDateTime(dateTimeZone26);
        java.lang.String str32 = mutableDateTime5.toString();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and dateTime31", (instant1.compareTo(dateTime31) == 0) == instant1.equals(dateTime31));
    }

    @Test
    public void test0148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0148");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        boolean boolean2 = instant1.isEqualNow();
        java.lang.String str3 = instant1.toString();
        org.joda.time.Instant instant5 = new org.joda.time.Instant(52L);
        boolean boolean6 = instant5.isEqualNow();
        java.lang.String str7 = instant5.toString();
        java.lang.String str8 = instant5.toString();
        org.joda.time.Instant instant11 = instant5.withDurationAdded(115200000L, (int) (short) 1);
        int int12 = instant1.compareTo((org.joda.time.ReadableInstant) instant5);
        org.joda.time.MutableDateTime mutableDateTime13 = instant1.toMutableDateTimeISO();
        java.util.Date date14 = instant1.toDate();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant5 and mutableDateTime13", (instant5.compareTo(mutableDateTime13) == 0) == instant5.equals(mutableDateTime13));
    }

    @Test
    public void test0149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0149");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        boolean boolean2 = instant1.isEqualNow();
        org.joda.time.ReadableDuration readableDuration3 = null;
        org.joda.time.Instant instant4 = instant1.plus(readableDuration3);
        long long5 = instant1.getMillis();
        java.lang.String str6 = instant1.toString();
        boolean boolean8 = instant1.isAfter((long) (-1));
        java.lang.Object obj9 = null;
        boolean boolean10 = instant1.equals(obj9);
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.Instant instant12 = instant1.minus(readableDuration11);
        org.joda.time.DateTime dateTime13 = instant12.toDateTime();
        org.joda.time.Instant instant16 = instant12.withDurationAdded(110449353600000L, 1);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant12 and dateTime13", (instant12.compareTo(dateTime13) == 0) == instant12.equals(dateTime13));
    }

    @Test
    public void test0150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0150");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forTimeZone(timeZone2);
        org.joda.time.chrono.GJChronology gJChronology4 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone3);
        org.joda.time.DateTimeField dateTimeField5 = gJChronology4.millisOfSecond();
        int int6 = instant1.get(dateTimeField5);
        org.joda.time.Instant instant8 = instant1.plus(0L);
        java.util.TimeZone timeZone9 = null;
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forTimeZone(timeZone9);
        org.joda.time.chrono.GJChronology gJChronology11 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone10);
        org.joda.time.DurationField durationField12 = gJChronology11.halfdays();
        org.joda.time.Chronology chronology13 = gJChronology11.withUTC();
        java.lang.String str14 = gJChronology11.toString();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology11.hourOfHalfday();
        int int16 = instant1.get(dateTimeField15);
        org.joda.time.Instant instant18 = new org.joda.time.Instant(52L);
        boolean boolean19 = instant18.isEqualNow();
        org.joda.time.ReadableDuration readableDuration20 = null;
        org.joda.time.Instant instant21 = instant18.plus(readableDuration20);
        org.joda.time.Instant instant23 = new org.joda.time.Instant(52L);
        org.joda.time.Instant instant25 = instant23.withMillis((long) 'u');
        boolean boolean26 = instant18.isBefore((org.joda.time.ReadableInstant) instant23);
        boolean boolean27 = instant1.isEqual((org.joda.time.ReadableInstant) instant23);
        org.joda.time.DateTime dateTime28 = instant1.toDateTime();
        org.joda.time.Instant instant30 = instant1.minus(337659343200000L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and dateTime28", (instant1.compareTo(dateTime28) == 0) == instant1.equals(dateTime28));
    }

    @Test
    public void test0151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0151");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        java.util.Locale locale4 = new java.util.Locale("hi!");
        java.lang.String str5 = locale4.getCountry();
        java.util.Locale locale6 = java.util.Locale.getDefault();
        java.lang.String str7 = locale6.getDisplayName();
        java.lang.String str8 = locale4.getDisplayScript(locale6);
        boolean boolean9 = dateTimeZone1.equals((java.lang.Object) locale6);
        int int11 = dateTimeZone1.getOffsetFromLocal((long) (short) 10);
        java.util.TimeZone timeZone12 = null;
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forTimeZone(timeZone12);
        org.joda.time.chrono.GJChronology gJChronology14 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone13);
        org.joda.time.DateTimeField dateTimeField15 = gJChronology14.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField16 = gJChronology14.weekyearOfCentury();
        org.joda.time.Instant instant17 = gJChronology14.getGregorianCutover();
        org.joda.time.Instant instant19 = instant17.withMillis(0L);
        org.joda.time.Instant instant21 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone22 = null;
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        org.joda.time.chrono.GJChronology gJChronology24 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone23);
        org.joda.time.DateTimeField dateTimeField25 = gJChronology24.millisOfSecond();
        int int26 = instant21.get(dateTimeField25);
        org.joda.time.Instant instant28 = instant21.plus(0L);
        int int29 = instant19.compareTo((org.joda.time.ReadableInstant) instant28);
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = null;
        boolean boolean31 = instant28.isSupported(dateTimeFieldType30);
        int int32 = dateTimeZone1.getOffset((org.joda.time.ReadableInstant) instant28);
        org.joda.time.DateTime dateTime33 = instant28.toDateTimeISO();
        org.joda.time.Instant instant35 = new org.joda.time.Instant(3155760000000L);
        org.joda.time.Instant instant36 = instant35.toInstant();
        int int37 = dateTime33.compareTo((org.joda.time.ReadableInstant) instant35);
        org.joda.time.Instant instant39 = new org.joda.time.Instant(52L);
        boolean boolean40 = instant39.isEqualNow();
        java.lang.String str41 = instant39.toString();
        org.joda.time.Instant instant43 = new org.joda.time.Instant(52L);
        boolean boolean44 = instant43.isEqualNow();
        java.lang.String str45 = instant43.toString();
        java.lang.String str46 = instant43.toString();
        org.joda.time.Instant instant49 = instant43.withDurationAdded(115200000L, (int) (short) 1);
        int int50 = instant39.compareTo((org.joda.time.ReadableInstant) instant43);
        org.joda.time.Instant instant52 = new org.joda.time.Instant(52L);
        boolean boolean53 = instant52.isEqualNow();
        org.joda.time.ReadableDuration readableDuration54 = null;
        org.joda.time.Instant instant55 = instant52.plus(readableDuration54);
        boolean boolean57 = instant55.equals((java.lang.Object) ' ');
        boolean boolean58 = instant43.isAfter((org.joda.time.ReadableInstant) instant55);
        java.lang.String str59 = instant55.toString();
        java.lang.String str60 = instant55.toString();
        boolean boolean61 = dateTime33.isEqual((org.joda.time.ReadableInstant) instant55);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter62 = null;
        java.lang.String str63 = instant55.toString(dateTimeFormatter62);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant21 and dateTime33", (instant21.compareTo(dateTime33) == 0) == instant21.equals(dateTime33));
    }

    @Test
    public void test0152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0152");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField3 = gJChronology2.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.secondOfMinute();
        org.joda.time.Chronology chronology6 = gJChronology2.withUTC();
        org.joda.time.DurationField durationField7 = gJChronology2.eras();
        org.joda.time.DurationField durationField8 = gJChronology2.millis();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField7, durationField8, and durationField7", !(durationField7.compareTo(durationField8) == 0) || (Math.signum(durationField7.compareTo(durationField7)) == Math.signum(durationField8.compareTo(durationField7))));
    }

    @Test
    public void test0153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0153");
        org.joda.time.Instant instant0 = org.joda.time.Instant.now();
        boolean boolean2 = instant0.isBefore(0L);
        org.joda.time.Instant instant4 = new org.joda.time.Instant(52L);
        org.joda.time.Instant instant6 = instant4.withMillis((long) 'u');
        java.util.TimeZone timeZone7 = null;
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forTimeZone(timeZone7);
        org.joda.time.chrono.GJChronology gJChronology9 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone8);
        org.joda.time.DurationField durationField10 = gJChronology9.halfdays();
        long long14 = gJChronology9.add((long) 'a', (-1L), (int) (short) 0);
        boolean boolean16 = gJChronology9.equals((java.lang.Object) 0);
        org.joda.time.DateTimeField dateTimeField17 = gJChronology9.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField18 = gJChronology9.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField19 = gJChronology9.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField20 = gJChronology9.clockhourOfHalfday();
        org.joda.time.DateTime dateTime21 = instant4.toDateTime((org.joda.time.Chronology) gJChronology9);
        boolean boolean22 = instant0.isEqual((org.joda.time.ReadableInstant) dateTime21);
        java.util.TimeZone timeZone23 = null;
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forTimeZone(timeZone23);
        org.joda.time.chrono.GJChronology gJChronology25 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone24);
        org.joda.time.DateTimeField dateTimeField26 = gJChronology25.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField27 = gJChronology25.weekyearOfCentury();
        org.joda.time.Instant instant28 = gJChronology25.getGregorianCutover();
        org.joda.time.Instant instant30 = instant28.withMillis(0L);
        org.joda.time.Instant instant32 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone33 = null;
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.forTimeZone(timeZone33);
        org.joda.time.chrono.GJChronology gJChronology35 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone34);
        org.joda.time.DateTimeField dateTimeField36 = gJChronology35.millisOfSecond();
        int int37 = instant32.get(dateTimeField36);
        org.joda.time.Instant instant39 = instant32.plus(0L);
        int int40 = instant30.compareTo((org.joda.time.ReadableInstant) instant39);
        org.joda.time.Instant instant42 = new org.joda.time.Instant(52L);
        boolean boolean43 = instant42.isEqualNow();
        org.joda.time.ReadableDuration readableDuration44 = null;
        org.joda.time.Instant instant45 = instant42.plus(readableDuration44);
        boolean boolean47 = instant45.equals((java.lang.Object) ' ');
        boolean boolean48 = instant39.isEqual((org.joda.time.ReadableInstant) instant45);
        java.lang.String str49 = instant39.toString();
        org.joda.time.ReadableDuration readableDuration50 = null;
        org.joda.time.Instant instant52 = instant39.withDurationAdded(readableDuration50, 1431201);
        int int53 = instant0.compareTo((org.joda.time.ReadableInstant) instant39);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant4 and dateTime21", (instant4.compareTo(dateTime21) == 0) == instant4.equals(dateTime21));
    }

    @Test
    public void test0154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0154");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField3 = gJChronology2.era();
        java.lang.String str4 = gJChronology2.toString();
        org.joda.time.DurationField durationField5 = gJChronology2.eras();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology2.yearOfCentury();
        org.joda.time.DurationField durationField7 = gJChronology2.minutes();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField5, durationField7, and durationField5", !(durationField5.compareTo(durationField7) == 0) || (Math.signum(durationField5.compareTo(durationField5)) == Math.signum(durationField7.compareTo(durationField5))));
    }

    @Test
    public void test0155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0155");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        boolean boolean2 = instant1.isEqualNow();
        java.lang.String str3 = instant1.toString();
        java.util.TimeZone timeZone4 = null;
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forTimeZone(timeZone4);
        org.joda.time.chrono.GJChronology gJChronology6 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone5);
        java.util.Locale locale8 = new java.util.Locale("hi!");
        java.lang.String str9 = locale8.getCountry();
        java.util.Locale locale10 = java.util.Locale.getDefault();
        java.lang.String str11 = locale10.getDisplayName();
        java.lang.String str12 = locale8.getDisplayScript(locale10);
        boolean boolean13 = dateTimeZone5.equals((java.lang.Object) locale10);
        int int15 = dateTimeZone5.getOffsetFromLocal((long) (short) 10);
        java.util.TimeZone timeZone16 = null;
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forTimeZone(timeZone16);
        org.joda.time.chrono.GJChronology gJChronology18 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone17);
        org.joda.time.DateTimeField dateTimeField19 = gJChronology18.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField20 = gJChronology18.weekyearOfCentury();
        org.joda.time.Instant instant21 = gJChronology18.getGregorianCutover();
        org.joda.time.Instant instant23 = instant21.withMillis(0L);
        org.joda.time.Instant instant25 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone26 = null;
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forTimeZone(timeZone26);
        org.joda.time.chrono.GJChronology gJChronology28 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone27);
        org.joda.time.DateTimeField dateTimeField29 = gJChronology28.millisOfSecond();
        int int30 = instant25.get(dateTimeField29);
        org.joda.time.Instant instant32 = instant25.plus(0L);
        int int33 = instant23.compareTo((org.joda.time.ReadableInstant) instant32);
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = null;
        boolean boolean35 = instant32.isSupported(dateTimeFieldType34);
        int int36 = dateTimeZone5.getOffset((org.joda.time.ReadableInstant) instant32);
        boolean boolean37 = instant1.isAfter((org.joda.time.ReadableInstant) instant32);
        org.joda.time.Instant instant39 = instant32.withMillis((long) 10);
        org.joda.time.DateTime dateTime40 = instant32.toDateTimeISO();
        boolean boolean41 = instant32.isAfterNow();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and dateTime40", (instant1.compareTo(dateTime40) == 0) == instant1.equals(dateTime40));
    }

    @Test
    public void test0156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0156");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forTimeZone(timeZone2);
        org.joda.time.chrono.GJChronology gJChronology4 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone3);
        org.joda.time.DateTimeField dateTimeField5 = gJChronology4.millisOfSecond();
        int int6 = instant1.get(dateTimeField5);
        org.joda.time.Instant instant8 = instant1.plus(0L);
        org.joda.time.Instant instant9 = instant8.toInstant();
        org.joda.time.Instant instant11 = new org.joda.time.Instant(52L);
        boolean boolean12 = instant11.isEqualNow();
        java.lang.String str13 = instant11.toString();
        java.lang.String str14 = instant11.toString();
        org.joda.time.Instant instant16 = new org.joda.time.Instant(52L);
        boolean boolean17 = instant16.isEqualNow();
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.Instant instant19 = instant16.plus(readableDuration18);
        boolean boolean20 = instant11.isBefore((org.joda.time.ReadableInstant) instant19);
        org.joda.time.Instant instant22 = instant11.minus((long) 0);
        int int23 = instant8.compareTo((org.joda.time.ReadableInstant) instant11);
        org.joda.time.Instant instant26 = instant11.withDurationAdded((long) (short) 100, 70);
        org.joda.time.DateTime dateTime27 = instant26.toDateTimeISO();
        java.util.Locale locale29 = new java.util.Locale("hi!");
        java.lang.String str30 = locale29.getVariant();
        java.util.Locale locale32 = java.util.Locale.forLanguageTag("hi!");
        java.lang.String str33 = locale32.toLanguageTag();
        java.lang.String str34 = locale29.getDisplayName(locale32);
        boolean boolean35 = dateTime27.equals((java.lang.Object) locale29);
        org.joda.time.Chronology chronology36 = dateTime27.getChronology();
        java.util.TimeZone timeZone37 = null;
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forTimeZone(timeZone37);
        org.joda.time.chrono.GJChronology gJChronology39 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone38);
        java.util.Locale locale41 = new java.util.Locale("hi!");
        java.lang.String str42 = locale41.getCountry();
        java.util.Locale locale43 = java.util.Locale.getDefault();
        java.lang.String str44 = locale43.getDisplayName();
        java.lang.String str45 = locale41.getDisplayScript(locale43);
        boolean boolean46 = dateTimeZone38.equals((java.lang.Object) locale43);
        org.joda.time.DateTime dateTime47 = dateTime27.toDateTime(dateTimeZone38);
        org.joda.time.Instant instant48 = dateTime47.toInstant();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant26 and dateTime47", (instant26.compareTo(dateTime47) == 0) == instant26.equals(dateTime47));
    }

    @Test
    public void test0157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0157");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        int int3 = dateTimeZone1.getOffsetFromLocal((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(0, (int) (short) 10);
        long long8 = dateTimeZone1.getMillisKeepLocal(dateTimeZone6, (-61827926399999L));
        java.util.Locale locale10 = java.util.Locale.getDefault();
        java.lang.String str11 = locale10.getDisplayLanguage();
        java.lang.String str12 = dateTimeZone6.getShortName(186805440000000000L, locale10);
        java.util.Locale locale14 = java.util.Locale.GERMANY;
        java.lang.String str15 = locale14.getDisplayLanguage();
        java.util.Locale locale16 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str17 = locale14.getDisplayVariant(locale16);
        java.lang.String str18 = dateTimeZone6.getName(31556952000L, locale14);
        org.joda.time.chrono.GJChronology gJChronology19 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone6);
        org.joda.time.Instant instant21 = new org.joda.time.Instant(52L);
        boolean boolean22 = instant21.isEqualNow();
        boolean boolean24 = instant21.isEqual(0L);
        java.util.TimeZone timeZone25 = null;
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forTimeZone(timeZone25);
        org.joda.time.chrono.GJChronology gJChronology27 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone26);
        org.joda.time.DurationField durationField28 = gJChronology27.halfdays();
        long long32 = gJChronology27.add((long) 'a', (-1L), (int) (short) 0);
        boolean boolean34 = gJChronology27.equals((java.lang.Object) 0);
        org.joda.time.DateTimeField dateTimeField35 = gJChronology27.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField36 = gJChronology27.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField37 = gJChronology27.clockhourOfDay();
        long long41 = gJChronology27.add(262974600000L, (-4199880L), (int) (short) -1);
        org.joda.time.DateTimeField dateTimeField42 = gJChronology27.year();
        org.joda.time.MutableDateTime mutableDateTime43 = instant21.toMutableDateTime((org.joda.time.Chronology) gJChronology27);
        java.util.TimeZone timeZone44 = null;
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.forTimeZone(timeZone44);
        org.joda.time.chrono.GJChronology gJChronology46 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone45);
        long long50 = dateTimeZone45.convertLocalToUTC((long) (byte) -1, true, 0L);
        boolean boolean52 = dateTimeZone45.equals((java.lang.Object) true);
        long long54 = dateTimeZone45.nextTransition((long) '4');
        java.lang.String str56 = dateTimeZone45.getShortName(432000001L);
        java.util.TimeZone timeZone57 = dateTimeZone45.toTimeZone();
        org.joda.time.DateTime dateTime58 = mutableDateTime43.toDateTime(dateTimeZone45);
        org.joda.time.Chronology chronology59 = gJChronology19.withZone(dateTimeZone45);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant21 and mutableDateTime43", (instant21.compareTo(mutableDateTime43) == 0) == instant21.equals(mutableDateTime43));
    }

    @Test
    public void test0158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0158");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        boolean boolean2 = instant1.isEqualNow();
        org.joda.time.ReadableDuration readableDuration3 = null;
        org.joda.time.Instant instant4 = instant1.plus(readableDuration3);
        org.joda.time.Instant instant6 = new org.joda.time.Instant(52L);
        org.joda.time.Instant instant8 = instant6.withMillis((long) 'u');
        boolean boolean9 = instant1.isBefore((org.joda.time.ReadableInstant) instant6);
        java.util.TimeZone timeZone10 = null;
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forTimeZone(timeZone10);
        org.joda.time.chrono.GJChronology gJChronology12 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone11);
        org.joda.time.DurationField durationField13 = gJChronology12.halfdays();
        long long17 = gJChronology12.add((long) 'a', (-1L), (int) (short) 0);
        long long21 = gJChronology12.add((long) (byte) 0, (long) '4', 100);
        org.joda.time.DateTimeField dateTimeField22 = gJChronology12.minuteOfHour();
        org.joda.time.DurationField durationField23 = gJChronology12.hours();
        org.joda.time.DateTimeField dateTimeField24 = gJChronology12.weekOfWeekyear();
        org.joda.time.DateTime dateTime25 = instant6.toDateTime((org.joda.time.Chronology) gJChronology12);
        org.joda.time.DurationField durationField26 = gJChronology12.months();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and dateTime25", (instant1.compareTo(dateTime25) == 0) == instant1.equals(dateTime25));
    }

    @Test
    public void test0159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0159");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        boolean boolean2 = instant1.isEqualNow();
        java.lang.String str3 = instant1.toString();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.MutableDateTime mutableDateTime5 = instant1.toMutableDateTime(chronology4);
        org.joda.time.Instant instant7 = new org.joda.time.Instant(52L);
        boolean boolean8 = instant7.isEqualNow();
        org.joda.time.Instant instant10 = new org.joda.time.Instant(52L);
        org.joda.time.Instant instant12 = instant10.withMillis((long) 'u');
        boolean boolean13 = instant7.isAfter((org.joda.time.ReadableInstant) instant10);
        boolean boolean14 = mutableDateTime5.isEqual((org.joda.time.ReadableInstant) instant10);
        java.util.TimeZone timeZone15 = null;
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forTimeZone(timeZone15);
        org.joda.time.chrono.GJChronology gJChronology17 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone16);
        org.joda.time.DurationField durationField18 = gJChronology17.halfdays();
        org.joda.time.DateTimeField dateTimeField19 = gJChronology17.millisOfDay();
        org.joda.time.DateTimeField dateTimeField20 = gJChronology17.minuteOfDay();
        org.joda.time.DurationField durationField21 = gJChronology17.centuries();
        org.joda.time.DateTimeField dateTimeField22 = gJChronology17.dayOfYear();
        java.lang.String str23 = gJChronology17.toString();
        org.joda.time.DurationField durationField24 = gJChronology17.halfdays();
        org.joda.time.DateTimeField dateTimeField25 = gJChronology17.clockhourOfHalfday();
        org.joda.time.DateTime dateTime26 = mutableDateTime5.toDateTime((org.joda.time.Chronology) gJChronology17);
        org.joda.time.DateTimeField dateTimeField27 = gJChronology17.minuteOfHour();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and mutableDateTime5", (instant1.compareTo(mutableDateTime5) == 0) == instant1.equals(mutableDateTime5));
    }

    @Test
    public void test0160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0160");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        boolean boolean2 = instant1.isEqualNow();
        java.lang.String str3 = instant1.toString();
        java.util.TimeZone timeZone4 = null;
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forTimeZone(timeZone4);
        org.joda.time.chrono.GJChronology gJChronology6 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone5);
        java.util.Locale locale8 = new java.util.Locale("hi!");
        java.lang.String str9 = locale8.getCountry();
        java.util.Locale locale10 = java.util.Locale.getDefault();
        java.lang.String str11 = locale10.getDisplayName();
        java.lang.String str12 = locale8.getDisplayScript(locale10);
        boolean boolean13 = dateTimeZone5.equals((java.lang.Object) locale10);
        int int15 = dateTimeZone5.getOffsetFromLocal((long) (short) 10);
        java.util.TimeZone timeZone16 = null;
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forTimeZone(timeZone16);
        org.joda.time.chrono.GJChronology gJChronology18 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone17);
        org.joda.time.DateTimeField dateTimeField19 = gJChronology18.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField20 = gJChronology18.weekyearOfCentury();
        org.joda.time.Instant instant21 = gJChronology18.getGregorianCutover();
        org.joda.time.Instant instant23 = instant21.withMillis(0L);
        org.joda.time.Instant instant25 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone26 = null;
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forTimeZone(timeZone26);
        org.joda.time.chrono.GJChronology gJChronology28 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone27);
        org.joda.time.DateTimeField dateTimeField29 = gJChronology28.millisOfSecond();
        int int30 = instant25.get(dateTimeField29);
        org.joda.time.Instant instant32 = instant25.plus(0L);
        int int33 = instant23.compareTo((org.joda.time.ReadableInstant) instant32);
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = null;
        boolean boolean35 = instant32.isSupported(dateTimeFieldType34);
        int int36 = dateTimeZone5.getOffset((org.joda.time.ReadableInstant) instant32);
        boolean boolean37 = instant1.isAfter((org.joda.time.ReadableInstant) instant32);
        long long38 = instant1.getMillis();
        org.joda.time.Instant instant40 = new org.joda.time.Instant(52L);
        boolean boolean41 = instant40.isEqualNow();
        java.lang.String str42 = instant40.toString();
        java.lang.String str43 = instant40.toString();
        org.joda.time.Instant instant46 = instant40.withDurationAdded(115200000L, (int) (short) 1);
        java.util.TimeZone timeZone47 = null;
        org.joda.time.DateTimeZone dateTimeZone48 = org.joda.time.DateTimeZone.forTimeZone(timeZone47);
        java.lang.String str50 = dateTimeZone48.getNameKey((long) 100);
        boolean boolean51 = dateTimeZone48.isFixed();
        org.joda.time.DateTime dateTime52 = instant40.toDateTime(dateTimeZone48);
        boolean boolean54 = instant40.isAfter(0L);
        boolean boolean55 = instant1.isEqual((org.joda.time.ReadableInstant) instant40);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant25 and dateTime52", (instant25.compareTo(dateTime52) == 0) == instant25.equals(dateTime52));
    }

    @Test
    public void test0161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0161");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        boolean boolean2 = instant1.isEqualNow();
        java.lang.String str3 = instant1.toString();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.MutableDateTime mutableDateTime5 = instant1.toMutableDateTime(chronology4);
        org.joda.time.MutableDateTime mutableDateTime6 = instant1.toMutableDateTime();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(1, 10);
        org.joda.time.LocalDateTime localDateTime10 = null;
        boolean boolean11 = dateTimeZone9.isLocalDateTimeGap(localDateTime10);
        boolean boolean12 = dateTimeZone9.isFixed();
        java.util.Locale.Category category14 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale15 = java.util.Locale.CANADA;
        java.lang.String str16 = locale15.getISO3Language();
        java.util.Locale.setDefault(category14, locale15);
        java.util.Locale locale20 = new java.util.Locale("cinese (Taiwan)", "DurationField[weekyears]");
        java.util.Set<java.lang.String> strSet21 = locale20.getUnicodeLocaleAttributes();
        java.lang.String str22 = locale15.getDisplayLanguage(locale20);
        java.lang.String str23 = dateTimeZone9.getShortName((long) 10, locale15);
        org.joda.time.MutableDateTime mutableDateTime24 = instant1.toMutableDateTime(dateTimeZone9);
        long long26 = dateTimeZone9.nextTransition((-22087032463023600L));
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and mutableDateTime5", (instant1.compareTo(mutableDateTime5) == 0) == instant1.equals(mutableDateTime5));
    }

    @Test
    public void test0162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0162");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        boolean boolean2 = instant1.isEqualNow();
        java.lang.String str3 = instant1.toString();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.MutableDateTime mutableDateTime5 = instant1.toMutableDateTime(chronology4);
        org.joda.time.MutableDateTime mutableDateTime6 = instant1.toMutableDateTime();
        java.util.TimeZone timeZone7 = null;
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forTimeZone(timeZone7);
        org.joda.time.chrono.GJChronology gJChronology9 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone8);
        org.joda.time.DateTimeField dateTimeField10 = gJChronology9.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField11 = gJChronology9.weekyear();
        org.joda.time.DurationField durationField12 = gJChronology9.centuries();
        org.joda.time.DateTimeField dateTimeField13 = gJChronology9.millisOfDay();
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        long long17 = gJChronology9.add(readablePeriod14, (long) '4', (int) (byte) -1);
        org.joda.time.DurationField durationField18 = gJChronology9.weekyears();
        org.joda.time.DateTime dateTime19 = instant1.toDateTime((org.joda.time.Chronology) gJChronology9);
        org.joda.time.Instant instant22 = instant1.withDurationAdded((long) (-5914428), 52);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime5 and dateTime19", (mutableDateTime5.compareTo(dateTime19) == 0) == mutableDateTime5.equals(dateTime19));
    }

    @Test
    public void test0163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0163");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField3 = gJChronology2.era();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.centuryOfEra();
        org.joda.time.DurationField durationField5 = gJChronology2.hours();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology2.monthOfYear();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology2.dayOfWeek();
        org.joda.time.Chronology chronology8 = gJChronology2.withUTC();
        org.joda.time.DurationField durationField9 = chronology8.eras();
        org.joda.time.DateTimeField dateTimeField10 = chronology8.yearOfCentury();
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField5 and durationField9", Math.signum(durationField5.compareTo(durationField9)) == -Math.signum(durationField9.compareTo(durationField5)));
    }

    @Test
    public void test0164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0164");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        boolean boolean2 = instant1.isEqualNow();
        org.joda.time.ReadableDuration readableDuration3 = null;
        org.joda.time.Instant instant4 = instant1.plus(readableDuration3);
        long long5 = instant1.getMillis();
        java.lang.String str6 = instant1.toString();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.getDefault();
        long long9 = dateTimeZone7.nextTransition(1000L);
        org.joda.time.DateTime dateTime10 = instant1.toDateTime(dateTimeZone7);
        org.joda.time.chrono.GJChronology gJChronology11 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone7);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and dateTime10", (instant1.compareTo(dateTime10) == 0) == instant1.equals(dateTime10));
    }

    @Test
    public void test0165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0165");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        boolean boolean2 = instant1.isEqualNow();
        org.joda.time.ReadableDuration readableDuration3 = null;
        org.joda.time.Instant instant4 = instant1.plus(readableDuration3);
        long long5 = instant1.getMillis();
        java.lang.String str6 = instant1.toString();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.getDefault();
        long long9 = dateTimeZone7.nextTransition(1000L);
        org.joda.time.DateTime dateTime10 = instant1.toDateTime(dateTimeZone7);
        int int12 = dateTimeZone7.getOffset((-9617619703660L));
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and dateTime10", (instant1.compareTo(dateTime10) == 0) == instant1.equals(dateTime10));
    }

    @Test
    public void test0166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0166");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        boolean boolean2 = instant1.isEqualNow();
        java.lang.String str3 = instant1.toString();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.MutableDateTime mutableDateTime5 = instant1.toMutableDateTime(chronology4);
        java.util.List<java.util.Locale.LanguageRange> languageRangeList7 = java.util.Locale.LanguageRange.parse("halfdays");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap8 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList9 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList7, strMap8);
        java.util.Locale.LanguageRange[] languageRangeArray10 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList11 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList11, languageRangeArray10);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap13 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList14 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList11, strMap13);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap15 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList16 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList14, strMap15);
        java.util.List<java.util.Locale.LanguageRange> languageRangeList18 = java.util.Locale.LanguageRange.parse("halfdays");
        java.util.Locale locale19 = java.util.Locale.getDefault();
        java.lang.String str20 = locale19.getDisplayLanguage();
        java.util.Locale locale21 = java.util.Locale.CANADA;
        java.lang.String str22 = locale21.getDisplayVariant();
        java.util.Locale locale23 = java.util.Locale.JAPAN;
        java.lang.String str24 = locale23.getCountry();
        java.util.Locale locale25 = java.util.Locale.KOREA;
        java.util.Locale locale26 = java.util.Locale.GERMANY;
        java.util.Locale locale28 = java.util.Locale.forLanguageTag("hi!");
        java.lang.String str29 = locale28.toLanguageTag();
        java.util.Locale locale31 = new java.util.Locale("hi!");
        java.lang.String str32 = locale31.getCountry();
        java.lang.String str33 = locale31.getLanguage();
        java.util.Locale locale35 = java.util.Locale.forLanguageTag("halfdays");
        boolean boolean36 = locale35.hasExtensions();
        java.util.Locale locale37 = java.util.Locale.getDefault();
        java.lang.String str38 = locale37.getISO3Language();
        java.util.Locale locale40 = new java.util.Locale("hi!");
        java.lang.String str41 = locale40.getCountry();
        java.lang.String str42 = locale40.getCountry();
        java.util.Locale locale43 = java.util.Locale.getDefault();
        java.util.Locale locale44 = java.util.Locale.CHINA;
        java.util.Locale locale45 = java.util.Locale.getDefault();
        java.lang.String str46 = locale45.getDisplayName();
        java.lang.String str47 = locale45.getDisplayVariant();
        java.util.Locale locale48 = java.util.Locale.ROOT;
        java.lang.String str49 = locale48.getDisplayScript();
        java.util.Locale locale50 = java.util.Locale.getDefault();
        java.lang.String str51 = locale50.getDisplayName();
        java.util.Locale locale52 = java.util.Locale.CANADA;
        java.lang.String str53 = locale52.getISO3Language();
        java.util.Locale locale54 = java.util.Locale.getDefault();
        java.lang.String str55 = locale54.getDisplayLanguage();
        java.lang.String str56 = locale54.toLanguageTag();
        java.util.Locale locale58 = new java.util.Locale("hi!");
        java.lang.String str59 = locale58.getCountry();
        java.util.Locale locale60 = java.util.Locale.getDefault();
        java.lang.String str61 = locale60.getDisplayName();
        java.lang.String str62 = locale58.getDisplayScript(locale60);
        java.util.Locale locale63 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Locale locale64 = java.util.Locale.JAPAN;
        java.lang.String str65 = locale64.getCountry();
        java.util.Locale locale67 = new java.util.Locale("hi!");
        java.lang.String str68 = locale67.getCountry();
        java.lang.String str69 = locale67.getScript();
        java.util.Locale locale70 = java.util.Locale.CANADA;
        java.lang.String str71 = locale70.getISO3Language();
        java.util.Locale locale72 = java.util.Locale.getDefault();
        java.lang.String str73 = locale72.getDisplayName();
        java.lang.String str74 = locale72.getDisplayVariant();
        java.util.Locale[] localeArray75 = new java.util.Locale[] { locale19, locale21, locale23, locale25, locale26, locale28, locale31, locale35, locale37, locale40, locale43, locale44, locale45, locale48, locale50, locale52, locale54, locale58, locale63, locale64, locale67, locale70, locale72 };
        java.util.ArrayList<java.util.Locale> localeList76 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean77 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList76, localeArray75);
        java.util.Locale locale78 = java.util.Locale.lookup(languageRangeList18, (java.util.Collection<java.util.Locale>) localeList76);
        java.util.Locale locale79 = java.util.Locale.lookup(languageRangeList16, (java.util.Collection<java.util.Locale>) localeList76);
        java.util.Locale locale80 = java.util.Locale.lookup(languageRangeList7, (java.util.Collection<java.util.Locale>) localeList76);
        java.util.Set<java.lang.String> strSet81 = locale80.getUnicodeLocaleAttributes();
        boolean boolean82 = mutableDateTime5.equals((java.lang.Object) locale80);
        java.lang.String str83 = locale80.getCountry();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and mutableDateTime5", (instant1.compareTo(mutableDateTime5) == 0) == instant1.equals(mutableDateTime5));
    }

    @Test
    public void test0167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0167");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField3 = gJChronology2.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.weekyearOfCentury();
        org.joda.time.Instant instant5 = gJChronology2.getGregorianCutover();
        org.joda.time.Instant instant7 = instant5.withMillis(0L);
        java.util.TimeZone timeZone8 = null;
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forTimeZone(timeZone8);
        org.joda.time.chrono.GJChronology gJChronology10 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone9);
        org.joda.time.DateTimeField dateTimeField11 = gJChronology10.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField12 = gJChronology10.weekyear();
        org.joda.time.DateTimeField dateTimeField13 = gJChronology10.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField14 = gJChronology10.weekyearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime15 = instant7.toMutableDateTime((org.joda.time.Chronology) gJChronology10);
        org.joda.time.Instant instant17 = instant7.withMillis(111000000L);
        boolean boolean18 = instant17.isBeforeNow();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant7 and mutableDateTime15", (instant7.compareTo(mutableDateTime15) == 0) == instant7.equals(mutableDateTime15));
    }

    @Test
    public void test0168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0168");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        boolean boolean2 = instant1.isEqualNow();
        org.joda.time.ReadableDuration readableDuration3 = null;
        org.joda.time.Instant instant4 = instant1.plus(readableDuration3);
        long long5 = instant1.getMillis();
        java.lang.String str6 = instant1.toString();
        boolean boolean8 = instant1.isAfter((long) (-1));
        java.lang.Object obj9 = null;
        boolean boolean10 = instant1.equals(obj9);
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.Instant instant12 = instant1.minus(readableDuration11);
        org.joda.time.DateTime dateTime13 = instant12.toDateTime();
        long long14 = instant12.getMillis();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant12 and dateTime13", (instant12.compareTo(dateTime13) == 0) == instant12.equals(dateTime13));
    }

    @Test
    public void test0169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0169");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField3 = gJChronology2.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.weekyearOfCentury();
        org.joda.time.Instant instant5 = gJChronology2.getGregorianCutover();
        org.joda.time.Instant instant7 = new org.joda.time.Instant(52L);
        boolean boolean8 = instant7.isEqualNow();
        java.lang.String str9 = instant7.toString();
        java.lang.String str10 = instant7.toString();
        org.joda.time.Instant instant12 = new org.joda.time.Instant(52L);
        boolean boolean13 = instant12.isEqualNow();
        org.joda.time.ReadableDuration readableDuration14 = null;
        org.joda.time.Instant instant15 = instant12.plus(readableDuration14);
        boolean boolean16 = instant7.isBefore((org.joda.time.ReadableInstant) instant15);
        org.joda.time.Instant instant18 = instant15.plus((long) (short) 100);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MutableDateTime mutableDateTime20 = instant15.toMutableDateTime(chronology19);
        boolean boolean21 = instant5.isEqual((org.joda.time.ReadableInstant) mutableDateTime20);
        java.util.TimeZone timeZone22 = null;
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        org.joda.time.chrono.GJChronology gJChronology24 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone23);
        org.joda.time.DurationField durationField25 = gJChronology24.halfdays();
        long long29 = gJChronology24.add((long) 'a', (-1L), (int) (short) 0);
        boolean boolean31 = gJChronology24.equals((java.lang.Object) 0);
        org.joda.time.DateTimeField dateTimeField32 = gJChronology24.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField33 = gJChronology24.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField34 = gJChronology24.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField35 = gJChronology24.clockhourOfHalfday();
        org.joda.time.DurationField durationField36 = gJChronology24.halfdays();
        org.joda.time.DateTimeField dateTimeField37 = gJChronology24.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField38 = gJChronology24.centuryOfEra();
        boolean boolean39 = mutableDateTime20.equals((java.lang.Object) gJChronology24);
        org.joda.time.Chronology chronology40 = mutableDateTime20.getChronology();
        org.joda.time.DateTimeField dateTimeField41 = chronology40.dayOfMonth();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant7 and mutableDateTime20", (instant7.compareTo(mutableDateTime20) == 0) == instant7.equals(mutableDateTime20));
    }

    @Test
    public void test0170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0170");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        java.util.Locale locale4 = new java.util.Locale("hi!");
        java.lang.String str5 = locale4.getCountry();
        java.util.Locale locale6 = java.util.Locale.getDefault();
        java.lang.String str7 = locale6.getDisplayName();
        java.lang.String str8 = locale4.getDisplayScript(locale6);
        boolean boolean9 = dateTimeZone1.equals((java.lang.Object) locale6);
        int int11 = dateTimeZone1.getOffsetFromLocal((long) (short) 10);
        java.util.TimeZone timeZone12 = null;
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forTimeZone(timeZone12);
        org.joda.time.chrono.GJChronology gJChronology14 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone13);
        org.joda.time.DateTimeField dateTimeField15 = gJChronology14.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField16 = gJChronology14.weekyearOfCentury();
        org.joda.time.Instant instant17 = gJChronology14.getGregorianCutover();
        org.joda.time.Instant instant19 = instant17.withMillis(0L);
        org.joda.time.Instant instant21 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone22 = null;
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        org.joda.time.chrono.GJChronology gJChronology24 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone23);
        org.joda.time.DateTimeField dateTimeField25 = gJChronology24.millisOfSecond();
        int int26 = instant21.get(dateTimeField25);
        org.joda.time.Instant instant28 = instant21.plus(0L);
        int int29 = instant19.compareTo((org.joda.time.ReadableInstant) instant28);
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = null;
        boolean boolean31 = instant28.isSupported(dateTimeFieldType30);
        int int32 = dateTimeZone1.getOffset((org.joda.time.ReadableInstant) instant28);
        org.joda.time.DateTime dateTime33 = instant28.toDateTimeISO();
        org.joda.time.Instant instant35 = new org.joda.time.Instant(3155760000000L);
        org.joda.time.Instant instant36 = instant35.toInstant();
        int int37 = dateTime33.compareTo((org.joda.time.ReadableInstant) instant35);
        org.joda.time.Instant instant39 = new org.joda.time.Instant(52L);
        boolean boolean40 = instant39.isEqualNow();
        java.lang.String str41 = instant39.toString();
        org.joda.time.Instant instant43 = new org.joda.time.Instant(52L);
        boolean boolean44 = instant43.isEqualNow();
        java.lang.String str45 = instant43.toString();
        java.lang.String str46 = instant43.toString();
        org.joda.time.Instant instant49 = instant43.withDurationAdded(115200000L, (int) (short) 1);
        int int50 = instant39.compareTo((org.joda.time.ReadableInstant) instant43);
        org.joda.time.Instant instant52 = new org.joda.time.Instant(52L);
        boolean boolean53 = instant52.isEqualNow();
        org.joda.time.ReadableDuration readableDuration54 = null;
        org.joda.time.Instant instant55 = instant52.plus(readableDuration54);
        boolean boolean57 = instant55.equals((java.lang.Object) ' ');
        boolean boolean58 = instant43.isAfter((org.joda.time.ReadableInstant) instant55);
        java.lang.String str59 = instant55.toString();
        java.lang.String str60 = instant55.toString();
        boolean boolean61 = dateTime33.isEqual((org.joda.time.ReadableInstant) instant55);
        java.lang.String str62 = instant55.toString();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant21 and dateTime33", (instant21.compareTo(dateTime33) == 0) == instant21.equals(dateTime33));
    }

    @Test
    public void test0171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0171");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forTimeZone(timeZone2);
        org.joda.time.chrono.GJChronology gJChronology4 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone3);
        org.joda.time.DateTimeField dateTimeField5 = gJChronology4.millisOfSecond();
        int int6 = instant1.get(dateTimeField5);
        org.joda.time.Instant instant8 = instant1.plus(0L);
        java.util.TimeZone timeZone9 = null;
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forTimeZone(timeZone9);
        org.joda.time.chrono.GJChronology gJChronology11 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone10);
        org.joda.time.DurationField durationField12 = gJChronology11.halfdays();
        org.joda.time.Chronology chronology13 = gJChronology11.withUTC();
        java.lang.String str14 = gJChronology11.toString();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology11.hourOfHalfday();
        int int16 = instant1.get(dateTimeField15);
        org.joda.time.Instant instant18 = new org.joda.time.Instant(52L);
        boolean boolean19 = instant18.isEqualNow();
        java.lang.String str20 = instant18.toString();
        org.joda.time.Instant instant22 = new org.joda.time.Instant(52L);
        boolean boolean23 = instant22.isEqualNow();
        java.lang.String str24 = instant22.toString();
        java.lang.String str25 = instant22.toString();
        org.joda.time.Instant instant28 = instant22.withDurationAdded(115200000L, (int) (short) 1);
        int int29 = instant18.compareTo((org.joda.time.ReadableInstant) instant22);
        org.joda.time.Instant instant31 = new org.joda.time.Instant(52L);
        boolean boolean32 = instant31.isEqualNow();
        org.joda.time.ReadableDuration readableDuration33 = null;
        org.joda.time.Instant instant34 = instant31.plus(readableDuration33);
        boolean boolean36 = instant34.equals((java.lang.Object) ' ');
        boolean boolean37 = instant22.isAfter((org.joda.time.ReadableInstant) instant34);
        int int38 = instant1.compareTo((org.joda.time.ReadableInstant) instant22);
        org.joda.time.DateTime dateTime39 = instant1.toDateTimeISO();
        org.joda.time.DateTime dateTime40 = instant1.toDateTime();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and dateTime39", (instant1.compareTo(dateTime39) == 0) == instant1.equals(dateTime39));
    }

    @Test
    public void test0172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0172");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField3 = gJChronology2.era();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.centuryOfEra();
        org.joda.time.DurationField durationField5 = gJChronology2.hours();
        org.joda.time.DurationField durationField6 = gJChronology2.eras();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology2.yearOfEra();
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField5 and durationField6", Math.signum(durationField5.compareTo(durationField6)) == -Math.signum(durationField6.compareTo(durationField5)));
    }

    @Test
    public void test0173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0173");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = gJChronology2.halfdays();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.clockhourOfDay();
        org.joda.time.DurationField durationField6 = gJChronology2.weeks();
        org.joda.time.DurationField durationField7 = gJChronology2.eras();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField7, durationField3, and durationField6", !(durationField7.compareTo(durationField3) == 0) || (Math.signum(durationField7.compareTo(durationField6)) == Math.signum(durationField3.compareTo(durationField6))));
    }

    @Test
    public void test0174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0174");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        boolean boolean2 = instant1.isEqualNow();
        java.lang.String str3 = instant1.toString();
        org.joda.time.Instant instant5 = new org.joda.time.Instant(52L);
        boolean boolean6 = instant5.isEqualNow();
        java.lang.String str7 = instant5.toString();
        java.lang.String str8 = instant5.toString();
        org.joda.time.Instant instant11 = instant5.withDurationAdded(115200000L, (int) (short) 1);
        int int12 = instant1.compareTo((org.joda.time.ReadableInstant) instant5);
        org.joda.time.MutableDateTime mutableDateTime13 = instant1.toMutableDateTimeISO();
        org.joda.time.ReadableDuration readableDuration14 = null;
        org.joda.time.Instant instant15 = instant1.minus(readableDuration14);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant5 and mutableDateTime13", (instant5.compareTo(mutableDateTime13) == 0) == instant5.equals(mutableDateTime13));
    }

    @Test
    public void test0175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0175");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        java.util.Locale locale4 = new java.util.Locale("hi!");
        java.lang.String str5 = locale4.getCountry();
        java.util.Locale locale6 = java.util.Locale.getDefault();
        java.lang.String str7 = locale6.getDisplayName();
        java.lang.String str8 = locale4.getDisplayScript(locale6);
        boolean boolean9 = dateTimeZone1.equals((java.lang.Object) locale6);
        int int11 = dateTimeZone1.getOffsetFromLocal((long) (short) 10);
        java.util.TimeZone timeZone12 = null;
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forTimeZone(timeZone12);
        org.joda.time.chrono.GJChronology gJChronology14 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone13);
        org.joda.time.DateTimeField dateTimeField15 = gJChronology14.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField16 = gJChronology14.weekyearOfCentury();
        org.joda.time.Instant instant17 = gJChronology14.getGregorianCutover();
        org.joda.time.Instant instant19 = instant17.withMillis(0L);
        org.joda.time.Instant instant21 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone22 = null;
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        org.joda.time.chrono.GJChronology gJChronology24 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone23);
        org.joda.time.DateTimeField dateTimeField25 = gJChronology24.millisOfSecond();
        int int26 = instant21.get(dateTimeField25);
        org.joda.time.Instant instant28 = instant21.plus(0L);
        int int29 = instant19.compareTo((org.joda.time.ReadableInstant) instant28);
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = null;
        boolean boolean31 = instant28.isSupported(dateTimeFieldType30);
        int int32 = dateTimeZone1.getOffset((org.joda.time.ReadableInstant) instant28);
        org.joda.time.DateTime dateTime33 = instant28.toDateTimeISO();
        org.joda.time.Instant instant35 = new org.joda.time.Instant(3155760000000L);
        org.joda.time.Instant instant36 = instant35.toInstant();
        int int37 = dateTime33.compareTo((org.joda.time.ReadableInstant) instant35);
        long long38 = instant35.getMillis();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant21 and dateTime33", (instant21.compareTo(dateTime33) == 0) == instant21.equals(dateTime33));
    }

    @Test
    public void test0176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0176");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = gJChronology2.halfdays();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.millisOfDay();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.minuteOfDay();
        org.joda.time.DurationField durationField6 = gJChronology2.centuries();
        int int7 = gJChronology2.getMinimumDaysInFirstWeek();
        org.joda.time.DateTimeField dateTimeField8 = gJChronology2.weekyear();
        org.joda.time.DateTimeField dateTimeField9 = gJChronology2.weekyearOfCentury();
        org.joda.time.DurationField durationField10 = gJChronology2.halfdays();
        org.joda.time.DurationField durationField11 = gJChronology2.days();
        org.joda.time.DurationField durationField12 = gJChronology2.centuries();
        org.joda.time.DurationField durationField13 = gJChronology2.eras();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField13, durationField3, and durationField6", !(durationField13.compareTo(durationField3) == 0) || (Math.signum(durationField13.compareTo(durationField6)) == Math.signum(durationField3.compareTo(durationField6))));
    }

    @Test
    public void test0177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0177");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forTimeZone(timeZone2);
        org.joda.time.chrono.GJChronology gJChronology4 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone3);
        org.joda.time.DateTimeField dateTimeField5 = gJChronology4.millisOfSecond();
        int int6 = instant1.get(dateTimeField5);
        boolean boolean7 = instant1.isEqualNow();
        org.joda.time.tz.NameProvider nameProvider8 = org.joda.time.DateTimeZone.getNameProvider();
        org.joda.time.DateTimeZone.setNameProvider(nameProvider8);
        org.joda.time.DateTimeZone.setNameProvider(nameProvider8);
        boolean boolean11 = instant1.equals((java.lang.Object) nameProvider8);
        org.joda.time.Instant instant13 = instant1.minus(0L);
        org.joda.time.MutableDateTime mutableDateTime14 = instant1.toMutableDateTimeISO();
        org.joda.time.Instant instant16 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone17 = null;
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forTimeZone(timeZone17);
        org.joda.time.chrono.GJChronology gJChronology19 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone18);
        org.joda.time.DateTimeField dateTimeField20 = gJChronology19.millisOfSecond();
        int int21 = instant16.get(dateTimeField20);
        org.joda.time.Instant instant23 = instant16.plus(0L);
        java.util.TimeZone timeZone24 = null;
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forTimeZone(timeZone24);
        org.joda.time.chrono.GJChronology gJChronology26 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone25);
        org.joda.time.DurationField durationField27 = gJChronology26.halfdays();
        org.joda.time.Chronology chronology28 = gJChronology26.withUTC();
        java.lang.String str29 = gJChronology26.toString();
        org.joda.time.DateTimeField dateTimeField30 = gJChronology26.hourOfHalfday();
        int int31 = instant16.get(dateTimeField30);
        org.joda.time.Instant instant33 = new org.joda.time.Instant(52L);
        boolean boolean34 = instant33.isEqualNow();
        java.lang.String str35 = instant33.toString();
        org.joda.time.Instant instant37 = new org.joda.time.Instant(52L);
        boolean boolean38 = instant37.isEqualNow();
        java.lang.String str39 = instant37.toString();
        java.lang.String str40 = instant37.toString();
        org.joda.time.Instant instant43 = instant37.withDurationAdded(115200000L, (int) (short) 1);
        int int44 = instant33.compareTo((org.joda.time.ReadableInstant) instant37);
        org.joda.time.Instant instant46 = new org.joda.time.Instant(52L);
        boolean boolean47 = instant46.isEqualNow();
        org.joda.time.ReadableDuration readableDuration48 = null;
        org.joda.time.Instant instant49 = instant46.plus(readableDuration48);
        boolean boolean51 = instant49.equals((java.lang.Object) ' ');
        boolean boolean52 = instant37.isAfter((org.joda.time.ReadableInstant) instant49);
        int int53 = instant16.compareTo((org.joda.time.ReadableInstant) instant37);
        java.util.Date date54 = instant37.toDate();
        int int55 = mutableDateTime14.compareTo((org.joda.time.ReadableInstant) instant37);
        org.joda.time.DateTimeZone dateTimeZone57 = org.joda.time.DateTimeZone.forOffsetMillis((int) '4');
        java.util.TimeZone timeZone58 = dateTimeZone57.toTimeZone();
        long long61 = dateTimeZone57.adjustOffset((long) 0, false);
        int int63 = dateTimeZone57.getOffsetFromLocal((-26438399999L));
        java.util.TimeZone timeZone64 = dateTimeZone57.toTimeZone();
        org.joda.time.DateTime dateTime65 = instant37.toDateTime(dateTimeZone57);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and mutableDateTime14", (instant1.compareTo(mutableDateTime14) == 0) == instant1.equals(mutableDateTime14));
    }

    @Test
    public void test0178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0178");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        boolean boolean2 = instant1.isEqualNow();
        boolean boolean4 = instant1.isEqual(0L);
        java.util.TimeZone timeZone5 = null;
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        org.joda.time.chrono.GJChronology gJChronology7 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone6);
        org.joda.time.DurationField durationField8 = gJChronology7.halfdays();
        long long12 = gJChronology7.add((long) 'a', (-1L), (int) (short) 0);
        boolean boolean14 = gJChronology7.equals((java.lang.Object) 0);
        org.joda.time.DateTimeField dateTimeField15 = gJChronology7.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField16 = gJChronology7.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField17 = gJChronology7.clockhourOfDay();
        long long21 = gJChronology7.add(262974600000L, (-4199880L), (int) (short) -1);
        org.joda.time.DateTimeField dateTimeField22 = gJChronology7.year();
        org.joda.time.MutableDateTime mutableDateTime23 = instant1.toMutableDateTime((org.joda.time.Chronology) gJChronology7);
        org.joda.time.DateTimeField dateTimeField24 = gJChronology7.minuteOfHour();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and mutableDateTime23", (instant1.compareTo(mutableDateTime23) == 0) == instant1.equals(mutableDateTime23));
    }

    @Test
    public void test0179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0179");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str3 = dateTimeZone1.getNameKey((long) 100);
        boolean boolean4 = dateTimeZone1.isFixed();
        org.joda.time.chrono.GJChronology gJChronology5 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        int int6 = gJChronology5.getMinimumDaysInFirstWeek();
        java.lang.String str7 = gJChronology5.toString();
        org.joda.time.DateTimeField dateTimeField8 = gJChronology5.yearOfEra();
        org.joda.time.DateTimeField dateTimeField9 = gJChronology5.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField10 = gJChronology5.dayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology12 = gJChronology5.withZone(dateTimeZone11);
        org.joda.time.DateTimeField dateTimeField13 = chronology12.millisOfSecond();
        java.util.TimeZone timeZone14 = null;
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forTimeZone(timeZone14);
        org.joda.time.chrono.GJChronology gJChronology16 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone15);
        int int18 = dateTimeZone15.getOffsetFromLocal((long) (-1));
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetHours((int) '4');
        long long22 = dateTimeZone15.getMillisKeepLocal(dateTimeZone20, (-8380800000L));
        org.joda.time.Chronology chronology23 = chronology12.withZone(dateTimeZone15);
        boolean boolean25 = dateTimeZone15.isStandardOffset(3600000L);
        org.joda.time.Instant instant27 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone28 = null;
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forTimeZone(timeZone28);
        org.joda.time.chrono.GJChronology gJChronology30 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone29);
        org.joda.time.DateTimeField dateTimeField31 = gJChronology30.millisOfSecond();
        int int32 = instant27.get(dateTimeField31);
        java.util.TimeZone timeZone33 = null;
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.forTimeZone(timeZone33);
        org.joda.time.chrono.GJChronology gJChronology35 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone34);
        org.joda.time.DurationField durationField36 = gJChronology35.halfdays();
        java.util.TimeZone timeZone37 = null;
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forTimeZone(timeZone37);
        org.joda.time.chrono.GJChronology gJChronology39 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone38);
        long long43 = dateTimeZone38.convertLocalToUTC((long) (byte) -1, true, 0L);
        boolean boolean45 = dateTimeZone38.equals((java.lang.Object) true);
        org.joda.time.Chronology chronology46 = gJChronology35.withZone(dateTimeZone38);
        org.joda.time.MutableDateTime mutableDateTime47 = instant27.toMutableDateTime(dateTimeZone38);
        int int48 = dateTimeZone15.getOffset((org.joda.time.ReadableInstant) instant27);
        org.joda.time.Instant instant50 = new org.joda.time.Instant(52L);
        boolean boolean51 = instant50.isEqualNow();
        java.lang.String str52 = instant50.toString();
        java.lang.String str53 = instant50.toString();
        org.joda.time.Instant instant55 = new org.joda.time.Instant(52L);
        boolean boolean56 = instant55.isEqualNow();
        org.joda.time.ReadableDuration readableDuration57 = null;
        org.joda.time.Instant instant58 = instant55.plus(readableDuration57);
        boolean boolean59 = instant50.isBefore((org.joda.time.ReadableInstant) instant58);
        org.joda.time.Instant instant61 = new org.joda.time.Instant(52L);
        boolean boolean62 = instant61.isEqualNow();
        org.joda.time.ReadableDuration readableDuration63 = null;
        org.joda.time.Instant instant64 = instant61.plus(readableDuration63);
        long long65 = instant61.getMillis();
        java.lang.String str66 = instant61.toString();
        org.joda.time.Instant instant67 = instant61.toInstant();
        boolean boolean68 = instant58.isAfter((org.joda.time.ReadableInstant) instant61);
        org.joda.time.chrono.GJChronology gJChronology69 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone15, (org.joda.time.ReadableInstant) instant61);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant27 and mutableDateTime47", (instant27.compareTo(mutableDateTime47) == 0) == instant27.equals(mutableDateTime47));
    }

    @Test
    public void test0180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0180");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        boolean boolean2 = instant1.isEqualNow();
        org.joda.time.ReadableDuration readableDuration3 = null;
        org.joda.time.Instant instant4 = instant1.plus(readableDuration3);
        org.joda.time.Instant instant6 = new org.joda.time.Instant(52L);
        org.joda.time.Instant instant8 = instant6.withMillis((long) 'u');
        boolean boolean9 = instant1.isBefore((org.joda.time.ReadableInstant) instant6);
        java.util.TimeZone timeZone10 = null;
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forTimeZone(timeZone10);
        org.joda.time.chrono.GJChronology gJChronology12 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone11);
        org.joda.time.DurationField durationField13 = gJChronology12.halfdays();
        long long17 = gJChronology12.add((long) 'a', (-1L), (int) (short) 0);
        long long21 = gJChronology12.add((long) (byte) 0, (long) '4', 100);
        org.joda.time.DateTimeField dateTimeField22 = gJChronology12.minuteOfHour();
        org.joda.time.DurationField durationField23 = gJChronology12.hours();
        org.joda.time.DateTimeField dateTimeField24 = gJChronology12.weekOfWeekyear();
        org.joda.time.DateTime dateTime25 = instant6.toDateTime((org.joda.time.Chronology) gJChronology12);
        java.util.TimeZone timeZone26 = null;
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forTimeZone(timeZone26);
        org.joda.time.chrono.GJChronology gJChronology28 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone27);
        org.joda.time.DateTimeField dateTimeField29 = gJChronology28.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField30 = gJChronology28.weekyearOfCentury();
        org.joda.time.Instant instant31 = gJChronology28.getGregorianCutover();
        org.joda.time.Instant instant33 = instant31.withMillis(0L);
        org.joda.time.Instant instant35 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone36 = null;
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.forTimeZone(timeZone36);
        org.joda.time.chrono.GJChronology gJChronology38 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone37);
        org.joda.time.DateTimeField dateTimeField39 = gJChronology38.millisOfSecond();
        int int40 = instant35.get(dateTimeField39);
        org.joda.time.Instant instant42 = instant35.plus(0L);
        int int43 = instant33.compareTo((org.joda.time.ReadableInstant) instant42);
        org.joda.time.Instant instant45 = new org.joda.time.Instant(52L);
        boolean boolean46 = instant45.isEqualNow();
        org.joda.time.ReadableDuration readableDuration47 = null;
        org.joda.time.Instant instant48 = instant45.plus(readableDuration47);
        boolean boolean50 = instant48.equals((java.lang.Object) ' ');
        boolean boolean51 = instant42.isEqual((org.joda.time.ReadableInstant) instant48);
        org.joda.time.ReadableDuration readableDuration52 = null;
        org.joda.time.Instant instant54 = instant42.withDurationAdded(readableDuration52, 0);
        boolean boolean55 = instant6.equals((java.lang.Object) instant54);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and dateTime25", (instant1.compareTo(dateTime25) == 0) == instant1.equals(dateTime25));
    }

    @Test
    public void test0181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0181");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        boolean boolean2 = instant1.isEqualNow();
        org.joda.time.ReadableDuration readableDuration3 = null;
        org.joda.time.Instant instant4 = instant1.plus(readableDuration3);
        long long5 = instant1.getMillis();
        java.lang.String str6 = instant1.toString();
        org.joda.time.Instant instant7 = instant1.toInstant();
        java.util.TimeZone timeZone8 = null;
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forTimeZone(timeZone8);
        java.lang.String str11 = dateTimeZone9.getNameKey((long) 100);
        long long14 = dateTimeZone9.convertLocalToUTC((-2246399965L), true);
        org.joda.time.MutableDateTime mutableDateTime15 = instant7.toMutableDateTime(dateTimeZone9);
        org.joda.time.Instant instant17 = instant7.minus((long) (-102228));
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant7 and mutableDateTime15", (instant7.compareTo(mutableDateTime15) == 0) == instant7.equals(mutableDateTime15));
    }

    @Test
    public void test0182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0182");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        org.joda.time.Instant instant3 = instant1.withMillis((long) 'u');
        java.util.TimeZone timeZone4 = null;
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forTimeZone(timeZone4);
        org.joda.time.chrono.GJChronology gJChronology6 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone5);
        org.joda.time.DurationField durationField7 = gJChronology6.halfdays();
        long long11 = gJChronology6.add((long) 'a', (-1L), (int) (short) 0);
        boolean boolean13 = gJChronology6.equals((java.lang.Object) 0);
        org.joda.time.DateTimeField dateTimeField14 = gJChronology6.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology6.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField16 = gJChronology6.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField17 = gJChronology6.clockhourOfHalfday();
        org.joda.time.DateTime dateTime18 = instant1.toDateTime((org.joda.time.Chronology) gJChronology6);
        java.util.TimeZone timeZone19 = null;
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forTimeZone(timeZone19);
        org.joda.time.chrono.GJChronology gJChronology21 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone20);
        org.joda.time.DurationField durationField22 = gJChronology21.halfdays();
        long long26 = gJChronology21.add((long) 'a', (-1L), (int) (short) 0);
        long long30 = gJChronology21.add((long) (byte) 0, (long) '4', 100);
        org.joda.time.DateTimeField dateTimeField31 = gJChronology21.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField32 = gJChronology21.year();
        org.joda.time.DateTimeField dateTimeField33 = gJChronology21.monthOfYear();
        org.joda.time.MutableDateTime mutableDateTime34 = instant1.toMutableDateTime((org.joda.time.Chronology) gJChronology21);
        org.joda.time.Instant instant35 = instant1.toInstant();
        java.util.TimeZone timeZone36 = null;
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.forTimeZone(timeZone36);
        org.joda.time.chrono.GJChronology gJChronology38 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone37);
        org.joda.time.DateTimeField dateTimeField39 = gJChronology38.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField40 = gJChronology38.weekyear();
        org.joda.time.DateTimeField dateTimeField41 = gJChronology38.halfdayOfDay();
        org.joda.time.DurationField durationField42 = gJChronology38.years();
        org.joda.time.DurationField durationField43 = gJChronology38.minutes();
        java.util.TimeZone timeZone44 = null;
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.forTimeZone(timeZone44);
        java.lang.String str47 = dateTimeZone45.getNameKey((long) 100);
        boolean boolean48 = dateTimeZone45.isFixed();
        org.joda.time.chrono.GJChronology gJChronology49 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone45);
        int int50 = gJChronology49.getMinimumDaysInFirstWeek();
        java.lang.String str51 = gJChronology49.toString();
        org.joda.time.DateTimeField dateTimeField52 = gJChronology49.yearOfEra();
        org.joda.time.DateTimeField dateTimeField53 = gJChronology49.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField54 = gJChronology49.dayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone55 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology56 = gJChronology49.withZone(dateTimeZone55);
        org.joda.time.Chronology chronology57 = gJChronology38.withZone(dateTimeZone55);
        org.joda.time.DurationField durationField58 = gJChronology38.years();
        boolean boolean59 = instant35.equals((java.lang.Object) durationField58);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant35 and dateTime18", (instant35.compareTo(dateTime18) == 0) == instant35.equals(dateTime18));
    }

    @Test
    public void test0183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0183");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        boolean boolean2 = instant1.isEqualNow();
        boolean boolean4 = instant1.isEqual(0L);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = null;
        boolean boolean6 = instant1.isSupported(dateTimeFieldType5);
        org.joda.time.Instant instant9 = instant1.withDurationAdded((-61827926399999L), (int) (short) -1);
        org.joda.time.MutableDateTime mutableDateTime10 = instant9.toMutableDateTime();
        org.joda.time.Instant instant11 = instant9.toInstant();
        org.joda.time.Instant instant13 = new org.joda.time.Instant(3600000L);
        org.joda.time.ReadableDuration readableDuration14 = null;
        org.joda.time.Instant instant15 = instant13.minus(readableDuration14);
        boolean boolean16 = instant11.isAfter((org.joda.time.ReadableInstant) instant15);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant11 and mutableDateTime10", (instant11.compareTo(mutableDateTime10) == 0) == instant11.equals(mutableDateTime10));
    }

    @Test
    public void test0184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0184");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        boolean boolean2 = instant1.isEqualNow();
        boolean boolean4 = instant1.isEqual(0L);
        java.util.TimeZone timeZone5 = null;
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        org.joda.time.chrono.GJChronology gJChronology7 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone6);
        org.joda.time.DurationField durationField8 = gJChronology7.halfdays();
        long long12 = gJChronology7.add((long) 'a', (-1L), (int) (short) 0);
        boolean boolean14 = gJChronology7.equals((java.lang.Object) 0);
        org.joda.time.DateTimeField dateTimeField15 = gJChronology7.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField16 = gJChronology7.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField17 = gJChronology7.clockhourOfDay();
        long long21 = gJChronology7.add(262974600000L, (-4199880L), (int) (short) -1);
        org.joda.time.DateTimeField dateTimeField22 = gJChronology7.year();
        org.joda.time.MutableDateTime mutableDateTime23 = instant1.toMutableDateTime((org.joda.time.Chronology) gJChronology7);
        java.util.TimeZone timeZone24 = null;
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forTimeZone(timeZone24);
        org.joda.time.chrono.GJChronology gJChronology26 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone25);
        long long30 = dateTimeZone25.convertLocalToUTC((long) (byte) -1, true, 0L);
        boolean boolean32 = dateTimeZone25.equals((java.lang.Object) true);
        long long34 = dateTimeZone25.nextTransition((long) '4');
        java.lang.String str36 = dateTimeZone25.getShortName(432000001L);
        java.util.TimeZone timeZone37 = dateTimeZone25.toTimeZone();
        org.joda.time.DateTime dateTime38 = mutableDateTime23.toDateTime(dateTimeZone25);
        boolean boolean39 = mutableDateTime23.isEqualNow();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and dateTime38", (instant1.compareTo(dateTime38) == 0) == instant1.equals(dateTime38));
    }

    @Test
    public void test0185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0185");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        boolean boolean2 = instant1.isEqualNow();
        org.joda.time.ReadableDuration readableDuration3 = null;
        org.joda.time.Instant instant4 = instant1.plus(readableDuration3);
        org.joda.time.Instant instant6 = new org.joda.time.Instant(52L);
        org.joda.time.Instant instant8 = instant6.withMillis((long) 'u');
        boolean boolean9 = instant1.isBefore((org.joda.time.ReadableInstant) instant6);
        org.joda.time.Instant instant10 = instant6.toInstant();
        org.joda.time.MutableDateTime mutableDateTime11 = instant6.toMutableDateTime();
        java.util.Date date12 = instant6.toDate();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and mutableDateTime11", (instant1.compareTo(mutableDateTime11) == 0) == instant1.equals(mutableDateTime11));
    }

    @Test
    public void test0186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0186");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str3 = dateTimeZone1.getNameKey((long) 100);
        boolean boolean4 = dateTimeZone1.isFixed();
        java.util.Locale locale8 = new java.util.Locale("DurationField[halfdays]", "\u82f1\u6587");
        java.lang.String str9 = dateTimeZone1.getName((long) (short) 10, locale8);
        org.joda.time.Instant instant11 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone12 = null;
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forTimeZone(timeZone12);
        org.joda.time.chrono.GJChronology gJChronology14 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone13);
        org.joda.time.DateTimeField dateTimeField15 = gJChronology14.millisOfSecond();
        int int16 = instant11.get(dateTimeField15);
        org.joda.time.Chronology chronology17 = instant11.getChronology();
        org.joda.time.chrono.GJChronology gJChronology18 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1, (org.joda.time.ReadableInstant) instant11);
        org.joda.time.DateTime dateTime19 = instant11.toDateTime();
        org.joda.time.ReadableDuration readableDuration20 = null;
        org.joda.time.Instant instant21 = instant11.minus(readableDuration20);
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = null;
        boolean boolean23 = instant11.isSupported(dateTimeFieldType22);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime19 and instant11", (dateTime19.compareTo(instant11) == 0) == dateTime19.equals(instant11));
    }

    @Test
    public void test0187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0187");
        org.joda.time.Instant instant0 = org.joda.time.Instant.now();
        boolean boolean2 = instant0.isBefore(0L);
        org.joda.time.Instant instant4 = new org.joda.time.Instant(52L);
        org.joda.time.Instant instant6 = instant4.withMillis((long) 'u');
        java.util.TimeZone timeZone7 = null;
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forTimeZone(timeZone7);
        org.joda.time.chrono.GJChronology gJChronology9 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone8);
        org.joda.time.DurationField durationField10 = gJChronology9.halfdays();
        long long14 = gJChronology9.add((long) 'a', (-1L), (int) (short) 0);
        boolean boolean16 = gJChronology9.equals((java.lang.Object) 0);
        org.joda.time.DateTimeField dateTimeField17 = gJChronology9.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField18 = gJChronology9.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField19 = gJChronology9.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField20 = gJChronology9.clockhourOfHalfday();
        org.joda.time.DateTime dateTime21 = instant4.toDateTime((org.joda.time.Chronology) gJChronology9);
        boolean boolean22 = instant0.isEqual((org.joda.time.ReadableInstant) dateTime21);
        java.util.Date date23 = instant0.toDate();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant4 and dateTime21", (instant4.compareTo(dateTime21) == 0) == instant4.equals(dateTime21));
    }

    @Test
    public void test0188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0188");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = gJChronology2.halfdays();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.millisOfDay();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.monthOfYear();
        org.joda.time.Chronology chronology6 = gJChronology2.withUTC();
        org.joda.time.Instant instant7 = gJChronology2.getGregorianCutover();
        java.util.TimeZone timeZone8 = null;
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forTimeZone(timeZone8);
        org.joda.time.chrono.GJChronology gJChronology10 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone9);
        org.joda.time.DateTimeField dateTimeField11 = gJChronology10.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField12 = gJChronology10.weekyearOfCentury();
        org.joda.time.Instant instant13 = gJChronology10.getGregorianCutover();
        org.joda.time.Instant instant15 = instant13.withMillis(0L);
        org.joda.time.Instant instant17 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone18 = null;
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forTimeZone(timeZone18);
        org.joda.time.chrono.GJChronology gJChronology20 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone19);
        org.joda.time.DateTimeField dateTimeField21 = gJChronology20.millisOfSecond();
        int int22 = instant17.get(dateTimeField21);
        org.joda.time.Instant instant24 = instant17.plus(0L);
        int int25 = instant15.compareTo((org.joda.time.ReadableInstant) instant24);
        java.util.TimeZone timeZone26 = null;
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forTimeZone(timeZone26);
        org.joda.time.chrono.GJChronology gJChronology28 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone27);
        org.joda.time.DurationField durationField29 = gJChronology28.halfdays();
        org.joda.time.DateTimeField dateTimeField30 = gJChronology28.millisOfDay();
        org.joda.time.DateTimeField dateTimeField31 = gJChronology28.minuteOfDay();
        org.joda.time.DurationField durationField32 = gJChronology28.centuries();
        org.joda.time.DateTimeField dateTimeField33 = gJChronology28.halfdayOfDay();
        java.util.Locale locale34 = java.util.Locale.ITALIAN;
        java.util.Locale locale35 = locale34.stripExtensions();
        java.util.Locale locale36 = java.util.Locale.CANADA;
        java.lang.String str37 = locale34.getDisplayVariant(locale36);
        boolean boolean38 = gJChronology28.equals((java.lang.Object) locale36);
        org.joda.time.DateTime dateTime39 = instant15.toDateTime((org.joda.time.Chronology) gJChronology28);
        boolean boolean40 = instant7.isAfter((org.joda.time.ReadableInstant) dateTime39);
        java.util.TimeZone timeZone41 = null;
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.forTimeZone(timeZone41);
        java.lang.String str44 = dateTimeZone42.getNameKey((long) 100);
        boolean boolean45 = dateTimeZone42.isFixed();
        long long48 = dateTimeZone42.adjustOffset((long) (short) 10, true);
        boolean boolean49 = dateTimeZone42.isFixed();
        org.joda.time.DateTime dateTime50 = instant7.toDateTime(dateTimeZone42);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant15 and dateTime39", (instant15.compareTo(dateTime39) == 0) == instant15.equals(dateTime39));
    }

    @Test
    public void test0189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0189");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        java.util.Locale locale4 = new java.util.Locale("hi!");
        java.lang.String str5 = locale4.getCountry();
        java.util.Locale locale6 = java.util.Locale.getDefault();
        java.lang.String str7 = locale6.getDisplayName();
        java.lang.String str8 = locale4.getDisplayScript(locale6);
        boolean boolean9 = dateTimeZone1.equals((java.lang.Object) locale6);
        int int11 = dateTimeZone1.getOffsetFromLocal((long) (short) 10);
        java.util.TimeZone timeZone12 = null;
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forTimeZone(timeZone12);
        org.joda.time.chrono.GJChronology gJChronology14 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone13);
        org.joda.time.DateTimeField dateTimeField15 = gJChronology14.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField16 = gJChronology14.weekyearOfCentury();
        org.joda.time.Instant instant17 = gJChronology14.getGregorianCutover();
        org.joda.time.Instant instant19 = instant17.withMillis(0L);
        org.joda.time.Instant instant21 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone22 = null;
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        org.joda.time.chrono.GJChronology gJChronology24 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone23);
        org.joda.time.DateTimeField dateTimeField25 = gJChronology24.millisOfSecond();
        int int26 = instant21.get(dateTimeField25);
        org.joda.time.Instant instant28 = instant21.plus(0L);
        int int29 = instant19.compareTo((org.joda.time.ReadableInstant) instant28);
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = null;
        boolean boolean31 = instant28.isSupported(dateTimeFieldType30);
        int int32 = dateTimeZone1.getOffset((org.joda.time.ReadableInstant) instant28);
        boolean boolean34 = instant28.isAfter(1000L);
        java.util.TimeZone timeZone35 = null;
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.forTimeZone(timeZone35);
        org.joda.time.chrono.GJChronology gJChronology37 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone36);
        org.joda.time.DurationField durationField38 = gJChronology37.halfdays();
        long long42 = gJChronology37.add(0L, (long) (short) -1, (int) '4');
        java.util.TimeZone timeZone43 = null;
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.forTimeZone(timeZone43);
        org.joda.time.chrono.GJChronology gJChronology45 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone44);
        org.joda.time.DurationField durationField46 = gJChronology45.halfdays();
        org.joda.time.DateTimeField dateTimeField47 = gJChronology45.millisOfDay();
        org.joda.time.DateTimeField dateTimeField48 = gJChronology45.minuteOfDay();
        org.joda.time.DurationField durationField49 = gJChronology45.centuries();
        org.joda.time.DateTimeField dateTimeField50 = gJChronology45.dayOfYear();
        java.lang.String str51 = gJChronology45.toString();
        org.joda.time.DurationField durationField52 = gJChronology45.years();
        org.joda.time.DateTimeField dateTimeField53 = gJChronology45.yearOfEra();
        org.joda.time.DateTimeZone dateTimeZone56 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(0, (int) (short) 10);
        org.joda.time.Chronology chronology57 = gJChronology45.withZone(dateTimeZone56);
        org.joda.time.Chronology chronology58 = gJChronology37.withZone(dateTimeZone56);
        org.joda.time.DurationField durationField59 = gJChronology37.halfdays();
        org.joda.time.Instant instant60 = gJChronology37.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration61 = null;
        org.joda.time.Instant instant62 = instant60.plus(readableDuration61);
        org.joda.time.DateTime dateTime63 = instant62.toDateTimeISO();
        boolean boolean64 = instant28.isBefore((org.joda.time.ReadableInstant) instant62);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant62 and dateTime63", (instant62.compareTo(dateTime63) == 0) == instant62.equals(dateTime63));
    }

    @Test
    public void test0190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0190");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forTimeZone(timeZone2);
        org.joda.time.chrono.GJChronology gJChronology4 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone3);
        org.joda.time.DateTimeField dateTimeField5 = gJChronology4.millisOfSecond();
        int int6 = instant1.get(dateTimeField5);
        org.joda.time.Instant instant8 = instant1.plus(0L);
        java.util.TimeZone timeZone9 = null;
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forTimeZone(timeZone9);
        org.joda.time.chrono.GJChronology gJChronology11 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone10);
        org.joda.time.DurationField durationField12 = gJChronology11.halfdays();
        long long16 = gJChronology11.add((long) 'a', (-1L), (int) (short) 0);
        boolean boolean18 = gJChronology11.equals((java.lang.Object) 0);
        org.joda.time.DateTimeField dateTimeField19 = gJChronology11.dayOfMonth();
        org.joda.time.DurationField durationField20 = gJChronology11.days();
        long long24 = gJChronology11.add((long) '4', 432000000L, (int) (short) 0);
        org.joda.time.DurationField durationField25 = gJChronology11.years();
        java.lang.String str26 = gJChronology11.toString();
        org.joda.time.DateTimeField dateTimeField27 = gJChronology11.hourOfDay();
        boolean boolean28 = instant8.equals((java.lang.Object) gJChronology11);
        org.joda.time.DateTime dateTime29 = instant8.toDateTime();
        org.joda.time.Instant instant31 = new org.joda.time.Instant(52L);
        boolean boolean32 = instant31.isEqualNow();
        java.lang.String str33 = instant31.toString();
        java.lang.String str34 = instant31.toString();
        org.joda.time.Instant instant37 = instant31.withDurationAdded(115200000L, (int) (short) 1);
        boolean boolean38 = instant37.isBeforeNow();
        org.joda.time.DateTime dateTime39 = instant37.toDateTimeISO();
        boolean boolean40 = instant8.isEqual((org.joda.time.ReadableInstant) instant37);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant8 and dateTime29", (instant8.compareTo(dateTime29) == 0) == instant8.equals(dateTime29));
    }

    @Test
    public void test0191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0191");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis((int) '4');
        java.util.TimeZone timeZone2 = dateTimeZone1.toTimeZone();
        long long5 = dateTimeZone1.adjustOffset((long) 0, false);
        int int7 = dateTimeZone1.getOffsetFromLocal((-26438399999L));
        java.util.TimeZone timeZone8 = dateTimeZone1.toTimeZone();
        java.lang.String str9 = dateTimeZone1.getID();
        java.util.Locale locale11 = null;
        java.lang.String str12 = dateTimeZone1.getShortName(115200000L, locale11);
        java.util.TimeZone timeZone13 = null;
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forTimeZone(timeZone13);
        org.joda.time.chrono.GJChronology gJChronology15 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone14);
        java.util.Locale locale17 = new java.util.Locale("hi!");
        java.lang.String str18 = locale17.getCountry();
        java.util.Locale locale19 = java.util.Locale.getDefault();
        java.lang.String str20 = locale19.getDisplayName();
        java.lang.String str21 = locale17.getDisplayScript(locale19);
        boolean boolean22 = dateTimeZone14.equals((java.lang.Object) locale19);
        int int24 = dateTimeZone14.getOffsetFromLocal((long) (short) 10);
        java.util.TimeZone timeZone25 = null;
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forTimeZone(timeZone25);
        org.joda.time.chrono.GJChronology gJChronology27 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone26);
        org.joda.time.DateTimeField dateTimeField28 = gJChronology27.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField29 = gJChronology27.weekyearOfCentury();
        org.joda.time.Instant instant30 = gJChronology27.getGregorianCutover();
        org.joda.time.Instant instant32 = instant30.withMillis(0L);
        org.joda.time.Instant instant34 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone35 = null;
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.forTimeZone(timeZone35);
        org.joda.time.chrono.GJChronology gJChronology37 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone36);
        org.joda.time.DateTimeField dateTimeField38 = gJChronology37.millisOfSecond();
        int int39 = instant34.get(dateTimeField38);
        org.joda.time.Instant instant41 = instant34.plus(0L);
        int int42 = instant32.compareTo((org.joda.time.ReadableInstant) instant41);
        org.joda.time.DateTimeFieldType dateTimeFieldType43 = null;
        boolean boolean44 = instant41.isSupported(dateTimeFieldType43);
        int int45 = dateTimeZone14.getOffset((org.joda.time.ReadableInstant) instant41);
        org.joda.time.DateTime dateTime46 = instant41.toDateTimeISO();
        org.joda.time.Instant instant48 = new org.joda.time.Instant(3155760000000L);
        org.joda.time.Instant instant49 = instant48.toInstant();
        int int50 = dateTime46.compareTo((org.joda.time.ReadableInstant) instant48);
        org.joda.time.Instant instant52 = new org.joda.time.Instant(52L);
        boolean boolean53 = instant52.isEqualNow();
        java.lang.String str54 = instant52.toString();
        org.joda.time.Instant instant56 = new org.joda.time.Instant(52L);
        boolean boolean57 = instant56.isEqualNow();
        java.lang.String str58 = instant56.toString();
        java.lang.String str59 = instant56.toString();
        org.joda.time.Instant instant62 = instant56.withDurationAdded(115200000L, (int) (short) 1);
        int int63 = instant52.compareTo((org.joda.time.ReadableInstant) instant56);
        org.joda.time.Instant instant65 = new org.joda.time.Instant(52L);
        boolean boolean66 = instant65.isEqualNow();
        org.joda.time.ReadableDuration readableDuration67 = null;
        org.joda.time.Instant instant68 = instant65.plus(readableDuration67);
        boolean boolean70 = instant68.equals((java.lang.Object) ' ');
        boolean boolean71 = instant56.isAfter((org.joda.time.ReadableInstant) instant68);
        java.lang.String str72 = instant68.toString();
        java.lang.String str73 = instant68.toString();
        boolean boolean74 = dateTime46.isEqual((org.joda.time.ReadableInstant) instant68);
        org.joda.time.DateTimeZone dateTimeZone75 = dateTime46.getZone();
        long long77 = dateTimeZone1.getMillisKeepLocal(dateTimeZone75, (-3155673600052L));
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant34 and dateTime46", (instant34.compareTo(dateTime46) == 0) == instant34.equals(dateTime46));
    }

    @Test
    public void test0192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0192");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        boolean boolean2 = instant1.isEqualNow();
        java.lang.String str3 = instant1.toString();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.MutableDateTime mutableDateTime5 = instant1.toMutableDateTime(chronology4);
        org.joda.time.MutableDateTime mutableDateTime6 = instant1.toMutableDateTime();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(1, 10);
        org.joda.time.LocalDateTime localDateTime10 = null;
        boolean boolean11 = dateTimeZone9.isLocalDateTimeGap(localDateTime10);
        boolean boolean12 = dateTimeZone9.isFixed();
        java.util.Locale.Category category14 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale15 = java.util.Locale.CANADA;
        java.lang.String str16 = locale15.getISO3Language();
        java.util.Locale.setDefault(category14, locale15);
        java.util.Locale locale20 = new java.util.Locale("cinese (Taiwan)", "DurationField[weekyears]");
        java.util.Set<java.lang.String> strSet21 = locale20.getUnicodeLocaleAttributes();
        java.lang.String str22 = locale15.getDisplayLanguage(locale20);
        java.lang.String str23 = dateTimeZone9.getShortName((long) 10, locale15);
        org.joda.time.MutableDateTime mutableDateTime24 = instant1.toMutableDateTime(dateTimeZone9);
        org.joda.time.Instant instant26 = instant1.plus((-53L));
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime5 and mutableDateTime24", (mutableDateTime5.compareTo(mutableDateTime24) == 0) == mutableDateTime5.equals(mutableDateTime24));
    }

    @Test
    public void test0193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0193");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forTimeZone(timeZone2);
        org.joda.time.chrono.GJChronology gJChronology4 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone3);
        org.joda.time.DateTimeField dateTimeField5 = gJChronology4.millisOfSecond();
        int int6 = instant1.get(dateTimeField5);
        org.joda.time.Instant instant8 = instant1.plus(0L);
        org.joda.time.Instant instant9 = instant8.toInstant();
        org.joda.time.Instant instant11 = new org.joda.time.Instant(52L);
        boolean boolean12 = instant11.isEqualNow();
        java.lang.String str13 = instant11.toString();
        java.lang.String str14 = instant11.toString();
        org.joda.time.Instant instant16 = new org.joda.time.Instant(52L);
        boolean boolean17 = instant16.isEqualNow();
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.Instant instant19 = instant16.plus(readableDuration18);
        boolean boolean20 = instant11.isBefore((org.joda.time.ReadableInstant) instant19);
        org.joda.time.Instant instant22 = instant11.minus((long) 0);
        int int23 = instant8.compareTo((org.joda.time.ReadableInstant) instant11);
        org.joda.time.Instant instant26 = instant11.withDurationAdded((long) (short) 100, 70);
        org.joda.time.ReadableInstant readableInstant27 = null;
        boolean boolean28 = instant11.isBefore(readableInstant27);
        org.joda.time.Instant instant30 = new org.joda.time.Instant(52L);
        boolean boolean31 = instant30.isEqualNow();
        org.joda.time.ReadableDuration readableDuration32 = null;
        org.joda.time.Instant instant33 = instant30.plus(readableDuration32);
        long long34 = instant30.getMillis();
        java.lang.String str35 = instant30.toString();
        org.joda.time.Instant instant36 = instant30.toInstant();
        org.joda.time.ReadableDuration readableDuration37 = null;
        org.joda.time.Instant instant39 = instant30.withDurationAdded(readableDuration37, (int) 'x');
        java.util.TimeZone timeZone40 = null;
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.forTimeZone(timeZone40);
        java.lang.String str43 = dateTimeZone41.getNameKey((long) 100);
        boolean boolean44 = dateTimeZone41.isFixed();
        org.joda.time.chrono.GJChronology gJChronology45 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone41);
        java.lang.String str46 = dateTimeZone41.toString();
        org.joda.time.DateTime dateTime47 = instant39.toDateTime(dateTimeZone41);
        boolean boolean48 = instant11.isBefore((org.joda.time.ReadableInstant) dateTime47);
        java.lang.String str49 = instant11.toString();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and dateTime47", (instant1.compareTo(dateTime47) == 0) == instant1.equals(dateTime47));
    }

    @Test
    public void test0194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0194");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        boolean boolean2 = instant1.isEqualNow();
        org.joda.time.ReadableDuration readableDuration3 = null;
        org.joda.time.Instant instant4 = instant1.plus(readableDuration3);
        long long5 = instant1.getMillis();
        java.lang.Object obj6 = null;
        boolean boolean7 = instant1.equals(obj6);
        java.util.TimeZone timeZone8 = null;
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forTimeZone(timeZone8);
        org.joda.time.chrono.GJChronology gJChronology10 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone9);
        org.joda.time.DateTimeField dateTimeField11 = gJChronology10.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField12 = gJChronology10.weekyearOfCentury();
        org.joda.time.Instant instant13 = gJChronology10.getGregorianCutover();
        org.joda.time.Instant instant15 = new org.joda.time.Instant(52L);
        boolean boolean16 = instant15.isEqualNow();
        java.lang.String str17 = instant15.toString();
        java.lang.String str18 = instant15.toString();
        org.joda.time.Instant instant20 = new org.joda.time.Instant(52L);
        boolean boolean21 = instant20.isEqualNow();
        org.joda.time.ReadableDuration readableDuration22 = null;
        org.joda.time.Instant instant23 = instant20.plus(readableDuration22);
        boolean boolean24 = instant15.isBefore((org.joda.time.ReadableInstant) instant23);
        org.joda.time.Instant instant26 = instant23.plus((long) (short) 100);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.MutableDateTime mutableDateTime28 = instant23.toMutableDateTime(chronology27);
        boolean boolean29 = instant13.isEqual((org.joda.time.ReadableInstant) mutableDateTime28);
        boolean boolean30 = instant1.isAfter((org.joda.time.ReadableInstant) mutableDateTime28);
        org.joda.time.MutableDateTime mutableDateTime31 = instant1.toMutableDateTime();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and mutableDateTime28", (instant1.compareTo(mutableDateTime28) == 0) == instant1.equals(mutableDateTime28));
    }

    @Test
    public void test0195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0195");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        boolean boolean2 = instant1.isEqualNow();
        java.lang.String str3 = instant1.toString();
        java.lang.String str4 = instant1.toString();
        org.joda.time.Instant instant7 = instant1.withDurationAdded(115200000L, (int) (short) 1);
        java.util.TimeZone timeZone8 = null;
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forTimeZone(timeZone8);
        java.lang.String str11 = dateTimeZone9.getNameKey((long) 100);
        boolean boolean12 = dateTimeZone9.isFixed();
        org.joda.time.DateTime dateTime13 = instant1.toDateTime(dateTimeZone9);
        java.util.TimeZone timeZone14 = null;
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forTimeZone(timeZone14);
        org.joda.time.chrono.GJChronology gJChronology16 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone15);
        org.joda.time.DurationField durationField17 = gJChronology16.halfdays();
        long long21 = gJChronology16.add((long) 'a', (-1L), (int) (short) 0);
        boolean boolean23 = gJChronology16.equals((java.lang.Object) 0);
        org.joda.time.DateTimeField dateTimeField24 = gJChronology16.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField25 = gJChronology16.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField26 = gJChronology16.clockhourOfDay();
        long long31 = gJChronology16.getDateTimeMillis(10, (int) (short) 10, 4, (int) (byte) 1);
        org.joda.time.DateTimeField dateTimeField32 = gJChronology16.millisOfDay();
        java.lang.String str33 = gJChronology16.toString();
        org.joda.time.DateTimeField dateTimeField34 = gJChronology16.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField35 = gJChronology16.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField36 = gJChronology16.halfdayOfDay();
        java.util.TimeZone timeZone37 = null;
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forTimeZone(timeZone37);
        org.joda.time.chrono.GJChronology gJChronology39 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone38);
        org.joda.time.DurationField durationField40 = gJChronology39.halfdays();
        long long44 = gJChronology39.add((long) 'a', (-1L), (int) (short) 0);
        long long48 = gJChronology39.add((long) (byte) 0, (long) '4', 100);
        org.joda.time.DurationField durationField49 = gJChronology39.years();
        org.joda.time.DateTimeField dateTimeField50 = gJChronology39.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone51 = gJChronology39.getZone();
        org.joda.time.Chronology chronology52 = gJChronology16.withZone(dateTimeZone51);
        org.joda.time.MutableDateTime mutableDateTime53 = dateTime13.toMutableDateTime(dateTimeZone51);
        long long56 = dateTimeZone51.adjustOffset((-244872043829L), false);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and dateTime13", (instant1.compareTo(dateTime13) == 0) == instant1.equals(dateTime13));
    }

    @Test
    public void test0196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0196");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = gJChronology2.halfdays();
        long long7 = gJChronology2.add((long) 'a', (-1L), (int) (short) 0);
        org.joda.time.DateTimeField dateTimeField8 = gJChronology2.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField9 = gJChronology2.secondOfMinute();
        org.joda.time.Instant instant11 = new org.joda.time.Instant(52L);
        boolean boolean12 = instant11.isEqualNow();
        org.joda.time.ReadableDuration readableDuration13 = null;
        org.joda.time.Instant instant14 = instant11.plus(readableDuration13);
        boolean boolean15 = gJChronology2.equals((java.lang.Object) instant11);
        java.util.TimeZone timeZone16 = null;
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forTimeZone(timeZone16);
        org.joda.time.chrono.GJChronology gJChronology18 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone17);
        org.joda.time.DurationField durationField19 = gJChronology18.halfdays();
        org.joda.time.DateTimeField dateTimeField20 = gJChronology18.millisOfDay();
        org.joda.time.DateTimeField dateTimeField21 = gJChronology18.minuteOfDay();
        org.joda.time.DurationField durationField22 = gJChronology18.centuries();
        org.joda.time.DateTimeField dateTimeField23 = gJChronology18.dayOfYear();
        java.lang.String str24 = gJChronology18.toString();
        org.joda.time.DateTimeField dateTimeField25 = gJChronology18.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone26 = gJChronology18.getZone();
        org.joda.time.DateTime dateTime27 = instant11.toDateTime((org.joda.time.Chronology) gJChronology18);
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        long long31 = gJChronology18.add(readablePeriod28, (long) 4, 0);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant11 and dateTime27", (instant11.compareTo(dateTime27) == 0) == instant11.equals(dateTime27));
    }

    @Test
    public void test0197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0197");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        boolean boolean2 = instant1.isEqualNow();
        java.lang.String str3 = instant1.toString();
        java.util.TimeZone timeZone4 = null;
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forTimeZone(timeZone4);
        org.joda.time.chrono.GJChronology gJChronology6 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone5);
        java.util.Locale locale8 = new java.util.Locale("hi!");
        java.lang.String str9 = locale8.getCountry();
        java.util.Locale locale10 = java.util.Locale.getDefault();
        java.lang.String str11 = locale10.getDisplayName();
        java.lang.String str12 = locale8.getDisplayScript(locale10);
        boolean boolean13 = dateTimeZone5.equals((java.lang.Object) locale10);
        int int15 = dateTimeZone5.getOffsetFromLocal((long) (short) 10);
        java.util.TimeZone timeZone16 = null;
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forTimeZone(timeZone16);
        org.joda.time.chrono.GJChronology gJChronology18 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone17);
        org.joda.time.DateTimeField dateTimeField19 = gJChronology18.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField20 = gJChronology18.weekyearOfCentury();
        org.joda.time.Instant instant21 = gJChronology18.getGregorianCutover();
        org.joda.time.Instant instant23 = instant21.withMillis(0L);
        org.joda.time.Instant instant25 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone26 = null;
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forTimeZone(timeZone26);
        org.joda.time.chrono.GJChronology gJChronology28 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone27);
        org.joda.time.DateTimeField dateTimeField29 = gJChronology28.millisOfSecond();
        int int30 = instant25.get(dateTimeField29);
        org.joda.time.Instant instant32 = instant25.plus(0L);
        int int33 = instant23.compareTo((org.joda.time.ReadableInstant) instant32);
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = null;
        boolean boolean35 = instant32.isSupported(dateTimeFieldType34);
        int int36 = dateTimeZone5.getOffset((org.joda.time.ReadableInstant) instant32);
        boolean boolean37 = instant1.isAfter((org.joda.time.ReadableInstant) instant32);
        org.joda.time.Instant instant39 = instant32.withMillis((long) 10);
        org.joda.time.DateTime dateTime40 = instant32.toDateTimeISO();
        org.joda.time.Instant instant42 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone43 = null;
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.forTimeZone(timeZone43);
        org.joda.time.chrono.GJChronology gJChronology45 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone44);
        org.joda.time.DateTimeField dateTimeField46 = gJChronology45.millisOfSecond();
        int int47 = instant42.get(dateTimeField46);
        org.joda.time.Instant instant49 = instant42.plus(0L);
        java.util.TimeZone timeZone50 = null;
        org.joda.time.DateTimeZone dateTimeZone51 = org.joda.time.DateTimeZone.forTimeZone(timeZone50);
        org.joda.time.chrono.GJChronology gJChronology52 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone51);
        org.joda.time.DurationField durationField53 = gJChronology52.halfdays();
        org.joda.time.Chronology chronology54 = gJChronology52.withUTC();
        java.lang.String str55 = gJChronology52.toString();
        org.joda.time.DateTimeField dateTimeField56 = gJChronology52.hourOfHalfday();
        int int57 = instant42.get(dateTimeField56);
        boolean boolean58 = dateTime40.isBefore((org.joda.time.ReadableInstant) instant42);
        org.joda.time.Instant instant60 = new org.joda.time.Instant((java.lang.Object) (-22087032463023600L));
        boolean boolean61 = instant42.equals((java.lang.Object) instant60);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and dateTime40", (instant1.compareTo(dateTime40) == 0) == instant1.equals(dateTime40));
    }

    @Test
    public void test0198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0198");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        boolean boolean2 = instant1.isEqualNow();
        java.lang.String str3 = instant1.toString();
        java.util.TimeZone timeZone4 = null;
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forTimeZone(timeZone4);
        org.joda.time.chrono.GJChronology gJChronology6 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone5);
        java.util.Locale locale8 = new java.util.Locale("hi!");
        java.lang.String str9 = locale8.getCountry();
        java.util.Locale locale10 = java.util.Locale.getDefault();
        java.lang.String str11 = locale10.getDisplayName();
        java.lang.String str12 = locale8.getDisplayScript(locale10);
        boolean boolean13 = dateTimeZone5.equals((java.lang.Object) locale10);
        int int15 = dateTimeZone5.getOffsetFromLocal((long) (short) 10);
        java.util.TimeZone timeZone16 = null;
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forTimeZone(timeZone16);
        org.joda.time.chrono.GJChronology gJChronology18 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone17);
        org.joda.time.DateTimeField dateTimeField19 = gJChronology18.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField20 = gJChronology18.weekyearOfCentury();
        org.joda.time.Instant instant21 = gJChronology18.getGregorianCutover();
        org.joda.time.Instant instant23 = instant21.withMillis(0L);
        org.joda.time.Instant instant25 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone26 = null;
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forTimeZone(timeZone26);
        org.joda.time.chrono.GJChronology gJChronology28 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone27);
        org.joda.time.DateTimeField dateTimeField29 = gJChronology28.millisOfSecond();
        int int30 = instant25.get(dateTimeField29);
        org.joda.time.Instant instant32 = instant25.plus(0L);
        int int33 = instant23.compareTo((org.joda.time.ReadableInstant) instant32);
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = null;
        boolean boolean35 = instant32.isSupported(dateTimeFieldType34);
        int int36 = dateTimeZone5.getOffset((org.joda.time.ReadableInstant) instant32);
        boolean boolean37 = instant1.isAfter((org.joda.time.ReadableInstant) instant32);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter38 = null;
        java.lang.String str39 = instant1.toString(dateTimeFormatter38);
        org.joda.time.Instant instant40 = org.joda.time.Instant.now();
        java.util.TimeZone timeZone41 = null;
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.forTimeZone(timeZone41);
        org.joda.time.chrono.GJChronology gJChronology43 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone42);
        org.joda.time.DurationField durationField44 = gJChronology43.halfdays();
        org.joda.time.DateTimeField dateTimeField45 = gJChronology43.millisOfDay();
        org.joda.time.DateTimeField dateTimeField46 = gJChronology43.halfdayOfDay();
        int int47 = instant40.get(dateTimeField46);
        java.util.Date date48 = instant40.toDate();
        boolean boolean49 = instant1.isEqual((org.joda.time.ReadableInstant) instant40);
        java.util.TimeZone timeZone50 = null;
        org.joda.time.DateTimeZone dateTimeZone51 = org.joda.time.DateTimeZone.forTimeZone(timeZone50);
        org.joda.time.chrono.GJChronology gJChronology52 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone51);
        org.joda.time.DurationField durationField53 = gJChronology52.halfdays();
        org.joda.time.DateTimeField dateTimeField54 = gJChronology52.millisOfDay();
        org.joda.time.DateTimeField dateTimeField55 = gJChronology52.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField56 = gJChronology52.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone57 = gJChronology52.getZone();
        org.joda.time.DateTimeField dateTimeField58 = gJChronology52.millisOfSecond();
        org.joda.time.MutableDateTime mutableDateTime59 = instant1.toMutableDateTime((org.joda.time.Chronology) gJChronology52);
        org.joda.time.Instant instant61 = instant1.withMillis(10699L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant25 and mutableDateTime59", (instant25.compareTo(mutableDateTime59) == 0) == instant25.equals(mutableDateTime59));
    }

    @Test
    public void test0199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0199");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forTimeZone(timeZone2);
        org.joda.time.chrono.GJChronology gJChronology4 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone3);
        org.joda.time.DateTimeField dateTimeField5 = gJChronology4.millisOfSecond();
        int int6 = instant1.get(dateTimeField5);
        boolean boolean7 = instant1.isEqualNow();
        org.joda.time.DateTime dateTime8 = instant1.toDateTime();
        java.util.TimeZone timeZone9 = null;
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forTimeZone(timeZone9);
        org.joda.time.chrono.GJChronology gJChronology11 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone10);
        org.joda.time.DurationField durationField12 = gJChronology11.halfdays();
        org.joda.time.DateTimeField dateTimeField13 = gJChronology11.millisOfDay();
        org.joda.time.DateTimeField dateTimeField14 = gJChronology11.minuteOfDay();
        org.joda.time.DurationField durationField15 = gJChronology11.centuries();
        org.joda.time.DateTimeField dateTimeField16 = gJChronology11.dayOfYear();
        java.lang.String str17 = gJChronology11.toString();
        org.joda.time.DateTimeField dateTimeField18 = gJChronology11.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone19 = gJChronology11.getZone();
        java.util.TimeZone timeZone20 = null;
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forTimeZone(timeZone20);
        org.joda.time.chrono.GJChronology gJChronology22 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone21);
        java.util.Locale locale24 = new java.util.Locale("hi!");
        java.lang.String str25 = locale24.getCountry();
        java.util.Locale locale26 = java.util.Locale.getDefault();
        java.lang.String str27 = locale26.getDisplayName();
        java.lang.String str28 = locale24.getDisplayScript(locale26);
        boolean boolean29 = dateTimeZone21.equals((java.lang.Object) locale26);
        org.joda.time.Chronology chronology30 = gJChronology11.withZone(dateTimeZone21);
        org.joda.time.DurationField durationField31 = gJChronology11.seconds();
        org.joda.time.DurationField durationField32 = gJChronology11.years();
        boolean boolean33 = instant1.equals((java.lang.Object) durationField32);
        long long36 = durationField32.add(31556952000L, 104);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and dateTime8", (instant1.compareTo(dateTime8) == 0) == instant1.equals(dateTime8));
    }

    @Test
    public void test0200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0200");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        boolean boolean2 = instant1.isEqualNow();
        java.lang.String str3 = instant1.toString();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.MutableDateTime mutableDateTime5 = instant1.toMutableDateTime(chronology4);
        org.joda.time.MutableDateTime mutableDateTime6 = instant1.toMutableDateTime();
        org.joda.time.Instant instant8 = instant1.plus(4320000001L);
        org.joda.time.Instant instant11 = instant8.withDurationAdded((-8567399948L), 87696);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and mutableDateTime5", (instant1.compareTo(mutableDateTime5) == 0) == instant1.equals(mutableDateTime5));
    }

    @Test
    public void test0201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0201");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forTimeZone(timeZone2);
        org.joda.time.chrono.GJChronology gJChronology4 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone3);
        org.joda.time.DateTimeField dateTimeField5 = gJChronology4.millisOfSecond();
        int int6 = instant1.get(dateTimeField5);
        org.joda.time.Instant instant8 = instant1.plus(0L);
        org.joda.time.Instant instant9 = instant8.toInstant();
        org.joda.time.Instant instant11 = new org.joda.time.Instant(52L);
        boolean boolean12 = instant11.isEqualNow();
        java.lang.String str13 = instant11.toString();
        java.lang.String str14 = instant11.toString();
        org.joda.time.Instant instant16 = new org.joda.time.Instant(52L);
        boolean boolean17 = instant16.isEqualNow();
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.Instant instant19 = instant16.plus(readableDuration18);
        boolean boolean20 = instant11.isBefore((org.joda.time.ReadableInstant) instant19);
        org.joda.time.Instant instant22 = instant11.minus((long) 0);
        int int23 = instant8.compareTo((org.joda.time.ReadableInstant) instant11);
        org.joda.time.DateTime dateTime24 = instant8.toDateTimeISO();
        java.util.TimeZone timeZone25 = null;
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forTimeZone(timeZone25);
        org.joda.time.chrono.GJChronology gJChronology27 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone26);
        org.joda.time.DateTimeField dateTimeField28 = gJChronology27.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField29 = gJChronology27.weekyear();
        org.joda.time.DateTimeField dateTimeField30 = gJChronology27.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField31 = gJChronology27.secondOfMinute();
        org.joda.time.DateTime dateTime32 = instant8.toDateTime((org.joda.time.Chronology) gJChronology27);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant8 and dateTime24", (instant8.compareTo(dateTime24) == 0) == instant8.equals(dateTime24));
    }

    @Test
    public void test0202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0202");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        org.joda.time.Instant instant3 = instant1.withMillis((long) 'u');
        java.util.TimeZone timeZone4 = null;
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forTimeZone(timeZone4);
        org.joda.time.chrono.GJChronology gJChronology6 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone5);
        org.joda.time.DurationField durationField7 = gJChronology6.halfdays();
        long long11 = gJChronology6.add((long) 'a', (-1L), (int) (short) 0);
        boolean boolean13 = gJChronology6.equals((java.lang.Object) 0);
        org.joda.time.DateTimeField dateTimeField14 = gJChronology6.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology6.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField16 = gJChronology6.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField17 = gJChronology6.clockhourOfHalfday();
        org.joda.time.DateTime dateTime18 = instant1.toDateTime((org.joda.time.Chronology) gJChronology6);
        org.joda.time.Instant instant20 = instant1.plus(0L);
        org.joda.time.DateTimeZone dateTimeZone21 = instant1.getZone();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime18 and instant1", (dateTime18.compareTo(instant1) == 0) == dateTime18.equals(instant1));
    }

    @Test
    public void test0203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0203");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        boolean boolean2 = instant1.isEqualNow();
        java.lang.String str3 = instant1.toString();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.MutableDateTime mutableDateTime5 = instant1.toMutableDateTime(chronology4);
        org.joda.time.MutableDateTime mutableDateTime6 = instant1.toMutableDateTime();
        java.util.TimeZone timeZone7 = null;
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forTimeZone(timeZone7);
        org.joda.time.chrono.GJChronology gJChronology9 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone8);
        org.joda.time.DateTimeField dateTimeField10 = gJChronology9.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField11 = gJChronology9.weekyear();
        org.joda.time.DurationField durationField12 = gJChronology9.centuries();
        org.joda.time.DateTimeField dateTimeField13 = gJChronology9.millisOfDay();
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        long long17 = gJChronology9.add(readablePeriod14, (long) '4', (int) (byte) -1);
        org.joda.time.DurationField durationField18 = gJChronology9.weekyears();
        org.joda.time.DateTime dateTime19 = instant1.toDateTime((org.joda.time.Chronology) gJChronology9);
        org.joda.time.DurationField durationField20 = gJChronology9.millis();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and mutableDateTime5", (instant1.compareTo(mutableDateTime5) == 0) == instant1.equals(mutableDateTime5));
    }

    @Test
    public void test0204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0204");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        java.lang.String str2 = instant1.toString();
        org.joda.time.DateTime dateTime3 = instant1.toDateTimeISO();
        java.util.TimeZone timeZone4 = null;
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forTimeZone(timeZone4);
        org.joda.time.chrono.GJChronology gJChronology6 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone5);
        org.joda.time.DurationField durationField7 = gJChronology6.halfdays();
        long long11 = gJChronology6.add((long) 'a', (-1L), (int) (short) 0);
        org.joda.time.DateTimeField dateTimeField12 = gJChronology6.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField13 = gJChronology6.centuryOfEra();
        long long17 = gJChronology6.add(262974600000L, (long) (byte) 100, (int) '4');
        org.joda.time.DateTimeField dateTimeField18 = gJChronology6.monthOfYear();
        boolean boolean19 = dateTime3.equals((java.lang.Object) gJChronology6);
        org.joda.time.DurationField durationField20 = gJChronology6.seconds();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and dateTime3", (instant1.compareTo(dateTime3) == 0) == instant1.equals(dateTime3));
    }

    @Test
    public void test0205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0205");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        boolean boolean2 = instant1.isEqualNow();
        org.joda.time.ReadableDuration readableDuration3 = null;
        org.joda.time.Instant instant4 = instant1.plus(readableDuration3);
        long long5 = instant1.getMillis();
        java.lang.String str6 = instant1.toString();
        org.joda.time.Instant instant7 = instant1.toInstant();
        org.joda.time.DateTime dateTime8 = instant1.toDateTime();
        java.util.Date date9 = instant1.toDate();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and dateTime8", (instant1.compareTo(dateTime8) == 0) == instant1.equals(dateTime8));
    }

    @Test
    public void test0206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0206");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        boolean boolean2 = instant1.isEqualNow();
        org.joda.time.ReadableDuration readableDuration3 = null;
        org.joda.time.Instant instant4 = instant1.plus(readableDuration3);
        long long5 = instant1.getMillis();
        java.lang.String str6 = instant1.toString();
        org.joda.time.Instant instant7 = instant1.toInstant();
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.Instant instant10 = instant1.withDurationAdded(readableDuration8, (int) 'x');
        java.util.TimeZone timeZone11 = null;
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forTimeZone(timeZone11);
        org.joda.time.chrono.GJChronology gJChronology13 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone12);
        org.joda.time.DateTimeField dateTimeField14 = gJChronology13.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology13.yearOfCentury();
        int int16 = instant10.get(dateTimeField15);
        org.joda.time.Instant instant17 = instant10.toInstant();
        org.joda.time.Instant instant19 = new org.joda.time.Instant(52L);
        boolean boolean20 = instant19.isEqualNow();
        org.joda.time.ReadableDuration readableDuration21 = null;
        org.joda.time.Instant instant22 = instant19.plus(readableDuration21);
        long long23 = instant19.getMillis();
        java.lang.String str24 = instant19.toString();
        org.joda.time.Instant instant25 = instant19.toInstant();
        org.joda.time.ReadableDuration readableDuration26 = null;
        org.joda.time.Instant instant28 = instant19.withDurationAdded(readableDuration26, (int) 'x');
        org.joda.time.DateTimeZone dateTimeZone29 = instant19.getZone();
        java.util.TimeZone timeZone30 = null;
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forTimeZone(timeZone30);
        org.joda.time.chrono.GJChronology gJChronology32 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone31);
        org.joda.time.DateTimeField dateTimeField33 = gJChronology32.millisOfSecond();
        org.joda.time.DurationField durationField34 = gJChronology32.millis();
        org.joda.time.ReadablePeriod readablePeriod35 = null;
        long long38 = gJChronology32.add(readablePeriod35, (long) 'a', (int) '4');
        org.joda.time.DateTimeField dateTimeField39 = gJChronology32.clockhourOfDay();
        org.joda.time.MutableDateTime mutableDateTime40 = instant19.toMutableDateTime((org.joda.time.Chronology) gJChronology32);
        java.util.TimeZone timeZone41 = null;
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.forTimeZone(timeZone41);
        org.joda.time.chrono.GJChronology gJChronology43 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone42);
        org.joda.time.DurationField durationField44 = gJChronology43.halfdays();
        java.util.TimeZone timeZone45 = null;
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.forTimeZone(timeZone45);
        org.joda.time.chrono.GJChronology gJChronology47 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone46);
        long long51 = dateTimeZone46.convertLocalToUTC((long) (byte) -1, true, 0L);
        boolean boolean53 = dateTimeZone46.equals((java.lang.Object) true);
        org.joda.time.Chronology chronology54 = gJChronology43.withZone(dateTimeZone46);
        org.joda.time.LocalDateTime localDateTime55 = null;
        boolean boolean56 = dateTimeZone46.isLocalDateTimeGap(localDateTime55);
        int int58 = dateTimeZone46.getStandardOffset(4320000000L);
        org.joda.time.DateTime dateTime59 = mutableDateTime40.toDateTime(dateTimeZone46);
        boolean boolean60 = instant17.isEqual((org.joda.time.ReadableInstant) dateTime59);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant17 and mutableDateTime40", (instant17.compareTo(mutableDateTime40) == 0) == instant17.equals(mutableDateTime40));
    }

    @Test
    public void test0207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0207");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField3 = gJChronology2.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.weekyearOfCentury();
        org.joda.time.Instant instant5 = gJChronology2.getGregorianCutover();
        org.joda.time.Instant instant7 = instant5.withMillis(0L);
        org.joda.time.Instant instant9 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone10 = null;
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forTimeZone(timeZone10);
        org.joda.time.chrono.GJChronology gJChronology12 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone11);
        org.joda.time.DateTimeField dateTimeField13 = gJChronology12.millisOfSecond();
        int int14 = instant9.get(dateTimeField13);
        org.joda.time.Instant instant16 = instant9.plus(0L);
        int int17 = instant7.compareTo((org.joda.time.ReadableInstant) instant16);
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = null;
        boolean boolean19 = instant16.isSupported(dateTimeFieldType18);
        org.joda.time.Instant instant21 = new org.joda.time.Instant(52L);
        boolean boolean22 = instant21.isEqualNow();
        org.joda.time.ReadableDuration readableDuration23 = null;
        org.joda.time.Instant instant24 = instant21.plus(readableDuration23);
        int int25 = instant16.compareTo((org.joda.time.ReadableInstant) instant21);
        org.joda.time.Instant instant27 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone28 = null;
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forTimeZone(timeZone28);
        org.joda.time.chrono.GJChronology gJChronology30 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone29);
        org.joda.time.DateTimeField dateTimeField31 = gJChronology30.millisOfSecond();
        int int32 = instant27.get(dateTimeField31);
        boolean boolean33 = instant27.isEqualNow();
        org.joda.time.ReadableDuration readableDuration34 = null;
        org.joda.time.Instant instant36 = instant27.withDurationAdded(readableDuration34, (int) (short) 0);
        org.joda.time.ReadableDuration readableDuration37 = null;
        org.joda.time.Instant instant38 = instant27.plus(readableDuration37);
        boolean boolean39 = instant16.isEqual((org.joda.time.ReadableInstant) instant38);
        org.joda.time.MutableDateTime mutableDateTime40 = instant38.toMutableDateTime();
        org.joda.time.DateTime dateTime41 = instant38.toDateTime();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant9 and mutableDateTime40", (instant9.compareTo(mutableDateTime40) == 0) == instant9.equals(mutableDateTime40));
    }

    @Test
    public void test0208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0208");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField3 = gJChronology2.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.weekyearOfCentury();
        org.joda.time.Instant instant5 = gJChronology2.getGregorianCutover();
        org.joda.time.Instant instant7 = instant5.withMillis(0L);
        org.joda.time.Instant instant9 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone10 = null;
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forTimeZone(timeZone10);
        org.joda.time.chrono.GJChronology gJChronology12 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone11);
        org.joda.time.DateTimeField dateTimeField13 = gJChronology12.millisOfSecond();
        int int14 = instant9.get(dateTimeField13);
        org.joda.time.Instant instant16 = instant9.plus(0L);
        int int17 = instant7.compareTo((org.joda.time.ReadableInstant) instant16);
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = null;
        boolean boolean19 = instant16.isSupported(dateTimeFieldType18);
        org.joda.time.Instant instant21 = new org.joda.time.Instant(52L);
        boolean boolean22 = instant21.isEqualNow();
        org.joda.time.ReadableDuration readableDuration23 = null;
        org.joda.time.Instant instant24 = instant21.plus(readableDuration23);
        int int25 = instant16.compareTo((org.joda.time.ReadableInstant) instant21);
        org.joda.time.Instant instant27 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone28 = null;
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forTimeZone(timeZone28);
        org.joda.time.chrono.GJChronology gJChronology30 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone29);
        org.joda.time.DateTimeField dateTimeField31 = gJChronology30.millisOfSecond();
        int int32 = instant27.get(dateTimeField31);
        boolean boolean33 = instant27.isEqualNow();
        org.joda.time.ReadableDuration readableDuration34 = null;
        org.joda.time.Instant instant36 = instant27.withDurationAdded(readableDuration34, (int) (short) 0);
        org.joda.time.ReadableDuration readableDuration37 = null;
        org.joda.time.Instant instant38 = instant27.plus(readableDuration37);
        boolean boolean39 = instant16.isEqual((org.joda.time.ReadableInstant) instant38);
        org.joda.time.MutableDateTime mutableDateTime40 = instant38.toMutableDateTime();
        java.util.TimeZone timeZone41 = null;
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.forTimeZone(timeZone41);
        org.joda.time.chrono.GJChronology gJChronology43 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone42);
        org.joda.time.DurationField durationField44 = gJChronology43.halfdays();
        long long48 = gJChronology43.add((long) 'a', (-1L), (int) (short) 0);
        long long52 = gJChronology43.add((long) (byte) 0, (long) '4', 100);
        org.joda.time.DurationField durationField53 = gJChronology43.weekyears();
        org.joda.time.MutableDateTime mutableDateTime54 = instant38.toMutableDateTime((org.joda.time.Chronology) gJChronology43);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant9 and mutableDateTime40", (instant9.compareTo(mutableDateTime40) == 0) == instant9.equals(mutableDateTime40));
    }

    @Test
    public void test0209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0209");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        boolean boolean2 = instant1.isEqualNow();
        java.lang.String str3 = instant1.toString();
        java.lang.String str4 = instant1.toString();
        org.joda.time.Instant instant7 = instant1.withDurationAdded(115200000L, (int) (short) 1);
        org.joda.time.Instant instant9 = instant1.withMillis((-6720000000L));
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.getDefault();
        int int12 = dateTimeZone10.getOffset((long) (byte) 1);
        long long15 = dateTimeZone10.adjustOffset((-1L), false);
        org.joda.time.Instant instant17 = new org.joda.time.Instant(52L);
        boolean boolean18 = instant17.isEqualNow();
        java.lang.String str19 = instant17.toString();
        java.lang.String str20 = instant17.toString();
        org.joda.time.Instant instant23 = instant17.withDurationAdded(115200000L, (int) (short) 1);
        boolean boolean24 = instant23.isBeforeNow();
        org.joda.time.Instant instant26 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone27 = null;
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forTimeZone(timeZone27);
        org.joda.time.chrono.GJChronology gJChronology29 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone28);
        org.joda.time.DateTimeField dateTimeField30 = gJChronology29.millisOfSecond();
        int int31 = instant26.get(dateTimeField30);
        boolean boolean32 = instant26.isEqualNow();
        org.joda.time.Instant instant34 = new org.joda.time.Instant(52L);
        boolean boolean35 = instant34.isEqualNow();
        org.joda.time.ReadableDuration readableDuration36 = null;
        org.joda.time.Instant instant37 = instant34.plus(readableDuration36);
        long long38 = instant34.getMillis();
        java.lang.Object obj39 = null;
        boolean boolean40 = instant34.equals(obj39);
        org.joda.time.Instant instant42 = new org.joda.time.Instant(52L);
        boolean boolean43 = instant42.isEqualNow();
        org.joda.time.ReadableDuration readableDuration44 = null;
        org.joda.time.Instant instant45 = instant42.plus(readableDuration44);
        long long46 = instant42.getMillis();
        java.lang.String str47 = instant42.toString();
        org.joda.time.Instant instant48 = instant42.toInstant();
        org.joda.time.ReadableDuration readableDuration49 = null;
        org.joda.time.Instant instant51 = instant42.withDurationAdded(readableDuration49, (int) 'x');
        org.joda.time.Instant instant52 = instant42.toInstant();
        int int53 = instant34.compareTo((org.joda.time.ReadableInstant) instant42);
        boolean boolean54 = instant26.isBefore((org.joda.time.ReadableInstant) instant42);
        java.util.TimeZone timeZone55 = null;
        org.joda.time.DateTimeZone dateTimeZone56 = org.joda.time.DateTimeZone.forTimeZone(timeZone55);
        org.joda.time.chrono.GJChronology gJChronology57 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone56);
        org.joda.time.DurationField durationField58 = gJChronology57.halfdays();
        long long62 = gJChronology57.add((long) 'a', (-1L), (int) (short) 0);
        org.joda.time.DateTimeField dateTimeField63 = gJChronology57.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField64 = gJChronology57.secondOfMinute();
        org.joda.time.Instant instant66 = new org.joda.time.Instant(52L);
        boolean boolean67 = instant66.isEqualNow();
        org.joda.time.ReadableDuration readableDuration68 = null;
        org.joda.time.Instant instant69 = instant66.plus(readableDuration68);
        boolean boolean70 = gJChronology57.equals((java.lang.Object) instant66);
        org.joda.time.DateTimeFieldType dateTimeFieldType71 = null;
        boolean boolean72 = instant66.isSupported(dateTimeFieldType71);
        org.joda.time.DateTimeFieldType dateTimeFieldType73 = null;
        boolean boolean74 = instant66.isSupported(dateTimeFieldType73);
        java.lang.String str75 = instant66.toString();
        boolean boolean76 = instant26.isAfter((org.joda.time.ReadableInstant) instant66);
        org.joda.time.MutableDateTime mutableDateTime77 = instant66.toMutableDateTimeISO();
        int int78 = instant23.compareTo((org.joda.time.ReadableInstant) mutableDateTime77);
        org.joda.time.chrono.GJChronology gJChronology79 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone10, (org.joda.time.ReadableInstant) mutableDateTime77);
        org.joda.time.MutableDateTime mutableDateTime80 = instant1.toMutableDateTime(dateTimeZone10);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant17 and mutableDateTime77", (instant17.compareTo(mutableDateTime77) == 0) == instant17.equals(mutableDateTime77));
    }

    @Test
    public void test0210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0210");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        boolean boolean2 = instant1.isEqualNow();
        java.lang.String str3 = instant1.toString();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.MutableDateTime mutableDateTime5 = instant1.toMutableDateTime(chronology4);
        org.joda.time.Instant instant7 = new org.joda.time.Instant(52L);
        boolean boolean8 = instant7.isEqualNow();
        org.joda.time.Instant instant10 = new org.joda.time.Instant(52L);
        org.joda.time.Instant instant12 = instant10.withMillis((long) 'u');
        boolean boolean13 = instant7.isAfter((org.joda.time.ReadableInstant) instant10);
        boolean boolean14 = mutableDateTime5.isEqual((org.joda.time.ReadableInstant) instant10);
        java.util.TimeZone timeZone15 = null;
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forTimeZone(timeZone15);
        org.joda.time.chrono.GJChronology gJChronology17 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone16);
        org.joda.time.DurationField durationField18 = gJChronology17.halfdays();
        org.joda.time.DateTimeField dateTimeField19 = gJChronology17.millisOfDay();
        org.joda.time.DateTimeField dateTimeField20 = gJChronology17.minuteOfDay();
        org.joda.time.DurationField durationField21 = gJChronology17.centuries();
        org.joda.time.DateTimeField dateTimeField22 = gJChronology17.dayOfYear();
        java.lang.String str23 = gJChronology17.toString();
        org.joda.time.DurationField durationField24 = gJChronology17.halfdays();
        org.joda.time.DateTimeField dateTimeField25 = gJChronology17.clockhourOfHalfday();
        org.joda.time.DateTime dateTime26 = mutableDateTime5.toDateTime((org.joda.time.Chronology) gJChronology17);
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = null;
        boolean boolean28 = dateTime26.isSupported(dateTimeFieldType27);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and mutableDateTime5", (instant1.compareTo(mutableDateTime5) == 0) == instant1.equals(mutableDateTime5));
    }

    @Test
    public void test0211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0211");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str3 = dateTimeZone1.getNameKey((long) 100);
        boolean boolean4 = dateTimeZone1.isFixed();
        java.util.Locale locale8 = new java.util.Locale("DurationField[halfdays]", "\u82f1\u6587");
        java.lang.String str9 = dateTimeZone1.getName((long) (short) 10, locale8);
        org.joda.time.Instant instant11 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone12 = null;
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forTimeZone(timeZone12);
        org.joda.time.chrono.GJChronology gJChronology14 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone13);
        org.joda.time.DateTimeField dateTimeField15 = gJChronology14.millisOfSecond();
        int int16 = instant11.get(dateTimeField15);
        org.joda.time.Chronology chronology17 = instant11.getChronology();
        org.joda.time.chrono.GJChronology gJChronology18 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1, (org.joda.time.ReadableInstant) instant11);
        org.joda.time.DateTime dateTime19 = instant11.toDateTime();
        org.joda.time.Instant instant21 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone22 = null;
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        org.joda.time.chrono.GJChronology gJChronology24 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone23);
        org.joda.time.DateTimeField dateTimeField25 = gJChronology24.millisOfSecond();
        int int26 = instant21.get(dateTimeField25);
        org.joda.time.Instant instant28 = instant21.plus(0L);
        java.util.TimeZone timeZone29 = null;
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forTimeZone(timeZone29);
        org.joda.time.chrono.GJChronology gJChronology31 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone30);
        org.joda.time.DurationField durationField32 = gJChronology31.halfdays();
        org.joda.time.Chronology chronology33 = gJChronology31.withUTC();
        java.lang.String str34 = gJChronology31.toString();
        org.joda.time.DateTimeField dateTimeField35 = gJChronology31.hourOfHalfday();
        int int36 = instant21.get(dateTimeField35);
        java.util.TimeZone timeZone37 = null;
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forTimeZone(timeZone37);
        org.joda.time.chrono.GJChronology gJChronology39 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone38);
        org.joda.time.DurationField durationField40 = gJChronology39.halfdays();
        long long44 = gJChronology39.add((long) 'a', (-1L), (int) (short) 0);
        org.joda.time.DateTimeField dateTimeField45 = gJChronology39.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField46 = gJChronology39.secondOfMinute();
        org.joda.time.Instant instant48 = new org.joda.time.Instant(52L);
        boolean boolean49 = instant48.isEqualNow();
        org.joda.time.ReadableDuration readableDuration50 = null;
        org.joda.time.Instant instant51 = instant48.plus(readableDuration50);
        boolean boolean52 = gJChronology39.equals((java.lang.Object) instant48);
        org.joda.time.DateTimeFieldType dateTimeFieldType53 = null;
        boolean boolean54 = instant48.isSupported(dateTimeFieldType53);
        org.joda.time.DateTimeFieldType dateTimeFieldType55 = null;
        boolean boolean56 = instant48.isSupported(dateTimeFieldType55);
        org.joda.time.DateTimeZone dateTimeZone57 = instant48.getZone();
        boolean boolean58 = instant21.isAfter((org.joda.time.ReadableInstant) instant48);
        org.joda.time.Instant instant60 = instant21.minus((long) 70);
        org.joda.time.Instant instant62 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone63 = null;
        org.joda.time.DateTimeZone dateTimeZone64 = org.joda.time.DateTimeZone.forTimeZone(timeZone63);
        org.joda.time.chrono.GJChronology gJChronology65 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone64);
        org.joda.time.DateTimeField dateTimeField66 = gJChronology65.millisOfSecond();
        int int67 = instant62.get(dateTimeField66);
        boolean boolean68 = instant62.isEqualNow();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter69 = null;
        java.lang.String str70 = instant62.toString(dateTimeFormatter69);
        boolean boolean71 = instant21.isAfter((org.joda.time.ReadableInstant) instant62);
        boolean boolean72 = instant11.isEqual((org.joda.time.ReadableInstant) instant21);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime19 and instant21", (dateTime19.compareTo(instant21) == 0) == dateTime19.equals(instant21));
    }

    @Test
    public void test0212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0212");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        boolean boolean2 = instant1.isEqualNow();
        org.joda.time.ReadableDuration readableDuration3 = null;
        org.joda.time.Instant instant4 = instant1.plus(readableDuration3);
        long long5 = instant1.getMillis();
        java.lang.Object obj6 = null;
        boolean boolean7 = instant1.equals(obj6);
        org.joda.time.Instant instant9 = new org.joda.time.Instant(52L);
        boolean boolean10 = instant9.isEqualNow();
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.Instant instant12 = instant9.plus(readableDuration11);
        long long13 = instant9.getMillis();
        java.lang.String str14 = instant9.toString();
        org.joda.time.Instant instant15 = instant9.toInstant();
        org.joda.time.ReadableDuration readableDuration16 = null;
        org.joda.time.Instant instant18 = instant9.withDurationAdded(readableDuration16, (int) 'x');
        org.joda.time.Instant instant19 = instant9.toInstant();
        int int20 = instant1.compareTo((org.joda.time.ReadableInstant) instant9);
        java.util.TimeZone timeZone21 = null;
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forTimeZone(timeZone21);
        org.joda.time.chrono.GJChronology gJChronology23 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone22);
        org.joda.time.DateTimeField dateTimeField24 = gJChronology23.era();
        org.joda.time.DateTimeField dateTimeField25 = gJChronology23.centuryOfEra();
        org.joda.time.DurationField durationField26 = gJChronology23.hours();
        org.joda.time.DateTimeField dateTimeField27 = gJChronology23.monthOfYear();
        org.joda.time.DateTimeField dateTimeField28 = gJChronology23.dayOfWeek();
        java.util.TimeZone timeZone29 = null;
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forTimeZone(timeZone29);
        org.joda.time.chrono.GJChronology gJChronology31 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone30);
        int int33 = dateTimeZone30.getStandardOffset((long) (byte) 0);
        org.joda.time.Chronology chronology34 = gJChronology23.withZone(dateTimeZone30);
        int int36 = dateTimeZone30.getOffsetFromLocal(262978799880L);
        org.joda.time.MutableDateTime mutableDateTime37 = instant1.toMutableDateTime(dateTimeZone30);
        org.joda.time.ReadableDuration readableDuration38 = null;
        org.joda.time.Instant instant39 = instant1.minus(readableDuration38);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant39 and mutableDateTime37", (instant39.compareTo(mutableDateTime37) == 0) == instant39.equals(mutableDateTime37));
    }

    @Test
    public void test0213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0213");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField3 = gJChronology2.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.weekyearOfCentury();
        org.joda.time.Instant instant5 = gJChronology2.getGregorianCutover();
        org.joda.time.Instant instant7 = instant5.withMillis(0L);
        org.joda.time.Instant instant9 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone10 = null;
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forTimeZone(timeZone10);
        org.joda.time.chrono.GJChronology gJChronology12 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone11);
        org.joda.time.DateTimeField dateTimeField13 = gJChronology12.millisOfSecond();
        int int14 = instant9.get(dateTimeField13);
        org.joda.time.Instant instant16 = instant9.plus(0L);
        int int17 = instant7.compareTo((org.joda.time.ReadableInstant) instant16);
        org.joda.time.Instant instant19 = new org.joda.time.Instant(52L);
        boolean boolean20 = instant19.isEqualNow();
        org.joda.time.ReadableDuration readableDuration21 = null;
        org.joda.time.Instant instant22 = instant19.plus(readableDuration21);
        boolean boolean24 = instant22.equals((java.lang.Object) ' ');
        boolean boolean25 = instant16.isEqual((org.joda.time.ReadableInstant) instant22);
        org.joda.time.ReadableDuration readableDuration26 = null;
        org.joda.time.Instant instant28 = instant16.withDurationAdded(readableDuration26, 0);
        java.util.TimeZone timeZone29 = null;
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forTimeZone(timeZone29);
        org.joda.time.chrono.GJChronology gJChronology31 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone30);
        org.joda.time.DateTimeField dateTimeField32 = gJChronology31.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField33 = gJChronology31.weekyearOfCentury();
        org.joda.time.Instant instant34 = gJChronology31.getGregorianCutover();
        org.joda.time.Instant instant36 = instant34.withMillis(0L);
        org.joda.time.Instant instant38 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone39 = null;
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.forTimeZone(timeZone39);
        org.joda.time.chrono.GJChronology gJChronology41 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone40);
        org.joda.time.DateTimeField dateTimeField42 = gJChronology41.millisOfSecond();
        int int43 = instant38.get(dateTimeField42);
        org.joda.time.Instant instant45 = instant38.plus(0L);
        int int46 = instant36.compareTo((org.joda.time.ReadableInstant) instant45);
        org.joda.time.Instant instant48 = new org.joda.time.Instant(52L);
        boolean boolean49 = instant48.isEqualNow();
        org.joda.time.ReadableDuration readableDuration50 = null;
        org.joda.time.Instant instant51 = instant48.plus(readableDuration50);
        boolean boolean53 = instant51.equals((java.lang.Object) ' ');
        boolean boolean54 = instant45.isEqual((org.joda.time.ReadableInstant) instant51);
        org.joda.time.MutableDateTime mutableDateTime55 = instant45.toMutableDateTime();
        boolean boolean56 = instant28.isEqual((org.joda.time.ReadableInstant) instant45);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant28 and mutableDateTime55", (instant28.compareTo(mutableDateTime55) == 0) == instant28.equals(mutableDateTime55));
    }

    @Test
    public void test0214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0214");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forTimeZone(timeZone2);
        org.joda.time.chrono.GJChronology gJChronology4 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone3);
        org.joda.time.DateTimeField dateTimeField5 = gJChronology4.millisOfSecond();
        int int6 = instant1.get(dateTimeField5);
        org.joda.time.Instant instant8 = instant1.plus(0L);
        java.util.TimeZone timeZone9 = null;
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forTimeZone(timeZone9);
        org.joda.time.chrono.GJChronology gJChronology11 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone10);
        org.joda.time.DurationField durationField12 = gJChronology11.halfdays();
        org.joda.time.Chronology chronology13 = gJChronology11.withUTC();
        java.lang.String str14 = gJChronology11.toString();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology11.hourOfHalfday();
        int int16 = instant1.get(dateTimeField15);
        org.joda.time.Instant instant18 = new org.joda.time.Instant(52L);
        boolean boolean19 = instant18.isEqualNow();
        java.lang.String str20 = instant18.toString();
        org.joda.time.Instant instant22 = new org.joda.time.Instant(52L);
        boolean boolean23 = instant22.isEqualNow();
        java.lang.String str24 = instant22.toString();
        java.lang.String str25 = instant22.toString();
        org.joda.time.Instant instant28 = instant22.withDurationAdded(115200000L, (int) (short) 1);
        int int29 = instant18.compareTo((org.joda.time.ReadableInstant) instant22);
        org.joda.time.Instant instant31 = new org.joda.time.Instant(52L);
        boolean boolean32 = instant31.isEqualNow();
        org.joda.time.ReadableDuration readableDuration33 = null;
        org.joda.time.Instant instant34 = instant31.plus(readableDuration33);
        boolean boolean36 = instant34.equals((java.lang.Object) ' ');
        boolean boolean37 = instant22.isAfter((org.joda.time.ReadableInstant) instant34);
        int int38 = instant1.compareTo((org.joda.time.ReadableInstant) instant22);
        org.joda.time.DateTime dateTime39 = instant1.toDateTimeISO();
        boolean boolean40 = instant1.isBeforeNow();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and dateTime39", (instant1.compareTo(dateTime39) == 0) == instant1.equals(dateTime39));
    }

    @Test
    public void test0215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0215");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        boolean boolean2 = instant1.isEqualNow();
        java.lang.String str3 = instant1.toString();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.MutableDateTime mutableDateTime5 = instant1.toMutableDateTime(chronology4);
        org.joda.time.MutableDateTime mutableDateTime6 = instant1.toMutableDateTime();
        org.joda.time.MutableDateTime mutableDateTime7 = instant1.toMutableDateTime();
        java.lang.String str8 = mutableDateTime7.toString();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and mutableDateTime5", (instant1.compareTo(mutableDateTime5) == 0) == instant1.equals(mutableDateTime5));
    }

    @Test
    public void test0216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0216");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        boolean boolean2 = instant1.isEqualNow();
        org.joda.time.ReadableDuration readableDuration3 = null;
        org.joda.time.Instant instant4 = instant1.plus(readableDuration3);
        long long5 = instant1.getMillis();
        java.lang.String str6 = instant1.toString();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.getDefault();
        long long9 = dateTimeZone7.nextTransition(1000L);
        org.joda.time.DateTime dateTime10 = instant1.toDateTime(dateTimeZone7);
        int int12 = dateTimeZone7.getOffset(1431149L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and dateTime10", (instant1.compareTo(dateTime10) == 0) == instant1.equals(dateTime10));
    }

    @Test
    public void test0217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0217");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = gJChronology2.halfdays();
        long long7 = gJChronology2.add((long) 'a', (-1L), (int) (short) 0);
        org.joda.time.DateTimeField dateTimeField8 = gJChronology2.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField9 = gJChronology2.secondOfMinute();
        org.joda.time.Instant instant11 = new org.joda.time.Instant(52L);
        boolean boolean12 = instant11.isEqualNow();
        org.joda.time.ReadableDuration readableDuration13 = null;
        org.joda.time.Instant instant14 = instant11.plus(readableDuration13);
        boolean boolean15 = gJChronology2.equals((java.lang.Object) instant11);
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = null;
        boolean boolean17 = instant11.isSupported(dateTimeFieldType16);
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = null;
        boolean boolean19 = instant11.isSupported(dateTimeFieldType18);
        org.joda.time.Instant instant21 = new org.joda.time.Instant(52L);
        boolean boolean22 = instant21.isEqualNow();
        boolean boolean24 = instant21.isEqual(0L);
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = null;
        boolean boolean26 = instant21.isSupported(dateTimeFieldType25);
        org.joda.time.Instant instant29 = instant21.withDurationAdded((-61827926399999L), (int) (short) -1);
        org.joda.time.MutableDateTime mutableDateTime30 = instant29.toMutableDateTime();
        int int31 = instant11.compareTo((org.joda.time.ReadableInstant) mutableDateTime30);
        org.joda.time.Chronology chronology32 = instant11.getChronology();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant29 and mutableDateTime30", (instant29.compareTo(mutableDateTime30) == 0) == instant29.equals(mutableDateTime30));
    }

    @Test
    public void test0218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0218");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = gJChronology2.halfdays();
        long long7 = gJChronology2.add((long) 'a', (-1L), (int) (short) 0);
        long long11 = gJChronology2.add((long) (byte) 0, (long) '4', 100);
        org.joda.time.DurationField durationField12 = gJChronology2.years();
        java.util.TimeZone timeZone13 = null;
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forTimeZone(timeZone13);
        org.joda.time.chrono.GJChronology gJChronology15 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone14);
        org.joda.time.DurationField durationField16 = gJChronology15.halfdays();
        long long20 = gJChronology15.add((long) 'a', (-1L), (int) (short) 0);
        org.joda.time.DateTimeField dateTimeField21 = gJChronology15.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField22 = gJChronology15.secondOfMinute();
        org.joda.time.Instant instant24 = new org.joda.time.Instant(52L);
        boolean boolean25 = instant24.isEqualNow();
        org.joda.time.ReadableDuration readableDuration26 = null;
        org.joda.time.Instant instant27 = instant24.plus(readableDuration26);
        boolean boolean28 = gJChronology15.equals((java.lang.Object) instant24);
        java.lang.String str29 = gJChronology15.toString();
        org.joda.time.DurationField durationField30 = gJChronology15.eras();
        int int31 = durationField12.compareTo(durationField30);
        java.lang.String str32 = durationField30.toString();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField30, durationField3, and durationField12", !(durationField30.compareTo(durationField3) == 0) || (Math.signum(durationField30.compareTo(durationField12)) == Math.signum(durationField3.compareTo(durationField12))));
    }

    @Test
    public void test0219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0219");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forTimeZone(timeZone2);
        org.joda.time.chrono.GJChronology gJChronology4 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone3);
        org.joda.time.DateTimeField dateTimeField5 = gJChronology4.millisOfSecond();
        int int6 = instant1.get(dateTimeField5);
        java.util.TimeZone timeZone7 = null;
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forTimeZone(timeZone7);
        org.joda.time.chrono.GJChronology gJChronology9 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone8);
        org.joda.time.DurationField durationField10 = gJChronology9.halfdays();
        java.util.TimeZone timeZone11 = null;
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forTimeZone(timeZone11);
        org.joda.time.chrono.GJChronology gJChronology13 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone12);
        long long17 = dateTimeZone12.convertLocalToUTC((long) (byte) -1, true, 0L);
        boolean boolean19 = dateTimeZone12.equals((java.lang.Object) true);
        org.joda.time.Chronology chronology20 = gJChronology9.withZone(dateTimeZone12);
        org.joda.time.MutableDateTime mutableDateTime21 = instant1.toMutableDateTime(dateTimeZone12);
        boolean boolean22 = mutableDateTime21.isAfterNow();
        org.joda.time.Instant instant24 = new org.joda.time.Instant(52L);
        boolean boolean25 = instant24.isEqualNow();
        boolean boolean27 = instant24.isEqual(0L);
        java.util.TimeZone timeZone28 = null;
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forTimeZone(timeZone28);
        org.joda.time.chrono.GJChronology gJChronology30 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone29);
        org.joda.time.DurationField durationField31 = gJChronology30.halfdays();
        long long35 = gJChronology30.add((long) 'a', (-1L), (int) (short) 0);
        boolean boolean37 = gJChronology30.equals((java.lang.Object) 0);
        org.joda.time.DateTimeField dateTimeField38 = gJChronology30.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField39 = gJChronology30.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField40 = gJChronology30.clockhourOfDay();
        long long44 = gJChronology30.add(262974600000L, (-4199880L), (int) (short) -1);
        org.joda.time.DateTimeField dateTimeField45 = gJChronology30.year();
        org.joda.time.MutableDateTime mutableDateTime46 = instant24.toMutableDateTime((org.joda.time.Chronology) gJChronology30);
        org.joda.time.DateTime dateTime47 = mutableDateTime21.toDateTime((org.joda.time.Chronology) gJChronology30);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and mutableDateTime46", (instant1.compareTo(mutableDateTime46) == 0) == instant1.equals(mutableDateTime46));
    }

    @Test
    public void test0220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0220");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        boolean boolean2 = instant1.isEqualNow();
        org.joda.time.ReadableDuration readableDuration3 = null;
        org.joda.time.Instant instant4 = instant1.plus(readableDuration3);
        long long5 = instant1.getMillis();
        java.lang.String str6 = instant1.toString();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.getDefault();
        long long9 = dateTimeZone7.nextTransition(1000L);
        org.joda.time.DateTime dateTime10 = instant1.toDateTime(dateTimeZone7);
        java.util.TimeZone timeZone11 = null;
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forTimeZone(timeZone11);
        org.joda.time.chrono.GJChronology gJChronology13 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone12);
        long long17 = dateTimeZone12.convertLocalToUTC((long) (byte) -1, true, 0L);
        boolean boolean19 = dateTimeZone12.equals((java.lang.Object) true);
        org.joda.time.chrono.GJChronology gJChronology20 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone12);
        org.joda.time.DateTimeField dateTimeField21 = gJChronology20.weekyear();
        org.joda.time.DateTimeField dateTimeField22 = gJChronology20.era();
        org.joda.time.DateTimeField dateTimeField23 = gJChronology20.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        long long27 = gJChronology20.add(readablePeriod24, (-26438399999L), (int) (byte) 100);
        org.joda.time.DurationField durationField28 = gJChronology20.hours();
        org.joda.time.DateTimeField dateTimeField29 = gJChronology20.era();
        org.joda.time.MutableDateTime mutableDateTime30 = dateTime10.toMutableDateTime((org.joda.time.Chronology) gJChronology20);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter31 = null;
        java.lang.String str32 = dateTime10.toString(dateTimeFormatter31);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and mutableDateTime30", (instant1.compareTo(mutableDateTime30) == 0) == instant1.equals(mutableDateTime30));
    }

    @Test
    public void test0221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0221");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        boolean boolean2 = instant1.isEqualNow();
        java.lang.String str3 = instant1.toString();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.MutableDateTime mutableDateTime5 = instant1.toMutableDateTime(chronology4);
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.Instant instant7 = instant1.minus(readableDuration6);
        org.joda.time.Instant instant9 = instant7.withMillis((-599850999L));
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant7 and mutableDateTime5", (instant7.compareTo(mutableDateTime5) == 0) == instant7.equals(mutableDateTime5));
    }

    @Test
    public void test0222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0222");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField3 = gJChronology2.millisOfSecond();
        org.joda.time.DurationField durationField4 = gJChronology2.millis();
        org.joda.time.DateTimeZone dateTimeZone5 = gJChronology2.getZone();
        long long7 = dateTimeZone5.nextTransition(4320000000L);
        boolean boolean9 = dateTimeZone5.isStandardOffset(3155760001170L);
        java.util.TimeZone timeZone10 = null;
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forTimeZone(timeZone10);
        org.joda.time.chrono.GJChronology gJChronology12 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone11);
        org.joda.time.DateTimeField dateTimeField13 = gJChronology12.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField14 = gJChronology12.weekyearOfCentury();
        org.joda.time.Instant instant15 = gJChronology12.getGregorianCutover();
        org.joda.time.Instant instant17 = instant15.withMillis(0L);
        org.joda.time.Instant instant19 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone20 = null;
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forTimeZone(timeZone20);
        org.joda.time.chrono.GJChronology gJChronology22 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone21);
        org.joda.time.DateTimeField dateTimeField23 = gJChronology22.millisOfSecond();
        int int24 = instant19.get(dateTimeField23);
        org.joda.time.Instant instant26 = instant19.plus(0L);
        int int27 = instant17.compareTo((org.joda.time.ReadableInstant) instant26);
        java.util.TimeZone timeZone28 = null;
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forTimeZone(timeZone28);
        org.joda.time.chrono.GJChronology gJChronology30 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone29);
        org.joda.time.DurationField durationField31 = gJChronology30.halfdays();
        org.joda.time.DateTimeField dateTimeField32 = gJChronology30.millisOfDay();
        org.joda.time.DateTimeField dateTimeField33 = gJChronology30.minuteOfDay();
        org.joda.time.DurationField durationField34 = gJChronology30.centuries();
        org.joda.time.DateTimeField dateTimeField35 = gJChronology30.halfdayOfDay();
        java.util.Locale locale36 = java.util.Locale.ITALIAN;
        java.util.Locale locale37 = locale36.stripExtensions();
        java.util.Locale locale38 = java.util.Locale.CANADA;
        java.lang.String str39 = locale36.getDisplayVariant(locale38);
        boolean boolean40 = gJChronology30.equals((java.lang.Object) locale38);
        org.joda.time.DateTime dateTime41 = instant17.toDateTime((org.joda.time.Chronology) gJChronology30);
        org.joda.time.chrono.GJChronology gJChronology42 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone5, (org.joda.time.ReadableInstant) dateTime41);
        org.joda.time.DateTimeField dateTimeField43 = gJChronology42.hourOfHalfday();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant17 and dateTime41", (instant17.compareTo(dateTime41) == 0) == instant17.equals(dateTime41));
    }

    @Test
    public void test0223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0223");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        java.util.Locale locale4 = new java.util.Locale("hi!");
        java.lang.String str5 = locale4.getCountry();
        java.util.Locale locale6 = java.util.Locale.getDefault();
        java.lang.String str7 = locale6.getDisplayName();
        java.lang.String str8 = locale4.getDisplayScript(locale6);
        boolean boolean9 = dateTimeZone1.equals((java.lang.Object) locale6);
        int int11 = dateTimeZone1.getOffsetFromLocal((long) (short) 10);
        java.util.TimeZone timeZone12 = null;
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forTimeZone(timeZone12);
        org.joda.time.chrono.GJChronology gJChronology14 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone13);
        org.joda.time.DateTimeField dateTimeField15 = gJChronology14.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField16 = gJChronology14.weekyearOfCentury();
        org.joda.time.Instant instant17 = gJChronology14.getGregorianCutover();
        org.joda.time.Instant instant19 = instant17.withMillis(0L);
        org.joda.time.Instant instant21 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone22 = null;
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        org.joda.time.chrono.GJChronology gJChronology24 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone23);
        org.joda.time.DateTimeField dateTimeField25 = gJChronology24.millisOfSecond();
        int int26 = instant21.get(dateTimeField25);
        org.joda.time.Instant instant28 = instant21.plus(0L);
        int int29 = instant19.compareTo((org.joda.time.ReadableInstant) instant28);
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = null;
        boolean boolean31 = instant28.isSupported(dateTimeFieldType30);
        int int32 = dateTimeZone1.getOffset((org.joda.time.ReadableInstant) instant28);
        org.joda.time.DateTime dateTime33 = instant28.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone34 = dateTime33.getZone();
        java.util.TimeZone timeZone36 = null;
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.forTimeZone(timeZone36);
        org.joda.time.chrono.GJChronology gJChronology38 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone37);
        org.joda.time.DurationField durationField39 = gJChronology38.halfdays();
        long long43 = gJChronology38.add((long) 'a', (-1L), (int) (short) 0);
        boolean boolean45 = gJChronology38.equals((java.lang.Object) 0);
        org.joda.time.DateTimeField dateTimeField46 = gJChronology38.dayOfMonth();
        org.joda.time.DurationField durationField47 = gJChronology38.days();
        org.joda.time.DateTimeZone dateTimeZone48 = gJChronology38.getZone();
        java.lang.String str49 = dateTimeZone48.toString();
        java.util.Locale locale51 = java.util.Locale.FRENCH;
        java.util.Locale locale52 = java.util.Locale.getDefault();
        boolean boolean53 = locale52.hasExtensions();
        java.lang.String str54 = locale51.getDisplayLanguage(locale52);
        boolean boolean55 = locale52.hasExtensions();
        java.lang.String str56 = dateTimeZone48.getName((-61827739199999L), locale52);
        java.lang.String str57 = dateTimeZone34.getName(97L, locale52);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant21 and dateTime33", (instant21.compareTo(dateTime33) == 0) == instant21.equals(dateTime33));
    }

    @Test
    public void test0224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0224");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forTimeZone(timeZone2);
        org.joda.time.chrono.GJChronology gJChronology4 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone3);
        org.joda.time.DateTimeField dateTimeField5 = gJChronology4.millisOfSecond();
        int int6 = instant1.get(dateTimeField5);
        org.joda.time.Instant instant8 = instant1.plus(0L);
        long long9 = instant8.getMillis();
        java.util.TimeZone timeZone10 = null;
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forTimeZone(timeZone10);
        org.joda.time.chrono.GJChronology gJChronology12 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone11);
        org.joda.time.DurationField durationField13 = gJChronology12.halfdays();
        long long17 = gJChronology12.add((long) 'a', (-1L), (int) (short) 0);
        long long21 = gJChronology12.add((long) (byte) 0, (long) '4', 100);
        org.joda.time.DurationField durationField22 = gJChronology12.years();
        org.joda.time.Instant instant23 = gJChronology12.getGregorianCutover();
        org.joda.time.DateTimeField dateTimeField24 = gJChronology12.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime25 = instant8.toMutableDateTime((org.joda.time.Chronology) gJChronology12);
        org.joda.time.DateTimeField dateTimeField26 = gJChronology12.year();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and mutableDateTime25", (instant1.compareTo(mutableDateTime25) == 0) == instant1.equals(mutableDateTime25));
    }

    @Test
    public void test0225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0225");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forTimeZone(timeZone2);
        org.joda.time.chrono.GJChronology gJChronology4 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone3);
        org.joda.time.DateTimeField dateTimeField5 = gJChronology4.millisOfSecond();
        int int6 = instant1.get(dateTimeField5);
        boolean boolean7 = instant1.isEqualNow();
        org.joda.time.Instant instant9 = new org.joda.time.Instant(52L);
        boolean boolean10 = instant9.isEqualNow();
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.Instant instant12 = instant9.plus(readableDuration11);
        long long13 = instant9.getMillis();
        java.lang.Object obj14 = null;
        boolean boolean15 = instant9.equals(obj14);
        org.joda.time.Instant instant17 = new org.joda.time.Instant(52L);
        boolean boolean18 = instant17.isEqualNow();
        org.joda.time.ReadableDuration readableDuration19 = null;
        org.joda.time.Instant instant20 = instant17.plus(readableDuration19);
        long long21 = instant17.getMillis();
        java.lang.String str22 = instant17.toString();
        org.joda.time.Instant instant23 = instant17.toInstant();
        org.joda.time.ReadableDuration readableDuration24 = null;
        org.joda.time.Instant instant26 = instant17.withDurationAdded(readableDuration24, (int) 'x');
        org.joda.time.Instant instant27 = instant17.toInstant();
        int int28 = instant9.compareTo((org.joda.time.ReadableInstant) instant17);
        boolean boolean29 = instant1.isBefore((org.joda.time.ReadableInstant) instant17);
        java.util.TimeZone timeZone30 = null;
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forTimeZone(timeZone30);
        org.joda.time.chrono.GJChronology gJChronology32 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone31);
        org.joda.time.DurationField durationField33 = gJChronology32.halfdays();
        long long37 = gJChronology32.add((long) 'a', (-1L), (int) (short) 0);
        org.joda.time.DateTimeField dateTimeField38 = gJChronology32.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField39 = gJChronology32.secondOfMinute();
        org.joda.time.Instant instant41 = new org.joda.time.Instant(52L);
        boolean boolean42 = instant41.isEqualNow();
        org.joda.time.ReadableDuration readableDuration43 = null;
        org.joda.time.Instant instant44 = instant41.plus(readableDuration43);
        boolean boolean45 = gJChronology32.equals((java.lang.Object) instant41);
        org.joda.time.DateTimeFieldType dateTimeFieldType46 = null;
        boolean boolean47 = instant41.isSupported(dateTimeFieldType46);
        org.joda.time.DateTimeFieldType dateTimeFieldType48 = null;
        boolean boolean49 = instant41.isSupported(dateTimeFieldType48);
        java.lang.String str50 = instant41.toString();
        boolean boolean51 = instant1.isAfter((org.joda.time.ReadableInstant) instant41);
        java.util.TimeZone timeZone52 = null;
        org.joda.time.DateTimeZone dateTimeZone53 = org.joda.time.DateTimeZone.forTimeZone(timeZone52);
        java.lang.String str55 = dateTimeZone53.getNameKey((long) 100);
        boolean boolean56 = dateTimeZone53.isFixed();
        org.joda.time.chrono.GJChronology gJChronology57 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone53);
        int int58 = gJChronology57.getMinimumDaysInFirstWeek();
        java.lang.String str59 = gJChronology57.toString();
        org.joda.time.DateTimeField dateTimeField60 = gJChronology57.yearOfEra();
        org.joda.time.DateTime dateTime61 = instant1.toDateTime((org.joda.time.Chronology) gJChronology57);
        org.joda.time.ReadableDuration readableDuration62 = null;
        org.joda.time.Instant instant63 = instant1.minus(readableDuration62);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant9 and dateTime61", (instant9.compareTo(dateTime61) == 0) == instant9.equals(dateTime61));
    }

    @Test
    public void test0226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0226");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forTimeZone(timeZone2);
        org.joda.time.chrono.GJChronology gJChronology4 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone3);
        org.joda.time.DateTimeField dateTimeField5 = gJChronology4.millisOfSecond();
        int int6 = instant1.get(dateTimeField5);
        boolean boolean7 = instant1.isEqualNow();
        org.joda.time.tz.NameProvider nameProvider8 = org.joda.time.DateTimeZone.getNameProvider();
        org.joda.time.DateTimeZone.setNameProvider(nameProvider8);
        org.joda.time.DateTimeZone.setNameProvider(nameProvider8);
        boolean boolean11 = instant1.equals((java.lang.Object) nameProvider8);
        org.joda.time.Instant instant13 = instant1.minus(0L);
        org.joda.time.MutableDateTime mutableDateTime14 = instant1.toMutableDateTimeISO();
        boolean boolean15 = instant1.isAfterNow();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and mutableDateTime14", (instant1.compareTo(mutableDateTime14) == 0) == instant1.equals(mutableDateTime14));
    }

    @Test
    public void test0227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0227");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        boolean boolean2 = instant1.isEqualNow();
        java.lang.String str3 = instant1.toString();
        org.joda.time.Instant instant5 = new org.joda.time.Instant(52L);
        boolean boolean6 = instant5.isEqualNow();
        java.lang.String str7 = instant5.toString();
        java.lang.String str8 = instant5.toString();
        org.joda.time.Instant instant11 = instant5.withDurationAdded(115200000L, (int) (short) 1);
        int int12 = instant1.compareTo((org.joda.time.ReadableInstant) instant5);
        org.joda.time.MutableDateTime mutableDateTime13 = instant1.toMutableDateTime();
        org.joda.time.Instant instant15 = instant1.withMillis((-6514428L));
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant5 and mutableDateTime13", (instant5.compareTo(mutableDateTime13) == 0) == instant5.equals(mutableDateTime13));
    }

    @Test
    public void test0228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0228");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = gJChronology2.halfdays();
        long long7 = gJChronology2.add((long) 'a', (-1L), (int) (short) 0);
        long long11 = gJChronology2.add((long) (byte) 0, (long) '4', 100);
        org.joda.time.DurationField durationField12 = gJChronology2.years();
        java.util.TimeZone timeZone13 = null;
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forTimeZone(timeZone13);
        org.joda.time.chrono.GJChronology gJChronology15 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone14);
        org.joda.time.DurationField durationField16 = gJChronology15.halfdays();
        long long20 = gJChronology15.add((long) 'a', (-1L), (int) (short) 0);
        org.joda.time.DateTimeField dateTimeField21 = gJChronology15.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField22 = gJChronology15.secondOfMinute();
        org.joda.time.Instant instant24 = new org.joda.time.Instant(52L);
        boolean boolean25 = instant24.isEqualNow();
        org.joda.time.ReadableDuration readableDuration26 = null;
        org.joda.time.Instant instant27 = instant24.plus(readableDuration26);
        boolean boolean28 = gJChronology15.equals((java.lang.Object) instant24);
        java.lang.String str29 = gJChronology15.toString();
        org.joda.time.DurationField durationField30 = gJChronology15.eras();
        int int31 = durationField12.compareTo(durationField30);
        long long32 = durationField30.getUnitMillis();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField30, durationField3, and durationField12", !(durationField30.compareTo(durationField3) == 0) || (Math.signum(durationField30.compareTo(durationField12)) == Math.signum(durationField3.compareTo(durationField12))));
    }

    @Test
    public void test0229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0229");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        boolean boolean2 = instant1.isEqualNow();
        java.lang.String str3 = instant1.toString();
        java.util.TimeZone timeZone4 = null;
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forTimeZone(timeZone4);
        org.joda.time.chrono.GJChronology gJChronology6 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone5);
        java.util.Locale locale8 = new java.util.Locale("hi!");
        java.lang.String str9 = locale8.getCountry();
        java.util.Locale locale10 = java.util.Locale.getDefault();
        java.lang.String str11 = locale10.getDisplayName();
        java.lang.String str12 = locale8.getDisplayScript(locale10);
        boolean boolean13 = dateTimeZone5.equals((java.lang.Object) locale10);
        int int15 = dateTimeZone5.getOffsetFromLocal((long) (short) 10);
        java.util.TimeZone timeZone16 = null;
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forTimeZone(timeZone16);
        org.joda.time.chrono.GJChronology gJChronology18 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone17);
        org.joda.time.DateTimeField dateTimeField19 = gJChronology18.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField20 = gJChronology18.weekyearOfCentury();
        org.joda.time.Instant instant21 = gJChronology18.getGregorianCutover();
        org.joda.time.Instant instant23 = instant21.withMillis(0L);
        org.joda.time.Instant instant25 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone26 = null;
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forTimeZone(timeZone26);
        org.joda.time.chrono.GJChronology gJChronology28 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone27);
        org.joda.time.DateTimeField dateTimeField29 = gJChronology28.millisOfSecond();
        int int30 = instant25.get(dateTimeField29);
        org.joda.time.Instant instant32 = instant25.plus(0L);
        int int33 = instant23.compareTo((org.joda.time.ReadableInstant) instant32);
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = null;
        boolean boolean35 = instant32.isSupported(dateTimeFieldType34);
        int int36 = dateTimeZone5.getOffset((org.joda.time.ReadableInstant) instant32);
        boolean boolean37 = instant1.isAfter((org.joda.time.ReadableInstant) instant32);
        org.joda.time.Instant instant39 = instant32.withMillis((long) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType40 = null;
        boolean boolean41 = instant39.isSupported(dateTimeFieldType40);
        org.joda.time.Instant instant43 = new org.joda.time.Instant(52L);
        boolean boolean44 = instant43.isEqualNow();
        boolean boolean46 = instant43.isEqual(0L);
        org.joda.time.DateTimeFieldType dateTimeFieldType47 = null;
        boolean boolean48 = instant43.isSupported(dateTimeFieldType47);
        org.joda.time.Instant instant51 = instant43.withDurationAdded((-61827926399999L), (int) (short) -1);
        org.joda.time.MutableDateTime mutableDateTime52 = instant51.toMutableDateTime();
        org.joda.time.Instant instant53 = instant51.toInstant();
        boolean boolean54 = instant39.isBefore((org.joda.time.ReadableInstant) instant51);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime52 and instant51", (mutableDateTime52.compareTo(instant51) == 0) == mutableDateTime52.equals(instant51));
    }

    @Test
    public void test0230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0230");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forTimeZone(timeZone2);
        org.joda.time.chrono.GJChronology gJChronology4 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone3);
        org.joda.time.DateTimeField dateTimeField5 = gJChronology4.millisOfSecond();
        int int6 = instant1.get(dateTimeField5);
        org.joda.time.Instant instant8 = instant1.plus(0L);
        java.util.TimeZone timeZone9 = null;
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forTimeZone(timeZone9);
        org.joda.time.chrono.GJChronology gJChronology11 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone10);
        org.joda.time.DurationField durationField12 = gJChronology11.halfdays();
        org.joda.time.Chronology chronology13 = gJChronology11.withUTC();
        java.lang.String str14 = gJChronology11.toString();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology11.hourOfHalfday();
        int int16 = instant1.get(dateTimeField15);
        java.util.TimeZone timeZone17 = null;
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forTimeZone(timeZone17);
        org.joda.time.chrono.GJChronology gJChronology19 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone18);
        org.joda.time.DurationField durationField20 = gJChronology19.halfdays();
        long long24 = gJChronology19.add((long) 'a', (-1L), (int) (short) 0);
        org.joda.time.DateTimeField dateTimeField25 = gJChronology19.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField26 = gJChronology19.secondOfMinute();
        org.joda.time.Instant instant28 = new org.joda.time.Instant(52L);
        boolean boolean29 = instant28.isEqualNow();
        org.joda.time.ReadableDuration readableDuration30 = null;
        org.joda.time.Instant instant31 = instant28.plus(readableDuration30);
        boolean boolean32 = gJChronology19.equals((java.lang.Object) instant28);
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = null;
        boolean boolean34 = instant28.isSupported(dateTimeFieldType33);
        org.joda.time.DateTimeFieldType dateTimeFieldType35 = null;
        boolean boolean36 = instant28.isSupported(dateTimeFieldType35);
        org.joda.time.DateTimeZone dateTimeZone37 = instant28.getZone();
        boolean boolean38 = instant1.isAfter((org.joda.time.ReadableInstant) instant28);
        org.joda.time.Instant instant40 = instant1.minus((long) 70);
        org.joda.time.Instant instant42 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone43 = null;
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.forTimeZone(timeZone43);
        org.joda.time.chrono.GJChronology gJChronology45 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone44);
        org.joda.time.DateTimeField dateTimeField46 = gJChronology45.millisOfSecond();
        int int47 = instant42.get(dateTimeField46);
        boolean boolean48 = instant42.isEqualNow();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter49 = null;
        java.lang.String str50 = instant42.toString(dateTimeFormatter49);
        boolean boolean51 = instant1.isAfter((org.joda.time.ReadableInstant) instant42);
        org.joda.time.ReadableDuration readableDuration52 = null;
        org.joda.time.Instant instant53 = instant1.minus(readableDuration52);
        java.util.TimeZone timeZone54 = null;
        org.joda.time.DateTimeZone dateTimeZone55 = org.joda.time.DateTimeZone.forTimeZone(timeZone54);
        org.joda.time.chrono.GJChronology gJChronology56 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone55);
        org.joda.time.DateTimeField dateTimeField57 = gJChronology56.millisOfSecond();
        org.joda.time.DurationField durationField58 = gJChronology56.millis();
        org.joda.time.ReadablePeriod readablePeriod59 = null;
        long long62 = gJChronology56.add(readablePeriod59, (long) 'a', (int) '4');
        org.joda.time.DateTimeZone dateTimeZone63 = gJChronology56.getZone();
        org.joda.time.Instant instant65 = new org.joda.time.Instant(52L);
        boolean boolean66 = instant65.isEqualNow();
        org.joda.time.ReadableDuration readableDuration67 = null;
        org.joda.time.Instant instant68 = instant65.plus(readableDuration67);
        long long69 = instant65.getMillis();
        java.lang.Object obj70 = null;
        boolean boolean71 = instant65.equals(obj70);
        org.joda.time.Instant instant73 = new org.joda.time.Instant(52L);
        boolean boolean74 = instant73.isEqualNow();
        org.joda.time.ReadableDuration readableDuration75 = null;
        org.joda.time.Instant instant76 = instant73.plus(readableDuration75);
        long long77 = instant73.getMillis();
        java.lang.String str78 = instant73.toString();
        org.joda.time.Instant instant79 = instant73.toInstant();
        org.joda.time.ReadableDuration readableDuration80 = null;
        org.joda.time.Instant instant82 = instant73.withDurationAdded(readableDuration80, (int) 'x');
        org.joda.time.Instant instant83 = instant73.toInstant();
        int int84 = instant65.compareTo((org.joda.time.ReadableInstant) instant73);
        int int85 = dateTimeZone63.getOffset((org.joda.time.ReadableInstant) instant65);
        org.joda.time.DateTime dateTime86 = instant1.toDateTime(dateTimeZone63);
        org.joda.time.ReadableDuration readableDuration87 = null;
        org.joda.time.Instant instant88 = instant1.minus(readableDuration87);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant88 and dateTime86", (instant88.compareTo(dateTime86) == 0) == instant88.equals(dateTime86));
    }

    @Test
    public void test0231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0231");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forTimeZone(timeZone2);
        org.joda.time.chrono.GJChronology gJChronology4 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone3);
        org.joda.time.DateTimeField dateTimeField5 = gJChronology4.millisOfSecond();
        int int6 = instant1.get(dateTimeField5);
        boolean boolean7 = instant1.isEqualNow();
        org.joda.time.DateTime dateTime8 = instant1.toDateTime();
        org.joda.time.Instant instant11 = instant1.withDurationAdded((long) 1431201, 1970);
        java.util.TimeZone timeZone12 = null;
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forTimeZone(timeZone12);
        org.joda.time.chrono.GJChronology gJChronology14 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone13);
        org.joda.time.DateTimeField dateTimeField15 = gJChronology14.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField16 = gJChronology14.weekyearOfCentury();
        org.joda.time.Instant instant17 = gJChronology14.getGregorianCutover();
        org.joda.time.Instant instant19 = instant17.withMillis(0L);
        org.joda.time.Instant instant21 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone22 = null;
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        org.joda.time.chrono.GJChronology gJChronology24 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone23);
        org.joda.time.DateTimeField dateTimeField25 = gJChronology24.millisOfSecond();
        int int26 = instant21.get(dateTimeField25);
        org.joda.time.Instant instant28 = instant21.plus(0L);
        int int29 = instant19.compareTo((org.joda.time.ReadableInstant) instant28);
        org.joda.time.Instant instant31 = new org.joda.time.Instant(52L);
        boolean boolean32 = instant31.isEqualNow();
        org.joda.time.ReadableDuration readableDuration33 = null;
        org.joda.time.Instant instant34 = instant31.plus(readableDuration33);
        boolean boolean36 = instant34.equals((java.lang.Object) ' ');
        boolean boolean37 = instant28.isEqual((org.joda.time.ReadableInstant) instant34);
        java.lang.String str38 = instant28.toString();
        org.joda.time.ReadableDuration readableDuration39 = null;
        org.joda.time.Instant instant41 = instant28.withDurationAdded(readableDuration39, 1431201);
        java.lang.Object obj42 = null;
        boolean boolean43 = instant28.equals(obj42);
        java.util.Date date44 = instant28.toDate();
        boolean boolean45 = instant11.isAfter((org.joda.time.ReadableInstant) instant28);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and dateTime8", (instant1.compareTo(dateTime8) == 0) == instant1.equals(dateTime8));
    }

    @Test
    public void test0232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0232");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        boolean boolean2 = instant1.isEqualNow();
        java.lang.String str3 = instant1.toString();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.MutableDateTime mutableDateTime5 = instant1.toMutableDateTime(chronology4);
        java.util.TimeZone timeZone6 = null;
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forTimeZone(timeZone6);
        org.joda.time.chrono.GJChronology gJChronology8 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone7);
        org.joda.time.DurationField durationField9 = gJChronology8.halfdays();
        long long13 = gJChronology8.add((long) 'a', (-1L), (int) (short) 0);
        boolean boolean15 = gJChronology8.equals((java.lang.Object) 0);
        org.joda.time.DateTimeField dateTimeField16 = gJChronology8.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField17 = gJChronology8.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField18 = gJChronology8.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField19 = gJChronology8.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField20 = gJChronology8.weekyear();
        java.util.TimeZone timeZone21 = null;
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forTimeZone(timeZone21);
        org.joda.time.chrono.GJChronology gJChronology23 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone22);
        org.joda.time.DateTimeField dateTimeField24 = gJChronology23.millisOfSecond();
        org.joda.time.DurationField durationField25 = gJChronology23.millis();
        org.joda.time.DateTimeZone dateTimeZone26 = gJChronology23.getZone();
        org.joda.time.Chronology chronology27 = gJChronology8.withZone(dateTimeZone26);
        long long30 = dateTimeZone26.convertLocalToUTC(110449353600000L, false);
        org.joda.time.DateTime dateTime31 = mutableDateTime5.toDateTime(dateTimeZone26);
        long long32 = mutableDateTime5.getMillis();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and dateTime31", (instant1.compareTo(dateTime31) == 0) == instant1.equals(dateTime31));
    }

    @Test
    public void test0233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0233");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forTimeZone(timeZone2);
        org.joda.time.chrono.GJChronology gJChronology4 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone3);
        org.joda.time.DateTimeField dateTimeField5 = gJChronology4.millisOfSecond();
        int int6 = instant1.get(dateTimeField5);
        org.joda.time.Instant instant8 = instant1.plus(0L);
        org.joda.time.Instant instant10 = new org.joda.time.Instant(52L);
        boolean boolean11 = instant10.isEqualNow();
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.Instant instant13 = instant10.plus(readableDuration12);
        long long14 = instant10.getMillis();
        java.lang.String str15 = instant10.toString();
        org.joda.time.Instant instant16 = instant10.toInstant();
        java.util.TimeZone timeZone17 = null;
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forTimeZone(timeZone17);
        java.lang.String str20 = dateTimeZone18.getNameKey((long) 100);
        long long23 = dateTimeZone18.convertLocalToUTC((-2246399965L), true);
        org.joda.time.MutableDateTime mutableDateTime24 = instant16.toMutableDateTime(dateTimeZone18);
        int int25 = instant8.compareTo((org.joda.time.ReadableInstant) mutableDateTime24);
        java.lang.Class<?> wildcardClass26 = instant8.getClass();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant8 and mutableDateTime24", (instant8.compareTo(mutableDateTime24) == 0) == instant8.equals(mutableDateTime24));
    }

    @Test
    public void test0234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0234");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        boolean boolean2 = instant1.isEqualNow();
        org.joda.time.ReadableDuration readableDuration3 = null;
        org.joda.time.Instant instant4 = instant1.plus(readableDuration3);
        long long5 = instant1.getMillis();
        java.lang.Object obj6 = null;
        boolean boolean7 = instant1.equals(obj6);
        org.joda.time.Instant instant9 = new org.joda.time.Instant(52L);
        boolean boolean10 = instant9.isEqualNow();
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.Instant instant12 = instant9.plus(readableDuration11);
        long long13 = instant9.getMillis();
        java.lang.String str14 = instant9.toString();
        org.joda.time.Instant instant15 = instant9.toInstant();
        org.joda.time.ReadableDuration readableDuration16 = null;
        org.joda.time.Instant instant18 = instant9.withDurationAdded(readableDuration16, (int) 'x');
        org.joda.time.Instant instant19 = instant9.toInstant();
        int int20 = instant1.compareTo((org.joda.time.ReadableInstant) instant9);
        java.util.TimeZone timeZone21 = null;
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forTimeZone(timeZone21);
        org.joda.time.chrono.GJChronology gJChronology23 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone22);
        org.joda.time.DateTimeField dateTimeField24 = gJChronology23.era();
        org.joda.time.DateTimeField dateTimeField25 = gJChronology23.centuryOfEra();
        org.joda.time.DurationField durationField26 = gJChronology23.hours();
        org.joda.time.DateTimeField dateTimeField27 = gJChronology23.monthOfYear();
        org.joda.time.DateTimeField dateTimeField28 = gJChronology23.dayOfWeek();
        java.util.TimeZone timeZone29 = null;
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forTimeZone(timeZone29);
        org.joda.time.chrono.GJChronology gJChronology31 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone30);
        int int33 = dateTimeZone30.getStandardOffset((long) (byte) 0);
        org.joda.time.Chronology chronology34 = gJChronology23.withZone(dateTimeZone30);
        int int36 = dateTimeZone30.getOffsetFromLocal(262978799880L);
        org.joda.time.MutableDateTime mutableDateTime37 = instant1.toMutableDateTime(dateTimeZone30);
        org.joda.time.DateTime dateTime38 = instant1.toDateTime();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and mutableDateTime37", (instant1.compareTo(mutableDateTime37) == 0) == instant1.equals(mutableDateTime37));
    }

    @Test
    public void test0235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0235");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forTimeZone(timeZone2);
        org.joda.time.chrono.GJChronology gJChronology4 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone3);
        org.joda.time.DateTimeField dateTimeField5 = gJChronology4.millisOfSecond();
        int int6 = instant1.get(dateTimeField5);
        boolean boolean7 = instant1.isEqualNow();
        org.joda.time.Instant instant9 = new org.joda.time.Instant(52L);
        boolean boolean10 = instant9.isEqualNow();
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.Instant instant12 = instant9.plus(readableDuration11);
        long long13 = instant9.getMillis();
        java.lang.Object obj14 = null;
        boolean boolean15 = instant9.equals(obj14);
        org.joda.time.Instant instant17 = new org.joda.time.Instant(52L);
        boolean boolean18 = instant17.isEqualNow();
        org.joda.time.ReadableDuration readableDuration19 = null;
        org.joda.time.Instant instant20 = instant17.plus(readableDuration19);
        long long21 = instant17.getMillis();
        java.lang.String str22 = instant17.toString();
        org.joda.time.Instant instant23 = instant17.toInstant();
        org.joda.time.ReadableDuration readableDuration24 = null;
        org.joda.time.Instant instant26 = instant17.withDurationAdded(readableDuration24, (int) 'x');
        org.joda.time.Instant instant27 = instant17.toInstant();
        int int28 = instant9.compareTo((org.joda.time.ReadableInstant) instant17);
        boolean boolean29 = instant1.isBefore((org.joda.time.ReadableInstant) instant17);
        java.util.TimeZone timeZone30 = null;
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forTimeZone(timeZone30);
        org.joda.time.chrono.GJChronology gJChronology32 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone31);
        org.joda.time.DurationField durationField33 = gJChronology32.halfdays();
        long long37 = gJChronology32.add((long) 'a', (-1L), (int) (short) 0);
        org.joda.time.DateTimeField dateTimeField38 = gJChronology32.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField39 = gJChronology32.secondOfMinute();
        org.joda.time.Instant instant41 = new org.joda.time.Instant(52L);
        boolean boolean42 = instant41.isEqualNow();
        org.joda.time.ReadableDuration readableDuration43 = null;
        org.joda.time.Instant instant44 = instant41.plus(readableDuration43);
        boolean boolean45 = gJChronology32.equals((java.lang.Object) instant41);
        org.joda.time.DateTimeFieldType dateTimeFieldType46 = null;
        boolean boolean47 = instant41.isSupported(dateTimeFieldType46);
        org.joda.time.DateTimeFieldType dateTimeFieldType48 = null;
        boolean boolean49 = instant41.isSupported(dateTimeFieldType48);
        java.lang.String str50 = instant41.toString();
        boolean boolean51 = instant1.isAfter((org.joda.time.ReadableInstant) instant41);
        java.util.TimeZone timeZone52 = null;
        org.joda.time.DateTimeZone dateTimeZone53 = org.joda.time.DateTimeZone.forTimeZone(timeZone52);
        java.lang.String str55 = dateTimeZone53.getNameKey((long) 100);
        boolean boolean56 = dateTimeZone53.isFixed();
        org.joda.time.chrono.GJChronology gJChronology57 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone53);
        int int58 = gJChronology57.getMinimumDaysInFirstWeek();
        java.lang.String str59 = gJChronology57.toString();
        org.joda.time.DateTimeField dateTimeField60 = gJChronology57.yearOfEra();
        org.joda.time.DateTime dateTime61 = instant1.toDateTime((org.joda.time.Chronology) gJChronology57);
        java.util.TimeZone timeZone62 = null;
        org.joda.time.DateTimeZone dateTimeZone63 = org.joda.time.DateTimeZone.forTimeZone(timeZone62);
        org.joda.time.chrono.GJChronology gJChronology64 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone63);
        org.joda.time.DurationField durationField65 = gJChronology64.halfdays();
        org.joda.time.DateTimeField dateTimeField66 = gJChronology64.millisOfDay();
        org.joda.time.DateTimeField dateTimeField67 = gJChronology64.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField68 = gJChronology64.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField69 = gJChronology64.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField70 = gJChronology64.yearOfCentury();
        org.joda.time.DateTime dateTime71 = dateTime61.toDateTime((org.joda.time.Chronology) gJChronology64);
        int int72 = gJChronology64.getMinimumDaysInFirstWeek();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and dateTime61", (instant1.compareTo(dateTime61) == 0) == instant1.equals(dateTime61));
    }

    @Test
    public void test0236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0236");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        boolean boolean2 = instant1.isEqualNow();
        org.joda.time.ReadableDuration readableDuration3 = null;
        org.joda.time.Instant instant4 = instant1.plus(readableDuration3);
        long long5 = instant1.getMillis();
        java.lang.String str6 = instant1.toString();
        boolean boolean8 = instant1.isAfter((long) (-1));
        java.lang.Object obj9 = null;
        boolean boolean10 = instant1.equals(obj9);
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.Instant instant12 = instant1.minus(readableDuration11);
        org.joda.time.DateTime dateTime13 = instant12.toDateTime();
        boolean boolean15 = instant12.isBefore((long) 985);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant12 and dateTime13", (instant12.compareTo(dateTime13) == 0) == instant12.equals(dateTime13));
    }

    @Test
    public void test0237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0237");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forTimeZone(timeZone2);
        org.joda.time.chrono.GJChronology gJChronology4 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone3);
        org.joda.time.DateTimeField dateTimeField5 = gJChronology4.millisOfSecond();
        int int6 = instant1.get(dateTimeField5);
        org.joda.time.Instant instant8 = instant1.plus(0L);
        org.joda.time.Instant instant10 = new org.joda.time.Instant(52L);
        boolean boolean11 = instant10.isEqualNow();
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.Instant instant13 = instant10.plus(readableDuration12);
        long long14 = instant10.getMillis();
        java.lang.String str15 = instant10.toString();
        org.joda.time.Instant instant16 = instant10.toInstant();
        java.util.TimeZone timeZone17 = null;
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forTimeZone(timeZone17);
        java.lang.String str20 = dateTimeZone18.getNameKey((long) 100);
        long long23 = dateTimeZone18.convertLocalToUTC((-2246399965L), true);
        org.joda.time.MutableDateTime mutableDateTime24 = instant16.toMutableDateTime(dateTimeZone18);
        int int25 = instant8.compareTo((org.joda.time.ReadableInstant) mutableDateTime24);
        org.joda.time.Instant instant27 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone28 = null;
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forTimeZone(timeZone28);
        org.joda.time.chrono.GJChronology gJChronology30 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone29);
        org.joda.time.DateTimeField dateTimeField31 = gJChronology30.millisOfSecond();
        int int32 = instant27.get(dateTimeField31);
        org.joda.time.Instant instant34 = instant27.plus(0L);
        org.joda.time.Instant instant35 = instant34.toInstant();
        boolean boolean36 = mutableDateTime24.isEqual((org.joda.time.ReadableInstant) instant35);
        boolean boolean37 = instant35.isBeforeNow();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and mutableDateTime24", (instant1.compareTo(mutableDateTime24) == 0) == instant1.equals(mutableDateTime24));
    }

    @Test
    public void test0238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0238");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = gJChronology2.halfdays();
        long long7 = gJChronology2.add(0L, (long) (short) -1, (int) '4');
        java.util.TimeZone timeZone8 = null;
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forTimeZone(timeZone8);
        org.joda.time.chrono.GJChronology gJChronology10 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone9);
        org.joda.time.DurationField durationField11 = gJChronology10.halfdays();
        org.joda.time.DateTimeField dateTimeField12 = gJChronology10.millisOfDay();
        org.joda.time.DateTimeField dateTimeField13 = gJChronology10.minuteOfDay();
        org.joda.time.DurationField durationField14 = gJChronology10.centuries();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology10.dayOfYear();
        java.lang.String str16 = gJChronology10.toString();
        org.joda.time.DurationField durationField17 = gJChronology10.years();
        org.joda.time.DateTimeField dateTimeField18 = gJChronology10.yearOfEra();
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(0, (int) (short) 10);
        org.joda.time.Chronology chronology22 = gJChronology10.withZone(dateTimeZone21);
        org.joda.time.Chronology chronology23 = gJChronology2.withZone(dateTimeZone21);
        org.joda.time.DurationField durationField24 = gJChronology2.halfdays();
        org.joda.time.Instant instant25 = gJChronology2.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration26 = null;
        org.joda.time.Instant instant27 = instant25.plus(readableDuration26);
        org.joda.time.DateTime dateTime28 = instant27.toDateTimeISO();
        org.joda.time.Instant instant30 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone31 = null;
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.forTimeZone(timeZone31);
        org.joda.time.chrono.GJChronology gJChronology33 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone32);
        org.joda.time.DateTimeField dateTimeField34 = gJChronology33.millisOfSecond();
        int int35 = instant30.get(dateTimeField34);
        org.joda.time.Instant instant37 = instant30.plus(0L);
        org.joda.time.Instant instant38 = instant37.toInstant();
        org.joda.time.Instant instant40 = new org.joda.time.Instant(52L);
        boolean boolean41 = instant40.isEqualNow();
        java.lang.String str42 = instant40.toString();
        java.lang.String str43 = instant40.toString();
        org.joda.time.Instant instant45 = new org.joda.time.Instant(52L);
        boolean boolean46 = instant45.isEqualNow();
        org.joda.time.ReadableDuration readableDuration47 = null;
        org.joda.time.Instant instant48 = instant45.plus(readableDuration47);
        boolean boolean49 = instant40.isBefore((org.joda.time.ReadableInstant) instant48);
        org.joda.time.Instant instant51 = instant40.minus((long) 0);
        int int52 = instant37.compareTo((org.joda.time.ReadableInstant) instant40);
        org.joda.time.Instant instant55 = instant40.withDurationAdded((long) (short) 100, 70);
        org.joda.time.ReadableInstant readableInstant56 = null;
        boolean boolean57 = instant40.isBefore(readableInstant56);
        org.joda.time.Instant instant59 = new org.joda.time.Instant(52L);
        boolean boolean60 = instant59.isEqualNow();
        org.joda.time.ReadableDuration readableDuration61 = null;
        org.joda.time.Instant instant62 = instant59.plus(readableDuration61);
        long long63 = instant59.getMillis();
        java.lang.String str64 = instant59.toString();
        org.joda.time.Instant instant65 = instant59.toInstant();
        org.joda.time.ReadableDuration readableDuration66 = null;
        org.joda.time.Instant instant68 = instant59.withDurationAdded(readableDuration66, (int) 'x');
        java.util.TimeZone timeZone69 = null;
        org.joda.time.DateTimeZone dateTimeZone70 = org.joda.time.DateTimeZone.forTimeZone(timeZone69);
        java.lang.String str72 = dateTimeZone70.getNameKey((long) 100);
        boolean boolean73 = dateTimeZone70.isFixed();
        org.joda.time.chrono.GJChronology gJChronology74 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone70);
        java.lang.String str75 = dateTimeZone70.toString();
        org.joda.time.DateTime dateTime76 = instant68.toDateTime(dateTimeZone70);
        boolean boolean77 = instant40.isBefore((org.joda.time.ReadableInstant) dateTime76);
        boolean boolean78 = dateTime28.isEqual((org.joda.time.ReadableInstant) instant40);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant30 and dateTime76", (instant30.compareTo(dateTime76) == 0) == instant30.equals(dateTime76));
    }

    @Test
    public void test0239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0239");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str3 = dateTimeZone1.getNameKey((long) 100);
        boolean boolean4 = dateTimeZone1.isFixed();
        java.util.Locale locale8 = new java.util.Locale("DurationField[halfdays]", "\u82f1\u6587");
        java.lang.String str9 = dateTimeZone1.getName((long) (short) 10, locale8);
        org.joda.time.Instant instant11 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone12 = null;
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forTimeZone(timeZone12);
        org.joda.time.chrono.GJChronology gJChronology14 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone13);
        org.joda.time.DateTimeField dateTimeField15 = gJChronology14.millisOfSecond();
        int int16 = instant11.get(dateTimeField15);
        org.joda.time.Chronology chronology17 = instant11.getChronology();
        org.joda.time.chrono.GJChronology gJChronology18 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1, (org.joda.time.ReadableInstant) instant11);
        org.joda.time.DateTime dateTime19 = instant11.toDateTime();
        org.joda.time.ReadableDuration readableDuration20 = null;
        org.joda.time.Instant instant21 = instant11.minus(readableDuration20);
        java.util.TimeZone timeZone22 = null;
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        org.joda.time.chrono.GJChronology gJChronology24 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone23);
        org.joda.time.DurationField durationField25 = gJChronology24.halfdays();
        org.joda.time.DateTimeField dateTimeField26 = gJChronology24.millisOfDay();
        org.joda.time.DateTimeField dateTimeField27 = gJChronology24.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField28 = gJChronology24.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField29 = gJChronology24.secondOfDay();
        org.joda.time.Chronology chronology30 = gJChronology24.withUTC();
        org.joda.time.DateTime dateTime31 = instant11.toDateTime(chronology30);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime19 and instant11", (dateTime19.compareTo(instant11) == 0) == dateTime19.equals(instant11));
    }

    @Test
    public void test0240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0240");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        boolean boolean2 = instant1.isEqualNow();
        org.joda.time.ReadableDuration readableDuration3 = null;
        org.joda.time.Instant instant4 = instant1.plus(readableDuration3);
        long long5 = instant1.getMillis();
        java.lang.String str6 = instant1.toString();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.getDefault();
        long long9 = dateTimeZone7.nextTransition(1000L);
        org.joda.time.DateTime dateTime10 = instant1.toDateTime(dateTimeZone7);
        java.util.TimeZone timeZone11 = null;
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forTimeZone(timeZone11);
        org.joda.time.chrono.GJChronology gJChronology13 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone12);
        long long17 = dateTimeZone12.convertLocalToUTC((long) (byte) -1, true, 0L);
        boolean boolean19 = dateTimeZone12.equals((java.lang.Object) true);
        org.joda.time.chrono.GJChronology gJChronology20 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone12);
        org.joda.time.DateTimeField dateTimeField21 = gJChronology20.weekyear();
        org.joda.time.DateTimeField dateTimeField22 = gJChronology20.era();
        org.joda.time.DateTimeField dateTimeField23 = gJChronology20.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        long long27 = gJChronology20.add(readablePeriod24, (-26438399999L), (int) (byte) 100);
        org.joda.time.DurationField durationField28 = gJChronology20.hours();
        org.joda.time.DateTimeField dateTimeField29 = gJChronology20.era();
        org.joda.time.MutableDateTime mutableDateTime30 = dateTime10.toMutableDateTime((org.joda.time.Chronology) gJChronology20);
        org.joda.time.Instant instant32 = new org.joda.time.Instant(52L);
        boolean boolean33 = instant32.isEqualNow();
        org.joda.time.ReadableDuration readableDuration34 = null;
        org.joda.time.Instant instant35 = instant32.plus(readableDuration34);
        long long36 = instant32.getMillis();
        java.lang.Object obj37 = null;
        boolean boolean38 = instant32.equals(obj37);
        java.util.TimeZone timeZone39 = null;
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.forTimeZone(timeZone39);
        org.joda.time.chrono.GJChronology gJChronology41 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone40);
        org.joda.time.DateTimeField dateTimeField42 = gJChronology41.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField43 = gJChronology41.weekyearOfCentury();
        org.joda.time.Instant instant44 = gJChronology41.getGregorianCutover();
        org.joda.time.Instant instant46 = new org.joda.time.Instant(52L);
        boolean boolean47 = instant46.isEqualNow();
        java.lang.String str48 = instant46.toString();
        java.lang.String str49 = instant46.toString();
        org.joda.time.Instant instant51 = new org.joda.time.Instant(52L);
        boolean boolean52 = instant51.isEqualNow();
        org.joda.time.ReadableDuration readableDuration53 = null;
        org.joda.time.Instant instant54 = instant51.plus(readableDuration53);
        boolean boolean55 = instant46.isBefore((org.joda.time.ReadableInstant) instant54);
        org.joda.time.Instant instant57 = instant54.plus((long) (short) 100);
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.MutableDateTime mutableDateTime59 = instant54.toMutableDateTime(chronology58);
        boolean boolean60 = instant44.isEqual((org.joda.time.ReadableInstant) mutableDateTime59);
        boolean boolean61 = instant32.isAfter((org.joda.time.ReadableInstant) mutableDateTime59);
        boolean boolean63 = mutableDateTime59.isAfter((long) 5995);
        int int64 = dateTime10.compareTo((org.joda.time.ReadableInstant) mutableDateTime59);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and mutableDateTime30", (instant1.compareTo(mutableDateTime30) == 0) == instant1.equals(mutableDateTime30));
    }

    @Test
    public void test0241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0241");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        boolean boolean2 = instant1.isEqualNow();
        java.lang.String str3 = instant1.toString();
        java.util.TimeZone timeZone4 = null;
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forTimeZone(timeZone4);
        org.joda.time.chrono.GJChronology gJChronology6 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone5);
        java.util.Locale locale8 = new java.util.Locale("hi!");
        java.lang.String str9 = locale8.getCountry();
        java.util.Locale locale10 = java.util.Locale.getDefault();
        java.lang.String str11 = locale10.getDisplayName();
        java.lang.String str12 = locale8.getDisplayScript(locale10);
        boolean boolean13 = dateTimeZone5.equals((java.lang.Object) locale10);
        int int15 = dateTimeZone5.getOffsetFromLocal((long) (short) 10);
        java.util.TimeZone timeZone16 = null;
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forTimeZone(timeZone16);
        org.joda.time.chrono.GJChronology gJChronology18 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone17);
        org.joda.time.DateTimeField dateTimeField19 = gJChronology18.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField20 = gJChronology18.weekyearOfCentury();
        org.joda.time.Instant instant21 = gJChronology18.getGregorianCutover();
        org.joda.time.Instant instant23 = instant21.withMillis(0L);
        org.joda.time.Instant instant25 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone26 = null;
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forTimeZone(timeZone26);
        org.joda.time.chrono.GJChronology gJChronology28 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone27);
        org.joda.time.DateTimeField dateTimeField29 = gJChronology28.millisOfSecond();
        int int30 = instant25.get(dateTimeField29);
        org.joda.time.Instant instant32 = instant25.plus(0L);
        int int33 = instant23.compareTo((org.joda.time.ReadableInstant) instant32);
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = null;
        boolean boolean35 = instant32.isSupported(dateTimeFieldType34);
        int int36 = dateTimeZone5.getOffset((org.joda.time.ReadableInstant) instant32);
        boolean boolean37 = instant1.isAfter((org.joda.time.ReadableInstant) instant32);
        org.joda.time.ReadableDuration readableDuration38 = null;
        org.joda.time.Instant instant39 = instant1.minus(readableDuration38);
        org.joda.time.Instant instant40 = instant39.toInstant();
        java.util.Date date41 = instant39.toDate();
        java.util.TimeZone timeZone42 = null;
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.forTimeZone(timeZone42);
        org.joda.time.chrono.GJChronology gJChronology44 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone43);
        org.joda.time.DurationField durationField45 = gJChronology44.halfdays();
        long long49 = gJChronology44.add((long) 'a', (-1L), (int) (short) 0);
        boolean boolean51 = gJChronology44.equals((java.lang.Object) 0);
        org.joda.time.DateTimeField dateTimeField52 = gJChronology44.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField53 = gJChronology44.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField54 = gJChronology44.clockhourOfDay();
        long long59 = gJChronology44.getDateTimeMillis(10, (int) (short) 10, 4, (int) (byte) 1);
        org.joda.time.DateTimeField dateTimeField60 = gJChronology44.millisOfDay();
        java.lang.String str61 = gJChronology44.toString();
        org.joda.time.DateTimeField dateTimeField62 = gJChronology44.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField63 = gJChronology44.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField64 = gJChronology44.halfdayOfDay();
        java.util.TimeZone timeZone65 = null;
        org.joda.time.DateTimeZone dateTimeZone66 = org.joda.time.DateTimeZone.forTimeZone(timeZone65);
        org.joda.time.chrono.GJChronology gJChronology67 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone66);
        org.joda.time.DurationField durationField68 = gJChronology67.halfdays();
        long long72 = gJChronology67.add((long) 'a', (-1L), (int) (short) 0);
        long long76 = gJChronology67.add((long) (byte) 0, (long) '4', 100);
        org.joda.time.DurationField durationField77 = gJChronology67.years();
        org.joda.time.DateTimeField dateTimeField78 = gJChronology67.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone79 = gJChronology67.getZone();
        org.joda.time.Chronology chronology80 = gJChronology44.withZone(dateTimeZone79);
        org.joda.time.MutableDateTime mutableDateTime81 = instant39.toMutableDateTime(dateTimeZone79);
        org.joda.time.ReadableDuration readableDuration82 = null;
        org.joda.time.Instant instant83 = instant39.minus(readableDuration82);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant83 and mutableDateTime81", (instant83.compareTo(mutableDateTime81) == 0) == instant83.equals(mutableDateTime81));
    }

    @Test
    public void test0242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0242");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        boolean boolean2 = instant1.isEqualNow();
        org.joda.time.ReadableDuration readableDuration3 = null;
        org.joda.time.Instant instant4 = instant1.plus(readableDuration3);
        org.joda.time.Instant instant6 = new org.joda.time.Instant(52L);
        org.joda.time.Instant instant8 = instant6.withMillis((long) 'u');
        boolean boolean9 = instant1.isBefore((org.joda.time.ReadableInstant) instant6);
        java.util.TimeZone timeZone10 = null;
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forTimeZone(timeZone10);
        org.joda.time.chrono.GJChronology gJChronology12 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone11);
        org.joda.time.DurationField durationField13 = gJChronology12.halfdays();
        long long17 = gJChronology12.add((long) 'a', (-1L), (int) (short) 0);
        long long21 = gJChronology12.add((long) (byte) 0, (long) '4', 100);
        org.joda.time.DateTimeField dateTimeField22 = gJChronology12.minuteOfHour();
        org.joda.time.DurationField durationField23 = gJChronology12.hours();
        org.joda.time.DateTimeField dateTimeField24 = gJChronology12.weekOfWeekyear();
        org.joda.time.DateTime dateTime25 = instant6.toDateTime((org.joda.time.Chronology) gJChronology12);
        org.joda.time.Instant instant26 = instant6.toInstant();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and dateTime25", (instant1.compareTo(dateTime25) == 0) == instant1.equals(dateTime25));
    }

    @Test
    public void test0243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0243");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = gJChronology2.halfdays();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.millisOfDay();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.minuteOfDay();
        org.joda.time.DurationField durationField6 = gJChronology2.centuries();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology2.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField8 = gJChronology2.weekyear();
        org.joda.time.DurationField durationField9 = gJChronology2.eras();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField9, durationField3, and durationField6", !(durationField9.compareTo(durationField3) == 0) || (Math.signum(durationField9.compareTo(durationField6)) == Math.signum(durationField3.compareTo(durationField6))));
    }

    @Test
    public void test0244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0244");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        org.joda.time.Instant instant3 = instant1.withMillis((long) 'u');
        java.util.TimeZone timeZone4 = null;
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forTimeZone(timeZone4);
        org.joda.time.chrono.GJChronology gJChronology6 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone5);
        org.joda.time.DurationField durationField7 = gJChronology6.halfdays();
        long long11 = gJChronology6.add((long) 'a', (-1L), (int) (short) 0);
        boolean boolean13 = gJChronology6.equals((java.lang.Object) 0);
        org.joda.time.DateTimeField dateTimeField14 = gJChronology6.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology6.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField16 = gJChronology6.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField17 = gJChronology6.clockhourOfHalfday();
        org.joda.time.DateTime dateTime18 = instant1.toDateTime((org.joda.time.Chronology) gJChronology6);
        org.joda.time.Instant instant20 = new org.joda.time.Instant(52L);
        boolean boolean21 = instant20.isEqualNow();
        java.lang.String str22 = instant20.toString();
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MutableDateTime mutableDateTime24 = instant20.toMutableDateTime(chronology23);
        org.joda.time.Instant instant26 = new org.joda.time.Instant(52L);
        boolean boolean27 = instant26.isEqualNow();
        org.joda.time.Instant instant29 = new org.joda.time.Instant(52L);
        org.joda.time.Instant instant31 = instant29.withMillis((long) 'u');
        boolean boolean32 = instant26.isAfter((org.joda.time.ReadableInstant) instant29);
        boolean boolean33 = mutableDateTime24.isEqual((org.joda.time.ReadableInstant) instant29);
        java.util.Locale.Category category34 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale35 = java.util.Locale.getDefault();
        boolean boolean36 = locale35.hasExtensions();
        java.lang.String str37 = locale35.getISO3Language();
        java.util.Locale.setDefault(category34, locale35);
        java.util.Locale locale39 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale40 = java.util.Locale.ENGLISH;
        java.lang.String str41 = locale39.getDisplayLanguage(locale40);
        java.util.Locale locale42 = java.util.Locale.CANADA;
        java.lang.String str43 = locale42.getISO3Language();
        java.lang.String str44 = locale39.getDisplayVariant(locale42);
        java.lang.String str45 = locale39.getDisplayName();
        java.util.Locale.setDefault(category34, locale39);
        boolean boolean47 = mutableDateTime24.equals((java.lang.Object) locale39);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter48 = null;
        java.lang.String str49 = mutableDateTime24.toString(dateTimeFormatter48);
        boolean boolean50 = instant1.isBefore((org.joda.time.ReadableInstant) mutableDateTime24);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime18 and instant20", (dateTime18.compareTo(instant20) == 0) == dateTime18.equals(instant20));
    }

    @Test
    public void test0245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0245");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        boolean boolean2 = instant1.isEqualNow();
        org.joda.time.ReadableDuration readableDuration3 = null;
        org.joda.time.Instant instant4 = instant1.plus(readableDuration3);
        long long5 = instant1.getMillis();
        java.lang.String str6 = instant1.toString();
        org.joda.time.Instant instant7 = instant1.toInstant();
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.Instant instant10 = instant1.withDurationAdded(readableDuration8, (int) 'x');
        org.joda.time.Instant instant11 = instant1.toInstant();
        org.joda.time.Instant instant13 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone14 = null;
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forTimeZone(timeZone14);
        org.joda.time.chrono.GJChronology gJChronology16 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone15);
        org.joda.time.DateTimeField dateTimeField17 = gJChronology16.millisOfSecond();
        int int18 = instant13.get(dateTimeField17);
        boolean boolean19 = instant13.isEqualNow();
        org.joda.time.tz.NameProvider nameProvider20 = org.joda.time.DateTimeZone.getNameProvider();
        org.joda.time.DateTimeZone.setNameProvider(nameProvider20);
        org.joda.time.DateTimeZone.setNameProvider(nameProvider20);
        boolean boolean23 = instant13.equals((java.lang.Object) nameProvider20);
        org.joda.time.Instant instant25 = instant13.minus(0L);
        org.joda.time.MutableDateTime mutableDateTime26 = instant13.toMutableDateTimeISO();
        boolean boolean27 = instant11.isBefore((org.joda.time.ReadableInstant) instant13);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant11 and mutableDateTime26", (instant11.compareTo(mutableDateTime26) == 0) == instant11.equals(mutableDateTime26));
    }

    @Test
    public void test0246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0246");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField3 = gJChronology2.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.weekyear();
        org.joda.time.DurationField durationField5 = gJChronology2.centuries();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology2.millisOfDay();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField8 = gJChronology2.clockhourOfHalfday();
        org.joda.time.DurationField durationField9 = gJChronology2.years();
        org.joda.time.Instant instant10 = org.joda.time.Instant.now();
        org.joda.time.Instant instant13 = instant10.withDurationAdded(306102434400000L, (int) (short) 100);
        java.util.TimeZone timeZone14 = null;
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forTimeZone(timeZone14);
        java.lang.String str17 = dateTimeZone15.getNameKey((long) 100);
        boolean boolean18 = dateTimeZone15.isFixed();
        org.joda.time.chrono.GJChronology gJChronology19 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone15);
        long long21 = dateTimeZone15.convertUTCToLocal(5200L);
        org.joda.time.chrono.GJChronology gJChronology22 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone15);
        org.joda.time.MutableDateTime mutableDateTime23 = instant10.toMutableDateTime(dateTimeZone15);
        org.joda.time.Chronology chronology24 = gJChronology2.withZone(dateTimeZone15);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant10 and mutableDateTime23", (instant10.compareTo(mutableDateTime23) == 0) == instant10.equals(mutableDateTime23));
    }

    @Test
    public void test0247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0247");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        boolean boolean2 = instant1.isEqualNow();
        org.joda.time.ReadableDuration readableDuration3 = null;
        org.joda.time.Instant instant4 = instant1.plus(readableDuration3);
        org.joda.time.Instant instant6 = new org.joda.time.Instant(52L);
        org.joda.time.Instant instant8 = instant6.withMillis((long) 'u');
        boolean boolean9 = instant1.isBefore((org.joda.time.ReadableInstant) instant6);
        org.joda.time.DateTimeZone dateTimeZone10 = instant6.getZone();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetMillis((int) '4');
        java.util.TimeZone timeZone13 = dateTimeZone12.toTimeZone();
        long long16 = dateTimeZone12.adjustOffset((long) 0, false);
        int int18 = dateTimeZone12.getOffsetFromLocal((-26438399999L));
        java.util.TimeZone timeZone19 = dateTimeZone12.toTimeZone();
        java.lang.String str20 = dateTimeZone12.getID();
        org.joda.time.DateTime dateTime21 = instant6.toDateTime(dateTimeZone12);
        java.util.TimeZone timeZone22 = null;
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        org.joda.time.chrono.GJChronology gJChronology24 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone23);
        long long28 = dateTimeZone23.convertLocalToUTC((long) (byte) -1, true, 0L);
        boolean boolean30 = dateTimeZone23.equals((java.lang.Object) true);
        java.util.Locale locale32 = java.util.Locale.getDefault();
        java.lang.String str33 = locale32.getDisplayLanguage();
        java.lang.String str34 = locale32.toLanguageTag();
        java.lang.String str35 = dateTimeZone23.getShortName(0L, locale32);
        java.util.TimeZone timeZone36 = null;
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.forTimeZone(timeZone36);
        org.joda.time.chrono.GJChronology gJChronology38 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone37);
        org.joda.time.DateTimeField dateTimeField39 = gJChronology38.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField40 = gJChronology38.weekyearOfCentury();
        org.joda.time.Instant instant41 = gJChronology38.getGregorianCutover();
        org.joda.time.Instant instant43 = instant41.withMillis(0L);
        org.joda.time.chrono.GJChronology gJChronology45 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone23, (org.joda.time.ReadableInstant) instant41, 4);
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.forOffsetMillis((int) '4');
        java.util.TimeZone timeZone48 = dateTimeZone47.toTimeZone();
        java.lang.String str49 = dateTimeZone47.toString();
        boolean boolean51 = dateTimeZone47.isStandardOffset((long) 'u');
        long long54 = dateTimeZone47.convertLocalToUTC((long) 1959, false);
        long long56 = dateTimeZone23.getMillisKeepLocal(dateTimeZone47, 3732632409600000L);
        org.joda.time.DateTime dateTime57 = instant6.toDateTime(dateTimeZone47);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and dateTime21", (instant1.compareTo(dateTime21) == 0) == instant1.equals(dateTime21));
    }

    @Test
    public void test0248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0248");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        org.joda.time.Instant instant3 = instant1.withMillis((long) 'u');
        java.util.TimeZone timeZone4 = null;
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forTimeZone(timeZone4);
        org.joda.time.chrono.GJChronology gJChronology6 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone5);
        org.joda.time.DurationField durationField7 = gJChronology6.halfdays();
        long long11 = gJChronology6.add((long) 'a', (-1L), (int) (short) 0);
        boolean boolean13 = gJChronology6.equals((java.lang.Object) 0);
        org.joda.time.DateTimeField dateTimeField14 = gJChronology6.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology6.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField16 = gJChronology6.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField17 = gJChronology6.clockhourOfHalfday();
        org.joda.time.DateTime dateTime18 = instant1.toDateTime((org.joda.time.Chronology) gJChronology6);
        org.joda.time.Instant instant20 = instant1.plus(0L);
        org.joda.time.ReadableDuration readableDuration21 = null;
        org.joda.time.Instant instant22 = instant20.minus(readableDuration21);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant22 and dateTime18", (instant22.compareTo(dateTime18) == 0) == instant22.equals(dateTime18));
    }

    @Test
    public void test0249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0249");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = gJChronology2.halfdays();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.millisOfDay();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.minuteOfDay();
        org.joda.time.DurationField durationField6 = gJChronology2.centuries();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology2.dayOfYear();
        java.lang.String str8 = gJChronology2.toString();
        org.joda.time.DurationField durationField9 = gJChronology2.years();
        org.joda.time.DurationField durationField10 = gJChronology2.hours();
        org.joda.time.DurationField durationField11 = gJChronology2.days();
        org.joda.time.DurationField durationField12 = gJChronology2.weekyears();
        java.util.TimeZone timeZone13 = null;
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forTimeZone(timeZone13);
        org.joda.time.chrono.GJChronology gJChronology15 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone14);
        org.joda.time.DurationField durationField16 = gJChronology15.halfdays();
        long long19 = durationField16.add((long) 100, 100L);
        java.util.TimeZone timeZone20 = null;
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forTimeZone(timeZone20);
        org.joda.time.chrono.GJChronology gJChronology22 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone21);
        org.joda.time.DurationField durationField23 = gJChronology22.halfdays();
        long long27 = gJChronology22.add((long) 'a', (-1L), (int) (short) 0);
        boolean boolean29 = gJChronology22.equals((java.lang.Object) 0);
        org.joda.time.DateTimeField dateTimeField30 = gJChronology22.dayOfMonth();
        org.joda.time.DurationField durationField31 = gJChronology22.millis();
        int int32 = durationField16.compareTo(durationField31);
        long long35 = durationField16.getMillis((int) (short) 10, (-1L));
        boolean boolean36 = durationField16.isSupported();
        long long39 = durationField16.getValueAsLong((long) 'a', 126403200120L);
        int int40 = durationField12.compareTo(durationField16);
        long long42 = durationField16.getValueAsLong((-61827926999999L));
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on durationField9 and durationField12", (durationField9.compareTo(durationField12) == 0) == durationField9.equals(durationField12));
    }

    @Test
    public void test0250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0250");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str3 = dateTimeZone1.getNameKey((long) 100);
        boolean boolean4 = dateTimeZone1.isFixed();
        java.util.Locale locale8 = new java.util.Locale("DurationField[halfdays]", "\u82f1\u6587");
        java.lang.String str9 = dateTimeZone1.getName((long) (short) 10, locale8);
        org.joda.time.Instant instant11 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone12 = null;
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forTimeZone(timeZone12);
        org.joda.time.chrono.GJChronology gJChronology14 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone13);
        org.joda.time.DateTimeField dateTimeField15 = gJChronology14.millisOfSecond();
        int int16 = instant11.get(dateTimeField15);
        org.joda.time.Chronology chronology17 = instant11.getChronology();
        org.joda.time.chrono.GJChronology gJChronology18 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1, (org.joda.time.ReadableInstant) instant11);
        org.joda.time.DurationField durationField19 = gJChronology18.eras();
        org.joda.time.Instant instant21 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone22 = null;
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        org.joda.time.chrono.GJChronology gJChronology24 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone23);
        org.joda.time.DateTimeField dateTimeField25 = gJChronology24.millisOfSecond();
        int int26 = instant21.get(dateTimeField25);
        boolean boolean27 = instant21.isEqualNow();
        org.joda.time.DateTime dateTime28 = instant21.toDateTime();
        java.util.TimeZone timeZone29 = null;
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forTimeZone(timeZone29);
        org.joda.time.chrono.GJChronology gJChronology31 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone30);
        org.joda.time.DurationField durationField32 = gJChronology31.halfdays();
        org.joda.time.DateTimeField dateTimeField33 = gJChronology31.millisOfDay();
        org.joda.time.DateTimeField dateTimeField34 = gJChronology31.minuteOfDay();
        org.joda.time.DurationField durationField35 = gJChronology31.centuries();
        org.joda.time.DateTimeField dateTimeField36 = gJChronology31.dayOfYear();
        java.lang.String str37 = gJChronology31.toString();
        org.joda.time.DateTimeField dateTimeField38 = gJChronology31.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone39 = gJChronology31.getZone();
        java.util.TimeZone timeZone40 = null;
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.forTimeZone(timeZone40);
        org.joda.time.chrono.GJChronology gJChronology42 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone41);
        java.util.Locale locale44 = new java.util.Locale("hi!");
        java.lang.String str45 = locale44.getCountry();
        java.util.Locale locale46 = java.util.Locale.getDefault();
        java.lang.String str47 = locale46.getDisplayName();
        java.lang.String str48 = locale44.getDisplayScript(locale46);
        boolean boolean49 = dateTimeZone41.equals((java.lang.Object) locale46);
        org.joda.time.Chronology chronology50 = gJChronology31.withZone(dateTimeZone41);
        org.joda.time.DurationField durationField51 = gJChronology31.seconds();
        org.joda.time.DurationField durationField52 = gJChronology31.years();
        boolean boolean53 = instant21.equals((java.lang.Object) durationField52);
        int int54 = durationField19.compareTo(durationField52);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant11 and dateTime28", (instant11.compareTo(dateTime28) == 0) == instant11.equals(dateTime28));
    }

    @Test
    public void test0251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0251");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField3 = gJChronology2.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.weekyearOfCentury();
        org.joda.time.Instant instant5 = gJChronology2.getGregorianCutover();
        org.joda.time.Instant instant7 = instant5.withMillis(0L);
        org.joda.time.Instant instant9 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone10 = null;
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forTimeZone(timeZone10);
        org.joda.time.chrono.GJChronology gJChronology12 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone11);
        org.joda.time.DateTimeField dateTimeField13 = gJChronology12.millisOfSecond();
        int int14 = instant9.get(dateTimeField13);
        org.joda.time.Instant instant16 = instant9.plus(0L);
        int int17 = instant7.compareTo((org.joda.time.ReadableInstant) instant16);
        java.util.TimeZone timeZone18 = null;
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forTimeZone(timeZone18);
        org.joda.time.chrono.GJChronology gJChronology20 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone19);
        org.joda.time.DurationField durationField21 = gJChronology20.halfdays();
        org.joda.time.DateTimeField dateTimeField22 = gJChronology20.millisOfDay();
        org.joda.time.DateTimeField dateTimeField23 = gJChronology20.minuteOfDay();
        org.joda.time.DurationField durationField24 = gJChronology20.centuries();
        org.joda.time.DateTimeField dateTimeField25 = gJChronology20.halfdayOfDay();
        java.util.Locale locale26 = java.util.Locale.ITALIAN;
        java.util.Locale locale27 = locale26.stripExtensions();
        java.util.Locale locale28 = java.util.Locale.CANADA;
        java.lang.String str29 = locale26.getDisplayVariant(locale28);
        boolean boolean30 = gJChronology20.equals((java.lang.Object) locale28);
        org.joda.time.DateTime dateTime31 = instant7.toDateTime((org.joda.time.Chronology) gJChronology20);
        java.util.TimeZone timeZone32 = null;
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.forTimeZone(timeZone32);
        org.joda.time.chrono.GJChronology gJChronology34 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone33);
        org.joda.time.DurationField durationField35 = gJChronology34.halfdays();
        org.joda.time.DateTimeField dateTimeField36 = gJChronology34.millisOfDay();
        org.joda.time.DateTimeField dateTimeField37 = gJChronology34.minuteOfDay();
        org.joda.time.DurationField durationField38 = gJChronology34.centuries();
        org.joda.time.DateTimeField dateTimeField39 = gJChronology34.dayOfYear();
        java.lang.String str40 = gJChronology34.toString();
        org.joda.time.DateTimeField dateTimeField41 = gJChronology34.dayOfYear();
        org.joda.time.DateTimeField dateTimeField42 = gJChronology34.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField43 = gJChronology34.clockhourOfDay();
        org.joda.time.DurationField durationField44 = gJChronology34.months();
        org.joda.time.MutableDateTime mutableDateTime45 = dateTime31.toMutableDateTime((org.joda.time.Chronology) gJChronology34);
        org.joda.time.Instant instant47 = new org.joda.time.Instant(52L);
        boolean boolean48 = instant47.isEqualNow();
        org.joda.time.ReadableDuration readableDuration49 = null;
        org.joda.time.Instant instant50 = instant47.plus(readableDuration49);
        org.joda.time.Instant instant52 = new org.joda.time.Instant(52L);
        org.joda.time.Instant instant54 = instant52.withMillis((long) 'u');
        boolean boolean55 = instant47.isBefore((org.joda.time.ReadableInstant) instant52);
        java.util.TimeZone timeZone56 = null;
        org.joda.time.DateTimeZone dateTimeZone57 = org.joda.time.DateTimeZone.forTimeZone(timeZone56);
        org.joda.time.chrono.GJChronology gJChronology58 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone57);
        org.joda.time.DurationField durationField59 = gJChronology58.halfdays();
        long long63 = gJChronology58.add((long) 'a', (-1L), (int) (short) 0);
        long long67 = gJChronology58.add((long) (byte) 0, (long) '4', 100);
        org.joda.time.DateTimeField dateTimeField68 = gJChronology58.minuteOfHour();
        org.joda.time.DurationField durationField69 = gJChronology58.hours();
        org.joda.time.DateTimeField dateTimeField70 = gJChronology58.weekOfWeekyear();
        org.joda.time.DateTime dateTime71 = instant52.toDateTime((org.joda.time.Chronology) gJChronology58);
        boolean boolean72 = mutableDateTime45.isAfter((org.joda.time.ReadableInstant) instant52);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant7 and dateTime31", (instant7.compareTo(dateTime31) == 0) == instant7.equals(dateTime31));
    }

    @Test
    public void test0252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0252");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = gJChronology2.halfdays();
        long long7 = gJChronology2.add((long) 'a', (-1L), (int) (short) 0);
        org.joda.time.DateTimeField dateTimeField8 = gJChronology2.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField9 = gJChronology2.secondOfMinute();
        org.joda.time.Instant instant11 = new org.joda.time.Instant(52L);
        boolean boolean12 = instant11.isEqualNow();
        org.joda.time.ReadableDuration readableDuration13 = null;
        org.joda.time.Instant instant14 = instant11.plus(readableDuration13);
        boolean boolean15 = gJChronology2.equals((java.lang.Object) instant11);
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = null;
        boolean boolean17 = instant11.isSupported(dateTimeFieldType16);
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = null;
        boolean boolean19 = instant11.isSupported(dateTimeFieldType18);
        org.joda.time.DateTimeZone dateTimeZone20 = instant11.getZone();
        long long22 = dateTimeZone20.nextTransition(349200L);
        java.lang.String str24 = dateTimeZone20.getNameKey((long) 52);
        java.util.TimeZone timeZone25 = null;
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forTimeZone(timeZone25);
        org.joda.time.chrono.GJChronology gJChronology27 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone26);
        org.joda.time.DateTimeField dateTimeField28 = gJChronology27.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField29 = gJChronology27.weekyearOfCentury();
        org.joda.time.Instant instant30 = gJChronology27.getGregorianCutover();
        org.joda.time.Instant instant32 = instant30.withMillis(0L);
        org.joda.time.Instant instant34 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone35 = null;
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.forTimeZone(timeZone35);
        org.joda.time.chrono.GJChronology gJChronology37 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone36);
        org.joda.time.DateTimeField dateTimeField38 = gJChronology37.millisOfSecond();
        int int39 = instant34.get(dateTimeField38);
        org.joda.time.Instant instant41 = instant34.plus(0L);
        int int42 = instant32.compareTo((org.joda.time.ReadableInstant) instant41);
        org.joda.time.Instant instant44 = new org.joda.time.Instant(52L);
        boolean boolean45 = instant44.isEqualNow();
        org.joda.time.ReadableDuration readableDuration46 = null;
        org.joda.time.Instant instant47 = instant44.plus(readableDuration46);
        boolean boolean49 = instant47.equals((java.lang.Object) ' ');
        boolean boolean50 = instant41.isEqual((org.joda.time.ReadableInstant) instant47);
        org.joda.time.MutableDateTime mutableDateTime51 = instant41.toMutableDateTime();
        int int52 = dateTimeZone20.getOffset((org.joda.time.ReadableInstant) instant41);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant11 and mutableDateTime51", (instant11.compareTo(mutableDateTime51) == 0) == instant11.equals(mutableDateTime51));
    }

    @Test
    public void test0253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0253");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = gJChronology2.halfdays();
        long long7 = gJChronology2.add((long) 'a', (-1L), (int) (short) 0);
        org.joda.time.DateTimeField dateTimeField8 = gJChronology2.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField9 = gJChronology2.secondOfMinute();
        org.joda.time.Instant instant11 = new org.joda.time.Instant(52L);
        boolean boolean12 = instant11.isEqualNow();
        org.joda.time.ReadableDuration readableDuration13 = null;
        org.joda.time.Instant instant14 = instant11.plus(readableDuration13);
        boolean boolean15 = gJChronology2.equals((java.lang.Object) instant11);
        java.util.TimeZone timeZone16 = null;
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forTimeZone(timeZone16);
        org.joda.time.chrono.GJChronology gJChronology18 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone17);
        org.joda.time.DurationField durationField19 = gJChronology18.halfdays();
        org.joda.time.DateTimeField dateTimeField20 = gJChronology18.millisOfDay();
        org.joda.time.DateTimeField dateTimeField21 = gJChronology18.minuteOfDay();
        org.joda.time.DurationField durationField22 = gJChronology18.centuries();
        org.joda.time.DateTimeField dateTimeField23 = gJChronology18.dayOfYear();
        java.lang.String str24 = gJChronology18.toString();
        org.joda.time.DateTimeField dateTimeField25 = gJChronology18.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone26 = gJChronology18.getZone();
        org.joda.time.DateTime dateTime27 = instant11.toDateTime((org.joda.time.Chronology) gJChronology18);
        boolean boolean29 = dateTime27.isBefore(262974605200L);
        long long30 = dateTime27.getMillis();
        org.joda.time.Instant instant31 = new org.joda.time.Instant((java.lang.Object) long30);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant11 and dateTime27", (instant11.compareTo(dateTime27) == 0) == instant11.equals(dateTime27));
    }

    @Test
    public void test0254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0254");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField3 = gJChronology2.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.weekyearOfCentury();
        org.joda.time.Instant instant5 = gJChronology2.getGregorianCutover();
        org.joda.time.Instant instant7 = instant5.withMillis(0L);
        org.joda.time.Instant instant9 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone10 = null;
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forTimeZone(timeZone10);
        org.joda.time.chrono.GJChronology gJChronology12 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone11);
        org.joda.time.DateTimeField dateTimeField13 = gJChronology12.millisOfSecond();
        int int14 = instant9.get(dateTimeField13);
        org.joda.time.Instant instant16 = instant9.plus(0L);
        int int17 = instant7.compareTo((org.joda.time.ReadableInstant) instant16);
        java.util.TimeZone timeZone18 = null;
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forTimeZone(timeZone18);
        org.joda.time.chrono.GJChronology gJChronology20 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone19);
        org.joda.time.DurationField durationField21 = gJChronology20.halfdays();
        org.joda.time.DateTimeField dateTimeField22 = gJChronology20.millisOfDay();
        org.joda.time.DateTimeField dateTimeField23 = gJChronology20.minuteOfDay();
        org.joda.time.DurationField durationField24 = gJChronology20.centuries();
        org.joda.time.DateTimeField dateTimeField25 = gJChronology20.halfdayOfDay();
        java.util.Locale locale26 = java.util.Locale.ITALIAN;
        java.util.Locale locale27 = locale26.stripExtensions();
        java.util.Locale locale28 = java.util.Locale.CANADA;
        java.lang.String str29 = locale26.getDisplayVariant(locale28);
        boolean boolean30 = gJChronology20.equals((java.lang.Object) locale28);
        org.joda.time.DateTime dateTime31 = instant7.toDateTime((org.joda.time.Chronology) gJChronology20);
        java.util.TimeZone timeZone32 = null;
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.forTimeZone(timeZone32);
        org.joda.time.chrono.GJChronology gJChronology34 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone33);
        org.joda.time.DurationField durationField35 = gJChronology34.halfdays();
        org.joda.time.DateTimeField dateTimeField36 = gJChronology34.millisOfDay();
        org.joda.time.DateTimeField dateTimeField37 = gJChronology34.minuteOfDay();
        org.joda.time.DurationField durationField38 = gJChronology34.centuries();
        org.joda.time.DateTimeField dateTimeField39 = gJChronology34.dayOfYear();
        java.lang.String str40 = gJChronology34.toString();
        org.joda.time.DateTimeField dateTimeField41 = gJChronology34.dayOfYear();
        org.joda.time.DateTimeField dateTimeField42 = gJChronology34.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField43 = gJChronology34.clockhourOfDay();
        org.joda.time.DurationField durationField44 = gJChronology34.months();
        org.joda.time.MutableDateTime mutableDateTime45 = dateTime31.toMutableDateTime((org.joda.time.Chronology) gJChronology34);
        org.joda.time.DurationField durationField46 = gJChronology34.minutes();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant7 and dateTime31", (instant7.compareTo(dateTime31) == 0) == instant7.equals(dateTime31));
    }

    @Test
    public void test0255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0255");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        boolean boolean2 = instant1.isEqualNow();
        org.joda.time.ReadableDuration readableDuration3 = null;
        org.joda.time.Instant instant4 = instant1.plus(readableDuration3);
        long long5 = instant1.getMillis();
        java.lang.String str6 = instant1.toString();
        org.joda.time.Instant instant7 = instant1.toInstant();
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.Instant instant10 = instant1.withDurationAdded(readableDuration8, (int) 'x');
        java.util.TimeZone timeZone11 = null;
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forTimeZone(timeZone11);
        java.lang.String str14 = dateTimeZone12.getNameKey((long) 100);
        boolean boolean15 = dateTimeZone12.isFixed();
        org.joda.time.chrono.GJChronology gJChronology16 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone12);
        java.lang.String str17 = dateTimeZone12.toString();
        org.joda.time.DateTime dateTime18 = instant10.toDateTime(dateTimeZone12);
        int int20 = dateTimeZone12.getOffsetFromLocal(25925166840100L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and dateTime18", (instant1.compareTo(dateTime18) == 0) == instant1.equals(dateTime18));
    }

    @Test
    public void test0256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0256");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        boolean boolean2 = instant1.isEqualNow();
        java.lang.String str3 = instant1.toString();
        java.lang.String str4 = instant1.toString();
        org.joda.time.Instant instant7 = instant1.withDurationAdded(115200000L, (int) (short) 1);
        boolean boolean8 = instant7.isBeforeNow();
        org.joda.time.DateTime dateTime9 = instant7.toDateTimeISO();
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = null;
        boolean boolean11 = instant7.isSupported(dateTimeFieldType10);
        org.joda.time.Instant instant13 = instant7.plus(3155695200000L);
        org.joda.time.MutableDateTime mutableDateTime14 = instant13.toMutableDateTime();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant7 and dateTime9", (instant7.compareTo(dateTime9) == 0) == instant7.equals(dateTime9));
    }

    @Test
    public void test0257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0257");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        boolean boolean2 = instant1.isEqualNow();
        org.joda.time.ReadableDuration readableDuration3 = null;
        org.joda.time.Instant instant4 = instant1.plus(readableDuration3);
        long long5 = instant1.getMillis();
        java.lang.String str6 = instant1.toString();
        org.joda.time.Instant instant7 = instant1.toInstant();
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.Instant instant10 = instant1.withDurationAdded(readableDuration8, (int) 'x');
        long long11 = instant1.getMillis();
        boolean boolean12 = instant1.isAfterNow();
        org.joda.time.Instant instant14 = instant1.minus(4324199948L);
        java.util.TimeZone timeZone15 = null;
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forTimeZone(timeZone15);
        org.joda.time.chrono.GJChronology gJChronology17 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone16);
        org.joda.time.DurationField durationField18 = gJChronology17.halfdays();
        java.util.TimeZone timeZone19 = null;
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forTimeZone(timeZone19);
        org.joda.time.chrono.GJChronology gJChronology21 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone20);
        long long25 = dateTimeZone20.convertLocalToUTC((long) (byte) -1, true, 0L);
        boolean boolean27 = dateTimeZone20.equals((java.lang.Object) true);
        org.joda.time.Chronology chronology28 = gJChronology17.withZone(dateTimeZone20);
        org.joda.time.DateTime dateTime29 = instant14.toDateTime(dateTimeZone20);
        java.util.Locale.Category category31 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale32 = java.util.Locale.getDefault();
        boolean boolean33 = locale32.hasExtensions();
        java.lang.String str34 = locale32.getISO3Language();
        java.util.Locale.setDefault(category31, locale32);
        java.util.Locale locale36 = java.util.Locale.ITALIAN;
        java.util.Locale locale37 = locale36.stripExtensions();
        java.util.Locale.setDefault(category31, locale37);
        java.util.Locale locale40 = java.util.Locale.forLanguageTag("halfdays");
        boolean boolean41 = locale40.hasExtensions();
        java.util.Set<java.lang.Character> charSet42 = locale40.getExtensionKeys();
        java.lang.String str43 = locale37.getDisplayLanguage(locale40);
        java.util.Locale locale44 = java.util.Locale.GERMAN;
        java.lang.String str45 = locale44.getDisplayCountry();
        java.lang.String str46 = locale37.getDisplayScript(locale44);
        java.lang.String str47 = dateTimeZone20.getName(0L, locale37);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant14 and dateTime29", (instant14.compareTo(dateTime29) == 0) == instant14.equals(dateTime29));
    }

    @Test
    public void test0258() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0258");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        boolean boolean2 = instant1.isEqualNow();
        org.joda.time.ReadableDuration readableDuration3 = null;
        org.joda.time.Instant instant4 = instant1.plus(readableDuration3);
        org.joda.time.Instant instant6 = instant1.withMillis((long) 4);
        boolean boolean7 = instant6.isBeforeNow();
        boolean boolean9 = instant6.isBefore(5185792L);
        org.joda.time.MutableDateTime mutableDateTime10 = instant6.toMutableDateTime();
        org.joda.time.Instant instant12 = new org.joda.time.Instant(52L);
        boolean boolean13 = instant12.isEqualNow();
        java.lang.String str14 = instant12.toString();
        java.lang.String str15 = instant12.toString();
        org.joda.time.Instant instant18 = instant12.withDurationAdded(115200000L, (int) (short) 1);
        boolean boolean19 = instant18.isBeforeNow();
        org.joda.time.DateTime dateTime20 = instant18.toDateTimeISO();
        int int21 = mutableDateTime10.compareTo((org.joda.time.ReadableInstant) instant18);
        org.joda.time.Instant instant23 = new org.joda.time.Instant(52L);
        boolean boolean24 = instant23.isEqualNow();
        org.joda.time.ReadableDuration readableDuration25 = null;
        org.joda.time.Instant instant26 = instant23.plus(readableDuration25);
        long long27 = instant23.getMillis();
        java.lang.String str28 = instant23.toString();
        org.joda.time.Instant instant29 = instant23.toInstant();
        org.joda.time.ReadableDuration readableDuration30 = null;
        org.joda.time.Instant instant32 = instant23.withDurationAdded(readableDuration30, (int) 'x');
        org.joda.time.Instant instant33 = instant23.toInstant();
        org.joda.time.ReadableDuration readableDuration34 = null;
        org.joda.time.Instant instant36 = instant33.withDurationAdded(readableDuration34, (int) 'u');
        org.joda.time.Chronology chronology37 = instant36.getChronology();
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.MutableDateTime mutableDateTime39 = instant36.toMutableDateTime(chronology38);
        boolean boolean40 = mutableDateTime10.isBefore((org.joda.time.ReadableInstant) mutableDateTime39);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant18 and dateTime20", (instant18.compareTo(dateTime20) == 0) == instant18.equals(dateTime20));
    }

    @Test
    public void test0259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0259");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        boolean boolean2 = instant1.isEqualNow();
        java.lang.String str3 = instant1.toString();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.MutableDateTime mutableDateTime5 = instant1.toMutableDateTime(chronology4);
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.Instant instant7 = instant1.minus(readableDuration6);
        org.joda.time.Instant instant9 = new org.joda.time.Instant((-3155695200000L));
        int int10 = instant1.compareTo((org.joda.time.ReadableInstant) instant9);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime5 and instant1", (mutableDateTime5.compareTo(instant1) == 0) == mutableDateTime5.equals(instant1));
    }

    @Test
    public void test0260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0260");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forTimeZone(timeZone2);
        org.joda.time.chrono.GJChronology gJChronology4 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone3);
        org.joda.time.DateTimeField dateTimeField5 = gJChronology4.millisOfSecond();
        int int6 = instant1.get(dateTimeField5);
        org.joda.time.Instant instant8 = instant1.plus(0L);
        org.joda.time.Instant instant9 = instant8.toInstant();
        org.joda.time.Instant instant11 = new org.joda.time.Instant(52L);
        boolean boolean12 = instant11.isEqualNow();
        java.lang.String str13 = instant11.toString();
        java.lang.String str14 = instant11.toString();
        org.joda.time.Instant instant16 = new org.joda.time.Instant(52L);
        boolean boolean17 = instant16.isEqualNow();
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.Instant instant19 = instant16.plus(readableDuration18);
        boolean boolean20 = instant11.isBefore((org.joda.time.ReadableInstant) instant19);
        org.joda.time.Instant instant22 = instant11.minus((long) 0);
        int int23 = instant8.compareTo((org.joda.time.ReadableInstant) instant11);
        org.joda.time.Instant instant26 = instant11.withDurationAdded((long) (short) 100, 70);
        org.joda.time.DateTime dateTime27 = instant26.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration28 = null;
        org.joda.time.Instant instant29 = instant26.minus(readableDuration28);
        boolean boolean31 = instant26.isBefore((long) (short) 100);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime27 and instant26", (dateTime27.compareTo(instant26) == 0) == dateTime27.equals(instant26));
    }

    @Test
    public void test0261() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0261");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        boolean boolean2 = instant1.isEqualNow();
        java.lang.String str3 = instant1.toString();
        java.util.TimeZone timeZone4 = null;
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forTimeZone(timeZone4);
        org.joda.time.chrono.GJChronology gJChronology6 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone5);
        java.util.Locale locale8 = new java.util.Locale("hi!");
        java.lang.String str9 = locale8.getCountry();
        java.util.Locale locale10 = java.util.Locale.getDefault();
        java.lang.String str11 = locale10.getDisplayName();
        java.lang.String str12 = locale8.getDisplayScript(locale10);
        boolean boolean13 = dateTimeZone5.equals((java.lang.Object) locale10);
        int int15 = dateTimeZone5.getOffsetFromLocal((long) (short) 10);
        java.util.TimeZone timeZone16 = null;
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forTimeZone(timeZone16);
        org.joda.time.chrono.GJChronology gJChronology18 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone17);
        org.joda.time.DateTimeField dateTimeField19 = gJChronology18.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField20 = gJChronology18.weekyearOfCentury();
        org.joda.time.Instant instant21 = gJChronology18.getGregorianCutover();
        org.joda.time.Instant instant23 = instant21.withMillis(0L);
        org.joda.time.Instant instant25 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone26 = null;
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forTimeZone(timeZone26);
        org.joda.time.chrono.GJChronology gJChronology28 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone27);
        org.joda.time.DateTimeField dateTimeField29 = gJChronology28.millisOfSecond();
        int int30 = instant25.get(dateTimeField29);
        org.joda.time.Instant instant32 = instant25.plus(0L);
        int int33 = instant23.compareTo((org.joda.time.ReadableInstant) instant32);
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = null;
        boolean boolean35 = instant32.isSupported(dateTimeFieldType34);
        int int36 = dateTimeZone5.getOffset((org.joda.time.ReadableInstant) instant32);
        boolean boolean37 = instant1.isAfter((org.joda.time.ReadableInstant) instant32);
        org.joda.time.ReadableDuration readableDuration38 = null;
        org.joda.time.Instant instant39 = instant1.minus(readableDuration38);
        org.joda.time.Instant instant40 = instant39.toInstant();
        java.util.Date date41 = instant39.toDate();
        java.util.TimeZone timeZone42 = null;
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.forTimeZone(timeZone42);
        org.joda.time.chrono.GJChronology gJChronology44 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone43);
        org.joda.time.DurationField durationField45 = gJChronology44.halfdays();
        long long49 = gJChronology44.add((long) 'a', (-1L), (int) (short) 0);
        boolean boolean51 = gJChronology44.equals((java.lang.Object) 0);
        org.joda.time.DateTimeField dateTimeField52 = gJChronology44.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField53 = gJChronology44.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField54 = gJChronology44.clockhourOfDay();
        long long59 = gJChronology44.getDateTimeMillis(10, (int) (short) 10, 4, (int) (byte) 1);
        org.joda.time.DateTimeField dateTimeField60 = gJChronology44.millisOfDay();
        java.lang.String str61 = gJChronology44.toString();
        org.joda.time.DateTimeField dateTimeField62 = gJChronology44.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField63 = gJChronology44.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField64 = gJChronology44.halfdayOfDay();
        java.util.TimeZone timeZone65 = null;
        org.joda.time.DateTimeZone dateTimeZone66 = org.joda.time.DateTimeZone.forTimeZone(timeZone65);
        org.joda.time.chrono.GJChronology gJChronology67 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone66);
        org.joda.time.DurationField durationField68 = gJChronology67.halfdays();
        long long72 = gJChronology67.add((long) 'a', (-1L), (int) (short) 0);
        long long76 = gJChronology67.add((long) (byte) 0, (long) '4', 100);
        org.joda.time.DurationField durationField77 = gJChronology67.years();
        org.joda.time.DateTimeField dateTimeField78 = gJChronology67.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone79 = gJChronology67.getZone();
        org.joda.time.Chronology chronology80 = gJChronology44.withZone(dateTimeZone79);
        org.joda.time.MutableDateTime mutableDateTime81 = instant39.toMutableDateTime(dateTimeZone79);
        org.joda.time.Chronology chronology82 = instant39.getChronology();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant39 and mutableDateTime81", (instant39.compareTo(mutableDateTime81) == 0) == instant39.equals(mutableDateTime81));
    }

    @Test
    public void test0262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0262");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = gJChronology2.halfdays();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.millisOfDay();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.minuteOfDay();
        org.joda.time.DurationField durationField6 = gJChronology2.centuries();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology2.dayOfYear();
        java.lang.String str8 = gJChronology2.toString();
        org.joda.time.DateTimeField dateTimeField9 = gJChronology2.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField10 = gJChronology2.halfdayOfDay();
        org.joda.time.DurationField durationField11 = gJChronology2.hours();
        org.joda.time.DurationField durationField12 = gJChronology2.eras();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField12, durationField3, and durationField6", !(durationField12.compareTo(durationField3) == 0) || (Math.signum(durationField12.compareTo(durationField6)) == Math.signum(durationField3.compareTo(durationField6))));
    }

    @Test
    public void test0263() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0263");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forTimeZone(timeZone2);
        org.joda.time.chrono.GJChronology gJChronology4 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone3);
        org.joda.time.DateTimeField dateTimeField5 = gJChronology4.millisOfSecond();
        int int6 = instant1.get(dateTimeField5);
        boolean boolean7 = instant1.isEqualNow();
        org.joda.time.DateTime dateTime8 = instant1.toDateTime();
        org.joda.time.Instant instant11 = instant1.withDurationAdded((long) 1431201, 1970);
        org.joda.time.Instant instant13 = instant1.minus((long) (byte) 10);
        org.joda.time.DateTime dateTime14 = instant13.toDateTimeISO();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and dateTime8", (instant1.compareTo(dateTime8) == 0) == instant1.equals(dateTime8));
    }

    @Test
    public void test0264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0264");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField3 = gJChronology2.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.weekyearOfCentury();
        org.joda.time.Instant instant5 = gJChronology2.getGregorianCutover();
        org.joda.time.Instant instant7 = instant5.withMillis(0L);
        org.joda.time.Instant instant9 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone10 = null;
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forTimeZone(timeZone10);
        org.joda.time.chrono.GJChronology gJChronology12 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone11);
        org.joda.time.DateTimeField dateTimeField13 = gJChronology12.millisOfSecond();
        int int14 = instant9.get(dateTimeField13);
        org.joda.time.Instant instant16 = instant9.plus(0L);
        int int17 = instant7.compareTo((org.joda.time.ReadableInstant) instant16);
        org.joda.time.Instant instant19 = new org.joda.time.Instant(52L);
        boolean boolean20 = instant19.isEqualNow();
        org.joda.time.ReadableDuration readableDuration21 = null;
        org.joda.time.Instant instant22 = instant19.plus(readableDuration21);
        boolean boolean24 = instant22.equals((java.lang.Object) ' ');
        boolean boolean25 = instant16.isEqual((org.joda.time.ReadableInstant) instant22);
        java.lang.String str26 = instant16.toString();
        org.joda.time.ReadableDuration readableDuration27 = null;
        org.joda.time.Instant instant29 = instant16.withDurationAdded(readableDuration27, 1431201);
        org.joda.time.Instant instant31 = new org.joda.time.Instant(52L);
        boolean boolean32 = instant31.isEqualNow();
        java.lang.String str33 = instant31.toString();
        java.lang.String str34 = instant31.toString();
        org.joda.time.Instant instant37 = instant31.withDurationAdded(115200000L, (int) (short) 1);
        java.util.TimeZone timeZone38 = null;
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.forTimeZone(timeZone38);
        java.lang.String str41 = dateTimeZone39.getNameKey((long) 100);
        boolean boolean42 = dateTimeZone39.isFixed();
        org.joda.time.DateTime dateTime43 = instant31.toDateTime(dateTimeZone39);
        java.util.TimeZone timeZone44 = null;
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.forTimeZone(timeZone44);
        org.joda.time.chrono.GJChronology gJChronology46 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone45);
        org.joda.time.DurationField durationField47 = gJChronology46.halfdays();
        long long51 = gJChronology46.add((long) 'a', (-1L), (int) (short) 0);
        boolean boolean53 = gJChronology46.equals((java.lang.Object) 0);
        org.joda.time.DateTimeField dateTimeField54 = gJChronology46.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField55 = gJChronology46.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField56 = gJChronology46.clockhourOfDay();
        long long61 = gJChronology46.getDateTimeMillis(10, (int) (short) 10, 4, (int) (byte) 1);
        org.joda.time.DateTimeField dateTimeField62 = gJChronology46.millisOfDay();
        java.lang.String str63 = gJChronology46.toString();
        org.joda.time.DateTimeField dateTimeField64 = gJChronology46.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField65 = gJChronology46.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField66 = gJChronology46.halfdayOfDay();
        java.util.TimeZone timeZone67 = null;
        org.joda.time.DateTimeZone dateTimeZone68 = org.joda.time.DateTimeZone.forTimeZone(timeZone67);
        org.joda.time.chrono.GJChronology gJChronology69 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone68);
        org.joda.time.DurationField durationField70 = gJChronology69.halfdays();
        long long74 = gJChronology69.add((long) 'a', (-1L), (int) (short) 0);
        long long78 = gJChronology69.add((long) (byte) 0, (long) '4', 100);
        org.joda.time.DurationField durationField79 = gJChronology69.years();
        org.joda.time.DateTimeField dateTimeField80 = gJChronology69.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone81 = gJChronology69.getZone();
        org.joda.time.Chronology chronology82 = gJChronology46.withZone(dateTimeZone81);
        org.joda.time.MutableDateTime mutableDateTime83 = dateTime43.toMutableDateTime(dateTimeZone81);
        org.joda.time.DateTime dateTime84 = instant29.toDateTime(dateTimeZone81);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant29 and dateTime43", (instant29.compareTo(dateTime43) == 0) == instant29.equals(dateTime43));
    }

    @Test
    public void test0265() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0265");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = gJChronology2.halfdays();
        long long7 = gJChronology2.add((long) 'a', (-1L), (int) (short) 0);
        boolean boolean9 = gJChronology2.equals((java.lang.Object) 0);
        org.joda.time.DateTimeField dateTimeField10 = gJChronology2.dayOfMonth();
        org.joda.time.DurationField durationField11 = gJChronology2.days();
        org.joda.time.DateTimeField dateTimeField12 = gJChronology2.millisOfSecond();
        org.joda.time.DurationField durationField13 = gJChronology2.millis();
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        long long17 = gJChronology2.add(readablePeriod14, (-220870497598236L), (int) (byte) 100);
        org.joda.time.DateTimeField dateTimeField18 = gJChronology2.yearOfEra();
        org.joda.time.DurationField durationField19 = gJChronology2.eras();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField19, durationField3, and durationField11", !(durationField19.compareTo(durationField3) == 0) || (Math.signum(durationField19.compareTo(durationField11)) == Math.signum(durationField3.compareTo(durationField11))));
    }

    @Test
    public void test0266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0266");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str3 = dateTimeZone1.getNameKey((long) 100);
        boolean boolean4 = dateTimeZone1.isFixed();
        org.joda.time.Instant instant6 = new org.joda.time.Instant(52L);
        boolean boolean7 = instant6.isEqualNow();
        java.lang.String str8 = instant6.toString();
        java.lang.String str9 = instant6.toString();
        org.joda.time.Instant instant12 = instant6.withDurationAdded(115200000L, (int) (short) 1);
        java.util.TimeZone timeZone13 = null;
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forTimeZone(timeZone13);
        java.lang.String str16 = dateTimeZone14.getNameKey((long) 100);
        boolean boolean17 = dateTimeZone14.isFixed();
        org.joda.time.DateTime dateTime18 = instant6.toDateTime(dateTimeZone14);
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = null;
        boolean boolean20 = instant6.isSupported(dateTimeFieldType19);
        int int21 = dateTimeZone1.getOffset((org.joda.time.ReadableInstant) instant6);
        java.lang.String str23 = dateTimeZone1.getName((-26187053848164L));
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant6 and dateTime18", (instant6.compareTo(dateTime18) == 0) == instant6.equals(dateTime18));
    }

    @Test
    public void test0267() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0267");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = gJChronology2.halfdays();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.millisOfDay();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.minuteOfDay();
        org.joda.time.DurationField durationField6 = gJChronology2.centuries();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology2.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField8 = gJChronology2.year();
        org.joda.time.DurationField durationField9 = gJChronology2.weekyears();
        java.lang.String str10 = gJChronology2.toString();
        org.joda.time.DurationField durationField11 = gJChronology2.eras();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField11, durationField3, and durationField6", !(durationField11.compareTo(durationField3) == 0) || (Math.signum(durationField11.compareTo(durationField6)) == Math.signum(durationField3.compareTo(durationField6))));
    }

    @Test
    public void test0268() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0268");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str3 = dateTimeZone1.getNameKey((long) 100);
        boolean boolean4 = dateTimeZone1.isFixed();
        java.util.Locale locale8 = new java.util.Locale("DurationField[halfdays]", "\u82f1\u6587");
        java.lang.String str9 = dateTimeZone1.getName((long) (short) 10, locale8);
        org.joda.time.Instant instant11 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone12 = null;
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forTimeZone(timeZone12);
        org.joda.time.chrono.GJChronology gJChronology14 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone13);
        org.joda.time.DateTimeField dateTimeField15 = gJChronology14.millisOfSecond();
        int int16 = instant11.get(dateTimeField15);
        org.joda.time.Chronology chronology17 = instant11.getChronology();
        org.joda.time.chrono.GJChronology gJChronology18 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1, (org.joda.time.ReadableInstant) instant11);
        long long19 = instant11.getMillis();
        org.joda.time.DateTime dateTime20 = instant11.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(1, 10);
        java.util.TimeZone timeZone24 = null;
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forTimeZone(timeZone24);
        long long27 = dateTimeZone23.getMillisKeepLocal(dateTimeZone25, 4320000000L);
        org.joda.time.Instant instant29 = new org.joda.time.Instant(52L);
        boolean boolean30 = instant29.isEqualNow();
        org.joda.time.ReadableDuration readableDuration31 = null;
        org.joda.time.Instant instant32 = instant29.plus(readableDuration31);
        long long33 = instant29.getMillis();
        java.lang.String str34 = instant29.toString();
        org.joda.time.Instant instant35 = instant29.toInstant();
        org.joda.time.ReadableDuration readableDuration36 = null;
        org.joda.time.Instant instant38 = instant29.withDurationAdded(readableDuration36, (int) 'x');
        org.joda.time.Instant instant39 = instant29.toInstant();
        int int40 = dateTimeZone23.getOffset((org.joda.time.ReadableInstant) instant29);
        org.joda.time.Instant instant42 = new org.joda.time.Instant(52L);
        boolean boolean43 = instant42.isEqualNow();
        org.joda.time.ReadableDuration readableDuration44 = null;
        org.joda.time.Instant instant45 = instant42.plus(readableDuration44);
        long long46 = instant42.getMillis();
        java.lang.String str47 = instant42.toString();
        boolean boolean49 = instant42.isAfter((long) (-1));
        java.lang.Object obj50 = null;
        boolean boolean51 = instant42.equals(obj50);
        org.joda.time.ReadableDuration readableDuration52 = null;
        org.joda.time.Instant instant53 = instant42.minus(readableDuration52);
        org.joda.time.chrono.GJChronology gJChronology54 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone23, (org.joda.time.ReadableInstant) instant42);
        int int55 = instant11.compareTo((org.joda.time.ReadableInstant) instant42);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime20 and instant29", (dateTime20.compareTo(instant29) == 0) == dateTime20.equals(instant29));
    }

    @Test
    public void test0269() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0269");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str3 = dateTimeZone1.getNameKey((long) 100);
        boolean boolean4 = dateTimeZone1.isFixed();
        java.util.Locale locale8 = new java.util.Locale("DurationField[halfdays]", "\u82f1\u6587");
        java.lang.String str9 = dateTimeZone1.getName((long) (short) 10, locale8);
        org.joda.time.Instant instant11 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone12 = null;
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forTimeZone(timeZone12);
        org.joda.time.chrono.GJChronology gJChronology14 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone13);
        org.joda.time.DateTimeField dateTimeField15 = gJChronology14.millisOfSecond();
        int int16 = instant11.get(dateTimeField15);
        org.joda.time.Chronology chronology17 = instant11.getChronology();
        org.joda.time.chrono.GJChronology gJChronology18 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1, (org.joda.time.ReadableInstant) instant11);
        org.joda.time.DateTime dateTime19 = instant11.toDateTime();
        org.joda.time.ReadableDuration readableDuration20 = null;
        org.joda.time.Instant instant22 = instant11.withDurationAdded(readableDuration20, (int) (short) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = null;
        boolean boolean24 = instant22.isSupported(dateTimeFieldType23);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant22 and dateTime19", (instant22.compareTo(dateTime19) == 0) == instant22.equals(dateTime19));
    }

    @Test
    public void test0270() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0270");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forTimeZone(timeZone2);
        org.joda.time.chrono.GJChronology gJChronology4 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone3);
        org.joda.time.DateTimeField dateTimeField5 = gJChronology4.millisOfSecond();
        int int6 = instant1.get(dateTimeField5);
        org.joda.time.Instant instant8 = instant1.plus(0L);
        org.joda.time.Instant instant9 = instant8.toInstant();
        org.joda.time.Instant instant11 = new org.joda.time.Instant(52L);
        boolean boolean12 = instant11.isEqualNow();
        java.lang.String str13 = instant11.toString();
        java.lang.String str14 = instant11.toString();
        org.joda.time.Instant instant16 = new org.joda.time.Instant(52L);
        boolean boolean17 = instant16.isEqualNow();
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.Instant instant19 = instant16.plus(readableDuration18);
        boolean boolean20 = instant11.isBefore((org.joda.time.ReadableInstant) instant19);
        org.joda.time.Instant instant22 = instant11.minus((long) 0);
        int int23 = instant8.compareTo((org.joda.time.ReadableInstant) instant11);
        org.joda.time.Instant instant26 = instant11.withDurationAdded((long) (short) 100, 70);
        org.joda.time.DateTime dateTime27 = instant26.toDateTimeISO();
        java.util.Locale locale29 = new java.util.Locale("hi!");
        java.lang.String str30 = locale29.getVariant();
        java.util.Locale locale32 = java.util.Locale.forLanguageTag("hi!");
        java.lang.String str33 = locale32.toLanguageTag();
        java.lang.String str34 = locale29.getDisplayName(locale32);
        boolean boolean35 = dateTime27.equals((java.lang.Object) locale29);
        org.joda.time.Chronology chronology36 = dateTime27.getChronology();
        java.util.TimeZone timeZone37 = null;
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forTimeZone(timeZone37);
        org.joda.time.chrono.GJChronology gJChronology39 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone38);
        java.util.Locale locale41 = new java.util.Locale("hi!");
        java.lang.String str42 = locale41.getCountry();
        java.util.Locale locale43 = java.util.Locale.getDefault();
        java.lang.String str44 = locale43.getDisplayName();
        java.lang.String str45 = locale41.getDisplayScript(locale43);
        boolean boolean46 = dateTimeZone38.equals((java.lang.Object) locale43);
        org.joda.time.DateTime dateTime47 = dateTime27.toDateTime(dateTimeZone38);
        java.util.TimeZone timeZone48 = dateTimeZone38.toTimeZone();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant26 and dateTime27", (instant26.compareTo(dateTime27) == 0) == instant26.equals(dateTime27));
    }

    @Test
    public void test0271() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0271");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str3 = dateTimeZone1.getNameKey((long) 100);
        boolean boolean4 = dateTimeZone1.isFixed();
        java.util.Locale locale8 = new java.util.Locale("DurationField[halfdays]", "\u82f1\u6587");
        java.lang.String str9 = dateTimeZone1.getName((long) (short) 10, locale8);
        org.joda.time.Instant instant11 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone12 = null;
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forTimeZone(timeZone12);
        org.joda.time.chrono.GJChronology gJChronology14 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone13);
        org.joda.time.DateTimeField dateTimeField15 = gJChronology14.millisOfSecond();
        int int16 = instant11.get(dateTimeField15);
        org.joda.time.Chronology chronology17 = instant11.getChronology();
        org.joda.time.chrono.GJChronology gJChronology18 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1, (org.joda.time.ReadableInstant) instant11);
        long long19 = instant11.getMillis();
        org.joda.time.ReadableDuration readableDuration20 = null;
        org.joda.time.Instant instant21 = instant11.minus(readableDuration20);
        java.util.Locale.Category category22 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale23 = java.util.Locale.getDefault();
        boolean boolean24 = locale23.hasExtensions();
        java.lang.String str25 = locale23.getISO3Language();
        java.util.Locale.setDefault(category22, locale23);
        java.util.Locale locale27 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale28 = java.util.Locale.ENGLISH;
        java.lang.String str29 = locale27.getDisplayLanguage(locale28);
        java.util.Locale locale30 = java.util.Locale.CANADA;
        java.lang.String str31 = locale30.getISO3Language();
        java.lang.String str32 = locale27.getDisplayVariant(locale30);
        java.lang.String str33 = locale27.getDisplayName();
        java.util.Locale.setDefault(category22, locale27);
        boolean boolean35 = instant11.equals((java.lang.Object) locale27);
        org.joda.time.Instant instant38 = instant11.withDurationAdded((long) 1959, 10);
        org.joda.time.Instant instant40 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone41 = null;
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.forTimeZone(timeZone41);
        org.joda.time.chrono.GJChronology gJChronology43 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone42);
        org.joda.time.DateTimeField dateTimeField44 = gJChronology43.millisOfSecond();
        int int45 = instant40.get(dateTimeField44);
        boolean boolean46 = instant40.isEqualNow();
        org.joda.time.DateTime dateTime47 = instant40.toDateTime();
        java.util.TimeZone timeZone48 = null;
        org.joda.time.DateTimeZone dateTimeZone49 = org.joda.time.DateTimeZone.forTimeZone(timeZone48);
        org.joda.time.chrono.GJChronology gJChronology50 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone49);
        org.joda.time.DurationField durationField51 = gJChronology50.halfdays();
        org.joda.time.DateTimeField dateTimeField52 = gJChronology50.millisOfDay();
        org.joda.time.DateTimeField dateTimeField53 = gJChronology50.minuteOfDay();
        org.joda.time.DurationField durationField54 = gJChronology50.centuries();
        org.joda.time.DateTimeField dateTimeField55 = gJChronology50.dayOfYear();
        java.lang.String str56 = gJChronology50.toString();
        org.joda.time.DateTimeField dateTimeField57 = gJChronology50.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone58 = gJChronology50.getZone();
        java.util.TimeZone timeZone59 = null;
        org.joda.time.DateTimeZone dateTimeZone60 = org.joda.time.DateTimeZone.forTimeZone(timeZone59);
        org.joda.time.chrono.GJChronology gJChronology61 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone60);
        java.util.Locale locale63 = new java.util.Locale("hi!");
        java.lang.String str64 = locale63.getCountry();
        java.util.Locale locale65 = java.util.Locale.getDefault();
        java.lang.String str66 = locale65.getDisplayName();
        java.lang.String str67 = locale63.getDisplayScript(locale65);
        boolean boolean68 = dateTimeZone60.equals((java.lang.Object) locale65);
        org.joda.time.Chronology chronology69 = gJChronology50.withZone(dateTimeZone60);
        org.joda.time.DurationField durationField70 = gJChronology50.seconds();
        org.joda.time.DurationField durationField71 = gJChronology50.years();
        boolean boolean72 = instant40.equals((java.lang.Object) durationField71);
        boolean boolean73 = instant11.isBefore((org.joda.time.ReadableInstant) instant40);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant11 and dateTime47", (instant11.compareTo(dateTime47) == 0) == instant11.equals(dateTime47));
    }

    @Test
    public void test0272() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0272");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forTimeZone(timeZone2);
        org.joda.time.chrono.GJChronology gJChronology4 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone3);
        org.joda.time.DateTimeField dateTimeField5 = gJChronology4.millisOfSecond();
        int int6 = instant1.get(dateTimeField5);
        boolean boolean7 = instant1.isEqualNow();
        org.joda.time.Instant instant9 = new org.joda.time.Instant(52L);
        boolean boolean10 = instant9.isEqualNow();
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.Instant instant12 = instant9.plus(readableDuration11);
        long long13 = instant9.getMillis();
        java.lang.Object obj14 = null;
        boolean boolean15 = instant9.equals(obj14);
        org.joda.time.Instant instant17 = new org.joda.time.Instant(52L);
        boolean boolean18 = instant17.isEqualNow();
        org.joda.time.ReadableDuration readableDuration19 = null;
        org.joda.time.Instant instant20 = instant17.plus(readableDuration19);
        long long21 = instant17.getMillis();
        java.lang.String str22 = instant17.toString();
        org.joda.time.Instant instant23 = instant17.toInstant();
        org.joda.time.ReadableDuration readableDuration24 = null;
        org.joda.time.Instant instant26 = instant17.withDurationAdded(readableDuration24, (int) 'x');
        org.joda.time.Instant instant27 = instant17.toInstant();
        int int28 = instant9.compareTo((org.joda.time.ReadableInstant) instant17);
        boolean boolean29 = instant1.isBefore((org.joda.time.ReadableInstant) instant17);
        java.util.TimeZone timeZone30 = null;
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forTimeZone(timeZone30);
        org.joda.time.chrono.GJChronology gJChronology32 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone31);
        org.joda.time.DurationField durationField33 = gJChronology32.halfdays();
        long long37 = gJChronology32.add((long) 'a', (-1L), (int) (short) 0);
        org.joda.time.DateTimeField dateTimeField38 = gJChronology32.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField39 = gJChronology32.secondOfMinute();
        org.joda.time.Instant instant41 = new org.joda.time.Instant(52L);
        boolean boolean42 = instant41.isEqualNow();
        org.joda.time.ReadableDuration readableDuration43 = null;
        org.joda.time.Instant instant44 = instant41.plus(readableDuration43);
        boolean boolean45 = gJChronology32.equals((java.lang.Object) instant41);
        org.joda.time.DateTimeFieldType dateTimeFieldType46 = null;
        boolean boolean47 = instant41.isSupported(dateTimeFieldType46);
        org.joda.time.DateTimeFieldType dateTimeFieldType48 = null;
        boolean boolean49 = instant41.isSupported(dateTimeFieldType48);
        java.lang.String str50 = instant41.toString();
        boolean boolean51 = instant1.isAfter((org.joda.time.ReadableInstant) instant41);
        java.util.TimeZone timeZone52 = null;
        org.joda.time.DateTimeZone dateTimeZone53 = org.joda.time.DateTimeZone.forTimeZone(timeZone52);
        java.lang.String str55 = dateTimeZone53.getNameKey((long) 100);
        boolean boolean56 = dateTimeZone53.isFixed();
        org.joda.time.chrono.GJChronology gJChronology57 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone53);
        int int58 = gJChronology57.getMinimumDaysInFirstWeek();
        java.lang.String str59 = gJChronology57.toString();
        org.joda.time.DateTimeField dateTimeField60 = gJChronology57.yearOfEra();
        org.joda.time.DateTime dateTime61 = instant1.toDateTime((org.joda.time.Chronology) gJChronology57);
        org.joda.time.DurationField durationField62 = gJChronology57.weekyears();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and dateTime61", (instant1.compareTo(dateTime61) == 0) == instant1.equals(dateTime61));
    }

    @Test
    public void test0273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0273");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        boolean boolean2 = instant1.isEqualNow();
        java.lang.String str3 = instant1.toString();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.MutableDateTime mutableDateTime5 = instant1.toMutableDateTime(chronology4);
        org.joda.time.MutableDateTime mutableDateTime6 = instant1.toMutableDateTime();
        org.joda.time.MutableDateTime mutableDateTime7 = instant1.toMutableDateTime();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = null;
        java.lang.String str9 = instant1.toString(dateTimeFormatter8);
        java.util.TimeZone timeZone10 = null;
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forTimeZone(timeZone10);
        org.joda.time.chrono.GJChronology gJChronology12 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone11);
        org.joda.time.DurationField durationField13 = gJChronology12.halfdays();
        org.joda.time.DateTimeField dateTimeField14 = gJChronology12.millisOfDay();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology12.minuteOfDay();
        org.joda.time.DurationField durationField16 = gJChronology12.centuries();
        org.joda.time.DateTimeField dateTimeField17 = gJChronology12.dayOfYear();
        java.lang.String str18 = gJChronology12.toString();
        org.joda.time.DurationField durationField19 = gJChronology12.years();
        org.joda.time.DateTimeField dateTimeField20 = gJChronology12.yearOfEra();
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(0, (int) (short) 10);
        org.joda.time.Chronology chronology24 = gJChronology12.withZone(dateTimeZone23);
        org.joda.time.ReadableInstant readableInstant25 = null;
        int int26 = dateTimeZone23.getOffset(readableInstant25);
        org.joda.time.Instant instant28 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone29 = null;
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forTimeZone(timeZone29);
        org.joda.time.chrono.GJChronology gJChronology31 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone30);
        org.joda.time.DateTimeField dateTimeField32 = gJChronology31.millisOfSecond();
        int int33 = instant28.get(dateTimeField32);
        org.joda.time.Instant instant35 = instant28.plus(0L);
        org.joda.time.Instant instant36 = instant35.toInstant();
        org.joda.time.Instant instant38 = new org.joda.time.Instant(52L);
        boolean boolean39 = instant38.isEqualNow();
        java.lang.String str40 = instant38.toString();
        java.lang.String str41 = instant38.toString();
        org.joda.time.Instant instant43 = new org.joda.time.Instant(52L);
        boolean boolean44 = instant43.isEqualNow();
        org.joda.time.ReadableDuration readableDuration45 = null;
        org.joda.time.Instant instant46 = instant43.plus(readableDuration45);
        boolean boolean47 = instant38.isBefore((org.joda.time.ReadableInstant) instant46);
        org.joda.time.Instant instant49 = instant38.minus((long) 0);
        int int50 = instant35.compareTo((org.joda.time.ReadableInstant) instant38);
        org.joda.time.Instant instant53 = instant38.withDurationAdded((long) (short) 100, 70);
        org.joda.time.chrono.GJChronology gJChronology54 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone23, (org.joda.time.ReadableInstant) instant53);
        org.joda.time.DateTime dateTime55 = instant53.toDateTimeISO();
        boolean boolean56 = instant1.isBefore((org.joda.time.ReadableInstant) dateTime55);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime5 and instant28", (mutableDateTime5.compareTo(instant28) == 0) == mutableDateTime5.equals(instant28));
    }

    @Test
    public void test0274() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0274");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        boolean boolean2 = instant1.isEqualNow();
        java.lang.String str3 = instant1.toString();
        java.lang.String str4 = instant1.toString();
        org.joda.time.Instant instant7 = instant1.withDurationAdded(115200000L, (int) (short) 1);
        org.joda.time.Instant instant8 = instant1.toInstant();
        org.joda.time.Instant instant11 = instant1.withDurationAdded(4156171L, (-19));
        java.util.TimeZone timeZone12 = null;
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forTimeZone(timeZone12);
        java.lang.String str15 = dateTimeZone13.getNameKey((long) 100);
        boolean boolean16 = dateTimeZone13.isFixed();
        org.joda.time.chrono.GJChronology gJChronology17 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone13);
        int int18 = gJChronology17.getMinimumDaysInFirstWeek();
        java.lang.String str19 = gJChronology17.toString();
        org.joda.time.DateTimeField dateTimeField20 = gJChronology17.yearOfEra();
        org.joda.time.DateTimeField dateTimeField21 = gJChronology17.yearOfCentury();
        org.joda.time.DurationField durationField22 = gJChronology17.eras();
        org.joda.time.DateTimeField dateTimeField23 = gJChronology17.yearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime24 = instant11.toMutableDateTime((org.joda.time.Chronology) gJChronology17);
        org.joda.time.DurationField durationField25 = gJChronology17.eras();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant11 and mutableDateTime24", (instant11.compareTo(mutableDateTime24) == 0) == instant11.equals(mutableDateTime24));
    }

    @Test
    public void test0275() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0275");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        boolean boolean2 = instant1.isEqualNow();
        org.joda.time.ReadableDuration readableDuration3 = null;
        org.joda.time.Instant instant4 = instant1.plus(readableDuration3);
        long long5 = instant1.getMillis();
        java.lang.String str6 = instant1.toString();
        org.joda.time.Instant instant7 = instant1.toInstant();
        org.joda.time.DateTime dateTime8 = instant1.toDateTime();
        java.util.TimeZone timeZone9 = null;
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forTimeZone(timeZone9);
        org.joda.time.chrono.GJChronology gJChronology11 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone10);
        org.joda.time.DateTimeField dateTimeField12 = gJChronology11.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField13 = gJChronology11.weekyearOfCentury();
        org.joda.time.Instant instant14 = gJChronology11.getGregorianCutover();
        org.joda.time.Instant instant16 = instant14.withMillis(0L);
        org.joda.time.Instant instant18 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone19 = null;
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forTimeZone(timeZone19);
        org.joda.time.chrono.GJChronology gJChronology21 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone20);
        org.joda.time.DateTimeField dateTimeField22 = gJChronology21.millisOfSecond();
        int int23 = instant18.get(dateTimeField22);
        org.joda.time.Instant instant25 = instant18.plus(0L);
        int int26 = instant16.compareTo((org.joda.time.ReadableInstant) instant25);
        org.joda.time.Instant instant28 = new org.joda.time.Instant(52L);
        boolean boolean29 = instant28.isEqualNow();
        org.joda.time.ReadableDuration readableDuration30 = null;
        org.joda.time.Instant instant31 = instant28.plus(readableDuration30);
        boolean boolean33 = instant31.equals((java.lang.Object) ' ');
        boolean boolean34 = instant25.isEqual((org.joda.time.ReadableInstant) instant31);
        java.lang.String str35 = instant25.toString();
        org.joda.time.Instant instant36 = instant25.toInstant();
        java.util.TimeZone timeZone37 = null;
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forTimeZone(timeZone37);
        org.joda.time.chrono.GJChronology gJChronology39 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone38);
        org.joda.time.DurationField durationField40 = gJChronology39.halfdays();
        long long44 = gJChronology39.add((long) 'a', (-1L), (int) (short) 0);
        org.joda.time.DateTimeField dateTimeField45 = gJChronology39.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField46 = gJChronology39.secondOfMinute();
        org.joda.time.Instant instant48 = new org.joda.time.Instant(52L);
        boolean boolean49 = instant48.isEqualNow();
        org.joda.time.ReadableDuration readableDuration50 = null;
        org.joda.time.Instant instant51 = instant48.plus(readableDuration50);
        boolean boolean52 = gJChronology39.equals((java.lang.Object) instant48);
        org.joda.time.DateTimeFieldType dateTimeFieldType53 = null;
        boolean boolean54 = instant48.isSupported(dateTimeFieldType53);
        org.joda.time.DateTimeFieldType dateTimeFieldType55 = null;
        boolean boolean56 = instant48.isSupported(dateTimeFieldType55);
        int int57 = instant36.compareTo((org.joda.time.ReadableInstant) instant48);
        boolean boolean58 = instant1.isBefore((org.joda.time.ReadableInstant) instant48);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and dateTime8", (instant1.compareTo(dateTime8) == 0) == instant1.equals(dateTime8));
    }

    @Test
    public void test0276() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0276");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        org.joda.time.Instant instant3 = instant1.withMillis((long) 'u');
        java.util.TimeZone timeZone4 = null;
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forTimeZone(timeZone4);
        org.joda.time.chrono.GJChronology gJChronology6 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone5);
        org.joda.time.DurationField durationField7 = gJChronology6.halfdays();
        long long11 = gJChronology6.add((long) 'a', (-1L), (int) (short) 0);
        boolean boolean13 = gJChronology6.equals((java.lang.Object) 0);
        org.joda.time.DateTimeField dateTimeField14 = gJChronology6.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology6.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField16 = gJChronology6.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField17 = gJChronology6.clockhourOfHalfday();
        org.joda.time.DateTime dateTime18 = instant1.toDateTime((org.joda.time.Chronology) gJChronology6);
        java.lang.String str19 = dateTime18.toString();
        org.joda.time.Chronology chronology20 = dateTime18.getChronology();
        java.util.TimeZone timeZone21 = null;
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forTimeZone(timeZone21);
        java.lang.String str24 = dateTimeZone22.getNameKey((long) 100);
        boolean boolean25 = dateTimeZone22.isFixed();
        org.joda.time.chrono.GJChronology gJChronology26 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone22);
        int int27 = gJChronology26.getMinimumDaysInFirstWeek();
        java.lang.String str28 = gJChronology26.toString();
        org.joda.time.DateTimeField dateTimeField29 = gJChronology26.yearOfEra();
        org.joda.time.DateTimeField dateTimeField30 = gJChronology26.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField31 = gJChronology26.dayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology33 = gJChronology26.withZone(dateTimeZone32);
        org.joda.time.DateTimeField dateTimeField34 = chronology33.millisOfSecond();
        java.util.TimeZone timeZone35 = null;
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.forTimeZone(timeZone35);
        org.joda.time.chrono.GJChronology gJChronology37 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone36);
        int int39 = dateTimeZone36.getOffsetFromLocal((long) (-1));
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.forOffsetHours((int) '4');
        long long43 = dateTimeZone36.getMillisKeepLocal(dateTimeZone41, (-8380800000L));
        org.joda.time.Chronology chronology44 = chronology33.withZone(dateTimeZone36);
        boolean boolean46 = dateTimeZone36.isStandardOffset(3600000L);
        org.joda.time.Instant instant48 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone49 = null;
        org.joda.time.DateTimeZone dateTimeZone50 = org.joda.time.DateTimeZone.forTimeZone(timeZone49);
        org.joda.time.chrono.GJChronology gJChronology51 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone50);
        org.joda.time.DateTimeField dateTimeField52 = gJChronology51.millisOfSecond();
        int int53 = instant48.get(dateTimeField52);
        java.util.TimeZone timeZone54 = null;
        org.joda.time.DateTimeZone dateTimeZone55 = org.joda.time.DateTimeZone.forTimeZone(timeZone54);
        org.joda.time.chrono.GJChronology gJChronology56 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone55);
        org.joda.time.DurationField durationField57 = gJChronology56.halfdays();
        java.util.TimeZone timeZone58 = null;
        org.joda.time.DateTimeZone dateTimeZone59 = org.joda.time.DateTimeZone.forTimeZone(timeZone58);
        org.joda.time.chrono.GJChronology gJChronology60 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone59);
        long long64 = dateTimeZone59.convertLocalToUTC((long) (byte) -1, true, 0L);
        boolean boolean66 = dateTimeZone59.equals((java.lang.Object) true);
        org.joda.time.Chronology chronology67 = gJChronology56.withZone(dateTimeZone59);
        org.joda.time.MutableDateTime mutableDateTime68 = instant48.toMutableDateTime(dateTimeZone59);
        int int69 = dateTimeZone36.getOffset((org.joda.time.ReadableInstant) instant48);
        boolean boolean70 = dateTime18.isEqual((org.joda.time.ReadableInstant) instant48);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and mutableDateTime68", (instant1.compareTo(mutableDateTime68) == 0) == instant1.equals(mutableDateTime68));
    }

    @Test
    public void test0277() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0277");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = gJChronology2.halfdays();
        org.joda.time.Chronology chronology4 = gJChronology2.withUTC();
        java.lang.String str5 = gJChronology2.toString();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology2.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(1, 10);
        org.joda.time.Chronology chronology10 = gJChronology2.withZone(dateTimeZone9);
        long long12 = dateTimeZone9.convertUTCToLocal((-43829L));
        boolean boolean13 = dateTimeZone9.isFixed();
        long long15 = dateTimeZone9.previousTransition((long) 1869);
        org.joda.time.Instant instant17 = new org.joda.time.Instant(52L);
        boolean boolean18 = instant17.isEqualNow();
        org.joda.time.ReadableDuration readableDuration19 = null;
        org.joda.time.Instant instant20 = instant17.plus(readableDuration19);
        long long21 = instant17.getMillis();
        java.lang.String str22 = instant17.toString();
        org.joda.time.Instant instant23 = instant17.toInstant();
        org.joda.time.ReadableDuration readableDuration24 = null;
        org.joda.time.Instant instant26 = instant17.withDurationAdded(readableDuration24, (int) 'x');
        java.util.TimeZone timeZone27 = null;
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forTimeZone(timeZone27);
        org.joda.time.chrono.GJChronology gJChronology29 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone28);
        org.joda.time.DateTimeField dateTimeField30 = gJChronology29.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField31 = gJChronology29.yearOfCentury();
        int int32 = instant26.get(dateTimeField31);
        org.joda.time.Instant instant33 = instant26.toInstant();
        org.joda.time.MutableDateTime mutableDateTime34 = instant33.toMutableDateTime();
        org.joda.time.chrono.GJChronology gJChronology35 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone9, (org.joda.time.ReadableInstant) instant33);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant33 and mutableDateTime34", (instant33.compareTo(mutableDateTime34) == 0) == instant33.equals(mutableDateTime34));
    }

    @Test
    public void test0278() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0278");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        boolean boolean2 = instant1.isEqualNow();
        org.joda.time.ReadableDuration readableDuration3 = null;
        org.joda.time.Instant instant4 = instant1.plus(readableDuration3);
        long long5 = instant1.getMillis();
        java.lang.String str6 = instant1.toString();
        org.joda.time.Instant instant7 = instant1.toInstant();
        java.util.TimeZone timeZone8 = null;
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forTimeZone(timeZone8);
        java.lang.String str11 = dateTimeZone9.getNameKey((long) 100);
        long long14 = dateTimeZone9.convertLocalToUTC((-2246399965L), true);
        org.joda.time.MutableDateTime mutableDateTime15 = instant7.toMutableDateTime(dateTimeZone9);
        long long16 = instant7.getMillis();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant7 and mutableDateTime15", (instant7.compareTo(mutableDateTime15) == 0) == instant7.equals(mutableDateTime15));
    }

    @Test
    public void test0279() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0279");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField3 = gJChronology2.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.weekyearOfCentury();
        org.joda.time.Instant instant5 = gJChronology2.getGregorianCutover();
        org.joda.time.Instant instant7 = instant5.withMillis(0L);
        org.joda.time.Instant instant9 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone10 = null;
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forTimeZone(timeZone10);
        org.joda.time.chrono.GJChronology gJChronology12 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone11);
        org.joda.time.DateTimeField dateTimeField13 = gJChronology12.millisOfSecond();
        int int14 = instant9.get(dateTimeField13);
        org.joda.time.Instant instant16 = instant9.plus(0L);
        int int17 = instant7.compareTo((org.joda.time.ReadableInstant) instant16);
        java.util.TimeZone timeZone18 = null;
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forTimeZone(timeZone18);
        org.joda.time.chrono.GJChronology gJChronology20 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone19);
        org.joda.time.DurationField durationField21 = gJChronology20.halfdays();
        org.joda.time.DateTimeField dateTimeField22 = gJChronology20.millisOfDay();
        org.joda.time.DateTimeField dateTimeField23 = gJChronology20.minuteOfDay();
        org.joda.time.DurationField durationField24 = gJChronology20.centuries();
        org.joda.time.DateTimeField dateTimeField25 = gJChronology20.halfdayOfDay();
        java.util.Locale locale26 = java.util.Locale.ITALIAN;
        java.util.Locale locale27 = locale26.stripExtensions();
        java.util.Locale locale28 = java.util.Locale.CANADA;
        java.lang.String str29 = locale26.getDisplayVariant(locale28);
        boolean boolean30 = gJChronology20.equals((java.lang.Object) locale28);
        org.joda.time.DateTime dateTime31 = instant7.toDateTime((org.joda.time.Chronology) gJChronology20);
        java.util.TimeZone timeZone32 = null;
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.forTimeZone(timeZone32);
        org.joda.time.chrono.GJChronology gJChronology34 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone33);
        org.joda.time.DurationField durationField35 = gJChronology34.halfdays();
        org.joda.time.DateTimeField dateTimeField36 = gJChronology34.millisOfDay();
        org.joda.time.DateTimeField dateTimeField37 = gJChronology34.minuteOfDay();
        org.joda.time.DurationField durationField38 = gJChronology34.centuries();
        org.joda.time.DateTimeField dateTimeField39 = gJChronology34.dayOfYear();
        java.lang.String str40 = gJChronology34.toString();
        org.joda.time.DateTimeField dateTimeField41 = gJChronology34.dayOfYear();
        org.joda.time.DateTimeField dateTimeField42 = gJChronology34.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField43 = gJChronology34.clockhourOfDay();
        org.joda.time.DurationField durationField44 = gJChronology34.months();
        org.joda.time.MutableDateTime mutableDateTime45 = dateTime31.toMutableDateTime((org.joda.time.Chronology) gJChronology34);
        java.util.TimeZone timeZone46 = null;
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.forTimeZone(timeZone46);
        org.joda.time.chrono.GJChronology gJChronology48 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone47);
        java.util.Locale locale50 = new java.util.Locale("hi!");
        java.lang.String str51 = locale50.getCountry();
        java.util.Locale locale52 = java.util.Locale.getDefault();
        java.lang.String str53 = locale52.getDisplayName();
        java.lang.String str54 = locale50.getDisplayScript(locale52);
        boolean boolean55 = dateTimeZone47.equals((java.lang.Object) locale52);
        org.joda.time.DateTimeZone dateTimeZone57 = org.joda.time.DateTimeZone.forOffsetMillis((int) '4');
        java.util.TimeZone timeZone58 = dateTimeZone57.toTimeZone();
        long long61 = dateTimeZone57.adjustOffset((long) 0, false);
        int int63 = dateTimeZone57.getOffsetFromLocal((-26438399999L));
        long long65 = dateTimeZone47.getMillisKeepLocal(dateTimeZone57, (long) (byte) 10);
        org.joda.time.Instant instant67 = new org.joda.time.Instant(52L);
        boolean boolean68 = instant67.isEqualNow();
        org.joda.time.ReadableDuration readableDuration69 = null;
        org.joda.time.Instant instant70 = instant67.plus(readableDuration69);
        long long71 = instant67.getMillis();
        java.lang.String str72 = instant67.toString();
        org.joda.time.Instant instant73 = instant67.toInstant();
        org.joda.time.ReadableDuration readableDuration74 = null;
        org.joda.time.Instant instant76 = instant67.withDurationAdded(readableDuration74, (int) 'x');
        java.util.TimeZone timeZone77 = null;
        org.joda.time.DateTimeZone dateTimeZone78 = org.joda.time.DateTimeZone.forTimeZone(timeZone77);
        org.joda.time.chrono.GJChronology gJChronology79 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone78);
        org.joda.time.DateTimeField dateTimeField80 = gJChronology79.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField81 = gJChronology79.yearOfCentury();
        int int82 = instant76.get(dateTimeField81);
        org.joda.time.chrono.GJChronology gJChronology83 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone57, (org.joda.time.ReadableInstant) instant76);
        org.joda.time.DateTimeField dateTimeField84 = gJChronology83.halfdayOfDay();
        boolean boolean85 = mutableDateTime45.equals((java.lang.Object) dateTimeField84);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant7 and dateTime31", (instant7.compareTo(dateTime31) == 0) == instant7.equals(dateTime31));
    }

    @Test
    public void test0280() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0280");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField3 = gJChronology2.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.weekyearOfCentury();
        org.joda.time.Instant instant5 = gJChronology2.getGregorianCutover();
        org.joda.time.Instant instant7 = instant5.withMillis(0L);
        org.joda.time.Instant instant9 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone10 = null;
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forTimeZone(timeZone10);
        org.joda.time.chrono.GJChronology gJChronology12 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone11);
        org.joda.time.DateTimeField dateTimeField13 = gJChronology12.millisOfSecond();
        int int14 = instant9.get(dateTimeField13);
        org.joda.time.Instant instant16 = instant9.plus(0L);
        int int17 = instant7.compareTo((org.joda.time.ReadableInstant) instant16);
        java.util.TimeZone timeZone18 = null;
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forTimeZone(timeZone18);
        org.joda.time.chrono.GJChronology gJChronology20 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone19);
        org.joda.time.DurationField durationField21 = gJChronology20.halfdays();
        org.joda.time.DateTimeField dateTimeField22 = gJChronology20.millisOfDay();
        org.joda.time.DateTimeField dateTimeField23 = gJChronology20.minuteOfDay();
        org.joda.time.DurationField durationField24 = gJChronology20.centuries();
        org.joda.time.DateTimeField dateTimeField25 = gJChronology20.halfdayOfDay();
        java.util.Locale locale26 = java.util.Locale.ITALIAN;
        java.util.Locale locale27 = locale26.stripExtensions();
        java.util.Locale locale28 = java.util.Locale.CANADA;
        java.lang.String str29 = locale26.getDisplayVariant(locale28);
        boolean boolean30 = gJChronology20.equals((java.lang.Object) locale28);
        org.joda.time.DateTime dateTime31 = instant7.toDateTime((org.joda.time.Chronology) gJChronology20);
        java.util.TimeZone timeZone32 = null;
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.forTimeZone(timeZone32);
        org.joda.time.chrono.GJChronology gJChronology34 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone33);
        org.joda.time.DurationField durationField35 = gJChronology34.halfdays();
        org.joda.time.DateTimeField dateTimeField36 = gJChronology34.millisOfDay();
        org.joda.time.DateTimeField dateTimeField37 = gJChronology34.minuteOfDay();
        org.joda.time.DurationField durationField38 = gJChronology34.centuries();
        org.joda.time.DateTimeField dateTimeField39 = gJChronology34.dayOfYear();
        java.lang.String str40 = gJChronology34.toString();
        org.joda.time.DateTimeField dateTimeField41 = gJChronology34.dayOfYear();
        org.joda.time.DateTimeField dateTimeField42 = gJChronology34.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField43 = gJChronology34.clockhourOfDay();
        org.joda.time.DurationField durationField44 = gJChronology34.months();
        org.joda.time.MutableDateTime mutableDateTime45 = dateTime31.toMutableDateTime((org.joda.time.Chronology) gJChronology34);
        org.joda.time.DurationField durationField46 = gJChronology34.weeks();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant7 and dateTime31", (instant7.compareTo(dateTime31) == 0) == instant7.equals(dateTime31));
    }

    @Test
    public void test0281() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0281");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forTimeZone(timeZone2);
        org.joda.time.chrono.GJChronology gJChronology4 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone3);
        org.joda.time.DateTimeField dateTimeField5 = gJChronology4.millisOfSecond();
        int int6 = instant1.get(dateTimeField5);
        org.joda.time.Instant instant8 = instant1.plus(0L);
        org.joda.time.Instant instant9 = instant8.toInstant();
        org.joda.time.Instant instant11 = new org.joda.time.Instant(52L);
        boolean boolean12 = instant11.isEqualNow();
        java.lang.String str13 = instant11.toString();
        java.lang.String str14 = instant11.toString();
        org.joda.time.Instant instant16 = new org.joda.time.Instant(52L);
        boolean boolean17 = instant16.isEqualNow();
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.Instant instant19 = instant16.plus(readableDuration18);
        boolean boolean20 = instant11.isBefore((org.joda.time.ReadableInstant) instant19);
        org.joda.time.Instant instant22 = instant11.minus((long) 0);
        int int23 = instant8.compareTo((org.joda.time.ReadableInstant) instant11);
        org.joda.time.Instant instant26 = instant11.withDurationAdded((long) (short) 100, 70);
        org.joda.time.DateTime dateTime27 = instant26.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration28 = null;
        org.joda.time.Instant instant29 = instant26.minus(readableDuration28);
        java.util.TimeZone timeZone30 = null;
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forTimeZone(timeZone30);
        org.joda.time.chrono.GJChronology gJChronology32 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone31);
        org.joda.time.DateTimeField dateTimeField33 = gJChronology32.era();
        org.joda.time.DateTimeField dateTimeField34 = gJChronology32.centuryOfEra();
        java.util.TimeZone timeZone35 = null;
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.forTimeZone(timeZone35);
        org.joda.time.chrono.GJChronology gJChronology37 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone36);
        int int39 = dateTimeZone36.getOffsetFromLocal((long) (-1));
        int int41 = dateTimeZone36.getOffset((-61827926399999L));
        org.joda.time.Chronology chronology42 = gJChronology32.withZone(dateTimeZone36);
        org.joda.time.DateTimeField dateTimeField43 = gJChronology32.dayOfMonth();
        org.joda.time.DurationField durationField44 = gJChronology32.centuries();
        org.joda.time.DurationField durationField45 = gJChronology32.halfdays();
        org.joda.time.MutableDateTime mutableDateTime46 = instant26.toMutableDateTime((org.joda.time.Chronology) gJChronology32);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime27 and instant26", (dateTime27.compareTo(instant26) == 0) == dateTime27.equals(instant26));
    }

    @Test
    public void test0282() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0282");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        org.joda.time.Instant instant3 = instant1.withMillis((long) 'u');
        java.util.TimeZone timeZone4 = null;
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forTimeZone(timeZone4);
        org.joda.time.chrono.GJChronology gJChronology6 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone5);
        org.joda.time.DurationField durationField7 = gJChronology6.halfdays();
        long long11 = gJChronology6.add((long) 'a', (-1L), (int) (short) 0);
        boolean boolean13 = gJChronology6.equals((java.lang.Object) 0);
        org.joda.time.DateTimeField dateTimeField14 = gJChronology6.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology6.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField16 = gJChronology6.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField17 = gJChronology6.clockhourOfHalfday();
        org.joda.time.DateTime dateTime18 = instant1.toDateTime((org.joda.time.Chronology) gJChronology6);
        java.util.TimeZone timeZone19 = null;
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forTimeZone(timeZone19);
        org.joda.time.chrono.GJChronology gJChronology21 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone20);
        org.joda.time.DurationField durationField22 = gJChronology21.halfdays();
        long long26 = gJChronology21.add((long) 'a', (-1L), (int) (short) 0);
        long long30 = gJChronology21.add((long) (byte) 0, (long) '4', 100);
        org.joda.time.DateTimeField dateTimeField31 = gJChronology21.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField32 = gJChronology21.year();
        org.joda.time.DateTimeField dateTimeField33 = gJChronology21.monthOfYear();
        org.joda.time.MutableDateTime mutableDateTime34 = instant1.toMutableDateTime((org.joda.time.Chronology) gJChronology21);
        org.joda.time.DateTimeField dateTimeField35 = gJChronology21.centuryOfEra();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and dateTime18", (instant1.compareTo(dateTime18) == 0) == instant1.equals(dateTime18));
    }

    @Test
    public void test0283() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0283");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        boolean boolean2 = instant1.isEqualNow();
        java.lang.String str3 = instant1.toString();
        java.util.TimeZone timeZone4 = null;
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forTimeZone(timeZone4);
        org.joda.time.chrono.GJChronology gJChronology6 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone5);
        java.util.Locale locale8 = new java.util.Locale("hi!");
        java.lang.String str9 = locale8.getCountry();
        java.util.Locale locale10 = java.util.Locale.getDefault();
        java.lang.String str11 = locale10.getDisplayName();
        java.lang.String str12 = locale8.getDisplayScript(locale10);
        boolean boolean13 = dateTimeZone5.equals((java.lang.Object) locale10);
        int int15 = dateTimeZone5.getOffsetFromLocal((long) (short) 10);
        java.util.TimeZone timeZone16 = null;
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forTimeZone(timeZone16);
        org.joda.time.chrono.GJChronology gJChronology18 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone17);
        org.joda.time.DateTimeField dateTimeField19 = gJChronology18.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField20 = gJChronology18.weekyearOfCentury();
        org.joda.time.Instant instant21 = gJChronology18.getGregorianCutover();
        org.joda.time.Instant instant23 = instant21.withMillis(0L);
        org.joda.time.Instant instant25 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone26 = null;
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forTimeZone(timeZone26);
        org.joda.time.chrono.GJChronology gJChronology28 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone27);
        org.joda.time.DateTimeField dateTimeField29 = gJChronology28.millisOfSecond();
        int int30 = instant25.get(dateTimeField29);
        org.joda.time.Instant instant32 = instant25.plus(0L);
        int int33 = instant23.compareTo((org.joda.time.ReadableInstant) instant32);
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = null;
        boolean boolean35 = instant32.isSupported(dateTimeFieldType34);
        int int36 = dateTimeZone5.getOffset((org.joda.time.ReadableInstant) instant32);
        boolean boolean37 = instant1.isAfter((org.joda.time.ReadableInstant) instant32);
        org.joda.time.ReadableDuration readableDuration38 = null;
        org.joda.time.Instant instant39 = instant1.minus(readableDuration38);
        org.joda.time.Instant instant40 = instant39.toInstant();
        java.util.Date date41 = instant39.toDate();
        java.util.TimeZone timeZone42 = null;
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.forTimeZone(timeZone42);
        org.joda.time.chrono.GJChronology gJChronology44 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone43);
        org.joda.time.DurationField durationField45 = gJChronology44.halfdays();
        long long49 = gJChronology44.add((long) 'a', (-1L), (int) (short) 0);
        boolean boolean51 = gJChronology44.equals((java.lang.Object) 0);
        org.joda.time.DateTimeField dateTimeField52 = gJChronology44.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField53 = gJChronology44.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField54 = gJChronology44.clockhourOfDay();
        long long59 = gJChronology44.getDateTimeMillis(10, (int) (short) 10, 4, (int) (byte) 1);
        org.joda.time.DateTimeField dateTimeField60 = gJChronology44.millisOfDay();
        java.lang.String str61 = gJChronology44.toString();
        org.joda.time.DateTimeField dateTimeField62 = gJChronology44.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField63 = gJChronology44.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField64 = gJChronology44.halfdayOfDay();
        java.util.TimeZone timeZone65 = null;
        org.joda.time.DateTimeZone dateTimeZone66 = org.joda.time.DateTimeZone.forTimeZone(timeZone65);
        org.joda.time.chrono.GJChronology gJChronology67 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone66);
        org.joda.time.DurationField durationField68 = gJChronology67.halfdays();
        long long72 = gJChronology67.add((long) 'a', (-1L), (int) (short) 0);
        long long76 = gJChronology67.add((long) (byte) 0, (long) '4', 100);
        org.joda.time.DurationField durationField77 = gJChronology67.years();
        org.joda.time.DateTimeField dateTimeField78 = gJChronology67.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone79 = gJChronology67.getZone();
        org.joda.time.Chronology chronology80 = gJChronology44.withZone(dateTimeZone79);
        org.joda.time.MutableDateTime mutableDateTime81 = instant39.toMutableDateTime(dateTimeZone79);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter82 = null;
        java.lang.String str83 = instant39.toString(dateTimeFormatter82);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant39 and mutableDateTime81", (instant39.compareTo(mutableDateTime81) == 0) == instant39.equals(mutableDateTime81));
    }

    @Test
    public void test0284() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0284");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField3 = gJChronology2.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.weekyearOfCentury();
        org.joda.time.Instant instant5 = gJChronology2.getGregorianCutover();
        org.joda.time.Instant instant7 = instant5.withMillis(0L);
        java.util.TimeZone timeZone8 = null;
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forTimeZone(timeZone8);
        org.joda.time.chrono.GJChronology gJChronology10 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone9);
        org.joda.time.DateTimeField dateTimeField11 = gJChronology10.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField12 = gJChronology10.weekyear();
        org.joda.time.DateTimeField dateTimeField13 = gJChronology10.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField14 = gJChronology10.weekyearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime15 = instant7.toMutableDateTime((org.joda.time.Chronology) gJChronology10);
        org.joda.time.Instant instant17 = instant7.withMillis(111000000L);
        org.joda.time.Chronology chronology18 = instant17.getChronology();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant7 and mutableDateTime15", (instant7.compareTo(mutableDateTime15) == 0) == instant7.equals(mutableDateTime15));
    }

    @Test
    public void test0285() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0285");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        boolean boolean2 = instant1.isEqualNow();
        java.lang.String str3 = instant1.toString();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.MutableDateTime mutableDateTime5 = instant1.toMutableDateTime(chronology4);
        org.joda.time.Instant instant7 = new org.joda.time.Instant(52L);
        boolean boolean8 = instant7.isEqualNow();
        org.joda.time.Instant instant10 = new org.joda.time.Instant(52L);
        org.joda.time.Instant instant12 = instant10.withMillis((long) 'u');
        boolean boolean13 = instant7.isAfter((org.joda.time.ReadableInstant) instant10);
        boolean boolean14 = mutableDateTime5.isEqual((org.joda.time.ReadableInstant) instant10);
        java.util.Locale.Category category15 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale16 = java.util.Locale.getDefault();
        boolean boolean17 = locale16.hasExtensions();
        java.lang.String str18 = locale16.getISO3Language();
        java.util.Locale.setDefault(category15, locale16);
        java.util.Locale locale20 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale21 = java.util.Locale.ENGLISH;
        java.lang.String str22 = locale20.getDisplayLanguage(locale21);
        java.util.Locale locale23 = java.util.Locale.CANADA;
        java.lang.String str24 = locale23.getISO3Language();
        java.lang.String str25 = locale20.getDisplayVariant(locale23);
        java.lang.String str26 = locale20.getDisplayName();
        java.util.Locale.setDefault(category15, locale20);
        boolean boolean28 = mutableDateTime5.equals((java.lang.Object) locale20);
        java.lang.String str29 = locale20.getVariant();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and mutableDateTime5", (instant1.compareTo(mutableDateTime5) == 0) == instant1.equals(mutableDateTime5));
    }

    @Test
    public void test0286() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0286");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str3 = dateTimeZone1.getNameKey((long) 100);
        boolean boolean4 = dateTimeZone1.isFixed();
        java.util.Locale locale8 = new java.util.Locale("DurationField[halfdays]", "\u82f1\u6587");
        java.lang.String str9 = dateTimeZone1.getName((long) (short) 10, locale8);
        org.joda.time.Instant instant11 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone12 = null;
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forTimeZone(timeZone12);
        org.joda.time.chrono.GJChronology gJChronology14 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone13);
        org.joda.time.DateTimeField dateTimeField15 = gJChronology14.millisOfSecond();
        int int16 = instant11.get(dateTimeField15);
        org.joda.time.Chronology chronology17 = instant11.getChronology();
        org.joda.time.chrono.GJChronology gJChronology18 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1, (org.joda.time.ReadableInstant) instant11);
        org.joda.time.DateTime dateTime19 = instant11.toDateTime();
        org.joda.time.ReadableDuration readableDuration20 = null;
        org.joda.time.Instant instant21 = instant11.minus(readableDuration20);
        org.joda.time.Instant instant22 = instant21.toInstant();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant22 and dateTime19", (instant22.compareTo(dateTime19) == 0) == instant22.equals(dateTime19));
    }

    @Test
    public void test0287() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0287");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        boolean boolean2 = instant1.isEqualNow();
        org.joda.time.ReadableDuration readableDuration3 = null;
        org.joda.time.Instant instant4 = instant1.plus(readableDuration3);
        long long5 = instant1.getMillis();
        java.lang.String str6 = instant1.toString();
        boolean boolean8 = instant1.isAfter((long) (-1));
        java.lang.Object obj9 = null;
        boolean boolean10 = instant1.equals(obj9);
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.Instant instant12 = instant1.minus(readableDuration11);
        org.joda.time.Instant instant14 = new org.joda.time.Instant(52L);
        boolean boolean15 = instant14.isEqualNow();
        java.lang.String str16 = instant14.toString();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MutableDateTime mutableDateTime18 = instant14.toMutableDateTime(chronology17);
        org.joda.time.MutableDateTime mutableDateTime19 = instant14.toMutableDateTime();
        boolean boolean20 = instant12.isEqual((org.joda.time.ReadableInstant) instant14);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant12 and mutableDateTime18", (instant12.compareTo(mutableDateTime18) == 0) == instant12.equals(mutableDateTime18));
    }

    @Test
    public void test0288() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0288");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField3 = gJChronology2.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.weekyearOfCentury();
        org.joda.time.Instant instant5 = gJChronology2.getGregorianCutover();
        org.joda.time.Instant instant7 = instant5.withMillis(0L);
        org.joda.time.Chronology chronology8 = instant5.getChronology();
        org.joda.time.Instant instant9 = org.joda.time.Instant.now();
        org.joda.time.Instant instant12 = instant9.withDurationAdded(306102434400000L, (int) (short) 100);
        java.util.TimeZone timeZone13 = null;
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forTimeZone(timeZone13);
        org.joda.time.chrono.GJChronology gJChronology15 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone14);
        long long19 = dateTimeZone14.convertLocalToUTC((long) (byte) -1, true, 0L);
        boolean boolean21 = dateTimeZone14.equals((java.lang.Object) true);
        long long23 = dateTimeZone14.nextTransition((long) '4');
        java.lang.String str25 = dateTimeZone14.getShortName(432000001L);
        java.util.TimeZone timeZone26 = dateTimeZone14.toTimeZone();
        org.joda.time.DateTime dateTime27 = instant9.toDateTime(dateTimeZone14);
        org.joda.time.Instant instant29 = new org.joda.time.Instant(52L);
        boolean boolean30 = instant29.isEqualNow();
        org.joda.time.ReadableDuration readableDuration31 = null;
        org.joda.time.Instant instant32 = instant29.plus(readableDuration31);
        long long33 = instant29.getMillis();
        java.lang.String str34 = instant29.toString();
        org.joda.time.Instant instant35 = instant29.toInstant();
        org.joda.time.ReadableDuration readableDuration36 = null;
        org.joda.time.Instant instant38 = instant29.withDurationAdded(readableDuration36, (int) 'x');
        org.joda.time.Instant instant39 = instant29.toInstant();
        java.util.Date date40 = instant29.toDate();
        long long41 = instant29.getMillis();
        boolean boolean42 = dateTime27.isEqual((org.joda.time.ReadableInstant) instant29);
        int int43 = instant5.compareTo((org.joda.time.ReadableInstant) dateTime27);
        org.joda.time.Instant instant45 = new org.joda.time.Instant(25925166840100L);
        boolean boolean46 = instant5.isAfter((org.joda.time.ReadableInstant) instant45);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant9 and dateTime27", (instant9.compareTo(dateTime27) == 0) == instant9.equals(dateTime27));
    }

    @Test
    public void test0289() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0289");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        boolean boolean2 = instant1.isEqualNow();
        org.joda.time.ReadableDuration readableDuration3 = null;
        org.joda.time.Instant instant4 = instant1.plus(readableDuration3);
        org.joda.time.Instant instant6 = instant1.withMillis((long) 4);
        boolean boolean7 = instant6.isBeforeNow();
        boolean boolean9 = instant6.isBefore(5185792L);
        org.joda.time.MutableDateTime mutableDateTime10 = instant6.toMutableDateTime();
        org.joda.time.Instant instant12 = instant6.withMillis((-61827926399999L));
        java.util.Date date13 = instant12.toDate();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant6 and mutableDateTime10", (instant6.compareTo(mutableDateTime10) == 0) == instant6.equals(mutableDateTime10));
    }

    @Test
    public void test0290() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0290");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField3 = gJChronology2.millisOfSecond();
        org.joda.time.DurationField durationField4 = gJChronology2.millis();
        org.joda.time.DateTimeZone dateTimeZone5 = gJChronology2.getZone();
        long long7 = dateTimeZone5.nextTransition(4320000000L);
        boolean boolean9 = dateTimeZone5.isStandardOffset(3155760001170L);
        java.util.TimeZone timeZone10 = null;
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forTimeZone(timeZone10);
        org.joda.time.chrono.GJChronology gJChronology12 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone11);
        org.joda.time.DateTimeField dateTimeField13 = gJChronology12.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField14 = gJChronology12.weekyearOfCentury();
        org.joda.time.Instant instant15 = gJChronology12.getGregorianCutover();
        org.joda.time.Instant instant17 = instant15.withMillis(0L);
        org.joda.time.Instant instant19 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone20 = null;
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forTimeZone(timeZone20);
        org.joda.time.chrono.GJChronology gJChronology22 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone21);
        org.joda.time.DateTimeField dateTimeField23 = gJChronology22.millisOfSecond();
        int int24 = instant19.get(dateTimeField23);
        org.joda.time.Instant instant26 = instant19.plus(0L);
        int int27 = instant17.compareTo((org.joda.time.ReadableInstant) instant26);
        java.util.TimeZone timeZone28 = null;
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forTimeZone(timeZone28);
        org.joda.time.chrono.GJChronology gJChronology30 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone29);
        org.joda.time.DurationField durationField31 = gJChronology30.halfdays();
        org.joda.time.DateTimeField dateTimeField32 = gJChronology30.millisOfDay();
        org.joda.time.DateTimeField dateTimeField33 = gJChronology30.minuteOfDay();
        org.joda.time.DurationField durationField34 = gJChronology30.centuries();
        org.joda.time.DateTimeField dateTimeField35 = gJChronology30.halfdayOfDay();
        java.util.Locale locale36 = java.util.Locale.ITALIAN;
        java.util.Locale locale37 = locale36.stripExtensions();
        java.util.Locale locale38 = java.util.Locale.CANADA;
        java.lang.String str39 = locale36.getDisplayVariant(locale38);
        boolean boolean40 = gJChronology30.equals((java.lang.Object) locale38);
        org.joda.time.DateTime dateTime41 = instant17.toDateTime((org.joda.time.Chronology) gJChronology30);
        org.joda.time.chrono.GJChronology gJChronology42 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone5, (org.joda.time.ReadableInstant) dateTime41);
        long long44 = dateTimeZone5.convertUTCToLocal(4492800100L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant17 and dateTime41", (instant17.compareTo(dateTime41) == 0) == instant17.equals(dateTime41));
    }

    @Test
    public void test0291() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0291");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        boolean boolean2 = instant1.isEqualNow();
        java.lang.String str3 = instant1.toString();
        java.util.TimeZone timeZone4 = null;
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forTimeZone(timeZone4);
        org.joda.time.chrono.GJChronology gJChronology6 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone5);
        java.util.Locale locale8 = new java.util.Locale("hi!");
        java.lang.String str9 = locale8.getCountry();
        java.util.Locale locale10 = java.util.Locale.getDefault();
        java.lang.String str11 = locale10.getDisplayName();
        java.lang.String str12 = locale8.getDisplayScript(locale10);
        boolean boolean13 = dateTimeZone5.equals((java.lang.Object) locale10);
        int int15 = dateTimeZone5.getOffsetFromLocal((long) (short) 10);
        java.util.TimeZone timeZone16 = null;
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forTimeZone(timeZone16);
        org.joda.time.chrono.GJChronology gJChronology18 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone17);
        org.joda.time.DateTimeField dateTimeField19 = gJChronology18.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField20 = gJChronology18.weekyearOfCentury();
        org.joda.time.Instant instant21 = gJChronology18.getGregorianCutover();
        org.joda.time.Instant instant23 = instant21.withMillis(0L);
        org.joda.time.Instant instant25 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone26 = null;
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forTimeZone(timeZone26);
        org.joda.time.chrono.GJChronology gJChronology28 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone27);
        org.joda.time.DateTimeField dateTimeField29 = gJChronology28.millisOfSecond();
        int int30 = instant25.get(dateTimeField29);
        org.joda.time.Instant instant32 = instant25.plus(0L);
        int int33 = instant23.compareTo((org.joda.time.ReadableInstant) instant32);
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = null;
        boolean boolean35 = instant32.isSupported(dateTimeFieldType34);
        int int36 = dateTimeZone5.getOffset((org.joda.time.ReadableInstant) instant32);
        boolean boolean37 = instant1.isAfter((org.joda.time.ReadableInstant) instant32);
        org.joda.time.ReadableDuration readableDuration38 = null;
        org.joda.time.Instant instant39 = instant1.minus(readableDuration38);
        org.joda.time.Instant instant40 = instant39.toInstant();
        java.util.Date date41 = instant39.toDate();
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.forOffsetMillis((int) '4');
        java.util.TimeZone timeZone44 = dateTimeZone43.toTimeZone();
        long long47 = dateTimeZone43.adjustOffset((long) 0, false);
        int int49 = dateTimeZone43.getOffsetFromLocal((-26438399999L));
        long long51 = dateTimeZone43.previousTransition((long) (byte) 1);
        java.lang.String str52 = dateTimeZone43.getID();
        java.lang.String str53 = dateTimeZone43.getID();
        org.joda.time.MutableDateTime mutableDateTime54 = instant39.toMutableDateTime(dateTimeZone43);
        org.joda.time.Instant instant55 = instant39.toInstant();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant55 and mutableDateTime54", (instant55.compareTo(mutableDateTime54) == 0) == instant55.equals(mutableDateTime54));
    }

    @Test
    public void test0292() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0292");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = gJChronology2.halfdays();
        long long7 = gJChronology2.add(0L, (long) (short) -1, (int) '4');
        java.util.TimeZone timeZone8 = null;
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forTimeZone(timeZone8);
        org.joda.time.chrono.GJChronology gJChronology10 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone9);
        org.joda.time.DurationField durationField11 = gJChronology10.halfdays();
        org.joda.time.DateTimeField dateTimeField12 = gJChronology10.millisOfDay();
        org.joda.time.DateTimeField dateTimeField13 = gJChronology10.minuteOfDay();
        org.joda.time.DurationField durationField14 = gJChronology10.centuries();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology10.dayOfYear();
        java.lang.String str16 = gJChronology10.toString();
        org.joda.time.DurationField durationField17 = gJChronology10.years();
        org.joda.time.DateTimeField dateTimeField18 = gJChronology10.yearOfEra();
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(0, (int) (short) 10);
        org.joda.time.Chronology chronology22 = gJChronology10.withZone(dateTimeZone21);
        org.joda.time.Chronology chronology23 = gJChronology2.withZone(dateTimeZone21);
        org.joda.time.DurationField durationField24 = gJChronology2.halfdays();
        org.joda.time.Instant instant25 = gJChronology2.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration26 = null;
        org.joda.time.Instant instant27 = instant25.plus(readableDuration26);
        org.joda.time.MutableDateTime mutableDateTime28 = instant27.toMutableDateTime();
        org.joda.time.ReadableDuration readableDuration29 = null;
        org.joda.time.Instant instant30 = instant27.plus(readableDuration29);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant30 and mutableDateTime28", (instant30.compareTo(mutableDateTime28) == 0) == instant30.equals(mutableDateTime28));
    }

    @Test
    public void test0293() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0293");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = gJChronology2.halfdays();
        long long7 = gJChronology2.add((long) 'a', (-1L), (int) (short) 0);
        boolean boolean9 = gJChronology2.equals((java.lang.Object) 0);
        org.joda.time.DateTimeField dateTimeField10 = gJChronology2.dayOfMonth();
        org.joda.time.DurationField durationField11 = gJChronology2.days();
        long long15 = gJChronology2.add((long) '4', 432000000L, (int) (short) 0);
        org.joda.time.DateTimeField dateTimeField16 = gJChronology2.yearOfEra();
        org.joda.time.DurationField durationField17 = gJChronology2.eras();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField17, durationField3, and durationField11", !(durationField17.compareTo(durationField3) == 0) || (Math.signum(durationField17.compareTo(durationField11)) == Math.signum(durationField3.compareTo(durationField11))));
    }

    @Test
    public void test0294() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0294");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        java.util.Locale locale4 = new java.util.Locale("hi!");
        java.lang.String str5 = locale4.getCountry();
        java.util.Locale locale6 = java.util.Locale.getDefault();
        java.lang.String str7 = locale6.getDisplayName();
        java.lang.String str8 = locale4.getDisplayScript(locale6);
        boolean boolean9 = dateTimeZone1.equals((java.lang.Object) locale6);
        int int11 = dateTimeZone1.getOffsetFromLocal((long) (short) 10);
        java.util.TimeZone timeZone12 = null;
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forTimeZone(timeZone12);
        org.joda.time.chrono.GJChronology gJChronology14 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone13);
        org.joda.time.DateTimeField dateTimeField15 = gJChronology14.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField16 = gJChronology14.weekyearOfCentury();
        org.joda.time.Instant instant17 = gJChronology14.getGregorianCutover();
        org.joda.time.Instant instant19 = instant17.withMillis(0L);
        org.joda.time.Instant instant21 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone22 = null;
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        org.joda.time.chrono.GJChronology gJChronology24 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone23);
        org.joda.time.DateTimeField dateTimeField25 = gJChronology24.millisOfSecond();
        int int26 = instant21.get(dateTimeField25);
        org.joda.time.Instant instant28 = instant21.plus(0L);
        int int29 = instant19.compareTo((org.joda.time.ReadableInstant) instant28);
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = null;
        boolean boolean31 = instant28.isSupported(dateTimeFieldType30);
        int int32 = dateTimeZone1.getOffset((org.joda.time.ReadableInstant) instant28);
        org.joda.time.DateTime dateTime33 = instant28.toDateTimeISO();
        java.util.TimeZone timeZone34 = null;
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.forTimeZone(timeZone34);
        org.joda.time.chrono.GJChronology gJChronology36 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone35);
        org.joda.time.DateTimeField dateTimeField37 = gJChronology36.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField38 = gJChronology36.weekyearOfCentury();
        org.joda.time.Instant instant39 = gJChronology36.getGregorianCutover();
        org.joda.time.Instant instant41 = instant39.withMillis(0L);
        java.util.TimeZone timeZone42 = null;
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.forTimeZone(timeZone42);
        org.joda.time.chrono.GJChronology gJChronology44 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone43);
        org.joda.time.DateTimeField dateTimeField45 = gJChronology44.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField46 = gJChronology44.weekyear();
        org.joda.time.DateTimeField dateTimeField47 = gJChronology44.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField48 = gJChronology44.weekyearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime49 = instant41.toMutableDateTime((org.joda.time.Chronology) gJChronology44);
        org.joda.time.Instant instant51 = instant41.withMillis(111000000L);
        boolean boolean52 = dateTime33.isAfter((org.joda.time.ReadableInstant) instant51);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant19 and mutableDateTime49", (instant19.compareTo(mutableDateTime49) == 0) == instant19.equals(mutableDateTime49));
    }

    @Test
    public void test0295() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0295");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forTimeZone(timeZone2);
        org.joda.time.chrono.GJChronology gJChronology4 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone3);
        org.joda.time.DateTimeField dateTimeField5 = gJChronology4.millisOfSecond();
        int int6 = instant1.get(dateTimeField5);
        boolean boolean7 = instant1.isEqualNow();
        org.joda.time.DateTime dateTime8 = instant1.toDateTime();
        org.joda.time.Instant instant11 = instant1.withDurationAdded((long) 1431201, 1970);
        org.joda.time.Instant instant13 = instant1.minus((long) (byte) 10);
        org.joda.time.ReadableDuration readableDuration14 = null;
        org.joda.time.Instant instant16 = instant13.withDurationAdded(readableDuration14, (int) (short) 0);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and dateTime8", (instant1.compareTo(dateTime8) == 0) == instant1.equals(dateTime8));
    }

    @Test
    public void test0296() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0296");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        boolean boolean2 = instant1.isEqualNow();
        org.joda.time.ReadableDuration readableDuration3 = null;
        org.joda.time.Instant instant4 = instant1.plus(readableDuration3);
        long long5 = instant1.getMillis();
        java.lang.Object obj6 = null;
        boolean boolean7 = instant1.equals(obj6);
        org.joda.time.Instant instant9 = instant1.minus(3155695200000L);
        java.util.TimeZone timeZone10 = null;
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forTimeZone(timeZone10);
        org.joda.time.chrono.GJChronology gJChronology12 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone11);
        org.joda.time.DurationField durationField13 = gJChronology12.years();
        java.util.TimeZone timeZone14 = null;
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forTimeZone(timeZone14);
        org.joda.time.chrono.GJChronology gJChronology16 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone15);
        org.joda.time.DurationField durationField17 = gJChronology16.halfdays();
        org.joda.time.DateTimeField dateTimeField18 = gJChronology16.millisOfDay();
        org.joda.time.DateTimeField dateTimeField19 = gJChronology16.minuteOfDay();
        org.joda.time.DurationField durationField20 = gJChronology16.centuries();
        java.util.TimeZone timeZone21 = null;
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forTimeZone(timeZone21);
        org.joda.time.chrono.GJChronology gJChronology23 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone22);
        org.joda.time.DurationField durationField24 = gJChronology23.halfdays();
        long long27 = durationField24.add((long) 100, 100L);
        boolean boolean28 = durationField24.isPrecise();
        int int29 = durationField20.compareTo(durationField24);
        boolean boolean30 = gJChronology12.equals((java.lang.Object) durationField20);
        org.joda.time.DateTimeField dateTimeField31 = gJChronology12.dayOfYear();
        org.joda.time.DateTimeField dateTimeField32 = gJChronology12.era();
        org.joda.time.MutableDateTime mutableDateTime33 = instant9.toMutableDateTime((org.joda.time.Chronology) gJChronology12);
        org.joda.time.DurationField durationField34 = gJChronology12.millis();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant9 and mutableDateTime33", (instant9.compareTo(mutableDateTime33) == 0) == instant9.equals(mutableDateTime33));
    }

    @Test
    public void test0297() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0297");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField3 = gJChronology2.millisOfSecond();
        org.joda.time.DurationField durationField4 = gJChronology2.millis();
        org.joda.time.DurationField durationField5 = gJChronology2.weekyears();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology2.dayOfYear();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology2.yearOfEra();
        org.joda.time.DateTimeField dateTimeField8 = gJChronology2.secondOfDay();
        org.joda.time.DurationField durationField9 = gJChronology2.eras();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField9, durationField4, and durationField5", !(durationField9.compareTo(durationField4) == 0) || (Math.signum(durationField9.compareTo(durationField5)) == Math.signum(durationField4.compareTo(durationField5))));
    }

    @Test
    public void test0298() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0298");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        boolean boolean2 = instant1.isEqualNow();
        java.lang.String str3 = instant1.toString();
        java.lang.String str4 = instant1.toString();
        org.joda.time.Instant instant6 = new org.joda.time.Instant(52L);
        boolean boolean7 = instant6.isEqualNow();
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.Instant instant9 = instant6.plus(readableDuration8);
        boolean boolean10 = instant1.isBefore((org.joda.time.ReadableInstant) instant9);
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.Instant instant12 = instant9.minus(readableDuration11);
        long long13 = instant12.getMillis();
        org.joda.time.Instant instant15 = new org.joda.time.Instant(52L);
        boolean boolean16 = instant15.isEqualNow();
        boolean boolean18 = instant15.isEqual(0L);
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = null;
        boolean boolean20 = instant15.isSupported(dateTimeFieldType19);
        org.joda.time.Instant instant23 = instant15.withDurationAdded((-61827926399999L), (int) (short) -1);
        org.joda.time.MutableDateTime mutableDateTime24 = instant23.toMutableDateTime();
        org.joda.time.Instant instant25 = instant23.toInstant();
        boolean boolean26 = instant12.isEqual((org.joda.time.ReadableInstant) instant25);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant25 and mutableDateTime24", (instant25.compareTo(mutableDateTime24) == 0) == instant25.equals(mutableDateTime24));
    }

    @Test
    public void test0299() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0299");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = gJChronology2.halfdays();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.millisOfDay();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.minuteOfDay();
        org.joda.time.DurationField durationField6 = gJChronology2.centuries();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology2.dayOfYear();
        org.joda.time.DateTimeField dateTimeField8 = gJChronology2.weekyearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(1, 10);
        java.util.TimeZone timeZone12 = null;
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forTimeZone(timeZone12);
        long long15 = dateTimeZone11.getMillisKeepLocal(dateTimeZone13, 4320000000L);
        java.util.TimeZone timeZone16 = null;
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forTimeZone(timeZone16);
        java.lang.String str19 = dateTimeZone17.getNameKey((long) 100);
        boolean boolean20 = dateTimeZone17.isFixed();
        java.lang.String str21 = dateTimeZone17.toString();
        java.lang.String str22 = dateTimeZone17.getID();
        long long24 = dateTimeZone13.getMillisKeepLocal(dateTimeZone17, (long) (byte) -1);
        org.joda.time.Chronology chronology25 = gJChronology2.withZone(dateTimeZone17);
        org.joda.time.DurationField durationField26 = gJChronology2.halfdays();
        org.joda.time.DurationField durationField27 = gJChronology2.eras();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField27, durationField3, and durationField6", !(durationField27.compareTo(durationField3) == 0) || (Math.signum(durationField27.compareTo(durationField6)) == Math.signum(durationField3.compareTo(durationField6))));
    }

    @Test
    public void test0300() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0300");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        boolean boolean2 = instant1.isEqualNow();
        java.lang.String str3 = instant1.toString();
        java.lang.String str4 = instant1.toString();
        org.joda.time.Instant instant6 = new org.joda.time.Instant(52L);
        boolean boolean7 = instant6.isEqualNow();
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.Instant instant9 = instant6.plus(readableDuration8);
        boolean boolean10 = instant1.isBefore((org.joda.time.ReadableInstant) instant9);
        org.joda.time.Instant instant12 = instant9.plus((long) (short) 100);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MutableDateTime mutableDateTime14 = instant9.toMutableDateTime(chronology13);
        org.joda.time.ReadableInstant readableInstant15 = null;
        boolean boolean16 = instant9.isAfter(readableInstant15);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and mutableDateTime14", (instant1.compareTo(mutableDateTime14) == 0) == instant1.equals(mutableDateTime14));
    }

    @Test
    public void test0301() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0301");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        boolean boolean2 = instant1.isEqualNow();
        java.lang.String str3 = instant1.toString();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.MutableDateTime mutableDateTime5 = instant1.toMutableDateTime(chronology4);
        org.joda.time.MutableDateTime mutableDateTime6 = instant1.toMutableDateTime();
        java.util.TimeZone timeZone7 = null;
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forTimeZone(timeZone7);
        org.joda.time.chrono.GJChronology gJChronology9 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone8);
        org.joda.time.DateTimeField dateTimeField10 = gJChronology9.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField11 = gJChronology9.weekyear();
        org.joda.time.DateTimeField dateTimeField12 = gJChronology9.dayOfMonth();
        org.joda.time.MutableDateTime mutableDateTime13 = instant1.toMutableDateTime((org.joda.time.Chronology) gJChronology9);
        org.joda.time.DateTimeField dateTimeField14 = gJChronology9.monthOfYear();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and mutableDateTime5", (instant1.compareTo(mutableDateTime5) == 0) == instant1.equals(mutableDateTime5));
    }

    @Test
    public void test0302() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0302");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        org.joda.time.Instant instant3 = instant1.withMillis((long) 'u');
        java.util.TimeZone timeZone4 = null;
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forTimeZone(timeZone4);
        org.joda.time.chrono.GJChronology gJChronology6 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone5);
        org.joda.time.DurationField durationField7 = gJChronology6.halfdays();
        long long11 = gJChronology6.add((long) 'a', (-1L), (int) (short) 0);
        boolean boolean13 = gJChronology6.equals((java.lang.Object) 0);
        org.joda.time.DateTimeField dateTimeField14 = gJChronology6.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology6.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField16 = gJChronology6.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField17 = gJChronology6.clockhourOfHalfday();
        org.joda.time.DateTime dateTime18 = instant1.toDateTime((org.joda.time.Chronology) gJChronology6);
        java.util.TimeZone timeZone19 = null;
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forTimeZone(timeZone19);
        org.joda.time.chrono.GJChronology gJChronology21 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone20);
        org.joda.time.DurationField durationField22 = gJChronology21.halfdays();
        long long26 = gJChronology21.add((long) 'a', (-1L), (int) (short) 0);
        long long30 = gJChronology21.add((long) (byte) 0, (long) '4', 100);
        org.joda.time.DateTimeField dateTimeField31 = gJChronology21.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField32 = gJChronology21.year();
        org.joda.time.DateTimeField dateTimeField33 = gJChronology21.monthOfYear();
        org.joda.time.MutableDateTime mutableDateTime34 = instant1.toMutableDateTime((org.joda.time.Chronology) gJChronology21);
        boolean boolean36 = instant1.isAfter(4324200000L);
        java.util.TimeZone timeZone37 = null;
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forTimeZone(timeZone37);
        org.joda.time.chrono.GJChronology gJChronology39 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone38);
        org.joda.time.DateTimeField dateTimeField40 = gJChronology39.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField41 = gJChronology39.weekyear();
        org.joda.time.DurationField durationField42 = gJChronology39.centuries();
        org.joda.time.DateTimeField dateTimeField43 = gJChronology39.millisOfDay();
        org.joda.time.DateTimeField dateTimeField44 = gJChronology39.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField45 = gJChronology39.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField46 = gJChronology39.dayOfWeek();
        int int47 = instant1.get(dateTimeField46);
        org.joda.time.DateTime dateTime48 = instant1.toDateTimeISO();
        org.joda.time.DateTimeFieldType dateTimeFieldType49 = null;
        boolean boolean50 = instant1.isSupported(dateTimeFieldType49);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime18 and dateTime48", (dateTime18.compareTo(dateTime48) == 0) == dateTime18.equals(dateTime48));
    }

    @Test
    public void test0303() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0303");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        boolean boolean2 = instant1.isEqualNow();
        org.joda.time.ReadableDuration readableDuration3 = null;
        org.joda.time.Instant instant4 = instant1.plus(readableDuration3);
        long long5 = instant1.getMillis();
        java.lang.String str6 = instant1.toString();
        org.joda.time.Instant instant7 = instant1.toInstant();
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.Instant instant10 = instant1.withDurationAdded(readableDuration8, (int) 'x');
        long long11 = instant1.getMillis();
        org.joda.time.Instant instant13 = new org.joda.time.Instant(52L);
        org.joda.time.Instant instant15 = instant13.withMillis((long) 'u');
        java.util.TimeZone timeZone16 = null;
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forTimeZone(timeZone16);
        org.joda.time.chrono.GJChronology gJChronology18 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone17);
        org.joda.time.DurationField durationField19 = gJChronology18.halfdays();
        long long23 = gJChronology18.add((long) 'a', (-1L), (int) (short) 0);
        boolean boolean25 = gJChronology18.equals((java.lang.Object) 0);
        org.joda.time.DateTimeField dateTimeField26 = gJChronology18.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField27 = gJChronology18.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField28 = gJChronology18.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField29 = gJChronology18.clockhourOfHalfday();
        org.joda.time.DateTime dateTime30 = instant13.toDateTime((org.joda.time.Chronology) gJChronology18);
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.getDefault();
        int int33 = dateTimeZone31.getOffset((long) (byte) 1);
        long long36 = dateTimeZone31.adjustOffset((-1L), false);
        org.joda.time.MutableDateTime mutableDateTime37 = dateTime30.toMutableDateTime(dateTimeZone31);
        boolean boolean38 = instant1.isEqual((org.joda.time.ReadableInstant) mutableDateTime37);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and dateTime30", (instant1.compareTo(dateTime30) == 0) == instant1.equals(dateTime30));
    }

    @Test
    public void test0304() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0304");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        boolean boolean2 = instant1.isEqualNow();
        org.joda.time.ReadableDuration readableDuration3 = null;
        org.joda.time.Instant instant4 = instant1.plus(readableDuration3);
        long long5 = instant1.getMillis();
        java.lang.String str6 = instant1.toString();
        org.joda.time.Instant instant7 = instant1.toInstant();
        java.util.TimeZone timeZone8 = null;
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forTimeZone(timeZone8);
        java.lang.String str11 = dateTimeZone9.getNameKey((long) 100);
        long long14 = dateTimeZone9.convertLocalToUTC((-2246399965L), true);
        org.joda.time.MutableDateTime mutableDateTime15 = instant7.toMutableDateTime(dateTimeZone9);
        org.joda.time.Instant instant17 = new org.joda.time.Instant(52L);
        boolean boolean18 = instant17.isEqualNow();
        java.lang.String str19 = instant17.toString();
        java.util.TimeZone timeZone20 = null;
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forTimeZone(timeZone20);
        org.joda.time.chrono.GJChronology gJChronology22 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone21);
        java.util.Locale locale24 = new java.util.Locale("hi!");
        java.lang.String str25 = locale24.getCountry();
        java.util.Locale locale26 = java.util.Locale.getDefault();
        java.lang.String str27 = locale26.getDisplayName();
        java.lang.String str28 = locale24.getDisplayScript(locale26);
        boolean boolean29 = dateTimeZone21.equals((java.lang.Object) locale26);
        int int31 = dateTimeZone21.getOffsetFromLocal((long) (short) 10);
        java.util.TimeZone timeZone32 = null;
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.forTimeZone(timeZone32);
        org.joda.time.chrono.GJChronology gJChronology34 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone33);
        org.joda.time.DateTimeField dateTimeField35 = gJChronology34.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField36 = gJChronology34.weekyearOfCentury();
        org.joda.time.Instant instant37 = gJChronology34.getGregorianCutover();
        org.joda.time.Instant instant39 = instant37.withMillis(0L);
        org.joda.time.Instant instant41 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone42 = null;
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.forTimeZone(timeZone42);
        org.joda.time.chrono.GJChronology gJChronology44 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone43);
        org.joda.time.DateTimeField dateTimeField45 = gJChronology44.millisOfSecond();
        int int46 = instant41.get(dateTimeField45);
        org.joda.time.Instant instant48 = instant41.plus(0L);
        int int49 = instant39.compareTo((org.joda.time.ReadableInstant) instant48);
        org.joda.time.DateTimeFieldType dateTimeFieldType50 = null;
        boolean boolean51 = instant48.isSupported(dateTimeFieldType50);
        int int52 = dateTimeZone21.getOffset((org.joda.time.ReadableInstant) instant48);
        boolean boolean53 = instant17.isAfter((org.joda.time.ReadableInstant) instant48);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter54 = null;
        java.lang.String str55 = instant17.toString(dateTimeFormatter54);
        boolean boolean57 = instant17.isAfter(349200000L);
        org.joda.time.chrono.GJChronology gJChronology58 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone9, (org.joda.time.ReadableInstant) instant17);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and mutableDateTime15", (instant1.compareTo(mutableDateTime15) == 0) == instant1.equals(mutableDateTime15));
    }

    @Test
    public void test0305() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0305");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        boolean boolean2 = instant1.isEqualNow();
        org.joda.time.ReadableDuration readableDuration3 = null;
        org.joda.time.Instant instant4 = instant1.plus(readableDuration3);
        long long5 = instant1.getMillis();
        java.lang.String str6 = instant1.toString();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.getDefault();
        long long9 = dateTimeZone7.nextTransition(1000L);
        org.joda.time.DateTime dateTime10 = instant1.toDateTime(dateTimeZone7);
        java.util.TimeZone timeZone11 = null;
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forTimeZone(timeZone11);
        org.joda.time.chrono.GJChronology gJChronology13 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone12);
        long long17 = dateTimeZone12.convertLocalToUTC((long) (byte) -1, true, 0L);
        boolean boolean19 = dateTimeZone12.equals((java.lang.Object) true);
        org.joda.time.chrono.GJChronology gJChronology20 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone12);
        org.joda.time.DateTimeField dateTimeField21 = gJChronology20.weekyear();
        org.joda.time.DateTimeField dateTimeField22 = gJChronology20.era();
        org.joda.time.DateTimeField dateTimeField23 = gJChronology20.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        long long27 = gJChronology20.add(readablePeriod24, (-26438399999L), (int) (byte) 100);
        org.joda.time.DurationField durationField28 = gJChronology20.hours();
        org.joda.time.DateTimeField dateTimeField29 = gJChronology20.era();
        org.joda.time.MutableDateTime mutableDateTime30 = dateTime10.toMutableDateTime((org.joda.time.Chronology) gJChronology20);
        org.joda.time.DateTimeField dateTimeField31 = gJChronology20.secondOfMinute();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and dateTime10", (instant1.compareTo(dateTime10) == 0) == instant1.equals(dateTime10));
    }

    @Test
    public void test0306() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0306");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        boolean boolean2 = instant1.isEqualNow();
        java.lang.String str3 = instant1.toString();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.MutableDateTime mutableDateTime5 = instant1.toMutableDateTime(chronology4);
        org.joda.time.MutableDateTime mutableDateTime6 = instant1.toMutableDateTime();
        org.joda.time.Instant instant8 = instant1.plus(4320000001L);
        org.joda.time.Instant instant10 = instant1.plus((long) ' ');
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.Instant instant13 = instant10.withDurationAdded(readableDuration11, (-102228));
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and mutableDateTime5", (instant1.compareTo(mutableDateTime5) == 0) == instant1.equals(mutableDateTime5));
    }

    @Test
    public void test0307() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0307");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        boolean boolean2 = instant1.isEqualNow();
        boolean boolean4 = instant1.isEqual(0L);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = null;
        boolean boolean6 = instant1.isSupported(dateTimeFieldType5);
        org.joda.time.Instant instant9 = instant1.withDurationAdded((-61827926399999L), (int) (short) -1);
        org.joda.time.MutableDateTime mutableDateTime10 = instant9.toMutableDateTime();
        org.joda.time.Instant instant11 = instant9.toInstant();
        org.joda.time.ReadableInstant readableInstant12 = null;
        boolean boolean13 = instant9.isEqual(readableInstant12);
        java.util.TimeZone timeZone14 = null;
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forTimeZone(timeZone14);
        org.joda.time.chrono.GJChronology gJChronology16 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone15);
        long long20 = dateTimeZone15.convertLocalToUTC((long) (byte) -1, true, 0L);
        boolean boolean22 = dateTimeZone15.equals((java.lang.Object) true);
        java.util.Locale locale24 = java.util.Locale.getDefault();
        java.lang.String str25 = locale24.getDisplayLanguage();
        java.lang.String str26 = locale24.toLanguageTag();
        java.lang.String str27 = dateTimeZone15.getShortName(0L, locale24);
        java.util.TimeZone timeZone28 = null;
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forTimeZone(timeZone28);
        org.joda.time.chrono.GJChronology gJChronology30 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone29);
        org.joda.time.DateTimeField dateTimeField31 = gJChronology30.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField32 = gJChronology30.weekyearOfCentury();
        org.joda.time.Instant instant33 = gJChronology30.getGregorianCutover();
        org.joda.time.Instant instant35 = instant33.withMillis(0L);
        org.joda.time.chrono.GJChronology gJChronology37 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone15, (org.joda.time.ReadableInstant) instant33, 4);
        int int39 = dateTimeZone15.getOffsetFromLocal((long) 'a');
        boolean boolean40 = instant9.equals((java.lang.Object) int39);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime10 and instant9", (mutableDateTime10.compareTo(instant9) == 0) == mutableDateTime10.equals(instant9));
    }

    @Test
    public void test0308() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0308");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forTimeZone(timeZone2);
        org.joda.time.chrono.GJChronology gJChronology4 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone3);
        org.joda.time.DateTimeField dateTimeField5 = gJChronology4.millisOfSecond();
        int int6 = instant1.get(dateTimeField5);
        java.util.TimeZone timeZone7 = null;
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forTimeZone(timeZone7);
        org.joda.time.chrono.GJChronology gJChronology9 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone8);
        org.joda.time.DurationField durationField10 = gJChronology9.halfdays();
        java.util.TimeZone timeZone11 = null;
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forTimeZone(timeZone11);
        org.joda.time.chrono.GJChronology gJChronology13 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone12);
        long long17 = dateTimeZone12.convertLocalToUTC((long) (byte) -1, true, 0L);
        boolean boolean19 = dateTimeZone12.equals((java.lang.Object) true);
        org.joda.time.Chronology chronology20 = gJChronology9.withZone(dateTimeZone12);
        org.joda.time.MutableDateTime mutableDateTime21 = instant1.toMutableDateTime(dateTimeZone12);
        boolean boolean22 = mutableDateTime21.isAfterNow();
        java.util.TimeZone timeZone23 = null;
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forTimeZone(timeZone23);
        org.joda.time.chrono.GJChronology gJChronology25 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone24);
        org.joda.time.DurationField durationField26 = gJChronology25.halfdays();
        long long30 = gJChronology25.add((long) 'a', (-1L), (int) (short) 0);
        boolean boolean31 = mutableDateTime21.equals((java.lang.Object) gJChronology25);
        org.joda.time.Instant instant33 = new org.joda.time.Instant(52L);
        boolean boolean34 = instant33.isEqualNow();
        org.joda.time.ReadableDuration readableDuration35 = null;
        org.joda.time.Instant instant36 = instant33.plus(readableDuration35);
        long long37 = instant33.getMillis();
        java.lang.String str38 = instant33.toString();
        boolean boolean40 = instant33.isAfter((long) (-1));
        org.joda.time.Instant instant41 = instant33.toInstant();
        boolean boolean42 = mutableDateTime21.isEqual((org.joda.time.ReadableInstant) instant41);
        boolean boolean43 = instant41.isEqualNow();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and mutableDateTime21", (instant1.compareTo(mutableDateTime21) == 0) == instant1.equals(mutableDateTime21));
    }

    @Test
    public void test0309() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0309");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = gJChronology2.halfdays();
        long long7 = gJChronology2.add((long) 'a', (-1L), (int) (short) 0);
        org.joda.time.DateTimeField dateTimeField8 = gJChronology2.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField9 = gJChronology2.secondOfMinute();
        org.joda.time.Instant instant11 = new org.joda.time.Instant(52L);
        boolean boolean12 = instant11.isEqualNow();
        org.joda.time.ReadableDuration readableDuration13 = null;
        org.joda.time.Instant instant14 = instant11.plus(readableDuration13);
        boolean boolean15 = gJChronology2.equals((java.lang.Object) instant11);
        java.util.TimeZone timeZone16 = null;
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forTimeZone(timeZone16);
        org.joda.time.chrono.GJChronology gJChronology18 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone17);
        org.joda.time.DurationField durationField19 = gJChronology18.halfdays();
        org.joda.time.DateTimeField dateTimeField20 = gJChronology18.millisOfDay();
        org.joda.time.DateTimeField dateTimeField21 = gJChronology18.minuteOfDay();
        org.joda.time.DurationField durationField22 = gJChronology18.centuries();
        org.joda.time.DateTimeField dateTimeField23 = gJChronology18.dayOfYear();
        java.lang.String str24 = gJChronology18.toString();
        org.joda.time.DateTimeField dateTimeField25 = gJChronology18.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone26 = gJChronology18.getZone();
        org.joda.time.DateTime dateTime27 = instant11.toDateTime((org.joda.time.Chronology) gJChronology18);
        boolean boolean29 = dateTime27.isBefore(262974605200L);
        long long30 = dateTime27.getMillis();
        java.util.TimeZone timeZone31 = null;
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.forTimeZone(timeZone31);
        org.joda.time.chrono.GJChronology gJChronology33 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone32);
        org.joda.time.DateTimeField dateTimeField34 = gJChronology33.millisOfSecond();
        org.joda.time.DurationField durationField35 = gJChronology33.millis();
        org.joda.time.DateTimeZone dateTimeZone36 = gJChronology33.getZone();
        long long38 = dateTimeZone36.nextTransition(4320000000L);
        boolean boolean40 = dateTimeZone36.isStandardOffset(3155760001170L);
        java.util.TimeZone timeZone41 = null;
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.forTimeZone(timeZone41);
        org.joda.time.chrono.GJChronology gJChronology43 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone42);
        org.joda.time.DateTimeField dateTimeField44 = gJChronology43.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField45 = gJChronology43.weekyearOfCentury();
        org.joda.time.Instant instant46 = gJChronology43.getGregorianCutover();
        org.joda.time.Instant instant48 = instant46.withMillis(0L);
        org.joda.time.Instant instant50 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone51 = null;
        org.joda.time.DateTimeZone dateTimeZone52 = org.joda.time.DateTimeZone.forTimeZone(timeZone51);
        org.joda.time.chrono.GJChronology gJChronology53 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone52);
        org.joda.time.DateTimeField dateTimeField54 = gJChronology53.millisOfSecond();
        int int55 = instant50.get(dateTimeField54);
        org.joda.time.Instant instant57 = instant50.plus(0L);
        int int58 = instant48.compareTo((org.joda.time.ReadableInstant) instant57);
        java.util.TimeZone timeZone59 = null;
        org.joda.time.DateTimeZone dateTimeZone60 = org.joda.time.DateTimeZone.forTimeZone(timeZone59);
        org.joda.time.chrono.GJChronology gJChronology61 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone60);
        org.joda.time.DurationField durationField62 = gJChronology61.halfdays();
        org.joda.time.DateTimeField dateTimeField63 = gJChronology61.millisOfDay();
        org.joda.time.DateTimeField dateTimeField64 = gJChronology61.minuteOfDay();
        org.joda.time.DurationField durationField65 = gJChronology61.centuries();
        org.joda.time.DateTimeField dateTimeField66 = gJChronology61.halfdayOfDay();
        java.util.Locale locale67 = java.util.Locale.ITALIAN;
        java.util.Locale locale68 = locale67.stripExtensions();
        java.util.Locale locale69 = java.util.Locale.CANADA;
        java.lang.String str70 = locale67.getDisplayVariant(locale69);
        boolean boolean71 = gJChronology61.equals((java.lang.Object) locale69);
        org.joda.time.DateTime dateTime72 = instant48.toDateTime((org.joda.time.Chronology) gJChronology61);
        org.joda.time.chrono.GJChronology gJChronology73 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone36, (org.joda.time.ReadableInstant) dateTime72);
        int int74 = dateTime27.compareTo((org.joda.time.ReadableInstant) dateTime72);
        java.util.TimeZone timeZone75 = null;
        org.joda.time.DateTimeZone dateTimeZone76 = org.joda.time.DateTimeZone.forTimeZone(timeZone75);
        org.joda.time.chrono.GJChronology gJChronology77 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone76);
        org.joda.time.DurationField durationField78 = gJChronology77.halfdays();
        org.joda.time.DateTimeField dateTimeField79 = gJChronology77.millisOfDay();
        org.joda.time.DateTimeField dateTimeField80 = gJChronology77.minuteOfDay();
        org.joda.time.DurationField durationField81 = gJChronology77.centuries();
        org.joda.time.DateTimeField dateTimeField82 = gJChronology77.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField83 = gJChronology77.year();
        org.joda.time.DurationField durationField84 = gJChronology77.years();
        boolean boolean85 = dateTime72.equals((java.lang.Object) gJChronology77);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant11 and dateTime27", (instant11.compareTo(dateTime27) == 0) == instant11.equals(dateTime27));
    }

    @Test
    public void test0310() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0310");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField3 = gJChronology2.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.weekyearOfCentury();
        org.joda.time.Instant instant5 = gJChronology2.getGregorianCutover();
        org.joda.time.Instant instant7 = instant5.withMillis(0L);
        org.joda.time.Instant instant9 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone10 = null;
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forTimeZone(timeZone10);
        org.joda.time.chrono.GJChronology gJChronology12 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone11);
        org.joda.time.DateTimeField dateTimeField13 = gJChronology12.millisOfSecond();
        int int14 = instant9.get(dateTimeField13);
        org.joda.time.Instant instant16 = instant9.plus(0L);
        int int17 = instant7.compareTo((org.joda.time.ReadableInstant) instant16);
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = null;
        boolean boolean19 = instant16.isSupported(dateTimeFieldType18);
        org.joda.time.Instant instant21 = new org.joda.time.Instant(52L);
        boolean boolean22 = instant21.isEqualNow();
        org.joda.time.ReadableDuration readableDuration23 = null;
        org.joda.time.Instant instant24 = instant21.plus(readableDuration23);
        int int25 = instant16.compareTo((org.joda.time.ReadableInstant) instant21);
        org.joda.time.Instant instant27 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone28 = null;
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forTimeZone(timeZone28);
        org.joda.time.chrono.GJChronology gJChronology30 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone29);
        org.joda.time.DateTimeField dateTimeField31 = gJChronology30.millisOfSecond();
        int int32 = instant27.get(dateTimeField31);
        boolean boolean33 = instant27.isEqualNow();
        org.joda.time.ReadableDuration readableDuration34 = null;
        org.joda.time.Instant instant36 = instant27.withDurationAdded(readableDuration34, (int) (short) 0);
        org.joda.time.ReadableDuration readableDuration37 = null;
        org.joda.time.Instant instant38 = instant27.plus(readableDuration37);
        boolean boolean39 = instant16.isEqual((org.joda.time.ReadableInstant) instant38);
        org.joda.time.MutableDateTime mutableDateTime40 = instant38.toMutableDateTime();
        org.joda.time.Instant instant42 = instant38.minus(1L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant9 and mutableDateTime40", (instant9.compareTo(mutableDateTime40) == 0) == instant9.equals(mutableDateTime40));
    }

    @Test
    public void test0311() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0311");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        boolean boolean2 = instant1.isEqualNow();
        java.lang.String str3 = instant1.toString();
        java.util.TimeZone timeZone4 = null;
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forTimeZone(timeZone4);
        org.joda.time.chrono.GJChronology gJChronology6 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone5);
        java.util.Locale locale8 = new java.util.Locale("hi!");
        java.lang.String str9 = locale8.getCountry();
        java.util.Locale locale10 = java.util.Locale.getDefault();
        java.lang.String str11 = locale10.getDisplayName();
        java.lang.String str12 = locale8.getDisplayScript(locale10);
        boolean boolean13 = dateTimeZone5.equals((java.lang.Object) locale10);
        int int15 = dateTimeZone5.getOffsetFromLocal((long) (short) 10);
        java.util.TimeZone timeZone16 = null;
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forTimeZone(timeZone16);
        org.joda.time.chrono.GJChronology gJChronology18 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone17);
        org.joda.time.DateTimeField dateTimeField19 = gJChronology18.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField20 = gJChronology18.weekyearOfCentury();
        org.joda.time.Instant instant21 = gJChronology18.getGregorianCutover();
        org.joda.time.Instant instant23 = instant21.withMillis(0L);
        org.joda.time.Instant instant25 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone26 = null;
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forTimeZone(timeZone26);
        org.joda.time.chrono.GJChronology gJChronology28 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone27);
        org.joda.time.DateTimeField dateTimeField29 = gJChronology28.millisOfSecond();
        int int30 = instant25.get(dateTimeField29);
        org.joda.time.Instant instant32 = instant25.plus(0L);
        int int33 = instant23.compareTo((org.joda.time.ReadableInstant) instant32);
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = null;
        boolean boolean35 = instant32.isSupported(dateTimeFieldType34);
        int int36 = dateTimeZone5.getOffset((org.joda.time.ReadableInstant) instant32);
        boolean boolean37 = instant1.isAfter((org.joda.time.ReadableInstant) instant32);
        org.joda.time.ReadableDuration readableDuration38 = null;
        org.joda.time.Instant instant40 = instant1.withDurationAdded(readableDuration38, 1);
        boolean boolean41 = instant40.isEqualNow();
        org.joda.time.Instant instant43 = new org.joda.time.Instant(52L);
        boolean boolean44 = instant43.isEqualNow();
        java.lang.String str45 = instant43.toString();
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.MutableDateTime mutableDateTime47 = instant43.toMutableDateTime(chronology46);
        org.joda.time.Instant instant49 = new org.joda.time.Instant(52L);
        boolean boolean50 = instant49.isEqualNow();
        org.joda.time.Instant instant52 = new org.joda.time.Instant(52L);
        org.joda.time.Instant instant54 = instant52.withMillis((long) 'u');
        boolean boolean55 = instant49.isAfter((org.joda.time.ReadableInstant) instant52);
        boolean boolean56 = mutableDateTime47.isEqual((org.joda.time.ReadableInstant) instant52);
        int int57 = instant40.compareTo((org.joda.time.ReadableInstant) mutableDateTime47);
        java.util.TimeZone timeZone58 = null;
        org.joda.time.DateTimeZone dateTimeZone59 = org.joda.time.DateTimeZone.forTimeZone(timeZone58);
        org.joda.time.chrono.GJChronology gJChronology60 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone59);
        org.joda.time.DurationField durationField61 = gJChronology60.halfdays();
        long long65 = gJChronology60.add((long) 'a', (-1L), (int) (short) 0);
        boolean boolean67 = gJChronology60.equals((java.lang.Object) 0);
        org.joda.time.DateTimeField dateTimeField68 = gJChronology60.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField69 = gJChronology60.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField70 = gJChronology60.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField71 = gJChronology60.clockhourOfHalfday();
        java.util.TimeZone timeZone72 = null;
        org.joda.time.DateTimeZone dateTimeZone73 = org.joda.time.DateTimeZone.forTimeZone(timeZone72);
        org.joda.time.chrono.GJChronology gJChronology74 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone73);
        org.joda.time.DurationField durationField75 = gJChronology74.halfdays();
        long long79 = gJChronology74.add((long) 'a', (-1L), (int) (short) 0);
        boolean boolean81 = gJChronology74.equals((java.lang.Object) 0);
        org.joda.time.DateTimeField dateTimeField82 = gJChronology74.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField83 = gJChronology74.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField84 = gJChronology74.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField85 = gJChronology74.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField86 = gJChronology74.clockhourOfHalfday();
        boolean boolean87 = gJChronology60.equals((java.lang.Object) dateTimeField86);
        org.joda.time.DateTimeField dateTimeField88 = gJChronology60.weekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime89 = instant40.toMutableDateTime((org.joda.time.Chronology) gJChronology60);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant40 and mutableDateTime47", (instant40.compareTo(mutableDateTime47) == 0) == instant40.equals(mutableDateTime47));
    }

    @Test
    public void test0312() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0312");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forTimeZone(timeZone2);
        org.joda.time.chrono.GJChronology gJChronology4 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone3);
        org.joda.time.DateTimeField dateTimeField5 = gJChronology4.millisOfSecond();
        int int6 = instant1.get(dateTimeField5);
        org.joda.time.Instant instant8 = instant1.plus(0L);
        org.joda.time.Instant instant9 = instant8.toInstant();
        org.joda.time.Instant instant11 = new org.joda.time.Instant(52L);
        boolean boolean12 = instant11.isEqualNow();
        java.lang.String str13 = instant11.toString();
        java.lang.String str14 = instant11.toString();
        org.joda.time.Instant instant16 = new org.joda.time.Instant(52L);
        boolean boolean17 = instant16.isEqualNow();
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.Instant instant19 = instant16.plus(readableDuration18);
        boolean boolean20 = instant11.isBefore((org.joda.time.ReadableInstant) instant19);
        org.joda.time.Instant instant22 = instant11.minus((long) 0);
        int int23 = instant8.compareTo((org.joda.time.ReadableInstant) instant11);
        org.joda.time.Instant instant26 = instant11.withDurationAdded((long) (short) 100, 70);
        org.joda.time.MutableDateTime mutableDateTime27 = instant26.toMutableDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone28 = instant26.getZone();
        int int30 = dateTimeZone28.getStandardOffset(908843499590400000L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant26 and mutableDateTime27", (instant26.compareTo(mutableDateTime27) == 0) == instant26.equals(mutableDateTime27));
    }

    @Test
    public void test0313() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0313");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        boolean boolean2 = instant1.isEqualNow();
        org.joda.time.ReadableDuration readableDuration3 = null;
        org.joda.time.Instant instant4 = instant1.plus(readableDuration3);
        org.joda.time.Instant instant6 = new org.joda.time.Instant(52L);
        org.joda.time.Instant instant8 = instant6.withMillis((long) 'u');
        boolean boolean9 = instant1.isBefore((org.joda.time.ReadableInstant) instant6);
        org.joda.time.Instant instant10 = instant6.toInstant();
        org.joda.time.MutableDateTime mutableDateTime11 = instant10.toMutableDateTime();
        org.joda.time.Chronology chronology12 = instant10.getChronology();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and mutableDateTime11", (instant1.compareTo(mutableDateTime11) == 0) == instant1.equals(mutableDateTime11));
    }

    @Test
    public void test0314() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0314");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = gJChronology2.halfdays();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.millisOfDay();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.minuteOfDay();
        org.joda.time.DurationField durationField6 = gJChronology2.centuries();
        int int7 = gJChronology2.getMinimumDaysInFirstWeek();
        org.joda.time.DateTimeField dateTimeField8 = gJChronology2.weekyear();
        org.joda.time.DateTimeField dateTimeField9 = gJChronology2.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField10 = gJChronology2.millisOfSecond();
        org.joda.time.DurationField durationField11 = gJChronology2.eras();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField11, durationField3, and durationField6", !(durationField11.compareTo(durationField3) == 0) || (Math.signum(durationField11.compareTo(durationField6)) == Math.signum(durationField3.compareTo(durationField6))));
    }

    @Test
    public void test0315() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0315");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        org.joda.time.Instant instant3 = instant1.withMillis((long) 'u');
        java.util.TimeZone timeZone4 = null;
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forTimeZone(timeZone4);
        org.joda.time.chrono.GJChronology gJChronology6 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone5);
        org.joda.time.DurationField durationField7 = gJChronology6.halfdays();
        long long11 = gJChronology6.add((long) 'a', (-1L), (int) (short) 0);
        boolean boolean13 = gJChronology6.equals((java.lang.Object) 0);
        org.joda.time.DateTimeField dateTimeField14 = gJChronology6.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology6.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField16 = gJChronology6.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField17 = gJChronology6.clockhourOfHalfday();
        org.joda.time.DateTime dateTime18 = instant1.toDateTime((org.joda.time.Chronology) gJChronology6);
        java.util.TimeZone timeZone19 = null;
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forTimeZone(timeZone19);
        org.joda.time.chrono.GJChronology gJChronology21 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone20);
        org.joda.time.DurationField durationField22 = gJChronology21.halfdays();
        long long26 = gJChronology21.add((long) 'a', (-1L), (int) (short) 0);
        long long30 = gJChronology21.add((long) (byte) 0, (long) '4', 100);
        org.joda.time.DateTimeField dateTimeField31 = gJChronology21.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField32 = gJChronology21.year();
        org.joda.time.DateTimeField dateTimeField33 = gJChronology21.monthOfYear();
        org.joda.time.MutableDateTime mutableDateTime34 = instant1.toMutableDateTime((org.joda.time.Chronology) gJChronology21);
        boolean boolean36 = instant1.isAfter(4324200000L);
        java.util.TimeZone timeZone37 = null;
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forTimeZone(timeZone37);
        org.joda.time.chrono.GJChronology gJChronology39 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone38);
        org.joda.time.DateTimeField dateTimeField40 = gJChronology39.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField41 = gJChronology39.weekyear();
        org.joda.time.DurationField durationField42 = gJChronology39.centuries();
        org.joda.time.DateTimeField dateTimeField43 = gJChronology39.millisOfDay();
        org.joda.time.DateTimeField dateTimeField44 = gJChronology39.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField45 = gJChronology39.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField46 = gJChronology39.dayOfWeek();
        int int47 = instant1.get(dateTimeField46);
        org.joda.time.MutableDateTime mutableDateTime48 = instant1.toMutableDateTime();
        org.joda.time.DateTime dateTime49 = instant1.toDateTimeISO();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime18 and mutableDateTime48", (dateTime18.compareTo(mutableDateTime48) == 0) == dateTime18.equals(mutableDateTime48));
    }

    @Test
    public void test0316() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0316");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        boolean boolean2 = instant1.isEqualNow();
        org.joda.time.ReadableDuration readableDuration3 = null;
        org.joda.time.Instant instant4 = instant1.plus(readableDuration3);
        long long5 = instant1.getMillis();
        java.lang.String str6 = instant1.toString();
        org.joda.time.Instant instant7 = instant1.toInstant();
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.Instant instant10 = instant1.withDurationAdded(readableDuration8, (int) 'x');
        org.joda.time.Instant instant11 = instant1.toInstant();
        java.util.Date date12 = instant1.toDate();
        long long13 = instant1.getMillis();
        org.joda.time.ReadableDuration readableDuration14 = null;
        org.joda.time.Instant instant15 = instant1.minus(readableDuration14);
        java.util.TimeZone timeZone16 = null;
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forTimeZone(timeZone16);
        org.joda.time.chrono.GJChronology gJChronology18 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone17);
        org.joda.time.DurationField durationField19 = gJChronology18.halfdays();
        org.joda.time.Chronology chronology20 = gJChronology18.withUTC();
        java.lang.String str21 = gJChronology18.toString();
        org.joda.time.DateTimeField dateTimeField22 = gJChronology18.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(1, 10);
        org.joda.time.Chronology chronology26 = gJChronology18.withZone(dateTimeZone25);
        org.joda.time.DateTimeZone dateTimeZone27 = gJChronology18.getZone();
        org.joda.time.DateTime dateTime28 = instant1.toDateTime(dateTimeZone27);
        long long30 = dateTimeZone27.convertUTCToLocal(31556972000L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and dateTime28", (instant1.compareTo(dateTime28) == 0) == instant1.equals(dateTime28));
    }

    @Test
    public void test0317() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0317");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        boolean boolean2 = instant1.isEqualNow();
        org.joda.time.ReadableDuration readableDuration3 = null;
        org.joda.time.Instant instant4 = instant1.plus(readableDuration3);
        long long5 = instant1.getMillis();
        java.lang.String str6 = instant1.toString();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.getDefault();
        long long9 = dateTimeZone7.nextTransition(1000L);
        org.joda.time.DateTime dateTime10 = instant1.toDateTime(dateTimeZone7);
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = null;
        boolean boolean12 = dateTime10.isSupported(dateTimeFieldType11);
        org.joda.time.Instant instant14 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone15 = null;
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forTimeZone(timeZone15);
        org.joda.time.chrono.GJChronology gJChronology17 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone16);
        org.joda.time.DateTimeField dateTimeField18 = gJChronology17.millisOfSecond();
        int int19 = instant14.get(dateTimeField18);
        boolean boolean20 = instant14.isEqualNow();
        boolean boolean22 = instant14.isBefore(35L);
        org.joda.time.MutableDateTime mutableDateTime23 = instant14.toMutableDateTimeISO();
        long long24 = instant14.getMillis();
        int int25 = dateTime10.compareTo((org.joda.time.ReadableInstant) instant14);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and mutableDateTime23", (instant1.compareTo(mutableDateTime23) == 0) == instant1.equals(mutableDateTime23));
    }

    @Test
    public void test0318() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0318");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forTimeZone(timeZone2);
        org.joda.time.chrono.GJChronology gJChronology4 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone3);
        org.joda.time.DateTimeField dateTimeField5 = gJChronology4.millisOfSecond();
        int int6 = instant1.get(dateTimeField5);
        org.joda.time.Instant instant8 = instant1.plus(0L);
        java.util.TimeZone timeZone9 = null;
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forTimeZone(timeZone9);
        org.joda.time.chrono.GJChronology gJChronology11 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone10);
        org.joda.time.DurationField durationField12 = gJChronology11.halfdays();
        org.joda.time.Chronology chronology13 = gJChronology11.withUTC();
        java.lang.String str14 = gJChronology11.toString();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology11.hourOfHalfday();
        int int16 = instant1.get(dateTimeField15);
        org.joda.time.Instant instant18 = new org.joda.time.Instant(52L);
        boolean boolean19 = instant18.isEqualNow();
        org.joda.time.ReadableDuration readableDuration20 = null;
        org.joda.time.Instant instant21 = instant18.plus(readableDuration20);
        org.joda.time.Instant instant23 = new org.joda.time.Instant(52L);
        org.joda.time.Instant instant25 = instant23.withMillis((long) 'u');
        boolean boolean26 = instant18.isBefore((org.joda.time.ReadableInstant) instant23);
        boolean boolean27 = instant1.isEqual((org.joda.time.ReadableInstant) instant23);
        org.joda.time.ReadableDuration readableDuration28 = null;
        org.joda.time.Instant instant30 = instant1.withDurationAdded(readableDuration28, 0);
        java.util.TimeZone timeZone31 = null;
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.forTimeZone(timeZone31);
        org.joda.time.chrono.GJChronology gJChronology33 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone32);
        org.joda.time.DateTimeField dateTimeField34 = gJChronology33.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField35 = gJChronology33.weekyearOfCentury();
        org.joda.time.Instant instant36 = gJChronology33.getGregorianCutover();
        org.joda.time.Instant instant38 = instant36.withMillis(0L);
        org.joda.time.Instant instant40 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone41 = null;
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.forTimeZone(timeZone41);
        org.joda.time.chrono.GJChronology gJChronology43 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone42);
        org.joda.time.DateTimeField dateTimeField44 = gJChronology43.millisOfSecond();
        int int45 = instant40.get(dateTimeField44);
        org.joda.time.Instant instant47 = instant40.plus(0L);
        int int48 = instant38.compareTo((org.joda.time.ReadableInstant) instant47);
        org.joda.time.Instant instant50 = new org.joda.time.Instant(52L);
        boolean boolean51 = instant50.isEqualNow();
        org.joda.time.ReadableDuration readableDuration52 = null;
        org.joda.time.Instant instant53 = instant50.plus(readableDuration52);
        boolean boolean55 = instant53.equals((java.lang.Object) ' ');
        boolean boolean56 = instant47.isEqual((org.joda.time.ReadableInstant) instant53);
        org.joda.time.ReadableDuration readableDuration57 = null;
        org.joda.time.Instant instant59 = instant47.withDurationAdded(readableDuration57, 0);
        java.util.TimeZone timeZone60 = null;
        org.joda.time.DateTimeZone dateTimeZone61 = org.joda.time.DateTimeZone.forTimeZone(timeZone60);
        org.joda.time.chrono.GJChronology gJChronology62 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone61);
        org.joda.time.DateTimeField dateTimeField63 = gJChronology62.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField64 = gJChronology62.weekyearOfCentury();
        org.joda.time.Instant instant65 = gJChronology62.getGregorianCutover();
        org.joda.time.Instant instant67 = new org.joda.time.Instant(52L);
        boolean boolean68 = instant67.isEqualNow();
        java.lang.String str69 = instant67.toString();
        java.lang.String str70 = instant67.toString();
        org.joda.time.Instant instant72 = new org.joda.time.Instant(52L);
        boolean boolean73 = instant72.isEqualNow();
        org.joda.time.ReadableDuration readableDuration74 = null;
        org.joda.time.Instant instant75 = instant72.plus(readableDuration74);
        boolean boolean76 = instant67.isBefore((org.joda.time.ReadableInstant) instant75);
        org.joda.time.Instant instant78 = instant75.plus((long) (short) 100);
        org.joda.time.Chronology chronology79 = null;
        org.joda.time.MutableDateTime mutableDateTime80 = instant75.toMutableDateTime(chronology79);
        boolean boolean81 = instant65.isEqual((org.joda.time.ReadableInstant) mutableDateTime80);
        int int82 = instant47.compareTo((org.joda.time.ReadableInstant) mutableDateTime80);
        boolean boolean83 = instant1.isBefore((org.joda.time.ReadableInstant) instant47);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and mutableDateTime80", (instant1.compareTo(mutableDateTime80) == 0) == instant1.equals(mutableDateTime80));
    }

    @Test
    public void test0319() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0319");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        boolean boolean2 = instant1.isEqualNow();
        org.joda.time.ReadableDuration readableDuration3 = null;
        org.joda.time.Instant instant4 = instant1.plus(readableDuration3);
        long long5 = instant1.getMillis();
        java.lang.Object obj6 = null;
        boolean boolean7 = instant1.equals(obj6);
        org.joda.time.Instant instant9 = instant1.minus(3155695200000L);
        org.joda.time.MutableDateTime mutableDateTime10 = instant9.toMutableDateTime();
        org.joda.time.Instant instant12 = new org.joda.time.Instant(52L);
        boolean boolean13 = instant12.isEqualNow();
        org.joda.time.ReadableDuration readableDuration14 = null;
        org.joda.time.Instant instant15 = instant12.plus(readableDuration14);
        long long16 = instant12.getMillis();
        java.lang.String str17 = instant12.toString();
        org.joda.time.Instant instant18 = instant12.toInstant();
        org.joda.time.Instant instant20 = new org.joda.time.Instant(52L);
        boolean boolean21 = instant20.isEqualNow();
        org.joda.time.ReadableDuration readableDuration22 = null;
        org.joda.time.Instant instant23 = instant20.plus(readableDuration22);
        long long24 = instant20.getMillis();
        java.lang.String str25 = instant20.toString();
        org.joda.time.Instant instant26 = instant20.toInstant();
        org.joda.time.DateTime dateTime27 = instant20.toDateTime();
        boolean boolean28 = instant18.equals((java.lang.Object) dateTime27);
        int int29 = instant9.compareTo((org.joda.time.ReadableInstant) instant18);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and dateTime27", (instant1.compareTo(dateTime27) == 0) == instant1.equals(dateTime27));
    }

    @Test
    public void test0320() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0320");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = gJChronology2.halfdays();
        long long7 = gJChronology2.add((long) 'a', (-1L), (int) (short) 0);
        boolean boolean9 = gJChronology2.equals((java.lang.Object) 0);
        org.joda.time.DateTimeField dateTimeField10 = gJChronology2.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField11 = gJChronology2.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField12 = gJChronology2.clockhourOfDay();
        long long17 = gJChronology2.getDateTimeMillis(10, (int) (short) 10, 4, (int) (byte) 1);
        org.joda.time.DateTimeField dateTimeField18 = gJChronology2.millisOfDay();
        java.lang.String str19 = gJChronology2.toString();
        org.joda.time.DateTimeField dateTimeField20 = gJChronology2.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField21 = gJChronology2.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField22 = gJChronology2.halfdayOfDay();
        java.util.TimeZone timeZone23 = null;
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forTimeZone(timeZone23);
        org.joda.time.chrono.GJChronology gJChronology25 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone24);
        org.joda.time.DurationField durationField26 = gJChronology25.halfdays();
        long long30 = gJChronology25.add((long) 'a', (-1L), (int) (short) 0);
        long long34 = gJChronology25.add((long) (byte) 0, (long) '4', 100);
        org.joda.time.DurationField durationField35 = gJChronology25.years();
        org.joda.time.DateTimeField dateTimeField36 = gJChronology25.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone37 = gJChronology25.getZone();
        org.joda.time.Chronology chronology38 = gJChronology2.withZone(dateTimeZone37);
        org.joda.time.DurationField durationField39 = gJChronology2.days();
        org.joda.time.DurationField durationField40 = gJChronology2.years();
        org.joda.time.Chronology chronology41 = gJChronology2.withUTC();
        org.joda.time.ReadablePeriod readablePeriod42 = null;
        long long45 = gJChronology2.add(readablePeriod42, 126403200L, 432086114);
        org.joda.time.DurationField durationField46 = gJChronology2.eras();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField46, durationField3, and durationField35", !(durationField46.compareTo(durationField3) == 0) || (Math.signum(durationField46.compareTo(durationField35)) == Math.signum(durationField3.compareTo(durationField35))));
    }

    @Test
    public void test0321() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0321");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        boolean boolean2 = instant1.isEqualNow();
        java.lang.String str3 = instant1.toString();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.MutableDateTime mutableDateTime5 = instant1.toMutableDateTime(chronology4);
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.Instant instant7 = instant1.minus(readableDuration6);
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.Instant instant10 = instant7.withDurationAdded(readableDuration8, (-1916));
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant10 and mutableDateTime5", (instant10.compareTo(mutableDateTime5) == 0) == instant10.equals(mutableDateTime5));
    }

    @Test
    public void test0322() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0322");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = gJChronology2.halfdays();
        long long7 = gJChronology2.add((long) 'a', (-1L), (int) (short) 0);
        boolean boolean9 = gJChronology2.equals((java.lang.Object) 0);
        org.joda.time.DateTimeField dateTimeField10 = gJChronology2.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField11 = gJChronology2.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField12 = gJChronology2.clockhourOfDay();
        long long17 = gJChronology2.getDateTimeMillis(10, (int) (short) 10, 4, (int) (byte) 1);
        org.joda.time.DateTimeField dateTimeField18 = gJChronology2.millisOfDay();
        java.lang.String str19 = gJChronology2.toString();
        org.joda.time.DateTimeField dateTimeField20 = gJChronology2.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField21 = gJChronology2.yearOfCentury();
        org.joda.time.DurationField durationField22 = gJChronology2.eras();
        org.joda.time.DateTimeField dateTimeField23 = gJChronology2.weekyear();
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField3 and durationField22", Math.signum(durationField3.compareTo(durationField22)) == -Math.signum(durationField22.compareTo(durationField3)));
    }

    @Test
    public void test0323() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0323");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        boolean boolean2 = instant1.isEqualNow();
        org.joda.time.ReadableDuration readableDuration3 = null;
        org.joda.time.Instant instant4 = instant1.plus(readableDuration3);
        org.joda.time.Instant instant6 = new org.joda.time.Instant(52L);
        org.joda.time.Instant instant8 = instant6.withMillis((long) 'u');
        boolean boolean9 = instant1.isBefore((org.joda.time.ReadableInstant) instant6);
        org.joda.time.ReadableInstant readableInstant10 = null;
        boolean boolean11 = instant1.isEqual(readableInstant10);
        org.joda.time.Instant instant13 = new org.joda.time.Instant(52L);
        org.joda.time.Instant instant15 = instant13.withMillis((long) 'u');
        java.util.TimeZone timeZone16 = null;
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forTimeZone(timeZone16);
        org.joda.time.chrono.GJChronology gJChronology18 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone17);
        org.joda.time.DurationField durationField19 = gJChronology18.halfdays();
        long long23 = gJChronology18.add((long) 'a', (-1L), (int) (short) 0);
        boolean boolean25 = gJChronology18.equals((java.lang.Object) 0);
        org.joda.time.DateTimeField dateTimeField26 = gJChronology18.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField27 = gJChronology18.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField28 = gJChronology18.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField29 = gJChronology18.clockhourOfHalfday();
        org.joda.time.DateTime dateTime30 = instant13.toDateTime((org.joda.time.Chronology) gJChronology18);
        java.lang.String str31 = dateTime30.toString();
        org.joda.time.Chronology chronology32 = dateTime30.getChronology();
        java.util.TimeZone timeZone33 = null;
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.forTimeZone(timeZone33);
        org.joda.time.chrono.GJChronology gJChronology35 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone34);
        long long39 = dateTimeZone34.convertLocalToUTC((long) (byte) -1, true, 0L);
        boolean boolean41 = dateTimeZone34.equals((java.lang.Object) true);
        java.util.Locale locale43 = java.util.Locale.getDefault();
        java.lang.String str44 = locale43.getDisplayLanguage();
        java.lang.String str45 = locale43.toLanguageTag();
        java.lang.String str46 = dateTimeZone34.getShortName(0L, locale43);
        java.util.TimeZone timeZone47 = null;
        org.joda.time.DateTimeZone dateTimeZone48 = org.joda.time.DateTimeZone.forTimeZone(timeZone47);
        org.joda.time.chrono.GJChronology gJChronology49 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone48);
        org.joda.time.DateTimeField dateTimeField50 = gJChronology49.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField51 = gJChronology49.weekyearOfCentury();
        org.joda.time.Instant instant52 = gJChronology49.getGregorianCutover();
        org.joda.time.Instant instant54 = instant52.withMillis(0L);
        org.joda.time.chrono.GJChronology gJChronology56 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone34, (org.joda.time.ReadableInstant) instant52, 4);
        org.joda.time.Instant instant58 = instant52.minus((-2208729599948L));
        java.util.Date date59 = instant58.toDate();
        boolean boolean60 = dateTime30.isAfter((org.joda.time.ReadableInstant) instant58);
        boolean boolean61 = instant1.isBefore((org.joda.time.ReadableInstant) instant58);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and dateTime30", (instant1.compareTo(dateTime30) == 0) == instant1.equals(dateTime30));
    }

    @Test
    public void test0324() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0324");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        boolean boolean2 = instant1.isEqualNow();
        org.joda.time.ReadableDuration readableDuration3 = null;
        org.joda.time.Instant instant4 = instant1.plus(readableDuration3);
        long long5 = instant1.getMillis();
        java.lang.String str6 = instant1.toString();
        org.joda.time.Instant instant7 = instant1.toInstant();
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.Instant instant10 = instant1.withDurationAdded(readableDuration8, (int) 'x');
        org.joda.time.DateTimeZone dateTimeZone11 = instant1.getZone();
        java.util.TimeZone timeZone12 = null;
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forTimeZone(timeZone12);
        org.joda.time.chrono.GJChronology gJChronology14 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone13);
        org.joda.time.DateTimeField dateTimeField15 = gJChronology14.millisOfSecond();
        org.joda.time.DurationField durationField16 = gJChronology14.millis();
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        long long20 = gJChronology14.add(readablePeriod17, (long) 'a', (int) '4');
        org.joda.time.DateTimeField dateTimeField21 = gJChronology14.clockhourOfDay();
        org.joda.time.MutableDateTime mutableDateTime22 = instant1.toMutableDateTime((org.joda.time.Chronology) gJChronology14);
        org.joda.time.DateTimeZone dateTimeZone23 = instant1.getZone();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and mutableDateTime22", (instant1.compareTo(mutableDateTime22) == 0) == instant1.equals(mutableDateTime22));
    }

    @Test
    public void test0325() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0325");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = gJChronology2.halfdays();
        long long7 = gJChronology2.add((long) 'a', (-1L), (int) (short) 0);
        org.joda.time.DateTimeField dateTimeField8 = gJChronology2.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField9 = gJChronology2.centuryOfEra();
        long long13 = gJChronology2.add(262974600000L, (long) (byte) 100, (int) '4');
        org.joda.time.DurationField durationField14 = gJChronology2.months();
        org.joda.time.DurationField durationField15 = gJChronology2.years();
        java.util.TimeZone timeZone16 = null;
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forTimeZone(timeZone16);
        org.joda.time.chrono.GJChronology gJChronology18 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone17);
        org.joda.time.DurationField durationField19 = gJChronology18.halfdays();
        org.joda.time.DateTimeField dateTimeField20 = gJChronology18.millisOfDay();
        org.joda.time.DateTimeField dateTimeField21 = gJChronology18.minuteOfDay();
        org.joda.time.DurationField durationField22 = gJChronology18.centuries();
        org.joda.time.DateTimeField dateTimeField23 = gJChronology18.dayOfYear();
        java.lang.String str24 = gJChronology18.toString();
        org.joda.time.DateTimeField dateTimeField25 = gJChronology18.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone26 = gJChronology18.getZone();
        java.util.TimeZone timeZone27 = null;
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forTimeZone(timeZone27);
        org.joda.time.chrono.GJChronology gJChronology29 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone28);
        java.util.Locale locale31 = new java.util.Locale("hi!");
        java.lang.String str32 = locale31.getCountry();
        java.util.Locale locale33 = java.util.Locale.getDefault();
        java.lang.String str34 = locale33.getDisplayName();
        java.lang.String str35 = locale31.getDisplayScript(locale33);
        boolean boolean36 = dateTimeZone28.equals((java.lang.Object) locale33);
        org.joda.time.Chronology chronology37 = gJChronology18.withZone(dateTimeZone28);
        java.lang.String str38 = gJChronology18.toString();
        java.util.TimeZone timeZone39 = null;
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.forTimeZone(timeZone39);
        org.joda.time.chrono.GJChronology gJChronology41 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone40);
        org.joda.time.DurationField durationField42 = gJChronology41.halfdays();
        org.joda.time.DateTimeField dateTimeField43 = gJChronology41.millisOfDay();
        org.joda.time.DateTimeField dateTimeField44 = gJChronology41.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField45 = gJChronology41.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone46 = gJChronology41.getZone();
        boolean boolean48 = dateTimeZone46.isStandardOffset((long) '#');
        org.joda.time.Chronology chronology49 = gJChronology18.withZone(dateTimeZone46);
        org.joda.time.Chronology chronology50 = gJChronology2.withZone(dateTimeZone46);
        org.joda.time.DurationField durationField51 = gJChronology2.eras();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField51, durationField3, and durationField14", !(durationField51.compareTo(durationField3) == 0) || (Math.signum(durationField51.compareTo(durationField14)) == Math.signum(durationField3.compareTo(durationField14))));
    }

    @Test
    public void test0326() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0326");
        org.joda.time.Instant instant0 = org.joda.time.Instant.now();
        java.util.TimeZone timeZone1 = null;
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forTimeZone(timeZone1);
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone2);
        org.joda.time.DurationField durationField4 = gJChronology3.halfdays();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology3.millisOfDay();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology3.halfdayOfDay();
        int int7 = instant0.get(dateTimeField6);
        java.util.TimeZone timeZone8 = null;
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forTimeZone(timeZone8);
        org.joda.time.chrono.GJChronology gJChronology10 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone9);
        long long14 = dateTimeZone9.convertLocalToUTC((long) (byte) -1, true, 0L);
        boolean boolean16 = dateTimeZone9.equals((java.lang.Object) true);
        org.joda.time.chrono.GJChronology gJChronology17 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone9);
        org.joda.time.DateTimeField dateTimeField18 = gJChronology17.weekyear();
        org.joda.time.DateTimeField dateTimeField19 = gJChronology17.clockhourOfHalfday();
        org.joda.time.MutableDateTime mutableDateTime20 = instant0.toMutableDateTime((org.joda.time.Chronology) gJChronology17);
        org.joda.time.DateTimeField dateTimeField21 = gJChronology17.weekOfWeekyear();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant0 and mutableDateTime20", (instant0.compareTo(mutableDateTime20) == 0) == instant0.equals(mutableDateTime20));
    }

    @Test
    public void test0327() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0327");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forTimeZone(timeZone2);
        org.joda.time.chrono.GJChronology gJChronology4 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone3);
        org.joda.time.DateTimeField dateTimeField5 = gJChronology4.millisOfSecond();
        int int6 = instant1.get(dateTimeField5);
        org.joda.time.Instant instant8 = instant1.plus(0L);
        java.util.TimeZone timeZone9 = null;
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forTimeZone(timeZone9);
        org.joda.time.chrono.GJChronology gJChronology11 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone10);
        org.joda.time.DurationField durationField12 = gJChronology11.halfdays();
        org.joda.time.Chronology chronology13 = gJChronology11.withUTC();
        java.lang.String str14 = gJChronology11.toString();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology11.hourOfHalfday();
        int int16 = instant1.get(dateTimeField15);
        org.joda.time.Instant instant18 = new org.joda.time.Instant(52L);
        boolean boolean19 = instant18.isEqualNow();
        java.lang.String str20 = instant18.toString();
        org.joda.time.Instant instant22 = new org.joda.time.Instant(52L);
        boolean boolean23 = instant22.isEqualNow();
        java.lang.String str24 = instant22.toString();
        java.lang.String str25 = instant22.toString();
        org.joda.time.Instant instant28 = instant22.withDurationAdded(115200000L, (int) (short) 1);
        int int29 = instant18.compareTo((org.joda.time.ReadableInstant) instant22);
        org.joda.time.Instant instant31 = new org.joda.time.Instant(52L);
        boolean boolean32 = instant31.isEqualNow();
        org.joda.time.ReadableDuration readableDuration33 = null;
        org.joda.time.Instant instant34 = instant31.plus(readableDuration33);
        boolean boolean36 = instant34.equals((java.lang.Object) ' ');
        boolean boolean37 = instant22.isAfter((org.joda.time.ReadableInstant) instant34);
        int int38 = instant1.compareTo((org.joda.time.ReadableInstant) instant22);
        org.joda.time.Instant instant40 = new org.joda.time.Instant(52L);
        boolean boolean41 = instant40.isEqualNow();
        java.lang.String str42 = instant40.toString();
        java.lang.String str43 = instant40.toString();
        org.joda.time.Instant instant46 = instant40.withDurationAdded(115200000L, (int) (short) 1);
        java.util.TimeZone timeZone47 = null;
        org.joda.time.DateTimeZone dateTimeZone48 = org.joda.time.DateTimeZone.forTimeZone(timeZone47);
        java.lang.String str50 = dateTimeZone48.getNameKey((long) 100);
        boolean boolean51 = dateTimeZone48.isFixed();
        org.joda.time.DateTime dateTime52 = instant40.toDateTime(dateTimeZone48);
        boolean boolean54 = instant40.isAfter(0L);
        java.util.TimeZone timeZone55 = null;
        org.joda.time.DateTimeZone dateTimeZone56 = org.joda.time.DateTimeZone.forTimeZone(timeZone55);
        org.joda.time.chrono.GJChronology gJChronology57 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone56);
        org.joda.time.DateTimeField dateTimeField58 = gJChronology57.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField59 = gJChronology57.weekyear();
        org.joda.time.DurationField durationField60 = gJChronology57.centuries();
        org.joda.time.DateTimeField dateTimeField61 = gJChronology57.halfdayOfDay();
        org.joda.time.DurationField durationField62 = gJChronology57.minutes();
        org.joda.time.DateTimeField dateTimeField63 = gJChronology57.yearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone66 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) -1, 52);
        org.joda.time.Chronology chronology67 = gJChronology57.withZone(dateTimeZone66);
        java.lang.String str68 = dateTimeZone66.getID();
        org.joda.time.DateTime dateTime69 = instant40.toDateTime(dateTimeZone66);
        org.joda.time.MutableDateTime mutableDateTime70 = instant1.toMutableDateTime(dateTimeZone66);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and dateTime69", (instant1.compareTo(dateTime69) == 0) == instant1.equals(dateTime69));
    }

    @Test
    public void test0328() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0328");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = gJChronology2.halfdays();
        long long7 = gJChronology2.add((long) 'a', (-1L), (int) (short) 0);
        long long11 = gJChronology2.add((long) (byte) 0, (long) '4', 100);
        org.joda.time.DateTimeField dateTimeField12 = gJChronology2.minuteOfHour();
        org.joda.time.DurationField durationField13 = gJChronology2.hours();
        org.joda.time.DateTimeField dateTimeField14 = gJChronology2.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology2.millisOfSecond();
        org.joda.time.DurationField durationField16 = gJChronology2.months();
        org.joda.time.DurationField durationField17 = gJChronology2.hours();
        org.joda.time.DateTimeField dateTimeField18 = gJChronology2.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField19 = gJChronology2.hourOfHalfday();
        org.joda.time.DurationField durationField20 = gJChronology2.years();
        org.joda.time.Chronology chronology21 = gJChronology2.withUTC();
        org.joda.time.DurationField durationField22 = gJChronology2.eras();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField22, durationField3, and durationField13", !(durationField22.compareTo(durationField3) == 0) || (Math.signum(durationField22.compareTo(durationField13)) == Math.signum(durationField3.compareTo(durationField13))));
    }

    @Test
    public void test0329() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0329");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField3 = gJChronology2.era();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.weekyear();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.dayOfYear();
        java.util.TimeZone timeZone6 = null;
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forTimeZone(timeZone6);
        org.joda.time.chrono.GJChronology gJChronology8 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone7);
        org.joda.time.DurationField durationField9 = gJChronology8.halfdays();
        long long13 = gJChronology8.add((long) 'a', (-1L), (int) (short) 0);
        boolean boolean15 = gJChronology8.equals((java.lang.Object) 0);
        org.joda.time.DateTimeField dateTimeField16 = gJChronology8.dayOfMonth();
        org.joda.time.DurationField durationField17 = gJChronology8.days();
        java.util.TimeZone timeZone18 = null;
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forTimeZone(timeZone18);
        org.joda.time.chrono.GJChronology gJChronology20 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone19);
        org.joda.time.DurationField durationField21 = gJChronology20.halfdays();
        java.util.TimeZone timeZone22 = null;
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        org.joda.time.chrono.GJChronology gJChronology24 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone23);
        long long28 = dateTimeZone23.convertLocalToUTC((long) (byte) -1, true, 0L);
        boolean boolean30 = dateTimeZone23.equals((java.lang.Object) true);
        org.joda.time.Chronology chronology31 = gJChronology20.withZone(dateTimeZone23);
        org.joda.time.LocalDateTime localDateTime32 = null;
        boolean boolean33 = dateTimeZone23.isLocalDateTimeGap(localDateTime32);
        boolean boolean34 = dateTimeZone23.isFixed();
        org.joda.time.Chronology chronology35 = gJChronology8.withZone(dateTimeZone23);
        org.joda.time.Chronology chronology36 = gJChronology2.withZone(dateTimeZone23);
        org.joda.time.DurationField durationField37 = chronology36.eras();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField37, durationField9, and durationField17", !(durationField37.compareTo(durationField9) == 0) || (Math.signum(durationField37.compareTo(durationField17)) == Math.signum(durationField9.compareTo(durationField17))));
    }

    @Test
    public void test0330() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0330");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField3 = gJChronology2.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.weekyearOfCentury();
        org.joda.time.Instant instant5 = gJChronology2.getGregorianCutover();
        org.joda.time.Instant instant7 = instant5.withMillis(0L);
        org.joda.time.Instant instant9 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone10 = null;
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forTimeZone(timeZone10);
        org.joda.time.chrono.GJChronology gJChronology12 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone11);
        org.joda.time.DateTimeField dateTimeField13 = gJChronology12.millisOfSecond();
        int int14 = instant9.get(dateTimeField13);
        org.joda.time.Instant instant16 = instant9.plus(0L);
        int int17 = instant7.compareTo((org.joda.time.ReadableInstant) instant16);
        java.util.TimeZone timeZone18 = null;
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forTimeZone(timeZone18);
        org.joda.time.chrono.GJChronology gJChronology20 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone19);
        org.joda.time.DurationField durationField21 = gJChronology20.halfdays();
        org.joda.time.DateTimeField dateTimeField22 = gJChronology20.millisOfDay();
        org.joda.time.DateTimeField dateTimeField23 = gJChronology20.minuteOfDay();
        org.joda.time.DurationField durationField24 = gJChronology20.centuries();
        org.joda.time.DateTimeField dateTimeField25 = gJChronology20.halfdayOfDay();
        java.util.Locale locale26 = java.util.Locale.ITALIAN;
        java.util.Locale locale27 = locale26.stripExtensions();
        java.util.Locale locale28 = java.util.Locale.CANADA;
        java.lang.String str29 = locale26.getDisplayVariant(locale28);
        boolean boolean30 = gJChronology20.equals((java.lang.Object) locale28);
        org.joda.time.DateTime dateTime31 = instant7.toDateTime((org.joda.time.Chronology) gJChronology20);
        java.util.TimeZone timeZone32 = null;
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.forTimeZone(timeZone32);
        org.joda.time.chrono.GJChronology gJChronology34 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone33);
        org.joda.time.DurationField durationField35 = gJChronology34.halfdays();
        org.joda.time.DateTimeField dateTimeField36 = gJChronology34.millisOfDay();
        org.joda.time.DateTimeField dateTimeField37 = gJChronology34.minuteOfDay();
        org.joda.time.DurationField durationField38 = gJChronology34.centuries();
        org.joda.time.DateTimeField dateTimeField39 = gJChronology34.dayOfYear();
        java.lang.String str40 = gJChronology34.toString();
        org.joda.time.DateTimeField dateTimeField41 = gJChronology34.dayOfYear();
        org.joda.time.DateTimeField dateTimeField42 = gJChronology34.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField43 = gJChronology34.clockhourOfDay();
        org.joda.time.DurationField durationField44 = gJChronology34.months();
        org.joda.time.MutableDateTime mutableDateTime45 = dateTime31.toMutableDateTime((org.joda.time.Chronology) gJChronology34);
        java.util.TimeZone timeZone46 = null;
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.forTimeZone(timeZone46);
        org.joda.time.chrono.GJChronology gJChronology48 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone47);
        org.joda.time.DurationField durationField49 = gJChronology48.halfdays();
        java.util.TimeZone timeZone50 = null;
        org.joda.time.DateTimeZone dateTimeZone51 = org.joda.time.DateTimeZone.forTimeZone(timeZone50);
        org.joda.time.chrono.GJChronology gJChronology52 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone51);
        long long56 = dateTimeZone51.convertLocalToUTC((long) (byte) -1, true, 0L);
        boolean boolean58 = dateTimeZone51.equals((java.lang.Object) true);
        org.joda.time.Chronology chronology59 = gJChronology48.withZone(dateTimeZone51);
        org.joda.time.LocalDateTime localDateTime60 = null;
        boolean boolean61 = dateTimeZone51.isLocalDateTimeGap(localDateTime60);
        boolean boolean62 = dateTimeZone51.isFixed();
        org.joda.time.Instant instant64 = new org.joda.time.Instant(52L);
        boolean boolean65 = instant64.isEqualNow();
        org.joda.time.ReadableDuration readableDuration66 = null;
        org.joda.time.Instant instant67 = instant64.plus(readableDuration66);
        org.joda.time.Instant instant69 = instant64.withMillis((long) 4);
        boolean boolean70 = instant69.isBeforeNow();
        boolean boolean72 = instant69.isBefore(5185792L);
        org.joda.time.MutableDateTime mutableDateTime73 = instant69.toMutableDateTime();
        int int74 = dateTimeZone51.getOffset((org.joda.time.ReadableInstant) mutableDateTime73);
        boolean boolean75 = dateTime31.isBefore((org.joda.time.ReadableInstant) mutableDateTime73);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant7 and mutableDateTime45", (instant7.compareTo(mutableDateTime45) == 0) == instant7.equals(mutableDateTime45));
    }

    @Test
    public void test0331() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0331");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField3 = gJChronology2.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.weekyearOfCentury();
        org.joda.time.Instant instant5 = gJChronology2.getGregorianCutover();
        org.joda.time.Instant instant7 = instant5.withMillis(0L);
        java.util.TimeZone timeZone8 = null;
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forTimeZone(timeZone8);
        org.joda.time.chrono.GJChronology gJChronology10 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone9);
        org.joda.time.DateTimeField dateTimeField11 = gJChronology10.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField12 = gJChronology10.weekyear();
        org.joda.time.DateTimeField dateTimeField13 = gJChronology10.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField14 = gJChronology10.weekyearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime15 = instant7.toMutableDateTime((org.joda.time.Chronology) gJChronology10);
        org.joda.time.Instant instant17 = instant7.withMillis(111000000L);
        org.joda.time.Instant instant19 = instant17.plus((long) 236785);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant7 and mutableDateTime15", (instant7.compareTo(mutableDateTime15) == 0) == instant7.equals(mutableDateTime15));
    }

    @Test
    public void test0332() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0332");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField3 = gJChronology2.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.weekyearOfCentury();
        org.joda.time.Instant instant5 = gJChronology2.getGregorianCutover();
        org.joda.time.Instant instant7 = instant5.withMillis(0L);
        org.joda.time.Instant instant9 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone10 = null;
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forTimeZone(timeZone10);
        org.joda.time.chrono.GJChronology gJChronology12 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone11);
        org.joda.time.DateTimeField dateTimeField13 = gJChronology12.millisOfSecond();
        int int14 = instant9.get(dateTimeField13);
        org.joda.time.Instant instant16 = instant9.plus(0L);
        int int17 = instant7.compareTo((org.joda.time.ReadableInstant) instant16);
        org.joda.time.Instant instant19 = new org.joda.time.Instant(52L);
        boolean boolean20 = instant19.isEqualNow();
        org.joda.time.ReadableDuration readableDuration21 = null;
        org.joda.time.Instant instant22 = instant19.plus(readableDuration21);
        boolean boolean24 = instant22.equals((java.lang.Object) ' ');
        boolean boolean25 = instant16.isEqual((org.joda.time.ReadableInstant) instant22);
        java.lang.String str26 = instant16.toString();
        org.joda.time.Instant instant27 = instant16.toInstant();
        org.joda.time.Instant instant29 = instant27.plus((long) 4200000);
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(1, 10);
        java.util.TimeZone timeZone33 = null;
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.forTimeZone(timeZone33);
        long long36 = dateTimeZone32.getMillisKeepLocal(dateTimeZone34, 4320000000L);
        org.joda.time.Instant instant38 = new org.joda.time.Instant(52L);
        boolean boolean39 = instant38.isEqualNow();
        org.joda.time.ReadableDuration readableDuration40 = null;
        org.joda.time.Instant instant41 = instant38.plus(readableDuration40);
        long long42 = instant38.getMillis();
        java.lang.String str43 = instant38.toString();
        org.joda.time.Instant instant44 = instant38.toInstant();
        org.joda.time.ReadableDuration readableDuration45 = null;
        org.joda.time.Instant instant47 = instant38.withDurationAdded(readableDuration45, (int) 'x');
        org.joda.time.Instant instant48 = instant38.toInstant();
        int int49 = dateTimeZone32.getOffset((org.joda.time.ReadableInstant) instant38);
        org.joda.time.Instant instant51 = new org.joda.time.Instant(52L);
        boolean boolean52 = instant51.isEqualNow();
        org.joda.time.ReadableDuration readableDuration53 = null;
        org.joda.time.Instant instant54 = instant51.plus(readableDuration53);
        long long55 = instant51.getMillis();
        java.lang.String str56 = instant51.toString();
        boolean boolean58 = instant51.isAfter((long) (-1));
        java.lang.Object obj59 = null;
        boolean boolean60 = instant51.equals(obj59);
        org.joda.time.ReadableDuration readableDuration61 = null;
        org.joda.time.Instant instant62 = instant51.minus(readableDuration61);
        org.joda.time.chrono.GJChronology gJChronology63 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone32, (org.joda.time.ReadableInstant) instant51);
        int int65 = dateTimeZone32.getStandardOffset(60480000000L);
        org.joda.time.Instant instant67 = new org.joda.time.Instant(4000L);
        java.util.TimeZone timeZone68 = null;
        org.joda.time.DateTimeZone dateTimeZone69 = org.joda.time.DateTimeZone.forTimeZone(timeZone68);
        org.joda.time.chrono.GJChronology gJChronology70 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone69);
        org.joda.time.DateTimeField dateTimeField71 = gJChronology70.era();
        org.joda.time.DateTimeField dateTimeField72 = gJChronology70.year();
        org.joda.time.DateTime dateTime73 = instant67.toDateTime((org.joda.time.Chronology) gJChronology70);
        int int74 = dateTimeZone32.getOffset((org.joda.time.ReadableInstant) instant67);
        org.joda.time.MutableDateTime mutableDateTime75 = instant29.toMutableDateTime(dateTimeZone32);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant67 and dateTime73", (instant67.compareTo(dateTime73) == 0) == instant67.equals(dateTime73));
    }

    @Test
    public void test0333() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0333");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField3 = gJChronology2.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.weekyearOfCentury();
        org.joda.time.Instant instant5 = gJChronology2.getGregorianCutover();
        org.joda.time.Instant instant7 = instant5.withMillis(0L);
        java.util.TimeZone timeZone8 = null;
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forTimeZone(timeZone8);
        org.joda.time.chrono.GJChronology gJChronology10 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone9);
        org.joda.time.DateTimeField dateTimeField11 = gJChronology10.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField12 = gJChronology10.weekyear();
        org.joda.time.DateTimeField dateTimeField13 = gJChronology10.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField14 = gJChronology10.weekyearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime15 = instant7.toMutableDateTime((org.joda.time.Chronology) gJChronology10);
        long long19 = gJChronology10.add((-599850999L), (long) 1959, (-25));
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant7 and mutableDateTime15", (instant7.compareTo(mutableDateTime15) == 0) == instant7.equals(mutableDateTime15));
    }

    @Test
    public void test0334() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0334");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = gJChronology2.halfdays();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.millisOfDay();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.monthOfYear();
        org.joda.time.Chronology chronology6 = gJChronology2.withUTC();
        org.joda.time.Instant instant7 = gJChronology2.getGregorianCutover();
        org.joda.time.Instant instant9 = new org.joda.time.Instant(52L);
        boolean boolean10 = instant9.isEqualNow();
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.Instant instant12 = instant9.plus(readableDuration11);
        long long13 = instant9.getMillis();
        java.lang.String str14 = instant9.toString();
        org.joda.time.Instant instant15 = instant9.toInstant();
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.MutableDateTime mutableDateTime17 = instant9.toMutableDateTime(dateTimeZone16);
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        org.joda.time.MutableDateTime mutableDateTime20 = mutableDateTime17.toMutableDateTime(dateTimeZone19);
        boolean boolean21 = instant7.isAfter((org.joda.time.ReadableInstant) mutableDateTime17);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant9 and mutableDateTime20", (instant9.compareTo(mutableDateTime20) == 0) == instant9.equals(mutableDateTime20));
    }

    @Test
    public void test0335() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0335");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        boolean boolean2 = instant1.isEqualNow();
        org.joda.time.ReadableDuration readableDuration3 = null;
        org.joda.time.Instant instant4 = instant1.plus(readableDuration3);
        long long5 = instant1.getMillis();
        java.lang.String str6 = instant1.toString();
        org.joda.time.Instant instant7 = instant1.toInstant();
        boolean boolean9 = instant1.isBefore((long) 'x');
        java.util.TimeZone timeZone10 = null;
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forTimeZone(timeZone10);
        org.joda.time.chrono.GJChronology gJChronology12 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone11);
        org.joda.time.DurationField durationField13 = gJChronology12.halfdays();
        long long17 = gJChronology12.add((long) 'a', (-1L), (int) (short) 0);
        boolean boolean19 = gJChronology12.equals((java.lang.Object) 0);
        org.joda.time.DateTimeField dateTimeField20 = gJChronology12.dayOfMonth();
        org.joda.time.DurationField durationField21 = gJChronology12.seconds();
        org.joda.time.DateTime dateTime22 = instant1.toDateTime((org.joda.time.Chronology) gJChronology12);
        org.joda.time.Instant instant25 = instant1.withDurationAdded((-820800000L), 236785);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and dateTime22", (instant1.compareTo(dateTime22) == 0) == instant1.equals(dateTime22));
    }

    @Test
    public void test0336() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0336");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forTimeZone(timeZone2);
        org.joda.time.chrono.GJChronology gJChronology4 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone3);
        org.joda.time.DateTimeField dateTimeField5 = gJChronology4.millisOfSecond();
        int int6 = instant1.get(dateTimeField5);
        boolean boolean7 = instant1.isEqualNow();
        org.joda.time.DateTime dateTime8 = instant1.toDateTime();
        java.util.TimeZone timeZone9 = null;
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forTimeZone(timeZone9);
        org.joda.time.chrono.GJChronology gJChronology11 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone10);
        org.joda.time.DurationField durationField12 = gJChronology11.halfdays();
        org.joda.time.DateTimeField dateTimeField13 = gJChronology11.millisOfDay();
        org.joda.time.DateTimeField dateTimeField14 = gJChronology11.minuteOfDay();
        org.joda.time.DurationField durationField15 = gJChronology11.centuries();
        org.joda.time.DateTimeField dateTimeField16 = gJChronology11.dayOfYear();
        java.lang.String str17 = gJChronology11.toString();
        org.joda.time.DurationField durationField18 = gJChronology11.years();
        org.joda.time.MutableDateTime mutableDateTime19 = dateTime8.toMutableDateTime((org.joda.time.Chronology) gJChronology11);
        java.lang.String str20 = dateTime8.toString();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and mutableDateTime19", (instant1.compareTo(mutableDateTime19) == 0) == instant1.equals(mutableDateTime19));
    }

    @Test
    public void test0337() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0337");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forTimeZone(timeZone2);
        org.joda.time.chrono.GJChronology gJChronology4 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone3);
        org.joda.time.DateTimeField dateTimeField5 = gJChronology4.millisOfSecond();
        int int6 = instant1.get(dateTimeField5);
        boolean boolean7 = instant1.isEqualNow();
        org.joda.time.DateTime dateTime8 = instant1.toDateTime();
        java.util.TimeZone timeZone9 = null;
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forTimeZone(timeZone9);
        org.joda.time.chrono.GJChronology gJChronology11 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone10);
        org.joda.time.DurationField durationField12 = gJChronology11.halfdays();
        org.joda.time.DateTimeField dateTimeField13 = gJChronology11.millisOfDay();
        org.joda.time.DateTimeField dateTimeField14 = gJChronology11.minuteOfDay();
        org.joda.time.DurationField durationField15 = gJChronology11.centuries();
        org.joda.time.DateTimeField dateTimeField16 = gJChronology11.dayOfYear();
        java.lang.String str17 = gJChronology11.toString();
        org.joda.time.DurationField durationField18 = gJChronology11.years();
        org.joda.time.MutableDateTime mutableDateTime19 = dateTime8.toMutableDateTime((org.joda.time.Chronology) gJChronology11);
        java.util.TimeZone timeZone20 = null;
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forTimeZone(timeZone20);
        org.joda.time.chrono.GJChronology gJChronology22 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone21);
        org.joda.time.DateTimeField dateTimeField23 = gJChronology22.millisOfSecond();
        org.joda.time.DurationField durationField24 = gJChronology22.millis();
        org.joda.time.DurationField durationField25 = gJChronology22.weeks();
        long long29 = gJChronology22.add(43201764L, 262974600000L, (int) (short) 100);
        org.joda.time.DateTimeField dateTimeField30 = gJChronology22.secondOfMinute();
        org.joda.time.DurationField durationField31 = gJChronology22.weeks();
        org.joda.time.DateTime dateTime32 = dateTime8.toDateTime((org.joda.time.Chronology) gJChronology22);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and mutableDateTime19", (instant1.compareTo(mutableDateTime19) == 0) == instant1.equals(mutableDateTime19));
    }

    @Test
    public void test0338() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0338");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis((int) '4');
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        java.util.TimeZone timeZone3 = dateTimeZone1.toTimeZone();
        java.util.TimeZone timeZone4 = dateTimeZone1.toTimeZone();
        org.joda.time.Instant instant5 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime6 = instant5.toMutableDateTime();
        org.joda.time.DateTimeZone dateTimeZone7 = mutableDateTime6.getZone();
        long long9 = dateTimeZone1.getMillisKeepLocal(dateTimeZone7, 4200000L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant5 and mutableDateTime6", (instant5.compareTo(mutableDateTime6) == 0) == instant5.equals(mutableDateTime6));
    }

    @Test
    public void test0339() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0339");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        boolean boolean2 = instant1.isEqualNow();
        java.lang.String str3 = instant1.toString();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.MutableDateTime mutableDateTime5 = instant1.toMutableDateTime(chronology4);
        org.joda.time.MutableDateTime mutableDateTime6 = instant1.toMutableDateTime();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(1, 10);
        org.joda.time.LocalDateTime localDateTime10 = null;
        boolean boolean11 = dateTimeZone9.isLocalDateTimeGap(localDateTime10);
        boolean boolean12 = dateTimeZone9.isFixed();
        java.util.Locale.Category category14 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale15 = java.util.Locale.CANADA;
        java.lang.String str16 = locale15.getISO3Language();
        java.util.Locale.setDefault(category14, locale15);
        java.util.Locale locale20 = new java.util.Locale("cinese (Taiwan)", "DurationField[weekyears]");
        java.util.Set<java.lang.String> strSet21 = locale20.getUnicodeLocaleAttributes();
        java.lang.String str22 = locale15.getDisplayLanguage(locale20);
        java.lang.String str23 = dateTimeZone9.getShortName((long) 10, locale15);
        org.joda.time.MutableDateTime mutableDateTime24 = instant1.toMutableDateTime(dateTimeZone9);
        boolean boolean25 = mutableDateTime24.isAfterNow();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and mutableDateTime5", (instant1.compareTo(mutableDateTime5) == 0) == instant1.equals(mutableDateTime5));
    }

    @Test
    public void test0340() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0340");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(1, 10);
        java.util.TimeZone timeZone3 = null;
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forTimeZone(timeZone3);
        long long6 = dateTimeZone2.getMillisKeepLocal(dateTimeZone4, 4320000000L);
        org.joda.time.Instant instant8 = new org.joda.time.Instant(52L);
        boolean boolean9 = instant8.isEqualNow();
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.Instant instant11 = instant8.plus(readableDuration10);
        long long12 = instant8.getMillis();
        java.lang.String str13 = instant8.toString();
        org.joda.time.Instant instant14 = instant8.toInstant();
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.Instant instant17 = instant8.withDurationAdded(readableDuration15, (int) 'x');
        org.joda.time.Instant instant18 = instant8.toInstant();
        int int19 = dateTimeZone2.getOffset((org.joda.time.ReadableInstant) instant8);
        org.joda.time.Instant instant21 = new org.joda.time.Instant(52L);
        boolean boolean22 = instant21.isEqualNow();
        org.joda.time.ReadableDuration readableDuration23 = null;
        org.joda.time.Instant instant24 = instant21.plus(readableDuration23);
        long long25 = instant21.getMillis();
        java.lang.String str26 = instant21.toString();
        boolean boolean28 = instant21.isAfter((long) (-1));
        java.lang.Object obj29 = null;
        boolean boolean30 = instant21.equals(obj29);
        org.joda.time.ReadableDuration readableDuration31 = null;
        org.joda.time.Instant instant32 = instant21.minus(readableDuration31);
        org.joda.time.chrono.GJChronology gJChronology33 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone2, (org.joda.time.ReadableInstant) instant21);
        int int35 = dateTimeZone2.getStandardOffset(60480000000L);
        org.joda.time.Instant instant37 = new org.joda.time.Instant(4000L);
        java.util.TimeZone timeZone38 = null;
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.forTimeZone(timeZone38);
        org.joda.time.chrono.GJChronology gJChronology40 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone39);
        org.joda.time.DateTimeField dateTimeField41 = gJChronology40.era();
        org.joda.time.DateTimeField dateTimeField42 = gJChronology40.year();
        org.joda.time.DateTime dateTime43 = instant37.toDateTime((org.joda.time.Chronology) gJChronology40);
        int int44 = dateTimeZone2.getOffset((org.joda.time.ReadableInstant) instant37);
        java.util.TimeZone timeZone45 = null;
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.forTimeZone(timeZone45);
        org.joda.time.chrono.GJChronology gJChronology47 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone46);
        org.joda.time.DurationField durationField48 = gJChronology47.halfdays();
        org.joda.time.DateTimeField dateTimeField49 = gJChronology47.millisOfDay();
        org.joda.time.DateTimeField dateTimeField50 = gJChronology47.minuteOfDay();
        org.joda.time.DurationField durationField51 = gJChronology47.centuries();
        org.joda.time.DateTimeField dateTimeField52 = gJChronology47.dayOfYear();
        java.lang.String str53 = gJChronology47.toString();
        org.joda.time.DateTimeField dateTimeField54 = gJChronology47.dayOfYear();
        org.joda.time.Instant instant56 = new org.joda.time.Instant(52L);
        boolean boolean57 = instant56.isEqualNow();
        org.joda.time.ReadableDuration readableDuration58 = null;
        org.joda.time.Instant instant59 = instant56.plus(readableDuration58);
        long long60 = instant56.getMillis();
        java.lang.String str61 = instant56.toString();
        org.joda.time.Instant instant62 = instant56.toInstant();
        org.joda.time.ReadableDuration readableDuration63 = null;
        org.joda.time.Instant instant65 = instant56.withDurationAdded(readableDuration63, (int) 'x');
        org.joda.time.DateTimeZone dateTimeZone66 = instant56.getZone();
        java.util.TimeZone timeZone67 = null;
        org.joda.time.DateTimeZone dateTimeZone68 = org.joda.time.DateTimeZone.forTimeZone(timeZone67);
        org.joda.time.chrono.GJChronology gJChronology69 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone68);
        org.joda.time.DurationField durationField70 = gJChronology69.halfdays();
        org.joda.time.DateTimeField dateTimeField71 = gJChronology69.millisOfDay();
        org.joda.time.DateTimeField dateTimeField72 = gJChronology69.minuteOfDay();
        org.joda.time.DurationField durationField73 = gJChronology69.centuries();
        org.joda.time.DateTimeField dateTimeField74 = gJChronology69.dayOfYear();
        java.lang.String str75 = gJChronology69.toString();
        org.joda.time.DateTimeField dateTimeField76 = gJChronology69.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone77 = gJChronology69.getZone();
        org.joda.time.chrono.GJChronology gJChronology78 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone77);
        long long80 = dateTimeZone77.nextTransition(1L);
        long long82 = dateTimeZone66.getMillisKeepLocal(dateTimeZone77, (long) (byte) 1);
        org.joda.time.Chronology chronology83 = gJChronology47.withZone(dateTimeZone66);
        long long85 = dateTimeZone2.getMillisKeepLocal(dateTimeZone66, 221529816561600000L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant37 and dateTime43", (instant37.compareTo(dateTime43) == 0) == instant37.equals(dateTime43));
    }

    @Test
    public void test0341() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0341");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        boolean boolean2 = instant1.isEqualNow();
        java.lang.String str3 = instant1.toString();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.MutableDateTime mutableDateTime5 = instant1.toMutableDateTime(chronology4);
        org.joda.time.Instant instant7 = new org.joda.time.Instant(52L);
        boolean boolean8 = instant7.isEqualNow();
        org.joda.time.Instant instant10 = new org.joda.time.Instant(52L);
        org.joda.time.Instant instant12 = instant10.withMillis((long) 'u');
        boolean boolean13 = instant7.isAfter((org.joda.time.ReadableInstant) instant10);
        boolean boolean14 = mutableDateTime5.isEqual((org.joda.time.ReadableInstant) instant10);
        java.util.TimeZone timeZone15 = null;
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forTimeZone(timeZone15);
        org.joda.time.chrono.GJChronology gJChronology17 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone16);
        org.joda.time.DurationField durationField18 = gJChronology17.halfdays();
        org.joda.time.DateTimeField dateTimeField19 = gJChronology17.millisOfDay();
        org.joda.time.DateTimeField dateTimeField20 = gJChronology17.minuteOfDay();
        org.joda.time.DurationField durationField21 = gJChronology17.centuries();
        org.joda.time.DateTimeField dateTimeField22 = gJChronology17.dayOfYear();
        java.lang.String str23 = gJChronology17.toString();
        org.joda.time.DurationField durationField24 = gJChronology17.halfdays();
        org.joda.time.DateTimeField dateTimeField25 = gJChronology17.clockhourOfHalfday();
        org.joda.time.DateTime dateTime26 = mutableDateTime5.toDateTime((org.joda.time.Chronology) gJChronology17);
        org.joda.time.DurationField durationField27 = gJChronology17.centuries();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and dateTime26", (instant1.compareTo(dateTime26) == 0) == instant1.equals(dateTime26));
    }

    @Test
    public void test0342() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0342");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = gJChronology2.halfdays();
        long long7 = gJChronology2.add((long) 'a', (-1L), (int) (short) 0);
        boolean boolean9 = gJChronology2.equals((java.lang.Object) 0);
        org.joda.time.DateTimeField dateTimeField10 = gJChronology2.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField11 = gJChronology2.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField12 = gJChronology2.clockhourOfDay();
        long long17 = gJChronology2.getDateTimeMillis(10, (int) (short) 10, 4, (int) (byte) 1);
        org.joda.time.DateTimeField dateTimeField18 = gJChronology2.millisOfDay();
        java.lang.String str19 = gJChronology2.toString();
        org.joda.time.DateTimeField dateTimeField20 = gJChronology2.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField21 = gJChronology2.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField22 = gJChronology2.halfdayOfDay();
        java.util.TimeZone timeZone23 = null;
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forTimeZone(timeZone23);
        org.joda.time.chrono.GJChronology gJChronology25 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone24);
        org.joda.time.DurationField durationField26 = gJChronology25.halfdays();
        long long30 = gJChronology25.add((long) 'a', (-1L), (int) (short) 0);
        long long34 = gJChronology25.add((long) (byte) 0, (long) '4', 100);
        org.joda.time.DurationField durationField35 = gJChronology25.years();
        org.joda.time.DateTimeField dateTimeField36 = gJChronology25.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone37 = gJChronology25.getZone();
        org.joda.time.Chronology chronology38 = gJChronology2.withZone(dateTimeZone37);
        org.joda.time.DurationField durationField39 = gJChronology2.days();
        org.joda.time.DurationField durationField40 = gJChronology2.years();
        org.joda.time.DateTimeZone dateTimeZone41 = gJChronology2.getZone();
        boolean boolean43 = dateTimeZone41.isStandardOffset(1136050274678400000L);
        long long47 = dateTimeZone41.convertLocalToUTC((long) (-1916), true, 111000052L);
        java.lang.String str49 = dateTimeZone41.getNameKey((-599850999L));
        java.util.TimeZone timeZone50 = null;
        org.joda.time.DateTimeZone dateTimeZone51 = org.joda.time.DateTimeZone.forTimeZone(timeZone50);
        org.joda.time.chrono.GJChronology gJChronology52 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone51);
        org.joda.time.DurationField durationField53 = gJChronology52.years();
        java.util.TimeZone timeZone54 = null;
        org.joda.time.DateTimeZone dateTimeZone55 = org.joda.time.DateTimeZone.forTimeZone(timeZone54);
        org.joda.time.chrono.GJChronology gJChronology56 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone55);
        org.joda.time.DurationField durationField57 = gJChronology56.halfdays();
        org.joda.time.DateTimeField dateTimeField58 = gJChronology56.millisOfDay();
        org.joda.time.DateTimeField dateTimeField59 = gJChronology56.minuteOfDay();
        org.joda.time.DurationField durationField60 = gJChronology56.centuries();
        java.util.TimeZone timeZone61 = null;
        org.joda.time.DateTimeZone dateTimeZone62 = org.joda.time.DateTimeZone.forTimeZone(timeZone61);
        org.joda.time.chrono.GJChronology gJChronology63 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone62);
        org.joda.time.DurationField durationField64 = gJChronology63.halfdays();
        long long67 = durationField64.add((long) 100, 100L);
        boolean boolean68 = durationField64.isPrecise();
        int int69 = durationField60.compareTo(durationField64);
        boolean boolean70 = gJChronology52.equals((java.lang.Object) durationField60);
        org.joda.time.DateTimeField dateTimeField71 = gJChronology52.dayOfYear();
        org.joda.time.DateTimeField dateTimeField72 = gJChronology52.era();
        org.joda.time.DateTimeZone dateTimeZone73 = gJChronology52.getZone();
        org.joda.time.Instant instant74 = gJChronology52.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration75 = null;
        org.joda.time.Instant instant76 = instant74.plus(readableDuration75);
        org.joda.time.Instant instant77 = org.joda.time.Instant.now();
        java.util.TimeZone timeZone78 = null;
        org.joda.time.DateTimeZone dateTimeZone79 = org.joda.time.DateTimeZone.forTimeZone(timeZone78);
        org.joda.time.chrono.GJChronology gJChronology80 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone79);
        org.joda.time.DurationField durationField81 = gJChronology80.halfdays();
        org.joda.time.DateTimeField dateTimeField82 = gJChronology80.millisOfDay();
        org.joda.time.DateTimeField dateTimeField83 = gJChronology80.halfdayOfDay();
        int int84 = instant77.get(dateTimeField83);
        java.util.TimeZone timeZone85 = null;
        org.joda.time.DateTimeZone dateTimeZone86 = org.joda.time.DateTimeZone.forTimeZone(timeZone85);
        org.joda.time.chrono.GJChronology gJChronology87 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone86);
        long long91 = dateTimeZone86.convertLocalToUTC((long) (byte) -1, true, 0L);
        boolean boolean93 = dateTimeZone86.equals((java.lang.Object) true);
        org.joda.time.chrono.GJChronology gJChronology94 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone86);
        org.joda.time.DateTimeField dateTimeField95 = gJChronology94.weekyear();
        org.joda.time.DateTimeField dateTimeField96 = gJChronology94.clockhourOfHalfday();
        org.joda.time.MutableDateTime mutableDateTime97 = instant77.toMutableDateTime((org.joda.time.Chronology) gJChronology94);
        boolean boolean98 = instant74.isAfter((org.joda.time.ReadableInstant) instant77);
        int int99 = dateTimeZone41.getOffset((org.joda.time.ReadableInstant) instant74);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant77 and mutableDateTime97", (instant77.compareTo(mutableDateTime97) == 0) == instant77.equals(mutableDateTime97));
    }

    @Test
    public void test0343() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0343");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        org.joda.time.Instant instant3 = instant1.withMillis((long) 'u');
        java.util.TimeZone timeZone4 = null;
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forTimeZone(timeZone4);
        org.joda.time.chrono.GJChronology gJChronology6 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone5);
        org.joda.time.DurationField durationField7 = gJChronology6.halfdays();
        long long11 = gJChronology6.add((long) 'a', (-1L), (int) (short) 0);
        boolean boolean13 = gJChronology6.equals((java.lang.Object) 0);
        org.joda.time.DateTimeField dateTimeField14 = gJChronology6.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology6.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField16 = gJChronology6.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField17 = gJChronology6.clockhourOfHalfday();
        org.joda.time.DateTime dateTime18 = instant1.toDateTime((org.joda.time.Chronology) gJChronology6);
        java.util.TimeZone timeZone19 = null;
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forTimeZone(timeZone19);
        org.joda.time.chrono.GJChronology gJChronology21 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone20);
        org.joda.time.DurationField durationField22 = gJChronology21.halfdays();
        long long26 = gJChronology21.add((long) 'a', (-1L), (int) (short) 0);
        long long30 = gJChronology21.add((long) (byte) 0, (long) '4', 100);
        org.joda.time.DateTimeField dateTimeField31 = gJChronology21.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField32 = gJChronology21.year();
        org.joda.time.DateTimeField dateTimeField33 = gJChronology21.monthOfYear();
        org.joda.time.MutableDateTime mutableDateTime34 = instant1.toMutableDateTime((org.joda.time.Chronology) gJChronology21);
        boolean boolean36 = instant1.isAfter(4324200000L);
        org.joda.time.Instant instant38 = instant1.minus(3692163384000L);
        java.util.TimeZone timeZone39 = null;
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.forTimeZone(timeZone39);
        int int42 = dateTimeZone40.getOffsetFromLocal((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(0, (int) (short) 10);
        long long47 = dateTimeZone40.getMillisKeepLocal(dateTimeZone45, (-61827926399999L));
        boolean boolean48 = dateTimeZone40.isFixed();
        java.lang.String str50 = dateTimeZone40.getNameKey(10412712236785L);
        boolean boolean51 = instant38.equals((java.lang.Object) str50);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and dateTime18", (instant1.compareTo(dateTime18) == 0) == instant1.equals(dateTime18));
    }

    @Test
    public void test0344() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0344");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forTimeZone(timeZone2);
        org.joda.time.chrono.GJChronology gJChronology4 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone3);
        org.joda.time.DateTimeField dateTimeField5 = gJChronology4.millisOfSecond();
        int int6 = instant1.get(dateTimeField5);
        boolean boolean7 = instant1.isEqualNow();
        org.joda.time.DateTime dateTime8 = instant1.toDateTime();
        java.util.TimeZone timeZone9 = null;
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forTimeZone(timeZone9);
        org.joda.time.chrono.GJChronology gJChronology11 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone10);
        org.joda.time.DurationField durationField12 = gJChronology11.halfdays();
        org.joda.time.DateTimeField dateTimeField13 = gJChronology11.millisOfDay();
        org.joda.time.DateTimeField dateTimeField14 = gJChronology11.minuteOfDay();
        org.joda.time.DurationField durationField15 = gJChronology11.centuries();
        org.joda.time.DateTimeField dateTimeField16 = gJChronology11.dayOfYear();
        java.lang.String str17 = gJChronology11.toString();
        org.joda.time.DurationField durationField18 = gJChronology11.years();
        org.joda.time.MutableDateTime mutableDateTime19 = dateTime8.toMutableDateTime((org.joda.time.Chronology) gJChronology11);
        java.util.Date date20 = dateTime8.toDate();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and mutableDateTime19", (instant1.compareTo(mutableDateTime19) == 0) == instant1.equals(mutableDateTime19));
    }

    @Test
    public void test0345() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0345");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forTimeZone(timeZone2);
        org.joda.time.chrono.GJChronology gJChronology4 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone3);
        org.joda.time.DateTimeField dateTimeField5 = gJChronology4.millisOfSecond();
        int int6 = instant1.get(dateTimeField5);
        org.joda.time.Instant instant8 = instant1.plus(0L);
        java.util.TimeZone timeZone9 = null;
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forTimeZone(timeZone9);
        org.joda.time.chrono.GJChronology gJChronology11 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone10);
        org.joda.time.DurationField durationField12 = gJChronology11.halfdays();
        org.joda.time.Chronology chronology13 = gJChronology11.withUTC();
        java.lang.String str14 = gJChronology11.toString();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology11.hourOfHalfday();
        int int16 = instant1.get(dateTimeField15);
        org.joda.time.Instant instant18 = new org.joda.time.Instant(52L);
        boolean boolean19 = instant18.isEqualNow();
        org.joda.time.ReadableDuration readableDuration20 = null;
        org.joda.time.Instant instant21 = instant18.plus(readableDuration20);
        org.joda.time.Instant instant23 = new org.joda.time.Instant(52L);
        org.joda.time.Instant instant25 = instant23.withMillis((long) 'u');
        boolean boolean26 = instant18.isBefore((org.joda.time.ReadableInstant) instant23);
        boolean boolean27 = instant1.isEqual((org.joda.time.ReadableInstant) instant23);
        org.joda.time.Instant instant29 = instant1.plus(3732480000000000L);
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forID("+00:00:00.052");
        org.joda.time.DateTime dateTime32 = instant1.toDateTime(dateTimeZone31);
        java.util.TimeZone timeZone33 = null;
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.forTimeZone(timeZone33);
        org.joda.time.chrono.GJChronology gJChronology35 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone34);
        org.joda.time.DurationField durationField36 = gJChronology35.halfdays();
        long long40 = gJChronology35.add((long) 'a', (-1L), (int) (short) 0);
        long long44 = gJChronology35.add((long) (byte) 0, (long) '4', 100);
        org.joda.time.DurationField durationField45 = gJChronology35.years();
        org.joda.time.Instant instant46 = gJChronology35.getGregorianCutover();
        org.joda.time.Instant instant47 = instant46.toInstant();
        int int48 = dateTimeZone31.getOffset((org.joda.time.ReadableInstant) instant47);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and dateTime32", (instant1.compareTo(dateTime32) == 0) == instant1.equals(dateTime32));
    }

    @Test
    public void test0346() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0346");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = gJChronology2.halfdays();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.millisOfDay();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology2.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone7 = gJChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField8 = gJChronology2.millisOfSecond();
        org.joda.time.DurationField durationField9 = gJChronology2.eras();
        org.joda.time.DateTimeField dateTimeField10 = gJChronology2.halfdayOfDay();
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField3 and durationField9", Math.signum(durationField3.compareTo(durationField9)) == -Math.signum(durationField9.compareTo(durationField3)));
    }

    @Test
    public void test0347() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0347");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        boolean boolean2 = instant1.isEqualNow();
        org.joda.time.ReadableDuration readableDuration3 = null;
        org.joda.time.Instant instant4 = instant1.plus(readableDuration3);
        org.joda.time.Instant instant6 = new org.joda.time.Instant(52L);
        org.joda.time.Instant instant8 = instant6.withMillis((long) 'u');
        boolean boolean9 = instant1.isBefore((org.joda.time.ReadableInstant) instant6);
        org.joda.time.DateTimeZone dateTimeZone10 = instant6.getZone();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetMillis((int) '4');
        java.util.TimeZone timeZone13 = dateTimeZone12.toTimeZone();
        long long16 = dateTimeZone12.adjustOffset((long) 0, false);
        int int18 = dateTimeZone12.getOffsetFromLocal((-26438399999L));
        java.util.TimeZone timeZone19 = dateTimeZone12.toTimeZone();
        java.lang.String str20 = dateTimeZone12.getID();
        org.joda.time.DateTime dateTime21 = instant6.toDateTime(dateTimeZone12);
        long long25 = dateTimeZone12.convertLocalToUTC(230523534360000000L, true, (long) 'a');
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and dateTime21", (instant1.compareTo(dateTime21) == 0) == instant1.equals(dateTime21));
    }

    @Test
    public void test0348() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0348");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = gJChronology2.halfdays();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.millisOfDay();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.minuteOfDay();
        org.joda.time.DurationField durationField6 = gJChronology2.centuries();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology2.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField8 = gJChronology2.secondOfDay();
        org.joda.time.DurationField durationField9 = gJChronology2.eras();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField9, durationField3, and durationField6", !(durationField9.compareTo(durationField3) == 0) || (Math.signum(durationField9.compareTo(durationField6)) == Math.signum(durationField3.compareTo(durationField6))));
    }

    @Test
    public void test0349() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0349");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = gJChronology2.halfdays();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.millisOfDay();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.minuteOfDay();
        org.joda.time.DurationField durationField6 = gJChronology2.centuries();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology2.dayOfYear();
        java.lang.String str8 = gJChronology2.toString();
        org.joda.time.DateTimeField dateTimeField9 = gJChronology2.dayOfYear();
        org.joda.time.DateTimeField dateTimeField10 = gJChronology2.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField11 = gJChronology2.dayOfWeek();
        org.joda.time.DurationField durationField12 = gJChronology2.centuries();
        org.joda.time.DurationFieldType durationFieldType13 = durationField12.getType();
        java.util.TimeZone timeZone14 = null;
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forTimeZone(timeZone14);
        org.joda.time.chrono.GJChronology gJChronology16 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone15);
        org.joda.time.DurationField durationField17 = gJChronology16.halfdays();
        long long21 = gJChronology16.add((long) 'a', (-1L), (int) (short) 0);
        boolean boolean23 = gJChronology16.equals((java.lang.Object) 0);
        org.joda.time.DateTimeField dateTimeField24 = gJChronology16.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField25 = gJChronology16.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField26 = gJChronology16.clockhourOfDay();
        long long31 = gJChronology16.getDateTimeMillis(10, (int) (short) 10, 4, (int) (byte) 1);
        org.joda.time.Chronology chronology32 = gJChronology16.withUTC();
        org.joda.time.DurationField durationField33 = gJChronology16.eras();
        int int34 = durationField12.compareTo(durationField33);
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField33, durationField3, and durationField12", !(durationField33.compareTo(durationField3) == 0) || (Math.signum(durationField33.compareTo(durationField12)) == Math.signum(durationField3.compareTo(durationField12))));
    }

    @Test
    public void test0350() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0350");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField3 = gJChronology2.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.weekyearOfCentury();
        org.joda.time.Instant instant5 = gJChronology2.getGregorianCutover();
        org.joda.time.Instant instant7 = instant5.withMillis(0L);
        org.joda.time.Instant instant9 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone10 = null;
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forTimeZone(timeZone10);
        org.joda.time.chrono.GJChronology gJChronology12 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone11);
        org.joda.time.DateTimeField dateTimeField13 = gJChronology12.millisOfSecond();
        int int14 = instant9.get(dateTimeField13);
        org.joda.time.Instant instant16 = instant9.plus(0L);
        int int17 = instant7.compareTo((org.joda.time.ReadableInstant) instant16);
        java.util.TimeZone timeZone18 = null;
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forTimeZone(timeZone18);
        org.joda.time.chrono.GJChronology gJChronology20 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone19);
        org.joda.time.DurationField durationField21 = gJChronology20.halfdays();
        org.joda.time.DateTimeField dateTimeField22 = gJChronology20.millisOfDay();
        org.joda.time.DateTimeField dateTimeField23 = gJChronology20.minuteOfDay();
        org.joda.time.DurationField durationField24 = gJChronology20.centuries();
        org.joda.time.DateTimeField dateTimeField25 = gJChronology20.halfdayOfDay();
        java.util.Locale locale26 = java.util.Locale.ITALIAN;
        java.util.Locale locale27 = locale26.stripExtensions();
        java.util.Locale locale28 = java.util.Locale.CANADA;
        java.lang.String str29 = locale26.getDisplayVariant(locale28);
        boolean boolean30 = gJChronology20.equals((java.lang.Object) locale28);
        org.joda.time.DateTime dateTime31 = instant7.toDateTime((org.joda.time.Chronology) gJChronology20);
        java.util.TimeZone timeZone32 = null;
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.forTimeZone(timeZone32);
        org.joda.time.chrono.GJChronology gJChronology34 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone33);
        org.joda.time.DurationField durationField35 = gJChronology34.halfdays();
        org.joda.time.DateTimeField dateTimeField36 = gJChronology34.millisOfDay();
        org.joda.time.DateTimeField dateTimeField37 = gJChronology34.minuteOfDay();
        org.joda.time.DurationField durationField38 = gJChronology34.centuries();
        org.joda.time.DateTimeField dateTimeField39 = gJChronology34.dayOfYear();
        java.lang.String str40 = gJChronology34.toString();
        org.joda.time.DateTimeField dateTimeField41 = gJChronology34.dayOfYear();
        org.joda.time.DateTimeField dateTimeField42 = gJChronology34.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField43 = gJChronology34.clockhourOfDay();
        org.joda.time.DurationField durationField44 = gJChronology34.months();
        org.joda.time.MutableDateTime mutableDateTime45 = dateTime31.toMutableDateTime((org.joda.time.Chronology) gJChronology34);
        org.joda.time.DurationField durationField46 = gJChronology34.eras();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant7 and dateTime31", (instant7.compareTo(dateTime31) == 0) == instant7.equals(dateTime31));
    }

    @Test
    public void test0351() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0351");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = gJChronology2.halfdays();
        long long7 = gJChronology2.add((long) 'a', (-1L), (int) (short) 0);
        long long11 = gJChronology2.add((long) (byte) 0, (long) '4', 100);
        org.joda.time.DateTimeField dateTimeField12 = gJChronology2.minuteOfHour();
        org.joda.time.DurationField durationField13 = gJChronology2.hours();
        org.joda.time.DateTimeField dateTimeField14 = gJChronology2.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology2.millisOfSecond();
        org.joda.time.DurationField durationField16 = gJChronology2.seconds();
        java.lang.String str17 = gJChronology2.toString();
        org.joda.time.DurationField durationField18 = gJChronology2.weekyears();
        java.util.TimeZone timeZone19 = null;
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forTimeZone(timeZone19);
        java.lang.String str22 = dateTimeZone20.getNameKey((long) 100);
        boolean boolean23 = dateTimeZone20.isFixed();
        org.joda.time.chrono.GJChronology gJChronology24 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone20);
        java.lang.String str25 = dateTimeZone20.toString();
        java.util.TimeZone timeZone26 = null;
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forTimeZone(timeZone26);
        org.joda.time.chrono.GJChronology gJChronology28 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone27);
        org.joda.time.DurationField durationField29 = gJChronology28.halfdays();
        long long33 = gJChronology28.add(0L, (long) (short) -1, (int) '4');
        java.util.TimeZone timeZone34 = null;
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.forTimeZone(timeZone34);
        org.joda.time.chrono.GJChronology gJChronology36 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone35);
        org.joda.time.DurationField durationField37 = gJChronology36.halfdays();
        org.joda.time.DateTimeField dateTimeField38 = gJChronology36.millisOfDay();
        org.joda.time.DateTimeField dateTimeField39 = gJChronology36.minuteOfDay();
        org.joda.time.DurationField durationField40 = gJChronology36.centuries();
        org.joda.time.DateTimeField dateTimeField41 = gJChronology36.dayOfYear();
        java.lang.String str42 = gJChronology36.toString();
        org.joda.time.DurationField durationField43 = gJChronology36.years();
        org.joda.time.DateTimeField dateTimeField44 = gJChronology36.yearOfEra();
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(0, (int) (short) 10);
        org.joda.time.Chronology chronology48 = gJChronology36.withZone(dateTimeZone47);
        org.joda.time.Chronology chronology49 = gJChronology28.withZone(dateTimeZone47);
        org.joda.time.DurationField durationField50 = gJChronology28.halfdays();
        org.joda.time.Instant instant51 = gJChronology28.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration52 = null;
        org.joda.time.Instant instant53 = instant51.plus(readableDuration52);
        org.joda.time.MutableDateTime mutableDateTime54 = instant53.toMutableDateTime();
        org.joda.time.chrono.GJChronology gJChronology55 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone20, (org.joda.time.ReadableInstant) mutableDateTime54);
        boolean boolean56 = gJChronology2.equals((java.lang.Object) gJChronology55);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on durationField18 and durationField43", (durationField18.compareTo(durationField43) == 0) == durationField18.equals(durationField43));
    }

    @Test
    public void test0352() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0352");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = gJChronology2.halfdays();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.millisOfDay();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.minuteOfDay();
        org.joda.time.DurationField durationField6 = gJChronology2.centuries();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology2.dayOfYear();
        java.lang.String str8 = gJChronology2.toString();
        org.joda.time.DurationField durationField9 = gJChronology2.years();
        org.joda.time.DurationField durationField10 = gJChronology2.eras();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField10, durationField3, and durationField6", !(durationField10.compareTo(durationField3) == 0) || (Math.signum(durationField10.compareTo(durationField6)) == Math.signum(durationField3.compareTo(durationField6))));
    }

    @Test
    public void test0353() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0353");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str3 = dateTimeZone1.getNameKey((long) 100);
        boolean boolean4 = dateTimeZone1.isFixed();
        org.joda.time.chrono.GJChronology gJChronology5 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField6 = gJChronology5.hours();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology5.weekyear();
        org.joda.time.DateTimeField dateTimeField8 = gJChronology5.year();
        org.joda.time.DurationField durationField9 = gJChronology5.days();
        org.joda.time.DateTimeField dateTimeField10 = gJChronology5.halfdayOfDay();
        org.joda.time.DurationField durationField11 = gJChronology5.hours();
        org.joda.time.DurationField durationField12 = gJChronology5.halfdays();
        org.joda.time.DurationField durationField13 = gJChronology5.eras();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField13, durationField6, and durationField9", !(durationField13.compareTo(durationField6) == 0) || (Math.signum(durationField13.compareTo(durationField9)) == Math.signum(durationField6.compareTo(durationField9))));
    }

    @Test
    public void test0354() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0354");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forTimeZone(timeZone2);
        org.joda.time.chrono.GJChronology gJChronology4 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone3);
        org.joda.time.DateTimeField dateTimeField5 = gJChronology4.millisOfSecond();
        int int6 = instant1.get(dateTimeField5);
        org.joda.time.Instant instant8 = instant1.plus(0L);
        org.joda.time.Instant instant9 = instant8.toInstant();
        org.joda.time.Instant instant11 = new org.joda.time.Instant(52L);
        boolean boolean12 = instant11.isEqualNow();
        java.lang.String str13 = instant11.toString();
        java.lang.String str14 = instant11.toString();
        org.joda.time.Instant instant16 = new org.joda.time.Instant(52L);
        boolean boolean17 = instant16.isEqualNow();
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.Instant instant19 = instant16.plus(readableDuration18);
        boolean boolean20 = instant11.isBefore((org.joda.time.ReadableInstant) instant19);
        org.joda.time.Instant instant22 = instant11.minus((long) 0);
        int int23 = instant8.compareTo((org.joda.time.ReadableInstant) instant11);
        org.joda.time.Instant instant26 = instant11.withDurationAdded((long) (short) 100, 70);
        org.joda.time.ReadableInstant readableInstant27 = null;
        boolean boolean28 = instant11.isBefore(readableInstant27);
        java.lang.String str29 = instant11.toString();
        org.joda.time.MutableDateTime mutableDateTime30 = instant11.toMutableDateTimeISO();
        java.util.TimeZone timeZone31 = null;
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.forTimeZone(timeZone31);
        org.joda.time.chrono.GJChronology gJChronology33 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone32);
        org.joda.time.DateTimeField dateTimeField34 = gJChronology33.millisOfSecond();
        org.joda.time.DurationField durationField35 = gJChronology33.weeks();
        org.joda.time.DurationField durationField36 = gJChronology33.months();
        org.joda.time.DurationField durationField37 = gJChronology33.days();
        org.joda.time.DateTimeField dateTimeField38 = gJChronology33.millisOfDay();
        org.joda.time.DateTime dateTime39 = instant11.toDateTime((org.joda.time.Chronology) gJChronology33);
        org.joda.time.DurationField durationField40 = gJChronology33.weeks();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and dateTime39", (instant1.compareTo(dateTime39) == 0) == instant1.equals(dateTime39));
    }

    @Test
    public void test0355() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0355");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = gJChronology2.halfdays();
        long long7 = gJChronology2.add((long) 'a', (-1L), (int) (short) 0);
        long long11 = gJChronology2.add((long) (byte) 0, (long) '4', 100);
        org.joda.time.DurationField durationField12 = gJChronology2.years();
        org.joda.time.Instant instant13 = gJChronology2.getGregorianCutover();
        org.joda.time.DateTimeField dateTimeField14 = gJChronology2.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology2.dayOfYear();
        org.joda.time.DateTimeField dateTimeField16 = gJChronology2.dayOfWeek();
        java.lang.String str17 = gJChronology2.toString();
        org.joda.time.DurationField durationField18 = gJChronology2.eras();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField18, durationField3, and durationField12", !(durationField18.compareTo(durationField3) == 0) || (Math.signum(durationField18.compareTo(durationField12)) == Math.signum(durationField3.compareTo(durationField12))));
    }

    @Test
    public void test0356() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0356");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        boolean boolean2 = instant1.isEqualNow();
        java.lang.String str3 = instant1.toString();
        java.lang.String str4 = instant1.toString();
        org.joda.time.Instant instant7 = instant1.withDurationAdded(115200000L, (int) (short) 1);
        org.joda.time.Instant instant8 = instant1.toInstant();
        org.joda.time.Instant instant11 = instant1.withDurationAdded(4156171L, (-19));
        java.util.TimeZone timeZone12 = null;
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forTimeZone(timeZone12);
        java.lang.String str15 = dateTimeZone13.getNameKey((long) 100);
        boolean boolean16 = dateTimeZone13.isFixed();
        org.joda.time.chrono.GJChronology gJChronology17 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone13);
        int int18 = gJChronology17.getMinimumDaysInFirstWeek();
        java.lang.String str19 = gJChronology17.toString();
        org.joda.time.DateTimeField dateTimeField20 = gJChronology17.yearOfEra();
        org.joda.time.DateTimeField dateTimeField21 = gJChronology17.yearOfCentury();
        org.joda.time.DurationField durationField22 = gJChronology17.eras();
        org.joda.time.DateTimeField dateTimeField23 = gJChronology17.yearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime24 = instant11.toMutableDateTime((org.joda.time.Chronology) gJChronology17);
        java.util.TimeZone timeZone25 = null;
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forTimeZone(timeZone25);
        org.joda.time.chrono.GJChronology gJChronology27 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone26);
        org.joda.time.DateTimeField dateTimeField28 = gJChronology27.era();
        org.joda.time.DateTimeField dateTimeField29 = gJChronology27.centuryOfEra();
        org.joda.time.DurationField durationField30 = gJChronology27.hours();
        org.joda.time.DateTimeZone dateTimeZone31 = gJChronology27.getZone();
        org.joda.time.DurationField durationField32 = gJChronology27.millis();
        org.joda.time.DurationField durationField33 = gJChronology27.weeks();
        org.joda.time.DateTimeField dateTimeField34 = gJChronology27.dayOfMonth();
        org.joda.time.DateTime dateTime35 = instant11.toDateTime((org.joda.time.Chronology) gJChronology27);
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField22 and durationField30", Math.signum(durationField22.compareTo(durationField30)) == -Math.signum(durationField30.compareTo(durationField22)));
    }

    @Test
    public void test0357() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0357");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        boolean boolean2 = instant1.isEqualNow();
        java.lang.String str3 = instant1.toString();
        java.lang.String str4 = instant1.toString();
        org.joda.time.Instant instant7 = instant1.withDurationAdded(115200000L, (int) (short) 1);
        java.util.TimeZone timeZone8 = null;
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forTimeZone(timeZone8);
        java.lang.String str11 = dateTimeZone9.getNameKey((long) 100);
        boolean boolean12 = dateTimeZone9.isFixed();
        org.joda.time.DateTime dateTime13 = instant1.toDateTime(dateTimeZone9);
        boolean boolean15 = instant1.isAfter(0L);
        java.util.TimeZone timeZone16 = null;
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forTimeZone(timeZone16);
        org.joda.time.chrono.GJChronology gJChronology18 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone17);
        org.joda.time.DateTimeField dateTimeField19 = gJChronology18.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField20 = gJChronology18.weekyear();
        org.joda.time.DurationField durationField21 = gJChronology18.centuries();
        org.joda.time.DateTimeField dateTimeField22 = gJChronology18.halfdayOfDay();
        org.joda.time.DurationField durationField23 = gJChronology18.minutes();
        org.joda.time.DateTimeField dateTimeField24 = gJChronology18.yearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) -1, 52);
        org.joda.time.Chronology chronology28 = gJChronology18.withZone(dateTimeZone27);
        java.lang.String str29 = dateTimeZone27.getID();
        org.joda.time.DateTime dateTime30 = instant1.toDateTime(dateTimeZone27);
        java.lang.String str31 = dateTimeZone27.toString();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and dateTime30", (instant1.compareTo(dateTime30) == 0) == instant1.equals(dateTime30));
    }

    @Test
    public void test0358() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0358");
        org.joda.time.Instant instant0 = org.joda.time.Instant.now();
        java.util.TimeZone timeZone1 = null;
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forTimeZone(timeZone1);
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone2);
        org.joda.time.DurationField durationField4 = gJChronology3.halfdays();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology3.millisOfDay();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology3.halfdayOfDay();
        int int7 = instant0.get(dateTimeField6);
        org.joda.time.Instant instant9 = instant0.minus(4156171L);
        java.util.TimeZone timeZone10 = null;
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forTimeZone(timeZone10);
        org.joda.time.chrono.GJChronology gJChronology12 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone11);
        org.joda.time.DurationField durationField13 = gJChronology12.halfdays();
        org.joda.time.DateTimeField dateTimeField14 = gJChronology12.millisOfDay();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology12.minuteOfDay();
        org.joda.time.DurationField durationField16 = gJChronology12.centuries();
        int int17 = gJChronology12.getMinimumDaysInFirstWeek();
        org.joda.time.DateTimeField dateTimeField18 = gJChronology12.weekyear();
        org.joda.time.DateTimeField dateTimeField19 = gJChronology12.weekOfWeekyear();
        org.joda.time.DateTime dateTime20 = instant9.toDateTime((org.joda.time.Chronology) gJChronology12);
        org.joda.time.DateTimeField dateTimeField21 = gJChronology12.hourOfHalfday();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant9 and dateTime20", (instant9.compareTo(dateTime20) == 0) == instant9.equals(dateTime20));
    }

    @Test
    public void test0359() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0359");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField3 = gJChronology2.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.weekyearOfCentury();
        org.joda.time.Instant instant5 = gJChronology2.getGregorianCutover();
        org.joda.time.Instant instant7 = instant5.withMillis(0L);
        java.util.TimeZone timeZone8 = null;
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forTimeZone(timeZone8);
        org.joda.time.chrono.GJChronology gJChronology10 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone9);
        org.joda.time.DateTimeField dateTimeField11 = gJChronology10.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField12 = gJChronology10.weekyear();
        org.joda.time.DateTimeField dateTimeField13 = gJChronology10.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField14 = gJChronology10.weekyearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime15 = instant7.toMutableDateTime((org.joda.time.Chronology) gJChronology10);
        org.joda.time.Chronology chronology16 = gJChronology10.withUTC();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant7 and mutableDateTime15", (instant7.compareTo(mutableDateTime15) == 0) == instant7.equals(mutableDateTime15));
    }

    @Test
    public void test0360() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0360");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        org.joda.time.Instant instant3 = instant1.withMillis((long) 'u');
        java.util.TimeZone timeZone4 = null;
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forTimeZone(timeZone4);
        org.joda.time.chrono.GJChronology gJChronology6 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone5);
        org.joda.time.DurationField durationField7 = gJChronology6.halfdays();
        long long11 = gJChronology6.add((long) 'a', (-1L), (int) (short) 0);
        boolean boolean13 = gJChronology6.equals((java.lang.Object) 0);
        org.joda.time.DateTimeField dateTimeField14 = gJChronology6.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology6.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField16 = gJChronology6.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField17 = gJChronology6.clockhourOfHalfday();
        org.joda.time.DateTime dateTime18 = instant1.toDateTime((org.joda.time.Chronology) gJChronology6);
        org.joda.time.Instant instant20 = instant1.plus(0L);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter21 = null;
        java.lang.String str22 = instant20.toString(dateTimeFormatter21);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant20 and dateTime18", (instant20.compareTo(dateTime18) == 0) == instant20.equals(dateTime18));
    }

    @Test
    public void test0361() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0361");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        org.joda.time.Instant instant3 = instant1.withMillis((long) 'u');
        java.util.TimeZone timeZone4 = null;
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forTimeZone(timeZone4);
        org.joda.time.chrono.GJChronology gJChronology6 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone5);
        org.joda.time.DurationField durationField7 = gJChronology6.halfdays();
        long long11 = gJChronology6.add((long) 'a', (-1L), (int) (short) 0);
        boolean boolean13 = gJChronology6.equals((java.lang.Object) 0);
        org.joda.time.DateTimeField dateTimeField14 = gJChronology6.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology6.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField16 = gJChronology6.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField17 = gJChronology6.clockhourOfHalfday();
        org.joda.time.DateTime dateTime18 = instant1.toDateTime((org.joda.time.Chronology) gJChronology6);
        java.lang.String str19 = dateTime18.toString();
        org.joda.time.Chronology chronology20 = dateTime18.getChronology();
        java.util.TimeZone timeZone21 = null;
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forTimeZone(timeZone21);
        org.joda.time.chrono.GJChronology gJChronology23 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone22);
        long long27 = dateTimeZone22.convertLocalToUTC((long) (byte) -1, true, 0L);
        boolean boolean29 = dateTimeZone22.equals((java.lang.Object) true);
        java.util.Locale locale31 = java.util.Locale.getDefault();
        java.lang.String str32 = locale31.getDisplayLanguage();
        java.lang.String str33 = locale31.toLanguageTag();
        java.lang.String str34 = dateTimeZone22.getShortName(0L, locale31);
        java.util.TimeZone timeZone35 = null;
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.forTimeZone(timeZone35);
        org.joda.time.chrono.GJChronology gJChronology37 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone36);
        org.joda.time.DateTimeField dateTimeField38 = gJChronology37.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField39 = gJChronology37.weekyearOfCentury();
        org.joda.time.Instant instant40 = gJChronology37.getGregorianCutover();
        org.joda.time.Instant instant42 = instant40.withMillis(0L);
        org.joda.time.chrono.GJChronology gJChronology44 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone22, (org.joda.time.ReadableInstant) instant40, 4);
        org.joda.time.Instant instant46 = instant40.minus((-2208729599948L));
        java.util.Date date47 = instant46.toDate();
        boolean boolean48 = dateTime18.isAfter((org.joda.time.ReadableInstant) instant46);
        org.joda.time.Instant instant50 = new org.joda.time.Instant(4320000100L);
        int int51 = instant46.compareTo((org.joda.time.ReadableInstant) instant50);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and dateTime18", (instant1.compareTo(dateTime18) == 0) == instant1.equals(dateTime18));
    }

    @Test
    public void test0362() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0362");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = gJChronology2.halfdays();
        long long7 = gJChronology2.add((long) 'a', (-1L), (int) (short) 0);
        boolean boolean9 = gJChronology2.equals((java.lang.Object) 0);
        org.joda.time.DateTimeField dateTimeField10 = gJChronology2.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField11 = gJChronology2.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField12 = gJChronology2.clockhourOfDay();
        long long17 = gJChronology2.getDateTimeMillis(10, (int) (short) 10, 4, (int) (byte) 1);
        org.joda.time.Chronology chronology18 = gJChronology2.withUTC();
        org.joda.time.DurationField durationField19 = gJChronology2.eras();
        org.joda.time.DateTimeField dateTimeField20 = gJChronology2.weekyear();
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField3 and durationField19", Math.signum(durationField3.compareTo(durationField19)) == -Math.signum(durationField19.compareTo(durationField3)));
    }

    @Test
    public void test0363() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0363");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        boolean boolean2 = instant1.isEqualNow();
        org.joda.time.ReadableDuration readableDuration3 = null;
        org.joda.time.Instant instant4 = instant1.plus(readableDuration3);
        long long5 = instant1.getMillis();
        java.lang.String str6 = instant1.toString();
        org.joda.time.Instant instant7 = instant1.toInstant();
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.Instant instant10 = instant1.withDurationAdded(readableDuration8, (int) 'x');
        org.joda.time.DateTimeZone dateTimeZone11 = instant1.getZone();
        java.util.TimeZone timeZone12 = null;
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forTimeZone(timeZone12);
        org.joda.time.chrono.GJChronology gJChronology14 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone13);
        org.joda.time.DateTimeField dateTimeField15 = gJChronology14.millisOfSecond();
        org.joda.time.DurationField durationField16 = gJChronology14.millis();
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        long long20 = gJChronology14.add(readablePeriod17, (long) 'a', (int) '4');
        org.joda.time.DateTimeField dateTimeField21 = gJChronology14.clockhourOfDay();
        org.joda.time.MutableDateTime mutableDateTime22 = instant1.toMutableDateTime((org.joda.time.Chronology) gJChronology14);
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forOffsetMillis((int) '4');
        java.util.TimeZone timeZone25 = dateTimeZone24.toTimeZone();
        long long28 = dateTimeZone24.adjustOffset((long) 0, false);
        int int30 = dateTimeZone24.getOffsetFromLocal((-26438399999L));
        java.util.TimeZone timeZone31 = dateTimeZone24.toTimeZone();
        java.lang.String str32 = dateTimeZone24.getID();
        java.util.Locale locale34 = null;
        java.lang.String str35 = dateTimeZone24.getShortName(115200000L, locale34);
        org.joda.time.MutableDateTime mutableDateTime36 = mutableDateTime22.toMutableDateTime(dateTimeZone24);
        java.util.TimeZone timeZone37 = null;
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forTimeZone(timeZone37);
        org.joda.time.chrono.GJChronology gJChronology39 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone38);
        org.joda.time.DurationField durationField40 = gJChronology39.halfdays();
        long long44 = gJChronology39.add(0L, (long) (short) -1, (int) '4');
        java.util.TimeZone timeZone45 = null;
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.forTimeZone(timeZone45);
        org.joda.time.chrono.GJChronology gJChronology47 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone46);
        org.joda.time.DurationField durationField48 = gJChronology47.halfdays();
        org.joda.time.DateTimeField dateTimeField49 = gJChronology47.millisOfDay();
        org.joda.time.DateTimeField dateTimeField50 = gJChronology47.minuteOfDay();
        org.joda.time.DurationField durationField51 = gJChronology47.centuries();
        org.joda.time.DateTimeField dateTimeField52 = gJChronology47.dayOfYear();
        java.lang.String str53 = gJChronology47.toString();
        org.joda.time.DurationField durationField54 = gJChronology47.years();
        org.joda.time.DateTimeField dateTimeField55 = gJChronology47.yearOfEra();
        org.joda.time.DateTimeZone dateTimeZone58 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(0, (int) (short) 10);
        org.joda.time.Chronology chronology59 = gJChronology47.withZone(dateTimeZone58);
        org.joda.time.Chronology chronology60 = gJChronology39.withZone(dateTimeZone58);
        org.joda.time.DurationField durationField61 = gJChronology39.halfdays();
        org.joda.time.Instant instant62 = gJChronology39.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration63 = null;
        org.joda.time.Instant instant64 = instant62.plus(readableDuration63);
        org.joda.time.DateTime dateTime65 = instant64.toDateTimeISO();
        boolean boolean66 = mutableDateTime36.isEqual((org.joda.time.ReadableInstant) instant64);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and mutableDateTime22", (instant1.compareTo(mutableDateTime22) == 0) == instant1.equals(mutableDateTime22));
    }

    @Test
    public void test0364() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0364");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forTimeZone(timeZone2);
        org.joda.time.chrono.GJChronology gJChronology4 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone3);
        org.joda.time.DateTimeField dateTimeField5 = gJChronology4.millisOfSecond();
        int int6 = instant1.get(dateTimeField5);
        org.joda.time.Instant instant8 = instant1.plus(0L);
        org.joda.time.Instant instant9 = instant8.toInstant();
        org.joda.time.Instant instant11 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone12 = null;
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forTimeZone(timeZone12);
        org.joda.time.chrono.GJChronology gJChronology14 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone13);
        org.joda.time.DateTimeField dateTimeField15 = gJChronology14.millisOfSecond();
        int int16 = instant11.get(dateTimeField15);
        org.joda.time.Instant instant18 = instant11.plus(0L);
        org.joda.time.Instant instant19 = instant18.toInstant();
        boolean boolean20 = instant9.isEqual((org.joda.time.ReadableInstant) instant19);
        org.joda.time.Instant instant22 = new org.joda.time.Instant(52L);
        boolean boolean23 = instant22.isEqualNow();
        org.joda.time.ReadableDuration readableDuration24 = null;
        org.joda.time.Instant instant25 = instant22.plus(readableDuration24);
        org.joda.time.Instant instant27 = new org.joda.time.Instant(52L);
        org.joda.time.Instant instant29 = instant27.withMillis((long) 'u');
        boolean boolean30 = instant22.isBefore((org.joda.time.ReadableInstant) instant27);
        org.joda.time.Instant instant31 = instant27.toInstant();
        org.joda.time.DateTime dateTime32 = instant27.toDateTime();
        boolean boolean33 = instant19.isBefore((org.joda.time.ReadableInstant) instant27);
        java.util.TimeZone timeZone34 = null;
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.forTimeZone(timeZone34);
        org.joda.time.chrono.GJChronology gJChronology36 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone35);
        org.joda.time.DurationField durationField37 = gJChronology36.halfdays();
        org.joda.time.DateTimeField dateTimeField38 = gJChronology36.millisOfDay();
        org.joda.time.DateTimeField dateTimeField39 = gJChronology36.minuteOfDay();
        org.joda.time.DurationField durationField40 = gJChronology36.centuries();
        org.joda.time.DateTimeField dateTimeField41 = gJChronology36.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField42 = gJChronology36.weekyear();
        org.joda.time.DateTime dateTime43 = instant19.toDateTime((org.joda.time.Chronology) gJChronology36);
        java.util.TimeZone timeZone44 = null;
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.forTimeZone(timeZone44);
        org.joda.time.chrono.GJChronology gJChronology46 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone45);
        long long50 = dateTimeZone45.convertLocalToUTC((long) (byte) -1, true, 0L);
        boolean boolean52 = dateTimeZone45.equals((java.lang.Object) true);
        org.joda.time.chrono.GJChronology gJChronology53 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone45);
        org.joda.time.DateTimeField dateTimeField54 = gJChronology53.weekyear();
        org.joda.time.DateTimeField dateTimeField55 = gJChronology53.era();
        org.joda.time.DateTimeField dateTimeField56 = gJChronology53.centuryOfEra();
        org.joda.time.Chronology chronology57 = gJChronology53.withUTC();
        org.joda.time.DurationField durationField58 = gJChronology53.years();
        org.joda.time.DateTimeZone dateTimeZone59 = gJChronology53.getZone();
        org.joda.time.DateTimeField dateTimeField60 = gJChronology53.year();
        org.joda.time.DateTimeField dateTimeField61 = gJChronology53.halfdayOfDay();
        int int62 = instant19.get(dateTimeField61);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and dateTime43", (instant1.compareTo(dateTime43) == 0) == instant1.equals(dateTime43));
    }

    @Test
    public void test0365() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0365");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField3 = gJChronology2.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.weekyear();
        org.joda.time.DurationField durationField5 = gJChronology2.centuries();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology2.millisOfDay();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField8 = gJChronology2.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField9 = gJChronology2.dayOfWeek();
        org.joda.time.DurationField durationField10 = gJChronology2.eras();
        org.joda.time.DateTimeField dateTimeField11 = gJChronology2.halfdayOfDay();
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField5 and durationField10", Math.signum(durationField5.compareTo(durationField10)) == -Math.signum(durationField10.compareTo(durationField5)));
    }

    @Test
    public void test0366() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0366");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = gJChronology2.halfdays();
        long long7 = gJChronology2.add((long) 'a', (-1L), (int) (short) 0);
        long long11 = gJChronology2.add((long) (byte) 0, (long) '4', 100);
        org.joda.time.DateTimeField dateTimeField12 = gJChronology2.minuteOfHour();
        org.joda.time.DurationField durationField13 = gJChronology2.hours();
        org.joda.time.DateTimeField dateTimeField14 = gJChronology2.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology2.weekyearOfCentury();
        org.joda.time.Chronology chronology16 = gJChronology2.withUTC();
        org.joda.time.DateTimeField dateTimeField17 = gJChronology2.centuryOfEra();
        java.lang.String str18 = gJChronology2.toString();
        org.joda.time.DurationField durationField19 = gJChronology2.eras();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField19, durationField3, and durationField13", !(durationField19.compareTo(durationField3) == 0) || (Math.signum(durationField19.compareTo(durationField13)) == Math.signum(durationField3.compareTo(durationField13))));
    }

    @Test
    public void test0367() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0367");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = gJChronology2.halfdays();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.millisOfDay();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.minuteOfDay();
        org.joda.time.DurationField durationField6 = gJChronology2.centuries();
        int int7 = gJChronology2.getMinimumDaysInFirstWeek();
        org.joda.time.DateTimeField dateTimeField8 = gJChronology2.weekyear();
        org.joda.time.DateTimeField dateTimeField9 = gJChronology2.weekyearOfCentury();
        org.joda.time.DurationField durationField10 = gJChronology2.halfdays();
        java.lang.String str11 = gJChronology2.toString();
        org.joda.time.DurationField durationField12 = gJChronology2.halfdays();
        org.joda.time.DurationField durationField13 = gJChronology2.eras();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField13, durationField3, and durationField6", !(durationField13.compareTo(durationField3) == 0) || (Math.signum(durationField13.compareTo(durationField6)) == Math.signum(durationField3.compareTo(durationField6))));
    }

    @Test
    public void test0368() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0368");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = gJChronology2.halfdays();
        long long7 = gJChronology2.add((long) 'a', (-1L), (int) (short) 0);
        boolean boolean9 = gJChronology2.equals((java.lang.Object) 0);
        org.joda.time.DateTimeField dateTimeField10 = gJChronology2.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField11 = gJChronology2.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField12 = gJChronology2.clockhourOfDay();
        long long17 = gJChronology2.getDateTimeMillis(10, (int) (short) 10, 4, (int) (byte) 1);
        org.joda.time.Chronology chronology18 = gJChronology2.withUTC();
        org.joda.time.DurationField durationField19 = gJChronology2.eras();
        org.joda.time.DateTimeZone dateTimeZone20 = gJChronology2.getZone();
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField3 and durationField19", Math.signum(durationField3.compareTo(durationField19)) == -Math.signum(durationField19.compareTo(durationField3)));
    }

    @Test
    public void test0369() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0369");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime1 = instant0.toMutableDateTime();
        org.joda.time.DateTimeZone dateTimeZone2 = mutableDateTime1.getZone();
        java.util.TimeZone timeZone3 = null;
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forTimeZone(timeZone3);
        org.joda.time.chrono.GJChronology gJChronology5 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone4);
        org.joda.time.DateTimeField dateTimeField6 = gJChronology5.millisOfSecond();
        org.joda.time.DurationField durationField7 = gJChronology5.millis();
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        long long11 = gJChronology5.add(readablePeriod8, (long) 'a', (int) '4');
        org.joda.time.DateTimeField dateTimeField12 = gJChronology5.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField13 = gJChronology5.yearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.Chronology chronology15 = gJChronology5.withZone(dateTimeZone14);
        org.joda.time.DateTime dateTime16 = mutableDateTime1.toDateTime(chronology15);
        org.joda.time.DateTimeField dateTimeField17 = chronology15.yearOfCentury();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant0 and dateTime16", (instant0.compareTo(dateTime16) == 0) == instant0.equals(dateTime16));
    }

    @Test
    public void test0370() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0370");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        org.joda.time.Instant instant3 = instant1.withMillis((long) 'u');
        java.util.TimeZone timeZone4 = null;
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forTimeZone(timeZone4);
        org.joda.time.chrono.GJChronology gJChronology6 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone5);
        org.joda.time.DurationField durationField7 = gJChronology6.halfdays();
        long long11 = gJChronology6.add((long) 'a', (-1L), (int) (short) 0);
        boolean boolean13 = gJChronology6.equals((java.lang.Object) 0);
        org.joda.time.DateTimeField dateTimeField14 = gJChronology6.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology6.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField16 = gJChronology6.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField17 = gJChronology6.clockhourOfHalfday();
        org.joda.time.DateTime dateTime18 = instant1.toDateTime((org.joda.time.Chronology) gJChronology6);
        java.util.TimeZone timeZone19 = null;
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forTimeZone(timeZone19);
        org.joda.time.chrono.GJChronology gJChronology21 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone20);
        org.joda.time.DurationField durationField22 = gJChronology21.halfdays();
        long long26 = gJChronology21.add((long) 'a', (-1L), (int) (short) 0);
        long long30 = gJChronology21.add((long) (byte) 0, (long) '4', 100);
        org.joda.time.DateTimeField dateTimeField31 = gJChronology21.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField32 = gJChronology21.year();
        org.joda.time.DateTimeField dateTimeField33 = gJChronology21.monthOfYear();
        org.joda.time.MutableDateTime mutableDateTime34 = instant1.toMutableDateTime((org.joda.time.Chronology) gJChronology21);
        boolean boolean35 = mutableDateTime34.isEqualNow();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and dateTime18", (instant1.compareTo(dateTime18) == 0) == instant1.equals(dateTime18));
    }

    @Test
    public void test0371() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0371");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        org.joda.time.Instant instant3 = instant1.withMillis((long) 'u');
        java.util.TimeZone timeZone4 = null;
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forTimeZone(timeZone4);
        org.joda.time.chrono.GJChronology gJChronology6 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone5);
        org.joda.time.DurationField durationField7 = gJChronology6.halfdays();
        long long11 = gJChronology6.add((long) 'a', (-1L), (int) (short) 0);
        boolean boolean13 = gJChronology6.equals((java.lang.Object) 0);
        org.joda.time.DateTimeField dateTimeField14 = gJChronology6.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology6.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField16 = gJChronology6.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField17 = gJChronology6.clockhourOfHalfday();
        org.joda.time.DateTime dateTime18 = instant1.toDateTime((org.joda.time.Chronology) gJChronology6);
        org.joda.time.DateTimeField dateTimeField19 = gJChronology6.secondOfMinute();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and dateTime18", (instant1.compareTo(dateTime18) == 0) == instant1.equals(dateTime18));
    }

    @Test
    public void test0372() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0372");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        boolean boolean2 = instant1.isEqualNow();
        java.lang.String str3 = instant1.toString();
        java.lang.String str4 = instant1.toString();
        org.joda.time.Instant instant6 = new org.joda.time.Instant(52L);
        boolean boolean7 = instant6.isEqualNow();
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.Instant instant9 = instant6.plus(readableDuration8);
        boolean boolean10 = instant1.isBefore((org.joda.time.ReadableInstant) instant9);
        org.joda.time.Instant instant12 = new org.joda.time.Instant(52L);
        boolean boolean13 = instant12.isEqualNow();
        org.joda.time.ReadableDuration readableDuration14 = null;
        org.joda.time.Instant instant15 = instant12.plus(readableDuration14);
        long long16 = instant12.getMillis();
        java.lang.String str17 = instant12.toString();
        org.joda.time.Instant instant18 = instant12.toInstant();
        boolean boolean19 = instant9.isAfter((org.joda.time.ReadableInstant) instant12);
        java.util.TimeZone timeZone20 = null;
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forTimeZone(timeZone20);
        org.joda.time.chrono.GJChronology gJChronology22 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone21);
        org.joda.time.DurationField durationField23 = gJChronology22.halfdays();
        long long27 = gJChronology22.add((long) 'a', (-1L), (int) (short) 0);
        boolean boolean29 = gJChronology22.equals((java.lang.Object) 0);
        org.joda.time.DateTimeField dateTimeField30 = gJChronology22.dayOfMonth();
        org.joda.time.DurationField durationField31 = gJChronology22.seconds();
        org.joda.time.DateTimeField dateTimeField32 = gJChronology22.dayOfYear();
        org.joda.time.DateTimeField dateTimeField33 = gJChronology22.secondOfMinute();
        org.joda.time.Chronology chronology34 = gJChronology22.withUTC();
        org.joda.time.MutableDateTime mutableDateTime35 = instant9.toMutableDateTime((org.joda.time.Chronology) gJChronology22);
        org.joda.time.DateTimeField dateTimeField36 = gJChronology22.hourOfDay();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and mutableDateTime35", (instant1.compareTo(mutableDateTime35) == 0) == instant1.equals(mutableDateTime35));
    }

    @Test
    public void test0373() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0373");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        boolean boolean2 = instant1.isEqualNow();
        java.lang.String str3 = instant1.toString();
        java.util.TimeZone timeZone4 = null;
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forTimeZone(timeZone4);
        org.joda.time.chrono.GJChronology gJChronology6 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone5);
        java.util.Locale locale8 = new java.util.Locale("hi!");
        java.lang.String str9 = locale8.getCountry();
        java.util.Locale locale10 = java.util.Locale.getDefault();
        java.lang.String str11 = locale10.getDisplayName();
        java.lang.String str12 = locale8.getDisplayScript(locale10);
        boolean boolean13 = dateTimeZone5.equals((java.lang.Object) locale10);
        int int15 = dateTimeZone5.getOffsetFromLocal((long) (short) 10);
        java.util.TimeZone timeZone16 = null;
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forTimeZone(timeZone16);
        org.joda.time.chrono.GJChronology gJChronology18 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone17);
        org.joda.time.DateTimeField dateTimeField19 = gJChronology18.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField20 = gJChronology18.weekyearOfCentury();
        org.joda.time.Instant instant21 = gJChronology18.getGregorianCutover();
        org.joda.time.Instant instant23 = instant21.withMillis(0L);
        org.joda.time.Instant instant25 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone26 = null;
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forTimeZone(timeZone26);
        org.joda.time.chrono.GJChronology gJChronology28 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone27);
        org.joda.time.DateTimeField dateTimeField29 = gJChronology28.millisOfSecond();
        int int30 = instant25.get(dateTimeField29);
        org.joda.time.Instant instant32 = instant25.plus(0L);
        int int33 = instant23.compareTo((org.joda.time.ReadableInstant) instant32);
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = null;
        boolean boolean35 = instant32.isSupported(dateTimeFieldType34);
        int int36 = dateTimeZone5.getOffset((org.joda.time.ReadableInstant) instant32);
        boolean boolean37 = instant1.isAfter((org.joda.time.ReadableInstant) instant32);
        org.joda.time.Instant instant39 = instant32.withMillis((long) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType40 = null;
        boolean boolean41 = instant39.isSupported(dateTimeFieldType40);
        org.joda.time.ReadableDuration readableDuration42 = null;
        org.joda.time.Instant instant43 = instant39.plus(readableDuration42);
        org.joda.time.MutableDateTime mutableDateTime44 = instant43.toMutableDateTimeISO();
        org.joda.time.Instant instant46 = new org.joda.time.Instant((long) '#');
        java.lang.String str47 = instant46.toString();
        org.joda.time.Instant instant49 = instant46.minus(12888000000L);
        boolean boolean50 = instant43.equals((java.lang.Object) instant46);
        java.lang.String str51 = instant43.toString();
        org.joda.time.Instant instant53 = instant43.minus((long) (-8575816));
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant43 and mutableDateTime44", (instant43.compareTo(mutableDateTime44) == 0) == instant43.equals(mutableDateTime44));
    }

    @Test
    public void test0374() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0374");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        boolean boolean2 = dateTimeZone0.isStandardOffset(115200000L);
        org.joda.time.chrono.GJChronology gJChronology5 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, (long) 10, 4);
        org.joda.time.LocalDateTime localDateTime6 = null;
        boolean boolean7 = dateTimeZone0.isLocalDateTimeGap(localDateTime6);
        boolean boolean8 = dateTimeZone0.isFixed();
        org.joda.time.Instant instant10 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone11 = null;
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forTimeZone(timeZone11);
        org.joda.time.chrono.GJChronology gJChronology13 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone12);
        org.joda.time.DateTimeField dateTimeField14 = gJChronology13.millisOfSecond();
        int int15 = instant10.get(dateTimeField14);
        org.joda.time.Instant instant17 = instant10.plus(0L);
        java.util.TimeZone timeZone18 = null;
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forTimeZone(timeZone18);
        org.joda.time.chrono.GJChronology gJChronology20 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone19);
        org.joda.time.DurationField durationField21 = gJChronology20.halfdays();
        org.joda.time.Chronology chronology22 = gJChronology20.withUTC();
        java.lang.String str23 = gJChronology20.toString();
        org.joda.time.DateTimeField dateTimeField24 = gJChronology20.hourOfHalfday();
        int int25 = instant10.get(dateTimeField24);
        java.util.TimeZone timeZone26 = null;
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forTimeZone(timeZone26);
        org.joda.time.chrono.GJChronology gJChronology28 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone27);
        org.joda.time.DurationField durationField29 = gJChronology28.halfdays();
        long long33 = gJChronology28.add((long) 'a', (-1L), (int) (short) 0);
        org.joda.time.DateTimeField dateTimeField34 = gJChronology28.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField35 = gJChronology28.secondOfMinute();
        org.joda.time.Instant instant37 = new org.joda.time.Instant(52L);
        boolean boolean38 = instant37.isEqualNow();
        org.joda.time.ReadableDuration readableDuration39 = null;
        org.joda.time.Instant instant40 = instant37.plus(readableDuration39);
        boolean boolean41 = gJChronology28.equals((java.lang.Object) instant37);
        org.joda.time.DateTimeFieldType dateTimeFieldType42 = null;
        boolean boolean43 = instant37.isSupported(dateTimeFieldType42);
        org.joda.time.DateTimeFieldType dateTimeFieldType44 = null;
        boolean boolean45 = instant37.isSupported(dateTimeFieldType44);
        org.joda.time.DateTimeZone dateTimeZone46 = instant37.getZone();
        boolean boolean47 = instant10.isAfter((org.joda.time.ReadableInstant) instant37);
        org.joda.time.Instant instant49 = instant10.minus((long) 70);
        org.joda.time.Instant instant51 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone52 = null;
        org.joda.time.DateTimeZone dateTimeZone53 = org.joda.time.DateTimeZone.forTimeZone(timeZone52);
        org.joda.time.chrono.GJChronology gJChronology54 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone53);
        org.joda.time.DateTimeField dateTimeField55 = gJChronology54.millisOfSecond();
        int int56 = instant51.get(dateTimeField55);
        boolean boolean57 = instant51.isEqualNow();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter58 = null;
        java.lang.String str59 = instant51.toString(dateTimeFormatter58);
        boolean boolean60 = instant10.isAfter((org.joda.time.ReadableInstant) instant51);
        org.joda.time.ReadableDuration readableDuration61 = null;
        org.joda.time.Instant instant62 = instant10.minus(readableDuration61);
        java.util.TimeZone timeZone63 = null;
        org.joda.time.DateTimeZone dateTimeZone64 = org.joda.time.DateTimeZone.forTimeZone(timeZone63);
        org.joda.time.chrono.GJChronology gJChronology65 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone64);
        org.joda.time.DateTimeField dateTimeField66 = gJChronology65.millisOfSecond();
        org.joda.time.DurationField durationField67 = gJChronology65.millis();
        org.joda.time.ReadablePeriod readablePeriod68 = null;
        long long71 = gJChronology65.add(readablePeriod68, (long) 'a', (int) '4');
        org.joda.time.DateTimeZone dateTimeZone72 = gJChronology65.getZone();
        org.joda.time.Instant instant74 = new org.joda.time.Instant(52L);
        boolean boolean75 = instant74.isEqualNow();
        org.joda.time.ReadableDuration readableDuration76 = null;
        org.joda.time.Instant instant77 = instant74.plus(readableDuration76);
        long long78 = instant74.getMillis();
        java.lang.Object obj79 = null;
        boolean boolean80 = instant74.equals(obj79);
        org.joda.time.Instant instant82 = new org.joda.time.Instant(52L);
        boolean boolean83 = instant82.isEqualNow();
        org.joda.time.ReadableDuration readableDuration84 = null;
        org.joda.time.Instant instant85 = instant82.plus(readableDuration84);
        long long86 = instant82.getMillis();
        java.lang.String str87 = instant82.toString();
        org.joda.time.Instant instant88 = instant82.toInstant();
        org.joda.time.ReadableDuration readableDuration89 = null;
        org.joda.time.Instant instant91 = instant82.withDurationAdded(readableDuration89, (int) 'x');
        org.joda.time.Instant instant92 = instant82.toInstant();
        int int93 = instant74.compareTo((org.joda.time.ReadableInstant) instant82);
        int int94 = dateTimeZone72.getOffset((org.joda.time.ReadableInstant) instant74);
        org.joda.time.DateTime dateTime95 = instant10.toDateTime(dateTimeZone72);
        long long97 = dateTimeZone0.getMillisKeepLocal(dateTimeZone72, 3598470L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant10 and dateTime95", (instant10.compareTo(dateTime95) == 0) == instant10.equals(dateTime95));
    }

    @Test
    public void test0375() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0375");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        boolean boolean2 = instant1.isEqualNow();
        java.lang.String str3 = instant1.toString();
        org.joda.time.Instant instant5 = new org.joda.time.Instant(52L);
        boolean boolean6 = instant5.isEqualNow();
        java.lang.String str7 = instant5.toString();
        java.lang.String str8 = instant5.toString();
        org.joda.time.Instant instant11 = instant5.withDurationAdded(115200000L, (int) (short) 1);
        int int12 = instant1.compareTo((org.joda.time.ReadableInstant) instant5);
        org.joda.time.MutableDateTime mutableDateTime13 = instant1.toMutableDateTime();
        java.util.TimeZone timeZone14 = null;
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forTimeZone(timeZone14);
        org.joda.time.chrono.GJChronology gJChronology16 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone15);
        org.joda.time.DurationField durationField17 = gJChronology16.halfdays();
        org.joda.time.DateTimeField dateTimeField18 = gJChronology16.millisOfDay();
        org.joda.time.DateTimeField dateTimeField19 = gJChronology16.minuteOfDay();
        org.joda.time.DurationField durationField20 = gJChronology16.centuries();
        org.joda.time.DateTimeField dateTimeField21 = gJChronology16.dayOfYear();
        java.lang.String str22 = gJChronology16.toString();
        org.joda.time.DateTimeField dateTimeField23 = gJChronology16.dayOfYear();
        org.joda.time.DateTimeField dateTimeField24 = gJChronology16.minuteOfHour();
        org.joda.time.DurationField durationField25 = gJChronology16.halfdays();
        org.joda.time.DateTimeField dateTimeField26 = gJChronology16.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField27 = gJChronology16.centuryOfEra();
        boolean boolean28 = instant1.equals((java.lang.Object) gJChronology16);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant5 and mutableDateTime13", (instant5.compareTo(mutableDateTime13) == 0) == instant5.equals(mutableDateTime13));
    }

    @Test
    public void test0376() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0376");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        boolean boolean2 = instant1.isEqualNow();
        java.lang.String str3 = instant1.toString();
        java.util.TimeZone timeZone4 = null;
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forTimeZone(timeZone4);
        org.joda.time.chrono.GJChronology gJChronology6 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone5);
        java.util.Locale locale8 = new java.util.Locale("hi!");
        java.lang.String str9 = locale8.getCountry();
        java.util.Locale locale10 = java.util.Locale.getDefault();
        java.lang.String str11 = locale10.getDisplayName();
        java.lang.String str12 = locale8.getDisplayScript(locale10);
        boolean boolean13 = dateTimeZone5.equals((java.lang.Object) locale10);
        int int15 = dateTimeZone5.getOffsetFromLocal((long) (short) 10);
        java.util.TimeZone timeZone16 = null;
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forTimeZone(timeZone16);
        org.joda.time.chrono.GJChronology gJChronology18 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone17);
        org.joda.time.DateTimeField dateTimeField19 = gJChronology18.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField20 = gJChronology18.weekyearOfCentury();
        org.joda.time.Instant instant21 = gJChronology18.getGregorianCutover();
        org.joda.time.Instant instant23 = instant21.withMillis(0L);
        org.joda.time.Instant instant25 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone26 = null;
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forTimeZone(timeZone26);
        org.joda.time.chrono.GJChronology gJChronology28 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone27);
        org.joda.time.DateTimeField dateTimeField29 = gJChronology28.millisOfSecond();
        int int30 = instant25.get(dateTimeField29);
        org.joda.time.Instant instant32 = instant25.plus(0L);
        int int33 = instant23.compareTo((org.joda.time.ReadableInstant) instant32);
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = null;
        boolean boolean35 = instant32.isSupported(dateTimeFieldType34);
        int int36 = dateTimeZone5.getOffset((org.joda.time.ReadableInstant) instant32);
        boolean boolean37 = instant1.isAfter((org.joda.time.ReadableInstant) instant32);
        org.joda.time.Instant instant39 = instant32.withMillis((long) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType40 = null;
        boolean boolean41 = instant39.isSupported(dateTimeFieldType40);
        org.joda.time.ReadableDuration readableDuration42 = null;
        org.joda.time.Instant instant43 = instant39.plus(readableDuration42);
        org.joda.time.MutableDateTime mutableDateTime44 = instant43.toMutableDateTimeISO();
        org.joda.time.Instant instant46 = new org.joda.time.Instant((long) '#');
        java.lang.String str47 = instant46.toString();
        org.joda.time.Instant instant49 = instant46.minus(12888000000L);
        boolean boolean50 = instant43.equals((java.lang.Object) instant46);
        java.util.TimeZone timeZone51 = null;
        org.joda.time.DateTimeZone dateTimeZone52 = org.joda.time.DateTimeZone.forTimeZone(timeZone51);
        java.lang.String str54 = dateTimeZone52.getNameKey((long) 100);
        boolean boolean55 = dateTimeZone52.isFixed();
        org.joda.time.chrono.GJChronology gJChronology56 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone52);
        int int57 = gJChronology56.getMinimumDaysInFirstWeek();
        java.lang.String str58 = gJChronology56.toString();
        org.joda.time.DateTimeField dateTimeField59 = gJChronology56.yearOfEra();
        org.joda.time.DateTimeField dateTimeField60 = gJChronology56.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField61 = gJChronology56.weekyear();
        int int62 = instant46.get(dateTimeField61);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant39 and mutableDateTime44", (instant39.compareTo(mutableDateTime44) == 0) == instant39.equals(mutableDateTime44));
    }

    @Test
    public void test0377() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0377");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forTimeZone(timeZone2);
        org.joda.time.chrono.GJChronology gJChronology4 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone3);
        org.joda.time.DateTimeField dateTimeField5 = gJChronology4.millisOfSecond();
        int int6 = instant1.get(dateTimeField5);
        boolean boolean7 = instant1.isEqualNow();
        org.joda.time.tz.NameProvider nameProvider8 = org.joda.time.DateTimeZone.getNameProvider();
        org.joda.time.DateTimeZone.setNameProvider(nameProvider8);
        org.joda.time.DateTimeZone.setNameProvider(nameProvider8);
        boolean boolean11 = instant1.equals((java.lang.Object) nameProvider8);
        org.joda.time.Instant instant13 = instant1.minus(0L);
        org.joda.time.ReadableDuration readableDuration14 = null;
        org.joda.time.Instant instant15 = instant1.minus(readableDuration14);
        org.joda.time.Instant instant17 = instant1.plus(0L);
        org.joda.time.Instant instant19 = new org.joda.time.Instant(52L);
        boolean boolean20 = instant19.isEqualNow();
        boolean boolean22 = instant19.isEqual(0L);
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = null;
        boolean boolean24 = instant19.isSupported(dateTimeFieldType23);
        org.joda.time.Instant instant27 = instant19.withDurationAdded((-61827926399999L), (int) (short) -1);
        org.joda.time.MutableDateTime mutableDateTime28 = instant27.toMutableDateTime();
        org.joda.time.Instant instant29 = instant27.toInstant();
        boolean boolean30 = instant1.isAfter((org.joda.time.ReadableInstant) instant27);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime28 and instant27", (mutableDateTime28.compareTo(instant27) == 0) == mutableDateTime28.equals(instant27));
    }

    @Test
    public void test0378() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0378");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = gJChronology2.halfdays();
        long long7 = gJChronology2.add((long) 'a', (-1L), (int) (short) 0);
        org.joda.time.DateTimeField dateTimeField8 = gJChronology2.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField9 = gJChronology2.secondOfMinute();
        org.joda.time.Instant instant11 = new org.joda.time.Instant(52L);
        boolean boolean12 = instant11.isEqualNow();
        org.joda.time.ReadableDuration readableDuration13 = null;
        org.joda.time.Instant instant14 = instant11.plus(readableDuration13);
        boolean boolean15 = gJChronology2.equals((java.lang.Object) instant11);
        java.util.TimeZone timeZone16 = null;
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forTimeZone(timeZone16);
        org.joda.time.chrono.GJChronology gJChronology18 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone17);
        org.joda.time.DurationField durationField19 = gJChronology18.halfdays();
        org.joda.time.DateTimeField dateTimeField20 = gJChronology18.millisOfDay();
        org.joda.time.DateTimeField dateTimeField21 = gJChronology18.minuteOfDay();
        org.joda.time.DurationField durationField22 = gJChronology18.centuries();
        org.joda.time.DateTimeField dateTimeField23 = gJChronology18.dayOfYear();
        java.lang.String str24 = gJChronology18.toString();
        org.joda.time.DateTimeField dateTimeField25 = gJChronology18.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone26 = gJChronology18.getZone();
        org.joda.time.DateTime dateTime27 = instant11.toDateTime((org.joda.time.Chronology) gJChronology18);
        java.lang.String str28 = gJChronology18.toString();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant11 and dateTime27", (instant11.compareTo(dateTime27) == 0) == instant11.equals(dateTime27));
    }

    @Test
    public void test0379() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0379");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forTimeZone(timeZone2);
        org.joda.time.chrono.GJChronology gJChronology4 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone3);
        org.joda.time.DateTimeField dateTimeField5 = gJChronology4.millisOfSecond();
        int int6 = instant1.get(dateTimeField5);
        java.util.TimeZone timeZone7 = null;
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forTimeZone(timeZone7);
        org.joda.time.chrono.GJChronology gJChronology9 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone8);
        org.joda.time.DurationField durationField10 = gJChronology9.halfdays();
        java.util.TimeZone timeZone11 = null;
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forTimeZone(timeZone11);
        org.joda.time.chrono.GJChronology gJChronology13 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone12);
        long long17 = dateTimeZone12.convertLocalToUTC((long) (byte) -1, true, 0L);
        boolean boolean19 = dateTimeZone12.equals((java.lang.Object) true);
        org.joda.time.Chronology chronology20 = gJChronology9.withZone(dateTimeZone12);
        org.joda.time.MutableDateTime mutableDateTime21 = instant1.toMutableDateTime(dateTimeZone12);
        boolean boolean22 = mutableDateTime21.isAfterNow();
        java.util.TimeZone timeZone23 = null;
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forTimeZone(timeZone23);
        org.joda.time.chrono.GJChronology gJChronology25 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone24);
        org.joda.time.DurationField durationField26 = gJChronology25.halfdays();
        long long30 = gJChronology25.add((long) 'a', (-1L), (int) (short) 0);
        boolean boolean31 = mutableDateTime21.equals((java.lang.Object) gJChronology25);
        org.joda.time.Instant instant33 = new org.joda.time.Instant(52L);
        boolean boolean34 = instant33.isEqualNow();
        org.joda.time.ReadableDuration readableDuration35 = null;
        org.joda.time.Instant instant36 = instant33.plus(readableDuration35);
        long long37 = instant33.getMillis();
        java.lang.String str38 = instant33.toString();
        boolean boolean40 = instant33.isAfter((long) (-1));
        org.joda.time.Instant instant41 = instant33.toInstant();
        boolean boolean42 = mutableDateTime21.isEqual((org.joda.time.ReadableInstant) instant41);
        boolean boolean44 = mutableDateTime21.isBefore(5185792L);
        org.joda.time.Instant instant46 = new org.joda.time.Instant(52L);
        boolean boolean47 = instant46.isEqualNow();
        java.lang.String str48 = instant46.toString();
        org.joda.time.Instant instant50 = new org.joda.time.Instant(52L);
        boolean boolean51 = instant50.isEqualNow();
        java.lang.String str52 = instant50.toString();
        java.lang.String str53 = instant50.toString();
        org.joda.time.Instant instant56 = instant50.withDurationAdded(115200000L, (int) (short) 1);
        int int57 = instant46.compareTo((org.joda.time.ReadableInstant) instant50);
        org.joda.time.MutableDateTime mutableDateTime58 = instant46.toMutableDateTime();
        boolean boolean59 = mutableDateTime21.isAfter((org.joda.time.ReadableInstant) mutableDateTime58);
        java.lang.String str60 = mutableDateTime21.toString();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and mutableDateTime58", (instant1.compareTo(mutableDateTime58) == 0) == instant1.equals(mutableDateTime58));
    }

    @Test
    public void test0380() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0380");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.util.Locale locale3 = java.util.Locale.ENGLISH;
        java.lang.String str4 = dateTimeZone1.getShortName((-2246399965L), locale3);
        java.util.Locale locale7 = new java.util.Locale("hi!");
        java.lang.String str8 = locale7.getCountry();
        java.lang.String str9 = locale7.getScript();
        java.util.Locale locale10 = java.util.Locale.ITALIAN;
        java.util.Locale locale11 = locale10.stripExtensions();
        java.util.Locale locale12 = java.util.Locale.CANADA;
        java.lang.String str13 = locale10.getDisplayVariant(locale12);
        java.lang.String str14 = locale7.getDisplayScript(locale10);
        java.util.Locale locale16 = java.util.Locale.forLanguageTag("");
        java.util.Locale locale17 = java.util.Locale.GERMAN;
        java.lang.String str18 = locale17.getDisplayCountry();
        java.lang.String str19 = locale16.getDisplayLanguage(locale17);
        java.lang.String str20 = locale7.getDisplayScript(locale17);
        java.util.Locale locale21 = locale17.stripExtensions();
        java.util.Set<java.lang.String> strSet22 = locale21.getUnicodeLocaleAttributes();
        java.lang.String str23 = dateTimeZone1.getName((long) (short) 100, locale21);
        boolean boolean25 = dateTimeZone1.isStandardOffset((-3155695200000L));
        org.joda.time.Instant instant27 = new org.joda.time.Instant(52L);
        boolean boolean28 = instant27.isEqualNow();
        java.lang.String str29 = instant27.toString();
        java.util.TimeZone timeZone30 = null;
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forTimeZone(timeZone30);
        org.joda.time.chrono.GJChronology gJChronology32 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone31);
        java.util.Locale locale34 = new java.util.Locale("hi!");
        java.lang.String str35 = locale34.getCountry();
        java.util.Locale locale36 = java.util.Locale.getDefault();
        java.lang.String str37 = locale36.getDisplayName();
        java.lang.String str38 = locale34.getDisplayScript(locale36);
        boolean boolean39 = dateTimeZone31.equals((java.lang.Object) locale36);
        int int41 = dateTimeZone31.getOffsetFromLocal((long) (short) 10);
        java.util.TimeZone timeZone42 = null;
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.forTimeZone(timeZone42);
        org.joda.time.chrono.GJChronology gJChronology44 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone43);
        org.joda.time.DateTimeField dateTimeField45 = gJChronology44.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField46 = gJChronology44.weekyearOfCentury();
        org.joda.time.Instant instant47 = gJChronology44.getGregorianCutover();
        org.joda.time.Instant instant49 = instant47.withMillis(0L);
        org.joda.time.Instant instant51 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone52 = null;
        org.joda.time.DateTimeZone dateTimeZone53 = org.joda.time.DateTimeZone.forTimeZone(timeZone52);
        org.joda.time.chrono.GJChronology gJChronology54 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone53);
        org.joda.time.DateTimeField dateTimeField55 = gJChronology54.millisOfSecond();
        int int56 = instant51.get(dateTimeField55);
        org.joda.time.Instant instant58 = instant51.plus(0L);
        int int59 = instant49.compareTo((org.joda.time.ReadableInstant) instant58);
        org.joda.time.DateTimeFieldType dateTimeFieldType60 = null;
        boolean boolean61 = instant58.isSupported(dateTimeFieldType60);
        int int62 = dateTimeZone31.getOffset((org.joda.time.ReadableInstant) instant58);
        boolean boolean63 = instant27.isAfter((org.joda.time.ReadableInstant) instant58);
        org.joda.time.ReadableDuration readableDuration64 = null;
        org.joda.time.Instant instant65 = instant27.minus(readableDuration64);
        org.joda.time.Instant instant66 = instant65.toInstant();
        org.joda.time.DateTime dateTime67 = instant65.toDateTime();
        int int68 = dateTimeZone1.getOffset((org.joda.time.ReadableInstant) instant65);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant65 and dateTime67", (instant65.compareTo(dateTime67) == 0) == instant65.equals(dateTime67));
    }

    @Test
    public void test0381() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0381");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        boolean boolean2 = instant1.isEqualNow();
        org.joda.time.ReadableDuration readableDuration3 = null;
        org.joda.time.Instant instant4 = instant1.plus(readableDuration3);
        org.joda.time.Instant instant6 = new org.joda.time.Instant(52L);
        org.joda.time.Instant instant8 = instant6.withMillis((long) 'u');
        boolean boolean9 = instant1.isBefore((org.joda.time.ReadableInstant) instant6);
        org.joda.time.DateTimeZone dateTimeZone10 = instant6.getZone();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetMillis((int) '4');
        java.util.TimeZone timeZone13 = dateTimeZone12.toTimeZone();
        long long16 = dateTimeZone12.adjustOffset((long) 0, false);
        int int18 = dateTimeZone12.getOffsetFromLocal((-26438399999L));
        java.util.TimeZone timeZone19 = dateTimeZone12.toTimeZone();
        java.lang.String str20 = dateTimeZone12.getID();
        org.joda.time.DateTime dateTime21 = instant6.toDateTime(dateTimeZone12);
        java.util.TimeZone timeZone22 = null;
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        java.lang.String str25 = dateTimeZone23.getNameKey((long) 100);
        boolean boolean26 = dateTimeZone23.isFixed();
        java.util.Locale locale30 = new java.util.Locale("DurationField[halfdays]", "\u82f1\u6587");
        java.lang.String str31 = dateTimeZone23.getName((long) (short) 10, locale30);
        java.lang.String str33 = dateTimeZone23.getNameKey(17296800000L);
        long long36 = dateTimeZone23.adjustOffset(4492800100L, true);
        org.joda.time.DateTime dateTime37 = dateTime21.toDateTime(dateTimeZone23);
        org.joda.time.Instant instant39 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone40 = null;
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.forTimeZone(timeZone40);
        org.joda.time.chrono.GJChronology gJChronology42 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone41);
        org.joda.time.DateTimeField dateTimeField43 = gJChronology42.millisOfSecond();
        int int44 = instant39.get(dateTimeField43);
        org.joda.time.Instant instant46 = instant39.plus(0L);
        java.util.TimeZone timeZone47 = null;
        org.joda.time.DateTimeZone dateTimeZone48 = org.joda.time.DateTimeZone.forTimeZone(timeZone47);
        org.joda.time.chrono.GJChronology gJChronology49 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone48);
        org.joda.time.DurationField durationField50 = gJChronology49.halfdays();
        org.joda.time.Chronology chronology51 = gJChronology49.withUTC();
        java.lang.String str52 = gJChronology49.toString();
        org.joda.time.DateTimeField dateTimeField53 = gJChronology49.hourOfHalfday();
        int int54 = instant39.get(dateTimeField53);
        org.joda.time.Instant instant56 = new org.joda.time.Instant(52L);
        boolean boolean57 = instant56.isEqualNow();
        java.lang.String str58 = instant56.toString();
        org.joda.time.Instant instant60 = new org.joda.time.Instant(52L);
        boolean boolean61 = instant60.isEqualNow();
        java.lang.String str62 = instant60.toString();
        java.lang.String str63 = instant60.toString();
        org.joda.time.Instant instant66 = instant60.withDurationAdded(115200000L, (int) (short) 1);
        int int67 = instant56.compareTo((org.joda.time.ReadableInstant) instant60);
        org.joda.time.Instant instant69 = new org.joda.time.Instant(52L);
        boolean boolean70 = instant69.isEqualNow();
        org.joda.time.ReadableDuration readableDuration71 = null;
        org.joda.time.Instant instant72 = instant69.plus(readableDuration71);
        boolean boolean74 = instant72.equals((java.lang.Object) ' ');
        boolean boolean75 = instant60.isAfter((org.joda.time.ReadableInstant) instant72);
        int int76 = instant39.compareTo((org.joda.time.ReadableInstant) instant60);
        long long77 = instant60.getMillis();
        org.joda.time.Instant instant79 = instant60.minus(4004L);
        java.util.TimeZone timeZone80 = null;
        org.joda.time.DateTimeZone dateTimeZone81 = org.joda.time.DateTimeZone.forTimeZone(timeZone80);
        java.lang.String str83 = dateTimeZone81.getNameKey((long) 100);
        boolean boolean84 = dateTimeZone81.isFixed();
        org.joda.time.chrono.GJChronology gJChronology85 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone81);
        int int86 = gJChronology85.getMinimumDaysInFirstWeek();
        java.lang.String str87 = gJChronology85.toString();
        org.joda.time.DateTimeField dateTimeField88 = gJChronology85.yearOfEra();
        org.joda.time.DateTimeField dateTimeField89 = gJChronology85.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField90 = gJChronology85.dayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone91 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology92 = gJChronology85.withZone(dateTimeZone91);
        boolean boolean93 = instant79.equals((java.lang.Object) dateTimeZone91);
        boolean boolean94 = dateTime37.isAfter((org.joda.time.ReadableInstant) instant79);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and dateTime37", (instant1.compareTo(dateTime37) == 0) == instant1.equals(dateTime37));
    }

    @Test
    public void test0382() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0382");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = gJChronology2.halfdays();
        long long7 = gJChronology2.add((long) 'a', (-1L), (int) (short) 0);
        org.joda.time.DateTimeField dateTimeField8 = gJChronology2.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField9 = gJChronology2.secondOfMinute();
        org.joda.time.Instant instant11 = new org.joda.time.Instant(52L);
        boolean boolean12 = instant11.isEqualNow();
        org.joda.time.ReadableDuration readableDuration13 = null;
        org.joda.time.Instant instant14 = instant11.plus(readableDuration13);
        boolean boolean15 = gJChronology2.equals((java.lang.Object) instant11);
        java.util.TimeZone timeZone16 = null;
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forTimeZone(timeZone16);
        org.joda.time.chrono.GJChronology gJChronology18 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone17);
        org.joda.time.DurationField durationField19 = gJChronology18.halfdays();
        org.joda.time.DateTimeField dateTimeField20 = gJChronology18.millisOfDay();
        org.joda.time.DateTimeField dateTimeField21 = gJChronology18.minuteOfDay();
        org.joda.time.DurationField durationField22 = gJChronology18.centuries();
        org.joda.time.DateTimeField dateTimeField23 = gJChronology18.dayOfYear();
        java.lang.String str24 = gJChronology18.toString();
        org.joda.time.DateTimeField dateTimeField25 = gJChronology18.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone26 = gJChronology18.getZone();
        org.joda.time.DateTime dateTime27 = instant11.toDateTime((org.joda.time.Chronology) gJChronology18);
        org.joda.time.DurationField durationField28 = gJChronology18.weekyears();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant11 and dateTime27", (instant11.compareTo(dateTime27) == 0) == instant11.equals(dateTime27));
    }

    @Test
    public void test0383() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0383");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        boolean boolean2 = instant1.isEqualNow();
        org.joda.time.ReadableDuration readableDuration3 = null;
        org.joda.time.Instant instant4 = instant1.plus(readableDuration3);
        org.joda.time.Instant instant6 = instant1.withMillis((long) 4);
        boolean boolean7 = instant6.isBeforeNow();
        boolean boolean9 = instant6.isBefore(5185792L);
        org.joda.time.MutableDateTime mutableDateTime10 = instant6.toMutableDateTime();
        org.joda.time.Instant instant12 = new org.joda.time.Instant(52L);
        boolean boolean13 = instant12.isEqualNow();
        java.lang.String str14 = instant12.toString();
        java.lang.String str15 = instant12.toString();
        org.joda.time.Instant instant18 = instant12.withDurationAdded(115200000L, (int) (short) 1);
        boolean boolean19 = instant18.isBeforeNow();
        org.joda.time.DateTime dateTime20 = instant18.toDateTimeISO();
        int int21 = mutableDateTime10.compareTo((org.joda.time.ReadableInstant) instant18);
        java.util.TimeZone timeZone22 = null;
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        org.joda.time.chrono.GJChronology gJChronology24 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone23);
        org.joda.time.DurationField durationField25 = gJChronology24.halfdays();
        long long29 = gJChronology24.add(0L, (long) (short) -1, (int) '4');
        java.util.TimeZone timeZone30 = null;
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forTimeZone(timeZone30);
        org.joda.time.chrono.GJChronology gJChronology32 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone31);
        org.joda.time.DurationField durationField33 = gJChronology32.halfdays();
        org.joda.time.DateTimeField dateTimeField34 = gJChronology32.millisOfDay();
        org.joda.time.DateTimeField dateTimeField35 = gJChronology32.minuteOfDay();
        org.joda.time.DurationField durationField36 = gJChronology32.centuries();
        org.joda.time.DateTimeField dateTimeField37 = gJChronology32.dayOfYear();
        java.lang.String str38 = gJChronology32.toString();
        org.joda.time.DurationField durationField39 = gJChronology32.years();
        org.joda.time.DateTimeField dateTimeField40 = gJChronology32.yearOfEra();
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(0, (int) (short) 10);
        org.joda.time.Chronology chronology44 = gJChronology32.withZone(dateTimeZone43);
        org.joda.time.Chronology chronology45 = gJChronology24.withZone(dateTimeZone43);
        org.joda.time.DurationField durationField46 = gJChronology24.halfdays();
        org.joda.time.Instant instant47 = gJChronology24.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration48 = null;
        org.joda.time.Instant instant49 = instant47.plus(readableDuration48);
        org.joda.time.DateTime dateTime50 = instant49.toDateTimeISO();
        boolean boolean51 = instant18.isAfter((org.joda.time.ReadableInstant) instant49);
        org.joda.time.DateTime dateTime52 = instant49.toDateTime();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant6 and mutableDateTime10", (instant6.compareTo(mutableDateTime10) == 0) == instant6.equals(mutableDateTime10));
    }

    @Test
    public void test0384() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0384");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        boolean boolean2 = instant1.isEqualNow();
        java.lang.String str3 = instant1.toString();
        java.lang.String str4 = instant1.toString();
        org.joda.time.Instant instant7 = instant1.withDurationAdded(115200000L, (int) (short) 1);
        boolean boolean8 = instant7.isBeforeNow();
        org.joda.time.DateTime dateTime9 = instant7.toDateTimeISO();
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = null;
        boolean boolean11 = instant7.isSupported(dateTimeFieldType10);
        org.joda.time.Instant instant13 = instant7.plus(3155695200000L);
        boolean boolean14 = instant13.isAfterNow();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant7 and dateTime9", (instant7.compareTo(dateTime9) == 0) == instant7.equals(dateTime9));
    }

    @Test
    public void test0385() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0385");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forTimeZone(timeZone2);
        org.joda.time.chrono.GJChronology gJChronology4 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone3);
        org.joda.time.DateTimeField dateTimeField5 = gJChronology4.millisOfSecond();
        int int6 = instant1.get(dateTimeField5);
        org.joda.time.Instant instant8 = instant1.plus(0L);
        java.util.TimeZone timeZone9 = null;
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forTimeZone(timeZone9);
        org.joda.time.chrono.GJChronology gJChronology11 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone10);
        org.joda.time.DurationField durationField12 = gJChronology11.halfdays();
        org.joda.time.Chronology chronology13 = gJChronology11.withUTC();
        java.lang.String str14 = gJChronology11.toString();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology11.hourOfHalfday();
        int int16 = instant1.get(dateTimeField15);
        org.joda.time.Instant instant18 = new org.joda.time.Instant(52L);
        boolean boolean19 = instant18.isEqualNow();
        java.lang.String str20 = instant18.toString();
        org.joda.time.Instant instant22 = new org.joda.time.Instant(52L);
        boolean boolean23 = instant22.isEqualNow();
        java.lang.String str24 = instant22.toString();
        java.lang.String str25 = instant22.toString();
        org.joda.time.Instant instant28 = instant22.withDurationAdded(115200000L, (int) (short) 1);
        int int29 = instant18.compareTo((org.joda.time.ReadableInstant) instant22);
        org.joda.time.Instant instant31 = new org.joda.time.Instant(52L);
        boolean boolean32 = instant31.isEqualNow();
        org.joda.time.ReadableDuration readableDuration33 = null;
        org.joda.time.Instant instant34 = instant31.plus(readableDuration33);
        boolean boolean36 = instant34.equals((java.lang.Object) ' ');
        boolean boolean37 = instant22.isAfter((org.joda.time.ReadableInstant) instant34);
        int int38 = instant1.compareTo((org.joda.time.ReadableInstant) instant22);
        long long39 = instant1.getMillis();
        org.joda.time.DateTime dateTime40 = instant1.toDateTimeISO();
        org.joda.time.Instant instant41 = new org.joda.time.Instant((java.lang.Object) instant1);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and dateTime40", (instant1.compareTo(dateTime40) == 0) == instant1.equals(dateTime40));
    }

    @Test
    public void test0386() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0386");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        org.joda.time.Instant instant3 = instant1.withMillis((long) 'u');
        java.util.TimeZone timeZone4 = null;
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forTimeZone(timeZone4);
        org.joda.time.chrono.GJChronology gJChronology6 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone5);
        org.joda.time.DurationField durationField7 = gJChronology6.halfdays();
        long long11 = gJChronology6.add((long) 'a', (-1L), (int) (short) 0);
        boolean boolean13 = gJChronology6.equals((java.lang.Object) 0);
        org.joda.time.DateTimeField dateTimeField14 = gJChronology6.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology6.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField16 = gJChronology6.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField17 = gJChronology6.clockhourOfHalfday();
        org.joda.time.DateTime dateTime18 = instant1.toDateTime((org.joda.time.Chronology) gJChronology6);
        java.util.TimeZone timeZone19 = null;
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forTimeZone(timeZone19);
        org.joda.time.chrono.GJChronology gJChronology21 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone20);
        org.joda.time.DurationField durationField22 = gJChronology21.halfdays();
        long long26 = gJChronology21.add((long) 'a', (-1L), (int) (short) 0);
        long long30 = gJChronology21.add((long) (byte) 0, (long) '4', 100);
        org.joda.time.DateTimeField dateTimeField31 = gJChronology21.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField32 = gJChronology21.year();
        org.joda.time.DateTimeField dateTimeField33 = gJChronology21.monthOfYear();
        org.joda.time.MutableDateTime mutableDateTime34 = instant1.toMutableDateTime((org.joda.time.Chronology) gJChronology21);
        boolean boolean36 = instant1.isAfter(4324200000L);
        org.joda.time.Instant instant38 = instant1.minus(3692163384000L);
        org.joda.time.Instant instant40 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone41 = null;
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.forTimeZone(timeZone41);
        org.joda.time.chrono.GJChronology gJChronology43 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone42);
        org.joda.time.DateTimeField dateTimeField44 = gJChronology43.millisOfSecond();
        int int45 = instant40.get(dateTimeField44);
        org.joda.time.Instant instant47 = instant40.plus(0L);
        java.util.TimeZone timeZone48 = null;
        org.joda.time.DateTimeZone dateTimeZone49 = org.joda.time.DateTimeZone.forTimeZone(timeZone48);
        org.joda.time.chrono.GJChronology gJChronology50 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone49);
        org.joda.time.DurationField durationField51 = gJChronology50.halfdays();
        org.joda.time.Chronology chronology52 = gJChronology50.withUTC();
        java.lang.String str53 = gJChronology50.toString();
        org.joda.time.DateTimeField dateTimeField54 = gJChronology50.hourOfHalfday();
        int int55 = instant40.get(dateTimeField54);
        java.util.TimeZone timeZone56 = null;
        org.joda.time.DateTimeZone dateTimeZone57 = org.joda.time.DateTimeZone.forTimeZone(timeZone56);
        org.joda.time.chrono.GJChronology gJChronology58 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone57);
        org.joda.time.DurationField durationField59 = gJChronology58.halfdays();
        long long63 = gJChronology58.add((long) 'a', (-1L), (int) (short) 0);
        org.joda.time.DateTimeField dateTimeField64 = gJChronology58.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField65 = gJChronology58.secondOfMinute();
        org.joda.time.Instant instant67 = new org.joda.time.Instant(52L);
        boolean boolean68 = instant67.isEqualNow();
        org.joda.time.ReadableDuration readableDuration69 = null;
        org.joda.time.Instant instant70 = instant67.plus(readableDuration69);
        boolean boolean71 = gJChronology58.equals((java.lang.Object) instant67);
        org.joda.time.DateTimeFieldType dateTimeFieldType72 = null;
        boolean boolean73 = instant67.isSupported(dateTimeFieldType72);
        org.joda.time.DateTimeFieldType dateTimeFieldType74 = null;
        boolean boolean75 = instant67.isSupported(dateTimeFieldType74);
        org.joda.time.DateTimeZone dateTimeZone76 = instant67.getZone();
        boolean boolean77 = instant40.isAfter((org.joda.time.ReadableInstant) instant67);
        org.joda.time.Instant instant78 = instant40.toInstant();
        boolean boolean79 = instant1.isEqual((org.joda.time.ReadableInstant) instant40);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime18 and instant40", (dateTime18.compareTo(instant40) == 0) == dateTime18.equals(instant40));
    }

    @Test
    public void test0387() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0387");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forTimeZone(timeZone2);
        org.joda.time.chrono.GJChronology gJChronology4 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone3);
        org.joda.time.DateTimeField dateTimeField5 = gJChronology4.millisOfSecond();
        int int6 = instant1.get(dateTimeField5);
        org.joda.time.Instant instant8 = instant1.plus(0L);
        org.joda.time.Instant instant9 = instant8.toInstant();
        org.joda.time.Instant instant11 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone12 = null;
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forTimeZone(timeZone12);
        org.joda.time.chrono.GJChronology gJChronology14 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone13);
        org.joda.time.DateTimeField dateTimeField15 = gJChronology14.millisOfSecond();
        int int16 = instant11.get(dateTimeField15);
        org.joda.time.Instant instant18 = instant11.plus(0L);
        org.joda.time.Instant instant19 = instant18.toInstant();
        boolean boolean20 = instant9.isEqual((org.joda.time.ReadableInstant) instant19);
        java.util.TimeZone timeZone21 = null;
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forTimeZone(timeZone21);
        org.joda.time.chrono.GJChronology gJChronology23 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone22);
        org.joda.time.DurationField durationField24 = gJChronology23.halfdays();
        long long28 = gJChronology23.add((long) 'a', (-1L), (int) (short) 0);
        boolean boolean30 = gJChronology23.equals((java.lang.Object) 0);
        org.joda.time.DateTimeField dateTimeField31 = gJChronology23.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField32 = gJChronology23.hourOfHalfday();
        org.joda.time.Instant instant33 = gJChronology23.getGregorianCutover();
        org.joda.time.MutableDateTime mutableDateTime34 = instant9.toMutableDateTime((org.joda.time.Chronology) gJChronology23);
        java.lang.String str35 = gJChronology23.toString();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and mutableDateTime34", (instant1.compareTo(mutableDateTime34) == 0) == instant1.equals(mutableDateTime34));
    }

    @Test
    public void test0388() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0388");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forTimeZone(timeZone2);
        org.joda.time.chrono.GJChronology gJChronology4 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone3);
        org.joda.time.DateTimeField dateTimeField5 = gJChronology4.millisOfSecond();
        int int6 = instant1.get(dateTimeField5);
        org.joda.time.Instant instant8 = instant1.plus(0L);
        org.joda.time.Instant instant9 = instant8.toInstant();
        org.joda.time.Instant instant11 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone12 = null;
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forTimeZone(timeZone12);
        org.joda.time.chrono.GJChronology gJChronology14 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone13);
        org.joda.time.DateTimeField dateTimeField15 = gJChronology14.millisOfSecond();
        int int16 = instant11.get(dateTimeField15);
        org.joda.time.Instant instant18 = instant11.plus(0L);
        org.joda.time.Instant instant19 = instant18.toInstant();
        boolean boolean20 = instant9.isEqual((org.joda.time.ReadableInstant) instant19);
        java.util.TimeZone timeZone21 = null;
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forTimeZone(timeZone21);
        org.joda.time.chrono.GJChronology gJChronology23 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone22);
        org.joda.time.DurationField durationField24 = gJChronology23.halfdays();
        long long28 = gJChronology23.add((long) 'a', (-1L), (int) (short) 0);
        boolean boolean30 = gJChronology23.equals((java.lang.Object) 0);
        org.joda.time.DateTimeField dateTimeField31 = gJChronology23.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField32 = gJChronology23.hourOfHalfday();
        org.joda.time.Instant instant33 = gJChronology23.getGregorianCutover();
        org.joda.time.MutableDateTime mutableDateTime34 = instant9.toMutableDateTime((org.joda.time.Chronology) gJChronology23);
        org.joda.time.DateTimeField dateTimeField35 = gJChronology23.yearOfCentury();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and mutableDateTime34", (instant1.compareTo(mutableDateTime34) == 0) == instant1.equals(mutableDateTime34));
    }

    @Test
    public void test0389() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0389");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        boolean boolean2 = instant1.isEqualNow();
        java.lang.String str3 = instant1.toString();
        java.lang.String str4 = instant1.toString();
        org.joda.time.Instant instant6 = new org.joda.time.Instant(52L);
        boolean boolean7 = instant6.isEqualNow();
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.Instant instant9 = instant6.plus(readableDuration8);
        boolean boolean10 = instant1.isBefore((org.joda.time.ReadableInstant) instant9);
        org.joda.time.Instant instant12 = instant9.plus((long) (short) 100);
        java.lang.String str13 = instant9.toString();
        boolean boolean15 = instant9.isBefore((-3155695200000L));
        java.util.TimeZone timeZone16 = null;
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forTimeZone(timeZone16);
        org.joda.time.chrono.GJChronology gJChronology18 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone17);
        long long22 = dateTimeZone17.convertLocalToUTC((long) (byte) -1, true, 0L);
        boolean boolean24 = dateTimeZone17.equals((java.lang.Object) true);
        java.util.Locale locale26 = java.util.Locale.getDefault();
        java.lang.String str27 = locale26.getDisplayLanguage();
        java.lang.String str28 = locale26.toLanguageTag();
        java.lang.String str29 = dateTimeZone17.getShortName(0L, locale26);
        java.util.TimeZone timeZone30 = null;
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forTimeZone(timeZone30);
        org.joda.time.chrono.GJChronology gJChronology32 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone31);
        org.joda.time.DateTimeField dateTimeField33 = gJChronology32.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField34 = gJChronology32.weekyearOfCentury();
        org.joda.time.Instant instant35 = gJChronology32.getGregorianCutover();
        org.joda.time.Instant instant37 = instant35.withMillis(0L);
        org.joda.time.chrono.GJChronology gJChronology39 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone17, (org.joda.time.ReadableInstant) instant35, 4);
        java.util.TimeZone timeZone40 = null;
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.forTimeZone(timeZone40);
        org.joda.time.chrono.GJChronology gJChronology42 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone41);
        org.joda.time.DateTimeField dateTimeField43 = gJChronology42.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField44 = gJChronology42.weekyearOfCentury();
        org.joda.time.Instant instant45 = gJChronology42.getGregorianCutover();
        org.joda.time.Instant instant47 = instant45.withMillis(0L);
        org.joda.time.Instant instant49 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone50 = null;
        org.joda.time.DateTimeZone dateTimeZone51 = org.joda.time.DateTimeZone.forTimeZone(timeZone50);
        org.joda.time.chrono.GJChronology gJChronology52 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone51);
        org.joda.time.DateTimeField dateTimeField53 = gJChronology52.millisOfSecond();
        int int54 = instant49.get(dateTimeField53);
        org.joda.time.Instant instant56 = instant49.plus(0L);
        int int57 = instant47.compareTo((org.joda.time.ReadableInstant) instant56);
        org.joda.time.Instant instant59 = new org.joda.time.Instant(52L);
        boolean boolean60 = instant59.isEqualNow();
        org.joda.time.ReadableDuration readableDuration61 = null;
        org.joda.time.Instant instant62 = instant59.plus(readableDuration61);
        boolean boolean64 = instant62.equals((java.lang.Object) ' ');
        boolean boolean65 = instant56.isEqual((org.joda.time.ReadableInstant) instant62);
        java.lang.String str66 = instant56.toString();
        org.joda.time.ReadableDuration readableDuration67 = null;
        org.joda.time.Instant instant69 = instant56.withDurationAdded(readableDuration67, 1431201);
        int int70 = dateTimeZone17.getOffset((org.joda.time.ReadableInstant) instant56);
        int int71 = instant9.compareTo((org.joda.time.ReadableInstant) instant56);
        org.joda.time.Instant instant73 = new org.joda.time.Instant(52L);
        boolean boolean74 = instant73.isEqualNow();
        boolean boolean76 = instant73.isEqual(0L);
        java.util.TimeZone timeZone77 = null;
        org.joda.time.DateTimeZone dateTimeZone78 = org.joda.time.DateTimeZone.forTimeZone(timeZone77);
        org.joda.time.chrono.GJChronology gJChronology79 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone78);
        org.joda.time.DurationField durationField80 = gJChronology79.halfdays();
        long long84 = gJChronology79.add((long) 'a', (-1L), (int) (short) 0);
        boolean boolean86 = gJChronology79.equals((java.lang.Object) 0);
        org.joda.time.DateTimeField dateTimeField87 = gJChronology79.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField88 = gJChronology79.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField89 = gJChronology79.clockhourOfDay();
        long long93 = gJChronology79.add(262974600000L, (-4199880L), (int) (short) -1);
        org.joda.time.DateTimeField dateTimeField94 = gJChronology79.year();
        org.joda.time.MutableDateTime mutableDateTime95 = instant73.toMutableDateTime((org.joda.time.Chronology) gJChronology79);
        int int96 = instant9.compareTo((org.joda.time.ReadableInstant) instant73);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and mutableDateTime95", (instant1.compareTo(mutableDateTime95) == 0) == instant1.equals(mutableDateTime95));
    }

    @Test
    public void test0390() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0390");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forTimeZone(timeZone2);
        org.joda.time.chrono.GJChronology gJChronology4 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone3);
        org.joda.time.DateTimeField dateTimeField5 = gJChronology4.millisOfSecond();
        int int6 = instant1.get(dateTimeField5);
        org.joda.time.Instant instant8 = instant1.plus(0L);
        org.joda.time.Instant instant9 = instant8.toInstant();
        org.joda.time.Instant instant11 = new org.joda.time.Instant(52L);
        boolean boolean12 = instant11.isEqualNow();
        java.lang.String str13 = instant11.toString();
        java.lang.String str14 = instant11.toString();
        org.joda.time.Instant instant16 = new org.joda.time.Instant(52L);
        boolean boolean17 = instant16.isEqualNow();
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.Instant instant19 = instant16.plus(readableDuration18);
        boolean boolean20 = instant11.isBefore((org.joda.time.ReadableInstant) instant19);
        org.joda.time.Instant instant22 = instant11.minus((long) 0);
        int int23 = instant8.compareTo((org.joda.time.ReadableInstant) instant11);
        org.joda.time.Instant instant26 = instant11.withDurationAdded((long) (short) 100, 70);
        org.joda.time.ReadableInstant readableInstant27 = null;
        boolean boolean28 = instant11.isBefore(readableInstant27);
        java.lang.String str29 = instant11.toString();
        org.joda.time.MutableDateTime mutableDateTime30 = instant11.toMutableDateTimeISO();
        java.util.TimeZone timeZone31 = null;
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.forTimeZone(timeZone31);
        org.joda.time.chrono.GJChronology gJChronology33 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone32);
        org.joda.time.DateTimeField dateTimeField34 = gJChronology33.millisOfSecond();
        org.joda.time.DurationField durationField35 = gJChronology33.weeks();
        org.joda.time.DurationField durationField36 = gJChronology33.months();
        org.joda.time.DurationField durationField37 = gJChronology33.days();
        org.joda.time.DateTimeField dateTimeField38 = gJChronology33.millisOfDay();
        org.joda.time.DateTime dateTime39 = instant11.toDateTime((org.joda.time.Chronology) gJChronology33);
        org.joda.time.DateTimeField dateTimeField40 = gJChronology33.dayOfMonth();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and dateTime39", (instant1.compareTo(dateTime39) == 0) == instant1.equals(dateTime39));
    }

    @Test
    public void test0391() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0391");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        boolean boolean2 = instant1.isEqualNow();
        java.lang.String str3 = instant1.toString();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.MutableDateTime mutableDateTime5 = instant1.toMutableDateTime(chronology4);
        org.joda.time.MutableDateTime mutableDateTime6 = instant1.toMutableDateTime();
        java.util.TimeZone timeZone7 = null;
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forTimeZone(timeZone7);
        org.joda.time.chrono.GJChronology gJChronology9 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone8);
        org.joda.time.DateTimeField dateTimeField10 = gJChronology9.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField11 = gJChronology9.weekyear();
        org.joda.time.DurationField durationField12 = gJChronology9.centuries();
        org.joda.time.DateTimeField dateTimeField13 = gJChronology9.millisOfDay();
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        long long17 = gJChronology9.add(readablePeriod14, (long) '4', (int) (byte) -1);
        org.joda.time.DurationField durationField18 = gJChronology9.weekyears();
        org.joda.time.DateTime dateTime19 = instant1.toDateTime((org.joda.time.Chronology) gJChronology9);
        org.joda.time.DateTimeField dateTimeField20 = gJChronology9.weekyearOfCentury();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and dateTime19", (instant1.compareTo(dateTime19) == 0) == instant1.equals(dateTime19));
    }

    @Test
    public void test0392() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0392");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = gJChronology2.halfdays();
        long long7 = gJChronology2.add((long) 'a', (-1L), (int) (short) 0);
        boolean boolean9 = gJChronology2.equals((java.lang.Object) 0);
        org.joda.time.DateTimeField dateTimeField10 = gJChronology2.dayOfMonth();
        org.joda.time.DurationField durationField11 = gJChronology2.seconds();
        org.joda.time.DateTimeField dateTimeField12 = gJChronology2.dayOfYear();
        org.joda.time.DateTimeField dateTimeField13 = gJChronology2.secondOfMinute();
        org.joda.time.DurationField durationField14 = gJChronology2.eras();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField14, durationField3, and durationField11", !(durationField14.compareTo(durationField3) == 0) || (Math.signum(durationField14.compareTo(durationField11)) == Math.signum(durationField3.compareTo(durationField11))));
    }

    @Test
    public void test0393() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0393");
        org.joda.time.Instant instant0 = org.joda.time.Instant.now();
        org.joda.time.Instant instant3 = instant0.withDurationAdded(306102434400000L, (int) (short) 100);
        java.util.TimeZone timeZone4 = null;
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forTimeZone(timeZone4);
        java.lang.String str7 = dateTimeZone5.getNameKey((long) 100);
        boolean boolean8 = dateTimeZone5.isFixed();
        org.joda.time.chrono.GJChronology gJChronology9 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone5);
        long long11 = dateTimeZone5.convertUTCToLocal(5200L);
        org.joda.time.chrono.GJChronology gJChronology12 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone5);
        org.joda.time.MutableDateTime mutableDateTime13 = instant0.toMutableDateTime(dateTimeZone5);
        boolean boolean14 = instant0.isBeforeNow();
        java.util.TimeZone timeZone15 = null;
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forTimeZone(timeZone15);
        org.joda.time.chrono.GJChronology gJChronology17 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone16);
        org.joda.time.DurationField durationField18 = gJChronology17.halfdays();
        org.joda.time.DateTimeField dateTimeField19 = gJChronology17.millisOfDay();
        org.joda.time.DateTimeField dateTimeField20 = gJChronology17.minuteOfDay();
        org.joda.time.DurationField durationField21 = gJChronology17.centuries();
        org.joda.time.DateTimeField dateTimeField22 = gJChronology17.clockhourOfDay();
        org.joda.time.DateTime dateTime23 = instant0.toDateTime((org.joda.time.Chronology) gJChronology17);
        org.joda.time.DateTime dateTime24 = instant0.toDateTimeISO();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime13 and dateTime23", (mutableDateTime13.compareTo(dateTime23) == 0) == mutableDateTime13.equals(dateTime23));
    }

    @Test
    public void test0394() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0394");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str3 = dateTimeZone1.getNameKey((long) 100);
        boolean boolean4 = dateTimeZone1.isFixed();
        java.util.Locale locale8 = new java.util.Locale("DurationField[halfdays]", "\u82f1\u6587");
        java.lang.String str9 = dateTimeZone1.getName((long) (short) 10, locale8);
        org.joda.time.Instant instant11 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone12 = null;
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forTimeZone(timeZone12);
        org.joda.time.chrono.GJChronology gJChronology14 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone13);
        org.joda.time.DateTimeField dateTimeField15 = gJChronology14.millisOfSecond();
        int int16 = instant11.get(dateTimeField15);
        org.joda.time.Chronology chronology17 = instant11.getChronology();
        org.joda.time.chrono.GJChronology gJChronology18 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1, (org.joda.time.ReadableInstant) instant11);
        org.joda.time.DurationField durationField19 = gJChronology18.eras();
        org.joda.time.DurationField durationField20 = gJChronology18.eras();
        org.joda.time.Chronology chronology21 = gJChronology18.withUTC();
        org.joda.time.DurationField durationField22 = chronology21.weekyears();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField19, durationField22, and durationField19", !(durationField19.compareTo(durationField22) == 0) || (Math.signum(durationField19.compareTo(durationField19)) == Math.signum(durationField22.compareTo(durationField19))));
    }

    @Test
    public void test0395() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0395");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        boolean boolean2 = instant1.isEqualNow();
        boolean boolean4 = instant1.isEqual(0L);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = null;
        boolean boolean6 = instant1.isSupported(dateTimeFieldType5);
        org.joda.time.Instant instant9 = instant1.withDurationAdded((-61827926399999L), (int) (short) -1);
        org.joda.time.MutableDateTime mutableDateTime10 = instant9.toMutableDateTime();
        java.util.TimeZone timeZone11 = null;
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forTimeZone(timeZone11);
        org.joda.time.chrono.GJChronology gJChronology13 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone12);
        org.joda.time.DurationField durationField14 = gJChronology13.halfdays();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology13.millisOfDay();
        org.joda.time.DateTimeField dateTimeField16 = gJChronology13.minuteOfDay();
        org.joda.time.DurationField durationField17 = gJChronology13.centuries();
        org.joda.time.DateTimeField dateTimeField18 = gJChronology13.dayOfYear();
        java.lang.String str19 = gJChronology13.toString();
        org.joda.time.DurationField durationField20 = gJChronology13.halfdays();
        org.joda.time.DateTimeField dateTimeField21 = gJChronology13.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField22 = gJChronology13.clockhourOfDay();
        org.joda.time.MutableDateTime mutableDateTime23 = instant9.toMutableDateTime((org.joda.time.Chronology) gJChronology13);
        org.joda.time.Instant instant24 = instant9.toInstant();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime10 and mutableDateTime23", (mutableDateTime10.compareTo(mutableDateTime23) == 0) == mutableDateTime10.equals(mutableDateTime23));
    }

    @Test
    public void test0396() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0396");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((-315566928000000L));
        java.util.TimeZone timeZone2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forTimeZone(timeZone2);
        org.joda.time.chrono.GJChronology gJChronology4 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone3);
        org.joda.time.DurationField durationField5 = gJChronology4.halfdays();
        long long9 = gJChronology4.add((long) 'a', (-1L), (int) (short) 0);
        org.joda.time.DateTimeField dateTimeField10 = gJChronology4.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField11 = gJChronology4.centuryOfEra();
        long long15 = gJChronology4.add(262974600000L, (long) (byte) 100, (int) '4');
        org.joda.time.DateTimeField dateTimeField16 = gJChronology4.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField17 = gJChronology4.weekOfWeekyear();
        org.joda.time.DateTime dateTime18 = instant1.toDateTime((org.joda.time.Chronology) gJChronology4);
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        long long22 = gJChronology4.add(readablePeriod19, 604800052L, (-313));
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and dateTime18", (instant1.compareTo(dateTime18) == 0) == instant1.equals(dateTime18));
    }

    @Test
    public void test0397() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0397");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        java.util.Locale locale4 = new java.util.Locale("hi!");
        java.lang.String str5 = locale4.getCountry();
        java.util.Locale locale6 = java.util.Locale.getDefault();
        java.lang.String str7 = locale6.getDisplayName();
        java.lang.String str8 = locale4.getDisplayScript(locale6);
        boolean boolean9 = dateTimeZone1.equals((java.lang.Object) locale6);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetMillis((int) '4');
        java.util.TimeZone timeZone12 = dateTimeZone11.toTimeZone();
        long long15 = dateTimeZone11.adjustOffset((long) 0, false);
        int int17 = dateTimeZone11.getOffsetFromLocal((-26438399999L));
        long long19 = dateTimeZone1.getMillisKeepLocal(dateTimeZone11, (long) (byte) 10);
        org.joda.time.Instant instant21 = new org.joda.time.Instant(52L);
        boolean boolean22 = instant21.isEqualNow();
        org.joda.time.ReadableDuration readableDuration23 = null;
        org.joda.time.Instant instant24 = instant21.plus(readableDuration23);
        long long25 = instant21.getMillis();
        java.lang.String str26 = instant21.toString();
        org.joda.time.Instant instant27 = instant21.toInstant();
        org.joda.time.ReadableDuration readableDuration28 = null;
        org.joda.time.Instant instant30 = instant21.withDurationAdded(readableDuration28, (int) 'x');
        java.util.TimeZone timeZone31 = null;
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.forTimeZone(timeZone31);
        org.joda.time.chrono.GJChronology gJChronology33 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone32);
        org.joda.time.DateTimeField dateTimeField34 = gJChronology33.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField35 = gJChronology33.yearOfCentury();
        int int36 = instant30.get(dateTimeField35);
        org.joda.time.chrono.GJChronology gJChronology37 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone11, (org.joda.time.ReadableInstant) instant30);
        java.util.TimeZone timeZone38 = null;
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.forTimeZone(timeZone38);
        org.joda.time.chrono.GJChronology gJChronology40 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone39);
        org.joda.time.DurationField durationField41 = gJChronology40.halfdays();
        long long45 = gJChronology40.add((long) 'a', (-1L), (int) (short) 0);
        boolean boolean47 = gJChronology40.equals((java.lang.Object) 0);
        org.joda.time.DateTimeField dateTimeField48 = gJChronology40.dayOfWeek();
        org.joda.time.DurationField durationField49 = gJChronology40.days();
        boolean boolean50 = gJChronology37.equals((java.lang.Object) gJChronology40);
        org.joda.time.DurationField durationField51 = gJChronology37.weeks();
        int int52 = gJChronology37.getMinimumDaysInFirstWeek();
        org.joda.time.DurationField durationField53 = gJChronology37.eras();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField53, durationField41, and durationField49", !(durationField53.compareTo(durationField41) == 0) || (Math.signum(durationField53.compareTo(durationField49)) == Math.signum(durationField41.compareTo(durationField49))));
    }

    @Test
    public void test0398() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0398");
        org.joda.time.Instant instant0 = org.joda.time.Instant.now();
        java.util.TimeZone timeZone1 = null;
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forTimeZone(timeZone1);
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone2);
        org.joda.time.DurationField durationField4 = gJChronology3.halfdays();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology3.millisOfDay();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology3.halfdayOfDay();
        int int7 = instant0.get(dateTimeField6);
        org.joda.time.Instant instant9 = instant0.minus(4156171L);
        java.util.TimeZone timeZone10 = null;
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forTimeZone(timeZone10);
        org.joda.time.chrono.GJChronology gJChronology12 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone11);
        org.joda.time.DurationField durationField13 = gJChronology12.halfdays();
        org.joda.time.DateTimeField dateTimeField14 = gJChronology12.millisOfDay();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology12.minuteOfDay();
        org.joda.time.DurationField durationField16 = gJChronology12.centuries();
        int int17 = gJChronology12.getMinimumDaysInFirstWeek();
        org.joda.time.DateTimeField dateTimeField18 = gJChronology12.weekyear();
        org.joda.time.DateTimeField dateTimeField19 = gJChronology12.weekOfWeekyear();
        org.joda.time.DateTime dateTime20 = instant9.toDateTime((org.joda.time.Chronology) gJChronology12);
        org.joda.time.DurationField durationField21 = gJChronology12.centuries();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant9 and dateTime20", (instant9.compareTo(dateTime20) == 0) == instant9.equals(dateTime20));
    }

    @Test
    public void test0399() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0399");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forTimeZone(timeZone2);
        org.joda.time.chrono.GJChronology gJChronology4 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone3);
        org.joda.time.DateTimeField dateTimeField5 = gJChronology4.millisOfSecond();
        int int6 = instant1.get(dateTimeField5);
        org.joda.time.Instant instant8 = instant1.plus(0L);
        org.joda.time.Instant instant9 = instant8.toInstant();
        org.joda.time.Instant instant11 = new org.joda.time.Instant(52L);
        boolean boolean12 = instant11.isEqualNow();
        java.lang.String str13 = instant11.toString();
        java.lang.String str14 = instant11.toString();
        org.joda.time.Instant instant16 = new org.joda.time.Instant(52L);
        boolean boolean17 = instant16.isEqualNow();
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.Instant instant19 = instant16.plus(readableDuration18);
        boolean boolean20 = instant11.isBefore((org.joda.time.ReadableInstant) instant19);
        org.joda.time.Instant instant22 = instant11.minus((long) 0);
        int int23 = instant8.compareTo((org.joda.time.ReadableInstant) instant11);
        org.joda.time.Instant instant26 = instant11.withDurationAdded((long) (short) 100, 70);
        org.joda.time.ReadableInstant readableInstant27 = null;
        boolean boolean28 = instant11.isBefore(readableInstant27);
        org.joda.time.Instant instant30 = new org.joda.time.Instant(52L);
        boolean boolean31 = instant30.isEqualNow();
        org.joda.time.ReadableDuration readableDuration32 = null;
        org.joda.time.Instant instant33 = instant30.plus(readableDuration32);
        long long34 = instant30.getMillis();
        java.lang.String str35 = instant30.toString();
        org.joda.time.Instant instant36 = instant30.toInstant();
        org.joda.time.ReadableDuration readableDuration37 = null;
        org.joda.time.Instant instant39 = instant30.withDurationAdded(readableDuration37, (int) 'x');
        java.util.TimeZone timeZone40 = null;
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.forTimeZone(timeZone40);
        java.lang.String str43 = dateTimeZone41.getNameKey((long) 100);
        boolean boolean44 = dateTimeZone41.isFixed();
        org.joda.time.chrono.GJChronology gJChronology45 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone41);
        java.lang.String str46 = dateTimeZone41.toString();
        org.joda.time.DateTime dateTime47 = instant39.toDateTime(dateTimeZone41);
        boolean boolean48 = instant11.isBefore((org.joda.time.ReadableInstant) dateTime47);
        java.util.TimeZone timeZone49 = null;
        org.joda.time.DateTimeZone dateTimeZone50 = org.joda.time.DateTimeZone.forTimeZone(timeZone49);
        org.joda.time.chrono.GJChronology gJChronology51 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone50);
        org.joda.time.DateTimeField dateTimeField52 = gJChronology51.era();
        org.joda.time.DateTimeField dateTimeField53 = gJChronology51.weekyear();
        org.joda.time.DateTimeField dateTimeField54 = gJChronology51.weekyearOfCentury();
        org.joda.time.DurationField durationField55 = gJChronology51.millis();
        org.joda.time.DurationField durationField56 = gJChronology51.seconds();
        org.joda.time.DateTime dateTime57 = instant11.toDateTime((org.joda.time.Chronology) gJChronology51);
        org.joda.time.Instant instant58 = instant11.toInstant();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and dateTime57", (instant1.compareTo(dateTime57) == 0) == instant1.equals(dateTime57));
    }

    @Test
    public void test0400() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0400");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str3 = dateTimeZone1.getNameKey((long) 100);
        boolean boolean4 = dateTimeZone1.isFixed();
        org.joda.time.chrono.GJChronology gJChronology5 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        int int6 = gJChronology5.getMinimumDaysInFirstWeek();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology5.clockhourOfDay();
        org.joda.time.DurationField durationField8 = gJChronology5.seconds();
        org.joda.time.DateTimeField dateTimeField9 = gJChronology5.era();
        org.joda.time.DateTimeField dateTimeField10 = gJChronology5.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField11 = gJChronology5.secondOfMinute();
        org.joda.time.DurationField durationField12 = gJChronology5.eras();
        org.joda.time.DateTimeField dateTimeField13 = gJChronology5.dayOfMonth();
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField8 and durationField12", Math.signum(durationField8.compareTo(durationField12)) == -Math.signum(durationField12.compareTo(durationField8)));
    }

    @Test
    public void test0401() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0401");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        org.joda.time.Instant instant3 = instant1.withMillis((long) 'u');
        java.util.TimeZone timeZone4 = null;
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forTimeZone(timeZone4);
        org.joda.time.chrono.GJChronology gJChronology6 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone5);
        org.joda.time.DurationField durationField7 = gJChronology6.halfdays();
        long long11 = gJChronology6.add((long) 'a', (-1L), (int) (short) 0);
        boolean boolean13 = gJChronology6.equals((java.lang.Object) 0);
        org.joda.time.DateTimeField dateTimeField14 = gJChronology6.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology6.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField16 = gJChronology6.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField17 = gJChronology6.clockhourOfHalfday();
        org.joda.time.DateTime dateTime18 = instant1.toDateTime((org.joda.time.Chronology) gJChronology6);
        java.util.TimeZone timeZone19 = null;
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forTimeZone(timeZone19);
        org.joda.time.chrono.GJChronology gJChronology21 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone20);
        org.joda.time.DurationField durationField22 = gJChronology21.halfdays();
        long long26 = gJChronology21.add((long) 'a', (-1L), (int) (short) 0);
        boolean boolean28 = gJChronology21.equals((java.lang.Object) 0);
        org.joda.time.DateTimeField dateTimeField29 = gJChronology21.dayOfMonth();
        org.joda.time.DateTime dateTime30 = instant1.toDateTime((org.joda.time.Chronology) gJChronology21);
        org.joda.time.DateTime dateTime31 = instant1.toDateTimeISO();
        org.joda.time.Instant instant32 = instant1.toInstant();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime18 and dateTime31", (dateTime18.compareTo(dateTime31) == 0) == dateTime18.equals(dateTime31));
    }

    @Test
    public void test0402() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0402");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = gJChronology2.halfdays();
        long long7 = gJChronology2.add((long) 'a', (-1L), (int) (short) 0);
        long long11 = gJChronology2.add((long) (byte) 0, (long) '4', 100);
        org.joda.time.DateTimeField dateTimeField12 = gJChronology2.minuteOfHour();
        org.joda.time.DurationField durationField13 = gJChronology2.hours();
        org.joda.time.DateTimeField dateTimeField14 = gJChronology2.monthOfYear();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology2.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField16 = gJChronology2.dayOfYear();
        org.joda.time.DateTimeField dateTimeField17 = gJChronology2.millisOfSecond();
        org.joda.time.DurationField durationField18 = gJChronology2.years();
        org.joda.time.DurationField durationField19 = gJChronology2.eras();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField19, durationField3, and durationField13", !(durationField19.compareTo(durationField3) == 0) || (Math.signum(durationField19.compareTo(durationField13)) == Math.signum(durationField3.compareTo(durationField13))));
    }

    @Test
    public void test0403() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0403");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forTimeZone(timeZone2);
        org.joda.time.chrono.GJChronology gJChronology4 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone3);
        org.joda.time.DateTimeField dateTimeField5 = gJChronology4.millisOfSecond();
        int int6 = instant1.get(dateTimeField5);
        boolean boolean7 = instant1.isEqualNow();
        org.joda.time.Instant instant9 = new org.joda.time.Instant(52L);
        boolean boolean10 = instant9.isEqualNow();
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.Instant instant12 = instant9.plus(readableDuration11);
        long long13 = instant9.getMillis();
        java.lang.Object obj14 = null;
        boolean boolean15 = instant9.equals(obj14);
        org.joda.time.Instant instant17 = new org.joda.time.Instant(52L);
        boolean boolean18 = instant17.isEqualNow();
        org.joda.time.ReadableDuration readableDuration19 = null;
        org.joda.time.Instant instant20 = instant17.plus(readableDuration19);
        long long21 = instant17.getMillis();
        java.lang.String str22 = instant17.toString();
        org.joda.time.Instant instant23 = instant17.toInstant();
        org.joda.time.ReadableDuration readableDuration24 = null;
        org.joda.time.Instant instant26 = instant17.withDurationAdded(readableDuration24, (int) 'x');
        org.joda.time.Instant instant27 = instant17.toInstant();
        int int28 = instant9.compareTo((org.joda.time.ReadableInstant) instant17);
        boolean boolean29 = instant1.isBefore((org.joda.time.ReadableInstant) instant17);
        java.util.TimeZone timeZone30 = null;
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forTimeZone(timeZone30);
        org.joda.time.chrono.GJChronology gJChronology32 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone31);
        org.joda.time.DurationField durationField33 = gJChronology32.halfdays();
        long long37 = gJChronology32.add((long) 'a', (-1L), (int) (short) 0);
        org.joda.time.DateTimeField dateTimeField38 = gJChronology32.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField39 = gJChronology32.secondOfMinute();
        org.joda.time.Instant instant41 = new org.joda.time.Instant(52L);
        boolean boolean42 = instant41.isEqualNow();
        org.joda.time.ReadableDuration readableDuration43 = null;
        org.joda.time.Instant instant44 = instant41.plus(readableDuration43);
        boolean boolean45 = gJChronology32.equals((java.lang.Object) instant41);
        org.joda.time.DateTimeFieldType dateTimeFieldType46 = null;
        boolean boolean47 = instant41.isSupported(dateTimeFieldType46);
        org.joda.time.DateTimeFieldType dateTimeFieldType48 = null;
        boolean boolean49 = instant41.isSupported(dateTimeFieldType48);
        java.lang.String str50 = instant41.toString();
        boolean boolean51 = instant1.isAfter((org.joda.time.ReadableInstant) instant41);
        java.util.TimeZone timeZone52 = null;
        org.joda.time.DateTimeZone dateTimeZone53 = org.joda.time.DateTimeZone.forTimeZone(timeZone52);
        java.lang.String str55 = dateTimeZone53.getNameKey((long) 100);
        boolean boolean56 = dateTimeZone53.isFixed();
        org.joda.time.chrono.GJChronology gJChronology57 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone53);
        int int58 = gJChronology57.getMinimumDaysInFirstWeek();
        java.lang.String str59 = gJChronology57.toString();
        org.joda.time.DateTimeField dateTimeField60 = gJChronology57.yearOfEra();
        org.joda.time.DateTime dateTime61 = instant1.toDateTime((org.joda.time.Chronology) gJChronology57);
        org.joda.time.DateTimeField dateTimeField62 = gJChronology57.dayOfMonth();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and dateTime61", (instant1.compareTo(dateTime61) == 0) == instant1.equals(dateTime61));
    }

    @Test
    public void test0404() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0404");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField3 = gJChronology2.millisOfSecond();
        org.joda.time.DurationField durationField4 = gJChronology2.millis();
        org.joda.time.DateTimeZone dateTimeZone5 = gJChronology2.getZone();
        long long7 = dateTimeZone5.nextTransition(4320000000L);
        boolean boolean9 = dateTimeZone5.isStandardOffset(3155760001170L);
        java.util.TimeZone timeZone10 = null;
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forTimeZone(timeZone10);
        org.joda.time.chrono.GJChronology gJChronology12 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone11);
        org.joda.time.DateTimeField dateTimeField13 = gJChronology12.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField14 = gJChronology12.weekyearOfCentury();
        org.joda.time.Instant instant15 = gJChronology12.getGregorianCutover();
        org.joda.time.Instant instant17 = instant15.withMillis(0L);
        org.joda.time.Instant instant19 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone20 = null;
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forTimeZone(timeZone20);
        org.joda.time.chrono.GJChronology gJChronology22 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone21);
        org.joda.time.DateTimeField dateTimeField23 = gJChronology22.millisOfSecond();
        int int24 = instant19.get(dateTimeField23);
        org.joda.time.Instant instant26 = instant19.plus(0L);
        int int27 = instant17.compareTo((org.joda.time.ReadableInstant) instant26);
        java.util.TimeZone timeZone28 = null;
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forTimeZone(timeZone28);
        org.joda.time.chrono.GJChronology gJChronology30 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone29);
        org.joda.time.DurationField durationField31 = gJChronology30.halfdays();
        org.joda.time.DateTimeField dateTimeField32 = gJChronology30.millisOfDay();
        org.joda.time.DateTimeField dateTimeField33 = gJChronology30.minuteOfDay();
        org.joda.time.DurationField durationField34 = gJChronology30.centuries();
        org.joda.time.DateTimeField dateTimeField35 = gJChronology30.halfdayOfDay();
        java.util.Locale locale36 = java.util.Locale.ITALIAN;
        java.util.Locale locale37 = locale36.stripExtensions();
        java.util.Locale locale38 = java.util.Locale.CANADA;
        java.lang.String str39 = locale36.getDisplayVariant(locale38);
        boolean boolean40 = gJChronology30.equals((java.lang.Object) locale38);
        org.joda.time.DateTime dateTime41 = instant17.toDateTime((org.joda.time.Chronology) gJChronology30);
        org.joda.time.chrono.GJChronology gJChronology42 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone5, (org.joda.time.ReadableInstant) dateTime41);
        org.joda.time.DurationField durationField43 = gJChronology42.centuries();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant17 and dateTime41", (instant17.compareTo(dateTime41) == 0) == instant17.equals(dateTime41));
    }

    @Test
    public void test0405() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0405");
        java.util.Locale locale3 = new java.util.Locale("2022-02-11T09:43:44.107Z", "japonais (Japon)", "\u65e5\u6587");
        java.util.TimeZone timeZone4 = null;
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forTimeZone(timeZone4);
        org.joda.time.chrono.GJChronology gJChronology6 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone5);
        org.joda.time.DateTimeField dateTimeField7 = gJChronology6.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField8 = gJChronology6.weekyearOfCentury();
        org.joda.time.Instant instant9 = gJChronology6.getGregorianCutover();
        org.joda.time.Instant instant11 = instant9.withMillis(0L);
        java.util.TimeZone timeZone12 = null;
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forTimeZone(timeZone12);
        org.joda.time.chrono.GJChronology gJChronology14 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone13);
        org.joda.time.DateTimeField dateTimeField15 = gJChronology14.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField16 = gJChronology14.weekyear();
        org.joda.time.DateTimeField dateTimeField17 = gJChronology14.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField18 = gJChronology14.weekyearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime19 = instant11.toMutableDateTime((org.joda.time.Chronology) gJChronology14);
        boolean boolean20 = locale3.equals((java.lang.Object) gJChronology14);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant11 and mutableDateTime19", (instant11.compareTo(mutableDateTime19) == 0) == instant11.equals(mutableDateTime19));
    }

    @Test
    public void test0406() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0406");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField3 = gJChronology2.era();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.weekyear();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.weekyearOfCentury();
        org.joda.time.DurationField durationField6 = gJChronology2.millis();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology2.dayOfWeek();
        org.joda.time.DurationField durationField8 = gJChronology2.millis();
        org.joda.time.Instant instant9 = gJChronology2.getGregorianCutover();
        org.joda.time.Instant instant12 = instant9.withDurationAdded((-61352915L), (-19));
        boolean boolean13 = instant12.isAfterNow();
        java.util.TimeZone timeZone14 = null;
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forTimeZone(timeZone14);
        org.joda.time.chrono.GJChronology gJChronology16 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone15);
        org.joda.time.DateTimeField dateTimeField17 = gJChronology16.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField18 = gJChronology16.weekyear();
        org.joda.time.DurationField durationField19 = gJChronology16.centuries();
        org.joda.time.DateTimeField dateTimeField20 = gJChronology16.millisOfDay();
        org.joda.time.DateTimeField dateTimeField21 = gJChronology16.secondOfMinute();
        org.joda.time.DateTime dateTime22 = instant12.toDateTime((org.joda.time.Chronology) gJChronology16);
        org.joda.time.Instant instant24 = new org.joda.time.Instant(52L);
        boolean boolean25 = instant24.isEqualNow();
        org.joda.time.ReadableDuration readableDuration26 = null;
        org.joda.time.Instant instant27 = instant24.plus(readableDuration26);
        long long28 = instant24.getMillis();
        java.lang.String str29 = instant24.toString();
        org.joda.time.Instant instant30 = instant24.toInstant();
        org.joda.time.ReadableDuration readableDuration31 = null;
        org.joda.time.Instant instant33 = instant24.withDurationAdded(readableDuration31, (int) 'x');
        org.joda.time.DateTimeZone dateTimeZone34 = instant24.getZone();
        org.joda.time.Instant instant36 = new org.joda.time.Instant(52L);
        boolean boolean37 = instant36.isEqualNow();
        java.lang.String str38 = instant36.toString();
        java.util.TimeZone timeZone39 = null;
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.forTimeZone(timeZone39);
        org.joda.time.chrono.GJChronology gJChronology41 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone40);
        java.util.Locale locale43 = new java.util.Locale("hi!");
        java.lang.String str44 = locale43.getCountry();
        java.util.Locale locale45 = java.util.Locale.getDefault();
        java.lang.String str46 = locale45.getDisplayName();
        java.lang.String str47 = locale43.getDisplayScript(locale45);
        boolean boolean48 = dateTimeZone40.equals((java.lang.Object) locale45);
        int int50 = dateTimeZone40.getOffsetFromLocal((long) (short) 10);
        java.util.TimeZone timeZone51 = null;
        org.joda.time.DateTimeZone dateTimeZone52 = org.joda.time.DateTimeZone.forTimeZone(timeZone51);
        org.joda.time.chrono.GJChronology gJChronology53 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone52);
        org.joda.time.DateTimeField dateTimeField54 = gJChronology53.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField55 = gJChronology53.weekyearOfCentury();
        org.joda.time.Instant instant56 = gJChronology53.getGregorianCutover();
        org.joda.time.Instant instant58 = instant56.withMillis(0L);
        org.joda.time.Instant instant60 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone61 = null;
        org.joda.time.DateTimeZone dateTimeZone62 = org.joda.time.DateTimeZone.forTimeZone(timeZone61);
        org.joda.time.chrono.GJChronology gJChronology63 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone62);
        org.joda.time.DateTimeField dateTimeField64 = gJChronology63.millisOfSecond();
        int int65 = instant60.get(dateTimeField64);
        org.joda.time.Instant instant67 = instant60.plus(0L);
        int int68 = instant58.compareTo((org.joda.time.ReadableInstant) instant67);
        org.joda.time.DateTimeFieldType dateTimeFieldType69 = null;
        boolean boolean70 = instant67.isSupported(dateTimeFieldType69);
        int int71 = dateTimeZone40.getOffset((org.joda.time.ReadableInstant) instant67);
        boolean boolean72 = instant36.isAfter((org.joda.time.ReadableInstant) instant67);
        org.joda.time.Instant instant74 = instant67.withMillis((long) 10);
        boolean boolean75 = instant24.isEqual((org.joda.time.ReadableInstant) instant74);
        org.joda.time.Chronology chronology76 = instant24.getChronology();
        org.joda.time.DateTimeFieldType dateTimeFieldType77 = null;
        boolean boolean78 = instant24.isSupported(dateTimeFieldType77);
        org.joda.time.DateTimeZone dateTimeZone79 = instant24.getZone();
        org.joda.time.Instant instant81 = instant24.withMillis((long) 87696);
        org.joda.time.Instant instant83 = instant24.plus(262975270000L);
        int int84 = instant12.compareTo((org.joda.time.ReadableInstant) instant83);
        org.joda.time.Instant instant86 = new org.joda.time.Instant(1867084L);
        org.joda.time.Instant instant88 = instant86.plus((long) 164166);
        boolean boolean89 = instant83.isAfter((org.joda.time.ReadableInstant) instant88);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant12 and dateTime22", (instant12.compareTo(dateTime22) == 0) == instant12.equals(dateTime22));
    }

    @Test
    public void test0407() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0407");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        boolean boolean2 = instant1.isEqualNow();
        java.lang.String str3 = instant1.toString();
        java.lang.String str4 = instant1.toString();
        org.joda.time.Instant instant6 = new org.joda.time.Instant(52L);
        boolean boolean7 = instant6.isEqualNow();
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.Instant instant9 = instant6.plus(readableDuration8);
        boolean boolean10 = instant1.isBefore((org.joda.time.ReadableInstant) instant9);
        org.joda.time.Instant instant12 = new org.joda.time.Instant(52L);
        boolean boolean13 = instant12.isEqualNow();
        org.joda.time.ReadableDuration readableDuration14 = null;
        org.joda.time.Instant instant15 = instant12.plus(readableDuration14);
        long long16 = instant12.getMillis();
        java.lang.String str17 = instant12.toString();
        org.joda.time.Instant instant18 = instant12.toInstant();
        boolean boolean19 = instant9.isAfter((org.joda.time.ReadableInstant) instant12);
        java.util.TimeZone timeZone20 = null;
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forTimeZone(timeZone20);
        org.joda.time.chrono.GJChronology gJChronology22 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone21);
        org.joda.time.DurationField durationField23 = gJChronology22.halfdays();
        long long27 = gJChronology22.add((long) 'a', (-1L), (int) (short) 0);
        boolean boolean29 = gJChronology22.equals((java.lang.Object) 0);
        org.joda.time.DateTimeField dateTimeField30 = gJChronology22.dayOfMonth();
        org.joda.time.DurationField durationField31 = gJChronology22.seconds();
        org.joda.time.DateTimeField dateTimeField32 = gJChronology22.dayOfYear();
        org.joda.time.DateTimeField dateTimeField33 = gJChronology22.secondOfMinute();
        org.joda.time.Chronology chronology34 = gJChronology22.withUTC();
        org.joda.time.MutableDateTime mutableDateTime35 = instant9.toMutableDateTime((org.joda.time.Chronology) gJChronology22);
        boolean boolean36 = instant9.isBeforeNow();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and mutableDateTime35", (instant1.compareTo(mutableDateTime35) == 0) == instant1.equals(mutableDateTime35));
    }

    @Test
    public void test0408() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0408");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        boolean boolean2 = instant1.isEqualNow();
        org.joda.time.ReadableDuration readableDuration3 = null;
        org.joda.time.Instant instant4 = instant1.plus(readableDuration3);
        org.joda.time.Instant instant6 = instant1.withMillis((long) 4);
        org.joda.time.Instant instant8 = instant6.withMillis((-5919628L));
        java.util.TimeZone timeZone9 = null;
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forTimeZone(timeZone9);
        org.joda.time.chrono.GJChronology gJChronology11 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone10);
        org.joda.time.DateTimeField dateTimeField12 = gJChronology11.millisOfSecond();
        org.joda.time.DurationField durationField13 = gJChronology11.weeks();
        org.joda.time.DurationField durationField14 = gJChronology11.months();
        java.lang.String str15 = gJChronology11.toString();
        org.joda.time.DateTimeField dateTimeField16 = gJChronology11.centuryOfEra();
        org.joda.time.DateTime dateTime17 = instant6.toDateTime((org.joda.time.Chronology) gJChronology11);
        org.joda.time.DateTimeField dateTimeField18 = gJChronology11.secondOfDay();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant6 and dateTime17", (instant6.compareTo(dateTime17) == 0) == instant6.equals(dateTime17));
    }

    @Test
    public void test0409() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0409");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        org.joda.time.Instant instant3 = instant1.withMillis((long) 'u');
        java.util.TimeZone timeZone4 = null;
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forTimeZone(timeZone4);
        org.joda.time.chrono.GJChronology gJChronology6 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone5);
        org.joda.time.DurationField durationField7 = gJChronology6.halfdays();
        long long11 = gJChronology6.add((long) 'a', (-1L), (int) (short) 0);
        boolean boolean13 = gJChronology6.equals((java.lang.Object) 0);
        org.joda.time.DateTimeField dateTimeField14 = gJChronology6.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology6.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField16 = gJChronology6.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField17 = gJChronology6.clockhourOfHalfday();
        org.joda.time.DateTime dateTime18 = instant1.toDateTime((org.joda.time.Chronology) gJChronology6);
        java.util.TimeZone timeZone19 = null;
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forTimeZone(timeZone19);
        org.joda.time.chrono.GJChronology gJChronology21 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone20);
        org.joda.time.DurationField durationField22 = gJChronology21.halfdays();
        long long26 = gJChronology21.add((long) 'a', (-1L), (int) (short) 0);
        long long30 = gJChronology21.add((long) (byte) 0, (long) '4', 100);
        org.joda.time.DateTimeField dateTimeField31 = gJChronology21.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField32 = gJChronology21.year();
        org.joda.time.DateTimeField dateTimeField33 = gJChronology21.monthOfYear();
        org.joda.time.MutableDateTime mutableDateTime34 = instant1.toMutableDateTime((org.joda.time.Chronology) gJChronology21);
        boolean boolean36 = instant1.isAfter(4324200000L);
        java.util.TimeZone timeZone37 = null;
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forTimeZone(timeZone37);
        org.joda.time.chrono.GJChronology gJChronology39 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone38);
        org.joda.time.DateTimeField dateTimeField40 = gJChronology39.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField41 = gJChronology39.weekyear();
        org.joda.time.DurationField durationField42 = gJChronology39.centuries();
        org.joda.time.DateTimeField dateTimeField43 = gJChronology39.millisOfDay();
        org.joda.time.DateTimeField dateTimeField44 = gJChronology39.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField45 = gJChronology39.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField46 = gJChronology39.dayOfWeek();
        int int47 = instant1.get(dateTimeField46);
        java.util.TimeZone timeZone48 = null;
        org.joda.time.DateTimeZone dateTimeZone49 = org.joda.time.DateTimeZone.forTimeZone(timeZone48);
        org.joda.time.chrono.GJChronology gJChronology50 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone49);
        org.joda.time.DateTimeField dateTimeField51 = gJChronology50.millisOfSecond();
        org.joda.time.DurationField durationField52 = gJChronology50.millis();
        org.joda.time.DurationField durationField53 = gJChronology50.weekyears();
        org.joda.time.DateTimeField dateTimeField54 = gJChronology50.dayOfYear();
        org.joda.time.DateTimeField dateTimeField55 = gJChronology50.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField56 = gJChronology50.dayOfWeek();
        org.joda.time.DateTime dateTime57 = instant1.toDateTime((org.joda.time.Chronology) gJChronology50);
        org.joda.time.ReadableInstant readableInstant58 = null;
        boolean boolean59 = dateTime57.isAfter(readableInstant58);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and dateTime18", (instant1.compareTo(dateTime18) == 0) == instant1.equals(dateTime18));
    }

    @Test
    public void test0410() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0410");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = gJChronology2.halfdays();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.millisOfDay();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.minuteOfDay();
        org.joda.time.DurationField durationField6 = gJChronology2.centuries();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology2.dayOfYear();
        java.lang.String str8 = gJChronology2.toString();
        org.joda.time.DurationField durationField9 = gJChronology2.years();
        org.joda.time.DateTimeField dateTimeField10 = gJChronology2.yearOfEra();
        org.joda.time.DateTimeField dateTimeField11 = gJChronology2.clockhourOfHalfday();
        java.lang.String str12 = gJChronology2.toString();
        org.joda.time.DurationField durationField13 = gJChronology2.eras();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField13, durationField3, and durationField6", !(durationField13.compareTo(durationField3) == 0) || (Math.signum(durationField13.compareTo(durationField6)) == Math.signum(durationField3.compareTo(durationField6))));
    }

    @Test
    public void test0411() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0411");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        boolean boolean2 = instant1.isEqualNow();
        boolean boolean4 = instant1.isEqual(0L);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = null;
        boolean boolean6 = instant1.isSupported(dateTimeFieldType5);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = null;
        boolean boolean8 = instant1.isSupported(dateTimeFieldType7);
        java.util.TimeZone timeZone9 = null;
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forTimeZone(timeZone9);
        org.joda.time.chrono.GJChronology gJChronology11 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone10);
        org.joda.time.DurationField durationField12 = gJChronology11.halfdays();
        org.joda.time.Chronology chronology13 = gJChronology11.withUTC();
        java.lang.String str14 = gJChronology11.toString();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology11.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(1, 10);
        org.joda.time.Chronology chronology19 = gJChronology11.withZone(dateTimeZone18);
        org.joda.time.MutableDateTime mutableDateTime20 = instant1.toMutableDateTime(dateTimeZone18);
        org.joda.time.Instant instant22 = new org.joda.time.Instant(52L);
        boolean boolean23 = instant22.isEqualNow();
        org.joda.time.ReadableDuration readableDuration24 = null;
        org.joda.time.Instant instant25 = instant22.plus(readableDuration24);
        boolean boolean27 = instant25.equals((java.lang.Object) ' ');
        org.joda.time.Instant instant29 = new org.joda.time.Instant(52L);
        boolean boolean30 = instant29.isEqualNow();
        java.lang.String str31 = instant29.toString();
        java.lang.String str32 = instant29.toString();
        boolean boolean33 = instant25.isBefore((org.joda.time.ReadableInstant) instant29);
        org.joda.time.Instant instant35 = instant29.minus((long) (-102228));
        java.util.TimeZone timeZone36 = null;
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.forTimeZone(timeZone36);
        java.lang.String str39 = dateTimeZone37.getNameKey((long) 100);
        boolean boolean40 = dateTimeZone37.isFixed();
        org.joda.time.chrono.GJChronology gJChronology41 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone37);
        int int42 = gJChronology41.getMinimumDaysInFirstWeek();
        java.lang.String str43 = gJChronology41.toString();
        org.joda.time.DateTimeField dateTimeField44 = gJChronology41.yearOfEra();
        org.joda.time.DateTimeField dateTimeField45 = gJChronology41.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField46 = gJChronology41.dayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology48 = gJChronology41.withZone(dateTimeZone47);
        org.joda.time.DateTimeField dateTimeField49 = chronology48.millisOfSecond();
        java.util.TimeZone timeZone50 = null;
        org.joda.time.DateTimeZone dateTimeZone51 = org.joda.time.DateTimeZone.forTimeZone(timeZone50);
        org.joda.time.chrono.GJChronology gJChronology52 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone51);
        int int54 = dateTimeZone51.getOffsetFromLocal((long) (-1));
        org.joda.time.DateTimeZone dateTimeZone56 = org.joda.time.DateTimeZone.forOffsetHours((int) '4');
        long long58 = dateTimeZone51.getMillisKeepLocal(dateTimeZone56, (-8380800000L));
        org.joda.time.Chronology chronology59 = chronology48.withZone(dateTimeZone51);
        boolean boolean61 = dateTimeZone51.isStandardOffset(3600000L);
        org.joda.time.Instant instant63 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone64 = null;
        org.joda.time.DateTimeZone dateTimeZone65 = org.joda.time.DateTimeZone.forTimeZone(timeZone64);
        org.joda.time.chrono.GJChronology gJChronology66 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone65);
        org.joda.time.DateTimeField dateTimeField67 = gJChronology66.millisOfSecond();
        int int68 = instant63.get(dateTimeField67);
        java.util.TimeZone timeZone69 = null;
        org.joda.time.DateTimeZone dateTimeZone70 = org.joda.time.DateTimeZone.forTimeZone(timeZone69);
        org.joda.time.chrono.GJChronology gJChronology71 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone70);
        org.joda.time.DurationField durationField72 = gJChronology71.halfdays();
        java.util.TimeZone timeZone73 = null;
        org.joda.time.DateTimeZone dateTimeZone74 = org.joda.time.DateTimeZone.forTimeZone(timeZone73);
        org.joda.time.chrono.GJChronology gJChronology75 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone74);
        long long79 = dateTimeZone74.convertLocalToUTC((long) (byte) -1, true, 0L);
        boolean boolean81 = dateTimeZone74.equals((java.lang.Object) true);
        org.joda.time.Chronology chronology82 = gJChronology71.withZone(dateTimeZone74);
        org.joda.time.MutableDateTime mutableDateTime83 = instant63.toMutableDateTime(dateTimeZone74);
        int int84 = dateTimeZone51.getOffset((org.joda.time.ReadableInstant) instant63);
        boolean boolean85 = instant29.isBefore((org.joda.time.ReadableInstant) instant63);
        boolean boolean86 = instant1.isEqual((org.joda.time.ReadableInstant) instant63);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime20 and instant22", (mutableDateTime20.compareTo(instant22) == 0) == mutableDateTime20.equals(instant22));
    }

    @Test
    public void test0412() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0412");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField3 = gJChronology2.millisOfSecond();
        org.joda.time.DurationField durationField4 = gJChronology2.millis();
        org.joda.time.DurationField durationField5 = gJChronology2.weeks();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology2.year();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology2.yearOfCentury();
        org.joda.time.DurationField durationField8 = gJChronology2.eras();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField8, durationField4, and durationField5", !(durationField8.compareTo(durationField4) == 0) || (Math.signum(durationField8.compareTo(durationField5)) == Math.signum(durationField4.compareTo(durationField5))));
    }

    @Test
    public void test0413() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0413");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField3 = gJChronology2.era();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.weekyear();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.weekyearOfCentury();
        org.joda.time.DurationField durationField6 = gJChronology2.millis();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology2.dayOfWeek();
        org.joda.time.DurationField durationField8 = gJChronology2.millis();
        org.joda.time.Instant instant9 = gJChronology2.getGregorianCutover();
        org.joda.time.Instant instant12 = instant9.withDurationAdded((-61352915L), (-19));
        boolean boolean13 = instant12.isAfterNow();
        java.util.TimeZone timeZone14 = null;
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forTimeZone(timeZone14);
        org.joda.time.chrono.GJChronology gJChronology16 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone15);
        org.joda.time.DateTimeField dateTimeField17 = gJChronology16.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField18 = gJChronology16.weekyear();
        org.joda.time.DurationField durationField19 = gJChronology16.centuries();
        org.joda.time.DateTimeField dateTimeField20 = gJChronology16.millisOfDay();
        org.joda.time.DateTimeField dateTimeField21 = gJChronology16.secondOfMinute();
        org.joda.time.DateTime dateTime22 = instant12.toDateTime((org.joda.time.Chronology) gJChronology16);
        org.joda.time.Instant instant24 = new org.joda.time.Instant(52L);
        boolean boolean25 = instant24.isEqualNow();
        org.joda.time.ReadableDuration readableDuration26 = null;
        org.joda.time.Instant instant27 = instant24.plus(readableDuration26);
        long long28 = instant24.getMillis();
        java.lang.String str29 = instant24.toString();
        org.joda.time.Instant instant30 = instant24.toInstant();
        org.joda.time.ReadableDuration readableDuration31 = null;
        org.joda.time.Instant instant33 = instant24.withDurationAdded(readableDuration31, (int) 'x');
        org.joda.time.DateTimeZone dateTimeZone34 = instant24.getZone();
        org.joda.time.Instant instant36 = new org.joda.time.Instant(52L);
        boolean boolean37 = instant36.isEqualNow();
        java.lang.String str38 = instant36.toString();
        java.util.TimeZone timeZone39 = null;
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.forTimeZone(timeZone39);
        org.joda.time.chrono.GJChronology gJChronology41 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone40);
        java.util.Locale locale43 = new java.util.Locale("hi!");
        java.lang.String str44 = locale43.getCountry();
        java.util.Locale locale45 = java.util.Locale.getDefault();
        java.lang.String str46 = locale45.getDisplayName();
        java.lang.String str47 = locale43.getDisplayScript(locale45);
        boolean boolean48 = dateTimeZone40.equals((java.lang.Object) locale45);
        int int50 = dateTimeZone40.getOffsetFromLocal((long) (short) 10);
        java.util.TimeZone timeZone51 = null;
        org.joda.time.DateTimeZone dateTimeZone52 = org.joda.time.DateTimeZone.forTimeZone(timeZone51);
        org.joda.time.chrono.GJChronology gJChronology53 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone52);
        org.joda.time.DateTimeField dateTimeField54 = gJChronology53.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField55 = gJChronology53.weekyearOfCentury();
        org.joda.time.Instant instant56 = gJChronology53.getGregorianCutover();
        org.joda.time.Instant instant58 = instant56.withMillis(0L);
        org.joda.time.Instant instant60 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone61 = null;
        org.joda.time.DateTimeZone dateTimeZone62 = org.joda.time.DateTimeZone.forTimeZone(timeZone61);
        org.joda.time.chrono.GJChronology gJChronology63 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone62);
        org.joda.time.DateTimeField dateTimeField64 = gJChronology63.millisOfSecond();
        int int65 = instant60.get(dateTimeField64);
        org.joda.time.Instant instant67 = instant60.plus(0L);
        int int68 = instant58.compareTo((org.joda.time.ReadableInstant) instant67);
        org.joda.time.DateTimeFieldType dateTimeFieldType69 = null;
        boolean boolean70 = instant67.isSupported(dateTimeFieldType69);
        int int71 = dateTimeZone40.getOffset((org.joda.time.ReadableInstant) instant67);
        boolean boolean72 = instant36.isAfter((org.joda.time.ReadableInstant) instant67);
        org.joda.time.Instant instant74 = instant67.withMillis((long) 10);
        boolean boolean75 = instant24.isEqual((org.joda.time.ReadableInstant) instant74);
        org.joda.time.Chronology chronology76 = instant24.getChronology();
        org.joda.time.DateTimeFieldType dateTimeFieldType77 = null;
        boolean boolean78 = instant24.isSupported(dateTimeFieldType77);
        org.joda.time.DateTimeZone dateTimeZone79 = instant24.getZone();
        org.joda.time.Instant instant81 = instant24.withMillis((long) 87696);
        org.joda.time.Instant instant83 = instant24.plus(262975270000L);
        int int84 = instant12.compareTo((org.joda.time.ReadableInstant) instant83);
        org.joda.time.Chronology chronology85 = instant12.getChronology();
        org.joda.time.DateTimeField dateTimeField86 = chronology85.yearOfEra();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant12 and dateTime22", (instant12.compareTo(dateTime22) == 0) == instant12.equals(dateTime22));
    }

    @Test
    public void test0414() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0414");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField3 = gJChronology2.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.minuteOfHour();
        org.joda.time.DurationField durationField6 = gJChronology2.halfdays();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology2.millisOfSecond();
        org.joda.time.DurationField durationField8 = gJChronology2.eras();
        org.joda.time.DateTimeField dateTimeField9 = gJChronology2.millisOfDay();
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField6 and durationField8", Math.signum(durationField6.compareTo(durationField8)) == -Math.signum(durationField8.compareTo(durationField6)));
    }

    @Test
    public void test0415() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0415");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forTimeZone(timeZone2);
        org.joda.time.chrono.GJChronology gJChronology4 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone3);
        org.joda.time.DateTimeField dateTimeField5 = gJChronology4.millisOfSecond();
        int int6 = instant1.get(dateTimeField5);
        org.joda.time.Instant instant8 = instant1.plus(0L);
        long long9 = instant8.getMillis();
        java.util.TimeZone timeZone10 = null;
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forTimeZone(timeZone10);
        org.joda.time.chrono.GJChronology gJChronology12 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone11);
        org.joda.time.DurationField durationField13 = gJChronology12.halfdays();
        long long17 = gJChronology12.add((long) 'a', (-1L), (int) (short) 0);
        long long21 = gJChronology12.add((long) (byte) 0, (long) '4', 100);
        org.joda.time.DurationField durationField22 = gJChronology12.years();
        org.joda.time.Instant instant23 = gJChronology12.getGregorianCutover();
        org.joda.time.DateTimeField dateTimeField24 = gJChronology12.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime25 = instant8.toMutableDateTime((org.joda.time.Chronology) gJChronology12);
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forOffsetMillis((int) '4');
        org.joda.time.DateTimeZone.setDefault(dateTimeZone27);
        int int30 = dateTimeZone27.getOffset((long) (short) -1);
        org.joda.time.Chronology chronology31 = gJChronology12.withZone(dateTimeZone27);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and mutableDateTime25", (instant1.compareTo(mutableDateTime25) == 0) == instant1.equals(mutableDateTime25));
    }

    @Test
    public void test0416() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0416");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        boolean boolean2 = instant1.isEqualNow();
        java.lang.String str3 = instant1.toString();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.MutableDateTime mutableDateTime5 = instant1.toMutableDateTime(chronology4);
        org.joda.time.MutableDateTime mutableDateTime6 = instant1.toMutableDateTime();
        java.util.TimeZone timeZone7 = null;
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forTimeZone(timeZone7);
        org.joda.time.chrono.GJChronology gJChronology9 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone8);
        org.joda.time.DateTimeField dateTimeField10 = gJChronology9.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField11 = gJChronology9.weekyear();
        org.joda.time.DurationField durationField12 = gJChronology9.centuries();
        org.joda.time.DateTimeField dateTimeField13 = gJChronology9.millisOfDay();
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        long long17 = gJChronology9.add(readablePeriod14, (long) '4', (int) (byte) -1);
        org.joda.time.DurationField durationField18 = gJChronology9.weekyears();
        org.joda.time.DateTime dateTime19 = instant1.toDateTime((org.joda.time.Chronology) gJChronology9);
        org.joda.time.DateTimeField dateTimeField20 = gJChronology9.yearOfEra();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and mutableDateTime5", (instant1.compareTo(mutableDateTime5) == 0) == instant1.equals(mutableDateTime5));
    }

    @Test
    public void test0417() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0417");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        boolean boolean2 = instant1.isEqualNow();
        org.joda.time.Instant instant4 = new org.joda.time.Instant(52L);
        org.joda.time.Instant instant6 = instant4.withMillis((long) 'u');
        boolean boolean7 = instant1.isAfter((org.joda.time.ReadableInstant) instant4);
        org.joda.time.Instant instant10 = instant1.withDurationAdded(747221751619200000L, (int) (byte) 0);
        org.joda.time.MutableDateTime mutableDateTime11 = instant1.toMutableDateTime();
        java.util.TimeZone timeZone12 = null;
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forTimeZone(timeZone12);
        org.joda.time.chrono.GJChronology gJChronology14 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone13);
        org.joda.time.DurationField durationField15 = gJChronology14.halfdays();
        org.joda.time.DateTimeField dateTimeField16 = gJChronology14.millisOfDay();
        org.joda.time.DateTimeField dateTimeField17 = gJChronology14.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField18 = gJChronology14.weekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime19 = mutableDateTime11.toMutableDateTime((org.joda.time.Chronology) gJChronology14);
        org.joda.time.DateTimeField dateTimeField20 = gJChronology14.millisOfDay();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and mutableDateTime11", (instant1.compareTo(mutableDateTime11) == 0) == instant1.equals(mutableDateTime11));
    }

    @Test
    public void test0418() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0418");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        boolean boolean2 = instant1.isEqualNow();
        java.lang.String str3 = instant1.toString();
        java.lang.String str4 = instant1.toString();
        org.joda.time.Instant instant6 = new org.joda.time.Instant(52L);
        boolean boolean7 = instant6.isEqualNow();
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.Instant instant9 = instant6.plus(readableDuration8);
        boolean boolean10 = instant1.isBefore((org.joda.time.ReadableInstant) instant9);
        org.joda.time.DateTime dateTime11 = instant1.toDateTime();
        java.util.TimeZone timeZone12 = null;
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forTimeZone(timeZone12);
        org.joda.time.chrono.GJChronology gJChronology14 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone13);
        org.joda.time.DurationField durationField15 = gJChronology14.halfdays();
        long long19 = gJChronology14.add((long) 'a', (-1L), (int) (short) 0);
        org.joda.time.DateTimeField dateTimeField20 = gJChronology14.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField21 = gJChronology14.centuryOfEra();
        long long25 = gJChronology14.add(262974600000L, (long) (byte) 100, (int) '4');
        org.joda.time.DurationField durationField26 = gJChronology14.months();
        org.joda.time.DurationField durationField27 = gJChronology14.years();
        java.util.TimeZone timeZone28 = null;
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forTimeZone(timeZone28);
        org.joda.time.chrono.GJChronology gJChronology30 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone29);
        org.joda.time.DurationField durationField31 = gJChronology30.halfdays();
        org.joda.time.DateTimeField dateTimeField32 = gJChronology30.millisOfDay();
        org.joda.time.DateTimeField dateTimeField33 = gJChronology30.minuteOfDay();
        org.joda.time.DurationField durationField34 = gJChronology30.centuries();
        org.joda.time.DateTimeField dateTimeField35 = gJChronology30.dayOfYear();
        java.lang.String str36 = gJChronology30.toString();
        org.joda.time.DateTimeField dateTimeField37 = gJChronology30.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone38 = gJChronology30.getZone();
        java.util.TimeZone timeZone39 = null;
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.forTimeZone(timeZone39);
        org.joda.time.chrono.GJChronology gJChronology41 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone40);
        java.util.Locale locale43 = new java.util.Locale("hi!");
        java.lang.String str44 = locale43.getCountry();
        java.util.Locale locale45 = java.util.Locale.getDefault();
        java.lang.String str46 = locale45.getDisplayName();
        java.lang.String str47 = locale43.getDisplayScript(locale45);
        boolean boolean48 = dateTimeZone40.equals((java.lang.Object) locale45);
        org.joda.time.Chronology chronology49 = gJChronology30.withZone(dateTimeZone40);
        java.lang.String str50 = gJChronology30.toString();
        java.util.TimeZone timeZone51 = null;
        org.joda.time.DateTimeZone dateTimeZone52 = org.joda.time.DateTimeZone.forTimeZone(timeZone51);
        org.joda.time.chrono.GJChronology gJChronology53 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone52);
        org.joda.time.DurationField durationField54 = gJChronology53.halfdays();
        org.joda.time.DateTimeField dateTimeField55 = gJChronology53.millisOfDay();
        org.joda.time.DateTimeField dateTimeField56 = gJChronology53.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField57 = gJChronology53.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone58 = gJChronology53.getZone();
        boolean boolean60 = dateTimeZone58.isStandardOffset((long) '#');
        org.joda.time.Chronology chronology61 = gJChronology30.withZone(dateTimeZone58);
        org.joda.time.Chronology chronology62 = gJChronology14.withZone(dateTimeZone58);
        org.joda.time.DateTime dateTime63 = instant1.toDateTime(dateTimeZone58);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant6 and dateTime11", (instant6.compareTo(dateTime11) == 0) == instant6.equals(dateTime11));
    }

    @Test
    public void test0419() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0419");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        boolean boolean2 = instant1.isEqualNow();
        java.lang.String str3 = instant1.toString();
        java.lang.String str4 = instant1.toString();
        org.joda.time.Instant instant7 = instant1.withDurationAdded(115200000L, (int) (short) 1);
        org.joda.time.Instant instant9 = instant1.withMillis((-6720000000L));
        org.joda.time.Instant instant11 = new org.joda.time.Instant(52L);
        boolean boolean12 = instant11.isEqualNow();
        java.lang.String str13 = instant11.toString();
        org.joda.time.DateTimeZone dateTimeZone14 = instant11.getZone();
        org.joda.time.Instant instant16 = instant11.minus((-2208729599948L));
        int int17 = instant9.compareTo((org.joda.time.ReadableInstant) instant11);
        java.util.TimeZone timeZone18 = null;
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forTimeZone(timeZone18);
        org.joda.time.chrono.GJChronology gJChronology20 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone19);
        org.joda.time.DateTimeField dateTimeField21 = gJChronology20.era();
        org.joda.time.DateTimeField dateTimeField22 = gJChronology20.centuryOfEra();
        org.joda.time.DurationField durationField23 = gJChronology20.hours();
        org.joda.time.DateTimeField dateTimeField24 = gJChronology20.monthOfYear();
        org.joda.time.DateTimeField dateTimeField25 = gJChronology20.dayOfWeek();
        org.joda.time.Chronology chronology26 = gJChronology20.withUTC();
        org.joda.time.DurationField durationField27 = gJChronology20.centuries();
        java.util.TimeZone timeZone28 = null;
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forTimeZone(timeZone28);
        java.lang.String str31 = dateTimeZone29.getNameKey((long) 100);
        boolean boolean32 = dateTimeZone29.isFixed();
        org.joda.time.chrono.GJChronology gJChronology33 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone29);
        int int34 = gJChronology33.getMinimumDaysInFirstWeek();
        java.lang.String str35 = gJChronology33.toString();
        org.joda.time.DateTimeField dateTimeField36 = gJChronology33.yearOfEra();
        org.joda.time.DateTimeField dateTimeField37 = gJChronology33.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField38 = gJChronology33.dayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology40 = gJChronology33.withZone(dateTimeZone39);
        org.joda.time.DateTimeField dateTimeField41 = chronology40.millisOfSecond();
        java.util.TimeZone timeZone42 = null;
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.forTimeZone(timeZone42);
        org.joda.time.chrono.GJChronology gJChronology44 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone43);
        int int46 = dateTimeZone43.getOffsetFromLocal((long) (-1));
        org.joda.time.DateTimeZone dateTimeZone48 = org.joda.time.DateTimeZone.forOffsetHours((int) '4');
        long long50 = dateTimeZone43.getMillisKeepLocal(dateTimeZone48, (-8380800000L));
        org.joda.time.Chronology chronology51 = chronology40.withZone(dateTimeZone43);
        java.util.TimeZone timeZone52 = null;
        org.joda.time.DateTimeZone dateTimeZone53 = org.joda.time.DateTimeZone.forTimeZone(timeZone52);
        org.joda.time.chrono.GJChronology gJChronology54 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone53);
        org.joda.time.DurationField durationField55 = gJChronology54.halfdays();
        java.util.TimeZone timeZone56 = null;
        org.joda.time.DateTimeZone dateTimeZone57 = org.joda.time.DateTimeZone.forTimeZone(timeZone56);
        org.joda.time.chrono.GJChronology gJChronology58 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone57);
        long long62 = dateTimeZone57.convertLocalToUTC((long) (byte) -1, true, 0L);
        boolean boolean64 = dateTimeZone57.equals((java.lang.Object) true);
        org.joda.time.Chronology chronology65 = gJChronology54.withZone(dateTimeZone57);
        org.joda.time.LocalDateTime localDateTime66 = null;
        boolean boolean67 = dateTimeZone57.isLocalDateTimeGap(localDateTime66);
        boolean boolean68 = dateTimeZone57.isFixed();
        long long70 = dateTimeZone43.getMillisKeepLocal(dateTimeZone57, (long) (short) -1);
        org.joda.time.Chronology chronology71 = gJChronology20.withZone(dateTimeZone57);
        org.joda.time.Instant instant73 = new org.joda.time.Instant(52L);
        boolean boolean74 = instant73.isEqualNow();
        java.lang.String str75 = instant73.toString();
        org.joda.time.Chronology chronology76 = null;
        org.joda.time.MutableDateTime mutableDateTime77 = instant73.toMutableDateTime(chronology76);
        org.joda.time.MutableDateTime mutableDateTime78 = instant73.toMutableDateTime();
        org.joda.time.MutableDateTime mutableDateTime79 = instant73.toMutableDateTime();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter80 = null;
        java.lang.String str81 = instant73.toString(dateTimeFormatter80);
        org.joda.time.chrono.GJChronology gJChronology82 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone57, (org.joda.time.ReadableInstant) instant73);
        org.joda.time.MutableDateTime mutableDateTime83 = instant73.toMutableDateTimeISO();
        boolean boolean84 = instant11.isBefore((org.joda.time.ReadableInstant) instant73);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and mutableDateTime77", (instant1.compareTo(mutableDateTime77) == 0) == instant1.equals(mutableDateTime77));
    }

    @Test
    public void test0420() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0420");
        java.util.Locale locale2 = new java.util.Locale("cinese (Taiwan)", "DurationField[weekyears]");
        java.util.Locale locale4 = java.util.Locale.forLanguageTag("hi!");
        java.lang.String str5 = locale4.toLanguageTag();
        java.lang.String str6 = locale4.getCountry();
        java.util.Locale locale7 = java.util.Locale.ROOT;
        java.util.Locale locale8 = java.util.Locale.GERMAN;
        java.lang.String str9 = locale8.getDisplayCountry();
        java.lang.String str10 = locale7.getDisplayLanguage(locale8);
        java.lang.String str11 = locale4.getDisplayVariant(locale7);
        java.lang.String str12 = locale2.getDisplayVariant(locale4);
        java.util.Locale locale13 = java.util.Locale.getDefault();
        java.lang.String str14 = locale13.getISO3Language();
        java.util.Locale locale15 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale16 = java.util.Locale.ENGLISH;
        java.lang.String str17 = locale15.getDisplayLanguage(locale16);
        java.lang.String str18 = locale13.getDisplayLanguage(locale15);
        java.lang.String str19 = locale4.getDisplayVariant(locale13);
        java.lang.String str20 = locale4.getCountry();
        java.lang.String str21 = locale4.getScript();
        org.joda.time.Instant instant23 = new org.joda.time.Instant(52L);
        boolean boolean24 = instant23.isEqualNow();
        boolean boolean26 = instant23.isEqual(0L);
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = null;
        boolean boolean28 = instant23.isSupported(dateTimeFieldType27);
        org.joda.time.DateTimeFieldType dateTimeFieldType29 = null;
        boolean boolean30 = instant23.isSupported(dateTimeFieldType29);
        java.util.TimeZone timeZone31 = null;
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.forTimeZone(timeZone31);
        org.joda.time.chrono.GJChronology gJChronology33 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone32);
        org.joda.time.DurationField durationField34 = gJChronology33.halfdays();
        org.joda.time.Chronology chronology35 = gJChronology33.withUTC();
        java.lang.String str36 = gJChronology33.toString();
        org.joda.time.DateTimeField dateTimeField37 = gJChronology33.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(1, 10);
        org.joda.time.Chronology chronology41 = gJChronology33.withZone(dateTimeZone40);
        org.joda.time.MutableDateTime mutableDateTime42 = instant23.toMutableDateTime(dateTimeZone40);
        org.joda.time.ReadableDuration readableDuration43 = null;
        org.joda.time.Instant instant45 = instant23.withDurationAdded(readableDuration43, 97);
        boolean boolean46 = locale4.equals((java.lang.Object) 97);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant23 and mutableDateTime42", (instant23.compareTo(mutableDateTime42) == 0) == instant23.equals(mutableDateTime42));
    }

    @Test
    public void test0421() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0421");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        boolean boolean2 = instant1.isEqualNow();
        org.joda.time.ReadableDuration readableDuration3 = null;
        org.joda.time.Instant instant4 = instant1.plus(readableDuration3);
        long long5 = instant1.getMillis();
        java.lang.Object obj6 = null;
        boolean boolean7 = instant1.equals(obj6);
        org.joda.time.Instant instant9 = new org.joda.time.Instant(52L);
        boolean boolean10 = instant9.isEqualNow();
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.Instant instant12 = instant9.plus(readableDuration11);
        long long13 = instant9.getMillis();
        java.lang.String str14 = instant9.toString();
        org.joda.time.Instant instant15 = instant9.toInstant();
        org.joda.time.ReadableDuration readableDuration16 = null;
        org.joda.time.Instant instant18 = instant9.withDurationAdded(readableDuration16, (int) 'x');
        org.joda.time.Instant instant19 = instant9.toInstant();
        int int20 = instant1.compareTo((org.joda.time.ReadableInstant) instant9);
        java.util.TimeZone timeZone21 = null;
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forTimeZone(timeZone21);
        org.joda.time.chrono.GJChronology gJChronology23 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone22);
        org.joda.time.DateTimeField dateTimeField24 = gJChronology23.era();
        org.joda.time.DateTimeField dateTimeField25 = gJChronology23.centuryOfEra();
        org.joda.time.DurationField durationField26 = gJChronology23.hours();
        org.joda.time.DateTimeField dateTimeField27 = gJChronology23.monthOfYear();
        org.joda.time.DateTimeField dateTimeField28 = gJChronology23.dayOfWeek();
        java.util.TimeZone timeZone29 = null;
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forTimeZone(timeZone29);
        org.joda.time.chrono.GJChronology gJChronology31 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone30);
        int int33 = dateTimeZone30.getStandardOffset((long) (byte) 0);
        org.joda.time.Chronology chronology34 = gJChronology23.withZone(dateTimeZone30);
        int int36 = dateTimeZone30.getOffsetFromLocal(262978799880L);
        org.joda.time.MutableDateTime mutableDateTime37 = instant1.toMutableDateTime(dateTimeZone30);
        int int39 = dateTimeZone30.getStandardOffset((-315106719628L));
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and mutableDateTime37", (instant1.compareTo(mutableDateTime37) == 0) == instant1.equals(mutableDateTime37));
    }

    @Test
    public void test0422() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0422");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        boolean boolean2 = instant1.isEqualNow();
        org.joda.time.ReadableDuration readableDuration3 = null;
        org.joda.time.Instant instant4 = instant1.plus(readableDuration3);
        org.joda.time.Instant instant6 = new org.joda.time.Instant(52L);
        org.joda.time.Instant instant8 = instant6.withMillis((long) 'u');
        boolean boolean9 = instant1.isBefore((org.joda.time.ReadableInstant) instant6);
        org.joda.time.DateTimeZone dateTimeZone10 = instant6.getZone();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetMillis((int) '4');
        java.util.TimeZone timeZone13 = dateTimeZone12.toTimeZone();
        long long16 = dateTimeZone12.adjustOffset((long) 0, false);
        int int18 = dateTimeZone12.getOffsetFromLocal((-26438399999L));
        java.util.TimeZone timeZone19 = dateTimeZone12.toTimeZone();
        java.lang.String str20 = dateTimeZone12.getID();
        org.joda.time.DateTime dateTime21 = instant6.toDateTime(dateTimeZone12);
        java.util.TimeZone timeZone22 = null;
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        java.lang.String str25 = dateTimeZone23.getNameKey((long) 100);
        boolean boolean26 = dateTimeZone23.isFixed();
        java.util.Locale locale30 = new java.util.Locale("DurationField[halfdays]", "\u82f1\u6587");
        java.lang.String str31 = dateTimeZone23.getName((long) (short) 10, locale30);
        java.lang.String str33 = dateTimeZone23.getNameKey(17296800000L);
        long long36 = dateTimeZone23.adjustOffset(4492800100L, true);
        org.joda.time.DateTime dateTime37 = dateTime21.toDateTime(dateTimeZone23);
        org.joda.time.Instant instant39 = org.joda.time.Instant.parse("3929-04-02T00:00:00.051Z");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter40 = null;
        java.lang.String str41 = instant39.toString(dateTimeFormatter40);
        org.joda.time.chrono.GJChronology gJChronology42 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone23, (org.joda.time.ReadableInstant) instant39);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and dateTime21", (instant1.compareTo(dateTime21) == 0) == instant1.equals(dateTime21));
    }

    @Test
    public void test0423() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0423");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField3 = gJChronology2.millisOfSecond();
        org.joda.time.DurationField durationField4 = gJChronology2.millis();
        org.joda.time.DurationField durationField5 = gJChronology2.weeks();
        long long9 = gJChronology2.add(43201764L, 262974600000L, (int) (short) 100);
        org.joda.time.DateTimeField dateTimeField10 = gJChronology2.secondOfMinute();
        org.joda.time.DurationField durationField11 = gJChronology2.weekyears();
        org.joda.time.DurationField durationField12 = gJChronology2.eras();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField12, durationField4, and durationField5", !(durationField12.compareTo(durationField4) == 0) || (Math.signum(durationField12.compareTo(durationField5)) == Math.signum(durationField4.compareTo(durationField5))));
    }

    @Test
    public void test0424() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0424");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        boolean boolean2 = instant1.isEqualNow();
        java.lang.String str3 = instant1.toString();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.MutableDateTime mutableDateTime5 = instant1.toMutableDateTime(chronology4);
        org.joda.time.MutableDateTime mutableDateTime6 = instant1.toMutableDateTime();
        org.joda.time.Instant instant8 = instant1.plus(4320000001L);
        org.joda.time.Instant instant9 = instant1.toInstant();
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.Instant instant11 = instant1.minus(readableDuration10);
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.Instant instant13 = instant1.plus(readableDuration12);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime5 and instant13", (mutableDateTime5.compareTo(instant13) == 0) == mutableDateTime5.equals(instant13));
    }

    @Test
    public void test0425() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0425");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forTimeZone(timeZone2);
        org.joda.time.chrono.GJChronology gJChronology4 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone3);
        org.joda.time.DateTimeField dateTimeField5 = gJChronology4.millisOfSecond();
        int int6 = instant1.get(dateTimeField5);
        org.joda.time.Instant instant8 = instant1.plus(0L);
        org.joda.time.Instant instant9 = instant8.toInstant();
        org.joda.time.Instant instant11 = new org.joda.time.Instant(52L);
        boolean boolean12 = instant11.isEqualNow();
        java.lang.String str13 = instant11.toString();
        java.lang.String str14 = instant11.toString();
        org.joda.time.Instant instant16 = new org.joda.time.Instant(52L);
        boolean boolean17 = instant16.isEqualNow();
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.Instant instant19 = instant16.plus(readableDuration18);
        boolean boolean20 = instant11.isBefore((org.joda.time.ReadableInstant) instant19);
        org.joda.time.Instant instant22 = instant11.minus((long) 0);
        int int23 = instant8.compareTo((org.joda.time.ReadableInstant) instant11);
        org.joda.time.Instant instant26 = instant11.withDurationAdded((long) (short) 100, 70);
        org.joda.time.DateTime dateTime27 = instant26.toDateTimeISO();
        java.util.Locale locale29 = new java.util.Locale("hi!");
        java.lang.String str30 = locale29.getVariant();
        java.util.Locale locale32 = java.util.Locale.forLanguageTag("hi!");
        java.lang.String str33 = locale32.toLanguageTag();
        java.lang.String str34 = locale29.getDisplayName(locale32);
        boolean boolean35 = dateTime27.equals((java.lang.Object) locale29);
        org.joda.time.Chronology chronology36 = dateTime27.getChronology();
        java.util.TimeZone timeZone37 = null;
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forTimeZone(timeZone37);
        org.joda.time.chrono.GJChronology gJChronology39 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone38);
        java.util.Locale locale41 = new java.util.Locale("hi!");
        java.lang.String str42 = locale41.getCountry();
        java.util.Locale locale43 = java.util.Locale.getDefault();
        java.lang.String str44 = locale43.getDisplayName();
        java.lang.String str45 = locale41.getDisplayScript(locale43);
        boolean boolean46 = dateTimeZone38.equals((java.lang.Object) locale43);
        org.joda.time.DateTime dateTime47 = dateTime27.toDateTime(dateTimeZone38);
        int int49 = dateTimeZone38.getOffsetFromLocal(3964200000L);
        org.joda.time.DateTimeZone dateTimeZone52 = org.joda.time.DateTimeZone.forOffsetMillis((int) '4');
        java.util.TimeZone timeZone53 = dateTimeZone52.toTimeZone();
        java.lang.String str54 = dateTimeZone52.toString();
        boolean boolean56 = dateTimeZone52.isStandardOffset((long) 'u');
        java.util.Locale locale59 = new java.util.Locale("hi!");
        java.lang.String str60 = locale59.getCountry();
        java.lang.String str61 = locale59.getScript();
        java.util.Locale locale62 = java.util.Locale.ITALIAN;
        java.util.Locale locale63 = locale62.stripExtensions();
        java.util.Locale locale64 = java.util.Locale.CANADA;
        java.lang.String str65 = locale62.getDisplayVariant(locale64);
        java.lang.String str66 = locale59.getDisplayScript(locale62);
        java.lang.String str67 = locale62.getCountry();
        java.lang.String str68 = dateTimeZone52.getName(52L, locale62);
        java.util.Locale locale69 = java.util.Locale.GERMANY;
        java.lang.String str70 = locale69.getDisplayLanguage();
        java.util.Locale locale71 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str72 = locale69.getDisplayVariant(locale71);
        java.lang.String str73 = locale62.getDisplayName(locale71);
        java.util.Set<java.lang.String> strSet74 = locale71.getUnicodeLocaleAttributes();
        java.lang.String str75 = locale71.getVariant();
        java.util.Locale locale77 = java.util.Locale.forLanguageTag("halfdays");
        boolean boolean78 = locale77.hasExtensions();
        java.util.Set<java.lang.Character> charSet79 = locale77.getExtensionKeys();
        java.lang.String str80 = locale77.getCountry();
        java.lang.String str81 = locale71.getDisplayLanguage(locale77);
        java.lang.String str82 = dateTimeZone38.getName(1136050274678400000L, locale77);
        long long84 = dateTimeZone38.nextTransition((-4199880L));
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant26 and dateTime27", (instant26.compareTo(dateTime27) == 0) == instant26.equals(dateTime27));
    }

    @Test
    public void test0426() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0426");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField3 = gJChronology2.millisOfSecond();
        org.joda.time.DurationField durationField4 = gJChronology2.millis();
        org.joda.time.DateTimeZone dateTimeZone5 = gJChronology2.getZone();
        long long7 = dateTimeZone5.nextTransition(4320000000L);
        boolean boolean9 = dateTimeZone5.isStandardOffset(3155760001170L);
        java.util.TimeZone timeZone10 = null;
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forTimeZone(timeZone10);
        org.joda.time.chrono.GJChronology gJChronology12 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone11);
        org.joda.time.DateTimeField dateTimeField13 = gJChronology12.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField14 = gJChronology12.weekyearOfCentury();
        org.joda.time.Instant instant15 = gJChronology12.getGregorianCutover();
        org.joda.time.Instant instant17 = instant15.withMillis(0L);
        org.joda.time.Instant instant19 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone20 = null;
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forTimeZone(timeZone20);
        org.joda.time.chrono.GJChronology gJChronology22 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone21);
        org.joda.time.DateTimeField dateTimeField23 = gJChronology22.millisOfSecond();
        int int24 = instant19.get(dateTimeField23);
        org.joda.time.Instant instant26 = instant19.plus(0L);
        int int27 = instant17.compareTo((org.joda.time.ReadableInstant) instant26);
        java.util.TimeZone timeZone28 = null;
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forTimeZone(timeZone28);
        org.joda.time.chrono.GJChronology gJChronology30 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone29);
        org.joda.time.DurationField durationField31 = gJChronology30.halfdays();
        org.joda.time.DateTimeField dateTimeField32 = gJChronology30.millisOfDay();
        org.joda.time.DateTimeField dateTimeField33 = gJChronology30.minuteOfDay();
        org.joda.time.DurationField durationField34 = gJChronology30.centuries();
        org.joda.time.DateTimeField dateTimeField35 = gJChronology30.halfdayOfDay();
        java.util.Locale locale36 = java.util.Locale.ITALIAN;
        java.util.Locale locale37 = locale36.stripExtensions();
        java.util.Locale locale38 = java.util.Locale.CANADA;
        java.lang.String str39 = locale36.getDisplayVariant(locale38);
        boolean boolean40 = gJChronology30.equals((java.lang.Object) locale38);
        org.joda.time.DateTime dateTime41 = instant17.toDateTime((org.joda.time.Chronology) gJChronology30);
        org.joda.time.chrono.GJChronology gJChronology42 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone5, (org.joda.time.ReadableInstant) dateTime41);
        java.lang.String str44 = dateTimeZone5.getName((-60479999900L));
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant17 and dateTime41", (instant17.compareTo(dateTime41) == 0) == instant17.equals(dateTime41));
    }

    @Test
    public void test0427() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0427");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = gJChronology2.halfdays();
        long long7 = gJChronology2.add((long) 'a', (-1L), (int) (short) 0);
        org.joda.time.DateTimeField dateTimeField8 = gJChronology2.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField9 = gJChronology2.centuryOfEra();
        long long13 = gJChronology2.add(4492800100L, 43201764L, 0);
        org.joda.time.Instant instant15 = new org.joda.time.Instant(52L);
        boolean boolean16 = instant15.isEqualNow();
        java.lang.String str17 = instant15.toString();
        java.lang.String str18 = instant15.toString();
        org.joda.time.Instant instant21 = instant15.withDurationAdded(115200000L, (int) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone22 = instant15.getZone();
        org.joda.time.Chronology chronology23 = gJChronology2.withZone(dateTimeZone22);
        org.joda.time.DurationField durationField24 = gJChronology2.eras();
        org.joda.time.DurationField durationField25 = gJChronology2.centuries();
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField3 and durationField24", Math.signum(durationField3.compareTo(durationField24)) == -Math.signum(durationField24.compareTo(durationField3)));
    }

    @Test
    public void test0428() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0428");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        java.util.Locale locale4 = new java.util.Locale("hi!");
        java.lang.String str5 = locale4.getCountry();
        java.util.Locale locale6 = java.util.Locale.getDefault();
        java.lang.String str7 = locale6.getDisplayName();
        java.lang.String str8 = locale4.getDisplayScript(locale6);
        boolean boolean9 = dateTimeZone1.equals((java.lang.Object) locale6);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetMillis((int) '4');
        java.util.TimeZone timeZone12 = dateTimeZone11.toTimeZone();
        long long15 = dateTimeZone11.adjustOffset((long) 0, false);
        int int17 = dateTimeZone11.getOffsetFromLocal((-26438399999L));
        long long19 = dateTimeZone1.getMillisKeepLocal(dateTimeZone11, (long) (byte) 10);
        org.joda.time.Instant instant21 = new org.joda.time.Instant(52L);
        boolean boolean22 = instant21.isEqualNow();
        org.joda.time.ReadableDuration readableDuration23 = null;
        org.joda.time.Instant instant24 = instant21.plus(readableDuration23);
        long long25 = instant21.getMillis();
        java.lang.String str26 = instant21.toString();
        org.joda.time.Instant instant27 = instant21.toInstant();
        org.joda.time.ReadableDuration readableDuration28 = null;
        org.joda.time.Instant instant30 = instant21.withDurationAdded(readableDuration28, (int) 'x');
        java.util.TimeZone timeZone31 = null;
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.forTimeZone(timeZone31);
        org.joda.time.chrono.GJChronology gJChronology33 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone32);
        org.joda.time.DateTimeField dateTimeField34 = gJChronology33.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField35 = gJChronology33.yearOfCentury();
        int int36 = instant30.get(dateTimeField35);
        org.joda.time.chrono.GJChronology gJChronology37 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone11, (org.joda.time.ReadableInstant) instant30);
        org.joda.time.Instant instant38 = instant30.toInstant();
        org.joda.time.Instant instant40 = new org.joda.time.Instant(52L);
        boolean boolean41 = instant40.isEqualNow();
        java.lang.String str42 = instant40.toString();
        java.lang.String str43 = instant40.toString();
        org.joda.time.Instant instant45 = new org.joda.time.Instant(52L);
        boolean boolean46 = instant45.isEqualNow();
        org.joda.time.ReadableDuration readableDuration47 = null;
        org.joda.time.Instant instant48 = instant45.plus(readableDuration47);
        boolean boolean49 = instant40.isBefore((org.joda.time.ReadableInstant) instant48);
        org.joda.time.DateTime dateTime50 = instant40.toDateTime();
        boolean boolean51 = instant38.isAfter((org.joda.time.ReadableInstant) instant40);
        boolean boolean52 = instant38.isAfterNow();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant38 and dateTime50", (instant38.compareTo(dateTime50) == 0) == instant38.equals(dateTime50));
    }

    @Test
    public void test0429() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0429");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField3 = gJChronology2.millisOfSecond();
        org.joda.time.DurationField durationField4 = gJChronology2.millis();
        org.joda.time.DurationField durationField5 = gJChronology2.weeks();
        org.joda.time.DurationField durationField6 = gJChronology2.months();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology2.hourOfDay();
        org.joda.time.Instant instant8 = gJChronology2.getGregorianCutover();
        org.joda.time.DurationField durationField9 = gJChronology2.seconds();
        org.joda.time.DateTimeField dateTimeField10 = gJChronology2.era();
        org.joda.time.DateTimeField dateTimeField11 = gJChronology2.millisOfSecond();
        org.joda.time.DurationField durationField12 = gJChronology2.eras();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField12, durationField4, and durationField5", !(durationField12.compareTo(durationField4) == 0) || (Math.signum(durationField12.compareTo(durationField5)) == Math.signum(durationField4.compareTo(durationField5))));
    }

    @Test
    public void test0430() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0430");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        boolean boolean2 = instant1.isEqualNow();
        java.lang.String str3 = instant1.toString();
        org.joda.time.Instant instant5 = new org.joda.time.Instant(52L);
        boolean boolean6 = instant5.isEqualNow();
        java.lang.String str7 = instant5.toString();
        java.lang.String str8 = instant5.toString();
        org.joda.time.Instant instant11 = instant5.withDurationAdded(115200000L, (int) (short) 1);
        int int12 = instant1.compareTo((org.joda.time.ReadableInstant) instant5);
        org.joda.time.Instant instant14 = new org.joda.time.Instant(52L);
        boolean boolean15 = instant14.isEqualNow();
        org.joda.time.ReadableDuration readableDuration16 = null;
        org.joda.time.Instant instant17 = instant14.plus(readableDuration16);
        boolean boolean19 = instant17.equals((java.lang.Object) ' ');
        boolean boolean20 = instant5.isAfter((org.joda.time.ReadableInstant) instant17);
        org.joda.time.DateTime dateTime21 = instant5.toDateTime();
        java.util.TimeZone timeZone22 = null;
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        org.joda.time.chrono.GJChronology gJChronology24 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone23);
        org.joda.time.DurationField durationField25 = gJChronology24.halfdays();
        long long29 = gJChronology24.add((long) 'a', (-1L), (int) (short) 0);
        org.joda.time.DateTimeField dateTimeField30 = gJChronology24.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField31 = gJChronology24.secondOfMinute();
        org.joda.time.Instant instant33 = new org.joda.time.Instant(52L);
        boolean boolean34 = instant33.isEqualNow();
        org.joda.time.ReadableDuration readableDuration35 = null;
        org.joda.time.Instant instant36 = instant33.plus(readableDuration35);
        boolean boolean37 = gJChronology24.equals((java.lang.Object) instant33);
        java.util.TimeZone timeZone38 = null;
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.forTimeZone(timeZone38);
        org.joda.time.chrono.GJChronology gJChronology40 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone39);
        org.joda.time.DurationField durationField41 = gJChronology40.halfdays();
        org.joda.time.DateTimeField dateTimeField42 = gJChronology40.millisOfDay();
        org.joda.time.DateTimeField dateTimeField43 = gJChronology40.minuteOfDay();
        org.joda.time.DurationField durationField44 = gJChronology40.centuries();
        org.joda.time.DateTimeField dateTimeField45 = gJChronology40.dayOfYear();
        java.lang.String str46 = gJChronology40.toString();
        org.joda.time.DateTimeField dateTimeField47 = gJChronology40.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone48 = gJChronology40.getZone();
        org.joda.time.DateTime dateTime49 = instant33.toDateTime((org.joda.time.Chronology) gJChronology40);
        boolean boolean51 = dateTime49.isBefore(262974605200L);
        boolean boolean52 = dateTime21.isBefore((org.joda.time.ReadableInstant) dateTime49);
        java.lang.String str53 = dateTime49.toString();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and dateTime21", (instant1.compareTo(dateTime21) == 0) == instant1.equals(dateTime21));
    }

    @Test
    public void test0431() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0431");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        boolean boolean2 = instant1.isEqualNow();
        org.joda.time.ReadableDuration readableDuration3 = null;
        org.joda.time.Instant instant4 = instant1.plus(readableDuration3);
        org.joda.time.Instant instant6 = new org.joda.time.Instant(52L);
        org.joda.time.Instant instant8 = instant6.withMillis((long) 'u');
        boolean boolean9 = instant1.isBefore((org.joda.time.ReadableInstant) instant6);
        org.joda.time.DateTimeZone dateTimeZone10 = instant6.getZone();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetMillis((int) '4');
        java.util.TimeZone timeZone13 = dateTimeZone12.toTimeZone();
        long long16 = dateTimeZone12.adjustOffset((long) 0, false);
        int int18 = dateTimeZone12.getOffsetFromLocal((-26438399999L));
        java.util.TimeZone timeZone19 = dateTimeZone12.toTimeZone();
        java.lang.String str20 = dateTimeZone12.getID();
        org.joda.time.DateTime dateTime21 = instant6.toDateTime(dateTimeZone12);
        java.util.TimeZone timeZone22 = null;
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        java.lang.String str25 = dateTimeZone23.getNameKey((long) 100);
        boolean boolean26 = dateTimeZone23.isFixed();
        java.util.Locale locale30 = new java.util.Locale("DurationField[halfdays]", "\u82f1\u6587");
        java.lang.String str31 = dateTimeZone23.getName((long) (short) 10, locale30);
        java.lang.String str33 = dateTimeZone23.getNameKey(17296800000L);
        long long36 = dateTimeZone23.adjustOffset(4492800100L, true);
        org.joda.time.DateTime dateTime37 = dateTime21.toDateTime(dateTimeZone23);
        org.joda.time.DateTimeZone dateTimeZone38 = dateTime21.getZone();
        java.util.TimeZone timeZone39 = null;
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.forTimeZone(timeZone39);
        org.joda.time.chrono.GJChronology gJChronology41 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone40);
        org.joda.time.DurationField durationField42 = gJChronology41.halfdays();
        org.joda.time.DateTimeField dateTimeField43 = gJChronology41.millisOfDay();
        org.joda.time.DateTimeField dateTimeField44 = gJChronology41.secondOfMinute();
        org.joda.time.DurationField durationField45 = gJChronology41.weekyears();
        java.lang.String str46 = gJChronology41.toString();
        org.joda.time.DateTime dateTime47 = dateTime21.toDateTime((org.joda.time.Chronology) gJChronology41);
        org.joda.time.DateTimeFieldType dateTimeFieldType48 = null;
        boolean boolean49 = dateTime47.isSupported(dateTimeFieldType48);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and dateTime21", (instant1.compareTo(dateTime21) == 0) == instant1.equals(dateTime21));
    }

    @Test
    public void test0432() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0432");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forTimeZone(timeZone2);
        org.joda.time.chrono.GJChronology gJChronology4 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone3);
        org.joda.time.DateTimeField dateTimeField5 = gJChronology4.millisOfSecond();
        int int6 = instant1.get(dateTimeField5);
        boolean boolean7 = instant1.isEqualNow();
        org.joda.time.DateTime dateTime8 = instant1.toDateTime();
        org.joda.time.Instant instant11 = instant1.withDurationAdded((long) 1431201, 1970);
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.Instant instant14 = instant11.withDurationAdded(readableDuration12, (int) (short) -1);
        org.joda.time.Chronology chronology15 = instant14.getChronology();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and dateTime8", (instant1.compareTo(dateTime8) == 0) == instant1.equals(dateTime8));
    }

    @Test
    public void test0433() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0433");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        boolean boolean2 = instant1.isEqualNow();
        org.joda.time.ReadableDuration readableDuration3 = null;
        org.joda.time.Instant instant4 = instant1.plus(readableDuration3);
        long long5 = instant1.getMillis();
        java.lang.String str6 = instant1.toString();
        org.joda.time.Instant instant7 = instant1.toInstant();
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.Instant instant10 = instant1.withDurationAdded(readableDuration8, (int) 'x');
        org.joda.time.Instant instant11 = instant1.toInstant();
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.Instant instant14 = instant11.withDurationAdded(readableDuration12, (int) 'u');
        java.util.TimeZone timeZone15 = null;
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forTimeZone(timeZone15);
        org.joda.time.chrono.GJChronology gJChronology17 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone16);
        org.joda.time.DurationField durationField18 = gJChronology17.halfdays();
        org.joda.time.DateTimeField dateTimeField19 = gJChronology17.millisOfDay();
        org.joda.time.DateTimeField dateTimeField20 = gJChronology17.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField21 = gJChronology17.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone22 = gJChronology17.getZone();
        boolean boolean23 = dateTimeZone22.isFixed();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone22);
        long long26 = dateTimeZone22.convertUTCToLocal(43200100L);
        org.joda.time.DateTime dateTime27 = instant11.toDateTime(dateTimeZone22);
        boolean boolean29 = dateTimeZone22.isStandardOffset((long) 1164);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and dateTime27", (instant1.compareTo(dateTime27) == 0) == instant1.equals(dateTime27));
    }

    @Test
    public void test0434() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0434");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forTimeZone(timeZone2);
        org.joda.time.chrono.GJChronology gJChronology4 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone3);
        org.joda.time.DateTimeField dateTimeField5 = gJChronology4.millisOfSecond();
        int int6 = instant1.get(dateTimeField5);
        org.joda.time.Instant instant8 = instant1.plus(0L);
        org.joda.time.Instant instant9 = instant8.toInstant();
        org.joda.time.Instant instant11 = new org.joda.time.Instant(52L);
        boolean boolean12 = instant11.isEqualNow();
        java.lang.String str13 = instant11.toString();
        java.lang.String str14 = instant11.toString();
        org.joda.time.Instant instant16 = new org.joda.time.Instant(52L);
        boolean boolean17 = instant16.isEqualNow();
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.Instant instant19 = instant16.plus(readableDuration18);
        boolean boolean20 = instant11.isBefore((org.joda.time.ReadableInstant) instant19);
        org.joda.time.Instant instant22 = instant11.minus((long) 0);
        int int23 = instant8.compareTo((org.joda.time.ReadableInstant) instant11);
        org.joda.time.Instant instant26 = instant11.withDurationAdded((long) (short) 100, 70);
        org.joda.time.ReadableInstant readableInstant27 = null;
        boolean boolean28 = instant11.isBefore(readableInstant27);
        java.lang.String str29 = instant11.toString();
        org.joda.time.MutableDateTime mutableDateTime30 = instant11.toMutableDateTimeISO();
        java.util.TimeZone timeZone31 = null;
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.forTimeZone(timeZone31);
        org.joda.time.chrono.GJChronology gJChronology33 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone32);
        org.joda.time.DateTimeField dateTimeField34 = gJChronology33.millisOfSecond();
        org.joda.time.DurationField durationField35 = gJChronology33.weeks();
        org.joda.time.DurationField durationField36 = gJChronology33.months();
        org.joda.time.DurationField durationField37 = gJChronology33.days();
        org.joda.time.DateTimeField dateTimeField38 = gJChronology33.millisOfDay();
        org.joda.time.DateTime dateTime39 = instant11.toDateTime((org.joda.time.Chronology) gJChronology33);
        org.joda.time.DateTime dateTime40 = instant11.toDateTimeISO();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and mutableDateTime30", (instant1.compareTo(mutableDateTime30) == 0) == instant1.equals(mutableDateTime30));
    }

    @Test
    public void test0435() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0435");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(3155760000000L);
        org.joda.time.Instant instant2 = instant1.toInstant();
        boolean boolean3 = instant2.isEqualNow();
        org.joda.time.Instant instant5 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone6 = null;
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forTimeZone(timeZone6);
        org.joda.time.chrono.GJChronology gJChronology8 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone7);
        org.joda.time.DateTimeField dateTimeField9 = gJChronology8.millisOfSecond();
        int int10 = instant5.get(dateTimeField9);
        org.joda.time.Instant instant12 = instant5.plus(0L);
        org.joda.time.Instant instant13 = instant12.toInstant();
        org.joda.time.Instant instant15 = new org.joda.time.Instant(52L);
        boolean boolean16 = instant15.isEqualNow();
        java.lang.String str17 = instant15.toString();
        java.lang.String str18 = instant15.toString();
        org.joda.time.Instant instant20 = new org.joda.time.Instant(52L);
        boolean boolean21 = instant20.isEqualNow();
        org.joda.time.ReadableDuration readableDuration22 = null;
        org.joda.time.Instant instant23 = instant20.plus(readableDuration22);
        boolean boolean24 = instant15.isBefore((org.joda.time.ReadableInstant) instant23);
        org.joda.time.Instant instant26 = instant15.minus((long) 0);
        int int27 = instant12.compareTo((org.joda.time.ReadableInstant) instant15);
        org.joda.time.Instant instant30 = instant12.withDurationAdded((long) 432086114, 97);
        org.joda.time.MutableDateTime mutableDateTime31 = instant30.toMutableDateTime();
        org.joda.time.Instant instant33 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone34 = null;
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.forTimeZone(timeZone34);
        org.joda.time.chrono.GJChronology gJChronology36 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone35);
        org.joda.time.DateTimeField dateTimeField37 = gJChronology36.millisOfSecond();
        int int38 = instant33.get(dateTimeField37);
        boolean boolean39 = instant33.isEqualNow();
        org.joda.time.DateTime dateTime40 = instant33.toDateTime();
        boolean boolean41 = mutableDateTime31.isAfter((org.joda.time.ReadableInstant) dateTime40);
        boolean boolean42 = instant2.isAfter((org.joda.time.ReadableInstant) dateTime40);
        java.util.TimeZone timeZone43 = null;
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.forTimeZone(timeZone43);
        org.joda.time.chrono.GJChronology gJChronology45 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone44);
        org.joda.time.DurationField durationField46 = gJChronology45.halfdays();
        long long50 = gJChronology45.add((long) 'a', (-1L), (int) (short) 0);
        long long54 = gJChronology45.add((long) (byte) 0, (long) '4', 100);
        org.joda.time.DurationField durationField55 = gJChronology45.years();
        org.joda.time.DateTimeField dateTimeField56 = gJChronology45.dayOfMonth();
        int int57 = dateTime40.get(dateTimeField56);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant30 and mutableDateTime31", (instant30.compareTo(mutableDateTime31) == 0) == instant30.equals(mutableDateTime31));
    }

    @Test
    public void test0436() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0436");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField3 = gJChronology2.era();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.weekyear();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.weekyearOfCentury();
        org.joda.time.DurationField durationField6 = gJChronology2.millis();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology2.dayOfWeek();
        org.joda.time.DurationField durationField8 = gJChronology2.millis();
        org.joda.time.Instant instant9 = gJChronology2.getGregorianCutover();
        org.joda.time.Instant instant12 = instant9.withDurationAdded((-61352915L), (-19));
        boolean boolean13 = instant12.isAfterNow();
        java.util.TimeZone timeZone14 = null;
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forTimeZone(timeZone14);
        org.joda.time.chrono.GJChronology gJChronology16 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone15);
        org.joda.time.DateTimeField dateTimeField17 = gJChronology16.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField18 = gJChronology16.weekyear();
        org.joda.time.DurationField durationField19 = gJChronology16.centuries();
        org.joda.time.DateTimeField dateTimeField20 = gJChronology16.millisOfDay();
        org.joda.time.DateTimeField dateTimeField21 = gJChronology16.secondOfMinute();
        org.joda.time.DateTime dateTime22 = instant12.toDateTime((org.joda.time.Chronology) gJChronology16);
        org.joda.time.DateTimeField dateTimeField23 = gJChronology16.clockhourOfDay();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant12 and dateTime22", (instant12.compareTo(dateTime22) == 0) == instant12.equals(dateTime22));
    }

    @Test
    public void test0437() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0437");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forTimeZone(timeZone2);
        org.joda.time.chrono.GJChronology gJChronology4 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone3);
        org.joda.time.DateTimeField dateTimeField5 = gJChronology4.millisOfSecond();
        int int6 = instant1.get(dateTimeField5);
        org.joda.time.Instant instant8 = instant1.plus(0L);
        org.joda.time.Instant instant9 = instant8.toInstant();
        org.joda.time.Instant instant11 = new org.joda.time.Instant(52L);
        boolean boolean12 = instant11.isEqualNow();
        java.lang.String str13 = instant11.toString();
        java.lang.String str14 = instant11.toString();
        org.joda.time.Instant instant16 = new org.joda.time.Instant(52L);
        boolean boolean17 = instant16.isEqualNow();
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.Instant instant19 = instant16.plus(readableDuration18);
        boolean boolean20 = instant11.isBefore((org.joda.time.ReadableInstant) instant19);
        org.joda.time.Instant instant22 = instant11.minus((long) 0);
        int int23 = instant8.compareTo((org.joda.time.ReadableInstant) instant11);
        org.joda.time.Instant instant26 = instant11.withDurationAdded((long) (short) 100, 70);
        org.joda.time.ReadableDuration readableDuration27 = null;
        org.joda.time.Instant instant28 = instant11.minus(readableDuration27);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.DateTime dateTime30 = instant11.toDateTime(chronology29);
        org.joda.time.DateTimeZone dateTimeZone31 = instant11.getZone();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and dateTime30", (instant1.compareTo(dateTime30) == 0) == instant1.equals(dateTime30));
    }

    @Test
    public void test0438() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0438");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        org.joda.time.Instant instant3 = instant1.withMillis((long) 'u');
        java.util.TimeZone timeZone4 = null;
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forTimeZone(timeZone4);
        org.joda.time.chrono.GJChronology gJChronology6 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone5);
        org.joda.time.DurationField durationField7 = gJChronology6.halfdays();
        long long11 = gJChronology6.add((long) 'a', (-1L), (int) (short) 0);
        boolean boolean13 = gJChronology6.equals((java.lang.Object) 0);
        org.joda.time.DateTimeField dateTimeField14 = gJChronology6.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology6.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField16 = gJChronology6.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField17 = gJChronology6.clockhourOfHalfday();
        org.joda.time.DateTime dateTime18 = instant1.toDateTime((org.joda.time.Chronology) gJChronology6);
        java.util.TimeZone timeZone19 = null;
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forTimeZone(timeZone19);
        org.joda.time.chrono.GJChronology gJChronology21 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone20);
        org.joda.time.DurationField durationField22 = gJChronology21.halfdays();
        long long26 = gJChronology21.add((long) 'a', (-1L), (int) (short) 0);
        boolean boolean28 = gJChronology21.equals((java.lang.Object) 0);
        org.joda.time.DateTimeField dateTimeField29 = gJChronology21.dayOfMonth();
        org.joda.time.DateTime dateTime30 = instant1.toDateTime((org.joda.time.Chronology) gJChronology21);
        org.joda.time.DateTime dateTime31 = instant1.toDateTimeISO();
        org.joda.time.Instant instant33 = new org.joda.time.Instant(52L);
        boolean boolean34 = instant33.isEqualNow();
        java.lang.String str35 = instant33.toString();
        org.joda.time.Instant instant37 = new org.joda.time.Instant(52L);
        boolean boolean38 = instant37.isEqualNow();
        java.lang.String str39 = instant37.toString();
        java.lang.String str40 = instant37.toString();
        org.joda.time.Instant instant43 = instant37.withDurationAdded(115200000L, (int) (short) 1);
        int int44 = instant33.compareTo((org.joda.time.ReadableInstant) instant37);
        org.joda.time.Instant instant46 = new org.joda.time.Instant(52L);
        boolean boolean47 = instant46.isEqualNow();
        org.joda.time.ReadableDuration readableDuration48 = null;
        org.joda.time.Instant instant49 = instant46.plus(readableDuration48);
        boolean boolean51 = instant49.equals((java.lang.Object) ' ');
        boolean boolean52 = instant37.isAfter((org.joda.time.ReadableInstant) instant49);
        java.lang.String str53 = instant49.toString();
        java.lang.String str54 = instant49.toString();
        org.joda.time.ReadableDuration readableDuration55 = null;
        org.joda.time.Instant instant57 = instant49.withDurationAdded(readableDuration55, 236785);
        org.joda.time.Instant instant59 = new org.joda.time.Instant((-64983772799999L));
        org.joda.time.DateTime dateTime60 = instant59.toDateTime();
        org.joda.time.MutableDateTime mutableDateTime61 = instant59.toMutableDateTime();
        int int62 = instant49.compareTo((org.joda.time.ReadableInstant) instant59);
        boolean boolean63 = instant1.isEqual((org.joda.time.ReadableInstant) instant59);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime18 and dateTime31", (dateTime18.compareTo(dateTime31) == 0) == dateTime18.equals(dateTime31));
    }

    @Test
    public void test0439() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0439");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forTimeZone(timeZone2);
        org.joda.time.chrono.GJChronology gJChronology4 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone3);
        org.joda.time.DateTimeField dateTimeField5 = gJChronology4.millisOfSecond();
        int int6 = instant1.get(dateTimeField5);
        org.joda.time.Instant instant8 = instant1.plus(0L);
        long long9 = instant8.getMillis();
        java.util.TimeZone timeZone10 = null;
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forTimeZone(timeZone10);
        org.joda.time.chrono.GJChronology gJChronology12 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone11);
        org.joda.time.DurationField durationField13 = gJChronology12.halfdays();
        long long17 = gJChronology12.add((long) 'a', (-1L), (int) (short) 0);
        long long21 = gJChronology12.add((long) (byte) 0, (long) '4', 100);
        org.joda.time.DurationField durationField22 = gJChronology12.years();
        org.joda.time.Instant instant23 = gJChronology12.getGregorianCutover();
        org.joda.time.DateTimeField dateTimeField24 = gJChronology12.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime25 = instant8.toMutableDateTime((org.joda.time.Chronology) gJChronology12);
        org.joda.time.DurationField durationField26 = gJChronology12.millis();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and mutableDateTime25", (instant1.compareTo(mutableDateTime25) == 0) == instant1.equals(mutableDateTime25));
    }

    @Test
    public void test0440() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0440");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        boolean boolean2 = instant1.isEqualNow();
        org.joda.time.ReadableDuration readableDuration3 = null;
        org.joda.time.Instant instant4 = instant1.plus(readableDuration3);
        boolean boolean6 = instant4.equals((java.lang.Object) ' ');
        org.joda.time.Instant instant8 = new org.joda.time.Instant(52L);
        boolean boolean9 = instant8.isEqualNow();
        java.lang.String str10 = instant8.toString();
        java.lang.String str11 = instant8.toString();
        boolean boolean12 = instant4.isBefore((org.joda.time.ReadableInstant) instant8);
        org.joda.time.Instant instant14 = instant8.minus((long) (-102228));
        java.util.TimeZone timeZone15 = null;
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forTimeZone(timeZone15);
        java.lang.String str18 = dateTimeZone16.getNameKey((long) 100);
        long long21 = dateTimeZone16.convertLocalToUTC((-2246399965L), true);
        long long24 = dateTimeZone16.adjustOffset((long) '#', true);
        org.joda.time.MutableDateTime mutableDateTime25 = instant8.toMutableDateTime(dateTimeZone16);
        int int27 = dateTimeZone16.getOffsetFromLocal(259199996880000L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and mutableDateTime25", (instant1.compareTo(mutableDateTime25) == 0) == instant1.equals(mutableDateTime25));
    }

    @Test
    public void test0441() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0441");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forTimeZone(timeZone2);
        org.joda.time.chrono.GJChronology gJChronology4 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone3);
        org.joda.time.DateTimeField dateTimeField5 = gJChronology4.millisOfSecond();
        int int6 = instant1.get(dateTimeField5);
        java.util.TimeZone timeZone7 = null;
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forTimeZone(timeZone7);
        org.joda.time.chrono.GJChronology gJChronology9 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone8);
        org.joda.time.DurationField durationField10 = gJChronology9.halfdays();
        java.util.TimeZone timeZone11 = null;
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forTimeZone(timeZone11);
        org.joda.time.chrono.GJChronology gJChronology13 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone12);
        long long17 = dateTimeZone12.convertLocalToUTC((long) (byte) -1, true, 0L);
        boolean boolean19 = dateTimeZone12.equals((java.lang.Object) true);
        org.joda.time.Chronology chronology20 = gJChronology9.withZone(dateTimeZone12);
        org.joda.time.MutableDateTime mutableDateTime21 = instant1.toMutableDateTime(dateTimeZone12);
        boolean boolean22 = mutableDateTime21.isAfterNow();
        java.util.TimeZone timeZone23 = null;
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forTimeZone(timeZone23);
        org.joda.time.chrono.GJChronology gJChronology25 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone24);
        org.joda.time.DurationField durationField26 = gJChronology25.halfdays();
        long long30 = gJChronology25.add((long) 'a', (-1L), (int) (short) 0);
        boolean boolean31 = mutableDateTime21.equals((java.lang.Object) gJChronology25);
        org.joda.time.Instant instant33 = new org.joda.time.Instant(52L);
        boolean boolean34 = instant33.isEqualNow();
        org.joda.time.ReadableDuration readableDuration35 = null;
        org.joda.time.Instant instant36 = instant33.plus(readableDuration35);
        long long37 = instant33.getMillis();
        java.lang.String str38 = instant33.toString();
        boolean boolean40 = instant33.isAfter((long) (-1));
        org.joda.time.Instant instant41 = instant33.toInstant();
        boolean boolean42 = mutableDateTime21.isEqual((org.joda.time.ReadableInstant) instant41);
        boolean boolean44 = mutableDateTime21.isBefore(5185792L);
        java.util.Date date45 = mutableDateTime21.toDate();
        java.util.TimeZone timeZone46 = null;
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.forTimeZone(timeZone46);
        org.joda.time.chrono.GJChronology gJChronology48 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone47);
        org.joda.time.DurationField durationField49 = gJChronology48.halfdays();
        org.joda.time.DateTimeField dateTimeField50 = gJChronology48.millisOfDay();
        org.joda.time.DateTimeField dateTimeField51 = gJChronology48.minuteOfDay();
        org.joda.time.DurationField durationField52 = gJChronology48.centuries();
        org.joda.time.DateTimeField dateTimeField53 = gJChronology48.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField54 = gJChronology48.year();
        org.joda.time.DurationField durationField55 = gJChronology48.years();
        org.joda.time.DateTimeField dateTimeField56 = gJChronology48.minuteOfDay();
        org.joda.time.Chronology chronology57 = gJChronology48.withUTC();
        org.joda.time.DateTimeField dateTimeField58 = gJChronology48.yearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime59 = mutableDateTime21.toMutableDateTime((org.joda.time.Chronology) gJChronology48);
        org.joda.time.DateTimeField dateTimeField60 = gJChronology48.clockhourOfDay();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and mutableDateTime21", (instant1.compareTo(mutableDateTime21) == 0) == instant1.equals(mutableDateTime21));
    }

    @Test
    public void test0442() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0442");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        boolean boolean2 = instant1.isEqualNow();
        org.joda.time.ReadableDuration readableDuration3 = null;
        org.joda.time.Instant instant4 = instant1.plus(readableDuration3);
        long long5 = instant1.getMillis();
        java.lang.String str6 = instant1.toString();
        org.joda.time.Instant instant7 = instant1.toInstant();
        java.util.TimeZone timeZone8 = null;
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forTimeZone(timeZone8);
        java.lang.String str11 = dateTimeZone9.getNameKey((long) 100);
        long long14 = dateTimeZone9.convertLocalToUTC((-2246399965L), true);
        org.joda.time.MutableDateTime mutableDateTime15 = instant7.toMutableDateTime(dateTimeZone9);
        boolean boolean17 = instant7.isBefore((-2980259049600000L));
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant7 and mutableDateTime15", (instant7.compareTo(mutableDateTime15) == 0) == instant7.equals(mutableDateTime15));
    }

    @Test
    public void test0443() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0443");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forTimeZone(timeZone2);
        org.joda.time.chrono.GJChronology gJChronology4 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone3);
        org.joda.time.DateTimeField dateTimeField5 = gJChronology4.millisOfSecond();
        int int6 = instant1.get(dateTimeField5);
        boolean boolean7 = instant1.isEqualNow();
        boolean boolean9 = instant1.isBefore(35L);
        org.joda.time.MutableDateTime mutableDateTime10 = instant1.toMutableDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(1, 10);
        java.util.TimeZone timeZone14 = null;
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forTimeZone(timeZone14);
        long long17 = dateTimeZone13.getMillisKeepLocal(dateTimeZone15, 4320000000L);
        org.joda.time.Instant instant19 = new org.joda.time.Instant(52L);
        boolean boolean20 = instant19.isEqualNow();
        org.joda.time.ReadableDuration readableDuration21 = null;
        org.joda.time.Instant instant22 = instant19.plus(readableDuration21);
        long long23 = instant19.getMillis();
        java.lang.String str24 = instant19.toString();
        org.joda.time.Instant instant25 = instant19.toInstant();
        org.joda.time.ReadableDuration readableDuration26 = null;
        org.joda.time.Instant instant28 = instant19.withDurationAdded(readableDuration26, (int) 'x');
        org.joda.time.Instant instant29 = instant19.toInstant();
        int int30 = dateTimeZone13.getOffset((org.joda.time.ReadableInstant) instant19);
        org.joda.time.DateTimeFieldType dateTimeFieldType31 = null;
        boolean boolean32 = instant19.isSupported(dateTimeFieldType31);
        boolean boolean34 = instant19.isEqual(26328952801764L);
        org.joda.time.MutableDateTime mutableDateTime35 = instant19.toMutableDateTimeISO();
        boolean boolean36 = instant1.isAfter((org.joda.time.ReadableInstant) mutableDateTime35);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime10 and instant19", (mutableDateTime10.compareTo(instant19) == 0) == mutableDateTime10.equals(instant19));
    }

    @Test
    public void test0444() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0444");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        boolean boolean2 = instant1.isEqualNow();
        org.joda.time.ReadableDuration readableDuration3 = null;
        org.joda.time.Instant instant4 = instant1.plus(readableDuration3);
        boolean boolean6 = instant4.equals((java.lang.Object) ' ');
        org.joda.time.Instant instant8 = instant4.plus(3600000L);
        java.util.TimeZone timeZone9 = null;
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forTimeZone(timeZone9);
        org.joda.time.chrono.GJChronology gJChronology11 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone10);
        org.joda.time.DateTimeField dateTimeField12 = gJChronology11.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField13 = gJChronology11.weekyear();
        org.joda.time.DateTimeField dateTimeField14 = gJChronology11.dayOfMonth();
        long long18 = gJChronology11.add((long) 52, 100L, (int) (byte) 1);
        int int19 = gJChronology11.getMinimumDaysInFirstWeek();
        boolean boolean20 = instant4.equals((java.lang.Object) int19);
        org.joda.time.Instant instant21 = instant4.toInstant();
        org.joda.time.ReadableDuration readableDuration22 = null;
        org.joda.time.Instant instant24 = instant4.withDurationAdded(readableDuration22, 60000);
        java.util.TimeZone timeZone25 = null;
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forTimeZone(timeZone25);
        java.lang.String str28 = dateTimeZone26.getNameKey((long) 100);
        boolean boolean29 = dateTimeZone26.isFixed();
        org.joda.time.Instant instant31 = new org.joda.time.Instant(52L);
        boolean boolean32 = instant31.isEqualNow();
        java.lang.String str33 = instant31.toString();
        java.lang.String str34 = instant31.toString();
        org.joda.time.Instant instant37 = instant31.withDurationAdded(115200000L, (int) (short) 1);
        java.util.TimeZone timeZone38 = null;
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.forTimeZone(timeZone38);
        java.lang.String str41 = dateTimeZone39.getNameKey((long) 100);
        boolean boolean42 = dateTimeZone39.isFixed();
        org.joda.time.DateTime dateTime43 = instant31.toDateTime(dateTimeZone39);
        org.joda.time.DateTimeFieldType dateTimeFieldType44 = null;
        boolean boolean45 = instant31.isSupported(dateTimeFieldType44);
        int int46 = dateTimeZone26.getOffset((org.joda.time.ReadableInstant) instant31);
        org.joda.time.MutableDateTime mutableDateTime47 = instant24.toMutableDateTime(dateTimeZone26);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant24 and dateTime43", (instant24.compareTo(dateTime43) == 0) == instant24.equals(dateTime43));
    }

    @Test
    public void test0445() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0445");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forTimeZone(timeZone2);
        org.joda.time.chrono.GJChronology gJChronology4 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone3);
        org.joda.time.DateTimeField dateTimeField5 = gJChronology4.millisOfSecond();
        int int6 = instant1.get(dateTimeField5);
        boolean boolean7 = instant1.isEqualNow();
        org.joda.time.Instant instant9 = new org.joda.time.Instant(52L);
        boolean boolean10 = instant9.isEqualNow();
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.Instant instant12 = instant9.plus(readableDuration11);
        long long13 = instant9.getMillis();
        java.lang.Object obj14 = null;
        boolean boolean15 = instant9.equals(obj14);
        org.joda.time.Instant instant17 = new org.joda.time.Instant(52L);
        boolean boolean18 = instant17.isEqualNow();
        org.joda.time.ReadableDuration readableDuration19 = null;
        org.joda.time.Instant instant20 = instant17.plus(readableDuration19);
        long long21 = instant17.getMillis();
        java.lang.String str22 = instant17.toString();
        org.joda.time.Instant instant23 = instant17.toInstant();
        org.joda.time.ReadableDuration readableDuration24 = null;
        org.joda.time.Instant instant26 = instant17.withDurationAdded(readableDuration24, (int) 'x');
        org.joda.time.Instant instant27 = instant17.toInstant();
        int int28 = instant9.compareTo((org.joda.time.ReadableInstant) instant17);
        boolean boolean29 = instant1.isBefore((org.joda.time.ReadableInstant) instant17);
        java.util.TimeZone timeZone30 = null;
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forTimeZone(timeZone30);
        org.joda.time.chrono.GJChronology gJChronology32 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone31);
        org.joda.time.DateTimeField dateTimeField33 = gJChronology32.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField34 = gJChronology32.weekyearOfCentury();
        org.joda.time.Instant instant35 = gJChronology32.getGregorianCutover();
        org.joda.time.Instant instant37 = instant35.withMillis(0L);
        org.joda.time.Instant instant39 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone40 = null;
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.forTimeZone(timeZone40);
        org.joda.time.chrono.GJChronology gJChronology42 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone41);
        org.joda.time.DateTimeField dateTimeField43 = gJChronology42.millisOfSecond();
        int int44 = instant39.get(dateTimeField43);
        org.joda.time.Instant instant46 = instant39.plus(0L);
        int int47 = instant37.compareTo((org.joda.time.ReadableInstant) instant46);
        org.joda.time.Instant instant49 = new org.joda.time.Instant(52L);
        boolean boolean50 = instant49.isEqualNow();
        org.joda.time.ReadableDuration readableDuration51 = null;
        org.joda.time.Instant instant52 = instant49.plus(readableDuration51);
        boolean boolean54 = instant52.equals((java.lang.Object) ' ');
        boolean boolean55 = instant46.isEqual((org.joda.time.ReadableInstant) instant52);
        org.joda.time.MutableDateTime mutableDateTime56 = instant46.toMutableDateTime();
        boolean boolean57 = instant17.isEqual((org.joda.time.ReadableInstant) mutableDateTime56);
        org.joda.time.Instant instant58 = instant17.toInstant();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and mutableDateTime56", (instant1.compareTo(mutableDateTime56) == 0) == instant1.equals(mutableDateTime56));
    }

    @Test
    public void test0446() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0446");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        boolean boolean2 = instant1.isEqualNow();
        org.joda.time.ReadableDuration readableDuration3 = null;
        org.joda.time.Instant instant4 = instant1.plus(readableDuration3);
        long long5 = instant1.getMillis();
        java.lang.String str6 = instant1.toString();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.getDefault();
        long long9 = dateTimeZone7.nextTransition(1000L);
        org.joda.time.DateTime dateTime10 = instant1.toDateTime(dateTimeZone7);
        long long12 = dateTimeZone7.convertUTCToLocal(233625599116L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and dateTime10", (instant1.compareTo(dateTime10) == 0) == instant1.equals(dateTime10));
    }

    @Test
    public void test0447() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0447");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        boolean boolean2 = instant1.isEqualNow();
        java.lang.String str3 = instant1.toString();
        org.joda.time.Instant instant5 = new org.joda.time.Instant(52L);
        boolean boolean6 = instant5.isEqualNow();
        java.lang.String str7 = instant5.toString();
        java.lang.String str8 = instant5.toString();
        org.joda.time.Instant instant11 = instant5.withDurationAdded(115200000L, (int) (short) 1);
        int int12 = instant1.compareTo((org.joda.time.ReadableInstant) instant5);
        org.joda.time.MutableDateTime mutableDateTime13 = instant1.toMutableDateTimeISO();
        org.joda.time.Chronology chronology14 = instant1.getChronology();
        boolean boolean16 = instant1.isBefore((-431998030L));
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant5 and mutableDateTime13", (instant5.compareTo(mutableDateTime13) == 0) == instant5.equals(mutableDateTime13));
    }

    @Test
    public void test0448() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0448");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forTimeZone(timeZone2);
        org.joda.time.chrono.GJChronology gJChronology4 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone3);
        org.joda.time.DateTimeField dateTimeField5 = gJChronology4.millisOfSecond();
        int int6 = instant1.get(dateTimeField5);
        org.joda.time.Instant instant8 = instant1.plus(0L);
        org.joda.time.Instant instant10 = new org.joda.time.Instant(52L);
        boolean boolean11 = instant10.isEqualNow();
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.Instant instant13 = instant10.plus(readableDuration12);
        long long14 = instant10.getMillis();
        java.lang.String str15 = instant10.toString();
        org.joda.time.Instant instant16 = instant10.toInstant();
        java.util.TimeZone timeZone17 = null;
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forTimeZone(timeZone17);
        java.lang.String str20 = dateTimeZone18.getNameKey((long) 100);
        long long23 = dateTimeZone18.convertLocalToUTC((-2246399965L), true);
        org.joda.time.MutableDateTime mutableDateTime24 = instant16.toMutableDateTime(dateTimeZone18);
        int int25 = instant8.compareTo((org.joda.time.ReadableInstant) mutableDateTime24);
        org.joda.time.Instant instant27 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone28 = null;
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forTimeZone(timeZone28);
        org.joda.time.chrono.GJChronology gJChronology30 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone29);
        org.joda.time.DateTimeField dateTimeField31 = gJChronology30.millisOfSecond();
        int int32 = instant27.get(dateTimeField31);
        org.joda.time.Instant instant34 = instant27.plus(0L);
        org.joda.time.Instant instant35 = instant34.toInstant();
        boolean boolean36 = mutableDateTime24.isEqual((org.joda.time.ReadableInstant) instant35);
        org.joda.time.DateTimeZone dateTimeZone37 = mutableDateTime24.getZone();
        boolean boolean39 = dateTimeZone37.isStandardOffset((-36072896L));
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and mutableDateTime24", (instant1.compareTo(mutableDateTime24) == 0) == instant1.equals(mutableDateTime24));
    }

    @Test
    public void test0449() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0449");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = gJChronology2.halfdays();
        long long7 = gJChronology2.add((long) 'a', (-1L), (int) (short) 0);
        boolean boolean9 = gJChronology2.equals((java.lang.Object) 0);
        org.joda.time.DateTimeField dateTimeField10 = gJChronology2.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField11 = gJChronology2.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField12 = gJChronology2.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField13 = gJChronology2.clockhourOfHalfday();
        org.joda.time.DurationField durationField14 = gJChronology2.halfdays();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology2.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField16 = gJChronology2.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField17 = gJChronology2.weekyearOfCentury();
        java.util.TimeZone timeZone18 = null;
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forTimeZone(timeZone18);
        org.joda.time.chrono.GJChronology gJChronology20 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone19);
        org.joda.time.DurationField durationField21 = gJChronology20.halfdays();
        org.joda.time.DateTimeField dateTimeField22 = gJChronology20.millisOfDay();
        org.joda.time.DateTimeField dateTimeField23 = gJChronology20.minuteOfDay();
        org.joda.time.DurationField durationField24 = gJChronology20.centuries();
        org.joda.time.DateTimeField dateTimeField25 = gJChronology20.yearOfEra();
        boolean boolean26 = gJChronology2.equals((java.lang.Object) gJChronology20);
        org.joda.time.Chronology chronology27 = gJChronology20.withUTC();
        org.joda.time.DurationField durationField28 = gJChronology20.eras();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField28, durationField3, and durationField24", !(durationField28.compareTo(durationField3) == 0) || (Math.signum(durationField28.compareTo(durationField24)) == Math.signum(durationField3.compareTo(durationField24))));
    }

    @Test
    public void test0450() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0450");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField3 = gJChronology2.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.millisOfSecond();
        org.joda.time.DurationField durationField5 = gJChronology2.days();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology2.minuteOfHour();
        org.joda.time.DurationField durationField7 = gJChronology2.centuries();
        java.util.TimeZone timeZone8 = null;
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forTimeZone(timeZone8);
        org.joda.time.chrono.GJChronology gJChronology10 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone9);
        org.joda.time.DateTimeField dateTimeField11 = gJChronology10.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField12 = gJChronology10.weekyear();
        org.joda.time.DurationField durationField13 = gJChronology10.centuries();
        long long15 = durationField13.getMillis((-1));
        int int16 = durationField7.compareTo(durationField13);
        java.util.TimeZone timeZone17 = null;
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forTimeZone(timeZone17);
        org.joda.time.chrono.GJChronology gJChronology19 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone18);
        org.joda.time.DateTimeField dateTimeField20 = gJChronology19.millisOfSecond();
        org.joda.time.DurationField durationField21 = gJChronology19.millis();
        org.joda.time.DurationField durationField22 = gJChronology19.weeks();
        org.joda.time.DurationField durationField23 = gJChronology19.months();
        org.joda.time.DateTimeField dateTimeField24 = gJChronology19.year();
        org.joda.time.DurationField durationField25 = gJChronology19.minutes();
        org.joda.time.DurationField durationField26 = gJChronology19.weekyears();
        int int27 = durationField7.compareTo(durationField26);
        java.util.TimeZone timeZone28 = null;
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forTimeZone(timeZone28);
        org.joda.time.chrono.GJChronology gJChronology30 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone29);
        org.joda.time.DurationField durationField31 = gJChronology30.halfdays();
        long long35 = gJChronology30.add((long) 'a', (-1L), (int) (short) 0);
        boolean boolean37 = gJChronology30.equals((java.lang.Object) 0);
        org.joda.time.DateTimeField dateTimeField38 = gJChronology30.dayOfMonth();
        org.joda.time.DurationField durationField39 = gJChronology30.days();
        org.joda.time.DateTimeField dateTimeField40 = gJChronology30.millisOfSecond();
        org.joda.time.DurationField durationField41 = gJChronology30.millis();
        org.joda.time.DateTimeField dateTimeField42 = gJChronology30.hourOfHalfday();
        org.joda.time.DurationField durationField43 = gJChronology30.years();
        org.joda.time.DurationField durationField44 = gJChronology30.millis();
        int int45 = durationField7.compareTo(durationField44);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on durationField26 and durationField43", (durationField26.compareTo(durationField43) == 0) == durationField26.equals(durationField43));
    }

    @Test
    public void test0451() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0451");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField3 = gJChronology2.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.minuteOfHour();
        org.joda.time.DurationField durationField6 = gJChronology2.halfdays();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology2.millisOfSecond();
        org.joda.time.DurationField durationField8 = gJChronology2.eras();
        org.joda.time.DateTimeZone dateTimeZone9 = gJChronology2.getZone();
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField6 and durationField8", Math.signum(durationField6.compareTo(durationField8)) == -Math.signum(durationField8.compareTo(durationField6)));
    }

    @Test
    public void test0452() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0452");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str3 = dateTimeZone1.getNameKey((long) 100);
        boolean boolean4 = dateTimeZone1.isFixed();
        java.lang.String str5 = dateTimeZone1.toString();
        boolean boolean7 = dateTimeZone1.isStandardOffset((long) (byte) 0);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        java.util.TimeZone timeZone9 = null;
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forTimeZone(timeZone9);
        org.joda.time.chrono.GJChronology gJChronology11 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone10);
        int int13 = dateTimeZone10.getOffsetFromLocal((long) (-1));
        int int15 = dateTimeZone10.getOffset((-61827926399999L));
        java.lang.String str16 = dateTimeZone10.toString();
        long long18 = dateTimeZone1.getMillisKeepLocal(dateTimeZone10, 100L);
        org.joda.time.Instant instant20 = new org.joda.time.Instant(4000L);
        java.util.TimeZone timeZone21 = null;
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forTimeZone(timeZone21);
        org.joda.time.chrono.GJChronology gJChronology23 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone22);
        org.joda.time.DateTimeField dateTimeField24 = gJChronology23.era();
        org.joda.time.DateTimeField dateTimeField25 = gJChronology23.year();
        org.joda.time.DateTime dateTime26 = instant20.toDateTime((org.joda.time.Chronology) gJChronology23);
        int int27 = dateTimeZone10.getOffset((org.joda.time.ReadableInstant) instant20);
        org.joda.time.Instant instant28 = instant20.toInstant();
        boolean boolean29 = instant28.isAfterNow();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant28 and dateTime26", (instant28.compareTo(dateTime26) == 0) == instant28.equals(dateTime26));
    }

    @Test
    public void test0453() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0453");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((-64983772799999L));
        org.joda.time.DateTime dateTime2 = instant1.toDateTime();
        org.joda.time.MutableDateTime mutableDateTime3 = instant1.toMutableDateTime();
        java.lang.String str4 = mutableDateTime3.toString();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and dateTime2", (instant1.compareTo(dateTime2) == 0) == instant1.equals(dateTime2));
    }

    @Test
    public void test0454() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0454");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = gJChronology2.years();
        java.util.TimeZone timeZone4 = null;
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forTimeZone(timeZone4);
        org.joda.time.chrono.GJChronology gJChronology6 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone5);
        org.joda.time.DurationField durationField7 = gJChronology6.halfdays();
        org.joda.time.DateTimeField dateTimeField8 = gJChronology6.millisOfDay();
        org.joda.time.DateTimeField dateTimeField9 = gJChronology6.minuteOfDay();
        org.joda.time.DurationField durationField10 = gJChronology6.centuries();
        java.util.TimeZone timeZone11 = null;
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forTimeZone(timeZone11);
        org.joda.time.chrono.GJChronology gJChronology13 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone12);
        org.joda.time.DurationField durationField14 = gJChronology13.halfdays();
        long long17 = durationField14.add((long) 100, 100L);
        boolean boolean18 = durationField14.isPrecise();
        int int19 = durationField10.compareTo(durationField14);
        boolean boolean20 = gJChronology2.equals((java.lang.Object) durationField10);
        org.joda.time.DateTimeField dateTimeField21 = gJChronology2.dayOfYear();
        org.joda.time.DateTimeField dateTimeField22 = gJChronology2.era();
        org.joda.time.DateTimeZone dateTimeZone23 = gJChronology2.getZone();
        java.lang.String str24 = dateTimeZone23.getID();
        org.joda.time.Instant instant26 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone27 = null;
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forTimeZone(timeZone27);
        org.joda.time.chrono.GJChronology gJChronology29 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone28);
        org.joda.time.DateTimeField dateTimeField30 = gJChronology29.millisOfSecond();
        int int31 = instant26.get(dateTimeField30);
        boolean boolean32 = instant26.isEqualNow();
        org.joda.time.Instant instant34 = new org.joda.time.Instant(52L);
        boolean boolean35 = instant34.isEqualNow();
        org.joda.time.ReadableDuration readableDuration36 = null;
        org.joda.time.Instant instant37 = instant34.plus(readableDuration36);
        long long38 = instant34.getMillis();
        java.lang.Object obj39 = null;
        boolean boolean40 = instant34.equals(obj39);
        org.joda.time.Instant instant42 = new org.joda.time.Instant(52L);
        boolean boolean43 = instant42.isEqualNow();
        org.joda.time.ReadableDuration readableDuration44 = null;
        org.joda.time.Instant instant45 = instant42.plus(readableDuration44);
        long long46 = instant42.getMillis();
        java.lang.String str47 = instant42.toString();
        org.joda.time.Instant instant48 = instant42.toInstant();
        org.joda.time.ReadableDuration readableDuration49 = null;
        org.joda.time.Instant instant51 = instant42.withDurationAdded(readableDuration49, (int) 'x');
        org.joda.time.Instant instant52 = instant42.toInstant();
        int int53 = instant34.compareTo((org.joda.time.ReadableInstant) instant42);
        boolean boolean54 = instant26.isBefore((org.joda.time.ReadableInstant) instant42);
        java.util.TimeZone timeZone55 = null;
        org.joda.time.DateTimeZone dateTimeZone56 = org.joda.time.DateTimeZone.forTimeZone(timeZone55);
        org.joda.time.chrono.GJChronology gJChronology57 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone56);
        org.joda.time.DurationField durationField58 = gJChronology57.halfdays();
        long long62 = gJChronology57.add((long) 'a', (-1L), (int) (short) 0);
        org.joda.time.DateTimeField dateTimeField63 = gJChronology57.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField64 = gJChronology57.secondOfMinute();
        org.joda.time.Instant instant66 = new org.joda.time.Instant(52L);
        boolean boolean67 = instant66.isEqualNow();
        org.joda.time.ReadableDuration readableDuration68 = null;
        org.joda.time.Instant instant69 = instant66.plus(readableDuration68);
        boolean boolean70 = gJChronology57.equals((java.lang.Object) instant66);
        org.joda.time.DateTimeFieldType dateTimeFieldType71 = null;
        boolean boolean72 = instant66.isSupported(dateTimeFieldType71);
        org.joda.time.DateTimeFieldType dateTimeFieldType73 = null;
        boolean boolean74 = instant66.isSupported(dateTimeFieldType73);
        java.lang.String str75 = instant66.toString();
        boolean boolean76 = instant26.isAfter((org.joda.time.ReadableInstant) instant66);
        org.joda.time.MutableDateTime mutableDateTime77 = instant66.toMutableDateTimeISO();
        org.joda.time.chrono.GJChronology gJChronology79 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone23, (org.joda.time.ReadableInstant) mutableDateTime77, (int) (byte) 1);
        org.joda.time.DateTimeField dateTimeField80 = gJChronology79.era();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant26 and mutableDateTime77", (instant26.compareTo(mutableDateTime77) == 0) == instant26.equals(mutableDateTime77));
    }

    @Test
    public void test0455() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0455");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        boolean boolean2 = instant1.isEqualNow();
        boolean boolean4 = instant1.isEqual(0L);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = null;
        boolean boolean6 = instant1.isSupported(dateTimeFieldType5);
        org.joda.time.Instant instant9 = instant1.withDurationAdded((-61827926399999L), (int) (short) -1);
        org.joda.time.MutableDateTime mutableDateTime10 = instant9.toMutableDateTime();
        java.util.TimeZone timeZone11 = null;
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forTimeZone(timeZone11);
        org.joda.time.chrono.GJChronology gJChronology13 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone12);
        org.joda.time.DurationField durationField14 = gJChronology13.halfdays();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology13.millisOfDay();
        org.joda.time.DateTimeField dateTimeField16 = gJChronology13.minuteOfDay();
        org.joda.time.DurationField durationField17 = gJChronology13.centuries();
        org.joda.time.DateTimeField dateTimeField18 = gJChronology13.dayOfYear();
        java.lang.String str19 = gJChronology13.toString();
        org.joda.time.DurationField durationField20 = gJChronology13.halfdays();
        org.joda.time.DateTimeField dateTimeField21 = gJChronology13.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField22 = gJChronology13.clockhourOfDay();
        org.joda.time.MutableDateTime mutableDateTime23 = instant9.toMutableDateTime((org.joda.time.Chronology) gJChronology13);
        org.joda.time.Instant instant25 = new org.joda.time.Instant(52L);
        org.joda.time.Instant instant27 = instant25.withMillis((long) 'u');
        java.util.TimeZone timeZone28 = null;
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forTimeZone(timeZone28);
        org.joda.time.chrono.GJChronology gJChronology30 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone29);
        org.joda.time.DurationField durationField31 = gJChronology30.halfdays();
        long long35 = gJChronology30.add((long) 'a', (-1L), (int) (short) 0);
        boolean boolean37 = gJChronology30.equals((java.lang.Object) 0);
        org.joda.time.DateTimeField dateTimeField38 = gJChronology30.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField39 = gJChronology30.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField40 = gJChronology30.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField41 = gJChronology30.clockhourOfHalfday();
        org.joda.time.DateTime dateTime42 = instant25.toDateTime((org.joda.time.Chronology) gJChronology30);
        java.util.TimeZone timeZone43 = null;
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.forTimeZone(timeZone43);
        org.joda.time.chrono.GJChronology gJChronology45 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone44);
        org.joda.time.DurationField durationField46 = gJChronology45.halfdays();
        long long50 = gJChronology45.add((long) 'a', (-1L), (int) (short) 0);
        long long54 = gJChronology45.add((long) (byte) 0, (long) '4', 100);
        org.joda.time.DateTimeField dateTimeField55 = gJChronology45.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField56 = gJChronology45.year();
        org.joda.time.DateTimeField dateTimeField57 = gJChronology45.monthOfYear();
        org.joda.time.MutableDateTime mutableDateTime58 = instant25.toMutableDateTime((org.joda.time.Chronology) gJChronology45);
        boolean boolean60 = instant25.isAfter(4324200000L);
        org.joda.time.Instant instant62 = instant25.minus(3692163384000L);
        boolean boolean63 = instant9.isAfter((org.joda.time.ReadableInstant) instant25);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and dateTime42", (instant1.compareTo(dateTime42) == 0) == instant1.equals(dateTime42));
    }

    @Test
    public void test0456() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0456");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField3 = gJChronology2.millisOfSecond();
        org.joda.time.DurationField durationField4 = gJChronology2.weeks();
        org.joda.time.DurationField durationField5 = gJChronology2.eras();
        org.joda.time.DurationField durationField6 = gJChronology2.minutes();
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField4 and durationField5", Math.signum(durationField4.compareTo(durationField5)) == -Math.signum(durationField5.compareTo(durationField4)));
    }

    @Test
    public void test0457() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0457");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        boolean boolean2 = instant1.isEqualNow();
        java.lang.String str3 = instant1.toString();
        java.util.TimeZone timeZone4 = null;
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forTimeZone(timeZone4);
        org.joda.time.chrono.GJChronology gJChronology6 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone5);
        java.util.Locale locale8 = new java.util.Locale("hi!");
        java.lang.String str9 = locale8.getCountry();
        java.util.Locale locale10 = java.util.Locale.getDefault();
        java.lang.String str11 = locale10.getDisplayName();
        java.lang.String str12 = locale8.getDisplayScript(locale10);
        boolean boolean13 = dateTimeZone5.equals((java.lang.Object) locale10);
        int int15 = dateTimeZone5.getOffsetFromLocal((long) (short) 10);
        java.util.TimeZone timeZone16 = null;
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forTimeZone(timeZone16);
        org.joda.time.chrono.GJChronology gJChronology18 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone17);
        org.joda.time.DateTimeField dateTimeField19 = gJChronology18.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField20 = gJChronology18.weekyearOfCentury();
        org.joda.time.Instant instant21 = gJChronology18.getGregorianCutover();
        org.joda.time.Instant instant23 = instant21.withMillis(0L);
        org.joda.time.Instant instant25 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone26 = null;
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forTimeZone(timeZone26);
        org.joda.time.chrono.GJChronology gJChronology28 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone27);
        org.joda.time.DateTimeField dateTimeField29 = gJChronology28.millisOfSecond();
        int int30 = instant25.get(dateTimeField29);
        org.joda.time.Instant instant32 = instant25.plus(0L);
        int int33 = instant23.compareTo((org.joda.time.ReadableInstant) instant32);
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = null;
        boolean boolean35 = instant32.isSupported(dateTimeFieldType34);
        int int36 = dateTimeZone5.getOffset((org.joda.time.ReadableInstant) instant32);
        boolean boolean37 = instant1.isAfter((org.joda.time.ReadableInstant) instant32);
        org.joda.time.Instant instant39 = instant32.withMillis((long) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType40 = null;
        boolean boolean41 = instant39.isSupported(dateTimeFieldType40);
        org.joda.time.ReadableDuration readableDuration42 = null;
        org.joda.time.Instant instant43 = instant39.plus(readableDuration42);
        org.joda.time.MutableDateTime mutableDateTime44 = instant43.toMutableDateTimeISO();
        java.lang.String str45 = instant43.toString();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant43 and mutableDateTime44", (instant43.compareTo(mutableDateTime44) == 0) == instant43.equals(mutableDateTime44));
    }

    @Test
    public void test0458() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0458");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(1, 10);
        java.util.TimeZone timeZone3 = null;
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forTimeZone(timeZone3);
        long long6 = dateTimeZone2.getMillisKeepLocal(dateTimeZone4, 4320000000L);
        org.joda.time.Instant instant8 = new org.joda.time.Instant(52L);
        boolean boolean9 = instant8.isEqualNow();
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.Instant instant11 = instant8.plus(readableDuration10);
        long long12 = instant8.getMillis();
        java.lang.String str13 = instant8.toString();
        org.joda.time.Instant instant14 = instant8.toInstant();
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.Instant instant17 = instant8.withDurationAdded(readableDuration15, (int) 'x');
        org.joda.time.Instant instant18 = instant8.toInstant();
        int int19 = dateTimeZone2.getOffset((org.joda.time.ReadableInstant) instant8);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = null;
        boolean boolean21 = instant8.isSupported(dateTimeFieldType20);
        org.joda.time.DateTime dateTime22 = instant8.toDateTimeISO();
        org.joda.time.Instant instant24 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone25 = null;
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forTimeZone(timeZone25);
        org.joda.time.chrono.GJChronology gJChronology27 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone26);
        org.joda.time.DateTimeField dateTimeField28 = gJChronology27.millisOfSecond();
        int int29 = instant24.get(dateTimeField28);
        org.joda.time.Instant instant31 = instant24.plus(0L);
        org.joda.time.Instant instant32 = instant31.toInstant();
        org.joda.time.Instant instant34 = new org.joda.time.Instant(52L);
        boolean boolean35 = instant34.isEqualNow();
        java.lang.String str36 = instant34.toString();
        java.lang.String str37 = instant34.toString();
        org.joda.time.Instant instant39 = new org.joda.time.Instant(52L);
        boolean boolean40 = instant39.isEqualNow();
        org.joda.time.ReadableDuration readableDuration41 = null;
        org.joda.time.Instant instant42 = instant39.plus(readableDuration41);
        boolean boolean43 = instant34.isBefore((org.joda.time.ReadableInstant) instant42);
        org.joda.time.Instant instant45 = instant34.minus((long) 0);
        int int46 = instant31.compareTo((org.joda.time.ReadableInstant) instant34);
        org.joda.time.Instant instant49 = instant31.withDurationAdded((long) 432086114, 97);
        org.joda.time.DateTimeZone dateTimeZone50 = instant31.getZone();
        org.joda.time.Instant instant51 = instant31.toInstant();
        boolean boolean52 = dateTime22.isAfter((org.joda.time.ReadableInstant) instant31);
        org.joda.time.MutableDateTime mutableDateTime53 = instant31.toMutableDateTime();
        org.joda.time.Instant instant55 = instant31.plus(863999948L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant8 and dateTime22", (instant8.compareTo(dateTime22) == 0) == instant8.equals(dateTime22));
    }

    @Test
    public void test0459() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0459");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        boolean boolean2 = instant1.isEqualNow();
        java.lang.String str3 = instant1.toString();
        java.util.TimeZone timeZone4 = null;
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forTimeZone(timeZone4);
        org.joda.time.chrono.GJChronology gJChronology6 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone5);
        java.util.Locale locale8 = new java.util.Locale("hi!");
        java.lang.String str9 = locale8.getCountry();
        java.util.Locale locale10 = java.util.Locale.getDefault();
        java.lang.String str11 = locale10.getDisplayName();
        java.lang.String str12 = locale8.getDisplayScript(locale10);
        boolean boolean13 = dateTimeZone5.equals((java.lang.Object) locale10);
        int int15 = dateTimeZone5.getOffsetFromLocal((long) (short) 10);
        java.util.TimeZone timeZone16 = null;
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forTimeZone(timeZone16);
        org.joda.time.chrono.GJChronology gJChronology18 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone17);
        org.joda.time.DateTimeField dateTimeField19 = gJChronology18.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField20 = gJChronology18.weekyearOfCentury();
        org.joda.time.Instant instant21 = gJChronology18.getGregorianCutover();
        org.joda.time.Instant instant23 = instant21.withMillis(0L);
        org.joda.time.Instant instant25 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone26 = null;
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forTimeZone(timeZone26);
        org.joda.time.chrono.GJChronology gJChronology28 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone27);
        org.joda.time.DateTimeField dateTimeField29 = gJChronology28.millisOfSecond();
        int int30 = instant25.get(dateTimeField29);
        org.joda.time.Instant instant32 = instant25.plus(0L);
        int int33 = instant23.compareTo((org.joda.time.ReadableInstant) instant32);
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = null;
        boolean boolean35 = instant32.isSupported(dateTimeFieldType34);
        int int36 = dateTimeZone5.getOffset((org.joda.time.ReadableInstant) instant32);
        boolean boolean37 = instant1.isAfter((org.joda.time.ReadableInstant) instant32);
        org.joda.time.Instant instant39 = instant32.withMillis((long) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType40 = null;
        boolean boolean41 = instant39.isSupported(dateTimeFieldType40);
        org.joda.time.ReadableDuration readableDuration42 = null;
        org.joda.time.Instant instant43 = instant39.plus(readableDuration42);
        org.joda.time.MutableDateTime mutableDateTime44 = instant43.toMutableDateTimeISO();
        java.util.TimeZone timeZone45 = null;
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.forTimeZone(timeZone45);
        org.joda.time.chrono.GJChronology gJChronology47 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone46);
        org.joda.time.DateTimeField dateTimeField48 = gJChronology47.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField49 = gJChronology47.weekyearOfCentury();
        org.joda.time.Instant instant50 = gJChronology47.getGregorianCutover();
        org.joda.time.Instant instant52 = new org.joda.time.Instant(52L);
        boolean boolean53 = instant52.isEqualNow();
        java.lang.String str54 = instant52.toString();
        java.lang.String str55 = instant52.toString();
        org.joda.time.Instant instant57 = new org.joda.time.Instant(52L);
        boolean boolean58 = instant57.isEqualNow();
        org.joda.time.ReadableDuration readableDuration59 = null;
        org.joda.time.Instant instant60 = instant57.plus(readableDuration59);
        boolean boolean61 = instant52.isBefore((org.joda.time.ReadableInstant) instant60);
        org.joda.time.Instant instant63 = instant60.plus((long) (short) 100);
        org.joda.time.Chronology chronology64 = null;
        org.joda.time.MutableDateTime mutableDateTime65 = instant60.toMutableDateTime(chronology64);
        boolean boolean66 = instant50.isEqual((org.joda.time.ReadableInstant) mutableDateTime65);
        java.util.TimeZone timeZone67 = null;
        org.joda.time.DateTimeZone dateTimeZone68 = org.joda.time.DateTimeZone.forTimeZone(timeZone67);
        org.joda.time.chrono.GJChronology gJChronology69 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone68);
        org.joda.time.DurationField durationField70 = gJChronology69.halfdays();
        long long74 = gJChronology69.add((long) 'a', (-1L), (int) (short) 0);
        boolean boolean76 = gJChronology69.equals((java.lang.Object) 0);
        org.joda.time.DateTimeField dateTimeField77 = gJChronology69.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField78 = gJChronology69.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField79 = gJChronology69.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField80 = gJChronology69.clockhourOfHalfday();
        org.joda.time.DurationField durationField81 = gJChronology69.halfdays();
        org.joda.time.DateTimeField dateTimeField82 = gJChronology69.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField83 = gJChronology69.centuryOfEra();
        boolean boolean84 = mutableDateTime65.equals((java.lang.Object) gJChronology69);
        int int85 = mutableDateTime44.compareTo((org.joda.time.ReadableInstant) mutableDateTime65);
        org.joda.time.DateTimeZone dateTimeZone86 = mutableDateTime44.getZone();
        java.lang.String str87 = dateTimeZone86.toString();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and mutableDateTime65", (instant1.compareTo(mutableDateTime65) == 0) == instant1.equals(mutableDateTime65));
    }

    @Test
    public void test0460() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0460");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str3 = dateTimeZone1.getNameKey((long) 100);
        boolean boolean4 = dateTimeZone1.isFixed();
        java.util.Locale locale8 = new java.util.Locale("DurationField[halfdays]", "\u82f1\u6587");
        java.lang.String str9 = dateTimeZone1.getName((long) (short) 10, locale8);
        org.joda.time.Instant instant11 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone12 = null;
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forTimeZone(timeZone12);
        org.joda.time.chrono.GJChronology gJChronology14 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone13);
        org.joda.time.DateTimeField dateTimeField15 = gJChronology14.millisOfSecond();
        int int16 = instant11.get(dateTimeField15);
        org.joda.time.Chronology chronology17 = instant11.getChronology();
        org.joda.time.chrono.GJChronology gJChronology18 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1, (org.joda.time.ReadableInstant) instant11);
        long long19 = instant11.getMillis();
        org.joda.time.ReadableDuration readableDuration20 = null;
        org.joda.time.Instant instant21 = instant11.minus(readableDuration20);
        java.util.Locale.Category category22 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale23 = java.util.Locale.getDefault();
        boolean boolean24 = locale23.hasExtensions();
        java.lang.String str25 = locale23.getISO3Language();
        java.util.Locale.setDefault(category22, locale23);
        java.util.Locale locale27 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale28 = java.util.Locale.ENGLISH;
        java.lang.String str29 = locale27.getDisplayLanguage(locale28);
        java.util.Locale locale30 = java.util.Locale.CANADA;
        java.lang.String str31 = locale30.getISO3Language();
        java.lang.String str32 = locale27.getDisplayVariant(locale30);
        java.lang.String str33 = locale27.getDisplayName();
        java.util.Locale.setDefault(category22, locale27);
        boolean boolean35 = instant11.equals((java.lang.Object) locale27);
        org.joda.time.Instant instant37 = new org.joda.time.Instant(52L);
        boolean boolean38 = instant37.isEqualNow();
        org.joda.time.ReadableDuration readableDuration39 = null;
        org.joda.time.Instant instant40 = instant37.plus(readableDuration39);
        org.joda.time.Instant instant42 = new org.joda.time.Instant(52L);
        org.joda.time.Instant instant44 = instant42.withMillis((long) 'u');
        boolean boolean45 = instant37.isBefore((org.joda.time.ReadableInstant) instant42);
        org.joda.time.Instant instant46 = instant42.toInstant();
        org.joda.time.MutableDateTime mutableDateTime47 = instant46.toMutableDateTime();
        org.joda.time.DateTimeZone dateTimeZone49 = org.joda.time.DateTimeZone.forID("+00:01");
        org.joda.time.Instant instant51 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone52 = null;
        org.joda.time.DateTimeZone dateTimeZone53 = org.joda.time.DateTimeZone.forTimeZone(timeZone52);
        org.joda.time.chrono.GJChronology gJChronology54 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone53);
        org.joda.time.DateTimeField dateTimeField55 = gJChronology54.millisOfSecond();
        int int56 = instant51.get(dateTimeField55);
        org.joda.time.Instant instant58 = instant51.plus(0L);
        java.util.TimeZone timeZone59 = null;
        org.joda.time.DateTimeZone dateTimeZone60 = org.joda.time.DateTimeZone.forTimeZone(timeZone59);
        org.joda.time.chrono.GJChronology gJChronology61 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone60);
        org.joda.time.DurationField durationField62 = gJChronology61.halfdays();
        org.joda.time.Chronology chronology63 = gJChronology61.withUTC();
        java.lang.String str64 = gJChronology61.toString();
        org.joda.time.DateTimeField dateTimeField65 = gJChronology61.hourOfHalfday();
        int int66 = instant51.get(dateTimeField65);
        org.joda.time.Instant instant68 = new org.joda.time.Instant(52L);
        boolean boolean69 = instant68.isEqualNow();
        java.lang.String str70 = instant68.toString();
        org.joda.time.Instant instant72 = new org.joda.time.Instant(52L);
        boolean boolean73 = instant72.isEqualNow();
        java.lang.String str74 = instant72.toString();
        java.lang.String str75 = instant72.toString();
        org.joda.time.Instant instant78 = instant72.withDurationAdded(115200000L, (int) (short) 1);
        int int79 = instant68.compareTo((org.joda.time.ReadableInstant) instant72);
        org.joda.time.Instant instant81 = new org.joda.time.Instant(52L);
        boolean boolean82 = instant81.isEqualNow();
        org.joda.time.ReadableDuration readableDuration83 = null;
        org.joda.time.Instant instant84 = instant81.plus(readableDuration83);
        boolean boolean86 = instant84.equals((java.lang.Object) ' ');
        boolean boolean87 = instant72.isAfter((org.joda.time.ReadableInstant) instant84);
        int int88 = instant51.compareTo((org.joda.time.ReadableInstant) instant72);
        org.joda.time.Instant instant90 = instant72.minus(10699L);
        org.joda.time.chrono.GJChronology gJChronology91 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone49, (org.joda.time.ReadableInstant) instant72);
        org.joda.time.DateTime dateTime92 = instant46.toDateTime(dateTimeZone49);
        boolean boolean93 = instant11.equals((java.lang.Object) instant46);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant11 and mutableDateTime47", (instant11.compareTo(mutableDateTime47) == 0) == instant11.equals(mutableDateTime47));
    }

    @Test
    public void test0461() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0461");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = gJChronology2.halfdays();
        long long7 = gJChronology2.add(0L, (long) (short) -1, (int) '4');
        java.util.TimeZone timeZone8 = null;
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forTimeZone(timeZone8);
        org.joda.time.chrono.GJChronology gJChronology10 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone9);
        org.joda.time.DurationField durationField11 = gJChronology10.halfdays();
        org.joda.time.DateTimeField dateTimeField12 = gJChronology10.millisOfDay();
        org.joda.time.DateTimeField dateTimeField13 = gJChronology10.minuteOfDay();
        org.joda.time.DurationField durationField14 = gJChronology10.centuries();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology10.dayOfYear();
        java.lang.String str16 = gJChronology10.toString();
        org.joda.time.DurationField durationField17 = gJChronology10.years();
        org.joda.time.DateTimeField dateTimeField18 = gJChronology10.yearOfEra();
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(0, (int) (short) 10);
        org.joda.time.Chronology chronology22 = gJChronology10.withZone(dateTimeZone21);
        org.joda.time.Chronology chronology23 = gJChronology2.withZone(dateTimeZone21);
        org.joda.time.DurationField durationField24 = gJChronology2.halfdays();
        org.joda.time.Instant instant25 = gJChronology2.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration26 = null;
        org.joda.time.Instant instant27 = instant25.plus(readableDuration26);
        org.joda.time.MutableDateTime mutableDateTime28 = instant27.toMutableDateTime();
        org.joda.time.Chronology chronology29 = instant27.getChronology();
        org.joda.time.DateTimeField dateTimeField30 = chronology29.minuteOfHour();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant25 and mutableDateTime28", (instant25.compareTo(mutableDateTime28) == 0) == instant25.equals(mutableDateTime28));
    }

    @Test
    public void test0462() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0462");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = gJChronology2.halfdays();
        org.joda.time.Chronology chronology4 = gJChronology2.withUTC();
        java.lang.String str5 = gJChronology2.toString();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology2.hourOfHalfday();
        org.joda.time.DurationField durationField7 = gJChronology2.millis();
        org.joda.time.DateTimeField dateTimeField8 = gJChronology2.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField9 = gJChronology2.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField10 = gJChronology2.weekyear();
        org.joda.time.DurationField durationField11 = gJChronology2.eras();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField11, durationField3, and durationField7", !(durationField11.compareTo(durationField3) == 0) || (Math.signum(durationField11.compareTo(durationField7)) == Math.signum(durationField3.compareTo(durationField7))));
    }

    @Test
    public void test0463() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0463");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField3 = gJChronology2.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.weekyearOfCentury();
        org.joda.time.Instant instant5 = gJChronology2.getGregorianCutover();
        org.joda.time.Instant instant7 = new org.joda.time.Instant(52L);
        boolean boolean8 = instant7.isEqualNow();
        java.lang.String str9 = instant7.toString();
        java.lang.String str10 = instant7.toString();
        org.joda.time.Instant instant12 = new org.joda.time.Instant(52L);
        boolean boolean13 = instant12.isEqualNow();
        org.joda.time.ReadableDuration readableDuration14 = null;
        org.joda.time.Instant instant15 = instant12.plus(readableDuration14);
        boolean boolean16 = instant7.isBefore((org.joda.time.ReadableInstant) instant15);
        org.joda.time.Instant instant18 = instant15.plus((long) (short) 100);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MutableDateTime mutableDateTime20 = instant15.toMutableDateTime(chronology19);
        boolean boolean21 = instant5.isEqual((org.joda.time.ReadableInstant) mutableDateTime20);
        java.util.TimeZone timeZone22 = null;
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        org.joda.time.chrono.GJChronology gJChronology24 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone23);
        org.joda.time.DurationField durationField25 = gJChronology24.halfdays();
        long long29 = gJChronology24.add((long) 'a', (-1L), (int) (short) 0);
        boolean boolean31 = gJChronology24.equals((java.lang.Object) 0);
        org.joda.time.DateTimeField dateTimeField32 = gJChronology24.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField33 = gJChronology24.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField34 = gJChronology24.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField35 = gJChronology24.clockhourOfHalfday();
        org.joda.time.DurationField durationField36 = gJChronology24.halfdays();
        org.joda.time.DateTimeField dateTimeField37 = gJChronology24.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField38 = gJChronology24.centuryOfEra();
        boolean boolean39 = mutableDateTime20.equals((java.lang.Object) gJChronology24);
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.DateTime dateTime41 = mutableDateTime20.toDateTime(chronology40);
        java.util.TimeZone timeZone42 = null;
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.forTimeZone(timeZone42);
        org.joda.time.chrono.GJChronology gJChronology44 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone43);
        org.joda.time.DurationField durationField45 = gJChronology44.halfdays();
        long long49 = gJChronology44.add((long) 'a', (-1L), (int) (short) 0);
        long long53 = gJChronology44.add((long) (byte) 0, (long) '4', 100);
        org.joda.time.DateTimeField dateTimeField54 = gJChronology44.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField55 = gJChronology44.year();
        org.joda.time.DateTimeField dateTimeField56 = gJChronology44.era();
        org.joda.time.DateTimeField dateTimeField57 = gJChronology44.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField58 = gJChronology44.dayOfWeek();
        int int59 = dateTime41.get(dateTimeField58);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant7 and mutableDateTime20", (instant7.compareTo(mutableDateTime20) == 0) == instant7.equals(mutableDateTime20));
    }

    @Test
    public void test0464() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0464");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        boolean boolean2 = instant1.isEqualNow();
        java.lang.String str3 = instant1.toString();
        java.lang.String str4 = instant1.toString();
        org.joda.time.Instant instant7 = instant1.withDurationAdded(115200000L, (int) (short) 1);
        org.joda.time.Instant instant8 = instant1.toInstant();
        org.joda.time.Instant instant11 = instant1.withDurationAdded(4156171L, (-19));
        java.util.TimeZone timeZone12 = null;
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forTimeZone(timeZone12);
        java.lang.String str15 = dateTimeZone13.getNameKey((long) 100);
        boolean boolean16 = dateTimeZone13.isFixed();
        org.joda.time.chrono.GJChronology gJChronology17 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone13);
        int int18 = gJChronology17.getMinimumDaysInFirstWeek();
        java.lang.String str19 = gJChronology17.toString();
        org.joda.time.DateTimeField dateTimeField20 = gJChronology17.yearOfEra();
        org.joda.time.DateTimeField dateTimeField21 = gJChronology17.yearOfCentury();
        org.joda.time.DurationField durationField22 = gJChronology17.eras();
        org.joda.time.DateTimeField dateTimeField23 = gJChronology17.yearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime24 = instant11.toMutableDateTime((org.joda.time.Chronology) gJChronology17);
        org.joda.time.ReadableDuration readableDuration25 = null;
        org.joda.time.Instant instant26 = instant11.minus(readableDuration25);
        long long27 = instant11.getMillis();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime24 and instant11", (mutableDateTime24.compareTo(instant11) == 0) == mutableDateTime24.equals(instant11));
    }

    @Test
    public void test0465() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0465");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        boolean boolean2 = instant1.isEqualNow();
        org.joda.time.ReadableDuration readableDuration3 = null;
        org.joda.time.Instant instant4 = instant1.plus(readableDuration3);
        long long5 = instant1.getMillis();
        java.lang.String str6 = instant1.toString();
        org.joda.time.Instant instant7 = instant1.toInstant();
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.Instant instant10 = instant1.withDurationAdded(readableDuration8, (int) 'x');
        long long11 = instant1.getMillis();
        boolean boolean12 = instant1.isAfterNow();
        org.joda.time.Instant instant14 = instant1.minus(4324199948L);
        java.util.TimeZone timeZone15 = null;
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forTimeZone(timeZone15);
        org.joda.time.chrono.GJChronology gJChronology17 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone16);
        org.joda.time.DurationField durationField18 = gJChronology17.halfdays();
        java.util.TimeZone timeZone19 = null;
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forTimeZone(timeZone19);
        org.joda.time.chrono.GJChronology gJChronology21 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone20);
        long long25 = dateTimeZone20.convertLocalToUTC((long) (byte) -1, true, 0L);
        boolean boolean27 = dateTimeZone20.equals((java.lang.Object) true);
        org.joda.time.Chronology chronology28 = gJChronology17.withZone(dateTimeZone20);
        org.joda.time.DateTime dateTime29 = instant14.toDateTime(dateTimeZone20);
        int int31 = dateTimeZone20.getStandardOffset((-12551787095424L));
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant14 and dateTime29", (instant14.compareTo(dateTime29) == 0) == instant14.equals(dateTime29));
    }

    @Test
    public void test0466() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0466");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forTimeZone(timeZone2);
        org.joda.time.chrono.GJChronology gJChronology4 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone3);
        org.joda.time.DateTimeField dateTimeField5 = gJChronology4.millisOfSecond();
        int int6 = instant1.get(dateTimeField5);
        boolean boolean7 = instant1.isEqualNow();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = null;
        java.lang.String str9 = instant1.toString(dateTimeFormatter8);
        boolean boolean10 = instant1.isAfterNow();
        org.joda.time.Instant instant11 = instant1.toInstant();
        org.joda.time.DateTime dateTime12 = instant11.toDateTime();
        java.util.TimeZone timeZone13 = null;
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forTimeZone(timeZone13);
        org.joda.time.chrono.GJChronology gJChronology15 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone14);
        org.joda.time.DurationField durationField16 = gJChronology15.halfdays();
        long long20 = gJChronology15.add((long) 'a', (-1L), (int) (short) 0);
        org.joda.time.DateTimeField dateTimeField21 = gJChronology15.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField22 = gJChronology15.secondOfMinute();
        org.joda.time.Instant instant24 = new org.joda.time.Instant(52L);
        boolean boolean25 = instant24.isEqualNow();
        org.joda.time.ReadableDuration readableDuration26 = null;
        org.joda.time.Instant instant27 = instant24.plus(readableDuration26);
        boolean boolean28 = gJChronology15.equals((java.lang.Object) instant24);
        java.util.TimeZone timeZone29 = null;
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forTimeZone(timeZone29);
        org.joda.time.chrono.GJChronology gJChronology31 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone30);
        org.joda.time.DurationField durationField32 = gJChronology31.halfdays();
        org.joda.time.DateTimeField dateTimeField33 = gJChronology31.millisOfDay();
        org.joda.time.DateTimeField dateTimeField34 = gJChronology31.minuteOfDay();
        org.joda.time.DurationField durationField35 = gJChronology31.centuries();
        org.joda.time.DateTimeField dateTimeField36 = gJChronology31.dayOfYear();
        java.lang.String str37 = gJChronology31.toString();
        org.joda.time.DateTimeField dateTimeField38 = gJChronology31.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone39 = gJChronology31.getZone();
        org.joda.time.DateTime dateTime40 = instant24.toDateTime((org.joda.time.Chronology) gJChronology31);
        boolean boolean42 = dateTime40.isBefore(262974605200L);
        long long43 = dateTime40.getMillis();
        int int44 = instant11.compareTo((org.joda.time.ReadableInstant) dateTime40);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant11 and dateTime12", (instant11.compareTo(dateTime12) == 0) == instant11.equals(dateTime12));
    }

    @Test
    public void test0467() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0467");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forTimeZone(timeZone2);
        org.joda.time.chrono.GJChronology gJChronology4 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone3);
        org.joda.time.DateTimeField dateTimeField5 = gJChronology4.millisOfSecond();
        int int6 = instant1.get(dateTimeField5);
        org.joda.time.Instant instant8 = instant1.plus(0L);
        org.joda.time.Instant instant9 = instant8.toInstant();
        org.joda.time.Instant instant11 = new org.joda.time.Instant(52L);
        boolean boolean12 = instant11.isEqualNow();
        java.lang.String str13 = instant11.toString();
        java.lang.String str14 = instant11.toString();
        org.joda.time.Instant instant16 = new org.joda.time.Instant(52L);
        boolean boolean17 = instant16.isEqualNow();
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.Instant instant19 = instant16.plus(readableDuration18);
        boolean boolean20 = instant11.isBefore((org.joda.time.ReadableInstant) instant19);
        org.joda.time.Instant instant22 = instant11.minus((long) 0);
        int int23 = instant8.compareTo((org.joda.time.ReadableInstant) instant11);
        org.joda.time.Instant instant26 = instant11.withDurationAdded((long) (short) 100, 70);
        org.joda.time.ReadableInstant readableInstant27 = null;
        boolean boolean28 = instant11.isBefore(readableInstant27);
        org.joda.time.ReadableDuration readableDuration29 = null;
        org.joda.time.Instant instant31 = instant11.withDurationAdded(readableDuration29, 10);
        org.joda.time.Instant instant32 = instant11.toInstant();
        org.joda.time.Instant instant34 = instant11.withMillis((long) 7816188);
        java.util.TimeZone timeZone35 = null;
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.forTimeZone(timeZone35);
        org.joda.time.chrono.GJChronology gJChronology37 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone36);
        org.joda.time.DurationField durationField38 = gJChronology37.halfdays();
        org.joda.time.Chronology chronology39 = gJChronology37.withUTC();
        java.lang.String str40 = gJChronology37.toString();
        org.joda.time.DateTimeField dateTimeField41 = gJChronology37.hourOfHalfday();
        long long45 = gJChronology37.add(97L, (long) (byte) 100, 0);
        org.joda.time.DateTimeField dateTimeField46 = gJChronology37.clockhourOfHalfday();
        org.joda.time.DurationField durationField47 = gJChronology37.weeks();
        org.joda.time.Chronology chronology48 = gJChronology37.withUTC();
        org.joda.time.DateTimeField dateTimeField49 = chronology48.yearOfCentury();
        org.joda.time.DateTime dateTime50 = instant11.toDateTime(chronology48);
        org.joda.time.Instant instant51 = instant11.toInstant();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and dateTime50", (instant1.compareTo(dateTime50) == 0) == instant1.equals(dateTime50));
    }

    @Test
    public void test0468() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0468");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((-64983772799999L));
        org.joda.time.DateTime dateTime2 = instant1.toDateTime();
        org.joda.time.Chronology chronology3 = dateTime2.getChronology();
        java.util.TimeZone timeZone4 = null;
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forTimeZone(timeZone4);
        org.joda.time.chrono.GJChronology gJChronology6 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone5);
        java.util.Locale locale8 = new java.util.Locale("hi!");
        java.lang.String str9 = locale8.getCountry();
        java.util.Locale locale10 = java.util.Locale.getDefault();
        java.lang.String str11 = locale10.getDisplayName();
        java.lang.String str12 = locale8.getDisplayScript(locale10);
        boolean boolean13 = dateTimeZone5.equals((java.lang.Object) locale10);
        int int15 = dateTimeZone5.getOffsetFromLocal((long) (short) 10);
        java.util.TimeZone timeZone16 = null;
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forTimeZone(timeZone16);
        org.joda.time.chrono.GJChronology gJChronology18 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone17);
        org.joda.time.DateTimeField dateTimeField19 = gJChronology18.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField20 = gJChronology18.weekyearOfCentury();
        org.joda.time.Instant instant21 = gJChronology18.getGregorianCutover();
        org.joda.time.Instant instant23 = instant21.withMillis(0L);
        org.joda.time.Instant instant25 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone26 = null;
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forTimeZone(timeZone26);
        org.joda.time.chrono.GJChronology gJChronology28 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone27);
        org.joda.time.DateTimeField dateTimeField29 = gJChronology28.millisOfSecond();
        int int30 = instant25.get(dateTimeField29);
        org.joda.time.Instant instant32 = instant25.plus(0L);
        int int33 = instant23.compareTo((org.joda.time.ReadableInstant) instant32);
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = null;
        boolean boolean35 = instant32.isSupported(dateTimeFieldType34);
        int int36 = dateTimeZone5.getOffset((org.joda.time.ReadableInstant) instant32);
        org.joda.time.DateTime dateTime37 = instant32.toDateTimeISO();
        org.joda.time.Instant instant39 = new org.joda.time.Instant(3155760000000L);
        org.joda.time.Instant instant40 = instant39.toInstant();
        int int41 = dateTime37.compareTo((org.joda.time.ReadableInstant) instant39);
        org.joda.time.Instant instant43 = new org.joda.time.Instant(52L);
        boolean boolean44 = instant43.isEqualNow();
        java.lang.String str45 = instant43.toString();
        org.joda.time.Instant instant47 = new org.joda.time.Instant(52L);
        boolean boolean48 = instant47.isEqualNow();
        java.lang.String str49 = instant47.toString();
        java.lang.String str50 = instant47.toString();
        org.joda.time.Instant instant53 = instant47.withDurationAdded(115200000L, (int) (short) 1);
        int int54 = instant43.compareTo((org.joda.time.ReadableInstant) instant47);
        org.joda.time.Instant instant56 = new org.joda.time.Instant(52L);
        boolean boolean57 = instant56.isEqualNow();
        org.joda.time.ReadableDuration readableDuration58 = null;
        org.joda.time.Instant instant59 = instant56.plus(readableDuration58);
        boolean boolean61 = instant59.equals((java.lang.Object) ' ');
        boolean boolean62 = instant47.isAfter((org.joda.time.ReadableInstant) instant59);
        java.lang.String str63 = instant59.toString();
        java.lang.String str64 = instant59.toString();
        boolean boolean65 = dateTime37.isEqual((org.joda.time.ReadableInstant) instant59);
        org.joda.time.DateTimeZone dateTimeZone66 = dateTime37.getZone();
        org.joda.time.DateTime dateTime67 = dateTime2.toDateTime(dateTimeZone66);
        org.joda.time.Instant instant69 = new org.joda.time.Instant(52L);
        boolean boolean70 = instant69.isEqualNow();
        boolean boolean72 = instant69.isEqual(0L);
        org.joda.time.DateTimeFieldType dateTimeFieldType73 = null;
        boolean boolean74 = instant69.isSupported(dateTimeFieldType73);
        org.joda.time.DateTimeFieldType dateTimeFieldType75 = null;
        boolean boolean76 = instant69.isSupported(dateTimeFieldType75);
        org.joda.time.Instant instant78 = instant69.withMillis(0L);
        java.util.TimeZone timeZone79 = null;
        org.joda.time.DateTimeZone dateTimeZone80 = org.joda.time.DateTimeZone.forTimeZone(timeZone79);
        org.joda.time.chrono.GJChronology gJChronology81 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone80);
        org.joda.time.DateTimeField dateTimeField82 = gJChronology81.yearOfCentury();
        int int83 = instant78.get(dateTimeField82);
        boolean boolean85 = instant78.isAfter((long) (-1));
        org.joda.time.DateTimeZone dateTimeZone86 = instant78.getZone();
        boolean boolean87 = dateTime2.isAfter((org.joda.time.ReadableInstant) instant78);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and dateTime2", (instant1.compareTo(dateTime2) == 0) == instant1.equals(dateTime2));
    }

    @Test
    public void test0469() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0469");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = gJChronology2.halfdays();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.millisOfDay();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.minuteOfDay();
        org.joda.time.DurationField durationField6 = gJChronology2.centuries();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology2.halfdayOfDay();
        java.util.Locale locale8 = java.util.Locale.ITALIAN;
        java.util.Locale locale9 = locale8.stripExtensions();
        java.util.Locale locale10 = java.util.Locale.CANADA;
        java.lang.String str11 = locale8.getDisplayVariant(locale10);
        boolean boolean12 = gJChronology2.equals((java.lang.Object) locale10);
        org.joda.time.DurationField durationField13 = gJChronology2.months();
        org.joda.time.Chronology chronology14 = gJChronology2.withUTC();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology2.yearOfCentury();
        org.joda.time.Chronology chronology16 = gJChronology2.withUTC();
        org.joda.time.DurationField durationField17 = gJChronology2.eras();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField17, durationField3, and durationField6", !(durationField17.compareTo(durationField3) == 0) || (Math.signum(durationField17.compareTo(durationField6)) == Math.signum(durationField3.compareTo(durationField6))));
    }

    @Test
    public void test0470() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0470");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        org.joda.time.Instant instant3 = instant1.withMillis((long) 'u');
        java.util.TimeZone timeZone4 = null;
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forTimeZone(timeZone4);
        org.joda.time.chrono.GJChronology gJChronology6 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone5);
        org.joda.time.DurationField durationField7 = gJChronology6.halfdays();
        long long11 = gJChronology6.add((long) 'a', (-1L), (int) (short) 0);
        boolean boolean13 = gJChronology6.equals((java.lang.Object) 0);
        org.joda.time.DateTimeField dateTimeField14 = gJChronology6.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology6.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField16 = gJChronology6.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField17 = gJChronology6.clockhourOfHalfday();
        org.joda.time.DateTime dateTime18 = instant1.toDateTime((org.joda.time.Chronology) gJChronology6);
        java.util.TimeZone timeZone19 = null;
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forTimeZone(timeZone19);
        org.joda.time.chrono.GJChronology gJChronology21 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone20);
        org.joda.time.DurationField durationField22 = gJChronology21.halfdays();
        long long26 = gJChronology21.add((long) 'a', (-1L), (int) (short) 0);
        long long30 = gJChronology21.add((long) (byte) 0, (long) '4', 100);
        org.joda.time.DateTimeField dateTimeField31 = gJChronology21.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField32 = gJChronology21.year();
        org.joda.time.DateTimeField dateTimeField33 = gJChronology21.monthOfYear();
        org.joda.time.MutableDateTime mutableDateTime34 = instant1.toMutableDateTime((org.joda.time.Chronology) gJChronology21);
        org.joda.time.DurationField durationField35 = gJChronology21.eras();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and dateTime18", (instant1.compareTo(dateTime18) == 0) == instant1.equals(dateTime18));
    }

    @Test
    public void test0471() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0471");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        int int2 = dateTimeZone0.getOffset((long) (byte) 1);
        long long5 = dateTimeZone0.adjustOffset((-1L), false);
        org.joda.time.Instant instant7 = new org.joda.time.Instant(52L);
        boolean boolean8 = instant7.isEqualNow();
        java.lang.String str9 = instant7.toString();
        java.lang.String str10 = instant7.toString();
        org.joda.time.Instant instant13 = instant7.withDurationAdded(115200000L, (int) (short) 1);
        boolean boolean14 = instant13.isBeforeNow();
        org.joda.time.Instant instant16 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone17 = null;
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forTimeZone(timeZone17);
        org.joda.time.chrono.GJChronology gJChronology19 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone18);
        org.joda.time.DateTimeField dateTimeField20 = gJChronology19.millisOfSecond();
        int int21 = instant16.get(dateTimeField20);
        boolean boolean22 = instant16.isEqualNow();
        org.joda.time.Instant instant24 = new org.joda.time.Instant(52L);
        boolean boolean25 = instant24.isEqualNow();
        org.joda.time.ReadableDuration readableDuration26 = null;
        org.joda.time.Instant instant27 = instant24.plus(readableDuration26);
        long long28 = instant24.getMillis();
        java.lang.Object obj29 = null;
        boolean boolean30 = instant24.equals(obj29);
        org.joda.time.Instant instant32 = new org.joda.time.Instant(52L);
        boolean boolean33 = instant32.isEqualNow();
        org.joda.time.ReadableDuration readableDuration34 = null;
        org.joda.time.Instant instant35 = instant32.plus(readableDuration34);
        long long36 = instant32.getMillis();
        java.lang.String str37 = instant32.toString();
        org.joda.time.Instant instant38 = instant32.toInstant();
        org.joda.time.ReadableDuration readableDuration39 = null;
        org.joda.time.Instant instant41 = instant32.withDurationAdded(readableDuration39, (int) 'x');
        org.joda.time.Instant instant42 = instant32.toInstant();
        int int43 = instant24.compareTo((org.joda.time.ReadableInstant) instant32);
        boolean boolean44 = instant16.isBefore((org.joda.time.ReadableInstant) instant32);
        java.util.TimeZone timeZone45 = null;
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.forTimeZone(timeZone45);
        org.joda.time.chrono.GJChronology gJChronology47 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone46);
        org.joda.time.DurationField durationField48 = gJChronology47.halfdays();
        long long52 = gJChronology47.add((long) 'a', (-1L), (int) (short) 0);
        org.joda.time.DateTimeField dateTimeField53 = gJChronology47.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField54 = gJChronology47.secondOfMinute();
        org.joda.time.Instant instant56 = new org.joda.time.Instant(52L);
        boolean boolean57 = instant56.isEqualNow();
        org.joda.time.ReadableDuration readableDuration58 = null;
        org.joda.time.Instant instant59 = instant56.plus(readableDuration58);
        boolean boolean60 = gJChronology47.equals((java.lang.Object) instant56);
        org.joda.time.DateTimeFieldType dateTimeFieldType61 = null;
        boolean boolean62 = instant56.isSupported(dateTimeFieldType61);
        org.joda.time.DateTimeFieldType dateTimeFieldType63 = null;
        boolean boolean64 = instant56.isSupported(dateTimeFieldType63);
        java.lang.String str65 = instant56.toString();
        boolean boolean66 = instant16.isAfter((org.joda.time.ReadableInstant) instant56);
        org.joda.time.MutableDateTime mutableDateTime67 = instant56.toMutableDateTimeISO();
        int int68 = instant13.compareTo((org.joda.time.ReadableInstant) mutableDateTime67);
        org.joda.time.chrono.GJChronology gJChronology69 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, (org.joda.time.ReadableInstant) mutableDateTime67);
        org.joda.time.DateTimeZone dateTimeZone71 = org.joda.time.DateTimeZone.forOffsetMillis((int) '4');
        java.util.TimeZone timeZone72 = dateTimeZone71.toTimeZone();
        java.lang.String str73 = dateTimeZone71.toString();
        boolean boolean75 = dateTimeZone71.isStandardOffset((long) 'u');
        org.joda.time.DateTime dateTime76 = mutableDateTime67.toDateTime(dateTimeZone71);
        boolean boolean77 = mutableDateTime67.isBeforeNow();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant7 and dateTime76", (instant7.compareTo(dateTime76) == 0) == instant7.equals(dateTime76));
    }

    @Test
    public void test0472() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0472");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        boolean boolean2 = instant1.isEqualNow();
        java.lang.String str3 = instant1.toString();
        java.lang.String str4 = instant1.toString();
        org.joda.time.Instant instant7 = instant1.withDurationAdded(115200000L, (int) (short) 1);
        org.joda.time.Instant instant8 = instant1.toInstant();
        org.joda.time.Instant instant10 = instant8.minus(4492800100L);
        java.util.TimeZone timeZone11 = null;
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forTimeZone(timeZone11);
        org.joda.time.chrono.GJChronology gJChronology13 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone12);
        org.joda.time.DurationField durationField14 = gJChronology13.halfdays();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology13.millisOfDay();
        org.joda.time.DateTimeField dateTimeField16 = gJChronology13.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField17 = gJChronology13.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone18 = gJChronology13.getZone();
        java.util.TimeZone timeZone19 = null;
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forTimeZone(timeZone19);
        org.joda.time.chrono.GJChronology gJChronology21 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone20);
        org.joda.time.DurationField durationField22 = gJChronology21.halfdays();
        java.util.TimeZone timeZone23 = null;
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forTimeZone(timeZone23);
        org.joda.time.chrono.GJChronology gJChronology25 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone24);
        long long29 = dateTimeZone24.convertLocalToUTC((long) (byte) -1, true, 0L);
        boolean boolean31 = dateTimeZone24.equals((java.lang.Object) true);
        org.joda.time.Chronology chronology32 = gJChronology21.withZone(dateTimeZone24);
        org.joda.time.LocalDateTime localDateTime33 = null;
        boolean boolean34 = dateTimeZone24.isLocalDateTimeGap(localDateTime33);
        boolean boolean35 = dateTimeZone24.isFixed();
        org.joda.time.LocalDateTime localDateTime36 = null;
        boolean boolean37 = dateTimeZone24.isLocalDateTimeGap(localDateTime36);
        long long39 = dateTimeZone18.getMillisKeepLocal(dateTimeZone24, (long) 1431201);
        org.joda.time.DateTime dateTime40 = instant8.toDateTime(dateTimeZone24);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter41 = null;
        java.lang.String str42 = instant8.toString(dateTimeFormatter41);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant8 and dateTime40", (instant8.compareTo(dateTime40) == 0) == instant8.equals(dateTime40));
    }

    @Test
    public void test0473() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0473");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = gJChronology2.years();
        java.util.TimeZone timeZone4 = null;
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forTimeZone(timeZone4);
        org.joda.time.chrono.GJChronology gJChronology6 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone5);
        org.joda.time.DurationField durationField7 = gJChronology6.halfdays();
        org.joda.time.DateTimeField dateTimeField8 = gJChronology6.millisOfDay();
        org.joda.time.DateTimeField dateTimeField9 = gJChronology6.minuteOfDay();
        org.joda.time.DurationField durationField10 = gJChronology6.centuries();
        java.util.TimeZone timeZone11 = null;
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forTimeZone(timeZone11);
        org.joda.time.chrono.GJChronology gJChronology13 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone12);
        org.joda.time.DurationField durationField14 = gJChronology13.halfdays();
        long long17 = durationField14.add((long) 100, 100L);
        boolean boolean18 = durationField14.isPrecise();
        int int19 = durationField10.compareTo(durationField14);
        boolean boolean20 = gJChronology2.equals((java.lang.Object) durationField10);
        org.joda.time.DurationField durationField21 = gJChronology2.weekyears();
        org.joda.time.DurationField durationField22 = gJChronology2.weekyears();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on durationField3 and durationField22", (durationField3.compareTo(durationField22) == 0) == durationField3.equals(durationField22));
    }

    @Test
    public void test0474() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0474");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = gJChronology2.halfdays();
        long long7 = gJChronology2.add((long) 'a', (-1L), (int) (short) 0);
        org.joda.time.DateTimeField dateTimeField8 = gJChronology2.halfdayOfDay();
        org.joda.time.Chronology chronology9 = gJChronology2.withUTC();
        java.lang.String str10 = gJChronology2.toString();
        int int11 = gJChronology2.getMinimumDaysInFirstWeek();
        org.joda.time.Chronology chronology12 = gJChronology2.withUTC();
        org.joda.time.DurationField durationField13 = gJChronology2.minutes();
        org.joda.time.DateTimeField dateTimeField14 = gJChronology2.yearOfCentury();
        org.joda.time.DurationField durationField15 = gJChronology2.eras();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField15, durationField3, and durationField13", !(durationField15.compareTo(durationField3) == 0) || (Math.signum(durationField15.compareTo(durationField13)) == Math.signum(durationField3.compareTo(durationField13))));
    }

    @Test
    public void test0475() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0475");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField3 = gJChronology2.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.millisOfSecond();
        org.joda.time.DurationField durationField6 = gJChronology2.days();
        java.util.TimeZone timeZone7 = null;
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forTimeZone(timeZone7);
        java.lang.String str10 = dateTimeZone8.getNameKey((long) 100);
        boolean boolean11 = dateTimeZone8.isFixed();
        java.util.Locale locale15 = new java.util.Locale("DurationField[halfdays]", "\u82f1\u6587");
        java.lang.String str16 = dateTimeZone8.getName((long) (short) 10, locale15);
        java.lang.String str18 = dateTimeZone8.getNameKey(17296800000L);
        org.joda.time.Chronology chronology19 = gJChronology2.withZone(dateTimeZone8);
        java.lang.String str20 = gJChronology2.toString();
        org.joda.time.DurationField durationField21 = gJChronology2.hours();
        org.joda.time.DateTimeZone dateTimeZone22 = gJChronology2.getZone();
        org.joda.time.DurationField durationField23 = gJChronology2.eras();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField23, durationField6, and durationField21", !(durationField23.compareTo(durationField6) == 0) || (Math.signum(durationField23.compareTo(durationField21)) == Math.signum(durationField6.compareTo(durationField21))));
    }

    @Test
    public void test0476() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0476");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = gJChronology2.halfdays();
        long long6 = durationField3.add((long) 100, 100L);
        java.util.TimeZone timeZone7 = null;
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forTimeZone(timeZone7);
        org.joda.time.chrono.GJChronology gJChronology9 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone8);
        org.joda.time.DurationField durationField10 = gJChronology9.halfdays();
        long long14 = gJChronology9.add((long) 'a', (-1L), (int) (short) 0);
        boolean boolean16 = gJChronology9.equals((java.lang.Object) 0);
        org.joda.time.DateTimeField dateTimeField17 = gJChronology9.dayOfMonth();
        org.joda.time.DurationField durationField18 = gJChronology9.millis();
        int int19 = durationField3.compareTo(durationField18);
        java.util.TimeZone timeZone20 = null;
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forTimeZone(timeZone20);
        org.joda.time.chrono.GJChronology gJChronology22 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone21);
        org.joda.time.DurationField durationField23 = gJChronology22.years();
        java.util.TimeZone timeZone24 = null;
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forTimeZone(timeZone24);
        org.joda.time.chrono.GJChronology gJChronology26 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone25);
        org.joda.time.DurationField durationField27 = gJChronology26.halfdays();
        org.joda.time.DateTimeField dateTimeField28 = gJChronology26.millisOfDay();
        org.joda.time.DateTimeField dateTimeField29 = gJChronology26.minuteOfDay();
        org.joda.time.DurationField durationField30 = gJChronology26.centuries();
        java.util.TimeZone timeZone31 = null;
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.forTimeZone(timeZone31);
        org.joda.time.chrono.GJChronology gJChronology33 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone32);
        org.joda.time.DurationField durationField34 = gJChronology33.halfdays();
        long long37 = durationField34.add((long) 100, 100L);
        boolean boolean38 = durationField34.isPrecise();
        int int39 = durationField30.compareTo(durationField34);
        boolean boolean40 = gJChronology22.equals((java.lang.Object) durationField30);
        org.joda.time.DateTimeField dateTimeField41 = gJChronology22.dayOfYear();
        org.joda.time.DateTimeField dateTimeField42 = gJChronology22.era();
        org.joda.time.DateTimeZone dateTimeZone43 = gJChronology22.getZone();
        org.joda.time.Instant instant44 = gJChronology22.getGregorianCutover();
        org.joda.time.DurationField durationField45 = gJChronology22.weekyears();
        int int46 = durationField18.compareTo(durationField45);
        long long49 = durationField18.getMillis((int) '4', (-6510596572805080L));
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on durationField23 and durationField45", (durationField23.compareTo(durationField45) == 0) == durationField23.equals(durationField45));
    }

    @Test
    public void test0477() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0477");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        boolean boolean2 = instant1.isEqualNow();
        org.joda.time.ReadableDuration readableDuration3 = null;
        org.joda.time.Instant instant4 = instant1.plus(readableDuration3);
        long long5 = instant1.getMillis();
        java.lang.String str6 = instant1.toString();
        boolean boolean8 = instant1.isAfter((long) (-1));
        org.joda.time.Instant instant9 = instant1.toInstant();
        org.joda.time.Instant instant11 = new org.joda.time.Instant(52L);
        boolean boolean12 = instant11.isEqualNow();
        java.lang.String str13 = instant11.toString();
        java.util.TimeZone timeZone14 = null;
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forTimeZone(timeZone14);
        org.joda.time.chrono.GJChronology gJChronology16 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone15);
        java.util.Locale locale18 = new java.util.Locale("hi!");
        java.lang.String str19 = locale18.getCountry();
        java.util.Locale locale20 = java.util.Locale.getDefault();
        java.lang.String str21 = locale20.getDisplayName();
        java.lang.String str22 = locale18.getDisplayScript(locale20);
        boolean boolean23 = dateTimeZone15.equals((java.lang.Object) locale20);
        int int25 = dateTimeZone15.getOffsetFromLocal((long) (short) 10);
        java.util.TimeZone timeZone26 = null;
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forTimeZone(timeZone26);
        org.joda.time.chrono.GJChronology gJChronology28 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone27);
        org.joda.time.DateTimeField dateTimeField29 = gJChronology28.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField30 = gJChronology28.weekyearOfCentury();
        org.joda.time.Instant instant31 = gJChronology28.getGregorianCutover();
        org.joda.time.Instant instant33 = instant31.withMillis(0L);
        org.joda.time.Instant instant35 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone36 = null;
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.forTimeZone(timeZone36);
        org.joda.time.chrono.GJChronology gJChronology38 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone37);
        org.joda.time.DateTimeField dateTimeField39 = gJChronology38.millisOfSecond();
        int int40 = instant35.get(dateTimeField39);
        org.joda.time.Instant instant42 = instant35.plus(0L);
        int int43 = instant33.compareTo((org.joda.time.ReadableInstant) instant42);
        org.joda.time.DateTimeFieldType dateTimeFieldType44 = null;
        boolean boolean45 = instant42.isSupported(dateTimeFieldType44);
        int int46 = dateTimeZone15.getOffset((org.joda.time.ReadableInstant) instant42);
        boolean boolean47 = instant11.isAfter((org.joda.time.ReadableInstant) instant42);
        org.joda.time.ReadableDuration readableDuration48 = null;
        org.joda.time.Instant instant49 = instant11.minus(readableDuration48);
        boolean boolean50 = instant1.isEqual((org.joda.time.ReadableInstant) instant49);
        java.util.TimeZone timeZone51 = null;
        org.joda.time.DateTimeZone dateTimeZone52 = org.joda.time.DateTimeZone.forTimeZone(timeZone51);
        org.joda.time.chrono.GJChronology gJChronology53 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone52);
        org.joda.time.DurationField durationField54 = gJChronology53.halfdays();
        org.joda.time.DateTimeField dateTimeField55 = gJChronology53.millisOfDay();
        org.joda.time.DateTimeField dateTimeField56 = gJChronology53.minuteOfDay();
        org.joda.time.DurationField durationField57 = gJChronology53.centuries();
        org.joda.time.DateTimeField dateTimeField58 = gJChronology53.dayOfYear();
        org.joda.time.DateTimeField dateTimeField59 = gJChronology53.millisOfDay();
        org.joda.time.DateTimeField dateTimeField60 = gJChronology53.yearOfEra();
        org.joda.time.MutableDateTime mutableDateTime61 = instant49.toMutableDateTime((org.joda.time.Chronology) gJChronology53);
        org.joda.time.Instant instant62 = org.joda.time.Instant.now();
        java.util.TimeZone timeZone63 = null;
        org.joda.time.DateTimeZone dateTimeZone64 = org.joda.time.DateTimeZone.forTimeZone(timeZone63);
        org.joda.time.chrono.GJChronology gJChronology65 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone64);
        org.joda.time.DurationField durationField66 = gJChronology65.halfdays();
        org.joda.time.DateTimeField dateTimeField67 = gJChronology65.millisOfDay();
        org.joda.time.DateTimeField dateTimeField68 = gJChronology65.halfdayOfDay();
        int int69 = instant62.get(dateTimeField68);
        org.joda.time.Instant instant71 = instant62.minus(4156171L);
        java.util.TimeZone timeZone72 = null;
        org.joda.time.DateTimeZone dateTimeZone73 = org.joda.time.DateTimeZone.forTimeZone(timeZone72);
        org.joda.time.chrono.GJChronology gJChronology74 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone73);
        org.joda.time.DurationField durationField75 = gJChronology74.halfdays();
        org.joda.time.DateTimeField dateTimeField76 = gJChronology74.millisOfDay();
        org.joda.time.DateTimeField dateTimeField77 = gJChronology74.minuteOfDay();
        org.joda.time.DurationField durationField78 = gJChronology74.centuries();
        int int79 = gJChronology74.getMinimumDaysInFirstWeek();
        org.joda.time.DateTimeField dateTimeField80 = gJChronology74.weekyear();
        org.joda.time.DateTimeField dateTimeField81 = gJChronology74.weekOfWeekyear();
        org.joda.time.DateTime dateTime82 = instant71.toDateTime((org.joda.time.Chronology) gJChronology74);
        boolean boolean83 = instant49.isAfter((org.joda.time.ReadableInstant) dateTime82);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and mutableDateTime61", (instant1.compareTo(mutableDateTime61) == 0) == instant1.equals(mutableDateTime61));
    }

    @Test
    public void test0478() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0478");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        boolean boolean2 = instant1.isEqualNow();
        java.lang.String str3 = instant1.toString();
        org.joda.time.Instant instant5 = new org.joda.time.Instant(52L);
        boolean boolean6 = instant5.isEqualNow();
        java.lang.String str7 = instant5.toString();
        java.lang.String str8 = instant5.toString();
        org.joda.time.Instant instant11 = instant5.withDurationAdded(115200000L, (int) (short) 1);
        int int12 = instant1.compareTo((org.joda.time.ReadableInstant) instant5);
        org.joda.time.Instant instant14 = new org.joda.time.Instant(52L);
        boolean boolean15 = instant14.isEqualNow();
        org.joda.time.ReadableDuration readableDuration16 = null;
        org.joda.time.Instant instant17 = instant14.plus(readableDuration16);
        boolean boolean19 = instant17.equals((java.lang.Object) ' ');
        boolean boolean20 = instant5.isAfter((org.joda.time.ReadableInstant) instant17);
        org.joda.time.ReadableDuration readableDuration21 = null;
        org.joda.time.Instant instant22 = instant17.plus(readableDuration21);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter23 = null;
        java.lang.String str24 = instant17.toString(dateTimeFormatter23);
        java.util.TimeZone timeZone25 = null;
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forTimeZone(timeZone25);
        org.joda.time.chrono.GJChronology gJChronology27 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone26);
        org.joda.time.DurationField durationField28 = gJChronology27.halfdays();
        long long32 = gJChronology27.add((long) 'a', (-1L), (int) (short) 0);
        org.joda.time.DateTimeField dateTimeField33 = gJChronology27.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField34 = gJChronology27.secondOfMinute();
        long long38 = gJChronology27.add(186641343849600000L, 12L, 55296000);
        org.joda.time.MutableDateTime mutableDateTime39 = instant17.toMutableDateTime((org.joda.time.Chronology) gJChronology27);
        org.joda.time.DateTimeField dateTimeField40 = gJChronology27.weekyear();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and mutableDateTime39", (instant1.compareTo(mutableDateTime39) == 0) == instant1.equals(mutableDateTime39));
    }

    @Test
    public void test0479() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0479");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((-220870497598236L));
        org.joda.time.MutableDateTime mutableDateTime2 = instant1.toMutableDateTime();
        org.joda.time.Instant instant4 = new org.joda.time.Instant(52L);
        boolean boolean5 = instant4.isEqualNow();
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.Instant instant7 = instant4.plus(readableDuration6);
        org.joda.time.Instant instant9 = new org.joda.time.Instant(52L);
        org.joda.time.Instant instant11 = instant9.withMillis((long) 'u');
        boolean boolean12 = instant4.isBefore((org.joda.time.ReadableInstant) instant9);
        java.util.TimeZone timeZone13 = null;
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forTimeZone(timeZone13);
        org.joda.time.chrono.GJChronology gJChronology15 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone14);
        org.joda.time.DurationField durationField16 = gJChronology15.halfdays();
        long long20 = gJChronology15.add((long) 'a', (-1L), (int) (short) 0);
        long long24 = gJChronology15.add((long) (byte) 0, (long) '4', 100);
        org.joda.time.DateTimeField dateTimeField25 = gJChronology15.minuteOfHour();
        org.joda.time.DurationField durationField26 = gJChronology15.hours();
        org.joda.time.DateTimeField dateTimeField27 = gJChronology15.weekOfWeekyear();
        org.joda.time.DateTime dateTime28 = instant9.toDateTime((org.joda.time.Chronology) gJChronology15);
        boolean boolean29 = instant1.isBefore((org.joda.time.ReadableInstant) dateTime28);
        boolean boolean30 = instant1.isEqualNow();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant4 and dateTime28", (instant4.compareTo(dateTime28) == 0) == instant4.equals(dateTime28));
    }

    @Test
    public void test0480() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0480");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = gJChronology2.halfdays();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.millisOfDay();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.minuteOfDay();
        org.joda.time.DurationField durationField6 = gJChronology2.centuries();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology2.yearOfCentury();
        org.joda.time.DurationField durationField8 = gJChronology2.millis();
        org.joda.time.DateTimeField dateTimeField9 = gJChronology2.year();
        org.joda.time.DurationField durationField10 = gJChronology2.eras();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField10, durationField3, and durationField6", !(durationField10.compareTo(durationField3) == 0) || (Math.signum(durationField10.compareTo(durationField6)) == Math.signum(durationField3.compareTo(durationField6))));
    }

    @Test
    public void test0481() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0481");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = gJChronology2.halfdays();
        long long7 = gJChronology2.add((long) 'a', (-1L), (int) (short) 0);
        org.joda.time.DateTimeField dateTimeField8 = gJChronology2.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField9 = gJChronology2.secondOfMinute();
        org.joda.time.Instant instant11 = new org.joda.time.Instant(52L);
        boolean boolean12 = instant11.isEqualNow();
        org.joda.time.ReadableDuration readableDuration13 = null;
        org.joda.time.Instant instant14 = instant11.plus(readableDuration13);
        boolean boolean15 = gJChronology2.equals((java.lang.Object) instant11);
        java.util.TimeZone timeZone16 = null;
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forTimeZone(timeZone16);
        org.joda.time.chrono.GJChronology gJChronology18 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone17);
        org.joda.time.DurationField durationField19 = gJChronology18.halfdays();
        org.joda.time.DateTimeField dateTimeField20 = gJChronology18.millisOfDay();
        org.joda.time.DateTimeField dateTimeField21 = gJChronology18.minuteOfDay();
        org.joda.time.DurationField durationField22 = gJChronology18.centuries();
        org.joda.time.DateTimeField dateTimeField23 = gJChronology18.dayOfYear();
        java.lang.String str24 = gJChronology18.toString();
        org.joda.time.DateTimeField dateTimeField25 = gJChronology18.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone26 = gJChronology18.getZone();
        org.joda.time.DateTime dateTime27 = instant11.toDateTime((org.joda.time.Chronology) gJChronology18);
        org.joda.time.Instant instant29 = new org.joda.time.Instant(52L);
        boolean boolean30 = instant29.isEqualNow();
        java.lang.String str31 = instant29.toString();
        org.joda.time.DateTimeZone dateTimeZone32 = instant29.getZone();
        org.joda.time.Instant instant34 = instant29.minus((-2208729599948L));
        boolean boolean35 = instant29.isBeforeNow();
        boolean boolean36 = dateTime27.isEqual((org.joda.time.ReadableInstant) instant29);
        org.joda.time.ReadableInstant readableInstant37 = null;
        boolean boolean38 = instant29.isBefore(readableInstant37);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant11 and dateTime27", (instant11.compareTo(dateTime27) == 0) == instant11.equals(dateTime27));
    }

    @Test
    public void test0482() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0482");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str3 = dateTimeZone1.getNameKey((long) 100);
        boolean boolean4 = dateTimeZone1.isFixed();
        java.lang.String str5 = dateTimeZone1.toString();
        boolean boolean7 = dateTimeZone1.isStandardOffset((long) (byte) 0);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        java.util.TimeZone timeZone9 = null;
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forTimeZone(timeZone9);
        org.joda.time.chrono.GJChronology gJChronology11 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone10);
        int int13 = dateTimeZone10.getOffsetFromLocal((long) (-1));
        int int15 = dateTimeZone10.getOffset((-61827926399999L));
        java.lang.String str16 = dateTimeZone10.toString();
        long long18 = dateTimeZone1.getMillisKeepLocal(dateTimeZone10, 100L);
        org.joda.time.Instant instant20 = new org.joda.time.Instant(4000L);
        java.util.TimeZone timeZone21 = null;
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forTimeZone(timeZone21);
        org.joda.time.chrono.GJChronology gJChronology23 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone22);
        org.joda.time.DateTimeField dateTimeField24 = gJChronology23.era();
        org.joda.time.DateTimeField dateTimeField25 = gJChronology23.year();
        org.joda.time.DateTime dateTime26 = instant20.toDateTime((org.joda.time.Chronology) gJChronology23);
        int int27 = dateTimeZone10.getOffset((org.joda.time.ReadableInstant) instant20);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone10);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant20 and dateTime26", (instant20.compareTo(dateTime26) == 0) == instant20.equals(dateTime26));
    }

    @Test
    public void test0483() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0483");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str3 = dateTimeZone1.getNameKey((long) 100);
        boolean boolean4 = dateTimeZone1.isFixed();
        org.joda.time.chrono.GJChronology gJChronology5 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        int int6 = gJChronology5.getMinimumDaysInFirstWeek();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology5.clockhourOfDay();
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        long long11 = gJChronology5.add(readablePeriod8, (long) (short) -1, (int) (byte) 10);
        org.joda.time.DateTimeField dateTimeField12 = gJChronology5.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField13 = gJChronology5.minuteOfDay();
        org.joda.time.DurationField durationField14 = gJChronology5.eras();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology5.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField16 = gJChronology5.clockhourOfHalfday();
        java.util.TimeZone timeZone17 = null;
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forTimeZone(timeZone17);
        org.joda.time.chrono.GJChronology gJChronology19 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone18);
        org.joda.time.DurationField durationField20 = gJChronology19.halfdays();
        long long24 = gJChronology19.add((long) 'a', (-1L), (int) (short) 0);
        boolean boolean26 = gJChronology19.equals((java.lang.Object) 0);
        org.joda.time.DateTimeField dateTimeField27 = gJChronology19.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField28 = gJChronology19.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField29 = gJChronology19.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField30 = gJChronology19.clockhourOfHalfday();
        org.joda.time.DurationField durationField31 = gJChronology19.weekyears();
        org.joda.time.DurationField durationField32 = gJChronology19.weekyears();
        org.joda.time.DateTimeField dateTimeField33 = gJChronology19.minuteOfDay();
        org.joda.time.DurationField durationField34 = gJChronology19.weeks();
        org.joda.time.DurationField durationField35 = gJChronology19.millis();
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(1, 10);
        java.util.TimeZone timeZone39 = null;
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.forTimeZone(timeZone39);
        long long42 = dateTimeZone38.getMillisKeepLocal(dateTimeZone40, 4320000000L);
        java.lang.String str43 = dateTimeZone38.getID();
        boolean boolean44 = dateTimeZone38.isFixed();
        org.joda.time.Chronology chronology45 = gJChronology19.withZone(dateTimeZone38);
        org.joda.time.Chronology chronology46 = gJChronology5.withZone(dateTimeZone38);
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField14 and durationField20", Math.signum(durationField14.compareTo(durationField20)) == -Math.signum(durationField20.compareTo(durationField14)));
    }

    @Test
    public void test0484() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0484");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField3 = gJChronology2.millisOfSecond();
        org.joda.time.DurationField durationField4 = gJChronology2.millis();
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        long long8 = gJChronology2.add(readablePeriod5, (long) 'a', (int) '4');
        org.joda.time.DateTimeField dateTimeField9 = gJChronology2.dayOfWeek();
        java.lang.String str10 = gJChronology2.toString();
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        long long14 = gJChronology2.add(readablePeriod11, 1000L, 73050);
        org.joda.time.DurationField durationField15 = gJChronology2.eras();
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        long long19 = gJChronology2.add(readablePeriod16, (long) 11, 76799);
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField4 and durationField15", Math.signum(durationField4.compareTo(durationField15)) == -Math.signum(durationField15.compareTo(durationField4)));
    }

    @Test
    public void test0485() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0485");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        int int3 = dateTimeZone1.getOffsetFromLocal((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(0, (int) (short) 10);
        long long8 = dateTimeZone1.getMillisKeepLocal(dateTimeZone6, (-61827926399999L));
        java.util.TimeZone timeZone9 = dateTimeZone6.toTimeZone();
        java.lang.String str11 = dateTimeZone6.getNameKey(1512000000L);
        java.util.TimeZone timeZone12 = null;
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forTimeZone(timeZone12);
        org.joda.time.chrono.GJChronology gJChronology14 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone13);
        org.joda.time.DurationField durationField15 = gJChronology14.halfdays();
        long long19 = gJChronology14.add((long) 'a', (-1L), (int) (short) 0);
        org.joda.time.DateTimeField dateTimeField20 = gJChronology14.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField21 = gJChronology14.secondOfMinute();
        org.joda.time.Instant instant23 = new org.joda.time.Instant(52L);
        boolean boolean24 = instant23.isEqualNow();
        org.joda.time.ReadableDuration readableDuration25 = null;
        org.joda.time.Instant instant26 = instant23.plus(readableDuration25);
        boolean boolean27 = gJChronology14.equals((java.lang.Object) instant23);
        java.util.TimeZone timeZone28 = null;
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forTimeZone(timeZone28);
        org.joda.time.chrono.GJChronology gJChronology30 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone29);
        org.joda.time.DurationField durationField31 = gJChronology30.halfdays();
        org.joda.time.DateTimeField dateTimeField32 = gJChronology30.millisOfDay();
        org.joda.time.DateTimeField dateTimeField33 = gJChronology30.minuteOfDay();
        org.joda.time.DurationField durationField34 = gJChronology30.centuries();
        org.joda.time.DateTimeField dateTimeField35 = gJChronology30.dayOfYear();
        java.lang.String str36 = gJChronology30.toString();
        org.joda.time.DateTimeField dateTimeField37 = gJChronology30.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone38 = gJChronology30.getZone();
        org.joda.time.DateTime dateTime39 = instant23.toDateTime((org.joda.time.Chronology) gJChronology30);
        boolean boolean41 = dateTime39.isBefore(262974605200L);
        int int42 = dateTimeZone6.getOffset((org.joda.time.ReadableInstant) dateTime39);
        java.util.TimeZone timeZone43 = null;
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.forTimeZone(timeZone43);
        org.joda.time.chrono.GJChronology gJChronology45 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone44);
        org.joda.time.DurationField durationField46 = gJChronology45.halfdays();
        long long50 = gJChronology45.add((long) 'a', (-1L), (int) (short) 0);
        long long54 = gJChronology45.add((long) (byte) 0, (long) '4', 100);
        org.joda.time.DateTimeField dateTimeField55 = gJChronology45.minuteOfHour();
        org.joda.time.DurationField durationField56 = gJChronology45.hours();
        org.joda.time.DateTimeField dateTimeField57 = gJChronology45.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField58 = gJChronology45.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField59 = gJChronology45.secondOfDay();
        org.joda.time.DateTimeField dateTimeField60 = gJChronology45.secondOfMinute();
        org.joda.time.MutableDateTime mutableDateTime61 = dateTime39.toMutableDateTime((org.joda.time.Chronology) gJChronology45);
        org.joda.time.DateTimeField dateTimeField62 = gJChronology45.clockhourOfHalfday();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant23 and dateTime39", (instant23.compareTo(dateTime39) == 0) == instant23.equals(dateTime39));
    }

    @Test
    public void test0486() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0486");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        org.joda.time.Instant instant3 = instant1.withMillis((long) 'u');
        java.util.TimeZone timeZone4 = null;
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forTimeZone(timeZone4);
        org.joda.time.chrono.GJChronology gJChronology6 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone5);
        org.joda.time.DurationField durationField7 = gJChronology6.halfdays();
        long long11 = gJChronology6.add((long) 'a', (-1L), (int) (short) 0);
        boolean boolean13 = gJChronology6.equals((java.lang.Object) 0);
        org.joda.time.DateTimeField dateTimeField14 = gJChronology6.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology6.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField16 = gJChronology6.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField17 = gJChronology6.clockhourOfHalfday();
        org.joda.time.DateTime dateTime18 = instant1.toDateTime((org.joda.time.Chronology) gJChronology6);
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetMillis((-19));
        org.joda.time.Instant instant22 = new org.joda.time.Instant(52L);
        boolean boolean23 = instant22.isEqualNow();
        java.lang.String str24 = instant22.toString();
        java.util.TimeZone timeZone25 = null;
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forTimeZone(timeZone25);
        org.joda.time.chrono.GJChronology gJChronology27 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone26);
        java.util.Locale locale29 = new java.util.Locale("hi!");
        java.lang.String str30 = locale29.getCountry();
        java.util.Locale locale31 = java.util.Locale.getDefault();
        java.lang.String str32 = locale31.getDisplayName();
        java.lang.String str33 = locale29.getDisplayScript(locale31);
        boolean boolean34 = dateTimeZone26.equals((java.lang.Object) locale31);
        int int36 = dateTimeZone26.getOffsetFromLocal((long) (short) 10);
        java.util.TimeZone timeZone37 = null;
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forTimeZone(timeZone37);
        org.joda.time.chrono.GJChronology gJChronology39 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone38);
        org.joda.time.DateTimeField dateTimeField40 = gJChronology39.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField41 = gJChronology39.weekyearOfCentury();
        org.joda.time.Instant instant42 = gJChronology39.getGregorianCutover();
        org.joda.time.Instant instant44 = instant42.withMillis(0L);
        org.joda.time.Instant instant46 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone47 = null;
        org.joda.time.DateTimeZone dateTimeZone48 = org.joda.time.DateTimeZone.forTimeZone(timeZone47);
        org.joda.time.chrono.GJChronology gJChronology49 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone48);
        org.joda.time.DateTimeField dateTimeField50 = gJChronology49.millisOfSecond();
        int int51 = instant46.get(dateTimeField50);
        org.joda.time.Instant instant53 = instant46.plus(0L);
        int int54 = instant44.compareTo((org.joda.time.ReadableInstant) instant53);
        org.joda.time.DateTimeFieldType dateTimeFieldType55 = null;
        boolean boolean56 = instant53.isSupported(dateTimeFieldType55);
        int int57 = dateTimeZone26.getOffset((org.joda.time.ReadableInstant) instant53);
        boolean boolean58 = instant22.isAfter((org.joda.time.ReadableInstant) instant53);
        org.joda.time.ReadableDuration readableDuration59 = null;
        org.joda.time.Instant instant61 = instant22.withDurationAdded(readableDuration59, 1);
        boolean boolean62 = instant61.isEqualNow();
        org.joda.time.Instant instant63 = instant61.toInstant();
        java.util.TimeZone timeZone64 = null;
        org.joda.time.DateTimeZone dateTimeZone65 = org.joda.time.DateTimeZone.forTimeZone(timeZone64);
        org.joda.time.chrono.GJChronology gJChronology66 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone65);
        org.joda.time.DateTimeField dateTimeField67 = gJChronology66.era();
        org.joda.time.DateTimeField dateTimeField68 = gJChronology66.weekyear();
        org.joda.time.DateTimeField dateTimeField69 = gJChronology66.weekyearOfCentury();
        org.joda.time.DurationField durationField70 = gJChronology66.millis();
        org.joda.time.DateTimeField dateTimeField71 = gJChronology66.dayOfWeek();
        org.joda.time.DurationField durationField72 = gJChronology66.millis();
        org.joda.time.Instant instant73 = gJChronology66.getGregorianCutover();
        org.joda.time.DateTimeField dateTimeField74 = gJChronology66.minuteOfHour();
        int int75 = instant61.get(dateTimeField74);
        int int76 = dateTimeZone20.getOffset((org.joda.time.ReadableInstant) instant61);
        int int77 = dateTime18.compareTo((org.joda.time.ReadableInstant) instant61);
        org.joda.time.Instant instant79 = instant61.plus((long) 120);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and dateTime18", (instant1.compareTo(dateTime18) == 0) == instant1.equals(dateTime18));
    }

    @Test
    public void test0487() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0487");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forTimeZone(timeZone2);
        org.joda.time.chrono.GJChronology gJChronology4 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone3);
        org.joda.time.DateTimeField dateTimeField5 = gJChronology4.millisOfSecond();
        int int6 = instant1.get(dateTimeField5);
        org.joda.time.Instant instant8 = instant1.plus(0L);
        org.joda.time.Instant instant9 = instant8.toInstant();
        org.joda.time.Instant instant11 = new org.joda.time.Instant(52L);
        boolean boolean12 = instant11.isEqualNow();
        java.lang.String str13 = instant11.toString();
        java.lang.String str14 = instant11.toString();
        org.joda.time.Instant instant16 = new org.joda.time.Instant(52L);
        boolean boolean17 = instant16.isEqualNow();
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.Instant instant19 = instant16.plus(readableDuration18);
        boolean boolean20 = instant11.isBefore((org.joda.time.ReadableInstant) instant19);
        org.joda.time.Instant instant22 = instant11.minus((long) 0);
        int int23 = instant8.compareTo((org.joda.time.ReadableInstant) instant11);
        boolean boolean25 = instant8.equals((java.lang.Object) 349200L);
        java.util.TimeZone timeZone26 = null;
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forTimeZone(timeZone26);
        org.joda.time.chrono.GJChronology gJChronology28 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone27);
        long long32 = dateTimeZone27.convertLocalToUTC((long) (byte) -1, true, 0L);
        boolean boolean34 = dateTimeZone27.equals((java.lang.Object) true);
        java.util.Locale locale36 = java.util.Locale.getDefault();
        java.lang.String str37 = locale36.getDisplayLanguage();
        java.lang.String str38 = locale36.toLanguageTag();
        java.lang.String str39 = dateTimeZone27.getShortName(0L, locale36);
        java.util.TimeZone timeZone40 = null;
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.forTimeZone(timeZone40);
        org.joda.time.chrono.GJChronology gJChronology42 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone41);
        org.joda.time.DateTimeField dateTimeField43 = gJChronology42.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField44 = gJChronology42.weekyearOfCentury();
        org.joda.time.Instant instant45 = gJChronology42.getGregorianCutover();
        org.joda.time.Instant instant47 = instant45.withMillis(0L);
        org.joda.time.chrono.GJChronology gJChronology49 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone27, (org.joda.time.ReadableInstant) instant45, 4);
        int int51 = dateTimeZone27.getOffsetFromLocal((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime52 = instant8.toMutableDateTime(dateTimeZone27);
        org.joda.time.MutableDateTime mutableDateTime53 = instant8.toMutableDateTimeISO();
        boolean boolean55 = instant8.isBefore(241035L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant8 and mutableDateTime52", (instant8.compareTo(mutableDateTime52) == 0) == instant8.equals(mutableDateTime52));
    }

    @Test
    public void test0488() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0488");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        boolean boolean2 = instant1.isEqualNow();
        java.lang.String str3 = instant1.toString();
        java.lang.String str4 = instant1.toString();
        org.joda.time.Instant instant7 = instant1.withDurationAdded(115200000L, (int) (short) 1);
        org.joda.time.Instant instant9 = instant1.withMillis((-6720000000L));
        org.joda.time.Instant instant11 = new org.joda.time.Instant(52L);
        boolean boolean12 = instant11.isEqualNow();
        org.joda.time.ReadableDuration readableDuration13 = null;
        org.joda.time.Instant instant14 = instant11.plus(readableDuration13);
        org.joda.time.Instant instant16 = new org.joda.time.Instant(52L);
        org.joda.time.Instant instant18 = instant16.withMillis((long) 'u');
        boolean boolean19 = instant11.isBefore((org.joda.time.ReadableInstant) instant16);
        org.joda.time.Instant instant22 = instant16.withDurationAdded(4320000000L, (int) 'u');
        org.joda.time.Chronology chronology23 = instant22.getChronology();
        boolean boolean24 = instant1.isAfter((org.joda.time.ReadableInstant) instant22);
        java.util.TimeZone timeZone25 = null;
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forTimeZone(timeZone25);
        org.joda.time.chrono.GJChronology gJChronology27 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone26);
        org.joda.time.DateTimeField dateTimeField28 = gJChronology27.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField29 = gJChronology27.weekyear();
        org.joda.time.DurationField durationField30 = gJChronology27.centuries();
        org.joda.time.DateTimeField dateTimeField31 = gJChronology27.millisOfDay();
        org.joda.time.ReadablePeriod readablePeriod32 = null;
        long long35 = gJChronology27.add(readablePeriod32, (long) '4', (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField36 = gJChronology27.hourOfHalfday();
        org.joda.time.Chronology chronology37 = gJChronology27.withUTC();
        org.joda.time.DateTime dateTime38 = instant22.toDateTime(chronology37);
        java.util.TimeZone timeZone39 = null;
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.forTimeZone(timeZone39);
        org.joda.time.chrono.GJChronology gJChronology41 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone40);
        org.joda.time.DurationField durationField42 = gJChronology41.halfdays();
        long long46 = gJChronology41.add((long) 'a', (-1L), (int) (short) 0);
        boolean boolean48 = gJChronology41.equals((java.lang.Object) 0);
        org.joda.time.DateTimeField dateTimeField49 = gJChronology41.dayOfMonth();
        org.joda.time.DurationField durationField50 = gJChronology41.days();
        org.joda.time.DurationField durationField51 = gJChronology41.seconds();
        java.util.TimeZone timeZone52 = null;
        org.joda.time.DateTimeZone dateTimeZone53 = org.joda.time.DateTimeZone.forTimeZone(timeZone52);
        int int55 = dateTimeZone53.getOffsetFromLocal((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone58 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(0, (int) (short) 10);
        long long60 = dateTimeZone53.getMillisKeepLocal(dateTimeZone58, (-61827926399999L));
        java.util.Locale locale62 = new java.util.Locale("hi!");
        boolean boolean63 = dateTimeZone53.equals((java.lang.Object) locale62);
        org.joda.time.Chronology chronology64 = gJChronology41.withZone(dateTimeZone53);
        org.joda.time.Instant instant65 = gJChronology41.getGregorianCutover();
        int int66 = dateTime38.compareTo((org.joda.time.ReadableInstant) instant65);
        org.joda.time.Instant instant68 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone69 = null;
        org.joda.time.DateTimeZone dateTimeZone70 = org.joda.time.DateTimeZone.forTimeZone(timeZone69);
        org.joda.time.chrono.GJChronology gJChronology71 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone70);
        org.joda.time.DateTimeField dateTimeField72 = gJChronology71.millisOfSecond();
        int int73 = instant68.get(dateTimeField72);
        org.joda.time.Instant instant75 = instant68.plus(0L);
        java.util.TimeZone timeZone76 = null;
        org.joda.time.DateTimeZone dateTimeZone77 = org.joda.time.DateTimeZone.forTimeZone(timeZone76);
        org.joda.time.chrono.GJChronology gJChronology78 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone77);
        org.joda.time.DurationField durationField79 = gJChronology78.halfdays();
        long long83 = gJChronology78.add((long) 'a', (-1L), (int) (short) 0);
        boolean boolean85 = gJChronology78.equals((java.lang.Object) 0);
        org.joda.time.DateTimeField dateTimeField86 = gJChronology78.dayOfMonth();
        org.joda.time.DurationField durationField87 = gJChronology78.days();
        long long91 = gJChronology78.add((long) '4', 432000000L, (int) (short) 0);
        org.joda.time.DurationField durationField92 = gJChronology78.years();
        java.lang.String str93 = gJChronology78.toString();
        org.joda.time.DateTimeField dateTimeField94 = gJChronology78.hourOfDay();
        boolean boolean95 = instant75.equals((java.lang.Object) gJChronology78);
        boolean boolean96 = instant65.isAfter((org.joda.time.ReadableInstant) instant75);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant22 and dateTime38", (instant22.compareTo(dateTime38) == 0) == instant22.equals(dateTime38));
    }

    @Test
    public void test0489() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0489");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((-2246399965L));
        org.joda.time.Instant instant3 = new org.joda.time.Instant(52L);
        boolean boolean4 = instant3.isEqualNow();
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.Instant instant6 = instant3.plus(readableDuration5);
        long long7 = instant3.getMillis();
        java.lang.String str8 = instant3.toString();
        org.joda.time.Instant instant9 = instant3.toInstant();
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.Instant instant12 = instant3.withDurationAdded(readableDuration10, (int) 'x');
        org.joda.time.Instant instant13 = instant3.toInstant();
        java.util.Date date14 = instant3.toDate();
        long long15 = instant3.getMillis();
        org.joda.time.ReadableDuration readableDuration16 = null;
        org.joda.time.Instant instant17 = instant3.minus(readableDuration16);
        java.util.TimeZone timeZone18 = null;
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forTimeZone(timeZone18);
        org.joda.time.chrono.GJChronology gJChronology20 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone19);
        org.joda.time.DurationField durationField21 = gJChronology20.halfdays();
        org.joda.time.Chronology chronology22 = gJChronology20.withUTC();
        java.lang.String str23 = gJChronology20.toString();
        org.joda.time.DateTimeField dateTimeField24 = gJChronology20.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(1, 10);
        org.joda.time.Chronology chronology28 = gJChronology20.withZone(dateTimeZone27);
        org.joda.time.DateTimeZone dateTimeZone29 = gJChronology20.getZone();
        org.joda.time.DateTime dateTime30 = instant3.toDateTime(dateTimeZone29);
        boolean boolean31 = instant1.isBefore((org.joda.time.ReadableInstant) dateTime30);
        org.joda.time.Instant instant32 = instant1.toInstant();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant3 and dateTime30", (instant3.compareTo(dateTime30) == 0) == instant3.equals(dateTime30));
    }

    @Test
    public void test0490() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0490");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        boolean boolean2 = instant1.isEqualNow();
        org.joda.time.ReadableDuration readableDuration3 = null;
        org.joda.time.Instant instant4 = instant1.plus(readableDuration3);
        long long5 = instant1.getMillis();
        java.lang.String str6 = instant1.toString();
        org.joda.time.Instant instant7 = instant1.toInstant();
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.Instant instant10 = instant1.withDurationAdded(readableDuration8, (int) 'x');
        java.util.TimeZone timeZone11 = null;
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forTimeZone(timeZone11);
        org.joda.time.chrono.GJChronology gJChronology13 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone12);
        org.joda.time.DateTimeField dateTimeField14 = gJChronology13.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology13.yearOfCentury();
        int int16 = instant10.get(dateTimeField15);
        org.joda.time.Instant instant17 = instant10.toInstant();
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.Instant instant19 = instant10.minus(readableDuration18);
        org.joda.time.Instant instant21 = new org.joda.time.Instant(52L);
        boolean boolean22 = instant21.isEqualNow();
        java.lang.String str23 = instant21.toString();
        java.lang.String str24 = instant21.toString();
        org.joda.time.Instant instant26 = new org.joda.time.Instant(52L);
        boolean boolean27 = instant26.isEqualNow();
        org.joda.time.ReadableDuration readableDuration28 = null;
        org.joda.time.Instant instant29 = instant26.plus(readableDuration28);
        boolean boolean30 = instant21.isBefore((org.joda.time.ReadableInstant) instant29);
        org.joda.time.ReadableDuration readableDuration31 = null;
        org.joda.time.Instant instant32 = instant29.minus(readableDuration31);
        boolean boolean33 = instant32.isBeforeNow();
        org.joda.time.MutableDateTime mutableDateTime34 = instant32.toMutableDateTime();
        long long35 = instant32.getMillis();
        boolean boolean36 = instant10.isAfter((org.joda.time.ReadableInstant) instant32);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant10 and mutableDateTime34", (instant10.compareTo(mutableDateTime34) == 0) == instant10.equals(mutableDateTime34));
    }

    @Test
    public void test0491() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0491");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = gJChronology2.halfdays();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.millisOfDay();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.minuteOfDay();
        org.joda.time.DurationField durationField6 = gJChronology2.centuries();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology2.dayOfYear();
        java.lang.String str8 = gJChronology2.toString();
        org.joda.time.DurationField durationField9 = gJChronology2.years();
        org.joda.time.DurationField durationField10 = gJChronology2.hours();
        org.joda.time.DurationField durationField11 = gJChronology2.days();
        org.joda.time.DurationField durationField12 = gJChronology2.weekyears();
        org.joda.time.DateTimeField dateTimeField13 = gJChronology2.minuteOfDay();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on durationField9 and durationField12", (durationField9.compareTo(durationField12) == 0) == durationField9.equals(durationField12));
    }

    @Test
    public void test0492() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0492");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField3 = gJChronology2.millisOfSecond();
        org.joda.time.DurationField durationField4 = gJChronology2.millis();
        org.joda.time.DurationField durationField5 = gJChronology2.weeks();
        org.joda.time.DurationField durationField6 = gJChronology2.days();
        org.joda.time.DurationField durationField7 = gJChronology2.months();
        org.joda.time.DateTimeField dateTimeField8 = gJChronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField9 = gJChronology2.centuryOfEra();
        org.joda.time.DurationField durationField10 = gJChronology2.eras();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField10, durationField4, and durationField5", !(durationField10.compareTo(durationField4) == 0) || (Math.signum(durationField10.compareTo(durationField5)) == Math.signum(durationField4.compareTo(durationField5))));
    }

    @Test
    public void test0493() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0493");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str3 = dateTimeZone1.getNameKey((long) 100);
        boolean boolean4 = dateTimeZone1.isFixed();
        org.joda.time.chrono.GJChronology gJChronology5 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        int int6 = gJChronology5.getMinimumDaysInFirstWeek();
        java.lang.String str7 = gJChronology5.toString();
        org.joda.time.DateTimeField dateTimeField8 = gJChronology5.yearOfEra();
        org.joda.time.DateTimeField dateTimeField9 = gJChronology5.yearOfCentury();
        org.joda.time.DurationField durationField10 = gJChronology5.eras();
        org.joda.time.DateTimeField dateTimeField11 = gJChronology5.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField12 = gJChronology5.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField13 = gJChronology5.yearOfEra();
        org.joda.time.DurationField durationField14 = gJChronology5.centuries();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField10, durationField14, and durationField10", !(durationField10.compareTo(durationField14) == 0) || (Math.signum(durationField10.compareTo(durationField10)) == Math.signum(durationField14.compareTo(durationField10))));
    }

    @Test
    public void test0494() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0494");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forTimeZone(timeZone2);
        org.joda.time.chrono.GJChronology gJChronology4 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone3);
        org.joda.time.DateTimeField dateTimeField5 = gJChronology4.millisOfSecond();
        int int6 = instant1.get(dateTimeField5);
        boolean boolean7 = instant1.isEqualNow();
        boolean boolean9 = instant1.isBefore(35L);
        org.joda.time.MutableDateTime mutableDateTime10 = instant1.toMutableDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone11 = instant1.getZone();
        org.joda.time.Instant instant13 = instant1.withMillis(2556371L);
        org.joda.time.DateTime dateTime14 = instant13.toDateTime();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and mutableDateTime10", (instant1.compareTo(mutableDateTime10) == 0) == instant1.equals(mutableDateTime10));
    }

    @Test
    public void test0495() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0495");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField3 = gJChronology2.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.weekyearOfCentury();
        org.joda.time.Instant instant5 = gJChronology2.getGregorianCutover();
        org.joda.time.Instant instant7 = instant5.withMillis(0L);
        org.joda.time.Instant instant9 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone10 = null;
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forTimeZone(timeZone10);
        org.joda.time.chrono.GJChronology gJChronology12 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone11);
        org.joda.time.DateTimeField dateTimeField13 = gJChronology12.millisOfSecond();
        int int14 = instant9.get(dateTimeField13);
        org.joda.time.Instant instant16 = instant9.plus(0L);
        int int17 = instant7.compareTo((org.joda.time.ReadableInstant) instant16);
        org.joda.time.Instant instant19 = new org.joda.time.Instant(52L);
        boolean boolean20 = instant19.isEqualNow();
        org.joda.time.ReadableDuration readableDuration21 = null;
        org.joda.time.Instant instant22 = instant19.plus(readableDuration21);
        boolean boolean24 = instant22.equals((java.lang.Object) ' ');
        boolean boolean25 = instant16.isEqual((org.joda.time.ReadableInstant) instant22);
        java.lang.String str26 = instant16.toString();
        org.joda.time.ReadableDuration readableDuration27 = null;
        org.joda.time.Instant instant29 = instant16.withDurationAdded(readableDuration27, 1431201);
        java.lang.Object obj30 = null;
        boolean boolean31 = instant16.equals(obj30);
        java.util.Date date32 = instant16.toDate();
        java.util.Date date33 = instant16.toDate();
        long long34 = instant16.getMillis();
        org.joda.time.Instant instant36 = instant16.withMillis((-2980259049600000L));
        java.util.TimeZone timeZone37 = null;
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forTimeZone(timeZone37);
        int int40 = dateTimeZone38.getOffsetFromLocal((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(0, (int) (short) 10);
        long long45 = dateTimeZone38.getMillisKeepLocal(dateTimeZone43, (-61827926399999L));
        java.util.TimeZone timeZone46 = dateTimeZone43.toTimeZone();
        boolean boolean47 = instant16.equals((java.lang.Object) timeZone46);
        java.lang.String str48 = instant16.toString();
        org.joda.time.Instant instant50 = new org.joda.time.Instant(52L);
        boolean boolean51 = instant50.isEqualNow();
        java.lang.String str52 = instant50.toString();
        java.lang.String str53 = instant50.toString();
        org.joda.time.Instant instant56 = instant50.withDurationAdded(115200000L, (int) (short) 1);
        org.joda.time.Instant instant57 = instant50.toInstant();
        long long58 = instant50.getMillis();
        java.util.TimeZone timeZone59 = null;
        org.joda.time.DateTimeZone dateTimeZone60 = org.joda.time.DateTimeZone.forTimeZone(timeZone59);
        int int62 = dateTimeZone60.getOffsetFromLocal((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone65 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(0, (int) (short) 10);
        long long67 = dateTimeZone60.getMillisKeepLocal(dateTimeZone65, (-61827926399999L));
        org.joda.time.MutableDateTime mutableDateTime68 = instant50.toMutableDateTime(dateTimeZone60);
        boolean boolean69 = instant16.isEqual((org.joda.time.ReadableInstant) instant50);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant16 and mutableDateTime68", (instant16.compareTo(mutableDateTime68) == 0) == instant16.equals(mutableDateTime68));
    }

    @Test
    public void test0496() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0496");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        boolean boolean2 = instant1.isEqualNow();
        org.joda.time.ReadableDuration readableDuration3 = null;
        org.joda.time.Instant instant4 = instant1.plus(readableDuration3);
        org.joda.time.Instant instant6 = new org.joda.time.Instant(52L);
        boolean boolean7 = instant6.isEqualNow();
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.Instant instant9 = instant6.plus(readableDuration8);
        long long10 = instant6.getMillis();
        java.lang.String str11 = instant6.toString();
        org.joda.time.Instant instant12 = instant6.toInstant();
        org.joda.time.ReadableDuration readableDuration13 = null;
        org.joda.time.Instant instant15 = instant6.withDurationAdded(readableDuration13, (int) 'x');
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = null;
        boolean boolean17 = instant6.isSupported(dateTimeFieldType16);
        boolean boolean18 = instant1.isEqual((org.joda.time.ReadableInstant) instant6);
        org.joda.time.Chronology chronology19 = instant6.getChronology();
        org.joda.time.ReadableDuration readableDuration20 = null;
        org.joda.time.Instant instant22 = instant6.withDurationAdded(readableDuration20, 2);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter23 = null;
        java.lang.String str24 = instant22.toString(dateTimeFormatter23);
        org.joda.time.Instant instant26 = new org.joda.time.Instant(52L);
        org.joda.time.Instant instant28 = instant26.withMillis((long) 'u');
        java.util.TimeZone timeZone29 = null;
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forTimeZone(timeZone29);
        org.joda.time.chrono.GJChronology gJChronology31 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone30);
        org.joda.time.DurationField durationField32 = gJChronology31.halfdays();
        long long36 = gJChronology31.add((long) 'a', (-1L), (int) (short) 0);
        boolean boolean38 = gJChronology31.equals((java.lang.Object) 0);
        org.joda.time.DateTimeField dateTimeField39 = gJChronology31.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField40 = gJChronology31.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField41 = gJChronology31.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField42 = gJChronology31.clockhourOfHalfday();
        org.joda.time.DateTime dateTime43 = instant26.toDateTime((org.joda.time.Chronology) gJChronology31);
        org.joda.time.Instant instant45 = instant26.plus(0L);
        boolean boolean46 = instant22.isAfter((org.joda.time.ReadableInstant) instant26);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and dateTime43", (instant1.compareTo(dateTime43) == 0) == instant1.equals(dateTime43));
    }

    @Test
    public void test0497() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0497");
        java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("seconds");
        double double2 = languageRange1.getWeight();
        java.lang.String str3 = languageRange1.getRange();
        double double4 = languageRange1.getWeight();
        java.lang.String str5 = languageRange1.getRange();
        java.util.TimeZone timeZone6 = null;
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forTimeZone(timeZone6);
        org.joda.time.chrono.GJChronology gJChronology8 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone7);
        org.joda.time.DurationField durationField9 = gJChronology8.halfdays();
        org.joda.time.DateTimeField dateTimeField10 = gJChronology8.millisOfDay();
        org.joda.time.DateTimeField dateTimeField11 = gJChronology8.minuteOfDay();
        org.joda.time.DurationField durationField12 = gJChronology8.centuries();
        org.joda.time.DateTimeField dateTimeField13 = gJChronology8.dayOfYear();
        java.lang.String str14 = gJChronology8.toString();
        org.joda.time.DurationField durationField15 = gJChronology8.years();
        org.joda.time.DurationField durationField16 = gJChronology8.hours();
        org.joda.time.DurationField durationField17 = gJChronology8.days();
        org.joda.time.DurationField durationField18 = gJChronology8.weekyears();
        java.util.TimeZone timeZone19 = null;
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forTimeZone(timeZone19);
        org.joda.time.chrono.GJChronology gJChronology21 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone20);
        org.joda.time.DurationField durationField22 = gJChronology21.halfdays();
        long long25 = durationField22.add((long) 100, 100L);
        java.util.TimeZone timeZone26 = null;
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forTimeZone(timeZone26);
        org.joda.time.chrono.GJChronology gJChronology28 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone27);
        org.joda.time.DurationField durationField29 = gJChronology28.halfdays();
        long long33 = gJChronology28.add((long) 'a', (-1L), (int) (short) 0);
        boolean boolean35 = gJChronology28.equals((java.lang.Object) 0);
        org.joda.time.DateTimeField dateTimeField36 = gJChronology28.dayOfMonth();
        org.joda.time.DurationField durationField37 = gJChronology28.millis();
        int int38 = durationField22.compareTo(durationField37);
        long long41 = durationField22.getMillis((int) (short) 10, (-1L));
        boolean boolean42 = durationField22.isSupported();
        long long45 = durationField22.getValueAsLong((long) 'a', 126403200120L);
        int int46 = durationField18.compareTo(durationField22);
        boolean boolean47 = languageRange1.equals((java.lang.Object) int46);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on durationField15 and durationField18", (durationField15.compareTo(durationField18) == 0) == durationField15.equals(durationField18));
    }

    @Test
    public void test0498() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0498");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        org.joda.time.Instant instant3 = instant1.withMillis((long) 'u');
        java.util.TimeZone timeZone4 = null;
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forTimeZone(timeZone4);
        org.joda.time.chrono.GJChronology gJChronology6 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone5);
        org.joda.time.DurationField durationField7 = gJChronology6.halfdays();
        long long11 = gJChronology6.add((long) 'a', (-1L), (int) (short) 0);
        boolean boolean13 = gJChronology6.equals((java.lang.Object) 0);
        org.joda.time.DateTimeField dateTimeField14 = gJChronology6.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology6.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField16 = gJChronology6.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField17 = gJChronology6.clockhourOfHalfday();
        org.joda.time.DateTime dateTime18 = instant1.toDateTime((org.joda.time.Chronology) gJChronology6);
        java.lang.String str19 = dateTime18.toString();
        long long20 = dateTime18.getMillis();
        java.lang.String str21 = dateTime18.toString();
        org.joda.time.Instant instant22 = dateTime18.toInstant();
        java.util.TimeZone timeZone23 = null;
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forTimeZone(timeZone23);
        org.joda.time.chrono.GJChronology gJChronology25 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone24);
        org.joda.time.DateTimeField dateTimeField26 = gJChronology25.era();
        org.joda.time.DateTimeField dateTimeField27 = gJChronology25.centuryOfEra();
        org.joda.time.DurationField durationField28 = gJChronology25.hours();
        org.joda.time.DateTimeField dateTimeField29 = gJChronology25.weekyear();
        int int30 = instant22.get(dateTimeField29);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and dateTime18", (instant1.compareTo(dateTime18) == 0) == instant1.equals(dateTime18));
    }

    @Test
    public void test0499() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0499");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField3 = gJChronology2.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.weekyear();
        org.joda.time.DurationField durationField5 = gJChronology2.centuries();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology2.millisOfDay();
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        long long10 = gJChronology2.add(readablePeriod7, (long) '4', (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField11 = gJChronology2.hourOfHalfday();
        org.joda.time.DurationField durationField12 = gJChronology2.eras();
        org.joda.time.DurationField durationField13 = gJChronology2.months();
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField5 and durationField12", Math.signum(durationField5.compareTo(durationField12)) == -Math.signum(durationField12.compareTo(durationField5)));
    }

    @Test
    public void test0500() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0500");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forTimeZone(timeZone2);
        org.joda.time.chrono.GJChronology gJChronology4 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone3);
        org.joda.time.DateTimeField dateTimeField5 = gJChronology4.millisOfSecond();
        int int6 = instant1.get(dateTimeField5);
        org.joda.time.Instant instant8 = instant1.plus(0L);
        long long9 = instant1.getMillis();
        org.joda.time.MutableDateTime mutableDateTime10 = instant1.toMutableDateTime();
        long long11 = instant1.getMillis();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and mutableDateTime10", (instant1.compareTo(mutableDateTime10) == 0) == instant1.equals(mutableDateTime10));
    }
}


import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class ErrorTest3 {

    public static boolean debug = false;

    @Test
    public void test1501() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1501");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        boolean boolean2 = instant1.isEqualNow();
        org.joda.time.ReadableDuration readableDuration3 = null;
        org.joda.time.Instant instant4 = instant1.plus(readableDuration3);
        org.joda.time.Instant instant6 = new org.joda.time.Instant(52L);
        org.joda.time.Instant instant8 = instant6.withMillis((long) 'u');
        boolean boolean9 = instant1.isBefore((org.joda.time.ReadableInstant) instant6);
        org.joda.time.DateTimeZone dateTimeZone10 = instant6.getZone();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetMillis((int) '4');
        java.util.TimeZone timeZone13 = dateTimeZone12.toTimeZone();
        long long16 = dateTimeZone12.adjustOffset((long) 0, false);
        int int18 = dateTimeZone12.getOffsetFromLocal((-26438399999L));
        java.util.TimeZone timeZone19 = dateTimeZone12.toTimeZone();
        java.lang.String str20 = dateTimeZone12.getID();
        org.joda.time.DateTime dateTime21 = instant6.toDateTime(dateTimeZone12);
        java.util.TimeZone timeZone22 = null;
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        java.lang.String str25 = dateTimeZone23.getNameKey((long) 100);
        boolean boolean26 = dateTimeZone23.isFixed();
        java.util.Locale locale30 = new java.util.Locale("DurationField[halfdays]", "\u82f1\u6587");
        java.lang.String str31 = dateTimeZone23.getName((long) (short) 10, locale30);
        java.lang.String str33 = dateTimeZone23.getNameKey(17296800000L);
        long long36 = dateTimeZone23.adjustOffset(4492800100L, true);
        org.joda.time.DateTime dateTime37 = dateTime21.toDateTime(dateTimeZone23);
        org.joda.time.DateTimeZone dateTimeZone38 = dateTime21.getZone();
        int int40 = dateTimeZone38.getOffsetFromLocal((-26187053848164L));
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and dateTime21", (instant1.compareTo(dateTime21) == 0) == instant1.equals(dateTime21));
    }

    @Test
    public void test1502() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1502");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = gJChronology2.halfdays();
        long long7 = gJChronology2.add((long) 'a', (-1L), (int) (short) 0);
        org.joda.time.DateTimeField dateTimeField8 = gJChronology2.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField9 = gJChronology2.centuryOfEra();
        long long13 = gJChronology2.add(4492800100L, 43201764L, 0);
        org.joda.time.Instant instant15 = new org.joda.time.Instant(52L);
        boolean boolean16 = instant15.isEqualNow();
        java.lang.String str17 = instant15.toString();
        java.lang.String str18 = instant15.toString();
        org.joda.time.Instant instant21 = instant15.withDurationAdded(115200000L, (int) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone22 = instant15.getZone();
        org.joda.time.Chronology chronology23 = gJChronology2.withZone(dateTimeZone22);
        org.joda.time.DurationField durationField24 = gJChronology2.eras();
        org.joda.time.DateTimeField dateTimeField25 = gJChronology2.clockhourOfHalfday();
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField3 and durationField24", Math.signum(durationField3.compareTo(durationField24)) == -Math.signum(durationField24.compareTo(durationField3)));
    }

    @Test
    public void test1503() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1503");
        java.util.Locale locale1 = new java.util.Locale("zh_tw (EN-US,English)");
        org.joda.time.Instant instant3 = new org.joda.time.Instant((long) (short) 1);
        java.util.TimeZone timeZone4 = null;
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forTimeZone(timeZone4);
        org.joda.time.chrono.GJChronology gJChronology6 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone5);
        org.joda.time.DateTimeField dateTimeField7 = gJChronology6.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField8 = gJChronology6.weekyear();
        org.joda.time.DateTimeField dateTimeField9 = gJChronology6.dayOfMonth();
        org.joda.time.DurationField durationField10 = gJChronology6.hours();
        org.joda.time.DateTimeField dateTimeField11 = gJChronology6.monthOfYear();
        org.joda.time.DateTimeField dateTimeField12 = gJChronology6.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField13 = gJChronology6.secondOfMinute();
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        long long17 = gJChronology6.add(readablePeriod14, 55299600000L, 60000);
        org.joda.time.MutableDateTime mutableDateTime18 = instant3.toMutableDateTime((org.joda.time.Chronology) gJChronology6);
        org.joda.time.DateTimeZone dateTimeZone19 = mutableDateTime18.getZone();
        boolean boolean20 = locale1.equals((java.lang.Object) dateTimeZone19);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant3 and mutableDateTime18", (instant3.compareTo(mutableDateTime18) == 0) == instant3.equals(mutableDateTime18));
    }

    @Test
    public void test1504() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1504");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.GJChronology gJChronology1 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0);
        org.joda.time.DurationField durationField2 = gJChronology1.eras();
        org.joda.time.DateTimeField dateTimeField3 = gJChronology1.centuryOfEra();
        org.joda.time.DurationField durationField4 = gJChronology1.days();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField2, durationField4, and durationField2", !(durationField2.compareTo(durationField4) == 0) || (Math.signum(durationField2.compareTo(durationField2)) == Math.signum(durationField4.compareTo(durationField2))));
    }

    @Test
    public void test1505() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1505");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        boolean boolean2 = instant1.isEqualNow();
        boolean boolean4 = instant1.isEqual(0L);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = null;
        boolean boolean6 = instant1.isSupported(dateTimeFieldType5);
        org.joda.time.Instant instant9 = instant1.withDurationAdded((-61827926399999L), (int) (short) -1);
        org.joda.time.MutableDateTime mutableDateTime10 = instant9.toMutableDateTime();
        boolean boolean11 = instant9.isAfterNow();
        java.util.TimeZone timeZone12 = null;
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forTimeZone(timeZone12);
        org.joda.time.chrono.GJChronology gJChronology14 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone13);
        org.joda.time.DurationField durationField15 = gJChronology14.halfdays();
        long long19 = gJChronology14.add((long) 'a', (-1L), (int) (short) 0);
        long long23 = gJChronology14.add((long) (byte) 0, (long) '4', 100);
        org.joda.time.DateTimeField dateTimeField24 = gJChronology14.minuteOfHour();
        org.joda.time.DurationField durationField25 = gJChronology14.hours();
        org.joda.time.DateTimeField dateTimeField26 = gJChronology14.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField27 = gJChronology14.millisOfSecond();
        org.joda.time.DurationField durationField28 = gJChronology14.months();
        org.joda.time.DurationField durationField29 = gJChronology14.hours();
        org.joda.time.DateTimeField dateTimeField30 = gJChronology14.centuryOfEra();
        org.joda.time.DurationField durationField31 = gJChronology14.millis();
        org.joda.time.DateTimeField dateTimeField32 = gJChronology14.era();
        org.joda.time.MutableDateTime mutableDateTime33 = instant9.toMutableDateTime((org.joda.time.Chronology) gJChronology14);
        java.util.Date date34 = instant9.toDate();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime10 and mutableDateTime33", (mutableDateTime10.compareTo(mutableDateTime33) == 0) == mutableDateTime10.equals(mutableDateTime33));
    }

    @Test
    public void test1506() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1506");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = gJChronology2.halfdays();
        long long7 = gJChronology2.add((long) 'a', (-1L), (int) (short) 0);
        boolean boolean9 = gJChronology2.equals((java.lang.Object) 0);
        org.joda.time.DateTimeField dateTimeField10 = gJChronology2.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField11 = gJChronology2.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField12 = gJChronology2.clockhourOfDay();
        long long17 = gJChronology2.getDateTimeMillis(10, (int) (short) 10, 4, (int) (byte) 1);
        org.joda.time.Instant instant18 = gJChronology2.getGregorianCutover();
        org.joda.time.DateTimeZone dateTimeZone19 = instant18.getZone();
        java.util.TimeZone timeZone20 = null;
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forTimeZone(timeZone20);
        org.joda.time.chrono.GJChronology gJChronology22 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone21);
        java.util.Locale locale24 = new java.util.Locale("hi!");
        java.lang.String str25 = locale24.getCountry();
        java.util.Locale locale26 = java.util.Locale.getDefault();
        java.lang.String str27 = locale26.getDisplayName();
        java.lang.String str28 = locale24.getDisplayScript(locale26);
        boolean boolean29 = dateTimeZone21.equals((java.lang.Object) locale26);
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forOffsetMillis((int) '4');
        java.util.TimeZone timeZone32 = dateTimeZone31.toTimeZone();
        long long35 = dateTimeZone31.adjustOffset((long) 0, false);
        int int37 = dateTimeZone31.getOffsetFromLocal((-26438399999L));
        long long39 = dateTimeZone21.getMillisKeepLocal(dateTimeZone31, (long) (byte) 10);
        org.joda.time.Instant instant41 = new org.joda.time.Instant(52L);
        boolean boolean42 = instant41.isEqualNow();
        org.joda.time.ReadableDuration readableDuration43 = null;
        org.joda.time.Instant instant44 = instant41.plus(readableDuration43);
        long long45 = instant41.getMillis();
        java.lang.String str46 = instant41.toString();
        org.joda.time.Instant instant47 = instant41.toInstant();
        org.joda.time.ReadableDuration readableDuration48 = null;
        org.joda.time.Instant instant50 = instant41.withDurationAdded(readableDuration48, (int) 'x');
        java.util.TimeZone timeZone51 = null;
        org.joda.time.DateTimeZone dateTimeZone52 = org.joda.time.DateTimeZone.forTimeZone(timeZone51);
        org.joda.time.chrono.GJChronology gJChronology53 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone52);
        org.joda.time.DateTimeField dateTimeField54 = gJChronology53.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField55 = gJChronology53.yearOfCentury();
        int int56 = instant50.get(dateTimeField55);
        org.joda.time.chrono.GJChronology gJChronology57 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone31, (org.joda.time.ReadableInstant) instant50);
        org.joda.time.DateTimeField dateTimeField58 = gJChronology57.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField59 = gJChronology57.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField60 = gJChronology57.clockhourOfHalfday();
        org.joda.time.DateTime dateTime61 = instant18.toDateTime((org.joda.time.Chronology) gJChronology57);
        org.joda.time.DateTimeField dateTimeField62 = gJChronology57.minuteOfHour();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant18 and dateTime61", (instant18.compareTo(dateTime61) == 0) == instant18.equals(dateTime61));
    }

    @Test
    public void test1507() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1507");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = gJChronology2.halfdays();
        long long7 = gJChronology2.add((long) 'a', (-1L), (int) (short) 0);
        long long11 = gJChronology2.add((long) (byte) 0, (long) '4', 100);
        org.joda.time.DateTimeField dateTimeField12 = gJChronology2.minuteOfHour();
        org.joda.time.DurationField durationField13 = gJChronology2.hours();
        org.joda.time.DateTimeField dateTimeField14 = gJChronology2.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology2.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField16 = gJChronology2.secondOfDay();
        org.joda.time.DateTimeField dateTimeField17 = gJChronology2.secondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone18 = gJChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField19 = gJChronology2.era();
        org.joda.time.DurationField durationField20 = gJChronology2.halfdays();
        org.joda.time.DurationField durationField21 = gJChronology2.eras();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField21, durationField3, and durationField13", !(durationField21.compareTo(durationField3) == 0) || (Math.signum(durationField21.compareTo(durationField13)) == Math.signum(durationField3.compareTo(durationField13))));
    }

    @Test
    public void test1508() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1508");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        boolean boolean2 = instant1.isEqualNow();
        org.joda.time.ReadableDuration readableDuration3 = null;
        org.joda.time.Instant instant4 = instant1.plus(readableDuration3);
        long long5 = instant1.getMillis();
        java.lang.String str6 = instant1.toString();
        org.joda.time.Instant instant7 = instant1.toInstant();
        org.joda.time.DateTime dateTime8 = instant1.toDateTime();
        org.joda.time.ReadableInstant readableInstant9 = null;
        boolean boolean10 = dateTime8.isBefore(readableInstant9);
        org.joda.time.Instant instant12 = new org.joda.time.Instant(52L);
        org.joda.time.Instant instant14 = instant12.withMillis((long) 'u');
        java.util.TimeZone timeZone15 = null;
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forTimeZone(timeZone15);
        org.joda.time.chrono.GJChronology gJChronology17 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone16);
        org.joda.time.DurationField durationField18 = gJChronology17.halfdays();
        long long22 = gJChronology17.add((long) 'a', (-1L), (int) (short) 0);
        boolean boolean24 = gJChronology17.equals((java.lang.Object) 0);
        org.joda.time.DateTimeField dateTimeField25 = gJChronology17.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField26 = gJChronology17.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField27 = gJChronology17.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField28 = gJChronology17.clockhourOfHalfday();
        org.joda.time.DateTime dateTime29 = instant12.toDateTime((org.joda.time.Chronology) gJChronology17);
        java.lang.String str30 = dateTime29.toString();
        long long31 = dateTime29.getMillis();
        java.lang.String str32 = dateTime29.toString();
        org.joda.time.Instant instant33 = dateTime29.toInstant();
        boolean boolean34 = dateTime8.isAfter((org.joda.time.ReadableInstant) dateTime29);
        org.joda.time.DateTimeZone dateTimeZone35 = dateTime8.getZone();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and dateTime29", (instant1.compareTo(dateTime29) == 0) == instant1.equals(dateTime29));
    }

    @Test
    public void test1509() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1509");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = gJChronology2.halfdays();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.millisOfDay();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.secondOfMinute();
        org.joda.time.DurationField durationField6 = gJChronology2.weekyears();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology2.yearOfCentury();
        org.joda.time.DurationField durationField8 = gJChronology2.eras();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField8, durationField3, and durationField6", !(durationField8.compareTo(durationField3) == 0) || (Math.signum(durationField8.compareTo(durationField6)) == Math.signum(durationField3.compareTo(durationField6))));
    }

    @Test
    public void test1510() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1510");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField3 = gJChronology2.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.weekyearOfCentury();
        org.joda.time.Instant instant5 = gJChronology2.getGregorianCutover();
        org.joda.time.Instant instant7 = instant5.withMillis(0L);
        org.joda.time.Instant instant9 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone10 = null;
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forTimeZone(timeZone10);
        org.joda.time.chrono.GJChronology gJChronology12 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone11);
        org.joda.time.DateTimeField dateTimeField13 = gJChronology12.millisOfSecond();
        int int14 = instant9.get(dateTimeField13);
        org.joda.time.Instant instant16 = instant9.plus(0L);
        int int17 = instant7.compareTo((org.joda.time.ReadableInstant) instant16);
        java.util.TimeZone timeZone18 = null;
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forTimeZone(timeZone18);
        org.joda.time.chrono.GJChronology gJChronology20 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone19);
        org.joda.time.DurationField durationField21 = gJChronology20.halfdays();
        org.joda.time.DateTimeField dateTimeField22 = gJChronology20.millisOfDay();
        org.joda.time.DateTimeField dateTimeField23 = gJChronology20.minuteOfDay();
        org.joda.time.DurationField durationField24 = gJChronology20.centuries();
        org.joda.time.DateTimeField dateTimeField25 = gJChronology20.halfdayOfDay();
        java.util.Locale locale26 = java.util.Locale.ITALIAN;
        java.util.Locale locale27 = locale26.stripExtensions();
        java.util.Locale locale28 = java.util.Locale.CANADA;
        java.lang.String str29 = locale26.getDisplayVariant(locale28);
        boolean boolean30 = gJChronology20.equals((java.lang.Object) locale28);
        org.joda.time.DurationField durationField31 = gJChronology20.months();
        org.joda.time.Chronology chronology32 = gJChronology20.withUTC();
        org.joda.time.DateTimeField dateTimeField33 = gJChronology20.yearOfCentury();
        org.joda.time.Chronology chronology34 = gJChronology20.withUTC();
        org.joda.time.DateTimeField dateTimeField35 = chronology34.centuryOfEra();
        org.joda.time.Chronology chronology36 = chronology34.withUTC();
        org.joda.time.MutableDateTime mutableDateTime37 = instant16.toMutableDateTime(chronology36);
        java.lang.Class<?> wildcardClass38 = instant16.getClass();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant16 and mutableDateTime37", (instant16.compareTo(mutableDateTime37) == 0) == instant16.equals(mutableDateTime37));
    }

    @Test
    public void test1511() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1511");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        boolean boolean2 = instant1.isEqualNow();
        org.joda.time.ReadableDuration readableDuration3 = null;
        org.joda.time.Instant instant4 = instant1.plus(readableDuration3);
        long long5 = instant1.getMillis();
        java.lang.String str6 = instant1.toString();
        boolean boolean8 = instant1.isAfter((long) (-1));
        java.lang.Object obj9 = null;
        boolean boolean10 = instant1.equals(obj9);
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = null;
        boolean boolean12 = instant1.isSupported(dateTimeFieldType11);
        org.joda.time.DateTime dateTime13 = instant1.toDateTimeISO();
        org.joda.time.Chronology chronology14 = instant1.getChronology();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and dateTime13", (instant1.compareTo(dateTime13) == 0) == instant1.equals(dateTime13));
    }

    @Test
    public void test1512() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1512");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = gJChronology2.halfdays();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.millisOfDay();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.minuteOfDay();
        org.joda.time.DurationField durationField6 = gJChronology2.centuries();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology2.dayOfYear();
        java.lang.String str8 = gJChronology2.toString();
        org.joda.time.DateTimeField dateTimeField9 = gJChronology2.dayOfYear();
        org.joda.time.DateTimeField dateTimeField10 = gJChronology2.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField11 = gJChronology2.dayOfWeek();
        org.joda.time.DurationField durationField12 = gJChronology2.eras();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField12, durationField3, and durationField6", !(durationField12.compareTo(durationField3) == 0) || (Math.signum(durationField12.compareTo(durationField6)) == Math.signum(durationField3.compareTo(durationField6))));
    }

    @Test
    public void test1513() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1513");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = gJChronology2.halfdays();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.millisOfDay();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.minuteOfDay();
        org.joda.time.DurationField durationField6 = gJChronology2.centuries();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology2.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField8 = gJChronology2.year();
        org.joda.time.DurationField durationField9 = gJChronology2.weekyears();
        org.joda.time.DateTimeField dateTimeField10 = gJChronology2.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField11 = gJChronology2.dayOfMonth();
        org.joda.time.DurationField durationField12 = gJChronology2.eras();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField12, durationField3, and durationField6", !(durationField12.compareTo(durationField3) == 0) || (Math.signum(durationField12.compareTo(durationField6)) == Math.signum(durationField3.compareTo(durationField6))));
    }

    @Test
    public void test1514() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1514");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        boolean boolean2 = instant1.isEqualNow();
        java.lang.String str3 = instant1.toString();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.MutableDateTime mutableDateTime5 = instant1.toMutableDateTime(chronology4);
        org.joda.time.MutableDateTime mutableDateTime6 = instant1.toMutableDateTime();
        org.joda.time.MutableDateTime mutableDateTime7 = instant1.toMutableDateTime();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = null;
        java.lang.String str9 = instant1.toString(dateTimeFormatter8);
        org.joda.time.Instant instant11 = instant1.plus(60000L);
        boolean boolean12 = instant11.isEqualNow();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and mutableDateTime5", (instant1.compareTo(mutableDateTime5) == 0) == instant1.equals(mutableDateTime5));
    }

    @Test
    public void test1515() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1515");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forTimeZone(timeZone2);
        org.joda.time.chrono.GJChronology gJChronology4 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone3);
        org.joda.time.DateTimeField dateTimeField5 = gJChronology4.millisOfSecond();
        int int6 = instant1.get(dateTimeField5);
        boolean boolean7 = instant1.isEqualNow();
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.Instant instant10 = instant1.withDurationAdded(readableDuration8, (int) (short) 0);
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.Instant instant12 = instant1.plus(readableDuration11);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = null;
        java.lang.String str14 = instant1.toString(dateTimeFormatter13);
        java.util.TimeZone timeZone15 = null;
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forTimeZone(timeZone15);
        org.joda.time.chrono.GJChronology gJChronology17 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone16);
        org.joda.time.DateTimeField dateTimeField18 = gJChronology17.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField19 = gJChronology17.weekyearOfCentury();
        org.joda.time.Instant instant20 = gJChronology17.getGregorianCutover();
        org.joda.time.Instant instant22 = instant20.withMillis(0L);
        org.joda.time.Instant instant24 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone25 = null;
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forTimeZone(timeZone25);
        org.joda.time.chrono.GJChronology gJChronology27 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone26);
        org.joda.time.DateTimeField dateTimeField28 = gJChronology27.millisOfSecond();
        int int29 = instant24.get(dateTimeField28);
        org.joda.time.Instant instant31 = instant24.plus(0L);
        int int32 = instant22.compareTo((org.joda.time.ReadableInstant) instant31);
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = null;
        boolean boolean34 = instant31.isSupported(dateTimeFieldType33);
        org.joda.time.Instant instant36 = new org.joda.time.Instant(52L);
        boolean boolean37 = instant36.isEqualNow();
        org.joda.time.ReadableDuration readableDuration38 = null;
        org.joda.time.Instant instant39 = instant36.plus(readableDuration38);
        int int40 = instant31.compareTo((org.joda.time.ReadableInstant) instant36);
        int int41 = instant1.compareTo((org.joda.time.ReadableInstant) instant36);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter42 = null;
        java.lang.String str43 = instant36.toString(dateTimeFormatter42);
        org.joda.time.DateTime dateTime44 = instant36.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone45 = null;
        org.joda.time.Instant instant47 = new org.joda.time.Instant(4320000100L);
        java.util.TimeZone timeZone48 = null;
        org.joda.time.DateTimeZone dateTimeZone49 = org.joda.time.DateTimeZone.forTimeZone(timeZone48);
        java.lang.String str51 = dateTimeZone49.getNameKey((long) 100);
        boolean boolean52 = dateTimeZone49.isFixed();
        java.util.Locale locale56 = new java.util.Locale("DurationField[halfdays]", "\u82f1\u6587");
        java.lang.String str57 = dateTimeZone49.getName((long) (short) 10, locale56);
        org.joda.time.Instant instant59 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone60 = null;
        org.joda.time.DateTimeZone dateTimeZone61 = org.joda.time.DateTimeZone.forTimeZone(timeZone60);
        org.joda.time.chrono.GJChronology gJChronology62 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone61);
        org.joda.time.DateTimeField dateTimeField63 = gJChronology62.millisOfSecond();
        int int64 = instant59.get(dateTimeField63);
        org.joda.time.Chronology chronology65 = instant59.getChronology();
        org.joda.time.chrono.GJChronology gJChronology66 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone49, (org.joda.time.ReadableInstant) instant59);
        org.joda.time.Instant instant69 = instant59.withDurationAdded(4320000001L, 432086114);
        int int70 = instant47.compareTo((org.joda.time.ReadableInstant) instant69);
        org.joda.time.chrono.GJChronology gJChronology71 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone45, (org.joda.time.ReadableInstant) instant47);
        org.joda.time.Instant instant73 = instant47.minus((long) 73048);
        boolean boolean74 = instant36.isEqual((org.joda.time.ReadableInstant) instant47);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and dateTime44", (instant1.compareTo(dateTime44) == 0) == instant1.equals(dateTime44));
    }

    @Test
    public void test1516() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1516");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        long long6 = dateTimeZone1.convertLocalToUTC((long) (byte) -1, true, 0L);
        boolean boolean8 = dateTimeZone1.equals((java.lang.Object) true);
        org.joda.time.chrono.GJChronology gJChronology9 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        boolean boolean11 = dateTimeZone1.isStandardOffset(43200100L);
        java.util.Locale locale15 = new java.util.Locale("UTC", "zh_TW");
        java.util.Locale locale16 = java.util.Locale.CHINESE;
        boolean boolean17 = locale16.hasExtensions();
        java.util.Locale.setDefault(locale16);
        java.lang.String str19 = locale15.getDisplayLanguage(locale16);
        java.lang.String str20 = locale16.getVariant();
        java.lang.String str21 = locale16.getCountry();
        java.util.Locale locale24 = new java.util.Locale("UTC", "zh_TW");
        java.util.Locale locale25 = java.util.Locale.CHINESE;
        boolean boolean26 = locale25.hasExtensions();
        java.util.Locale.setDefault(locale25);
        java.lang.String str28 = locale24.getDisplayLanguage(locale25);
        java.lang.String str29 = locale25.getVariant();
        java.lang.String str30 = locale16.getDisplayName(locale25);
        java.lang.String str31 = dateTimeZone1.getShortName((-2208729599948L), locale25);
        java.lang.String str33 = dateTimeZone1.getNameKey((long) 432000001);
        org.joda.time.Instant instant35 = new org.joda.time.Instant(52L);
        boolean boolean36 = instant35.isEqualNow();
        java.lang.String str37 = instant35.toString();
        java.lang.String str38 = instant35.toString();
        org.joda.time.Instant instant41 = instant35.withDurationAdded(115200000L, (int) (short) 1);
        java.util.TimeZone timeZone42 = null;
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.forTimeZone(timeZone42);
        java.lang.String str45 = dateTimeZone43.getNameKey((long) 100);
        boolean boolean46 = dateTimeZone43.isFixed();
        org.joda.time.DateTime dateTime47 = instant35.toDateTime(dateTimeZone43);
        org.joda.time.chrono.GJChronology gJChronology48 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1, (org.joda.time.ReadableInstant) instant35);
        int int49 = gJChronology48.getMinimumDaysInFirstWeek();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant35 and dateTime47", (instant35.compareTo(dateTime47) == 0) == instant35.equals(dateTime47));
    }

    @Test
    public void test1517() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1517");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forTimeZone(timeZone2);
        org.joda.time.chrono.GJChronology gJChronology4 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone3);
        org.joda.time.DateTimeField dateTimeField5 = gJChronology4.millisOfSecond();
        int int6 = instant1.get(dateTimeField5);
        boolean boolean7 = instant1.isEqualNow();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = null;
        java.lang.String str9 = instant1.toString(dateTimeFormatter8);
        boolean boolean10 = instant1.isAfterNow();
        org.joda.time.Instant instant12 = instant1.minus(43201764L);
        org.joda.time.Instant instant14 = instant12.plus(7816188L);
        org.joda.time.Instant instant16 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone17 = null;
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forTimeZone(timeZone17);
        org.joda.time.chrono.GJChronology gJChronology19 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone18);
        org.joda.time.DateTimeField dateTimeField20 = gJChronology19.millisOfSecond();
        int int21 = instant16.get(dateTimeField20);
        org.joda.time.Instant instant23 = instant16.plus(0L);
        org.joda.time.Instant instant24 = instant23.toInstant();
        org.joda.time.Instant instant26 = new org.joda.time.Instant(52L);
        boolean boolean27 = instant26.isEqualNow();
        java.lang.String str28 = instant26.toString();
        java.lang.String str29 = instant26.toString();
        org.joda.time.Instant instant31 = new org.joda.time.Instant(52L);
        boolean boolean32 = instant31.isEqualNow();
        org.joda.time.ReadableDuration readableDuration33 = null;
        org.joda.time.Instant instant34 = instant31.plus(readableDuration33);
        boolean boolean35 = instant26.isBefore((org.joda.time.ReadableInstant) instant34);
        org.joda.time.Instant instant37 = instant26.minus((long) 0);
        int int38 = instant23.compareTo((org.joda.time.ReadableInstant) instant26);
        org.joda.time.DateTime dateTime39 = instant23.toDateTimeISO();
        org.joda.time.Instant instant41 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone42 = null;
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.forTimeZone(timeZone42);
        org.joda.time.chrono.GJChronology gJChronology44 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone43);
        org.joda.time.DateTimeField dateTimeField45 = gJChronology44.millisOfSecond();
        int int46 = instant41.get(dateTimeField45);
        org.joda.time.Instant instant48 = instant41.plus(0L);
        boolean boolean49 = dateTime39.isAfter((org.joda.time.ReadableInstant) instant41);
        boolean boolean50 = instant12.isBefore((org.joda.time.ReadableInstant) dateTime39);
        org.joda.time.DateTimeZone dateTimeZone51 = dateTime39.getZone();
        org.joda.time.Instant instant53 = new org.joda.time.Instant(52L);
        boolean boolean54 = instant53.isEqualNow();
        java.lang.String str55 = instant53.toString();
        java.util.TimeZone timeZone56 = null;
        org.joda.time.DateTimeZone dateTimeZone57 = org.joda.time.DateTimeZone.forTimeZone(timeZone56);
        org.joda.time.chrono.GJChronology gJChronology58 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone57);
        java.util.Locale locale60 = new java.util.Locale("hi!");
        java.lang.String str61 = locale60.getCountry();
        java.util.Locale locale62 = java.util.Locale.getDefault();
        java.lang.String str63 = locale62.getDisplayName();
        java.lang.String str64 = locale60.getDisplayScript(locale62);
        boolean boolean65 = dateTimeZone57.equals((java.lang.Object) locale62);
        int int67 = dateTimeZone57.getOffsetFromLocal((long) (short) 10);
        java.util.TimeZone timeZone68 = null;
        org.joda.time.DateTimeZone dateTimeZone69 = org.joda.time.DateTimeZone.forTimeZone(timeZone68);
        org.joda.time.chrono.GJChronology gJChronology70 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone69);
        org.joda.time.DateTimeField dateTimeField71 = gJChronology70.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField72 = gJChronology70.weekyearOfCentury();
        org.joda.time.Instant instant73 = gJChronology70.getGregorianCutover();
        org.joda.time.Instant instant75 = instant73.withMillis(0L);
        org.joda.time.Instant instant77 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone78 = null;
        org.joda.time.DateTimeZone dateTimeZone79 = org.joda.time.DateTimeZone.forTimeZone(timeZone78);
        org.joda.time.chrono.GJChronology gJChronology80 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone79);
        org.joda.time.DateTimeField dateTimeField81 = gJChronology80.millisOfSecond();
        int int82 = instant77.get(dateTimeField81);
        org.joda.time.Instant instant84 = instant77.plus(0L);
        int int85 = instant75.compareTo((org.joda.time.ReadableInstant) instant84);
        org.joda.time.DateTimeFieldType dateTimeFieldType86 = null;
        boolean boolean87 = instant84.isSupported(dateTimeFieldType86);
        int int88 = dateTimeZone57.getOffset((org.joda.time.ReadableInstant) instant84);
        boolean boolean89 = instant53.isAfter((org.joda.time.ReadableInstant) instant84);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter90 = null;
        java.lang.String str91 = instant53.toString(dateTimeFormatter90);
        boolean boolean93 = instant53.isBefore((-60479999900000L));
        org.joda.time.Instant instant95 = instant53.minus(747221287996800000L);
        boolean boolean96 = dateTime39.isEqual((org.joda.time.ReadableInstant) instant53);
        boolean boolean97 = instant53.isBeforeNow();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and dateTime39", (instant1.compareTo(dateTime39) == 0) == instant1.equals(dateTime39));
    }

    @Test
    public void test1518() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1518");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField3 = gJChronology2.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.minuteOfHour();
        org.joda.time.DurationField durationField6 = gJChronology2.halfdays();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology2.millisOfSecond();
        org.joda.time.DurationField durationField8 = gJChronology2.eras();
        org.joda.time.DurationField durationField9 = gJChronology2.centuries();
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField6 and durationField8", Math.signum(durationField6.compareTo(durationField8)) == -Math.signum(durationField8.compareTo(durationField6)));
    }

    @Test
    public void test1519() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1519");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        boolean boolean2 = instant1.isEqualNow();
        org.joda.time.ReadableDuration readableDuration3 = null;
        org.joda.time.Instant instant4 = instant1.plus(readableDuration3);
        long long5 = instant1.getMillis();
        java.lang.String str6 = instant1.toString();
        org.joda.time.Instant instant7 = instant1.toInstant();
        java.util.TimeZone timeZone8 = null;
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forTimeZone(timeZone8);
        java.lang.String str11 = dateTimeZone9.getNameKey((long) 100);
        long long14 = dateTimeZone9.convertLocalToUTC((-2246399965L), true);
        org.joda.time.MutableDateTime mutableDateTime15 = instant7.toMutableDateTime(dateTimeZone9);
        long long17 = dateTimeZone9.previousTransition(20L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and mutableDateTime15", (instant1.compareTo(mutableDateTime15) == 0) == instant1.equals(mutableDateTime15));
    }

    @Test
    public void test1520() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1520");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        boolean boolean2 = instant1.isEqualNow();
        org.joda.time.ReadableDuration readableDuration3 = null;
        org.joda.time.Instant instant4 = instant1.plus(readableDuration3);
        long long5 = instant1.getMillis();
        java.lang.String str6 = instant1.toString();
        boolean boolean8 = instant1.isAfter((long) (-1));
        java.util.TimeZone timeZone9 = null;
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forTimeZone(timeZone9);
        org.joda.time.chrono.GJChronology gJChronology11 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone10);
        java.util.Locale locale13 = new java.util.Locale("hi!");
        java.lang.String str14 = locale13.getCountry();
        java.util.Locale locale15 = java.util.Locale.getDefault();
        java.lang.String str16 = locale15.getDisplayName();
        java.lang.String str17 = locale13.getDisplayScript(locale15);
        boolean boolean18 = dateTimeZone10.equals((java.lang.Object) locale15);
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetMillis((int) '4');
        java.util.TimeZone timeZone21 = dateTimeZone20.toTimeZone();
        long long24 = dateTimeZone20.adjustOffset((long) 0, false);
        int int26 = dateTimeZone20.getOffsetFromLocal((-26438399999L));
        long long28 = dateTimeZone10.getMillisKeepLocal(dateTimeZone20, (long) (byte) 10);
        org.joda.time.Instant instant30 = new org.joda.time.Instant(52L);
        boolean boolean31 = instant30.isEqualNow();
        org.joda.time.ReadableDuration readableDuration32 = null;
        org.joda.time.Instant instant33 = instant30.plus(readableDuration32);
        long long34 = instant30.getMillis();
        java.lang.String str35 = instant30.toString();
        org.joda.time.Instant instant36 = instant30.toInstant();
        org.joda.time.ReadableDuration readableDuration37 = null;
        org.joda.time.Instant instant39 = instant30.withDurationAdded(readableDuration37, (int) 'x');
        java.util.TimeZone timeZone40 = null;
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.forTimeZone(timeZone40);
        org.joda.time.chrono.GJChronology gJChronology42 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone41);
        org.joda.time.DateTimeField dateTimeField43 = gJChronology42.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField44 = gJChronology42.yearOfCentury();
        int int45 = instant39.get(dateTimeField44);
        org.joda.time.chrono.GJChronology gJChronology46 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone20, (org.joda.time.ReadableInstant) instant39);
        org.joda.time.DateTimeField dateTimeField47 = gJChronology46.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField48 = gJChronology46.era();
        org.joda.time.MutableDateTime mutableDateTime49 = instant1.toMutableDateTime((org.joda.time.Chronology) gJChronology46);
        java.util.TimeZone timeZone50 = null;
        org.joda.time.DateTimeZone dateTimeZone51 = org.joda.time.DateTimeZone.forTimeZone(timeZone50);
        org.joda.time.chrono.GJChronology gJChronology52 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone51);
        org.joda.time.DateTimeField dateTimeField53 = gJChronology52.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField54 = gJChronology52.millisOfSecond();
        org.joda.time.DurationField durationField55 = gJChronology52.days();
        org.joda.time.DateTimeField dateTimeField56 = gJChronology52.minuteOfHour();
        org.joda.time.DurationField durationField57 = gJChronology52.centuries();
        org.joda.time.MutableDateTime mutableDateTime58 = mutableDateTime49.toMutableDateTime((org.joda.time.Chronology) gJChronology52);
        int int59 = gJChronology52.getMinimumDaysInFirstWeek();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and mutableDateTime49", (instant1.compareTo(mutableDateTime49) == 0) == instant1.equals(mutableDateTime49));
    }

    @Test
    public void test1521() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1521");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = gJChronology2.halfdays();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.millisOfDay();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.minuteOfDay();
        org.joda.time.DurationField durationField6 = gJChronology2.centuries();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology2.dayOfYear();
        java.lang.String str8 = gJChronology2.toString();
        org.joda.time.DateTimeField dateTimeField9 = gJChronology2.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone10 = gJChronology2.getZone();
        org.joda.time.chrono.GJChronology gJChronology11 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone10);
        org.joda.time.DateTimeField dateTimeField12 = gJChronology11.clockhourOfDay();
        org.joda.time.DurationField durationField13 = gJChronology11.millis();
        org.joda.time.DateTimeField dateTimeField14 = gJChronology11.hourOfHalfday();
        org.joda.time.DurationField durationField15 = gJChronology11.centuries();
        org.joda.time.Instant instant17 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone18 = null;
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forTimeZone(timeZone18);
        org.joda.time.chrono.GJChronology gJChronology20 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone19);
        org.joda.time.DateTimeField dateTimeField21 = gJChronology20.millisOfSecond();
        int int22 = instant17.get(dateTimeField21);
        org.joda.time.Instant instant24 = instant17.plus(0L);
        org.joda.time.Instant instant25 = instant24.toInstant();
        org.joda.time.Instant instant27 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone28 = null;
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forTimeZone(timeZone28);
        org.joda.time.chrono.GJChronology gJChronology30 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone29);
        org.joda.time.DateTimeField dateTimeField31 = gJChronology30.millisOfSecond();
        int int32 = instant27.get(dateTimeField31);
        org.joda.time.Instant instant34 = instant27.plus(0L);
        org.joda.time.Instant instant35 = instant34.toInstant();
        boolean boolean36 = instant25.isEqual((org.joda.time.ReadableInstant) instant35);
        org.joda.time.Instant instant38 = new org.joda.time.Instant(52L);
        boolean boolean39 = instant38.isEqualNow();
        org.joda.time.ReadableDuration readableDuration40 = null;
        org.joda.time.Instant instant41 = instant38.plus(readableDuration40);
        org.joda.time.Instant instant43 = new org.joda.time.Instant(52L);
        org.joda.time.Instant instant45 = instant43.withMillis((long) 'u');
        boolean boolean46 = instant38.isBefore((org.joda.time.ReadableInstant) instant43);
        org.joda.time.Instant instant47 = instant43.toInstant();
        org.joda.time.DateTime dateTime48 = instant43.toDateTime();
        boolean boolean49 = instant35.isBefore((org.joda.time.ReadableInstant) instant43);
        org.joda.time.DateTimeZone dateTimeZone50 = instant43.getZone();
        org.joda.time.Chronology chronology51 = gJChronology11.withZone(dateTimeZone50);
        org.joda.time.DurationField durationField52 = gJChronology11.months();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant17 and dateTime48", (instant17.compareTo(dateTime48) == 0) == instant17.equals(dateTime48));
    }

    @Test
    public void test1522() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1522");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField3 = gJChronology2.millisOfSecond();
        org.joda.time.DurationField durationField4 = gJChronology2.millis();
        org.joda.time.DurationField durationField5 = gJChronology2.weeks();
        org.joda.time.DurationField durationField6 = gJChronology2.days();
        org.joda.time.DurationField durationField7 = gJChronology2.months();
        org.joda.time.Chronology chronology8 = gJChronology2.withUTC();
        org.joda.time.DateTimeZone dateTimeZone9 = gJChronology2.getZone();
        org.joda.time.DurationField durationField10 = gJChronology2.eras();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField10, durationField4, and durationField5", !(durationField10.compareTo(durationField4) == 0) || (Math.signum(durationField10.compareTo(durationField5)) == Math.signum(durationField4.compareTo(durationField5))));
    }

    @Test
    public void test1523() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1523");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        boolean boolean2 = instant1.isEqualNow();
        org.joda.time.ReadableDuration readableDuration3 = null;
        org.joda.time.Instant instant4 = instant1.plus(readableDuration3);
        long long5 = instant1.getMillis();
        java.lang.String str6 = instant1.toString();
        org.joda.time.Instant instant7 = instant1.toInstant();
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.Instant instant10 = instant1.withDurationAdded(readableDuration8, (int) 'x');
        org.joda.time.DateTimeZone dateTimeZone11 = instant1.getZone();
        java.util.TimeZone timeZone12 = null;
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forTimeZone(timeZone12);
        org.joda.time.chrono.GJChronology gJChronology14 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone13);
        org.joda.time.DateTimeField dateTimeField15 = gJChronology14.millisOfSecond();
        org.joda.time.DurationField durationField16 = gJChronology14.millis();
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        long long20 = gJChronology14.add(readablePeriod17, (long) 'a', (int) '4');
        org.joda.time.DateTimeField dateTimeField21 = gJChronology14.clockhourOfDay();
        org.joda.time.MutableDateTime mutableDateTime22 = instant1.toMutableDateTime((org.joda.time.Chronology) gJChronology14);
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forOffsetMillis((int) '4');
        java.util.TimeZone timeZone25 = dateTimeZone24.toTimeZone();
        long long28 = dateTimeZone24.adjustOffset((long) 0, false);
        int int30 = dateTimeZone24.getOffsetFromLocal((-26438399999L));
        java.util.TimeZone timeZone31 = dateTimeZone24.toTimeZone();
        java.lang.String str32 = dateTimeZone24.getID();
        java.util.Locale locale34 = null;
        java.lang.String str35 = dateTimeZone24.getShortName(115200000L, locale34);
        org.joda.time.MutableDateTime mutableDateTime36 = mutableDateTime22.toMutableDateTime(dateTimeZone24);
        int int38 = dateTimeZone24.getStandardOffset(4906220186429268L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and mutableDateTime22", (instant1.compareTo(mutableDateTime22) == 0) == instant1.equals(mutableDateTime22));
    }

    @Test
    public void test1524() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1524");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField3 = gJChronology2.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.weekyearOfCentury();
        org.joda.time.Instant instant5 = gJChronology2.getGregorianCutover();
        org.joda.time.Instant instant7 = instant5.withMillis(0L);
        org.joda.time.Chronology chronology8 = instant7.getChronology();
        java.util.TimeZone timeZone9 = null;
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forTimeZone(timeZone9);
        org.joda.time.chrono.GJChronology gJChronology11 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone10);
        org.joda.time.DateTimeField dateTimeField12 = gJChronology11.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField13 = gJChronology11.weekyearOfCentury();
        org.joda.time.Instant instant14 = gJChronology11.getGregorianCutover();
        org.joda.time.Instant instant16 = instant14.withMillis(0L);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.MutableDateTime mutableDateTime18 = instant16.toMutableDateTime(dateTimeZone17);
        boolean boolean19 = instant16.isAfterNow();
        org.joda.time.MutableDateTime mutableDateTime20 = instant16.toMutableDateTimeISO();
        boolean boolean21 = instant7.isBefore((org.joda.time.ReadableInstant) mutableDateTime20);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant16 and mutableDateTime18", (instant16.compareTo(mutableDateTime18) == 0) == instant16.equals(mutableDateTime18));
    }

    @Test
    public void test1525() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1525");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField3 = gJChronology2.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.weekyearOfCentury();
        org.joda.time.Instant instant5 = gJChronology2.getGregorianCutover();
        org.joda.time.Instant instant7 = instant5.withMillis(0L);
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.MutableDateTime mutableDateTime9 = instant7.toMutableDateTime(dateTimeZone8);
        boolean boolean10 = instant7.isAfterNow();
        org.joda.time.Instant instant12 = new org.joda.time.Instant(52L);
        boolean boolean13 = instant12.isEqualNow();
        boolean boolean15 = instant12.isEqual(0L);
        org.joda.time.Instant instant17 = new org.joda.time.Instant(52L);
        boolean boolean18 = instant17.isEqualNow();
        java.lang.String str19 = instant17.toString();
        java.util.TimeZone timeZone20 = null;
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forTimeZone(timeZone20);
        org.joda.time.chrono.GJChronology gJChronology22 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone21);
        java.util.Locale locale24 = new java.util.Locale("hi!");
        java.lang.String str25 = locale24.getCountry();
        java.util.Locale locale26 = java.util.Locale.getDefault();
        java.lang.String str27 = locale26.getDisplayName();
        java.lang.String str28 = locale24.getDisplayScript(locale26);
        boolean boolean29 = dateTimeZone21.equals((java.lang.Object) locale26);
        int int31 = dateTimeZone21.getOffsetFromLocal((long) (short) 10);
        java.util.TimeZone timeZone32 = null;
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.forTimeZone(timeZone32);
        org.joda.time.chrono.GJChronology gJChronology34 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone33);
        org.joda.time.DateTimeField dateTimeField35 = gJChronology34.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField36 = gJChronology34.weekyearOfCentury();
        org.joda.time.Instant instant37 = gJChronology34.getGregorianCutover();
        org.joda.time.Instant instant39 = instant37.withMillis(0L);
        org.joda.time.Instant instant41 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone42 = null;
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.forTimeZone(timeZone42);
        org.joda.time.chrono.GJChronology gJChronology44 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone43);
        org.joda.time.DateTimeField dateTimeField45 = gJChronology44.millisOfSecond();
        int int46 = instant41.get(dateTimeField45);
        org.joda.time.Instant instant48 = instant41.plus(0L);
        int int49 = instant39.compareTo((org.joda.time.ReadableInstant) instant48);
        org.joda.time.DateTimeFieldType dateTimeFieldType50 = null;
        boolean boolean51 = instant48.isSupported(dateTimeFieldType50);
        int int52 = dateTimeZone21.getOffset((org.joda.time.ReadableInstant) instant48);
        boolean boolean53 = instant17.isAfter((org.joda.time.ReadableInstant) instant48);
        org.joda.time.ReadableDuration readableDuration54 = null;
        org.joda.time.Instant instant55 = instant17.minus(readableDuration54);
        org.joda.time.Instant instant56 = instant55.toInstant();
        java.util.TimeZone timeZone57 = null;
        org.joda.time.DateTimeZone dateTimeZone58 = org.joda.time.DateTimeZone.forTimeZone(timeZone57);
        java.lang.String str60 = dateTimeZone58.getNameKey((long) 100);
        boolean boolean61 = dateTimeZone58.isFixed();
        org.joda.time.chrono.GJChronology gJChronology62 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone58);
        int int63 = gJChronology62.getMinimumDaysInFirstWeek();
        org.joda.time.DateTimeField dateTimeField64 = gJChronology62.clockhourOfDay();
        boolean boolean65 = instant55.equals((java.lang.Object) dateTimeField64);
        org.joda.time.DateTimeFieldType dateTimeFieldType66 = null;
        boolean boolean67 = instant55.isSupported(dateTimeFieldType66);
        boolean boolean68 = instant12.isAfter((org.joda.time.ReadableInstant) instant55);
        boolean boolean70 = instant55.isEqual(191376144L);
        boolean boolean71 = instant7.isAfter((org.joda.time.ReadableInstant) instant55);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime9 and instant39", (mutableDateTime9.compareTo(instant39) == 0) == mutableDateTime9.equals(instant39));
    }

    @Test
    public void test1526() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1526");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        boolean boolean2 = instant1.isEqualNow();
        org.joda.time.ReadableDuration readableDuration3 = null;
        org.joda.time.Instant instant4 = instant1.plus(readableDuration3);
        long long5 = instant1.getMillis();
        java.lang.String str6 = instant1.toString();
        org.joda.time.Instant instant7 = instant1.toInstant();
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.Instant instant10 = instant1.withDurationAdded(readableDuration8, (int) 'x');
        org.joda.time.Instant instant11 = instant1.toInstant();
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.Instant instant14 = instant11.withDurationAdded(readableDuration12, (int) 'u');
        org.joda.time.Chronology chronology15 = instant14.getChronology();
        org.joda.time.MutableDateTime mutableDateTime16 = instant14.toMutableDateTime();
        org.joda.time.Instant instant18 = new org.joda.time.Instant(52L);
        boolean boolean19 = instant18.isEqualNow();
        java.lang.String str20 = instant18.toString();
        java.lang.String str21 = instant18.toString();
        org.joda.time.Instant instant24 = instant18.withDurationAdded(115200000L, (int) (short) 1);
        org.joda.time.Instant instant25 = instant18.toInstant();
        org.joda.time.Instant instant27 = instant25.minus(4492800100L);
        java.util.TimeZone timeZone28 = null;
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forTimeZone(timeZone28);
        org.joda.time.chrono.GJChronology gJChronology30 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone29);
        org.joda.time.DurationField durationField31 = gJChronology30.halfdays();
        org.joda.time.DateTimeField dateTimeField32 = gJChronology30.millisOfDay();
        org.joda.time.DateTimeField dateTimeField33 = gJChronology30.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField34 = gJChronology30.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone35 = gJChronology30.getZone();
        java.util.TimeZone timeZone36 = null;
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.forTimeZone(timeZone36);
        org.joda.time.chrono.GJChronology gJChronology38 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone37);
        org.joda.time.DurationField durationField39 = gJChronology38.halfdays();
        java.util.TimeZone timeZone40 = null;
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.forTimeZone(timeZone40);
        org.joda.time.chrono.GJChronology gJChronology42 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone41);
        long long46 = dateTimeZone41.convertLocalToUTC((long) (byte) -1, true, 0L);
        boolean boolean48 = dateTimeZone41.equals((java.lang.Object) true);
        org.joda.time.Chronology chronology49 = gJChronology38.withZone(dateTimeZone41);
        org.joda.time.LocalDateTime localDateTime50 = null;
        boolean boolean51 = dateTimeZone41.isLocalDateTimeGap(localDateTime50);
        boolean boolean52 = dateTimeZone41.isFixed();
        org.joda.time.LocalDateTime localDateTime53 = null;
        boolean boolean54 = dateTimeZone41.isLocalDateTimeGap(localDateTime53);
        long long56 = dateTimeZone35.getMillisKeepLocal(dateTimeZone41, (long) 1431201);
        org.joda.time.DateTime dateTime57 = instant25.toDateTime(dateTimeZone41);
        boolean boolean58 = instant14.isEqual((org.joda.time.ReadableInstant) dateTime57);
        org.joda.time.Instant instant59 = org.joda.time.Instant.now();
        java.util.TimeZone timeZone60 = null;
        org.joda.time.DateTimeZone dateTimeZone61 = org.joda.time.DateTimeZone.forTimeZone(timeZone60);
        org.joda.time.chrono.GJChronology gJChronology62 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone61);
        org.joda.time.DurationField durationField63 = gJChronology62.halfdays();
        org.joda.time.DateTimeField dateTimeField64 = gJChronology62.millisOfDay();
        org.joda.time.DateTimeField dateTimeField65 = gJChronology62.halfdayOfDay();
        int int66 = instant59.get(dateTimeField65);
        org.joda.time.Instant instant68 = instant59.minus(4156171L);
        boolean boolean70 = instant68.isAfter((-1000L));
        org.joda.time.Instant instant72 = instant68.plus(1247262110179199981L);
        org.joda.time.DateTime dateTime73 = instant72.toDateTime();
        int int74 = dateTime57.compareTo((org.joda.time.ReadableInstant) instant72);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and mutableDateTime16", (instant1.compareTo(mutableDateTime16) == 0) == instant1.equals(mutableDateTime16));
    }

    @Test
    public void test1527() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1527");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = gJChronology2.halfdays();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.millisOfDay();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.monthOfYear();
        org.joda.time.Instant instant6 = gJChronology2.getGregorianCutover();
        java.util.TimeZone timeZone7 = null;
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forTimeZone(timeZone7);
        org.joda.time.chrono.GJChronology gJChronology9 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone8);
        org.joda.time.DurationField durationField10 = gJChronology9.halfdays();
        org.joda.time.DateTimeField dateTimeField11 = gJChronology9.millisOfDay();
        org.joda.time.DateTimeField dateTimeField12 = gJChronology9.minuteOfDay();
        org.joda.time.DurationField durationField13 = gJChronology9.centuries();
        org.joda.time.DateTimeField dateTimeField14 = gJChronology9.dayOfYear();
        java.lang.String str15 = gJChronology9.toString();
        org.joda.time.DateTimeField dateTimeField16 = gJChronology9.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone17 = gJChronology9.getZone();
        org.joda.time.chrono.GJChronology gJChronology18 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone17);
        org.joda.time.MutableDateTime mutableDateTime19 = instant6.toMutableDateTime(dateTimeZone17);
        boolean boolean20 = dateTimeZone17.isFixed();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant6 and mutableDateTime19", (instant6.compareTo(mutableDateTime19) == 0) == instant6.equals(mutableDateTime19));
    }

    @Test
    public void test1528() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1528");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField3 = gJChronology2.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.weekyearOfCentury();
        org.joda.time.Instant instant5 = gJChronology2.getGregorianCutover();
        org.joda.time.Instant instant7 = instant5.withMillis(0L);
        org.joda.time.Instant instant9 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone10 = null;
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forTimeZone(timeZone10);
        org.joda.time.chrono.GJChronology gJChronology12 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone11);
        org.joda.time.DateTimeField dateTimeField13 = gJChronology12.millisOfSecond();
        int int14 = instant9.get(dateTimeField13);
        org.joda.time.Instant instant16 = instant9.plus(0L);
        int int17 = instant7.compareTo((org.joda.time.ReadableInstant) instant16);
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = null;
        boolean boolean19 = instant16.isSupported(dateTimeFieldType18);
        org.joda.time.Instant instant21 = instant16.minus((long) (short) 10);
        org.joda.time.ReadableDuration readableDuration22 = null;
        org.joda.time.Instant instant23 = instant21.minus(readableDuration22);
        boolean boolean24 = instant21.isAfterNow();
        org.joda.time.MutableDateTime mutableDateTime25 = instant21.toMutableDateTime();
        org.joda.time.Instant instant27 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone28 = null;
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forTimeZone(timeZone28);
        org.joda.time.chrono.GJChronology gJChronology30 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone29);
        org.joda.time.DateTimeField dateTimeField31 = gJChronology30.millisOfSecond();
        int int32 = instant27.get(dateTimeField31);
        boolean boolean33 = instant27.isEqualNow();
        org.joda.time.tz.NameProvider nameProvider34 = org.joda.time.DateTimeZone.getNameProvider();
        org.joda.time.DateTimeZone.setNameProvider(nameProvider34);
        org.joda.time.DateTimeZone.setNameProvider(nameProvider34);
        boolean boolean37 = instant27.equals((java.lang.Object) nameProvider34);
        org.joda.time.Instant instant39 = new org.joda.time.Instant(52L);
        boolean boolean40 = instant39.isEqualNow();
        java.lang.String str41 = instant39.toString();
        org.joda.time.DateTimeZone dateTimeZone42 = instant39.getZone();
        org.joda.time.DateTime dateTime43 = instant27.toDateTime(dateTimeZone42);
        java.lang.String str44 = instant27.toString();
        org.joda.time.ReadableDuration readableDuration45 = null;
        org.joda.time.Instant instant46 = instant27.plus(readableDuration45);
        org.joda.time.Instant instant48 = instant46.plus(43200152L);
        org.joda.time.ReadableDuration readableDuration49 = null;
        org.joda.time.Instant instant50 = instant46.minus(readableDuration49);
        boolean boolean51 = instant21.isBefore((org.joda.time.ReadableInstant) instant50);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant21 and mutableDateTime25", (instant21.compareTo(mutableDateTime25) == 0) == instant21.equals(mutableDateTime25));
    }

    @Test
    public void test1529() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1529");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        long long6 = dateTimeZone1.convertLocalToUTC((long) (byte) -1, true, 0L);
        boolean boolean8 = dateTimeZone1.equals((java.lang.Object) true);
        org.joda.time.chrono.GJChronology gJChronology9 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        boolean boolean11 = dateTimeZone1.isStandardOffset(43200100L);
        java.util.Locale locale15 = new java.util.Locale("UTC", "zh_TW");
        java.util.Locale locale16 = java.util.Locale.CHINESE;
        boolean boolean17 = locale16.hasExtensions();
        java.util.Locale.setDefault(locale16);
        java.lang.String str19 = locale15.getDisplayLanguage(locale16);
        java.lang.String str20 = locale16.getVariant();
        java.lang.String str21 = locale16.getCountry();
        java.util.Locale locale24 = new java.util.Locale("UTC", "zh_TW");
        java.util.Locale locale25 = java.util.Locale.CHINESE;
        boolean boolean26 = locale25.hasExtensions();
        java.util.Locale.setDefault(locale25);
        java.lang.String str28 = locale24.getDisplayLanguage(locale25);
        java.lang.String str29 = locale25.getVariant();
        java.lang.String str30 = locale16.getDisplayName(locale25);
        java.lang.String str31 = dateTimeZone1.getShortName((-2208729599948L), locale25);
        java.lang.String str33 = dateTimeZone1.getNameKey((long) 432000001);
        org.joda.time.Instant instant35 = new org.joda.time.Instant(52L);
        boolean boolean36 = instant35.isEqualNow();
        java.lang.String str37 = instant35.toString();
        java.lang.String str38 = instant35.toString();
        org.joda.time.Instant instant41 = instant35.withDurationAdded(115200000L, (int) (short) 1);
        java.util.TimeZone timeZone42 = null;
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.forTimeZone(timeZone42);
        java.lang.String str45 = dateTimeZone43.getNameKey((long) 100);
        boolean boolean46 = dateTimeZone43.isFixed();
        org.joda.time.DateTime dateTime47 = instant35.toDateTime(dateTimeZone43);
        org.joda.time.chrono.GJChronology gJChronology48 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1, (org.joda.time.ReadableInstant) instant35);
        org.joda.time.Instant instant50 = new org.joda.time.Instant(52L);
        boolean boolean51 = instant50.isEqualNow();
        org.joda.time.ReadableDuration readableDuration52 = null;
        org.joda.time.Instant instant53 = instant50.plus(readableDuration52);
        long long54 = instant50.getMillis();
        java.lang.String str55 = instant50.toString();
        org.joda.time.Instant instant56 = instant50.toInstant();
        org.joda.time.ReadableDuration readableDuration57 = null;
        org.joda.time.Instant instant59 = instant50.withDurationAdded(readableDuration57, (int) 'x');
        long long60 = instant50.getMillis();
        boolean boolean61 = instant50.isAfterNow();
        boolean boolean62 = instant50.isAfterNow();
        boolean boolean64 = instant50.isBefore((-220870497598236L));
        org.joda.time.DateTimeZone dateTimeZone65 = instant50.getZone();
        long long67 = dateTimeZone1.getMillisKeepLocal(dateTimeZone65, (-26187053848164000L));
        java.lang.String str69 = dateTimeZone65.getNameKey(1155627L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant35 and dateTime47", (instant35.compareTo(dateTime47) == 0) == instant35.equals(dateTime47));
    }

    @Test
    public void test1530() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1530");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        boolean boolean2 = instant1.isEqualNow();
        java.lang.String str3 = instant1.toString();
        org.joda.time.Instant instant5 = new org.joda.time.Instant(52L);
        boolean boolean6 = instant5.isEqualNow();
        java.lang.String str7 = instant5.toString();
        java.lang.String str8 = instant5.toString();
        org.joda.time.Instant instant11 = instant5.withDurationAdded(115200000L, (int) (short) 1);
        int int12 = instant1.compareTo((org.joda.time.ReadableInstant) instant5);
        org.joda.time.MutableDateTime mutableDateTime13 = instant1.toMutableDateTime();
        org.joda.time.Instant instant15 = new org.joda.time.Instant(52L);
        boolean boolean16 = instant15.isEqualNow();
        java.lang.String str17 = instant15.toString();
        java.lang.String str18 = instant15.toString();
        org.joda.time.Instant instant21 = instant15.withDurationAdded(115200000L, (int) (short) 1);
        org.joda.time.Instant instant23 = instant15.withMillis((-6720000000L));
        org.joda.time.Instant instant25 = new org.joda.time.Instant(52L);
        boolean boolean26 = instant25.isEqualNow();
        org.joda.time.ReadableDuration readableDuration27 = null;
        org.joda.time.Instant instant28 = instant25.plus(readableDuration27);
        org.joda.time.Instant instant30 = new org.joda.time.Instant(52L);
        org.joda.time.Instant instant32 = instant30.withMillis((long) 'u');
        boolean boolean33 = instant25.isBefore((org.joda.time.ReadableInstant) instant30);
        org.joda.time.Instant instant36 = instant30.withDurationAdded(4320000000L, (int) 'u');
        org.joda.time.Chronology chronology37 = instant36.getChronology();
        boolean boolean38 = instant15.isAfter((org.joda.time.ReadableInstant) instant36);
        java.util.TimeZone timeZone39 = null;
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.forTimeZone(timeZone39);
        org.joda.time.chrono.GJChronology gJChronology41 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone40);
        org.joda.time.DateTimeField dateTimeField42 = gJChronology41.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField43 = gJChronology41.weekyear();
        org.joda.time.DurationField durationField44 = gJChronology41.centuries();
        org.joda.time.DateTimeField dateTimeField45 = gJChronology41.millisOfDay();
        org.joda.time.ReadablePeriod readablePeriod46 = null;
        long long49 = gJChronology41.add(readablePeriod46, (long) '4', (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField50 = gJChronology41.hourOfHalfday();
        org.joda.time.Chronology chronology51 = gJChronology41.withUTC();
        org.joda.time.DateTime dateTime52 = instant36.toDateTime(chronology51);
        java.util.TimeZone timeZone53 = null;
        org.joda.time.DateTimeZone dateTimeZone54 = org.joda.time.DateTimeZone.forTimeZone(timeZone53);
        org.joda.time.chrono.GJChronology gJChronology55 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone54);
        org.joda.time.DateTimeField dateTimeField56 = gJChronology55.millisOfSecond();
        org.joda.time.DurationField durationField57 = gJChronology55.millis();
        org.joda.time.DurationField durationField58 = gJChronology55.weeks();
        org.joda.time.DurationField durationField59 = gJChronology55.days();
        org.joda.time.DateTimeField dateTimeField60 = gJChronology55.year();
        org.joda.time.DateTimeField dateTimeField61 = gJChronology55.era();
        org.joda.time.MutableDateTime mutableDateTime62 = instant36.toMutableDateTime((org.joda.time.Chronology) gJChronology55);
        boolean boolean63 = mutableDateTime13.isAfter((org.joda.time.ReadableInstant) instant36);
        org.joda.time.Instant instant65 = instant36.withMillis((-6897600000L));
        org.joda.time.Instant instant67 = new org.joda.time.Instant(52L);
        boolean boolean68 = instant67.isEqualNow();
        org.joda.time.ReadableDuration readableDuration69 = null;
        org.joda.time.Instant instant70 = instant67.plus(readableDuration69);
        long long71 = instant67.getMillis();
        java.lang.Object obj72 = null;
        boolean boolean73 = instant67.equals(obj72);
        org.joda.time.Chronology chronology74 = instant67.getChronology();
        org.joda.time.Instant instant76 = instant67.withMillis(4315800000L);
        org.joda.time.Chronology chronology77 = instant76.getChronology();
        org.joda.time.DateTimeZone dateTimeZone78 = instant76.getZone();
        boolean boolean79 = instant36.isAfter((org.joda.time.ReadableInstant) instant76);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and mutableDateTime13", (instant1.compareTo(mutableDateTime13) == 0) == instant1.equals(mutableDateTime13));
    }

    @Test
    public void test1531() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1531");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = gJChronology2.years();
        java.util.TimeZone timeZone4 = null;
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forTimeZone(timeZone4);
        org.joda.time.chrono.GJChronology gJChronology6 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone5);
        org.joda.time.DurationField durationField7 = gJChronology6.halfdays();
        org.joda.time.DateTimeField dateTimeField8 = gJChronology6.millisOfDay();
        org.joda.time.DateTimeField dateTimeField9 = gJChronology6.minuteOfDay();
        org.joda.time.DurationField durationField10 = gJChronology6.centuries();
        java.util.TimeZone timeZone11 = null;
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forTimeZone(timeZone11);
        org.joda.time.chrono.GJChronology gJChronology13 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone12);
        org.joda.time.DurationField durationField14 = gJChronology13.halfdays();
        long long17 = durationField14.add((long) 100, 100L);
        boolean boolean18 = durationField14.isPrecise();
        int int19 = durationField10.compareTo(durationField14);
        boolean boolean20 = gJChronology2.equals((java.lang.Object) durationField10);
        org.joda.time.DurationField durationField21 = gJChronology2.weekyears();
        org.joda.time.DateTimeField dateTimeField22 = gJChronology2.millisOfDay();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on durationField3 and durationField21", (durationField3.compareTo(durationField21) == 0) == durationField3.equals(durationField21));
    }

    @Test
    public void test1532() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1532");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forTimeZone(timeZone2);
        org.joda.time.chrono.GJChronology gJChronology4 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone3);
        org.joda.time.DateTimeField dateTimeField5 = gJChronology4.millisOfSecond();
        int int6 = instant1.get(dateTimeField5);
        boolean boolean7 = instant1.isEqualNow();
        org.joda.time.DateTime dateTime8 = instant1.toDateTime();
        org.joda.time.Instant instant11 = instant1.withDurationAdded((long) 1431201, 1970);
        org.joda.time.Chronology chronology12 = instant1.getChronology();
        org.joda.time.DateTimeField dateTimeField13 = chronology12.yearOfCentury();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and dateTime8", (instant1.compareTo(dateTime8) == 0) == instant1.equals(dateTime8));
    }

    @Test
    public void test1533() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1533");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = gJChronology2.halfdays();
        long long7 = gJChronology2.add((long) 'a', (-1L), (int) (short) 0);
        long long11 = gJChronology2.add((long) (byte) 0, (long) '4', 100);
        org.joda.time.DateTimeField dateTimeField12 = gJChronology2.minuteOfHour();
        org.joda.time.DurationField durationField13 = gJChronology2.hours();
        org.joda.time.DateTimeField dateTimeField14 = gJChronology2.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology2.millisOfSecond();
        org.joda.time.DurationField durationField16 = gJChronology2.months();
        org.joda.time.DurationField durationField17 = gJChronology2.hours();
        org.joda.time.DateTimeField dateTimeField18 = gJChronology2.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField19 = gJChronology2.hourOfHalfday();
        org.joda.time.DurationField durationField20 = gJChronology2.years();
        org.joda.time.Chronology chronology21 = gJChronology2.withUTC();
        org.joda.time.DurationField durationField22 = chronology21.weekyears();
        org.joda.time.DurationField durationField23 = chronology21.weekyears();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on durationField20 and durationField23", (durationField20.compareTo(durationField23) == 0) == durationField20.equals(durationField23));
    }

    @Test
    public void test1534() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1534");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = gJChronology2.years();
        java.util.TimeZone timeZone4 = null;
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forTimeZone(timeZone4);
        org.joda.time.chrono.GJChronology gJChronology6 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone5);
        org.joda.time.DurationField durationField7 = gJChronology6.halfdays();
        org.joda.time.DateTimeField dateTimeField8 = gJChronology6.millisOfDay();
        org.joda.time.DateTimeField dateTimeField9 = gJChronology6.minuteOfDay();
        org.joda.time.DurationField durationField10 = gJChronology6.centuries();
        java.util.TimeZone timeZone11 = null;
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forTimeZone(timeZone11);
        org.joda.time.chrono.GJChronology gJChronology13 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone12);
        org.joda.time.DurationField durationField14 = gJChronology13.halfdays();
        long long17 = durationField14.add((long) 100, 100L);
        boolean boolean18 = durationField14.isPrecise();
        int int19 = durationField10.compareTo(durationField14);
        boolean boolean20 = gJChronology2.equals((java.lang.Object) durationField10);
        org.joda.time.DateTimeField dateTimeField21 = gJChronology2.dayOfYear();
        org.joda.time.DateTimeField dateTimeField22 = gJChronology2.era();
        org.joda.time.DateTimeZone dateTimeZone23 = gJChronology2.getZone();
        org.joda.time.Instant instant24 = gJChronology2.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration25 = null;
        org.joda.time.Instant instant26 = instant24.plus(readableDuration25);
        org.joda.time.MutableDateTime mutableDateTime27 = instant26.toMutableDateTime();
        org.joda.time.DateTime dateTime28 = instant26.toDateTimeISO();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant26 and mutableDateTime27", (instant26.compareTo(mutableDateTime27) == 0) == instant26.equals(mutableDateTime27));
    }

    @Test
    public void test1535() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1535");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        boolean boolean2 = instant1.isEqualNow();
        org.joda.time.ReadableDuration readableDuration3 = null;
        org.joda.time.Instant instant4 = instant1.plus(readableDuration3);
        long long5 = instant1.getMillis();
        java.lang.String str6 = instant1.toString();
        org.joda.time.Instant instant7 = instant1.toInstant();
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.Instant instant10 = instant1.withDurationAdded(readableDuration8, (int) 'x');
        org.joda.time.Instant instant11 = instant1.toInstant();
        java.util.Date date12 = instant1.toDate();
        org.joda.time.MutableDateTime mutableDateTime13 = instant1.toMutableDateTime();
        boolean boolean15 = instant1.isBefore((-31448995200L));
        org.joda.time.DateTimeZone dateTimeZone16 = instant1.getZone();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and mutableDateTime13", (instant1.compareTo(mutableDateTime13) == 0) == instant1.equals(mutableDateTime13));
    }

    @Test
    public void test1536() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1536");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        java.util.Locale locale4 = new java.util.Locale("hi!");
        java.lang.String str5 = locale4.getCountry();
        java.util.Locale locale6 = java.util.Locale.getDefault();
        java.lang.String str7 = locale6.getDisplayName();
        java.lang.String str8 = locale4.getDisplayScript(locale6);
        boolean boolean9 = dateTimeZone1.equals((java.lang.Object) locale6);
        int int11 = dateTimeZone1.getOffsetFromLocal((long) (short) 10);
        java.util.TimeZone timeZone12 = null;
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forTimeZone(timeZone12);
        org.joda.time.chrono.GJChronology gJChronology14 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone13);
        org.joda.time.DateTimeField dateTimeField15 = gJChronology14.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField16 = gJChronology14.weekyearOfCentury();
        org.joda.time.Instant instant17 = gJChronology14.getGregorianCutover();
        org.joda.time.Instant instant19 = instant17.withMillis(0L);
        org.joda.time.Instant instant21 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone22 = null;
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        org.joda.time.chrono.GJChronology gJChronology24 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone23);
        org.joda.time.DateTimeField dateTimeField25 = gJChronology24.millisOfSecond();
        int int26 = instant21.get(dateTimeField25);
        org.joda.time.Instant instant28 = instant21.plus(0L);
        int int29 = instant19.compareTo((org.joda.time.ReadableInstant) instant28);
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = null;
        boolean boolean31 = instant28.isSupported(dateTimeFieldType30);
        int int32 = dateTimeZone1.getOffset((org.joda.time.ReadableInstant) instant28);
        boolean boolean34 = instant28.isAfter(1000L);
        org.joda.time.Instant instant36 = instant28.plus(1136276729856000000L);
        java.util.TimeZone timeZone37 = null;
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forTimeZone(timeZone37);
        org.joda.time.chrono.GJChronology gJChronology39 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone38);
        org.joda.time.DateTimeField dateTimeField40 = gJChronology39.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField41 = gJChronology39.weekyear();
        org.joda.time.DateTimeField dateTimeField42 = gJChronology39.halfdayOfDay();
        org.joda.time.DurationField durationField43 = gJChronology39.years();
        org.joda.time.DurationField durationField44 = gJChronology39.minutes();
        java.util.TimeZone timeZone45 = null;
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.forTimeZone(timeZone45);
        java.lang.String str48 = dateTimeZone46.getNameKey((long) 100);
        boolean boolean49 = dateTimeZone46.isFixed();
        org.joda.time.chrono.GJChronology gJChronology50 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone46);
        int int51 = gJChronology50.getMinimumDaysInFirstWeek();
        java.lang.String str52 = gJChronology50.toString();
        org.joda.time.DateTimeField dateTimeField53 = gJChronology50.yearOfEra();
        org.joda.time.DateTimeField dateTimeField54 = gJChronology50.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField55 = gJChronology50.dayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone56 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology57 = gJChronology50.withZone(dateTimeZone56);
        org.joda.time.Chronology chronology58 = gJChronology39.withZone(dateTimeZone56);
        java.util.Locale locale62 = new java.util.Locale("+00:10", "1970-01-01T00:00:00.004Z");
        java.lang.String str63 = dateTimeZone56.getShortName(0L, locale62);
        org.joda.time.DateTime dateTime64 = instant36.toDateTime(dateTimeZone56);
        int int66 = dateTimeZone56.getOffset((long) 36000000);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant36 and dateTime64", (instant36.compareTo(dateTime64) == 0) == instant36.equals(dateTime64));
    }

    @Test
    public void test1537() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1537");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = gJChronology2.years();
        java.util.TimeZone timeZone4 = null;
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forTimeZone(timeZone4);
        org.joda.time.chrono.GJChronology gJChronology6 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone5);
        org.joda.time.DurationField durationField7 = gJChronology6.halfdays();
        org.joda.time.DateTimeField dateTimeField8 = gJChronology6.millisOfDay();
        org.joda.time.DateTimeField dateTimeField9 = gJChronology6.minuteOfDay();
        org.joda.time.DurationField durationField10 = gJChronology6.centuries();
        java.util.TimeZone timeZone11 = null;
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forTimeZone(timeZone11);
        org.joda.time.chrono.GJChronology gJChronology13 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone12);
        org.joda.time.DurationField durationField14 = gJChronology13.halfdays();
        long long17 = durationField14.add((long) 100, 100L);
        boolean boolean18 = durationField14.isPrecise();
        int int19 = durationField10.compareTo(durationField14);
        boolean boolean20 = gJChronology2.equals((java.lang.Object) durationField10);
        org.joda.time.DateTimeField dateTimeField21 = gJChronology2.dayOfYear();
        org.joda.time.DateTimeField dateTimeField22 = gJChronology2.era();
        org.joda.time.DateTimeZone dateTimeZone23 = gJChronology2.getZone();
        org.joda.time.Instant instant24 = gJChronology2.getGregorianCutover();
        org.joda.time.DurationField durationField25 = gJChronology2.days();
        java.util.TimeZone timeZone26 = null;
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forTimeZone(timeZone26);
        org.joda.time.chrono.GJChronology gJChronology28 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone27);
        org.joda.time.DateTimeField dateTimeField29 = gJChronology28.millisOfSecond();
        org.joda.time.DurationField durationField30 = gJChronology28.millis();
        org.joda.time.DurationField durationField31 = gJChronology28.weekyears();
        org.joda.time.DateTimeField dateTimeField32 = gJChronology28.dayOfYear();
        org.joda.time.DurationField durationField33 = gJChronology28.minutes();
        int int34 = durationField25.compareTo(durationField33);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on durationField3 and durationField31", (durationField3.compareTo(durationField31) == 0) == durationField3.equals(durationField31));
    }

    @Test
    public void test1538() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1538");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        boolean boolean2 = instant1.isEqualNow();
        java.lang.String str3 = instant1.toString();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.MutableDateTime mutableDateTime5 = instant1.toMutableDateTime(chronology4);
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime5.getZone();
        org.joda.time.Instant instant8 = new org.joda.time.Instant(52L);
        boolean boolean9 = instant8.isEqualNow();
        org.joda.time.Instant instant11 = new org.joda.time.Instant(52L);
        org.joda.time.Instant instant13 = instant11.withMillis((long) 'u');
        boolean boolean14 = instant8.isAfter((org.joda.time.ReadableInstant) instant11);
        org.joda.time.Instant instant17 = instant8.withDurationAdded(747221751619200000L, (int) (byte) 0);
        org.joda.time.DateTimeZone dateTimeZone18 = instant17.getZone();
        boolean boolean19 = instant17.isAfterNow();
        int int20 = dateTimeZone6.getOffset((org.joda.time.ReadableInstant) instant17);
        java.util.TimeZone timeZone21 = null;
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forTimeZone(timeZone21);
        org.joda.time.chrono.GJChronology gJChronology23 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone22);
        org.joda.time.DateTimeField dateTimeField24 = gJChronology23.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField25 = gJChronology23.weekyear();
        org.joda.time.DurationField durationField26 = gJChronology23.centuries();
        org.joda.time.DateTimeField dateTimeField27 = gJChronology23.millisOfDay();
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        long long31 = gJChronology23.add(readablePeriod28, (long) '4', (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField32 = gJChronology23.hourOfHalfday();
        org.joda.time.Chronology chronology33 = gJChronology23.withUTC();
        org.joda.time.DateTimeZone dateTimeZone34 = gJChronology23.getZone();
        org.joda.time.DateTimeField dateTimeField35 = gJChronology23.hourOfHalfday();
        org.joda.time.Instant instant36 = gJChronology23.getGregorianCutover();
        int int37 = dateTimeZone6.getOffset((org.joda.time.ReadableInstant) instant36);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and mutableDateTime5", (instant1.compareTo(mutableDateTime5) == 0) == instant1.equals(mutableDateTime5));
    }

    @Test
    public void test1539() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1539");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forTimeZone(timeZone2);
        org.joda.time.chrono.GJChronology gJChronology4 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone3);
        org.joda.time.DateTimeField dateTimeField5 = gJChronology4.millisOfSecond();
        int int6 = instant1.get(dateTimeField5);
        org.joda.time.Instant instant8 = instant1.plus(0L);
        org.joda.time.Instant instant9 = instant8.toInstant();
        org.joda.time.Instant instant11 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone12 = null;
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forTimeZone(timeZone12);
        org.joda.time.chrono.GJChronology gJChronology14 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone13);
        org.joda.time.DateTimeField dateTimeField15 = gJChronology14.millisOfSecond();
        int int16 = instant11.get(dateTimeField15);
        org.joda.time.Instant instant18 = instant11.plus(0L);
        org.joda.time.Instant instant19 = instant18.toInstant();
        boolean boolean20 = instant9.isEqual((org.joda.time.ReadableInstant) instant19);
        org.joda.time.Instant instant22 = new org.joda.time.Instant(52L);
        boolean boolean23 = instant22.isEqualNow();
        org.joda.time.ReadableDuration readableDuration24 = null;
        org.joda.time.Instant instant25 = instant22.plus(readableDuration24);
        org.joda.time.Instant instant27 = new org.joda.time.Instant(52L);
        org.joda.time.Instant instant29 = instant27.withMillis((long) 'u');
        boolean boolean30 = instant22.isBefore((org.joda.time.ReadableInstant) instant27);
        org.joda.time.Instant instant31 = instant27.toInstant();
        org.joda.time.DateTime dateTime32 = instant27.toDateTime();
        boolean boolean33 = instant19.isBefore((org.joda.time.ReadableInstant) instant27);
        java.util.TimeZone timeZone34 = null;
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.forTimeZone(timeZone34);
        org.joda.time.chrono.GJChronology gJChronology36 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone35);
        org.joda.time.DurationField durationField37 = gJChronology36.halfdays();
        org.joda.time.DateTimeField dateTimeField38 = gJChronology36.millisOfDay();
        org.joda.time.DateTimeField dateTimeField39 = gJChronology36.minuteOfDay();
        org.joda.time.DurationField durationField40 = gJChronology36.centuries();
        org.joda.time.DateTimeField dateTimeField41 = gJChronology36.halfdayOfDay();
        java.util.Locale locale42 = java.util.Locale.ITALIAN;
        java.util.Locale locale43 = locale42.stripExtensions();
        java.util.Locale locale44 = java.util.Locale.CANADA;
        java.lang.String str45 = locale42.getDisplayVariant(locale44);
        boolean boolean46 = gJChronology36.equals((java.lang.Object) locale44);
        org.joda.time.DateTimeField dateTimeField47 = gJChronology36.weekyear();
        org.joda.time.DateTimeZone dateTimeZone49 = org.joda.time.DateTimeZone.forOffsetMillis((int) 'a');
        int int51 = dateTimeZone49.getOffsetFromLocal(97000L);
        org.joda.time.Chronology chronology52 = gJChronology36.withZone(dateTimeZone49);
        org.joda.time.MutableDateTime mutableDateTime53 = instant27.toMutableDateTime(chronology52);
        java.util.TimeZone timeZone54 = null;
        org.joda.time.DateTimeZone dateTimeZone55 = org.joda.time.DateTimeZone.forTimeZone(timeZone54);
        org.joda.time.chrono.GJChronology gJChronology56 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone55);
        org.joda.time.DateTimeField dateTimeField57 = gJChronology56.era();
        org.joda.time.DateTimeField dateTimeField58 = gJChronology56.centuryOfEra();
        org.joda.time.DurationField durationField59 = gJChronology56.hours();
        org.joda.time.DateTimeZone dateTimeZone60 = gJChronology56.getZone();
        org.joda.time.DateTimeField dateTimeField61 = gJChronology56.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField62 = gJChronology56.monthOfYear();
        org.joda.time.Instant instant63 = gJChronology56.getGregorianCutover();
        org.joda.time.Instant instant64 = instant63.toInstant();
        boolean boolean65 = mutableDateTime53.isEqual((org.joda.time.ReadableInstant) instant63);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and dateTime32", (instant1.compareTo(dateTime32) == 0) == instant1.equals(dateTime32));
    }

    @Test
    public void test1540() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1540");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        boolean boolean2 = instant1.isEqualNow();
        org.joda.time.ReadableDuration readableDuration3 = null;
        org.joda.time.Instant instant4 = instant1.plus(readableDuration3);
        long long5 = instant1.getMillis();
        java.lang.String str6 = instant1.toString();
        boolean boolean8 = instant1.isAfter((long) (-1));
        java.lang.Object obj9 = null;
        boolean boolean10 = instant1.equals(obj9);
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = null;
        boolean boolean12 = instant1.isSupported(dateTimeFieldType11);
        org.joda.time.DateTimeZone dateTimeZone13 = instant1.getZone();
        org.joda.time.DateTime dateTime14 = instant1.toDateTimeISO();
        org.joda.time.Chronology chronology15 = instant1.getChronology();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and dateTime14", (instant1.compareTo(dateTime14) == 0) == instant1.equals(dateTime14));
    }

    @Test
    public void test1541() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1541");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forTimeZone(timeZone2);
        org.joda.time.chrono.GJChronology gJChronology4 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone3);
        org.joda.time.DateTimeField dateTimeField5 = gJChronology4.millisOfSecond();
        int int6 = instant1.get(dateTimeField5);
        org.joda.time.Instant instant8 = instant1.plus(0L);
        java.util.TimeZone timeZone9 = null;
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forTimeZone(timeZone9);
        org.joda.time.chrono.GJChronology gJChronology11 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone10);
        org.joda.time.DurationField durationField12 = gJChronology11.halfdays();
        org.joda.time.Chronology chronology13 = gJChronology11.withUTC();
        java.lang.String str14 = gJChronology11.toString();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology11.hourOfHalfday();
        int int16 = instant1.get(dateTimeField15);
        org.joda.time.Instant instant18 = new org.joda.time.Instant(52L);
        boolean boolean19 = instant18.isEqualNow();
        org.joda.time.ReadableDuration readableDuration20 = null;
        org.joda.time.Instant instant21 = instant18.plus(readableDuration20);
        org.joda.time.Instant instant23 = new org.joda.time.Instant(52L);
        org.joda.time.Instant instant25 = instant23.withMillis((long) 'u');
        boolean boolean26 = instant18.isBefore((org.joda.time.ReadableInstant) instant23);
        boolean boolean27 = instant1.isEqual((org.joda.time.ReadableInstant) instant23);
        org.joda.time.Chronology chronology28 = instant23.getChronology();
        org.joda.time.ReadableDuration readableDuration29 = null;
        org.joda.time.Instant instant30 = instant23.plus(readableDuration29);
        java.lang.String str31 = instant30.toString();
        org.joda.time.Chronology chronology32 = instant30.getChronology();
        org.joda.time.DateTime dateTime33 = instant30.toDateTime();
        org.joda.time.ReadableDuration readableDuration34 = null;
        org.joda.time.Instant instant35 = instant30.minus(readableDuration34);
        org.joda.time.DateTimeZone dateTimeZone36 = instant35.getZone();
        org.joda.time.DateTime dateTime37 = instant35.toDateTimeISO();
        org.joda.time.MutableDateTime mutableDateTime38 = instant35.toMutableDateTimeISO();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and dateTime33", (instant1.compareTo(dateTime33) == 0) == instant1.equals(dateTime33));
    }

    @Test
    public void test1542() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1542");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = gJChronology2.halfdays();
        long long7 = gJChronology2.add((long) 'a', (-1L), (int) (short) 0);
        org.joda.time.DateTimeField dateTimeField8 = gJChronology2.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField9 = gJChronology2.centuryOfEra();
        long long13 = gJChronology2.add(262974600000L, (long) (byte) 100, (int) '4');
        org.joda.time.DurationField durationField14 = gJChronology2.hours();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology2.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField16 = gJChronology2.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField17 = gJChronology2.halfdayOfDay();
        org.joda.time.DurationField durationField18 = gJChronology2.years();
        org.joda.time.DateTimeField dateTimeField19 = gJChronology2.centuryOfEra();
        org.joda.time.DurationField durationField20 = gJChronology2.weekyears();
        org.joda.time.DateTimeField dateTimeField21 = gJChronology2.weekOfWeekyear();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on durationField18 and durationField20", (durationField18.compareTo(durationField20) == 0) == durationField18.equals(durationField20));
    }

    @Test
    public void test1543() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1543");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forTimeZone(timeZone2);
        org.joda.time.chrono.GJChronology gJChronology4 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone3);
        org.joda.time.DateTimeField dateTimeField5 = gJChronology4.millisOfSecond();
        int int6 = instant1.get(dateTimeField5);
        org.joda.time.Instant instant8 = instant1.plus(0L);
        java.util.TimeZone timeZone9 = null;
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forTimeZone(timeZone9);
        org.joda.time.chrono.GJChronology gJChronology11 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone10);
        org.joda.time.DurationField durationField12 = gJChronology11.halfdays();
        org.joda.time.Chronology chronology13 = gJChronology11.withUTC();
        java.lang.String str14 = gJChronology11.toString();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology11.hourOfHalfday();
        int int16 = instant1.get(dateTimeField15);
        org.joda.time.Instant instant18 = new org.joda.time.Instant(52L);
        boolean boolean19 = instant18.isEqualNow();
        java.lang.String str20 = instant18.toString();
        org.joda.time.Instant instant22 = new org.joda.time.Instant(52L);
        boolean boolean23 = instant22.isEqualNow();
        java.lang.String str24 = instant22.toString();
        java.lang.String str25 = instant22.toString();
        org.joda.time.Instant instant28 = instant22.withDurationAdded(115200000L, (int) (short) 1);
        int int29 = instant18.compareTo((org.joda.time.ReadableInstant) instant22);
        org.joda.time.Instant instant31 = new org.joda.time.Instant(52L);
        boolean boolean32 = instant31.isEqualNow();
        org.joda.time.ReadableDuration readableDuration33 = null;
        org.joda.time.Instant instant34 = instant31.plus(readableDuration33);
        boolean boolean36 = instant34.equals((java.lang.Object) ' ');
        boolean boolean37 = instant22.isAfter((org.joda.time.ReadableInstant) instant34);
        int int38 = instant1.compareTo((org.joda.time.ReadableInstant) instant22);
        org.joda.time.DateTime dateTime39 = instant1.toDateTimeISO();
        org.joda.time.DateTimeFieldType dateTimeFieldType40 = null;
        boolean boolean41 = dateTime39.isSupported(dateTimeFieldType40);
        org.joda.time.Instant instant42 = org.joda.time.Instant.now();
        boolean boolean44 = instant42.isBefore(0L);
        org.joda.time.Instant instant46 = new org.joda.time.Instant(52L);
        org.joda.time.Instant instant48 = instant46.withMillis((long) 'u');
        java.util.TimeZone timeZone49 = null;
        org.joda.time.DateTimeZone dateTimeZone50 = org.joda.time.DateTimeZone.forTimeZone(timeZone49);
        org.joda.time.chrono.GJChronology gJChronology51 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone50);
        org.joda.time.DurationField durationField52 = gJChronology51.halfdays();
        long long56 = gJChronology51.add((long) 'a', (-1L), (int) (short) 0);
        boolean boolean58 = gJChronology51.equals((java.lang.Object) 0);
        org.joda.time.DateTimeField dateTimeField59 = gJChronology51.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField60 = gJChronology51.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField61 = gJChronology51.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField62 = gJChronology51.clockhourOfHalfday();
        org.joda.time.DateTime dateTime63 = instant46.toDateTime((org.joda.time.Chronology) gJChronology51);
        boolean boolean64 = instant42.isEqual((org.joda.time.ReadableInstant) dateTime63);
        boolean boolean65 = dateTime39.isAfter((org.joda.time.ReadableInstant) dateTime63);
        boolean boolean67 = dateTime39.isEqual((-432085L));
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and dateTime63", (instant1.compareTo(dateTime63) == 0) == instant1.equals(dateTime63));
    }

    @Test
    public void test1544() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1544");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        boolean boolean2 = instant1.isEqualNow();
        java.lang.String str3 = instant1.toString();
        java.lang.String str4 = instant1.toString();
        org.joda.time.Instant instant6 = new org.joda.time.Instant(52L);
        boolean boolean7 = instant6.isEqualNow();
        java.lang.String str8 = instant6.toString();
        java.lang.String str9 = instant6.toString();
        org.joda.time.Instant instant12 = instant6.withDurationAdded(115200000L, (int) (short) 1);
        boolean boolean13 = instant12.isBeforeNow();
        boolean boolean14 = instant1.isBefore((org.joda.time.ReadableInstant) instant12);
        org.joda.time.DateTime dateTime15 = instant12.toDateTimeISO();
        boolean boolean16 = dateTime15.isBeforeNow();
        org.joda.time.Instant instant18 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone19 = null;
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forTimeZone(timeZone19);
        org.joda.time.chrono.GJChronology gJChronology21 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone20);
        org.joda.time.DateTimeField dateTimeField22 = gJChronology21.millisOfSecond();
        int int23 = instant18.get(dateTimeField22);
        boolean boolean24 = instant18.isEqualNow();
        org.joda.time.tz.NameProvider nameProvider25 = org.joda.time.DateTimeZone.getNameProvider();
        org.joda.time.DateTimeZone.setNameProvider(nameProvider25);
        org.joda.time.DateTimeZone.setNameProvider(nameProvider25);
        boolean boolean28 = instant18.equals((java.lang.Object) nameProvider25);
        org.joda.time.Instant instant30 = instant18.minus(0L);
        java.util.TimeZone timeZone31 = null;
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.forTimeZone(timeZone31);
        org.joda.time.chrono.GJChronology gJChronology33 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone32);
        org.joda.time.DurationField durationField34 = gJChronology33.halfdays();
        org.joda.time.DateTimeField dateTimeField35 = gJChronology33.millisOfDay();
        org.joda.time.DateTimeField dateTimeField36 = gJChronology33.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField37 = gJChronology33.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField38 = gJChronology33.dayOfWeek();
        org.joda.time.Chronology chronology39 = gJChronology33.withUTC();
        java.util.TimeZone timeZone40 = null;
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.forTimeZone(timeZone40);
        org.joda.time.chrono.GJChronology gJChronology42 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone41);
        org.joda.time.DurationField durationField43 = gJChronology42.halfdays();
        org.joda.time.Chronology chronology44 = gJChronology42.withUTC();
        java.lang.String str45 = gJChronology42.toString();
        org.joda.time.DateTimeField dateTimeField46 = gJChronology42.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone49 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(1, 10);
        org.joda.time.Chronology chronology50 = gJChronology42.withZone(dateTimeZone49);
        long long52 = dateTimeZone49.convertUTCToLocal((-43829L));
        boolean boolean53 = dateTimeZone49.isFixed();
        long long55 = dateTimeZone49.previousTransition((long) 1869);
        org.joda.time.Chronology chronology56 = chronology39.withZone(dateTimeZone49);
        org.joda.time.MutableDateTime mutableDateTime57 = instant30.toMutableDateTime(chronology56);
        boolean boolean58 = dateTime15.isAfter((org.joda.time.ReadableInstant) mutableDateTime57);
        java.util.TimeZone timeZone59 = null;
        org.joda.time.DateTimeZone dateTimeZone60 = org.joda.time.DateTimeZone.forTimeZone(timeZone59);
        org.joda.time.chrono.GJChronology gJChronology61 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone60);
        org.joda.time.DurationField durationField62 = gJChronology61.halfdays();
        long long66 = gJChronology61.add((long) 'a', (-1L), (int) (short) 0);
        boolean boolean68 = gJChronology61.equals((java.lang.Object) 0);
        org.joda.time.DateTimeField dateTimeField69 = gJChronology61.dayOfMonth();
        org.joda.time.DurationField durationField70 = gJChronology61.days();
        long long74 = gJChronology61.add((long) '4', 432000000L, (int) (short) 0);
        org.joda.time.DurationField durationField75 = gJChronology61.minutes();
        org.joda.time.DurationField durationField76 = gJChronology61.millis();
        org.joda.time.DateTimeZone dateTimeZone77 = gJChronology61.getZone();
        org.joda.time.MutableDateTime mutableDateTime78 = dateTime15.toMutableDateTime(dateTimeZone77);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and mutableDateTime57", (instant1.compareTo(mutableDateTime57) == 0) == instant1.equals(mutableDateTime57));
    }

    @Test
    public void test1545() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1545");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        java.util.Locale locale4 = new java.util.Locale("hi!");
        java.lang.String str5 = locale4.getCountry();
        java.util.Locale locale6 = java.util.Locale.getDefault();
        java.lang.String str7 = locale6.getDisplayName();
        java.lang.String str8 = locale4.getDisplayScript(locale6);
        boolean boolean9 = dateTimeZone1.equals((java.lang.Object) locale6);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetMillis((int) '4');
        java.util.TimeZone timeZone12 = dateTimeZone11.toTimeZone();
        long long15 = dateTimeZone11.adjustOffset((long) 0, false);
        int int17 = dateTimeZone11.getOffsetFromLocal((-26438399999L));
        long long19 = dateTimeZone1.getMillisKeepLocal(dateTimeZone11, (long) (byte) 10);
        org.joda.time.Instant instant21 = new org.joda.time.Instant(52L);
        boolean boolean22 = instant21.isEqualNow();
        org.joda.time.ReadableDuration readableDuration23 = null;
        org.joda.time.Instant instant24 = instant21.plus(readableDuration23);
        long long25 = instant21.getMillis();
        java.lang.String str26 = instant21.toString();
        org.joda.time.Instant instant27 = instant21.toInstant();
        org.joda.time.ReadableDuration readableDuration28 = null;
        org.joda.time.Instant instant30 = instant21.withDurationAdded(readableDuration28, (int) 'x');
        java.util.TimeZone timeZone31 = null;
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.forTimeZone(timeZone31);
        org.joda.time.chrono.GJChronology gJChronology33 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone32);
        org.joda.time.DateTimeField dateTimeField34 = gJChronology33.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField35 = gJChronology33.yearOfCentury();
        int int36 = instant30.get(dateTimeField35);
        org.joda.time.chrono.GJChronology gJChronology37 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone11, (org.joda.time.ReadableInstant) instant30);
        org.joda.time.DateTimeField dateTimeField38 = gJChronology37.hourOfHalfday();
        org.joda.time.DurationField durationField39 = gJChronology37.eras();
        org.joda.time.DurationField durationField40 = gJChronology37.weekyears();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField39, durationField40, and durationField39", !(durationField39.compareTo(durationField40) == 0) || (Math.signum(durationField39.compareTo(durationField39)) == Math.signum(durationField40.compareTo(durationField39))));
    }

    @Test
    public void test1546() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1546");
        org.joda.time.Instant instant0 = org.joda.time.Instant.now();
        org.joda.time.Instant instant3 = instant0.withDurationAdded(306102434400000L, (int) (short) 100);
        org.joda.time.Instant instant5 = instant3.withMillis(1136050274678400000L);
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.Instant instant7 = instant5.minus(readableDuration6);
        java.util.TimeZone timeZone8 = null;
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forTimeZone(timeZone8);
        org.joda.time.chrono.GJChronology gJChronology10 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone9);
        org.joda.time.DurationField durationField11 = gJChronology10.halfdays();
        org.joda.time.DateTimeField dateTimeField12 = gJChronology10.millisOfDay();
        org.joda.time.DateTimeField dateTimeField13 = gJChronology10.minuteOfDay();
        org.joda.time.DurationField durationField14 = gJChronology10.centuries();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology10.yearOfCentury();
        org.joda.time.Chronology chronology16 = gJChronology10.withUTC();
        org.joda.time.DateTimeZone dateTimeZone17 = gJChronology10.getZone();
        org.joda.time.Instant instant19 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone20 = null;
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forTimeZone(timeZone20);
        org.joda.time.chrono.GJChronology gJChronology22 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone21);
        org.joda.time.DateTimeField dateTimeField23 = gJChronology22.millisOfSecond();
        int int24 = instant19.get(dateTimeField23);
        boolean boolean25 = instant19.isEqualNow();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter26 = null;
        java.lang.String str27 = instant19.toString(dateTimeFormatter26);
        boolean boolean28 = instant19.isAfterNow();
        int int29 = dateTimeZone17.getOffset((org.joda.time.ReadableInstant) instant19);
        java.lang.String str30 = dateTimeZone17.getID();
        java.util.TimeZone timeZone31 = null;
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.forTimeZone(timeZone31);
        org.joda.time.chrono.GJChronology gJChronology33 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone32);
        org.joda.time.DurationField durationField34 = gJChronology33.halfdays();
        org.joda.time.DateTimeField dateTimeField35 = gJChronology33.millisOfDay();
        org.joda.time.DateTimeField dateTimeField36 = gJChronology33.minuteOfDay();
        org.joda.time.DurationField durationField37 = gJChronology33.centuries();
        org.joda.time.DateTimeField dateTimeField38 = gJChronology33.dayOfYear();
        java.lang.String str39 = gJChronology33.toString();
        org.joda.time.DateTimeField dateTimeField40 = gJChronology33.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone41 = gJChronology33.getZone();
        org.joda.time.chrono.GJChronology gJChronology42 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone41);
        long long44 = dateTimeZone41.nextTransition(3732632409600000L);
        boolean boolean45 = dateTimeZone17.equals((java.lang.Object) long44);
        java.util.TimeZone timeZone46 = null;
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.forTimeZone(timeZone46);
        int int49 = dateTimeZone47.getOffsetFromLocal((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone52 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(0, (int) (short) 10);
        long long54 = dateTimeZone47.getMillisKeepLocal(dateTimeZone52, (-61827926399999L));
        boolean boolean55 = dateTimeZone47.isFixed();
        java.lang.String str57 = dateTimeZone47.getNameKey(10412712236785L);
        long long59 = dateTimeZone17.getMillisKeepLocal(dateTimeZone47, 64L);
        org.joda.time.DateTime dateTime60 = instant5.toDateTime(dateTimeZone47);
        java.util.TimeZone timeZone61 = null;
        org.joda.time.DateTimeZone dateTimeZone62 = org.joda.time.DateTimeZone.forTimeZone(timeZone61);
        org.joda.time.chrono.GJChronology gJChronology63 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone62);
        org.joda.time.DurationField durationField64 = gJChronology63.halfdays();
        long long68 = gJChronology63.add((long) 'a', (-1L), (int) (short) 0);
        long long72 = gJChronology63.add((long) (byte) 0, (long) '4', 100);
        org.joda.time.DateTimeField dateTimeField73 = gJChronology63.minuteOfHour();
        org.joda.time.DurationField durationField74 = gJChronology63.hours();
        org.joda.time.DateTimeField dateTimeField75 = gJChronology63.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField76 = gJChronology63.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField77 = gJChronology63.secondOfMinute();
        org.joda.time.DateTime dateTime78 = instant5.toDateTime((org.joda.time.Chronology) gJChronology63);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant5 and dateTime60", (instant5.compareTo(dateTime60) == 0) == instant5.equals(dateTime60));
    }

    @Test
    public void test1547() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1547");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        boolean boolean2 = instant1.isEqualNow();
        org.joda.time.ReadableDuration readableDuration3 = null;
        org.joda.time.Instant instant4 = instant1.plus(readableDuration3);
        long long5 = instant1.getMillis();
        java.lang.String str6 = instant1.toString();
        org.joda.time.Instant instant7 = instant1.toInstant();
        java.util.TimeZone timeZone8 = null;
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forTimeZone(timeZone8);
        java.lang.String str11 = dateTimeZone9.getNameKey((long) 100);
        long long14 = dateTimeZone9.convertLocalToUTC((-2246399965L), true);
        org.joda.time.MutableDateTime mutableDateTime15 = instant7.toMutableDateTime(dateTimeZone9);
        int int17 = dateTimeZone9.getOffset(25925166840100L);
        int int19 = dateTimeZone9.getOffsetFromLocal(253354694400000L);
        org.joda.time.Instant instant20 = org.joda.time.Instant.now();
        boolean boolean22 = instant20.isBefore(0L);
        org.joda.time.Instant instant24 = new org.joda.time.Instant(52L);
        org.joda.time.Instant instant26 = instant24.withMillis((long) 'u');
        java.util.TimeZone timeZone27 = null;
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forTimeZone(timeZone27);
        org.joda.time.chrono.GJChronology gJChronology29 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone28);
        org.joda.time.DurationField durationField30 = gJChronology29.halfdays();
        long long34 = gJChronology29.add((long) 'a', (-1L), (int) (short) 0);
        boolean boolean36 = gJChronology29.equals((java.lang.Object) 0);
        org.joda.time.DateTimeField dateTimeField37 = gJChronology29.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField38 = gJChronology29.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField39 = gJChronology29.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField40 = gJChronology29.clockhourOfHalfday();
        org.joda.time.DateTime dateTime41 = instant24.toDateTime((org.joda.time.Chronology) gJChronology29);
        boolean boolean42 = instant20.isEqual((org.joda.time.ReadableInstant) dateTime41);
        int int43 = dateTimeZone9.getOffset((org.joda.time.ReadableInstant) instant20);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and mutableDateTime15", (instant1.compareTo(mutableDateTime15) == 0) == instant1.equals(mutableDateTime15));
    }

    @Test
    public void test1548() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1548");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 0, (int) (byte) 1);
        java.lang.String str4 = dateTimeZone2.getNameKey((-61827926399999L));
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forOffsetMillis((int) '4');
        java.util.TimeZone timeZone7 = dateTimeZone6.toTimeZone();
        long long10 = dateTimeZone6.adjustOffset((long) 0, false);
        int int12 = dateTimeZone6.getOffsetFromLocal((-26438399999L));
        java.util.TimeZone timeZone13 = dateTimeZone6.toTimeZone();
        java.lang.String str15 = dateTimeZone6.getShortName((-53L));
        java.util.TimeZone timeZone16 = null;
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forTimeZone(timeZone16);
        org.joda.time.chrono.GJChronology gJChronology18 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone17);
        org.joda.time.DurationField durationField19 = gJChronology18.halfdays();
        long long23 = gJChronology18.add((long) 'a', (-1L), (int) (short) 0);
        org.joda.time.DateTimeField dateTimeField24 = gJChronology18.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField25 = gJChronology18.secondOfMinute();
        org.joda.time.Instant instant27 = new org.joda.time.Instant(52L);
        boolean boolean28 = instant27.isEqualNow();
        org.joda.time.ReadableDuration readableDuration29 = null;
        org.joda.time.Instant instant30 = instant27.plus(readableDuration29);
        boolean boolean31 = gJChronology18.equals((java.lang.Object) instant27);
        org.joda.time.DateTimeFieldType dateTimeFieldType32 = null;
        boolean boolean33 = instant27.isSupported(dateTimeFieldType32);
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = null;
        boolean boolean35 = instant27.isSupported(dateTimeFieldType34);
        org.joda.time.DateTimeZone dateTimeZone36 = instant27.getZone();
        org.joda.time.Instant instant38 = instant27.plus((long) 'a');
        org.joda.time.ReadableDuration readableDuration39 = null;
        org.joda.time.Instant instant40 = instant27.minus(readableDuration39);
        int int41 = dateTimeZone6.getOffset((org.joda.time.ReadableInstant) instant27);
        long long43 = dateTimeZone2.getMillisKeepLocal(dateTimeZone6, (-42L));
        java.util.TimeZone timeZone44 = null;
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.forTimeZone(timeZone44);
        org.joda.time.chrono.GJChronology gJChronology46 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone45);
        org.joda.time.DurationField durationField47 = gJChronology46.halfdays();
        long long51 = gJChronology46.add((long) 'a', (-1L), (int) (short) 0);
        long long55 = gJChronology46.add((long) (byte) 0, (long) '4', 100);
        org.joda.time.DateTimeField dateTimeField56 = gJChronology46.minuteOfHour();
        org.joda.time.DurationField durationField57 = gJChronology46.hours();
        org.joda.time.DateTimeField dateTimeField58 = gJChronology46.hourOfHalfday();
        org.joda.time.Chronology chronology59 = gJChronology46.withUTC();
        org.joda.time.DateTimeField dateTimeField60 = gJChronology46.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField61 = gJChronology46.secondOfMinute();
        org.joda.time.DurationField durationField62 = gJChronology46.months();
        org.joda.time.DateTimeField dateTimeField63 = gJChronology46.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField64 = gJChronology46.dayOfYear();
        org.joda.time.DateTimeField dateTimeField65 = gJChronology46.yearOfEra();
        org.joda.time.DateTimeField dateTimeField66 = gJChronology46.clockhourOfHalfday();
        org.joda.time.Instant instant67 = gJChronology46.getGregorianCutover();
        org.joda.time.chrono.GJChronology gJChronology68 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone2, (org.joda.time.ReadableInstant) instant67);
        org.joda.time.DateTimeField dateTimeField69 = gJChronology68.hourOfHalfday();
        org.joda.time.DurationField durationField70 = gJChronology68.eras();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField70, durationField19, and durationField57", !(durationField70.compareTo(durationField19) == 0) || (Math.signum(durationField70.compareTo(durationField57)) == Math.signum(durationField19.compareTo(durationField57))));
    }

    @Test
    public void test1549() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1549");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField3 = gJChronology2.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.weekyearOfCentury();
        org.joda.time.Instant instant5 = gJChronology2.getGregorianCutover();
        org.joda.time.Instant instant7 = instant5.withMillis(0L);
        org.joda.time.Instant instant9 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone10 = null;
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forTimeZone(timeZone10);
        org.joda.time.chrono.GJChronology gJChronology12 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone11);
        org.joda.time.DateTimeField dateTimeField13 = gJChronology12.millisOfSecond();
        int int14 = instant9.get(dateTimeField13);
        org.joda.time.Instant instant16 = instant9.plus(0L);
        int int17 = instant7.compareTo((org.joda.time.ReadableInstant) instant16);
        org.joda.time.Instant instant19 = new org.joda.time.Instant(52L);
        boolean boolean20 = instant19.isEqualNow();
        org.joda.time.ReadableDuration readableDuration21 = null;
        org.joda.time.Instant instant22 = instant19.plus(readableDuration21);
        boolean boolean24 = instant22.equals((java.lang.Object) ' ');
        boolean boolean25 = instant16.isEqual((org.joda.time.ReadableInstant) instant22);
        java.lang.String str26 = instant16.toString();
        org.joda.time.ReadableDuration readableDuration27 = null;
        org.joda.time.Instant instant29 = instant16.withDurationAdded(readableDuration27, 1431201);
        org.joda.time.MutableDateTime mutableDateTime30 = instant16.toMutableDateTime();
        boolean boolean32 = instant16.isAfter(562551L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant16 and mutableDateTime30", (instant16.compareTo(mutableDateTime30) == 0) == instant16.equals(mutableDateTime30));
    }

    @Test
    public void test1550() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1550");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forTimeZone(timeZone2);
        org.joda.time.chrono.GJChronology gJChronology4 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone3);
        org.joda.time.DateTimeField dateTimeField5 = gJChronology4.millisOfSecond();
        int int6 = instant1.get(dateTimeField5);
        org.joda.time.Instant instant8 = instant1.plus(0L);
        boolean boolean9 = instant8.isEqualNow();
        java.util.TimeZone timeZone10 = null;
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forTimeZone(timeZone10);
        org.joda.time.chrono.GJChronology gJChronology12 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone11);
        org.joda.time.DurationField durationField13 = gJChronology12.halfdays();
        long long17 = gJChronology12.add((long) 'a', (-1L), (int) (short) 0);
        boolean boolean19 = gJChronology12.equals((java.lang.Object) 0);
        org.joda.time.DateTimeField dateTimeField20 = gJChronology12.dayOfMonth();
        org.joda.time.DurationField durationField21 = gJChronology12.millis();
        org.joda.time.DurationField durationField22 = gJChronology12.years();
        org.joda.time.MutableDateTime mutableDateTime23 = instant8.toMutableDateTime((org.joda.time.Chronology) gJChronology12);
        org.joda.time.DateTime dateTime24 = instant8.toDateTimeISO();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant8 and mutableDateTime23", (instant8.compareTo(mutableDateTime23) == 0) == instant8.equals(mutableDateTime23));
    }

    @Test
    public void test1551() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1551");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        boolean boolean2 = instant1.isEqualNow();
        java.lang.String str3 = instant1.toString();
        org.joda.time.DateTimeZone dateTimeZone4 = instant1.getZone();
        org.joda.time.Instant instant6 = instant1.minus((-2208729599948L));
        boolean boolean7 = instant1.isBeforeNow();
        org.joda.time.MutableDateTime mutableDateTime8 = instant1.toMutableDateTime();
        java.util.TimeZone timeZone9 = null;
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forTimeZone(timeZone9);
        org.joda.time.chrono.GJChronology gJChronology11 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone10);
        long long15 = dateTimeZone10.convertLocalToUTC((long) (byte) -1, true, 0L);
        boolean boolean17 = dateTimeZone10.equals((java.lang.Object) true);
        org.joda.time.chrono.GJChronology gJChronology18 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone10);
        org.joda.time.DateTimeField dateTimeField19 = gJChronology18.weekyear();
        org.joda.time.DateTimeField dateTimeField20 = gJChronology18.era();
        org.joda.time.DateTimeField dateTimeField21 = gJChronology18.centuryOfEra();
        org.joda.time.Chronology chronology22 = gJChronology18.withUTC();
        org.joda.time.DurationField durationField23 = gJChronology18.years();
        java.util.TimeZone timeZone24 = null;
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forTimeZone(timeZone24);
        java.lang.String str27 = dateTimeZone25.getNameKey((long) 100);
        long long30 = dateTimeZone25.convertLocalToUTC((-2246399965L), true);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone25);
        org.joda.time.Chronology chronology32 = gJChronology18.withZone(dateTimeZone25);
        org.joda.time.Chronology chronology33 = gJChronology18.withUTC();
        org.joda.time.DateTimeField dateTimeField34 = gJChronology18.yearOfEra();
        org.joda.time.DateTimeField dateTimeField35 = gJChronology18.hourOfDay();
        org.joda.time.MutableDateTime mutableDateTime36 = mutableDateTime8.toMutableDateTime((org.joda.time.Chronology) gJChronology18);
        org.joda.time.DateTimeFieldType dateTimeFieldType37 = null;
        boolean boolean38 = mutableDateTime8.isSupported(dateTimeFieldType37);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and mutableDateTime36", (instant1.compareTo(mutableDateTime36) == 0) == instant1.equals(mutableDateTime36));
    }

    @Test
    public void test1552() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1552");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        boolean boolean2 = instant1.isEqualNow();
        org.joda.time.ReadableDuration readableDuration3 = null;
        org.joda.time.Instant instant4 = instant1.plus(readableDuration3);
        long long5 = instant1.getMillis();
        java.lang.String str6 = instant1.toString();
        org.joda.time.Instant instant7 = instant1.toInstant();
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.Instant instant10 = instant1.withDurationAdded(readableDuration8, (int) 'x');
        long long11 = instant1.getMillis();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = null;
        java.lang.String str13 = instant1.toString(dateTimeFormatter12);
        org.joda.time.Instant instant15 = new org.joda.time.Instant(52L);
        boolean boolean16 = instant15.isEqualNow();
        java.lang.String str17 = instant15.toString();
        java.util.TimeZone timeZone18 = null;
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forTimeZone(timeZone18);
        org.joda.time.chrono.GJChronology gJChronology20 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone19);
        java.util.Locale locale22 = new java.util.Locale("hi!");
        java.lang.String str23 = locale22.getCountry();
        java.util.Locale locale24 = java.util.Locale.getDefault();
        java.lang.String str25 = locale24.getDisplayName();
        java.lang.String str26 = locale22.getDisplayScript(locale24);
        boolean boolean27 = dateTimeZone19.equals((java.lang.Object) locale24);
        int int29 = dateTimeZone19.getOffsetFromLocal((long) (short) 10);
        java.util.TimeZone timeZone30 = null;
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forTimeZone(timeZone30);
        org.joda.time.chrono.GJChronology gJChronology32 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone31);
        org.joda.time.DateTimeField dateTimeField33 = gJChronology32.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField34 = gJChronology32.weekyearOfCentury();
        org.joda.time.Instant instant35 = gJChronology32.getGregorianCutover();
        org.joda.time.Instant instant37 = instant35.withMillis(0L);
        org.joda.time.Instant instant39 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone40 = null;
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.forTimeZone(timeZone40);
        org.joda.time.chrono.GJChronology gJChronology42 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone41);
        org.joda.time.DateTimeField dateTimeField43 = gJChronology42.millisOfSecond();
        int int44 = instant39.get(dateTimeField43);
        org.joda.time.Instant instant46 = instant39.plus(0L);
        int int47 = instant37.compareTo((org.joda.time.ReadableInstant) instant46);
        org.joda.time.DateTimeFieldType dateTimeFieldType48 = null;
        boolean boolean49 = instant46.isSupported(dateTimeFieldType48);
        int int50 = dateTimeZone19.getOffset((org.joda.time.ReadableInstant) instant46);
        boolean boolean51 = instant15.isAfter((org.joda.time.ReadableInstant) instant46);
        org.joda.time.ReadableDuration readableDuration52 = null;
        org.joda.time.Instant instant54 = instant15.withDurationAdded(readableDuration52, 1);
        boolean boolean55 = instant54.isEqualNow();
        org.joda.time.Instant instant56 = instant54.toInstant();
        java.util.TimeZone timeZone57 = null;
        org.joda.time.DateTimeZone dateTimeZone58 = org.joda.time.DateTimeZone.forTimeZone(timeZone57);
        org.joda.time.chrono.GJChronology gJChronology59 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone58);
        org.joda.time.DateTimeField dateTimeField60 = gJChronology59.era();
        org.joda.time.DateTimeField dateTimeField61 = gJChronology59.weekyear();
        org.joda.time.DateTimeField dateTimeField62 = gJChronology59.weekyearOfCentury();
        org.joda.time.DurationField durationField63 = gJChronology59.millis();
        org.joda.time.DateTimeField dateTimeField64 = gJChronology59.dayOfWeek();
        org.joda.time.DurationField durationField65 = gJChronology59.millis();
        org.joda.time.Instant instant66 = gJChronology59.getGregorianCutover();
        org.joda.time.DateTimeField dateTimeField67 = gJChronology59.minuteOfHour();
        int int68 = instant54.get(dateTimeField67);
        boolean boolean69 = instant1.isBefore((org.joda.time.ReadableInstant) instant54);
        org.joda.time.DateTimeZone dateTimeZone71 = org.joda.time.DateTimeZone.forOffsetMillis((int) '4');
        java.util.TimeZone timeZone72 = dateTimeZone71.toTimeZone();
        java.lang.String str73 = dateTimeZone71.toString();
        boolean boolean75 = dateTimeZone71.isStandardOffset((long) 'u');
        org.joda.time.LocalDateTime localDateTime76 = null;
        boolean boolean77 = dateTimeZone71.isLocalDateTimeGap(localDateTime76);
        int int79 = dateTimeZone71.getStandardOffset(315705600000L);
        org.joda.time.MutableDateTime mutableDateTime80 = instant54.toMutableDateTime(dateTimeZone71);
        long long82 = dateTimeZone71.nextTransition((-186624014445955988L));
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and mutableDateTime80", (instant1.compareTo(mutableDateTime80) == 0) == instant1.equals(mutableDateTime80));
    }

    @Test
    public void test1553() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1553");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((-2246399965L));
        org.joda.time.Instant instant3 = new org.joda.time.Instant(52L);
        boolean boolean4 = instant3.isEqualNow();
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.Instant instant6 = instant3.plus(readableDuration5);
        long long7 = instant3.getMillis();
        java.lang.String str8 = instant3.toString();
        org.joda.time.Instant instant9 = instant3.toInstant();
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.Instant instant12 = instant3.withDurationAdded(readableDuration10, (int) 'x');
        org.joda.time.Instant instant13 = instant3.toInstant();
        java.util.Date date14 = instant3.toDate();
        long long15 = instant3.getMillis();
        org.joda.time.ReadableDuration readableDuration16 = null;
        org.joda.time.Instant instant17 = instant3.minus(readableDuration16);
        java.util.TimeZone timeZone18 = null;
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forTimeZone(timeZone18);
        org.joda.time.chrono.GJChronology gJChronology20 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone19);
        org.joda.time.DurationField durationField21 = gJChronology20.halfdays();
        org.joda.time.Chronology chronology22 = gJChronology20.withUTC();
        java.lang.String str23 = gJChronology20.toString();
        org.joda.time.DateTimeField dateTimeField24 = gJChronology20.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(1, 10);
        org.joda.time.Chronology chronology28 = gJChronology20.withZone(dateTimeZone27);
        org.joda.time.DateTimeZone dateTimeZone29 = gJChronology20.getZone();
        org.joda.time.DateTime dateTime30 = instant3.toDateTime(dateTimeZone29);
        boolean boolean31 = instant1.isBefore((org.joda.time.ReadableInstant) dateTime30);
        org.joda.time.Chronology chronology32 = instant1.getChronology();
        java.util.TimeZone timeZone33 = null;
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.forTimeZone(timeZone33);
        org.joda.time.chrono.GJChronology gJChronology35 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone34);
        org.joda.time.DurationField durationField36 = gJChronology35.halfdays();
        long long40 = gJChronology35.add((long) 'a', (-1L), (int) (short) 0);
        long long44 = gJChronology35.add((long) (byte) 0, (long) '4', 100);
        org.joda.time.DateTimeField dateTimeField45 = gJChronology35.minuteOfHour();
        org.joda.time.DurationField durationField46 = gJChronology35.hours();
        org.joda.time.DateTimeField dateTimeField47 = gJChronology35.hourOfHalfday();
        org.joda.time.Chronology chronology48 = gJChronology35.withUTC();
        org.joda.time.DateTimeField dateTimeField49 = gJChronology35.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField50 = gJChronology35.secondOfMinute();
        java.util.TimeZone timeZone51 = null;
        org.joda.time.DateTimeZone dateTimeZone52 = org.joda.time.DateTimeZone.forTimeZone(timeZone51);
        org.joda.time.chrono.GJChronology gJChronology53 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone52);
        org.joda.time.DurationField durationField54 = gJChronology53.halfdays();
        long long58 = gJChronology53.add((long) 'a', (-1L), (int) (short) 0);
        boolean boolean60 = gJChronology53.equals((java.lang.Object) 0);
        org.joda.time.DateTimeField dateTimeField61 = gJChronology53.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField62 = gJChronology53.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField63 = gJChronology53.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField64 = gJChronology53.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField65 = gJChronology53.weekyear();
        java.util.TimeZone timeZone66 = null;
        org.joda.time.DateTimeZone dateTimeZone67 = org.joda.time.DateTimeZone.forTimeZone(timeZone66);
        org.joda.time.chrono.GJChronology gJChronology68 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone67);
        org.joda.time.DateTimeField dateTimeField69 = gJChronology68.millisOfSecond();
        org.joda.time.DurationField durationField70 = gJChronology68.millis();
        org.joda.time.DateTimeZone dateTimeZone71 = gJChronology68.getZone();
        org.joda.time.Chronology chronology72 = gJChronology53.withZone(dateTimeZone71);
        long long75 = dateTimeZone71.convertLocalToUTC(110449353600000L, false);
        org.joda.time.Chronology chronology76 = gJChronology35.withZone(dateTimeZone71);
        org.joda.time.DateTimeZone dateTimeZone77 = chronology76.getZone();
        org.joda.time.DateTimeField dateTimeField78 = chronology76.dayOfYear();
        boolean boolean79 = instant1.equals((java.lang.Object) dateTimeField78);
        org.joda.time.ReadableInstant readableInstant80 = null;
        boolean boolean81 = instant1.isBefore(readableInstant80);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant3 and dateTime30", (instant3.compareTo(dateTime30) == 0) == instant3.equals(dateTime30));
    }

    @Test
    public void test1554() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1554");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        boolean boolean2 = instant1.isEqualNow();
        java.lang.String str3 = instant1.toString();
        org.joda.time.Instant instant5 = new org.joda.time.Instant(52L);
        boolean boolean6 = instant5.isEqualNow();
        java.lang.String str7 = instant5.toString();
        java.lang.String str8 = instant5.toString();
        org.joda.time.Instant instant11 = instant5.withDurationAdded(115200000L, (int) (short) 1);
        int int12 = instant1.compareTo((org.joda.time.ReadableInstant) instant5);
        org.joda.time.Instant instant14 = new org.joda.time.Instant(52L);
        boolean boolean15 = instant14.isEqualNow();
        org.joda.time.ReadableDuration readableDuration16 = null;
        org.joda.time.Instant instant17 = instant14.plus(readableDuration16);
        boolean boolean19 = instant17.equals((java.lang.Object) ' ');
        boolean boolean20 = instant5.isAfter((org.joda.time.ReadableInstant) instant17);
        org.joda.time.Instant instant22 = new org.joda.time.Instant(52L);
        boolean boolean23 = instant22.isEqualNow();
        java.lang.String str24 = instant22.toString();
        java.lang.String str25 = instant22.toString();
        org.joda.time.Instant instant27 = new org.joda.time.Instant(52L);
        boolean boolean28 = instant27.isEqualNow();
        org.joda.time.ReadableDuration readableDuration29 = null;
        org.joda.time.Instant instant30 = instant27.plus(readableDuration29);
        boolean boolean31 = instant22.isBefore((org.joda.time.ReadableInstant) instant30);
        org.joda.time.Instant instant33 = instant30.plus((long) (short) 100);
        java.lang.String str34 = instant30.toString();
        boolean boolean35 = instant17.isEqual((org.joda.time.ReadableInstant) instant30);
        boolean boolean36 = instant17.isBeforeNow();
        org.joda.time.Instant instant38 = new org.joda.time.Instant(52L);
        boolean boolean39 = instant38.isEqualNow();
        java.lang.String str40 = instant38.toString();
        java.lang.String str41 = instant38.toString();
        org.joda.time.Instant instant44 = instant38.withDurationAdded(115200000L, (int) (short) 1);
        java.util.TimeZone timeZone45 = null;
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.forTimeZone(timeZone45);
        java.lang.String str48 = dateTimeZone46.getNameKey((long) 100);
        boolean boolean49 = dateTimeZone46.isFixed();
        org.joda.time.DateTime dateTime50 = instant38.toDateTime(dateTimeZone46);
        int int51 = instant17.compareTo((org.joda.time.ReadableInstant) instant38);
        org.joda.time.Instant instant53 = instant38.plus((-8279261L));
        org.joda.time.Instant instant55 = new org.joda.time.Instant((-220870497598236L));
        org.joda.time.MutableDateTime mutableDateTime56 = instant55.toMutableDateTimeISO();
        int int57 = instant53.compareTo((org.joda.time.ReadableInstant) mutableDateTime56);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and dateTime50", (instant1.compareTo(dateTime50) == 0) == instant1.equals(dateTime50));
    }

    @Test
    public void test1555() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1555");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        boolean boolean2 = instant1.isEqualNow();
        java.lang.String str3 = instant1.toString();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.MutableDateTime mutableDateTime5 = instant1.toMutableDateTime(chronology4);
        java.util.TimeZone timeZone6 = null;
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forTimeZone(timeZone6);
        org.joda.time.chrono.GJChronology gJChronology8 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone7);
        int int10 = dateTimeZone7.getOffsetFromLocal(1000L);
        java.util.Locale locale13 = java.util.Locale.forLanguageTag("");
        java.lang.String str14 = dateTimeZone7.getName(43201764L, locale13);
        org.joda.time.Instant instant15 = new org.joda.time.Instant((java.lang.Object) 43201764L);
        java.util.TimeZone timeZone16 = null;
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forTimeZone(timeZone16);
        org.joda.time.chrono.GJChronology gJChronology18 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone17);
        long long22 = dateTimeZone17.convertLocalToUTC((long) (byte) -1, true, 0L);
        java.lang.String str24 = dateTimeZone17.getNameKey((long) (short) 0);
        boolean boolean26 = dateTimeZone17.equals((java.lang.Object) 10);
        org.joda.time.MutableDateTime mutableDateTime27 = instant15.toMutableDateTime(dateTimeZone17);
        java.util.TimeZone timeZone28 = null;
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forTimeZone(timeZone28);
        org.joda.time.chrono.GJChronology gJChronology30 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone29);
        org.joda.time.DurationField durationField31 = gJChronology30.halfdays();
        org.joda.time.DateTimeField dateTimeField32 = gJChronology30.millisOfDay();
        org.joda.time.DateTimeField dateTimeField33 = gJChronology30.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField34 = gJChronology30.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField35 = gJChronology30.monthOfYear();
        int int36 = instant15.get(dateTimeField35);
        org.joda.time.Instant instant38 = new org.joda.time.Instant(52L);
        boolean boolean39 = instant38.isEqualNow();
        java.lang.String str40 = instant38.toString();
        java.lang.String str41 = instant38.toString();
        org.joda.time.Instant instant43 = new org.joda.time.Instant(52L);
        boolean boolean44 = instant43.isEqualNow();
        java.lang.String str45 = instant43.toString();
        java.lang.String str46 = instant43.toString();
        org.joda.time.Instant instant49 = instant43.withDurationAdded(115200000L, (int) (short) 1);
        boolean boolean50 = instant49.isBeforeNow();
        boolean boolean51 = instant38.isBefore((org.joda.time.ReadableInstant) instant49);
        int int52 = instant15.compareTo((org.joda.time.ReadableInstant) instant38);
        boolean boolean53 = mutableDateTime5.isBefore((org.joda.time.ReadableInstant) instant15);
        java.util.Date date54 = mutableDateTime5.toDate();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant15 and mutableDateTime27", (instant15.compareTo(mutableDateTime27) == 0) == instant15.equals(mutableDateTime27));
    }

    @Test
    public void test1556() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1556");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField3 = gJChronology2.era();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.centuryOfEra();
        org.joda.time.DurationField durationField5 = gJChronology2.hours();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology2.monthOfYear();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology2.dayOfWeek();
        org.joda.time.Chronology chronology8 = gJChronology2.withUTC();
        org.joda.time.DurationField durationField9 = gJChronology2.centuries();
        java.util.TimeZone timeZone10 = null;
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forTimeZone(timeZone10);
        java.lang.String str13 = dateTimeZone11.getNameKey((long) 100);
        boolean boolean14 = dateTimeZone11.isFixed();
        org.joda.time.chrono.GJChronology gJChronology15 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone11);
        int int16 = gJChronology15.getMinimumDaysInFirstWeek();
        java.lang.String str17 = gJChronology15.toString();
        org.joda.time.DateTimeField dateTimeField18 = gJChronology15.yearOfEra();
        org.joda.time.DateTimeField dateTimeField19 = gJChronology15.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField20 = gJChronology15.dayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology22 = gJChronology15.withZone(dateTimeZone21);
        org.joda.time.DateTimeField dateTimeField23 = chronology22.millisOfSecond();
        java.util.TimeZone timeZone24 = null;
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forTimeZone(timeZone24);
        org.joda.time.chrono.GJChronology gJChronology26 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone25);
        int int28 = dateTimeZone25.getOffsetFromLocal((long) (-1));
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forOffsetHours((int) '4');
        long long32 = dateTimeZone25.getMillisKeepLocal(dateTimeZone30, (-8380800000L));
        org.joda.time.Chronology chronology33 = chronology22.withZone(dateTimeZone25);
        java.util.TimeZone timeZone34 = null;
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.forTimeZone(timeZone34);
        org.joda.time.chrono.GJChronology gJChronology36 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone35);
        org.joda.time.DurationField durationField37 = gJChronology36.halfdays();
        java.util.TimeZone timeZone38 = null;
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.forTimeZone(timeZone38);
        org.joda.time.chrono.GJChronology gJChronology40 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone39);
        long long44 = dateTimeZone39.convertLocalToUTC((long) (byte) -1, true, 0L);
        boolean boolean46 = dateTimeZone39.equals((java.lang.Object) true);
        org.joda.time.Chronology chronology47 = gJChronology36.withZone(dateTimeZone39);
        org.joda.time.LocalDateTime localDateTime48 = null;
        boolean boolean49 = dateTimeZone39.isLocalDateTimeGap(localDateTime48);
        boolean boolean50 = dateTimeZone39.isFixed();
        long long52 = dateTimeZone25.getMillisKeepLocal(dateTimeZone39, (long) (short) -1);
        org.joda.time.Chronology chronology53 = gJChronology2.withZone(dateTimeZone39);
        org.joda.time.Instant instant55 = new org.joda.time.Instant(52L);
        boolean boolean56 = instant55.isEqualNow();
        java.lang.String str57 = instant55.toString();
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.MutableDateTime mutableDateTime59 = instant55.toMutableDateTime(chronology58);
        org.joda.time.MutableDateTime mutableDateTime60 = instant55.toMutableDateTime();
        org.joda.time.MutableDateTime mutableDateTime61 = instant55.toMutableDateTime();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter62 = null;
        java.lang.String str63 = instant55.toString(dateTimeFormatter62);
        org.joda.time.chrono.GJChronology gJChronology64 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone39, (org.joda.time.ReadableInstant) instant55);
        org.joda.time.MutableDateTime mutableDateTime65 = instant55.toMutableDateTimeISO();
        org.joda.time.DateTimeFieldType dateTimeFieldType66 = null;
        boolean boolean67 = instant55.isSupported(dateTimeFieldType66);
        org.joda.time.Instant instant69 = instant55.withMillis(111000000L);
        org.joda.time.MutableDateTime mutableDateTime70 = instant69.toMutableDateTime();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant55 and mutableDateTime59", (instant55.compareTo(mutableDateTime59) == 0) == instant55.equals(mutableDateTime59));
    }

    @Test
    public void test1557() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1557");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forTimeZone(timeZone2);
        org.joda.time.chrono.GJChronology gJChronology4 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone3);
        org.joda.time.DateTimeField dateTimeField5 = gJChronology4.millisOfSecond();
        int int6 = instant1.get(dateTimeField5);
        org.joda.time.Instant instant8 = instant1.plus(0L);
        org.joda.time.Instant instant9 = instant8.toInstant();
        org.joda.time.Instant instant11 = new org.joda.time.Instant(52L);
        boolean boolean12 = instant11.isEqualNow();
        java.lang.String str13 = instant11.toString();
        java.lang.String str14 = instant11.toString();
        org.joda.time.Instant instant16 = new org.joda.time.Instant(52L);
        boolean boolean17 = instant16.isEqualNow();
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.Instant instant19 = instant16.plus(readableDuration18);
        boolean boolean20 = instant11.isBefore((org.joda.time.ReadableInstant) instant19);
        org.joda.time.Instant instant22 = instant11.minus((long) 0);
        int int23 = instant8.compareTo((org.joda.time.ReadableInstant) instant11);
        org.joda.time.Instant instant26 = instant11.withDurationAdded((long) (short) 100, 70);
        org.joda.time.DateTime dateTime27 = instant26.toDateTimeISO();
        java.util.Locale locale29 = new java.util.Locale("hi!");
        java.lang.String str30 = locale29.getVariant();
        java.util.Locale locale32 = java.util.Locale.forLanguageTag("hi!");
        java.lang.String str33 = locale32.toLanguageTag();
        java.lang.String str34 = locale29.getDisplayName(locale32);
        boolean boolean35 = dateTime27.equals((java.lang.Object) locale29);
        org.joda.time.Chronology chronology36 = dateTime27.getChronology();
        java.util.TimeZone timeZone37 = null;
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forTimeZone(timeZone37);
        org.joda.time.chrono.GJChronology gJChronology39 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone38);
        java.util.Locale locale41 = new java.util.Locale("hi!");
        java.lang.String str42 = locale41.getCountry();
        java.util.Locale locale43 = java.util.Locale.getDefault();
        java.lang.String str44 = locale43.getDisplayName();
        java.lang.String str45 = locale41.getDisplayScript(locale43);
        boolean boolean46 = dateTimeZone38.equals((java.lang.Object) locale43);
        org.joda.time.DateTime dateTime47 = dateTime27.toDateTime(dateTimeZone38);
        int int49 = dateTimeZone38.getOffsetFromLocal(3964200000L);
        org.joda.time.LocalDateTime localDateTime50 = null;
        boolean boolean51 = dateTimeZone38.isLocalDateTimeGap(localDateTime50);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant26 and dateTime27", (instant26.compareTo(dateTime27) == 0) == instant26.equals(dateTime27));
    }

    @Test
    public void test1558() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1558");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField3 = gJChronology2.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.weekyear();
        org.joda.time.DurationField durationField5 = gJChronology2.centuries();
        long long9 = gJChronology2.add(0L, 4324200000L, (-5914428));
        org.joda.time.DateTimeField dateTimeField10 = gJChronology2.hourOfDay();
        org.joda.time.DateTimeField dateTimeField11 = gJChronology2.monthOfYear();
        org.joda.time.DurationField durationField12 = gJChronology2.eras();
        org.joda.time.Instant instant13 = gJChronology2.getGregorianCutover();
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField5 and durationField12", Math.signum(durationField5.compareTo(durationField12)) == -Math.signum(durationField12.compareTo(durationField5)));
    }

    @Test
    public void test1559() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1559");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = gJChronology2.halfdays();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.millisOfDay();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.minuteOfDay();
        org.joda.time.DurationField durationField6 = gJChronology2.centuries();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology2.dayOfYear();
        java.lang.String str8 = gJChronology2.toString();
        org.joda.time.DateTimeField dateTimeField9 = gJChronology2.dayOfYear();
        org.joda.time.Instant instant11 = new org.joda.time.Instant(52L);
        boolean boolean12 = instant11.isEqualNow();
        org.joda.time.ReadableDuration readableDuration13 = null;
        org.joda.time.Instant instant14 = instant11.plus(readableDuration13);
        long long15 = instant11.getMillis();
        java.lang.String str16 = instant11.toString();
        org.joda.time.Instant instant17 = instant11.toInstant();
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.Instant instant20 = instant11.withDurationAdded(readableDuration18, (int) 'x');
        org.joda.time.DateTimeZone dateTimeZone21 = instant11.getZone();
        java.util.TimeZone timeZone22 = null;
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        org.joda.time.chrono.GJChronology gJChronology24 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone23);
        org.joda.time.DurationField durationField25 = gJChronology24.halfdays();
        org.joda.time.DateTimeField dateTimeField26 = gJChronology24.millisOfDay();
        org.joda.time.DateTimeField dateTimeField27 = gJChronology24.minuteOfDay();
        org.joda.time.DurationField durationField28 = gJChronology24.centuries();
        org.joda.time.DateTimeField dateTimeField29 = gJChronology24.dayOfYear();
        java.lang.String str30 = gJChronology24.toString();
        org.joda.time.DateTimeField dateTimeField31 = gJChronology24.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone32 = gJChronology24.getZone();
        org.joda.time.chrono.GJChronology gJChronology33 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone32);
        long long35 = dateTimeZone32.nextTransition(1L);
        long long37 = dateTimeZone21.getMillisKeepLocal(dateTimeZone32, (long) (byte) 1);
        org.joda.time.Chronology chronology38 = gJChronology2.withZone(dateTimeZone21);
        org.joda.time.Instant instant40 = new org.joda.time.Instant(52L);
        boolean boolean41 = instant40.isEqualNow();
        org.joda.time.ReadableDuration readableDuration42 = null;
        org.joda.time.Instant instant43 = instant40.plus(readableDuration42);
        long long44 = instant40.getMillis();
        java.lang.String str45 = instant40.toString();
        org.joda.time.Instant instant46 = instant40.toInstant();
        org.joda.time.ReadableDuration readableDuration47 = null;
        org.joda.time.Instant instant49 = instant40.withDurationAdded(readableDuration47, (int) 'x');
        org.joda.time.Instant instant50 = instant40.toInstant();
        java.util.Date date51 = instant40.toDate();
        org.joda.time.DateTimeZone dateTimeZone52 = instant40.getZone();
        boolean boolean53 = dateTimeZone21.equals((java.lang.Object) instant40);
        boolean boolean55 = instant40.isAfter(103678127999886L);
        org.joda.time.Instant instant57 = instant40.plus((-61827926399947L));
        org.joda.time.DateTimeZone dateTimeZone58 = null;
        org.joda.time.DateTime dateTime59 = instant40.toDateTime(dateTimeZone58);
        java.util.TimeZone timeZone60 = null;
        org.joda.time.DateTimeZone dateTimeZone61 = org.joda.time.DateTimeZone.forTimeZone(timeZone60);
        org.joda.time.chrono.GJChronology gJChronology62 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone61);
        org.joda.time.DurationField durationField63 = gJChronology62.halfdays();
        org.joda.time.DateTimeField dateTimeField64 = gJChronology62.millisOfDay();
        org.joda.time.DateTimeField dateTimeField65 = gJChronology62.minuteOfDay();
        org.joda.time.DurationField durationField66 = gJChronology62.centuries();
        org.joda.time.DateTimeField dateTimeField67 = gJChronology62.dayOfYear();
        java.lang.String str68 = gJChronology62.toString();
        org.joda.time.DateTimeField dateTimeField69 = gJChronology62.dayOfYear();
        org.joda.time.DateTimeField dateTimeField70 = gJChronology62.dayOfMonth();
        org.joda.time.DurationField durationField71 = gJChronology62.years();
        org.joda.time.DateTimeField dateTimeField72 = gJChronology62.minuteOfHour();
        org.joda.time.DurationField durationField73 = gJChronology62.halfdays();
        org.joda.time.ReadablePeriod readablePeriod74 = null;
        long long77 = gJChronology62.add(readablePeriod74, 126590400068L, 236785);
        org.joda.time.DurationField durationField78 = gJChronology62.years();
        org.joda.time.DateTime dateTime79 = instant40.toDateTime((org.joda.time.Chronology) gJChronology62);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant11 and dateTime59", (instant11.compareTo(dateTime59) == 0) == instant11.equals(dateTime59));
    }

    @Test
    public void test1560() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1560");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        boolean boolean2 = instant1.isEqualNow();
        java.lang.String str3 = instant1.toString();
        java.util.TimeZone timeZone4 = null;
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forTimeZone(timeZone4);
        org.joda.time.chrono.GJChronology gJChronology6 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone5);
        java.util.Locale locale8 = new java.util.Locale("hi!");
        java.lang.String str9 = locale8.getCountry();
        java.util.Locale locale10 = java.util.Locale.getDefault();
        java.lang.String str11 = locale10.getDisplayName();
        java.lang.String str12 = locale8.getDisplayScript(locale10);
        boolean boolean13 = dateTimeZone5.equals((java.lang.Object) locale10);
        int int15 = dateTimeZone5.getOffsetFromLocal((long) (short) 10);
        java.util.TimeZone timeZone16 = null;
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forTimeZone(timeZone16);
        org.joda.time.chrono.GJChronology gJChronology18 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone17);
        org.joda.time.DateTimeField dateTimeField19 = gJChronology18.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField20 = gJChronology18.weekyearOfCentury();
        org.joda.time.Instant instant21 = gJChronology18.getGregorianCutover();
        org.joda.time.Instant instant23 = instant21.withMillis(0L);
        org.joda.time.Instant instant25 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone26 = null;
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forTimeZone(timeZone26);
        org.joda.time.chrono.GJChronology gJChronology28 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone27);
        org.joda.time.DateTimeField dateTimeField29 = gJChronology28.millisOfSecond();
        int int30 = instant25.get(dateTimeField29);
        org.joda.time.Instant instant32 = instant25.plus(0L);
        int int33 = instant23.compareTo((org.joda.time.ReadableInstant) instant32);
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = null;
        boolean boolean35 = instant32.isSupported(dateTimeFieldType34);
        int int36 = dateTimeZone5.getOffset((org.joda.time.ReadableInstant) instant32);
        boolean boolean37 = instant1.isAfter((org.joda.time.ReadableInstant) instant32);
        org.joda.time.ReadableDuration readableDuration38 = null;
        org.joda.time.Instant instant39 = instant1.minus(readableDuration38);
        org.joda.time.Instant instant40 = instant39.toInstant();
        java.util.TimeZone timeZone41 = null;
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.forTimeZone(timeZone41);
        org.joda.time.chrono.GJChronology gJChronology43 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone42);
        org.joda.time.DurationField durationField44 = gJChronology43.halfdays();
        org.joda.time.DateTimeField dateTimeField45 = gJChronology43.millisOfDay();
        org.joda.time.DateTimeField dateTimeField46 = gJChronology43.minuteOfDay();
        org.joda.time.DurationField durationField47 = gJChronology43.centuries();
        org.joda.time.DateTimeField dateTimeField48 = gJChronology43.dayOfYear();
        java.lang.String str49 = gJChronology43.toString();
        org.joda.time.DateTimeField dateTimeField50 = gJChronology43.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone51 = gJChronology43.getZone();
        java.util.TimeZone timeZone52 = null;
        org.joda.time.DateTimeZone dateTimeZone53 = org.joda.time.DateTimeZone.forTimeZone(timeZone52);
        org.joda.time.chrono.GJChronology gJChronology54 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone53);
        java.util.Locale locale56 = new java.util.Locale("hi!");
        java.lang.String str57 = locale56.getCountry();
        java.util.Locale locale58 = java.util.Locale.getDefault();
        java.lang.String str59 = locale58.getDisplayName();
        java.lang.String str60 = locale56.getDisplayScript(locale58);
        boolean boolean61 = dateTimeZone53.equals((java.lang.Object) locale58);
        org.joda.time.Chronology chronology62 = gJChronology43.withZone(dateTimeZone53);
        org.joda.time.DurationField durationField63 = chronology62.minutes();
        org.joda.time.DurationField durationField64 = chronology62.weeks();
        org.joda.time.DateTime dateTime65 = instant39.toDateTime(chronology62);
        org.joda.time.DateTimeField dateTimeField66 = chronology62.monthOfYear();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and dateTime65", (instant1.compareTo(dateTime65) == 0) == instant1.equals(dateTime65));
    }

    @Test
    public void test1561() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1561");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField3 = gJChronology2.era();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.centuryOfEra();
        org.joda.time.DurationField durationField5 = gJChronology2.hours();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology2.monthOfYear();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology2.dayOfWeek();
        org.joda.time.Chronology chronology8 = gJChronology2.withUTC();
        org.joda.time.DurationField durationField9 = gJChronology2.centuries();
        java.util.TimeZone timeZone10 = null;
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forTimeZone(timeZone10);
        java.lang.String str13 = dateTimeZone11.getNameKey((long) 100);
        boolean boolean14 = dateTimeZone11.isFixed();
        org.joda.time.chrono.GJChronology gJChronology15 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone11);
        int int16 = gJChronology15.getMinimumDaysInFirstWeek();
        java.lang.String str17 = gJChronology15.toString();
        org.joda.time.DateTimeField dateTimeField18 = gJChronology15.yearOfEra();
        org.joda.time.DateTimeField dateTimeField19 = gJChronology15.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField20 = gJChronology15.dayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology22 = gJChronology15.withZone(dateTimeZone21);
        org.joda.time.DateTimeField dateTimeField23 = chronology22.millisOfSecond();
        java.util.TimeZone timeZone24 = null;
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forTimeZone(timeZone24);
        org.joda.time.chrono.GJChronology gJChronology26 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone25);
        int int28 = dateTimeZone25.getOffsetFromLocal((long) (-1));
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forOffsetHours((int) '4');
        long long32 = dateTimeZone25.getMillisKeepLocal(dateTimeZone30, (-8380800000L));
        org.joda.time.Chronology chronology33 = chronology22.withZone(dateTimeZone25);
        java.util.TimeZone timeZone34 = null;
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.forTimeZone(timeZone34);
        org.joda.time.chrono.GJChronology gJChronology36 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone35);
        org.joda.time.DurationField durationField37 = gJChronology36.halfdays();
        java.util.TimeZone timeZone38 = null;
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.forTimeZone(timeZone38);
        org.joda.time.chrono.GJChronology gJChronology40 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone39);
        long long44 = dateTimeZone39.convertLocalToUTC((long) (byte) -1, true, 0L);
        boolean boolean46 = dateTimeZone39.equals((java.lang.Object) true);
        org.joda.time.Chronology chronology47 = gJChronology36.withZone(dateTimeZone39);
        org.joda.time.LocalDateTime localDateTime48 = null;
        boolean boolean49 = dateTimeZone39.isLocalDateTimeGap(localDateTime48);
        boolean boolean50 = dateTimeZone39.isFixed();
        long long52 = dateTimeZone25.getMillisKeepLocal(dateTimeZone39, (long) (short) -1);
        org.joda.time.Chronology chronology53 = gJChronology2.withZone(dateTimeZone39);
        org.joda.time.Instant instant55 = new org.joda.time.Instant(52L);
        boolean boolean56 = instant55.isEqualNow();
        java.lang.String str57 = instant55.toString();
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.MutableDateTime mutableDateTime59 = instant55.toMutableDateTime(chronology58);
        org.joda.time.MutableDateTime mutableDateTime60 = instant55.toMutableDateTime();
        org.joda.time.MutableDateTime mutableDateTime61 = instant55.toMutableDateTime();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter62 = null;
        java.lang.String str63 = instant55.toString(dateTimeFormatter62);
        org.joda.time.chrono.GJChronology gJChronology64 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone39, (org.joda.time.ReadableInstant) instant55);
        org.joda.time.ReadableDuration readableDuration65 = null;
        org.joda.time.Instant instant66 = instant55.minus(readableDuration65);
        java.util.Date date67 = instant66.toDate();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant66 and mutableDateTime59", (instant66.compareTo(mutableDateTime59) == 0) == instant66.equals(mutableDateTime59));
    }

    @Test
    public void test1562() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1562");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = gJChronology2.halfdays();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology2.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology2.year();
        org.joda.time.DurationField durationField8 = gJChronology2.eras();
        java.util.TimeZone timeZone9 = null;
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forTimeZone(timeZone9);
        org.joda.time.chrono.GJChronology gJChronology11 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone10);
        org.joda.time.DurationField durationField12 = gJChronology11.halfdays();
        java.util.TimeZone timeZone13 = null;
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forTimeZone(timeZone13);
        org.joda.time.chrono.GJChronology gJChronology15 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone14);
        long long19 = dateTimeZone14.convertLocalToUTC((long) (byte) -1, true, 0L);
        boolean boolean21 = dateTimeZone14.equals((java.lang.Object) true);
        org.joda.time.Chronology chronology22 = gJChronology11.withZone(dateTimeZone14);
        org.joda.time.LocalDateTime localDateTime23 = null;
        boolean boolean24 = dateTimeZone14.isLocalDateTimeGap(localDateTime23);
        org.joda.time.chrono.GJChronology gJChronology25 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone14);
        java.lang.String str27 = dateTimeZone14.getNameKey((long) 97);
        boolean boolean29 = dateTimeZone14.isStandardOffset(31556952000L);
        long long32 = dateTimeZone14.convertLocalToUTC(714873600000L, true);
        org.joda.time.Chronology chronology33 = gJChronology2.withZone(dateTimeZone14);
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField3 and durationField8", Math.signum(durationField3.compareTo(durationField8)) == -Math.signum(durationField8.compareTo(durationField3)));
    }

    @Test
    public void test1563() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1563");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = gJChronology2.halfdays();
        long long7 = gJChronology2.add((long) 'a', (-1L), (int) (short) 0);
        org.joda.time.DateTimeField dateTimeField8 = gJChronology2.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField9 = gJChronology2.centuryOfEra();
        org.joda.time.DurationField durationField10 = gJChronology2.millis();
        org.joda.time.DurationField durationField11 = gJChronology2.eras();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField11, durationField3, and durationField10", !(durationField11.compareTo(durationField3) == 0) || (Math.signum(durationField11.compareTo(durationField10)) == Math.signum(durationField3.compareTo(durationField10))));
    }

    @Test
    public void test1564() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1564");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forTimeZone(timeZone2);
        org.joda.time.chrono.GJChronology gJChronology4 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone3);
        org.joda.time.DateTimeField dateTimeField5 = gJChronology4.millisOfSecond();
        int int6 = instant1.get(dateTimeField5);
        org.joda.time.Instant instant8 = instant1.plus(0L);
        org.joda.time.Instant instant9 = instant8.toInstant();
        org.joda.time.Instant instant11 = new org.joda.time.Instant(52L);
        boolean boolean12 = instant11.isEqualNow();
        java.lang.String str13 = instant11.toString();
        java.lang.String str14 = instant11.toString();
        org.joda.time.Instant instant16 = new org.joda.time.Instant(52L);
        boolean boolean17 = instant16.isEqualNow();
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.Instant instant19 = instant16.plus(readableDuration18);
        boolean boolean20 = instant11.isBefore((org.joda.time.ReadableInstant) instant19);
        org.joda.time.Instant instant22 = instant11.minus((long) 0);
        int int23 = instant8.compareTo((org.joda.time.ReadableInstant) instant11);
        org.joda.time.Instant instant26 = instant11.withDurationAdded((long) (short) 100, 70);
        org.joda.time.ReadableInstant readableInstant27 = null;
        boolean boolean28 = instant11.isBefore(readableInstant27);
        org.joda.time.ReadableDuration readableDuration29 = null;
        org.joda.time.Instant instant31 = instant11.withDurationAdded(readableDuration29, 10);
        org.joda.time.Instant instant32 = instant11.toInstant();
        org.joda.time.Instant instant34 = instant11.withMillis((long) 7816188);
        java.util.TimeZone timeZone35 = null;
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.forTimeZone(timeZone35);
        org.joda.time.chrono.GJChronology gJChronology37 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone36);
        org.joda.time.DurationField durationField38 = gJChronology37.halfdays();
        org.joda.time.Chronology chronology39 = gJChronology37.withUTC();
        java.lang.String str40 = gJChronology37.toString();
        org.joda.time.DateTimeField dateTimeField41 = gJChronology37.hourOfHalfday();
        long long45 = gJChronology37.add(97L, (long) (byte) 100, 0);
        org.joda.time.DateTimeField dateTimeField46 = gJChronology37.clockhourOfHalfday();
        org.joda.time.DurationField durationField47 = gJChronology37.weeks();
        org.joda.time.Chronology chronology48 = gJChronology37.withUTC();
        org.joda.time.DateTimeField dateTimeField49 = chronology48.yearOfCentury();
        org.joda.time.DateTime dateTime50 = instant11.toDateTime(chronology48);
        org.joda.time.DateTimeZone dateTimeZone51 = instant11.getZone();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and dateTime50", (instant1.compareTo(dateTime50) == 0) == instant1.equals(dateTime50));
    }

    @Test
    public void test1565() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1565");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        boolean boolean2 = instant1.isEqualNow();
        org.joda.time.ReadableDuration readableDuration3 = null;
        org.joda.time.Instant instant4 = instant1.plus(readableDuration3);
        java.util.Date date5 = instant4.toDate();
        org.joda.time.DateTime dateTime6 = instant4.toDateTime();
        org.joda.time.Instant instant8 = instant4.minus((-17035938075906L));
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant4 and dateTime6", (instant4.compareTo(dateTime6) == 0) == instant4.equals(dateTime6));
    }

    @Test
    public void test1566() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1566");
        org.joda.time.Instant instant0 = org.joda.time.Instant.now();
        boolean boolean2 = instant0.isBefore(0L);
        org.joda.time.Instant instant4 = new org.joda.time.Instant(52L);
        org.joda.time.Instant instant6 = instant4.withMillis((long) 'u');
        java.util.TimeZone timeZone7 = null;
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forTimeZone(timeZone7);
        org.joda.time.chrono.GJChronology gJChronology9 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone8);
        org.joda.time.DurationField durationField10 = gJChronology9.halfdays();
        long long14 = gJChronology9.add((long) 'a', (-1L), (int) (short) 0);
        boolean boolean16 = gJChronology9.equals((java.lang.Object) 0);
        org.joda.time.DateTimeField dateTimeField17 = gJChronology9.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField18 = gJChronology9.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField19 = gJChronology9.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField20 = gJChronology9.clockhourOfHalfday();
        org.joda.time.DateTime dateTime21 = instant4.toDateTime((org.joda.time.Chronology) gJChronology9);
        boolean boolean22 = instant0.isEqual((org.joda.time.ReadableInstant) dateTime21);
        java.util.TimeZone timeZone23 = null;
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forTimeZone(timeZone23);
        org.joda.time.chrono.GJChronology gJChronology25 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone24);
        org.joda.time.DurationField durationField26 = gJChronology25.halfdays();
        org.joda.time.DateTimeField dateTimeField27 = gJChronology25.millisOfDay();
        org.joda.time.DateTimeField dateTimeField28 = gJChronology25.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField29 = gJChronology25.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone30 = gJChronology25.getZone();
        boolean boolean31 = dateTimeZone30.isFixed();
        boolean boolean32 = dateTimeZone30.isFixed();
        java.lang.String str33 = dateTimeZone30.toString();
        org.joda.time.chrono.GJChronology gJChronology34 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone30);
        org.joda.time.MutableDateTime mutableDateTime35 = dateTime21.toMutableDateTime((org.joda.time.Chronology) gJChronology34);
        java.util.TimeZone timeZone36 = null;
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.forTimeZone(timeZone36);
        org.joda.time.chrono.GJChronology gJChronology38 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone37);
        org.joda.time.DurationField durationField39 = gJChronology38.halfdays();
        long long43 = gJChronology38.add(0L, (long) (short) -1, (int) '4');
        java.util.TimeZone timeZone44 = null;
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.forTimeZone(timeZone44);
        org.joda.time.chrono.GJChronology gJChronology46 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone45);
        org.joda.time.DurationField durationField47 = gJChronology46.halfdays();
        org.joda.time.DateTimeField dateTimeField48 = gJChronology46.millisOfDay();
        org.joda.time.DateTimeField dateTimeField49 = gJChronology46.minuteOfDay();
        org.joda.time.DurationField durationField50 = gJChronology46.centuries();
        org.joda.time.DateTimeField dateTimeField51 = gJChronology46.dayOfYear();
        java.lang.String str52 = gJChronology46.toString();
        org.joda.time.DurationField durationField53 = gJChronology46.years();
        org.joda.time.DateTimeField dateTimeField54 = gJChronology46.yearOfEra();
        org.joda.time.DateTimeZone dateTimeZone57 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(0, (int) (short) 10);
        org.joda.time.Chronology chronology58 = gJChronology46.withZone(dateTimeZone57);
        org.joda.time.Chronology chronology59 = gJChronology38.withZone(dateTimeZone57);
        org.joda.time.DurationField durationField60 = gJChronology38.halfdays();
        org.joda.time.Instant instant61 = gJChronology38.getGregorianCutover();
        org.joda.time.Instant instant63 = instant61.withMillis((long) (short) -1);
        long long64 = instant61.getMillis();
        org.joda.time.DateTimeZone dateTimeZone65 = instant61.getZone();
        long long68 = dateTimeZone65.convertLocalToUTC(7092000000000L, true);
        java.lang.String str69 = dateTimeZone65.getID();
        java.util.Locale.Builder builder71 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder72 = builder71.clear();
        java.util.Locale.Builder builder74 = builder72.removeUnicodeLocaleAttribute("und");
        java.util.Locale locale75 = builder74.build();
        java.lang.String str76 = locale75.getDisplayName();
        java.util.Locale locale77 = java.util.Locale.ITALIAN;
        java.util.Locale locale78 = locale77.stripExtensions();
        java.lang.String str79 = locale77.getDisplayVariant();
        java.util.Set<java.lang.String> strSet80 = locale77.getUnicodeLocaleKeys();
        java.lang.String str81 = locale75.getDisplayName(locale77);
        java.lang.String str82 = locale75.getISO3Language();
        java.util.Set<java.lang.Character> charSet83 = locale75.getExtensionKeys();
        java.util.Locale locale86 = new java.util.Locale("English (United States)", "");
        java.util.Locale locale87 = java.util.Locale.GERMAN;
        java.lang.String str88 = locale87.getCountry();
        java.lang.String str89 = locale87.getDisplayName();
        java.util.Locale locale90 = java.util.Locale.CANADA;
        java.lang.String str91 = locale90.getDisplayVariant();
        java.lang.String str92 = locale87.getDisplayCountry(locale90);
        java.lang.String str93 = locale90.getCountry();
        java.lang.String str94 = locale86.getDisplayLanguage(locale90);
        java.util.Set<java.lang.String> strSet95 = locale90.getUnicodeLocaleKeys();
        java.lang.String str96 = locale75.getDisplayLanguage(locale90);
        java.lang.String str97 = dateTimeZone65.getName(5935258842600053L, locale75);
        boolean boolean98 = mutableDateTime35.equals((java.lang.Object) str97);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant4 and dateTime21", (instant4.compareTo(dateTime21) == 0) == instant4.equals(dateTime21));
    }

    @Test
    public void test1567() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1567");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField3 = gJChronology2.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.weekyearOfCentury();
        org.joda.time.Instant instant5 = gJChronology2.getGregorianCutover();
        org.joda.time.Instant instant7 = instant5.withMillis(0L);
        org.joda.time.Chronology chronology8 = instant5.getChronology();
        org.joda.time.Instant instant9 = org.joda.time.Instant.now();
        org.joda.time.Instant instant12 = instant9.withDurationAdded(306102434400000L, (int) (short) 100);
        java.util.TimeZone timeZone13 = null;
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forTimeZone(timeZone13);
        org.joda.time.chrono.GJChronology gJChronology15 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone14);
        long long19 = dateTimeZone14.convertLocalToUTC((long) (byte) -1, true, 0L);
        boolean boolean21 = dateTimeZone14.equals((java.lang.Object) true);
        long long23 = dateTimeZone14.nextTransition((long) '4');
        java.lang.String str25 = dateTimeZone14.getShortName(432000001L);
        java.util.TimeZone timeZone26 = dateTimeZone14.toTimeZone();
        org.joda.time.DateTime dateTime27 = instant9.toDateTime(dateTimeZone14);
        org.joda.time.Instant instant29 = new org.joda.time.Instant(52L);
        boolean boolean30 = instant29.isEqualNow();
        org.joda.time.ReadableDuration readableDuration31 = null;
        org.joda.time.Instant instant32 = instant29.plus(readableDuration31);
        long long33 = instant29.getMillis();
        java.lang.String str34 = instant29.toString();
        org.joda.time.Instant instant35 = instant29.toInstant();
        org.joda.time.ReadableDuration readableDuration36 = null;
        org.joda.time.Instant instant38 = instant29.withDurationAdded(readableDuration36, (int) 'x');
        org.joda.time.Instant instant39 = instant29.toInstant();
        java.util.Date date40 = instant29.toDate();
        long long41 = instant29.getMillis();
        boolean boolean42 = dateTime27.isEqual((org.joda.time.ReadableInstant) instant29);
        int int43 = instant5.compareTo((org.joda.time.ReadableInstant) dateTime27);
        java.util.TimeZone timeZone44 = null;
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.forTimeZone(timeZone44);
        org.joda.time.chrono.GJChronology gJChronology46 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone45);
        org.joda.time.DateTimeField dateTimeField47 = gJChronology46.era();
        org.joda.time.DateTimeField dateTimeField48 = gJChronology46.weekyear();
        org.joda.time.DateTimeField dateTimeField49 = gJChronology46.weekyearOfCentury();
        org.joda.time.DurationField durationField50 = gJChronology46.millis();
        org.joda.time.DateTimeField dateTimeField51 = gJChronology46.dayOfWeek();
        org.joda.time.DurationField durationField52 = gJChronology46.millis();
        org.joda.time.Instant instant53 = gJChronology46.getGregorianCutover();
        org.joda.time.Instant instant54 = instant53.toInstant();
        org.joda.time.Instant instant56 = instant54.minus((-9903L));
        int int57 = instant5.compareTo((org.joda.time.ReadableInstant) instant54);
        java.util.TimeZone timeZone58 = null;
        org.joda.time.DateTimeZone dateTimeZone59 = org.joda.time.DateTimeZone.forTimeZone(timeZone58);
        org.joda.time.chrono.GJChronology gJChronology60 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone59);
        org.joda.time.DateTimeField dateTimeField61 = gJChronology60.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField62 = gJChronology60.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField63 = gJChronology60.minuteOfHour();
        org.joda.time.DurationField durationField64 = gJChronology60.centuries();
        org.joda.time.Chronology chronology65 = gJChronology60.withUTC();
        org.joda.time.DateTimeField dateTimeField66 = gJChronology60.yearOfEra();
        org.joda.time.DateTime dateTime67 = instant54.toDateTime((org.joda.time.Chronology) gJChronology60);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant9 and dateTime27", (instant9.compareTo(dateTime27) == 0) == instant9.equals(dateTime27));
    }

    @Test
    public void test1568() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1568");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        boolean boolean2 = instant1.isEqualNow();
        java.lang.String str3 = instant1.toString();
        org.joda.time.Instant instant5 = new org.joda.time.Instant(52L);
        boolean boolean6 = instant5.isEqualNow();
        java.lang.String str7 = instant5.toString();
        java.lang.String str8 = instant5.toString();
        org.joda.time.Instant instant11 = instant5.withDurationAdded(115200000L, (int) (short) 1);
        int int12 = instant1.compareTo((org.joda.time.ReadableInstant) instant5);
        org.joda.time.Instant instant14 = new org.joda.time.Instant(52L);
        boolean boolean15 = instant14.isEqualNow();
        org.joda.time.ReadableDuration readableDuration16 = null;
        org.joda.time.Instant instant17 = instant14.plus(readableDuration16);
        boolean boolean19 = instant17.equals((java.lang.Object) ' ');
        boolean boolean20 = instant5.isAfter((org.joda.time.ReadableInstant) instant17);
        org.joda.time.DateTime dateTime21 = instant5.toDateTime();
        org.joda.time.ReadableDuration readableDuration22 = null;
        org.joda.time.Instant instant24 = instant5.withDurationAdded(readableDuration22, 52);
        java.lang.String str25 = instant24.toString();
        org.joda.time.DateTime dateTime26 = instant24.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration27 = null;
        org.joda.time.Instant instant28 = instant24.minus(readableDuration27);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and dateTime21", (instant1.compareTo(dateTime21) == 0) == instant1.equals(dateTime21));
    }

    @Test
    public void test1569() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1569");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forTimeZone(timeZone2);
        org.joda.time.chrono.GJChronology gJChronology4 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone3);
        org.joda.time.DateTimeField dateTimeField5 = gJChronology4.millisOfSecond();
        int int6 = instant1.get(dateTimeField5);
        boolean boolean7 = instant1.isEqualNow();
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.Instant instant10 = instant1.withDurationAdded(readableDuration8, (int) (short) 0);
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.Instant instant12 = instant1.plus(readableDuration11);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = null;
        java.lang.String str14 = instant1.toString(dateTimeFormatter13);
        org.joda.time.Instant instant17 = instant1.withDurationAdded((long) (byte) 1, 0);
        java.lang.String str18 = instant1.toString();
        boolean boolean19 = instant1.isBeforeNow();
        org.joda.time.Instant instant22 = instant1.withDurationAdded(3282249600000L, (int) (short) 0);
        org.joda.time.DateTime dateTime23 = instant22.toDateTimeISO();
        java.util.TimeZone timeZone24 = null;
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forTimeZone(timeZone24);
        org.joda.time.chrono.GJChronology gJChronology26 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone25);
        org.joda.time.DateTimeField dateTimeField27 = gJChronology26.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField28 = gJChronology26.weekyearOfCentury();
        org.joda.time.Instant instant29 = gJChronology26.getGregorianCutover();
        org.joda.time.Instant instant31 = instant29.withMillis(0L);
        org.joda.time.Instant instant33 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone34 = null;
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.forTimeZone(timeZone34);
        org.joda.time.chrono.GJChronology gJChronology36 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone35);
        org.joda.time.DateTimeField dateTimeField37 = gJChronology36.millisOfSecond();
        int int38 = instant33.get(dateTimeField37);
        org.joda.time.Instant instant40 = instant33.plus(0L);
        int int41 = instant31.compareTo((org.joda.time.ReadableInstant) instant40);
        java.util.TimeZone timeZone42 = null;
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.forTimeZone(timeZone42);
        org.joda.time.chrono.GJChronology gJChronology44 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone43);
        org.joda.time.DurationField durationField45 = gJChronology44.halfdays();
        org.joda.time.DateTimeField dateTimeField46 = gJChronology44.millisOfDay();
        org.joda.time.DateTimeField dateTimeField47 = gJChronology44.minuteOfDay();
        org.joda.time.DurationField durationField48 = gJChronology44.centuries();
        org.joda.time.DateTimeField dateTimeField49 = gJChronology44.halfdayOfDay();
        java.util.Locale locale50 = java.util.Locale.ITALIAN;
        java.util.Locale locale51 = locale50.stripExtensions();
        java.util.Locale locale52 = java.util.Locale.CANADA;
        java.lang.String str53 = locale50.getDisplayVariant(locale52);
        boolean boolean54 = gJChronology44.equals((java.lang.Object) locale52);
        org.joda.time.DateTime dateTime55 = instant31.toDateTime((org.joda.time.Chronology) gJChronology44);
        boolean boolean57 = dateTime55.equals((java.lang.Object) "-01:52 (CANADA)");
        boolean boolean58 = instant22.isBefore((org.joda.time.ReadableInstant) dateTime55);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant22 and dateTime23", (instant22.compareTo(dateTime23) == 0) == instant22.equals(dateTime23));
    }

    @Test
    public void test1570() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1570");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        long long6 = dateTimeZone1.convertLocalToUTC((long) (byte) -1, true, 0L);
        boolean boolean8 = dateTimeZone1.equals((java.lang.Object) true);
        java.util.Locale locale10 = java.util.Locale.getDefault();
        java.lang.String str11 = locale10.getDisplayLanguage();
        java.lang.String str12 = locale10.toLanguageTag();
        java.lang.String str13 = dateTimeZone1.getShortName(0L, locale10);
        java.util.TimeZone timeZone14 = null;
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forTimeZone(timeZone14);
        org.joda.time.chrono.GJChronology gJChronology16 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone15);
        org.joda.time.DateTimeField dateTimeField17 = gJChronology16.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField18 = gJChronology16.weekyearOfCentury();
        org.joda.time.Instant instant19 = gJChronology16.getGregorianCutover();
        org.joda.time.Instant instant21 = instant19.withMillis(0L);
        org.joda.time.chrono.GJChronology gJChronology23 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1, (org.joda.time.ReadableInstant) instant19, 4);
        java.util.TimeZone timeZone24 = null;
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forTimeZone(timeZone24);
        org.joda.time.chrono.GJChronology gJChronology26 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone25);
        org.joda.time.DateTimeField dateTimeField27 = gJChronology26.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField28 = gJChronology26.weekyearOfCentury();
        org.joda.time.Instant instant29 = gJChronology26.getGregorianCutover();
        org.joda.time.Instant instant31 = instant29.withMillis(0L);
        org.joda.time.Instant instant33 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone34 = null;
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.forTimeZone(timeZone34);
        org.joda.time.chrono.GJChronology gJChronology36 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone35);
        org.joda.time.DateTimeField dateTimeField37 = gJChronology36.millisOfSecond();
        int int38 = instant33.get(dateTimeField37);
        org.joda.time.Instant instant40 = instant33.plus(0L);
        int int41 = instant31.compareTo((org.joda.time.ReadableInstant) instant40);
        org.joda.time.Instant instant43 = new org.joda.time.Instant(52L);
        boolean boolean44 = instant43.isEqualNow();
        org.joda.time.ReadableDuration readableDuration45 = null;
        org.joda.time.Instant instant46 = instant43.plus(readableDuration45);
        boolean boolean48 = instant46.equals((java.lang.Object) ' ');
        boolean boolean49 = instant40.isEqual((org.joda.time.ReadableInstant) instant46);
        java.lang.String str50 = instant40.toString();
        org.joda.time.ReadableDuration readableDuration51 = null;
        org.joda.time.Instant instant53 = instant40.withDurationAdded(readableDuration51, 1431201);
        int int54 = dateTimeZone1.getOffset((org.joda.time.ReadableInstant) instant40);
        org.joda.time.DateTime dateTime55 = instant40.toDateTime();
        long long56 = instant40.getMillis();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant40 and dateTime55", (instant40.compareTo(dateTime55) == 0) == instant40.equals(dateTime55));
    }

    @Test
    public void test1571() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1571");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        int int4 = dateTimeZone1.getOffsetFromLocal(1000L);
        java.util.Locale locale7 = java.util.Locale.forLanguageTag("");
        java.lang.String str8 = dateTimeZone1.getName(43201764L, locale7);
        org.joda.time.Instant instant9 = new org.joda.time.Instant((java.lang.Object) 43201764L);
        java.util.TimeZone timeZone10 = null;
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forTimeZone(timeZone10);
        org.joda.time.chrono.GJChronology gJChronology12 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone11);
        long long16 = dateTimeZone11.convertLocalToUTC((long) (byte) -1, true, 0L);
        java.lang.String str18 = dateTimeZone11.getNameKey((long) (short) 0);
        boolean boolean20 = dateTimeZone11.equals((java.lang.Object) 10);
        org.joda.time.MutableDateTime mutableDateTime21 = instant9.toMutableDateTime(dateTimeZone11);
        java.util.TimeZone timeZone22 = null;
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        org.joda.time.chrono.GJChronology gJChronology24 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone23);
        org.joda.time.DurationField durationField25 = gJChronology24.halfdays();
        org.joda.time.DateTimeField dateTimeField26 = gJChronology24.millisOfDay();
        org.joda.time.DateTimeField dateTimeField27 = gJChronology24.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField28 = gJChronology24.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField29 = gJChronology24.monthOfYear();
        int int30 = instant9.get(dateTimeField29);
        org.joda.time.Instant instant32 = new org.joda.time.Instant(52L);
        boolean boolean33 = instant32.isEqualNow();
        java.lang.String str34 = instant32.toString();
        java.lang.String str35 = instant32.toString();
        org.joda.time.Instant instant37 = new org.joda.time.Instant(52L);
        boolean boolean38 = instant37.isEqualNow();
        java.lang.String str39 = instant37.toString();
        java.lang.String str40 = instant37.toString();
        org.joda.time.Instant instant43 = instant37.withDurationAdded(115200000L, (int) (short) 1);
        boolean boolean44 = instant43.isBeforeNow();
        boolean boolean45 = instant32.isBefore((org.joda.time.ReadableInstant) instant43);
        int int46 = instant9.compareTo((org.joda.time.ReadableInstant) instant32);
        java.util.TimeZone timeZone47 = null;
        org.joda.time.DateTimeZone dateTimeZone48 = org.joda.time.DateTimeZone.forTimeZone(timeZone47);
        org.joda.time.chrono.GJChronology gJChronology49 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone48);
        org.joda.time.DurationField durationField50 = gJChronology49.halfdays();
        org.joda.time.DateTimeField dateTimeField51 = gJChronology49.millisOfDay();
        org.joda.time.DateTimeField dateTimeField52 = gJChronology49.minuteOfDay();
        org.joda.time.DurationField durationField53 = gJChronology49.centuries();
        org.joda.time.DateTimeField dateTimeField54 = gJChronology49.yearOfCentury();
        org.joda.time.Chronology chronology55 = gJChronology49.withUTC();
        org.joda.time.DateTimeZone dateTimeZone56 = gJChronology49.getZone();
        java.lang.String str58 = dateTimeZone56.getName((long) 100);
        org.joda.time.MutableDateTime mutableDateTime59 = instant32.toMutableDateTime(dateTimeZone56);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant9 and mutableDateTime21", (instant9.compareTo(mutableDateTime21) == 0) == instant9.equals(mutableDateTime21));
    }

    @Test
    public void test1572() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1572");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        boolean boolean2 = instant1.isEqualNow();
        java.lang.String str3 = instant1.toString();
        java.lang.String str4 = instant1.toString();
        org.joda.time.Instant instant6 = new org.joda.time.Instant(52L);
        boolean boolean7 = instant6.isEqualNow();
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.Instant instant9 = instant6.plus(readableDuration8);
        boolean boolean10 = instant1.isBefore((org.joda.time.ReadableInstant) instant9);
        org.joda.time.Instant instant12 = new org.joda.time.Instant(52L);
        boolean boolean13 = instant12.isEqualNow();
        org.joda.time.ReadableDuration readableDuration14 = null;
        org.joda.time.Instant instant15 = instant12.plus(readableDuration14);
        long long16 = instant12.getMillis();
        java.lang.String str17 = instant12.toString();
        org.joda.time.Instant instant18 = instant12.toInstant();
        boolean boolean19 = instant9.isAfter((org.joda.time.ReadableInstant) instant12);
        org.joda.time.DateTime dateTime20 = instant9.toDateTime();
        java.lang.String str21 = instant9.toString();
        boolean boolean23 = instant9.isEqual((-7304862L));
        java.util.Date date24 = instant9.toDate();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and dateTime20", (instant1.compareTo(dateTime20) == 0) == instant1.equals(dateTime20));
    }

    @Test
    public void test1573() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1573");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        boolean boolean2 = instant1.isEqualNow();
        org.joda.time.ReadableDuration readableDuration3 = null;
        org.joda.time.Instant instant4 = instant1.plus(readableDuration3);
        org.joda.time.Instant instant6 = instant1.withMillis((long) 4);
        boolean boolean7 = instant6.isBeforeNow();
        boolean boolean9 = instant6.isBefore(5185792L);
        org.joda.time.MutableDateTime mutableDateTime10 = instant6.toMutableDateTime();
        org.joda.time.Instant instant11 = instant6.toInstant();
        org.joda.time.Instant instant13 = instant6.minus((long) (-3));
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime10 and instant6", (mutableDateTime10.compareTo(instant6) == 0) == mutableDateTime10.equals(instant6));
    }

    @Test
    public void test1574() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1574");
        org.joda.time.Instant instant0 = org.joda.time.Instant.now();
        org.joda.time.Instant instant3 = instant0.withDurationAdded(306102434400000L, (int) (short) 100);
        java.util.TimeZone timeZone4 = null;
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forTimeZone(timeZone4);
        org.joda.time.chrono.GJChronology gJChronology6 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone5);
        long long10 = dateTimeZone5.convertLocalToUTC((long) (byte) -1, true, 0L);
        boolean boolean12 = dateTimeZone5.equals((java.lang.Object) true);
        long long14 = dateTimeZone5.nextTransition((long) '4');
        java.lang.String str16 = dateTimeZone5.getShortName(432000001L);
        java.util.TimeZone timeZone17 = dateTimeZone5.toTimeZone();
        org.joda.time.DateTime dateTime18 = instant0.toDateTime(dateTimeZone5);
        org.joda.time.Instant instant20 = new org.joda.time.Instant(52L);
        boolean boolean21 = instant20.isEqualNow();
        org.joda.time.ReadableDuration readableDuration22 = null;
        org.joda.time.Instant instant23 = instant20.plus(readableDuration22);
        long long24 = instant20.getMillis();
        java.lang.String str25 = instant20.toString();
        org.joda.time.Instant instant26 = instant20.toInstant();
        org.joda.time.ReadableDuration readableDuration27 = null;
        org.joda.time.Instant instant29 = instant20.withDurationAdded(readableDuration27, (int) 'x');
        org.joda.time.Instant instant30 = instant20.toInstant();
        java.util.Date date31 = instant20.toDate();
        long long32 = instant20.getMillis();
        boolean boolean33 = dateTime18.isEqual((org.joda.time.ReadableInstant) instant20);
        org.joda.time.Chronology chronology34 = instant20.getChronology();
        org.joda.time.Instant instant36 = new org.joda.time.Instant(52L);
        boolean boolean37 = instant36.isEqualNow();
        java.lang.String str38 = instant36.toString();
        java.util.TimeZone timeZone39 = null;
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.forTimeZone(timeZone39);
        org.joda.time.chrono.GJChronology gJChronology41 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone40);
        java.util.Locale locale43 = new java.util.Locale("hi!");
        java.lang.String str44 = locale43.getCountry();
        java.util.Locale locale45 = java.util.Locale.getDefault();
        java.lang.String str46 = locale45.getDisplayName();
        java.lang.String str47 = locale43.getDisplayScript(locale45);
        boolean boolean48 = dateTimeZone40.equals((java.lang.Object) locale45);
        int int50 = dateTimeZone40.getOffsetFromLocal((long) (short) 10);
        java.util.TimeZone timeZone51 = null;
        org.joda.time.DateTimeZone dateTimeZone52 = org.joda.time.DateTimeZone.forTimeZone(timeZone51);
        org.joda.time.chrono.GJChronology gJChronology53 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone52);
        org.joda.time.DateTimeField dateTimeField54 = gJChronology53.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField55 = gJChronology53.weekyearOfCentury();
        org.joda.time.Instant instant56 = gJChronology53.getGregorianCutover();
        org.joda.time.Instant instant58 = instant56.withMillis(0L);
        org.joda.time.Instant instant60 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone61 = null;
        org.joda.time.DateTimeZone dateTimeZone62 = org.joda.time.DateTimeZone.forTimeZone(timeZone61);
        org.joda.time.chrono.GJChronology gJChronology63 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone62);
        org.joda.time.DateTimeField dateTimeField64 = gJChronology63.millisOfSecond();
        int int65 = instant60.get(dateTimeField64);
        org.joda.time.Instant instant67 = instant60.plus(0L);
        int int68 = instant58.compareTo((org.joda.time.ReadableInstant) instant67);
        org.joda.time.DateTimeFieldType dateTimeFieldType69 = null;
        boolean boolean70 = instant67.isSupported(dateTimeFieldType69);
        int int71 = dateTimeZone40.getOffset((org.joda.time.ReadableInstant) instant67);
        boolean boolean72 = instant36.isAfter((org.joda.time.ReadableInstant) instant67);
        org.joda.time.ReadableDuration readableDuration73 = null;
        org.joda.time.Instant instant75 = instant36.withDurationAdded(readableDuration73, 1);
        boolean boolean76 = instant75.isEqualNow();
        org.joda.time.Instant instant77 = instant75.toInstant();
        long long78 = instant75.getMillis();
        boolean boolean79 = instant20.isEqual((org.joda.time.ReadableInstant) instant75);
        java.util.TimeZone timeZone80 = null;
        org.joda.time.DateTimeZone dateTimeZone81 = org.joda.time.DateTimeZone.forTimeZone(timeZone80);
        org.joda.time.chrono.GJChronology gJChronology82 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone81);
        org.joda.time.DurationField durationField83 = gJChronology82.halfdays();
        long long87 = gJChronology82.add((long) 'a', (-1L), (int) (short) 0);
        boolean boolean89 = gJChronology82.equals((java.lang.Object) 0);
        org.joda.time.DateTimeField dateTimeField90 = gJChronology82.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField91 = gJChronology82.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField92 = gJChronology82.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField93 = gJChronology82.clockhourOfHalfday();
        org.joda.time.DurationField durationField94 = gJChronology82.weekyears();
        org.joda.time.DurationField durationField95 = gJChronology82.weekyears();
        org.joda.time.DateTimeField dateTimeField96 = gJChronology82.dayOfWeek();
        org.joda.time.DateTime dateTime97 = instant75.toDateTime((org.joda.time.Chronology) gJChronology82);
        org.joda.time.Instant instant99 = instant75.minus(399168000000209L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant0 and dateTime18", (instant0.compareTo(dateTime18) == 0) == instant0.equals(dateTime18));
    }

    @Test
    public void test1575() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1575");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forTimeZone(timeZone2);
        org.joda.time.chrono.GJChronology gJChronology4 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone3);
        org.joda.time.DateTimeField dateTimeField5 = gJChronology4.millisOfSecond();
        int int6 = instant1.get(dateTimeField5);
        org.joda.time.Instant instant8 = instant1.plus(0L);
        java.util.TimeZone timeZone9 = null;
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forTimeZone(timeZone9);
        org.joda.time.chrono.GJChronology gJChronology11 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone10);
        org.joda.time.DurationField durationField12 = gJChronology11.halfdays();
        org.joda.time.Chronology chronology13 = gJChronology11.withUTC();
        java.lang.String str14 = gJChronology11.toString();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology11.hourOfHalfday();
        int int16 = instant1.get(dateTimeField15);
        java.util.TimeZone timeZone17 = null;
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forTimeZone(timeZone17);
        org.joda.time.chrono.GJChronology gJChronology19 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone18);
        org.joda.time.DurationField durationField20 = gJChronology19.halfdays();
        long long24 = gJChronology19.add((long) 'a', (-1L), (int) (short) 0);
        org.joda.time.DateTimeField dateTimeField25 = gJChronology19.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField26 = gJChronology19.secondOfMinute();
        org.joda.time.Instant instant28 = new org.joda.time.Instant(52L);
        boolean boolean29 = instant28.isEqualNow();
        org.joda.time.ReadableDuration readableDuration30 = null;
        org.joda.time.Instant instant31 = instant28.plus(readableDuration30);
        boolean boolean32 = gJChronology19.equals((java.lang.Object) instant28);
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = null;
        boolean boolean34 = instant28.isSupported(dateTimeFieldType33);
        org.joda.time.DateTimeFieldType dateTimeFieldType35 = null;
        boolean boolean36 = instant28.isSupported(dateTimeFieldType35);
        org.joda.time.DateTimeZone dateTimeZone37 = instant28.getZone();
        boolean boolean38 = instant1.isAfter((org.joda.time.ReadableInstant) instant28);
        org.joda.time.Instant instant40 = instant1.minus((long) 70);
        org.joda.time.Instant instant42 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone43 = null;
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.forTimeZone(timeZone43);
        org.joda.time.chrono.GJChronology gJChronology45 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone44);
        org.joda.time.DateTimeField dateTimeField46 = gJChronology45.millisOfSecond();
        int int47 = instant42.get(dateTimeField46);
        boolean boolean48 = instant42.isEqualNow();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter49 = null;
        java.lang.String str50 = instant42.toString(dateTimeFormatter49);
        boolean boolean51 = instant1.isAfter((org.joda.time.ReadableInstant) instant42);
        org.joda.time.ReadableDuration readableDuration52 = null;
        org.joda.time.Instant instant53 = instant1.minus(readableDuration52);
        java.util.TimeZone timeZone54 = null;
        org.joda.time.DateTimeZone dateTimeZone55 = org.joda.time.DateTimeZone.forTimeZone(timeZone54);
        org.joda.time.chrono.GJChronology gJChronology56 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone55);
        org.joda.time.DateTimeField dateTimeField57 = gJChronology56.millisOfSecond();
        org.joda.time.DurationField durationField58 = gJChronology56.millis();
        org.joda.time.ReadablePeriod readablePeriod59 = null;
        long long62 = gJChronology56.add(readablePeriod59, (long) 'a', (int) '4');
        org.joda.time.DateTimeZone dateTimeZone63 = gJChronology56.getZone();
        org.joda.time.Instant instant65 = new org.joda.time.Instant(52L);
        boolean boolean66 = instant65.isEqualNow();
        org.joda.time.ReadableDuration readableDuration67 = null;
        org.joda.time.Instant instant68 = instant65.plus(readableDuration67);
        long long69 = instant65.getMillis();
        java.lang.Object obj70 = null;
        boolean boolean71 = instant65.equals(obj70);
        org.joda.time.Instant instant73 = new org.joda.time.Instant(52L);
        boolean boolean74 = instant73.isEqualNow();
        org.joda.time.ReadableDuration readableDuration75 = null;
        org.joda.time.Instant instant76 = instant73.plus(readableDuration75);
        long long77 = instant73.getMillis();
        java.lang.String str78 = instant73.toString();
        org.joda.time.Instant instant79 = instant73.toInstant();
        org.joda.time.ReadableDuration readableDuration80 = null;
        org.joda.time.Instant instant82 = instant73.withDurationAdded(readableDuration80, (int) 'x');
        org.joda.time.Instant instant83 = instant73.toInstant();
        int int84 = instant65.compareTo((org.joda.time.ReadableInstant) instant73);
        int int85 = dateTimeZone63.getOffset((org.joda.time.ReadableInstant) instant65);
        org.joda.time.DateTime dateTime86 = instant1.toDateTime(dateTimeZone63);
        int int88 = dateTimeZone63.getOffset((long) 52);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and dateTime86", (instant1.compareTo(dateTime86) == 0) == instant1.equals(dateTime86));
    }

    @Test
    public void test1576() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1576");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        boolean boolean2 = instant1.isEqualNow();
        boolean boolean4 = instant1.isEqual(0L);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = null;
        boolean boolean6 = instant1.isSupported(dateTimeFieldType5);
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.Instant instant8 = instant1.plus(readableDuration7);
        boolean boolean9 = instant1.isBeforeNow();
        boolean boolean11 = instant1.isBefore((long) 55296000);
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.Instant instant13 = instant1.minus(readableDuration12);
        org.joda.time.Instant instant14 = org.joda.time.Instant.now();
        org.joda.time.Instant instant17 = instant14.withDurationAdded(306102434400000L, (int) (short) 100);
        java.util.TimeZone timeZone18 = null;
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forTimeZone(timeZone18);
        org.joda.time.chrono.GJChronology gJChronology20 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone19);
        long long24 = dateTimeZone19.convertLocalToUTC((long) (byte) -1, true, 0L);
        boolean boolean26 = dateTimeZone19.equals((java.lang.Object) true);
        long long28 = dateTimeZone19.nextTransition((long) '4');
        java.lang.String str30 = dateTimeZone19.getShortName(432000001L);
        java.util.TimeZone timeZone31 = dateTimeZone19.toTimeZone();
        org.joda.time.DateTime dateTime32 = instant14.toDateTime(dateTimeZone19);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter33 = null;
        java.lang.String str34 = dateTime32.toString(dateTimeFormatter33);
        org.joda.time.DateTimeZone dateTimeZone35 = dateTime32.getZone();
        org.joda.time.MutableDateTime mutableDateTime36 = instant13.toMutableDateTime(dateTimeZone35);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant14 and dateTime32", (instant14.compareTo(dateTime32) == 0) == instant14.equals(dateTime32));
    }

    @Test
    public void test1577() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1577");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = gJChronology2.halfdays();
        org.joda.time.Chronology chronology4 = gJChronology2.withUTC();
        long long8 = gJChronology2.add((long) (byte) 0, 4324200000L, 4);
        long long12 = gJChronology2.add(3155760000000L, (long) (short) 10, (int) 'u');
        org.joda.time.DurationField durationField13 = gJChronology2.halfdays();
        org.joda.time.Instant instant14 = org.joda.time.Instant.now();
        org.joda.time.Instant instant17 = instant14.withDurationAdded(306102434400000L, (int) (short) 100);
        java.util.TimeZone timeZone18 = null;
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forTimeZone(timeZone18);
        org.joda.time.chrono.GJChronology gJChronology20 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone19);
        long long24 = dateTimeZone19.convertLocalToUTC((long) (byte) -1, true, 0L);
        boolean boolean26 = dateTimeZone19.equals((java.lang.Object) true);
        long long28 = dateTimeZone19.nextTransition((long) '4');
        java.lang.String str30 = dateTimeZone19.getShortName(432000001L);
        java.util.TimeZone timeZone31 = dateTimeZone19.toTimeZone();
        org.joda.time.DateTime dateTime32 = instant14.toDateTime(dateTimeZone19);
        long long34 = dateTimeZone19.convertUTCToLocal(289240205200L);
        org.joda.time.chrono.GJChronology gJChronology35 = org.joda.time.chrono.GJChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField36 = gJChronology35.era();
        org.joda.time.DateTimeField dateTimeField37 = gJChronology35.year();
        org.joda.time.DateTimeField dateTimeField38 = gJChronology35.hourOfDay();
        boolean boolean39 = dateTimeZone19.equals((java.lang.Object) dateTimeField38);
        org.joda.time.Chronology chronology40 = gJChronology2.withZone(dateTimeZone19);
        org.joda.time.DateTimeField dateTimeField41 = chronology40.weekyear();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant14 and dateTime32", (instant14.compareTo(dateTime32) == 0) == instant14.equals(dateTime32));
    }

    @Test
    public void test1578() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1578");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = gJChronology2.halfdays();
        long long7 = gJChronology2.add(0L, (long) (short) -1, (int) '4');
        java.util.TimeZone timeZone8 = null;
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forTimeZone(timeZone8);
        org.joda.time.chrono.GJChronology gJChronology10 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone9);
        org.joda.time.DurationField durationField11 = gJChronology10.halfdays();
        org.joda.time.DateTimeField dateTimeField12 = gJChronology10.millisOfDay();
        org.joda.time.DateTimeField dateTimeField13 = gJChronology10.minuteOfDay();
        org.joda.time.DurationField durationField14 = gJChronology10.centuries();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology10.dayOfYear();
        java.lang.String str16 = gJChronology10.toString();
        org.joda.time.DurationField durationField17 = gJChronology10.years();
        org.joda.time.DateTimeField dateTimeField18 = gJChronology10.yearOfEra();
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(0, (int) (short) 10);
        org.joda.time.Chronology chronology22 = gJChronology10.withZone(dateTimeZone21);
        org.joda.time.Chronology chronology23 = gJChronology2.withZone(dateTimeZone21);
        org.joda.time.DurationField durationField24 = gJChronology2.halfdays();
        org.joda.time.Instant instant25 = gJChronology2.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration26 = null;
        org.joda.time.Instant instant27 = instant25.plus(readableDuration26);
        org.joda.time.Instant instant29 = instant25.plus((long) 1155627);
        boolean boolean30 = instant29.isEqualNow();
        java.util.TimeZone timeZone31 = null;
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.forTimeZone(timeZone31);
        org.joda.time.chrono.GJChronology gJChronology33 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone32);
        org.joda.time.DateTimeField dateTimeField34 = gJChronology33.millisOfSecond();
        org.joda.time.DurationField durationField35 = gJChronology33.millis();
        org.joda.time.ReadablePeriod readablePeriod36 = null;
        long long39 = gJChronology33.add(readablePeriod36, (long) 'a', (int) '4');
        org.joda.time.DateTimeZone dateTimeZone40 = gJChronology33.getZone();
        org.joda.time.DurationField durationField41 = gJChronology33.years();
        boolean boolean42 = instant29.equals((java.lang.Object) gJChronology33);
        org.joda.time.MutableDateTime mutableDateTime43 = instant29.toMutableDateTime();
        org.joda.time.Instant instant45 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone46 = null;
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.forTimeZone(timeZone46);
        org.joda.time.chrono.GJChronology gJChronology48 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone47);
        org.joda.time.DateTimeField dateTimeField49 = gJChronology48.millisOfSecond();
        int int50 = instant45.get(dateTimeField49);
        boolean boolean51 = instant45.isEqualNow();
        org.joda.time.tz.NameProvider nameProvider52 = org.joda.time.DateTimeZone.getNameProvider();
        org.joda.time.DateTimeZone.setNameProvider(nameProvider52);
        org.joda.time.DateTimeZone.setNameProvider(nameProvider52);
        boolean boolean55 = instant45.equals((java.lang.Object) nameProvider52);
        org.joda.time.Instant instant57 = instant45.minus(0L);
        org.joda.time.ReadableDuration readableDuration58 = null;
        org.joda.time.Instant instant59 = instant45.minus(readableDuration58);
        org.joda.time.ReadableDuration readableDuration60 = null;
        org.joda.time.Instant instant62 = instant45.withDurationAdded(readableDuration60, 1582);
        java.util.TimeZone timeZone63 = null;
        org.joda.time.DateTimeZone dateTimeZone64 = org.joda.time.DateTimeZone.forTimeZone(timeZone63);
        org.joda.time.chrono.GJChronology gJChronology65 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone64);
        org.joda.time.DurationField durationField66 = gJChronology65.halfdays();
        long long70 = gJChronology65.add((long) 'a', (-1L), (int) (short) 0);
        long long74 = gJChronology65.add((long) (byte) 0, (long) '4', 100);
        org.joda.time.DateTimeField dateTimeField75 = gJChronology65.minuteOfHour();
        org.joda.time.DurationField durationField76 = gJChronology65.hours();
        org.joda.time.DateTimeField dateTimeField77 = gJChronology65.monthOfYear();
        org.joda.time.DateTimeField dateTimeField78 = gJChronology65.secondOfMinute();
        org.joda.time.Chronology chronology79 = gJChronology65.withUTC();
        org.joda.time.DateTimeField dateTimeField80 = chronology79.hourOfHalfday();
        org.joda.time.DateTime dateTime81 = instant45.toDateTime(chronology79);
        boolean boolean82 = mutableDateTime43.isBefore((org.joda.time.ReadableInstant) instant45);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant45 and dateTime81", (instant45.compareTo(dateTime81) == 0) == instant45.equals(dateTime81));
    }

    @Test
    public void test1579() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1579");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(25925166840100L);
        org.joda.time.Chronology chronology2 = instant1.getChronology();
        java.util.TimeZone timeZone3 = null;
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forTimeZone(timeZone3);
        org.joda.time.chrono.GJChronology gJChronology5 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone4);
        org.joda.time.DateTimeField dateTimeField6 = gJChronology5.millisOfSecond();
        org.joda.time.DurationField durationField7 = gJChronology5.millis();
        org.joda.time.DurationField durationField8 = gJChronology5.weeks();
        org.joda.time.DurationField durationField9 = gJChronology5.months();
        org.joda.time.DateTimeField dateTimeField10 = gJChronology5.hourOfDay();
        org.joda.time.Instant instant11 = gJChronology5.getGregorianCutover();
        int int12 = instant1.compareTo((org.joda.time.ReadableInstant) instant11);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(1, 10);
        java.lang.String str17 = dateTimeZone15.getShortName(97L);
        org.joda.time.chrono.GJChronology gJChronology20 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone15, (long) (byte) 100, 1);
        java.util.TimeZone timeZone22 = null;
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        java.lang.String str25 = dateTimeZone23.getNameKey((long) 100);
        boolean boolean26 = dateTimeZone23.isFixed();
        java.util.Locale locale30 = new java.util.Locale("DurationField[halfdays]", "\u82f1\u6587");
        java.lang.String str31 = dateTimeZone23.getName((long) (short) 10, locale30);
        org.joda.time.Instant instant33 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone34 = null;
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.forTimeZone(timeZone34);
        org.joda.time.chrono.GJChronology gJChronology36 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone35);
        org.joda.time.DateTimeField dateTimeField37 = gJChronology36.millisOfSecond();
        int int38 = instant33.get(dateTimeField37);
        org.joda.time.Chronology chronology39 = instant33.getChronology();
        org.joda.time.chrono.GJChronology gJChronology40 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone23, (org.joda.time.ReadableInstant) instant33);
        long long41 = instant33.getMillis();
        org.joda.time.ReadableDuration readableDuration42 = null;
        org.joda.time.Instant instant43 = instant33.minus(readableDuration42);
        java.util.Locale.Category category44 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale45 = java.util.Locale.getDefault();
        boolean boolean46 = locale45.hasExtensions();
        java.lang.String str47 = locale45.getISO3Language();
        java.util.Locale.setDefault(category44, locale45);
        java.util.Locale locale49 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale50 = java.util.Locale.ENGLISH;
        java.lang.String str51 = locale49.getDisplayLanguage(locale50);
        java.util.Locale locale52 = java.util.Locale.CANADA;
        java.lang.String str53 = locale52.getISO3Language();
        java.lang.String str54 = locale49.getDisplayVariant(locale52);
        java.lang.String str55 = locale49.getDisplayName();
        java.util.Locale.setDefault(category44, locale49);
        boolean boolean57 = instant33.equals((java.lang.Object) locale49);
        java.lang.String str58 = dateTimeZone15.getShortName((-2208729596000L), locale49);
        int int60 = dateTimeZone15.getStandardOffset((-599968L));
        long long63 = dateTimeZone15.adjustOffset((-248400000L), true);
        int int65 = dateTimeZone15.getOffset((-6498377280005080L));
        long long67 = dateTimeZone15.previousTransition(0L);
        org.joda.time.DateTime dateTime68 = instant11.toDateTime(dateTimeZone15);
        java.util.TimeZone timeZone69 = dateTimeZone15.toTimeZone();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant11 and dateTime68", (instant11.compareTo(dateTime68) == 0) == instant11.equals(dateTime68));
    }

    @Test
    public void test1580() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1580");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = gJChronology2.halfdays();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.millisOfDay();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.minuteOfDay();
        org.joda.time.DurationField durationField6 = gJChronology2.centuries();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology2.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField8 = gJChronology2.year();
        org.joda.time.Instant instant9 = gJChronology2.getGregorianCutover();
        java.util.TimeZone timeZone10 = null;
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forTimeZone(timeZone10);
        org.joda.time.chrono.GJChronology gJChronology12 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone11);
        org.joda.time.DurationField durationField13 = gJChronology12.halfdays();
        org.joda.time.DateTimeField dateTimeField14 = gJChronology12.millisOfDay();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology12.minuteOfDay();
        org.joda.time.DurationField durationField16 = gJChronology12.centuries();
        org.joda.time.DateTimeField dateTimeField17 = gJChronology12.dayOfYear();
        java.lang.String str18 = gJChronology12.toString();
        org.joda.time.DateTimeField dateTimeField19 = gJChronology12.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone20 = gJChronology12.getZone();
        org.joda.time.chrono.GJChronology gJChronology21 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone20);
        org.joda.time.Chronology chronology22 = gJChronology2.withZone(dateTimeZone20);
        org.joda.time.Instant instant24 = new org.joda.time.Instant(52L);
        boolean boolean25 = instant24.isEqualNow();
        java.lang.String str26 = instant24.toString();
        java.lang.String str27 = instant24.toString();
        org.joda.time.Instant instant29 = new org.joda.time.Instant(52L);
        boolean boolean30 = instant29.isEqualNow();
        org.joda.time.ReadableDuration readableDuration31 = null;
        org.joda.time.Instant instant32 = instant29.plus(readableDuration31);
        boolean boolean33 = instant24.isBefore((org.joda.time.ReadableInstant) instant32);
        org.joda.time.Instant instant35 = instant32.plus((long) (short) 100);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.MutableDateTime mutableDateTime37 = instant32.toMutableDateTime(chronology36);
        boolean boolean38 = mutableDateTime37.isEqualNow();
        org.joda.time.chrono.GJChronology gJChronology39 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone20, (org.joda.time.ReadableInstant) mutableDateTime37);
        boolean boolean41 = mutableDateTime37.isBefore((-9617619703660L));
        org.joda.time.Instant instant43 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone44 = null;
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.forTimeZone(timeZone44);
        org.joda.time.chrono.GJChronology gJChronology46 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone45);
        org.joda.time.DateTimeField dateTimeField47 = gJChronology46.millisOfSecond();
        int int48 = instant43.get(dateTimeField47);
        org.joda.time.Instant instant50 = instant43.plus(0L);
        org.joda.time.Instant instant51 = instant50.toInstant();
        org.joda.time.Instant instant53 = new org.joda.time.Instant(52L);
        boolean boolean54 = instant53.isEqualNow();
        java.lang.String str55 = instant53.toString();
        java.lang.String str56 = instant53.toString();
        org.joda.time.Instant instant58 = new org.joda.time.Instant(52L);
        boolean boolean59 = instant58.isEqualNow();
        org.joda.time.ReadableDuration readableDuration60 = null;
        org.joda.time.Instant instant61 = instant58.plus(readableDuration60);
        boolean boolean62 = instant53.isBefore((org.joda.time.ReadableInstant) instant61);
        org.joda.time.Instant instant64 = instant53.minus((long) 0);
        int int65 = instant50.compareTo((org.joda.time.ReadableInstant) instant53);
        org.joda.time.DateTime dateTime66 = instant50.toDateTimeISO();
        org.joda.time.Instant instant67 = instant50.toInstant();
        int int68 = mutableDateTime37.compareTo((org.joda.time.ReadableInstant) instant67);
        org.joda.time.MutableDateTime mutableDateTime69 = instant67.toMutableDateTime();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant24 and mutableDateTime37", (instant24.compareTo(mutableDateTime37) == 0) == instant24.equals(mutableDateTime37));
    }

    @Test
    public void test1581() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1581");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forTimeZone(timeZone2);
        org.joda.time.chrono.GJChronology gJChronology4 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone3);
        org.joda.time.DateTimeField dateTimeField5 = gJChronology4.millisOfSecond();
        int int6 = instant1.get(dateTimeField5);
        boolean boolean7 = instant1.isEqualNow();
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.Instant instant10 = instant1.withDurationAdded(readableDuration8, (int) (short) 0);
        java.lang.String str11 = instant1.toString();
        java.util.TimeZone timeZone12 = null;
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forTimeZone(timeZone12);
        org.joda.time.chrono.GJChronology gJChronology14 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone13);
        org.joda.time.DurationField durationField15 = gJChronology14.halfdays();
        long long19 = gJChronology14.add((long) 'a', (-1L), (int) (short) 0);
        long long23 = gJChronology14.add((long) (byte) 0, (long) '4', 100);
        org.joda.time.DateTimeField dateTimeField24 = gJChronology14.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField25 = gJChronology14.year();
        org.joda.time.DateTimeField dateTimeField26 = gJChronology14.era();
        org.joda.time.DateTimeField dateTimeField27 = gJChronology14.minuteOfHour();
        org.joda.time.DurationField durationField28 = gJChronology14.hours();
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forOffsetMillis((int) '4');
        java.util.TimeZone timeZone31 = dateTimeZone30.toTimeZone();
        long long34 = dateTimeZone30.adjustOffset((long) 0, false);
        int int36 = dateTimeZone30.getOffsetFromLocal((-26438399999L));
        java.util.TimeZone timeZone37 = dateTimeZone30.toTimeZone();
        java.lang.String str39 = dateTimeZone30.getShortName((-53L));
        org.joda.time.Chronology chronology40 = gJChronology14.withZone(dateTimeZone30);
        org.joda.time.DateTimeZone dateTimeZone41 = null;
        long long43 = dateTimeZone30.getMillisKeepLocal(dateTimeZone41, (long) 0);
        org.joda.time.DateTime dateTime44 = instant1.toDateTime(dateTimeZone41);
        org.joda.time.ReadableDuration readableDuration45 = null;
        org.joda.time.Instant instant46 = instant1.plus(readableDuration45);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant46 and dateTime44", (instant46.compareTo(dateTime44) == 0) == instant46.equals(dateTime44));
    }

    @Test
    public void test1582() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1582");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = gJChronology2.halfdays();
        long long7 = gJChronology2.add((long) 'a', (-1L), (int) (short) 0);
        boolean boolean9 = gJChronology2.equals((java.lang.Object) 0);
        org.joda.time.DateTimeField dateTimeField10 = gJChronology2.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField11 = gJChronology2.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField12 = gJChronology2.clockhourOfDay();
        long long17 = gJChronology2.getDateTimeMillis(10, (int) (short) 10, 4, (int) (byte) 1);
        org.joda.time.DateTimeField dateTimeField18 = gJChronology2.millisOfDay();
        java.lang.String str19 = gJChronology2.toString();
        org.joda.time.DateTimeField dateTimeField20 = gJChronology2.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField21 = gJChronology2.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField22 = gJChronology2.halfdayOfDay();
        java.util.TimeZone timeZone23 = null;
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forTimeZone(timeZone23);
        org.joda.time.chrono.GJChronology gJChronology25 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone24);
        org.joda.time.DurationField durationField26 = gJChronology25.halfdays();
        long long30 = gJChronology25.add((long) 'a', (-1L), (int) (short) 0);
        long long34 = gJChronology25.add((long) (byte) 0, (long) '4', 100);
        org.joda.time.DurationField durationField35 = gJChronology25.years();
        org.joda.time.DateTimeField dateTimeField36 = gJChronology25.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone37 = gJChronology25.getZone();
        org.joda.time.Chronology chronology38 = gJChronology2.withZone(dateTimeZone37);
        org.joda.time.DurationField durationField39 = chronology38.seconds();
        boolean boolean40 = durationField39.isPrecise();
        java.util.TimeZone timeZone41 = null;
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.forTimeZone(timeZone41);
        org.joda.time.chrono.GJChronology gJChronology43 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone42);
        int int45 = dateTimeZone42.getStandardOffset((long) (byte) 0);
        org.joda.time.Instant instant47 = new org.joda.time.Instant(52L);
        boolean boolean48 = instant47.isEqualNow();
        java.lang.String str49 = instant47.toString();
        java.util.TimeZone timeZone50 = null;
        org.joda.time.DateTimeZone dateTimeZone51 = org.joda.time.DateTimeZone.forTimeZone(timeZone50);
        org.joda.time.chrono.GJChronology gJChronology52 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone51);
        java.util.Locale locale54 = new java.util.Locale("hi!");
        java.lang.String str55 = locale54.getCountry();
        java.util.Locale locale56 = java.util.Locale.getDefault();
        java.lang.String str57 = locale56.getDisplayName();
        java.lang.String str58 = locale54.getDisplayScript(locale56);
        boolean boolean59 = dateTimeZone51.equals((java.lang.Object) locale56);
        int int61 = dateTimeZone51.getOffsetFromLocal((long) (short) 10);
        java.util.TimeZone timeZone62 = null;
        org.joda.time.DateTimeZone dateTimeZone63 = org.joda.time.DateTimeZone.forTimeZone(timeZone62);
        org.joda.time.chrono.GJChronology gJChronology64 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone63);
        org.joda.time.DateTimeField dateTimeField65 = gJChronology64.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField66 = gJChronology64.weekyearOfCentury();
        org.joda.time.Instant instant67 = gJChronology64.getGregorianCutover();
        org.joda.time.Instant instant69 = instant67.withMillis(0L);
        org.joda.time.Instant instant71 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone72 = null;
        org.joda.time.DateTimeZone dateTimeZone73 = org.joda.time.DateTimeZone.forTimeZone(timeZone72);
        org.joda.time.chrono.GJChronology gJChronology74 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone73);
        org.joda.time.DateTimeField dateTimeField75 = gJChronology74.millisOfSecond();
        int int76 = instant71.get(dateTimeField75);
        org.joda.time.Instant instant78 = instant71.plus(0L);
        int int79 = instant69.compareTo((org.joda.time.ReadableInstant) instant78);
        org.joda.time.DateTimeFieldType dateTimeFieldType80 = null;
        boolean boolean81 = instant78.isSupported(dateTimeFieldType80);
        int int82 = dateTimeZone51.getOffset((org.joda.time.ReadableInstant) instant78);
        boolean boolean83 = instant47.isAfter((org.joda.time.ReadableInstant) instant78);
        org.joda.time.chrono.GJChronology gJChronology84 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone42, (org.joda.time.ReadableInstant) instant47);
        org.joda.time.DurationField durationField85 = gJChronology84.eras();
        int int86 = durationField39.compareTo(durationField85);
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField85, durationField3, and durationField35", !(durationField85.compareTo(durationField3) == 0) || (Math.signum(durationField85.compareTo(durationField35)) == Math.signum(durationField3.compareTo(durationField35))));
    }

    @Test
    public void test1583() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1583");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forTimeZone(timeZone2);
        org.joda.time.chrono.GJChronology gJChronology4 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone3);
        org.joda.time.DateTimeField dateTimeField5 = gJChronology4.millisOfSecond();
        int int6 = instant1.get(dateTimeField5);
        org.joda.time.Instant instant8 = instant1.plus(0L);
        java.util.TimeZone timeZone9 = null;
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forTimeZone(timeZone9);
        org.joda.time.chrono.GJChronology gJChronology11 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone10);
        org.joda.time.DurationField durationField12 = gJChronology11.halfdays();
        org.joda.time.Chronology chronology13 = gJChronology11.withUTC();
        java.lang.String str14 = gJChronology11.toString();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology11.hourOfHalfday();
        int int16 = instant1.get(dateTimeField15);
        org.joda.time.Instant instant18 = new org.joda.time.Instant(52L);
        boolean boolean19 = instant18.isEqualNow();
        org.joda.time.ReadableDuration readableDuration20 = null;
        org.joda.time.Instant instant21 = instant18.plus(readableDuration20);
        long long22 = instant18.getMillis();
        java.lang.String str23 = instant18.toString();
        org.joda.time.Instant instant24 = instant18.toInstant();
        org.joda.time.ReadableDuration readableDuration25 = null;
        org.joda.time.Instant instant27 = instant18.withDurationAdded(readableDuration25, (int) 'x');
        long long28 = instant18.getMillis();
        boolean boolean29 = instant18.isAfterNow();
        org.joda.time.Instant instant31 = instant18.minus(4324199948L);
        java.util.TimeZone timeZone32 = null;
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.forTimeZone(timeZone32);
        org.joda.time.chrono.GJChronology gJChronology34 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone33);
        org.joda.time.DurationField durationField35 = gJChronology34.halfdays();
        java.util.TimeZone timeZone36 = null;
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.forTimeZone(timeZone36);
        org.joda.time.chrono.GJChronology gJChronology38 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone37);
        long long42 = dateTimeZone37.convertLocalToUTC((long) (byte) -1, true, 0L);
        boolean boolean44 = dateTimeZone37.equals((java.lang.Object) true);
        org.joda.time.Chronology chronology45 = gJChronology34.withZone(dateTimeZone37);
        org.joda.time.DateTime dateTime46 = instant31.toDateTime(dateTimeZone37);
        org.joda.time.ReadableDuration readableDuration47 = null;
        org.joda.time.Instant instant48 = instant31.minus(readableDuration47);
        boolean boolean49 = instant1.isEqual((org.joda.time.ReadableInstant) instant48);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant48 and dateTime46", (instant48.compareTo(dateTime46) == 0) == instant48.equals(dateTime46));
    }

    @Test
    public void test1584() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1584");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        boolean boolean2 = instant1.isEqualNow();
        org.joda.time.ReadableDuration readableDuration3 = null;
        org.joda.time.Instant instant4 = instant1.plus(readableDuration3);
        long long5 = instant1.getMillis();
        java.lang.String str6 = instant1.toString();
        org.joda.time.Instant instant7 = instant1.toInstant();
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.Instant instant10 = instant1.withDurationAdded(readableDuration8, (int) 'x');
        org.joda.time.DateTime dateTime11 = instant10.toDateTime();
        org.joda.time.DateTime dateTime12 = instant10.toDateTime();
        java.util.TimeZone timeZone13 = null;
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forTimeZone(timeZone13);
        org.joda.time.chrono.GJChronology gJChronology15 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone14);
        java.util.Locale locale17 = new java.util.Locale("hi!");
        java.lang.String str18 = locale17.getCountry();
        java.util.Locale locale19 = java.util.Locale.getDefault();
        java.lang.String str20 = locale19.getDisplayName();
        java.lang.String str21 = locale17.getDisplayScript(locale19);
        boolean boolean22 = dateTimeZone14.equals((java.lang.Object) locale19);
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forOffsetMillis((int) '4');
        java.util.TimeZone timeZone25 = dateTimeZone24.toTimeZone();
        long long28 = dateTimeZone24.adjustOffset((long) 0, false);
        int int30 = dateTimeZone24.getOffsetFromLocal((-26438399999L));
        long long32 = dateTimeZone14.getMillisKeepLocal(dateTimeZone24, (long) (byte) 10);
        org.joda.time.Instant instant34 = new org.joda.time.Instant(52L);
        boolean boolean35 = instant34.isEqualNow();
        org.joda.time.ReadableDuration readableDuration36 = null;
        org.joda.time.Instant instant37 = instant34.plus(readableDuration36);
        long long38 = instant34.getMillis();
        java.lang.String str39 = instant34.toString();
        org.joda.time.Instant instant40 = instant34.toInstant();
        org.joda.time.ReadableDuration readableDuration41 = null;
        org.joda.time.Instant instant43 = instant34.withDurationAdded(readableDuration41, (int) 'x');
        java.util.TimeZone timeZone44 = null;
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.forTimeZone(timeZone44);
        org.joda.time.chrono.GJChronology gJChronology46 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone45);
        org.joda.time.DateTimeField dateTimeField47 = gJChronology46.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField48 = gJChronology46.yearOfCentury();
        int int49 = instant43.get(dateTimeField48);
        org.joda.time.chrono.GJChronology gJChronology50 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone24, (org.joda.time.ReadableInstant) instant43);
        org.joda.time.DurationField durationField51 = gJChronology50.days();
        org.joda.time.DurationField durationField52 = gJChronology50.minutes();
        boolean boolean53 = dateTime12.equals((java.lang.Object) durationField52);
        org.joda.time.Instant instant55 = new org.joda.time.Instant(52L);
        boolean boolean56 = instant55.isEqualNow();
        org.joda.time.ReadableDuration readableDuration57 = null;
        org.joda.time.Instant instant58 = instant55.plus(readableDuration57);
        long long59 = instant55.getMillis();
        java.lang.String str60 = instant55.toString();
        boolean boolean62 = instant55.isAfter((long) (-1));
        org.joda.time.Instant instant63 = instant55.toInstant();
        org.joda.time.Instant instant65 = instant63.plus((-61827926999999L));
        org.joda.time.MutableDateTime mutableDateTime66 = instant65.toMutableDateTime();
        boolean boolean67 = dateTime12.isEqual((org.joda.time.ReadableInstant) instant65);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and dateTime11", (instant1.compareTo(dateTime11) == 0) == instant1.equals(dateTime11));
    }

    @Test
    public void test1585() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1585");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = gJChronology2.halfdays();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.millisOfDay();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.minuteOfDay();
        org.joda.time.DurationField durationField6 = gJChronology2.centuries();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology2.yearOfCentury();
        org.joda.time.Chronology chronology8 = gJChronology2.withUTC();
        org.joda.time.DateTimeZone dateTimeZone9 = gJChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField10 = gJChronology2.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField11 = gJChronology2.yearOfEra();
        org.joda.time.DurationField durationField12 = gJChronology2.weeks();
        org.joda.time.DurationField durationField13 = gJChronology2.eras();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField13, durationField3, and durationField6", !(durationField13.compareTo(durationField3) == 0) || (Math.signum(durationField13.compareTo(durationField6)) == Math.signum(durationField3.compareTo(durationField6))));
    }

    @Test
    public void test1586() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1586");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        boolean boolean2 = instant1.isEqualNow();
        java.lang.String str3 = instant1.toString();
        java.lang.String str4 = instant1.toString();
        org.joda.time.Instant instant7 = instant1.withDurationAdded(115200000L, (int) (short) 1);
        org.joda.time.Instant instant8 = instant1.toInstant();
        long long9 = instant1.getMillis();
        java.util.TimeZone timeZone10 = null;
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forTimeZone(timeZone10);
        org.joda.time.chrono.GJChronology gJChronology12 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone11);
        org.joda.time.DateTimeField dateTimeField13 = gJChronology12.millisOfSecond();
        org.joda.time.DurationField durationField14 = gJChronology12.weeks();
        org.joda.time.DurationField durationField15 = gJChronology12.months();
        java.lang.String str16 = gJChronology12.toString();
        org.joda.time.DateTimeField dateTimeField17 = gJChronology12.dayOfWeek();
        boolean boolean18 = instant1.equals((java.lang.Object) gJChronology12);
        org.joda.time.ReadableDuration readableDuration19 = null;
        org.joda.time.Instant instant21 = instant1.withDurationAdded(readableDuration19, (-313));
        java.util.TimeZone timeZone22 = null;
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        org.joda.time.chrono.GJChronology gJChronology24 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone23);
        org.joda.time.DurationField durationField25 = gJChronology24.halfdays();
        org.joda.time.DateTimeField dateTimeField26 = gJChronology24.millisOfDay();
        org.joda.time.DateTimeField dateTimeField27 = gJChronology24.minuteOfDay();
        org.joda.time.DurationField durationField28 = gJChronology24.centuries();
        org.joda.time.DateTimeField dateTimeField29 = gJChronology24.halfdayOfDay();
        java.util.Locale locale30 = java.util.Locale.ITALIAN;
        java.util.Locale locale31 = locale30.stripExtensions();
        java.util.Locale locale32 = java.util.Locale.CANADA;
        java.lang.String str33 = locale30.getDisplayVariant(locale32);
        boolean boolean34 = gJChronology24.equals((java.lang.Object) locale32);
        org.joda.time.DateTimeField dateTimeField35 = gJChronology24.secondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone36 = gJChronology24.getZone();
        java.lang.Object obj37 = null;
        boolean boolean38 = dateTimeZone36.equals(obj37);
        org.joda.time.DateTime dateTime39 = instant1.toDateTime(dateTimeZone36);
        java.lang.String str40 = instant1.toString();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and dateTime39", (instant1.compareTo(dateTime39) == 0) == instant1.equals(dateTime39));
    }

    @Test
    public void test1587() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1587");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        boolean boolean2 = instant1.isEqualNow();
        org.joda.time.ReadableDuration readableDuration3 = null;
        org.joda.time.Instant instant4 = instant1.plus(readableDuration3);
        long long5 = instant1.getMillis();
        java.lang.String str6 = instant1.toString();
        org.joda.time.Instant instant7 = instant1.toInstant();
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.Instant instant10 = instant1.withDurationAdded(readableDuration8, (int) 'x');
        org.joda.time.Instant instant11 = instant1.toInstant();
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.Instant instant14 = instant11.withDurationAdded(readableDuration12, (int) 'u');
        org.joda.time.Chronology chronology15 = instant14.getChronology();
        org.joda.time.MutableDateTime mutableDateTime16 = instant14.toMutableDateTime();
        org.joda.time.ReadableDuration readableDuration17 = null;
        org.joda.time.Instant instant18 = instant14.minus(readableDuration17);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant18 and mutableDateTime16", (instant18.compareTo(mutableDateTime16) == 0) == instant18.equals(mutableDateTime16));
    }

    @Test
    public void test1588() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1588");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField3 = gJChronology2.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.weekyearOfCentury();
        org.joda.time.Instant instant5 = gJChronology2.getGregorianCutover();
        org.joda.time.Instant instant7 = instant5.withMillis(0L);
        org.joda.time.Instant instant9 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone10 = null;
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forTimeZone(timeZone10);
        org.joda.time.chrono.GJChronology gJChronology12 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone11);
        org.joda.time.DateTimeField dateTimeField13 = gJChronology12.millisOfSecond();
        int int14 = instant9.get(dateTimeField13);
        org.joda.time.Instant instant16 = instant9.plus(0L);
        int int17 = instant7.compareTo((org.joda.time.ReadableInstant) instant16);
        org.joda.time.Instant instant19 = new org.joda.time.Instant(52L);
        boolean boolean20 = instant19.isEqualNow();
        org.joda.time.ReadableDuration readableDuration21 = null;
        org.joda.time.Instant instant22 = instant19.plus(readableDuration21);
        boolean boolean24 = instant22.equals((java.lang.Object) ' ');
        boolean boolean25 = instant16.isEqual((org.joda.time.ReadableInstant) instant22);
        java.lang.String str26 = instant16.toString();
        org.joda.time.Instant instant27 = instant16.toInstant();
        org.joda.time.DateTime dateTime28 = instant16.toDateTime();
        java.util.TimeZone timeZone29 = null;
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forTimeZone(timeZone29);
        org.joda.time.chrono.GJChronology gJChronology31 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone30);
        java.util.Locale locale33 = new java.util.Locale("hi!");
        java.lang.String str34 = locale33.getCountry();
        java.util.Locale locale35 = java.util.Locale.getDefault();
        java.lang.String str36 = locale35.getDisplayName();
        java.lang.String str37 = locale33.getDisplayScript(locale35);
        boolean boolean38 = dateTimeZone30.equals((java.lang.Object) locale35);
        int int40 = dateTimeZone30.getOffsetFromLocal((long) (short) 10);
        java.util.TimeZone timeZone41 = null;
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.forTimeZone(timeZone41);
        org.joda.time.chrono.GJChronology gJChronology43 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone42);
        org.joda.time.DateTimeField dateTimeField44 = gJChronology43.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField45 = gJChronology43.weekyearOfCentury();
        org.joda.time.Instant instant46 = gJChronology43.getGregorianCutover();
        org.joda.time.Instant instant48 = instant46.withMillis(0L);
        org.joda.time.Instant instant50 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone51 = null;
        org.joda.time.DateTimeZone dateTimeZone52 = org.joda.time.DateTimeZone.forTimeZone(timeZone51);
        org.joda.time.chrono.GJChronology gJChronology53 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone52);
        org.joda.time.DateTimeField dateTimeField54 = gJChronology53.millisOfSecond();
        int int55 = instant50.get(dateTimeField54);
        org.joda.time.Instant instant57 = instant50.plus(0L);
        int int58 = instant48.compareTo((org.joda.time.ReadableInstant) instant57);
        org.joda.time.DateTimeFieldType dateTimeFieldType59 = null;
        boolean boolean60 = instant57.isSupported(dateTimeFieldType59);
        int int61 = dateTimeZone30.getOffset((org.joda.time.ReadableInstant) instant57);
        org.joda.time.DateTime dateTime62 = instant57.toDateTimeISO();
        int int63 = dateTime28.compareTo((org.joda.time.ReadableInstant) dateTime62);
        java.util.TimeZone timeZone64 = null;
        org.joda.time.DateTimeZone dateTimeZone65 = org.joda.time.DateTimeZone.forTimeZone(timeZone64);
        org.joda.time.chrono.GJChronology gJChronology66 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone65);
        org.joda.time.DateTimeField dateTimeField67 = gJChronology66.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField68 = gJChronology66.weekyearOfCentury();
        org.joda.time.Instant instant69 = gJChronology66.getGregorianCutover();
        org.joda.time.Instant instant71 = instant69.withMillis(0L);
        org.joda.time.Instant instant73 = instant71.minus(0L);
        boolean boolean74 = dateTime28.isBefore((org.joda.time.ReadableInstant) instant71);
        org.joda.time.Instant instant77 = instant71.withDurationAdded(121920052L, 27);
        org.joda.time.Instant instant79 = instant71.minus(31298400000L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant9 and dateTime28", (instant9.compareTo(dateTime28) == 0) == instant9.equals(dateTime28));
    }

    @Test
    public void test1589() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1589");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forTimeZone(timeZone2);
        org.joda.time.chrono.GJChronology gJChronology4 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone3);
        org.joda.time.DateTimeField dateTimeField5 = gJChronology4.millisOfSecond();
        int int6 = instant1.get(dateTimeField5);
        org.joda.time.Instant instant8 = instant1.plus(0L);
        java.util.TimeZone timeZone9 = null;
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forTimeZone(timeZone9);
        org.joda.time.chrono.GJChronology gJChronology11 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone10);
        org.joda.time.DurationField durationField12 = gJChronology11.halfdays();
        org.joda.time.Chronology chronology13 = gJChronology11.withUTC();
        java.lang.String str14 = gJChronology11.toString();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology11.hourOfHalfday();
        int int16 = instant1.get(dateTimeField15);
        org.joda.time.Instant instant18 = new org.joda.time.Instant(52L);
        boolean boolean19 = instant18.isEqualNow();
        org.joda.time.ReadableDuration readableDuration20 = null;
        org.joda.time.Instant instant21 = instant18.plus(readableDuration20);
        org.joda.time.Instant instant23 = new org.joda.time.Instant(52L);
        org.joda.time.Instant instant25 = instant23.withMillis((long) 'u');
        boolean boolean26 = instant18.isBefore((org.joda.time.ReadableInstant) instant23);
        boolean boolean27 = instant1.isEqual((org.joda.time.ReadableInstant) instant23);
        org.joda.time.DateTime dateTime28 = instant1.toDateTimeISO();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter29 = null;
        java.lang.String str30 = instant1.toString(dateTimeFormatter29);
        boolean boolean32 = instant1.isAfter((-25575169557600000L));
        boolean boolean34 = instant1.equals((java.lang.Object) 161481600000L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and dateTime28", (instant1.compareTo(dateTime28) == 0) == instant1.equals(dateTime28));
    }

    @Test
    public void test1590() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1590");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        boolean boolean2 = instant1.isEqualNow();
        boolean boolean4 = instant1.isEqual(0L);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = null;
        boolean boolean6 = instant1.isSupported(dateTimeFieldType5);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = null;
        boolean boolean8 = instant1.isSupported(dateTimeFieldType7);
        org.joda.time.ReadableDuration readableDuration9 = null;
        org.joda.time.Instant instant10 = instant1.minus(readableDuration9);
        org.joda.time.Instant instant11 = org.joda.time.Instant.now();
        org.joda.time.Instant instant14 = instant11.withDurationAdded(306102434400000L, (int) (short) 100);
        java.util.TimeZone timeZone15 = null;
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forTimeZone(timeZone15);
        org.joda.time.chrono.GJChronology gJChronology17 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone16);
        long long21 = dateTimeZone16.convertLocalToUTC((long) (byte) -1, true, 0L);
        boolean boolean23 = dateTimeZone16.equals((java.lang.Object) true);
        long long25 = dateTimeZone16.nextTransition((long) '4');
        java.lang.String str27 = dateTimeZone16.getShortName(432000001L);
        java.util.TimeZone timeZone28 = dateTimeZone16.toTimeZone();
        org.joda.time.DateTime dateTime29 = instant11.toDateTime(dateTimeZone16);
        java.lang.String str30 = dateTime29.toString();
        boolean boolean31 = instant10.isEqual((org.joda.time.ReadableInstant) dateTime29);
        org.joda.time.DateTime dateTime32 = instant10.toDateTime();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant11 and dateTime29", (instant11.compareTo(dateTime29) == 0) == instant11.equals(dateTime29));
    }

    @Test
    public void test1591() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1591");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((-2246399965L));
        org.joda.time.DateTime dateTime2 = instant1.toDateTimeISO();
        org.joda.time.Instant instant4 = new org.joda.time.Instant((java.lang.Object) 3732479999999948L);
        boolean boolean5 = instant1.equals((java.lang.Object) instant4);
        java.util.TimeZone timeZone6 = null;
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forTimeZone(timeZone6);
        org.joda.time.chrono.GJChronology gJChronology8 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone7);
        org.joda.time.DateTimeField dateTimeField9 = gJChronology8.era();
        org.joda.time.DurationField durationField10 = gJChronology8.months();
        org.joda.time.DateTimeField dateTimeField11 = gJChronology8.weekyearOfCentury();
        org.joda.time.DurationField durationField12 = gJChronology8.months();
        java.util.TimeZone timeZone13 = null;
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forTimeZone(timeZone13);
        org.joda.time.chrono.GJChronology gJChronology15 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone14);
        long long19 = dateTimeZone14.convertLocalToUTC((long) (byte) -1, true, 0L);
        boolean boolean21 = dateTimeZone14.equals((java.lang.Object) true);
        org.joda.time.chrono.GJChronology gJChronology22 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone14);
        org.joda.time.DateTimeField dateTimeField23 = gJChronology22.weekyear();
        org.joda.time.DateTimeField dateTimeField24 = gJChronology22.era();
        org.joda.time.DateTimeField dateTimeField25 = gJChronology22.centuryOfEra();
        org.joda.time.Chronology chronology26 = gJChronology22.withUTC();
        org.joda.time.DurationField durationField27 = gJChronology22.years();
        org.joda.time.DateTimeZone dateTimeZone28 = gJChronology22.getZone();
        org.joda.time.Chronology chronology29 = gJChronology8.withZone(dateTimeZone28);
        org.joda.time.LocalDateTime localDateTime30 = null;
        boolean boolean31 = dateTimeZone28.isLocalDateTimeGap(localDateTime30);
        org.joda.time.chrono.GJChronology gJChronology32 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone28);
        org.joda.time.DurationField durationField33 = gJChronology32.halfdays();
        org.joda.time.MutableDateTime mutableDateTime34 = instant4.toMutableDateTime((org.joda.time.Chronology) gJChronology32);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and dateTime2", (instant1.compareTo(dateTime2) == 0) == instant1.equals(dateTime2));
    }

    @Test
    public void test1592() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1592");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str3 = dateTimeZone1.getNameKey((long) 100);
        boolean boolean4 = dateTimeZone1.isFixed();
        org.joda.time.chrono.GJChronology gJChronology5 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField6 = gJChronology5.hours();
        java.util.TimeZone timeZone7 = null;
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forTimeZone(timeZone7);
        org.joda.time.chrono.GJChronology gJChronology9 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone8);
        org.joda.time.DurationField durationField10 = gJChronology9.halfdays();
        long long14 = gJChronology9.add((long) 'a', (-1L), (int) (short) 0);
        org.joda.time.DateTimeField dateTimeField15 = gJChronology9.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField16 = gJChronology9.secondOfMinute();
        org.joda.time.Instant instant18 = new org.joda.time.Instant(52L);
        boolean boolean19 = instant18.isEqualNow();
        org.joda.time.ReadableDuration readableDuration20 = null;
        org.joda.time.Instant instant21 = instant18.plus(readableDuration20);
        boolean boolean22 = gJChronology9.equals((java.lang.Object) instant18);
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = null;
        boolean boolean24 = instant18.isSupported(dateTimeFieldType23);
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = null;
        boolean boolean26 = instant18.isSupported(dateTimeFieldType25);
        org.joda.time.DateTimeZone dateTimeZone27 = instant18.getZone();
        long long29 = dateTimeZone27.nextTransition(349200L);
        org.joda.time.Chronology chronology30 = gJChronology5.withZone(dateTimeZone27);
        org.joda.time.DurationField durationField31 = gJChronology5.days();
        org.joda.time.DateTimeField dateTimeField32 = gJChronology5.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField33 = gJChronology5.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField34 = gJChronology5.dayOfYear();
        org.joda.time.DurationField durationField35 = gJChronology5.eras();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField35, durationField6, and durationField10", !(durationField35.compareTo(durationField6) == 0) || (Math.signum(durationField35.compareTo(durationField10)) == Math.signum(durationField6.compareTo(durationField10))));
    }

    @Test
    public void test1593() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1593");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField3 = gJChronology2.era();
        org.joda.time.DurationField durationField4 = gJChronology2.months();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.weekyearOfCentury();
        org.joda.time.DurationField durationField6 = gJChronology2.months();
        java.util.TimeZone timeZone7 = null;
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forTimeZone(timeZone7);
        org.joda.time.chrono.GJChronology gJChronology9 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone8);
        long long13 = dateTimeZone8.convertLocalToUTC((long) (byte) -1, true, 0L);
        boolean boolean15 = dateTimeZone8.equals((java.lang.Object) true);
        org.joda.time.chrono.GJChronology gJChronology16 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone8);
        org.joda.time.DateTimeField dateTimeField17 = gJChronology16.weekyear();
        org.joda.time.DateTimeField dateTimeField18 = gJChronology16.era();
        org.joda.time.DateTimeField dateTimeField19 = gJChronology16.centuryOfEra();
        org.joda.time.Chronology chronology20 = gJChronology16.withUTC();
        org.joda.time.DurationField durationField21 = gJChronology16.years();
        org.joda.time.DateTimeZone dateTimeZone22 = gJChronology16.getZone();
        org.joda.time.Chronology chronology23 = gJChronology2.withZone(dateTimeZone22);
        org.joda.time.DurationField durationField24 = gJChronology2.eras();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField24, durationField4, and durationField21", !(durationField24.compareTo(durationField4) == 0) || (Math.signum(durationField24.compareTo(durationField21)) == Math.signum(durationField4.compareTo(durationField21))));
    }

    @Test
    public void test1594() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1594");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        boolean boolean2 = instant1.isEqualNow();
        org.joda.time.ReadableDuration readableDuration3 = null;
        org.joda.time.Instant instant4 = instant1.plus(readableDuration3);
        long long5 = instant1.getMillis();
        java.lang.String str6 = instant1.toString();
        org.joda.time.Instant instant7 = instant1.toInstant();
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.Instant instant10 = instant1.withDurationAdded(readableDuration8, (int) 'x');
        org.joda.time.DateTime dateTime11 = instant10.toDateTime();
        boolean boolean13 = instant10.isEqual(2160000000000L);
        org.joda.time.Chronology chronology14 = instant10.getChronology();
        org.joda.time.MutableDateTime mutableDateTime15 = instant10.toMutableDateTime();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant10 and dateTime11", (instant10.compareTo(dateTime11) == 0) == instant10.equals(dateTime11));
    }

    @Test
    public void test1595() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1595");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis((-119));
        org.joda.time.Instant instant3 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone4 = null;
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forTimeZone(timeZone4);
        org.joda.time.chrono.GJChronology gJChronology6 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone5);
        org.joda.time.DateTimeField dateTimeField7 = gJChronology6.millisOfSecond();
        int int8 = instant3.get(dateTimeField7);
        org.joda.time.Instant instant10 = instant3.plus(0L);
        org.joda.time.Instant instant12 = new org.joda.time.Instant(52L);
        boolean boolean13 = instant12.isEqualNow();
        org.joda.time.ReadableDuration readableDuration14 = null;
        org.joda.time.Instant instant15 = instant12.plus(readableDuration14);
        long long16 = instant12.getMillis();
        java.lang.String str17 = instant12.toString();
        org.joda.time.Instant instant18 = instant12.toInstant();
        java.util.TimeZone timeZone19 = null;
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forTimeZone(timeZone19);
        java.lang.String str22 = dateTimeZone20.getNameKey((long) 100);
        long long25 = dateTimeZone20.convertLocalToUTC((-2246399965L), true);
        org.joda.time.MutableDateTime mutableDateTime26 = instant18.toMutableDateTime(dateTimeZone20);
        int int27 = instant10.compareTo((org.joda.time.ReadableInstant) mutableDateTime26);
        org.joda.time.Instant instant29 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone30 = null;
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forTimeZone(timeZone30);
        org.joda.time.chrono.GJChronology gJChronology32 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone31);
        org.joda.time.DateTimeField dateTimeField33 = gJChronology32.millisOfSecond();
        int int34 = instant29.get(dateTimeField33);
        org.joda.time.Instant instant36 = instant29.plus(0L);
        org.joda.time.Instant instant37 = instant36.toInstant();
        boolean boolean38 = mutableDateTime26.isEqual((org.joda.time.ReadableInstant) instant37);
        org.joda.time.Instant instant40 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone41 = null;
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.forTimeZone(timeZone41);
        org.joda.time.chrono.GJChronology gJChronology43 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone42);
        org.joda.time.DateTimeField dateTimeField44 = gJChronology43.millisOfSecond();
        int int45 = instant40.get(dateTimeField44);
        org.joda.time.Instant instant47 = instant40.plus(0L);
        org.joda.time.Instant instant48 = instant47.toInstant();
        org.joda.time.Instant instant50 = new org.joda.time.Instant(52L);
        boolean boolean51 = instant50.isEqualNow();
        java.lang.String str52 = instant50.toString();
        java.lang.String str53 = instant50.toString();
        org.joda.time.Instant instant55 = new org.joda.time.Instant(52L);
        boolean boolean56 = instant55.isEqualNow();
        org.joda.time.ReadableDuration readableDuration57 = null;
        org.joda.time.Instant instant58 = instant55.plus(readableDuration57);
        boolean boolean59 = instant50.isBefore((org.joda.time.ReadableInstant) instant58);
        org.joda.time.Instant instant61 = instant50.minus((long) 0);
        int int62 = instant47.compareTo((org.joda.time.ReadableInstant) instant50);
        org.joda.time.Instant instant65 = instant47.withDurationAdded((long) 432086114, 97);
        org.joda.time.MutableDateTime mutableDateTime66 = instant65.toMutableDateTime();
        boolean boolean67 = mutableDateTime26.isAfter((org.joda.time.ReadableInstant) mutableDateTime66);
        boolean boolean68 = dateTimeZone1.equals((java.lang.Object) boolean67);
        java.lang.String str70 = dateTimeZone1.getNameKey(3729476606400117L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant3 and mutableDateTime26", (instant3.compareTo(mutableDateTime26) == 0) == instant3.equals(mutableDateTime26));
    }

    @Test
    public void test1596() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1596");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(1867084L);
        long long2 = instant1.getMillis();
        org.joda.time.Instant instant4 = new org.joda.time.Instant(52L);
        boolean boolean5 = instant4.isEqualNow();
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.Instant instant7 = instant4.plus(readableDuration6);
        long long8 = instant4.getMillis();
        org.joda.time.Instant instant11 = instant4.withDurationAdded((long) 'a', (int) (byte) 10);
        java.util.TimeZone timeZone12 = null;
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forTimeZone(timeZone12);
        java.lang.String str15 = dateTimeZone13.getNameKey((long) 100);
        boolean boolean16 = dateTimeZone13.isFixed();
        java.lang.String str17 = dateTimeZone13.toString();
        boolean boolean19 = dateTimeZone13.isStandardOffset((long) (byte) 0);
        java.util.TimeZone timeZone20 = null;
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forTimeZone(timeZone20);
        org.joda.time.chrono.GJChronology gJChronology22 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone21);
        org.joda.time.DurationField durationField23 = gJChronology22.halfdays();
        org.joda.time.DateTimeField dateTimeField24 = gJChronology22.millisOfDay();
        org.joda.time.DateTimeField dateTimeField25 = gJChronology22.minuteOfDay();
        org.joda.time.DurationField durationField26 = gJChronology22.centuries();
        org.joda.time.DateTimeField dateTimeField27 = gJChronology22.dayOfYear();
        org.joda.time.DateTimeField dateTimeField28 = gJChronology22.weekyearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(1, 10);
        java.util.TimeZone timeZone32 = null;
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.forTimeZone(timeZone32);
        long long35 = dateTimeZone31.getMillisKeepLocal(dateTimeZone33, 4320000000L);
        java.util.TimeZone timeZone36 = null;
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.forTimeZone(timeZone36);
        java.lang.String str39 = dateTimeZone37.getNameKey((long) 100);
        boolean boolean40 = dateTimeZone37.isFixed();
        java.lang.String str41 = dateTimeZone37.toString();
        java.lang.String str42 = dateTimeZone37.getID();
        long long44 = dateTimeZone33.getMillisKeepLocal(dateTimeZone37, (long) (byte) -1);
        org.joda.time.Chronology chronology45 = gJChronology22.withZone(dateTimeZone37);
        org.joda.time.Instant instant46 = gJChronology22.getGregorianCutover();
        int int47 = dateTimeZone13.getOffset((org.joda.time.ReadableInstant) instant46);
        java.util.TimeZone timeZone48 = null;
        org.joda.time.DateTimeZone dateTimeZone49 = org.joda.time.DateTimeZone.forTimeZone(timeZone48);
        org.joda.time.chrono.GJChronology gJChronology50 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone49);
        org.joda.time.DurationField durationField51 = gJChronology50.halfdays();
        long long55 = gJChronology50.add((long) 'a', (-1L), (int) (short) 0);
        long long59 = gJChronology50.add((long) (byte) 0, (long) '4', 100);
        org.joda.time.DateTimeField dateTimeField60 = gJChronology50.minuteOfHour();
        org.joda.time.DurationField durationField61 = gJChronology50.hours();
        org.joda.time.DateTimeField dateTimeField62 = gJChronology50.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField63 = gJChronology50.millisOfSecond();
        org.joda.time.DurationField durationField64 = gJChronology50.seconds();
        java.lang.String str65 = gJChronology50.toString();
        org.joda.time.DateTimeField dateTimeField66 = gJChronology50.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField67 = gJChronology50.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField68 = gJChronology50.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField69 = gJChronology50.hourOfDay();
        org.joda.time.DateTime dateTime70 = instant46.toDateTime((org.joda.time.Chronology) gJChronology50);
        boolean boolean71 = instant4.isBefore((org.joda.time.ReadableInstant) dateTime70);
        org.joda.time.DateTimeZone dateTimeZone72 = dateTime70.getZone();
        org.joda.time.MutableDateTime mutableDateTime73 = instant1.toMutableDateTime(dateTimeZone72);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant46 and dateTime70", (instant46.compareTo(dateTime70) == 0) == instant46.equals(dateTime70));
    }

    @Test
    public void test1597() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1597");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = gJChronology2.halfdays();
        long long7 = gJChronology2.add((long) 'a', (-1L), (int) (short) 0);
        long long11 = gJChronology2.add((long) (byte) 0, (long) '4', 100);
        org.joda.time.DateTimeField dateTimeField12 = gJChronology2.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField13 = gJChronology2.year();
        org.joda.time.DateTimeField dateTimeField14 = gJChronology2.era();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology2.minuteOfHour();
        org.joda.time.DurationField durationField16 = gJChronology2.centuries();
        org.joda.time.DateTimeZone dateTimeZone17 = gJChronology2.getZone();
        org.joda.time.DurationField durationField18 = gJChronology2.months();
        org.joda.time.DurationField durationField19 = gJChronology2.eras();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField19, durationField3, and durationField16", !(durationField19.compareTo(durationField3) == 0) || (Math.signum(durationField19.compareTo(durationField16)) == Math.signum(durationField3.compareTo(durationField16))));
    }

    @Test
    public void test1598() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1598");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.util.TimeZone timeZone2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forTimeZone(timeZone2);
        org.joda.time.chrono.GJChronology gJChronology4 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone3);
        int int6 = dateTimeZone3.getOffsetFromLocal(1000L);
        long long8 = dateTimeZone1.getMillisKeepLocal(dateTimeZone3, (-61827926399999L));
        java.lang.String str9 = dateTimeZone3.toString();
        org.joda.time.Instant instant11 = new org.joda.time.Instant(52L);
        boolean boolean12 = instant11.isEqualNow();
        org.joda.time.ReadableDuration readableDuration13 = null;
        org.joda.time.Instant instant14 = instant11.plus(readableDuration13);
        long long15 = instant11.getMillis();
        java.lang.String str16 = instant11.toString();
        org.joda.time.Instant instant17 = instant11.toInstant();
        org.joda.time.Instant instant19 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone20 = null;
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forTimeZone(timeZone20);
        org.joda.time.chrono.GJChronology gJChronology22 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone21);
        org.joda.time.DateTimeField dateTimeField23 = gJChronology22.millisOfSecond();
        int int24 = instant19.get(dateTimeField23);
        org.joda.time.Chronology chronology25 = instant19.getChronology();
        boolean boolean26 = instant11.isBefore((org.joda.time.ReadableInstant) instant19);
        boolean boolean28 = instant11.isEqual(1136050274678400000L);
        org.joda.time.chrono.GJChronology gJChronology29 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone3, (org.joda.time.ReadableInstant) instant11);
        org.joda.time.DateTime dateTime30 = instant11.toDateTime();
        org.joda.time.Instant instant32 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone33 = null;
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.forTimeZone(timeZone33);
        org.joda.time.chrono.GJChronology gJChronology35 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone34);
        org.joda.time.DateTimeField dateTimeField36 = gJChronology35.millisOfSecond();
        int int37 = instant32.get(dateTimeField36);
        boolean boolean38 = instant32.isEqualNow();
        java.util.TimeZone timeZone39 = null;
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.forTimeZone(timeZone39);
        java.lang.String str42 = dateTimeZone40.getNameKey((long) 100);
        boolean boolean43 = dateTimeZone40.isFixed();
        java.util.Locale locale47 = new java.util.Locale("DurationField[halfdays]", "\u82f1\u6587");
        java.lang.String str48 = dateTimeZone40.getName((long) (short) 10, locale47);
        org.joda.time.Instant instant50 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone51 = null;
        org.joda.time.DateTimeZone dateTimeZone52 = org.joda.time.DateTimeZone.forTimeZone(timeZone51);
        org.joda.time.chrono.GJChronology gJChronology53 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone52);
        org.joda.time.DateTimeField dateTimeField54 = gJChronology53.millisOfSecond();
        int int55 = instant50.get(dateTimeField54);
        org.joda.time.Chronology chronology56 = instant50.getChronology();
        org.joda.time.chrono.GJChronology gJChronology57 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone40, (org.joda.time.ReadableInstant) instant50);
        boolean boolean58 = instant32.isEqual((org.joda.time.ReadableInstant) instant50);
        org.joda.time.Instant instant59 = instant50.toInstant();
        boolean boolean60 = instant11.isEqual((org.joda.time.ReadableInstant) instant59);
        org.joda.time.Chronology chronology61 = instant59.getChronology();
        org.joda.time.DateTimeField dateTimeField62 = chronology61.dayOfYear();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant11 and dateTime30", (instant11.compareTo(dateTime30) == 0) == instant11.equals(dateTime30));
    }

    @Test
    public void test1599() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1599");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = gJChronology2.halfdays();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.millisOfDay();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.minuteOfDay();
        org.joda.time.DurationField durationField6 = gJChronology2.centuries();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology2.dayOfYear();
        java.lang.String str8 = gJChronology2.toString();
        org.joda.time.DateTimeField dateTimeField9 = gJChronology2.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone10 = gJChronology2.getZone();
        org.joda.time.chrono.GJChronology gJChronology11 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone10);
        org.joda.time.DateTimeField dateTimeField12 = gJChronology11.clockhourOfDay();
        org.joda.time.DurationField durationField13 = gJChronology11.millis();
        org.joda.time.DateTimeField dateTimeField14 = gJChronology11.hourOfHalfday();
        org.joda.time.DurationField durationField15 = gJChronology11.centuries();
        org.joda.time.Instant instant17 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone18 = null;
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forTimeZone(timeZone18);
        org.joda.time.chrono.GJChronology gJChronology20 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone19);
        org.joda.time.DateTimeField dateTimeField21 = gJChronology20.millisOfSecond();
        int int22 = instant17.get(dateTimeField21);
        org.joda.time.Instant instant24 = instant17.plus(0L);
        org.joda.time.Instant instant25 = instant24.toInstant();
        org.joda.time.Instant instant27 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone28 = null;
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forTimeZone(timeZone28);
        org.joda.time.chrono.GJChronology gJChronology30 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone29);
        org.joda.time.DateTimeField dateTimeField31 = gJChronology30.millisOfSecond();
        int int32 = instant27.get(dateTimeField31);
        org.joda.time.Instant instant34 = instant27.plus(0L);
        org.joda.time.Instant instant35 = instant34.toInstant();
        boolean boolean36 = instant25.isEqual((org.joda.time.ReadableInstant) instant35);
        org.joda.time.Instant instant38 = new org.joda.time.Instant(52L);
        boolean boolean39 = instant38.isEqualNow();
        org.joda.time.ReadableDuration readableDuration40 = null;
        org.joda.time.Instant instant41 = instant38.plus(readableDuration40);
        org.joda.time.Instant instant43 = new org.joda.time.Instant(52L);
        org.joda.time.Instant instant45 = instant43.withMillis((long) 'u');
        boolean boolean46 = instant38.isBefore((org.joda.time.ReadableInstant) instant43);
        org.joda.time.Instant instant47 = instant43.toInstant();
        org.joda.time.DateTime dateTime48 = instant43.toDateTime();
        boolean boolean49 = instant35.isBefore((org.joda.time.ReadableInstant) instant43);
        org.joda.time.DateTimeZone dateTimeZone50 = instant43.getZone();
        org.joda.time.Chronology chronology51 = gJChronology11.withZone(dateTimeZone50);
        int int52 = gJChronology11.getMinimumDaysInFirstWeek();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant17 and dateTime48", (instant17.compareTo(dateTime48) == 0) == instant17.equals(dateTime48));
    }

    @Test
    public void test1600() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1600");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = gJChronology2.halfdays();
        long long7 = gJChronology2.add((long) 'a', (-1L), (int) (short) 0);
        boolean boolean9 = gJChronology2.equals((java.lang.Object) 0);
        org.joda.time.DateTimeField dateTimeField10 = gJChronology2.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField11 = gJChronology2.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField12 = gJChronology2.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField13 = gJChronology2.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField14 = gJChronology2.weekyear();
        java.util.TimeZone timeZone15 = null;
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forTimeZone(timeZone15);
        org.joda.time.chrono.GJChronology gJChronology17 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone16);
        org.joda.time.DateTimeField dateTimeField18 = gJChronology17.millisOfSecond();
        org.joda.time.DurationField durationField19 = gJChronology17.millis();
        org.joda.time.DateTimeZone dateTimeZone20 = gJChronology17.getZone();
        org.joda.time.Chronology chronology21 = gJChronology2.withZone(dateTimeZone20);
        org.joda.time.DateTimeField dateTimeField22 = gJChronology2.era();
        org.joda.time.DurationField durationField23 = gJChronology2.months();
        org.joda.time.Instant instant24 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime25 = instant24.toMutableDateTime();
        boolean boolean26 = gJChronology2.equals((java.lang.Object) instant24);
        org.joda.time.Instant instant28 = new org.joda.time.Instant(52L);
        boolean boolean29 = instant28.isEqualNow();
        org.joda.time.ReadableDuration readableDuration30 = null;
        org.joda.time.Instant instant31 = instant28.plus(readableDuration30);
        long long32 = instant28.getMillis();
        java.lang.String str33 = instant28.toString();
        boolean boolean35 = instant28.isAfter((long) (-1));
        org.joda.time.Instant instant36 = instant28.toInstant();
        org.joda.time.ReadableDuration readableDuration37 = null;
        org.joda.time.Instant instant39 = instant28.withDurationAdded(readableDuration37, (-69));
        int int40 = instant24.compareTo((org.joda.time.ReadableInstant) instant28);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter41 = null;
        java.lang.String str42 = instant28.toString(dateTimeFormatter41);
        org.joda.time.DateTime dateTime43 = instant28.toDateTimeISO();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant24 and mutableDateTime25", (instant24.compareTo(mutableDateTime25) == 0) == instant24.equals(mutableDateTime25));
    }

    @Test
    public void test1601() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1601");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forTimeZone(timeZone2);
        org.joda.time.chrono.GJChronology gJChronology4 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone3);
        org.joda.time.DateTimeField dateTimeField5 = gJChronology4.millisOfSecond();
        int int6 = instant1.get(dateTimeField5);
        org.joda.time.Instant instant8 = instant1.plus(0L);
        java.util.TimeZone timeZone9 = null;
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forTimeZone(timeZone9);
        org.joda.time.chrono.GJChronology gJChronology11 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone10);
        org.joda.time.DurationField durationField12 = gJChronology11.halfdays();
        org.joda.time.Chronology chronology13 = gJChronology11.withUTC();
        java.lang.String str14 = gJChronology11.toString();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology11.hourOfHalfday();
        int int16 = instant1.get(dateTimeField15);
        org.joda.time.Instant instant18 = new org.joda.time.Instant(52L);
        boolean boolean19 = instant18.isEqualNow();
        java.lang.String str20 = instant18.toString();
        org.joda.time.Instant instant22 = new org.joda.time.Instant(52L);
        boolean boolean23 = instant22.isEqualNow();
        java.lang.String str24 = instant22.toString();
        java.lang.String str25 = instant22.toString();
        org.joda.time.Instant instant28 = instant22.withDurationAdded(115200000L, (int) (short) 1);
        int int29 = instant18.compareTo((org.joda.time.ReadableInstant) instant22);
        org.joda.time.Instant instant31 = new org.joda.time.Instant(52L);
        boolean boolean32 = instant31.isEqualNow();
        org.joda.time.ReadableDuration readableDuration33 = null;
        org.joda.time.Instant instant34 = instant31.plus(readableDuration33);
        boolean boolean36 = instant34.equals((java.lang.Object) ' ');
        boolean boolean37 = instant22.isAfter((org.joda.time.ReadableInstant) instant34);
        int int38 = instant1.compareTo((org.joda.time.ReadableInstant) instant22);
        java.util.Date date39 = instant22.toDate();
        org.joda.time.MutableDateTime mutableDateTime40 = instant22.toMutableDateTime();
        org.joda.time.ReadableDuration readableDuration41 = null;
        org.joda.time.Instant instant42 = instant22.minus(readableDuration41);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and mutableDateTime40", (instant1.compareTo(mutableDateTime40) == 0) == instant1.equals(mutableDateTime40));
    }

    @Test
    public void test1602() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1602");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField3 = gJChronology2.millisOfSecond();
        org.joda.time.DurationField durationField4 = gJChronology2.millis();
        org.joda.time.DurationField durationField5 = gJChronology2.weekyears();
        org.joda.time.DurationField durationField6 = gJChronology2.halfdays();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology2.minuteOfHour();
        org.joda.time.DurationField durationField8 = gJChronology2.years();
        org.joda.time.DateTimeField dateTimeField9 = gJChronology2.minuteOfHour();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on durationField5 and durationField8", (durationField5.compareTo(durationField8) == 0) == durationField5.equals(durationField8));
    }

    @Test
    public void test1603() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1603");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forTimeZone(timeZone2);
        org.joda.time.chrono.GJChronology gJChronology4 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone3);
        org.joda.time.DateTimeField dateTimeField5 = gJChronology4.millisOfSecond();
        int int6 = instant1.get(dateTimeField5);
        org.joda.time.Instant instant8 = instant1.plus(0L);
        long long9 = instant8.getMillis();
        org.joda.time.Instant instant12 = instant8.withDurationAdded((long) 12, 97);
        org.joda.time.DateTimeZone dateTimeZone13 = instant12.getZone();
        org.joda.time.Instant instant15 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone16 = null;
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forTimeZone(timeZone16);
        org.joda.time.chrono.GJChronology gJChronology18 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone17);
        org.joda.time.DateTimeField dateTimeField19 = gJChronology18.millisOfSecond();
        int int20 = instant15.get(dateTimeField19);
        org.joda.time.Instant instant22 = instant15.plus(0L);
        org.joda.time.Instant instant23 = instant22.toInstant();
        org.joda.time.Instant instant25 = new org.joda.time.Instant(52L);
        boolean boolean26 = instant25.isEqualNow();
        java.lang.String str27 = instant25.toString();
        java.lang.String str28 = instant25.toString();
        org.joda.time.Instant instant30 = new org.joda.time.Instant(52L);
        boolean boolean31 = instant30.isEqualNow();
        org.joda.time.ReadableDuration readableDuration32 = null;
        org.joda.time.Instant instant33 = instant30.plus(readableDuration32);
        boolean boolean34 = instant25.isBefore((org.joda.time.ReadableInstant) instant33);
        org.joda.time.Instant instant36 = instant25.minus((long) 0);
        int int37 = instant22.compareTo((org.joda.time.ReadableInstant) instant25);
        org.joda.time.Instant instant40 = instant25.withDurationAdded((long) (short) 100, 70);
        org.joda.time.ReadableInstant readableInstant41 = null;
        boolean boolean42 = instant25.isBefore(readableInstant41);
        java.lang.String str43 = instant25.toString();
        boolean boolean44 = instant12.isEqual((org.joda.time.ReadableInstant) instant25);
        org.joda.time.Chronology chronology45 = instant25.getChronology();
        org.joda.time.DateTimeZone dateTimeZone48 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(1, 10);
        java.lang.String str50 = dateTimeZone48.getShortName(97L);
        org.joda.time.chrono.GJChronology gJChronology53 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone48, (long) (byte) 100, 1);
        java.util.TimeZone timeZone55 = null;
        org.joda.time.DateTimeZone dateTimeZone56 = org.joda.time.DateTimeZone.forTimeZone(timeZone55);
        java.lang.String str58 = dateTimeZone56.getNameKey((long) 100);
        boolean boolean59 = dateTimeZone56.isFixed();
        java.util.Locale locale63 = new java.util.Locale("DurationField[halfdays]", "\u82f1\u6587");
        java.lang.String str64 = dateTimeZone56.getName((long) (short) 10, locale63);
        org.joda.time.Instant instant66 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone67 = null;
        org.joda.time.DateTimeZone dateTimeZone68 = org.joda.time.DateTimeZone.forTimeZone(timeZone67);
        org.joda.time.chrono.GJChronology gJChronology69 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone68);
        org.joda.time.DateTimeField dateTimeField70 = gJChronology69.millisOfSecond();
        int int71 = instant66.get(dateTimeField70);
        org.joda.time.Chronology chronology72 = instant66.getChronology();
        org.joda.time.chrono.GJChronology gJChronology73 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone56, (org.joda.time.ReadableInstant) instant66);
        long long74 = instant66.getMillis();
        org.joda.time.ReadableDuration readableDuration75 = null;
        org.joda.time.Instant instant76 = instant66.minus(readableDuration75);
        java.util.Locale.Category category77 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale78 = java.util.Locale.getDefault();
        boolean boolean79 = locale78.hasExtensions();
        java.lang.String str80 = locale78.getISO3Language();
        java.util.Locale.setDefault(category77, locale78);
        java.util.Locale locale82 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale83 = java.util.Locale.ENGLISH;
        java.lang.String str84 = locale82.getDisplayLanguage(locale83);
        java.util.Locale locale85 = java.util.Locale.CANADA;
        java.lang.String str86 = locale85.getISO3Language();
        java.lang.String str87 = locale82.getDisplayVariant(locale85);
        java.lang.String str88 = locale82.getDisplayName();
        java.util.Locale.setDefault(category77, locale82);
        boolean boolean90 = instant66.equals((java.lang.Object) locale82);
        java.lang.String str91 = dateTimeZone48.getShortName((-2208729596000L), locale82);
        int int93 = dateTimeZone48.getStandardOffset((-599968L));
        long long96 = dateTimeZone48.adjustOffset((-248400000L), true);
        org.joda.time.MutableDateTime mutableDateTime97 = instant25.toMutableDateTime(dateTimeZone48);
        org.joda.time.chrono.GJChronology gJChronology98 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone48);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and mutableDateTime97", (instant1.compareTo(mutableDateTime97) == 0) == instant1.equals(mutableDateTime97));
    }

    @Test
    public void test1604() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1604");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = gJChronology2.years();
        java.util.TimeZone timeZone4 = null;
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forTimeZone(timeZone4);
        org.joda.time.chrono.GJChronology gJChronology6 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone5);
        org.joda.time.DurationField durationField7 = gJChronology6.halfdays();
        org.joda.time.DateTimeField dateTimeField8 = gJChronology6.millisOfDay();
        org.joda.time.DateTimeField dateTimeField9 = gJChronology6.minuteOfDay();
        org.joda.time.DurationField durationField10 = gJChronology6.centuries();
        java.util.TimeZone timeZone11 = null;
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forTimeZone(timeZone11);
        org.joda.time.chrono.GJChronology gJChronology13 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone12);
        org.joda.time.DurationField durationField14 = gJChronology13.halfdays();
        long long17 = durationField14.add((long) 100, 100L);
        boolean boolean18 = durationField14.isPrecise();
        int int19 = durationField10.compareTo(durationField14);
        boolean boolean20 = gJChronology2.equals((java.lang.Object) durationField10);
        org.joda.time.DateTimeField dateTimeField21 = gJChronology2.dayOfYear();
        org.joda.time.DateTimeField dateTimeField22 = gJChronology2.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField23 = gJChronology2.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField24 = gJChronology2.monthOfYear();
        org.joda.time.DurationField durationField25 = gJChronology2.eras();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField25, durationField3, and durationField7", !(durationField25.compareTo(durationField3) == 0) || (Math.signum(durationField25.compareTo(durationField7)) == Math.signum(durationField3.compareTo(durationField7))));
    }

    @Test
    public void test1605() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1605");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        boolean boolean2 = instant1.isEqualNow();
        org.joda.time.ReadableDuration readableDuration3 = null;
        org.joda.time.Instant instant4 = instant1.plus(readableDuration3);
        long long5 = instant1.getMillis();
        java.lang.String str6 = instant1.toString();
        org.joda.time.Instant instant7 = instant1.toInstant();
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.Instant instant10 = instant1.withDurationAdded(readableDuration8, (int) 'x');
        org.joda.time.Instant instant11 = instant1.toInstant();
        java.util.Date date12 = instant1.toDate();
        org.joda.time.DateTimeZone dateTimeZone13 = instant1.getZone();
        org.joda.time.ReadableDuration readableDuration14 = null;
        org.joda.time.Instant instant16 = instant1.withDurationAdded(readableDuration14, 0);
        java.util.TimeZone timeZone17 = null;
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forTimeZone(timeZone17);
        org.joda.time.chrono.GJChronology gJChronology19 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone18);
        org.joda.time.DateTimeField dateTimeField20 = gJChronology19.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField21 = gJChronology19.weekyear();
        org.joda.time.DateTimeField dateTimeField22 = gJChronology19.halfdayOfDay();
        org.joda.time.DurationField durationField23 = gJChronology19.years();
        org.joda.time.DurationField durationField24 = gJChronology19.minutes();
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        long long28 = gJChronology19.add(readablePeriod25, (-42L), (int) '4');
        org.joda.time.ReadablePeriod readablePeriod29 = null;
        long long32 = gJChronology19.add(readablePeriod29, (long) 432000001, (int) (byte) 10);
        org.joda.time.DurationField durationField33 = gJChronology19.halfdays();
        java.lang.String str34 = gJChronology19.toString();
        org.joda.time.MutableDateTime mutableDateTime35 = instant1.toMutableDateTime((org.joda.time.Chronology) gJChronology19);
        long long39 = gJChronology19.add((-16291872522239948L), (long) (-1045470876), (-1045470876));
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and mutableDateTime35", (instant1.compareTo(mutableDateTime35) == 0) == instant1.equals(mutableDateTime35));
    }

    @Test
    public void test1606() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1606");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        boolean boolean2 = instant1.isEqualNow();
        org.joda.time.ReadableDuration readableDuration3 = null;
        org.joda.time.Instant instant4 = instant1.plus(readableDuration3);
        long long5 = instant1.getMillis();
        java.lang.String str6 = instant1.toString();
        org.joda.time.Instant instant7 = instant1.toInstant();
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.Instant instant10 = instant1.withDurationAdded(readableDuration8, (int) 'x');
        long long11 = instant1.getMillis();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = null;
        java.lang.String str13 = instant1.toString(dateTimeFormatter12);
        org.joda.time.Instant instant15 = new org.joda.time.Instant(52L);
        boolean boolean16 = instant15.isEqualNow();
        java.lang.String str17 = instant15.toString();
        java.util.TimeZone timeZone18 = null;
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forTimeZone(timeZone18);
        org.joda.time.chrono.GJChronology gJChronology20 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone19);
        java.util.Locale locale22 = new java.util.Locale("hi!");
        java.lang.String str23 = locale22.getCountry();
        java.util.Locale locale24 = java.util.Locale.getDefault();
        java.lang.String str25 = locale24.getDisplayName();
        java.lang.String str26 = locale22.getDisplayScript(locale24);
        boolean boolean27 = dateTimeZone19.equals((java.lang.Object) locale24);
        int int29 = dateTimeZone19.getOffsetFromLocal((long) (short) 10);
        java.util.TimeZone timeZone30 = null;
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forTimeZone(timeZone30);
        org.joda.time.chrono.GJChronology gJChronology32 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone31);
        org.joda.time.DateTimeField dateTimeField33 = gJChronology32.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField34 = gJChronology32.weekyearOfCentury();
        org.joda.time.Instant instant35 = gJChronology32.getGregorianCutover();
        org.joda.time.Instant instant37 = instant35.withMillis(0L);
        org.joda.time.Instant instant39 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone40 = null;
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.forTimeZone(timeZone40);
        org.joda.time.chrono.GJChronology gJChronology42 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone41);
        org.joda.time.DateTimeField dateTimeField43 = gJChronology42.millisOfSecond();
        int int44 = instant39.get(dateTimeField43);
        org.joda.time.Instant instant46 = instant39.plus(0L);
        int int47 = instant37.compareTo((org.joda.time.ReadableInstant) instant46);
        org.joda.time.DateTimeFieldType dateTimeFieldType48 = null;
        boolean boolean49 = instant46.isSupported(dateTimeFieldType48);
        int int50 = dateTimeZone19.getOffset((org.joda.time.ReadableInstant) instant46);
        boolean boolean51 = instant15.isAfter((org.joda.time.ReadableInstant) instant46);
        org.joda.time.ReadableDuration readableDuration52 = null;
        org.joda.time.Instant instant54 = instant15.withDurationAdded(readableDuration52, 1);
        boolean boolean55 = instant54.isEqualNow();
        org.joda.time.Instant instant56 = instant54.toInstant();
        java.util.TimeZone timeZone57 = null;
        org.joda.time.DateTimeZone dateTimeZone58 = org.joda.time.DateTimeZone.forTimeZone(timeZone57);
        org.joda.time.chrono.GJChronology gJChronology59 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone58);
        org.joda.time.DateTimeField dateTimeField60 = gJChronology59.era();
        org.joda.time.DateTimeField dateTimeField61 = gJChronology59.weekyear();
        org.joda.time.DateTimeField dateTimeField62 = gJChronology59.weekyearOfCentury();
        org.joda.time.DurationField durationField63 = gJChronology59.millis();
        org.joda.time.DateTimeField dateTimeField64 = gJChronology59.dayOfWeek();
        org.joda.time.DurationField durationField65 = gJChronology59.millis();
        org.joda.time.Instant instant66 = gJChronology59.getGregorianCutover();
        org.joda.time.DateTimeField dateTimeField67 = gJChronology59.minuteOfHour();
        int int68 = instant54.get(dateTimeField67);
        boolean boolean69 = instant1.isBefore((org.joda.time.ReadableInstant) instant54);
        org.joda.time.DateTimeZone dateTimeZone71 = org.joda.time.DateTimeZone.forOffsetMillis((int) '4');
        java.util.TimeZone timeZone72 = dateTimeZone71.toTimeZone();
        java.lang.String str73 = dateTimeZone71.toString();
        boolean boolean75 = dateTimeZone71.isStandardOffset((long) 'u');
        org.joda.time.LocalDateTime localDateTime76 = null;
        boolean boolean77 = dateTimeZone71.isLocalDateTimeGap(localDateTime76);
        int int79 = dateTimeZone71.getStandardOffset(315705600000L);
        org.joda.time.MutableDateTime mutableDateTime80 = instant54.toMutableDateTime(dateTimeZone71);
        org.joda.time.ReadableDuration readableDuration81 = null;
        org.joda.time.Instant instant82 = instant54.plus(readableDuration81);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and mutableDateTime80", (instant1.compareTo(mutableDateTime80) == 0) == instant1.equals(mutableDateTime80));
    }

    @Test
    public void test1607() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1607");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        boolean boolean2 = instant1.isEqualNow();
        org.joda.time.ReadableDuration readableDuration3 = null;
        org.joda.time.Instant instant4 = instant1.plus(readableDuration3);
        org.joda.time.Instant instant6 = new org.joda.time.Instant(52L);
        org.joda.time.Instant instant8 = instant6.withMillis((long) 'u');
        boolean boolean9 = instant1.isBefore((org.joda.time.ReadableInstant) instant6);
        org.joda.time.DateTimeZone dateTimeZone10 = instant6.getZone();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetMillis((int) '4');
        java.util.TimeZone timeZone13 = dateTimeZone12.toTimeZone();
        long long16 = dateTimeZone12.adjustOffset((long) 0, false);
        int int18 = dateTimeZone12.getOffsetFromLocal((-26438399999L));
        java.util.TimeZone timeZone19 = dateTimeZone12.toTimeZone();
        java.lang.String str20 = dateTimeZone12.getID();
        org.joda.time.DateTime dateTime21 = instant6.toDateTime(dateTimeZone12);
        java.util.TimeZone timeZone22 = null;
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        org.joda.time.chrono.GJChronology gJChronology24 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone23);
        org.joda.time.DurationField durationField25 = gJChronology24.halfdays();
        long long29 = gJChronology24.add((long) 'a', (-1L), (int) (short) 0);
        long long33 = gJChronology24.add((long) (byte) 0, (long) '4', 100);
        org.joda.time.DateTimeField dateTimeField34 = gJChronology24.minuteOfHour();
        org.joda.time.DurationField durationField35 = gJChronology24.hours();
        org.joda.time.DateTimeField dateTimeField36 = gJChronology24.hourOfHalfday();
        org.joda.time.Chronology chronology37 = gJChronology24.withUTC();
        org.joda.time.DateTimeField dateTimeField38 = gJChronology24.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField39 = gJChronology24.secondOfMinute();
        org.joda.time.DurationField durationField40 = gJChronology24.months();
        org.joda.time.DateTimeField dateTimeField41 = gJChronology24.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField42 = gJChronology24.dayOfYear();
        java.lang.String str43 = gJChronology24.toString();
        org.joda.time.DateTimeField dateTimeField44 = gJChronology24.centuryOfEra();
        org.joda.time.DurationField durationField45 = gJChronology24.weeks();
        org.joda.time.DateTimeField dateTimeField46 = gJChronology24.year();
        org.joda.time.DateTime dateTime47 = dateTime21.toDateTime((org.joda.time.Chronology) gJChronology24);
        org.joda.time.DateTimeFieldType dateTimeFieldType48 = null;
        boolean boolean49 = dateTime21.isSupported(dateTimeFieldType48);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and dateTime47", (instant1.compareTo(dateTime47) == 0) == instant1.equals(dateTime47));
    }

    @Test
    public void test1608() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1608");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = gJChronology2.halfdays();
        long long7 = gJChronology2.add((long) 'a', (-1L), (int) (short) 0);
        boolean boolean9 = gJChronology2.equals((java.lang.Object) 0);
        org.joda.time.DateTimeField dateTimeField10 = gJChronology2.dayOfMonth();
        org.joda.time.DurationField durationField11 = gJChronology2.seconds();
        org.joda.time.DateTimeField dateTimeField12 = gJChronology2.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField13 = gJChronology2.era();
        org.joda.time.DateTimeField dateTimeField14 = gJChronology2.hourOfDay();
        java.lang.String str15 = gJChronology2.toString();
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        long long19 = gJChronology2.add(readablePeriod16, 3732632410199948L, 12);
        org.joda.time.Instant instant20 = gJChronology2.getGregorianCutover();
        java.util.TimeZone timeZone21 = null;
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forTimeZone(timeZone21);
        org.joda.time.chrono.GJChronology gJChronology23 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone22);
        org.joda.time.DateTimeField dateTimeField24 = gJChronology23.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField25 = gJChronology23.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField26 = gJChronology23.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField27 = gJChronology23.hourOfHalfday();
        org.joda.time.DurationField durationField28 = gJChronology23.halfdays();
        org.joda.time.DateTimeField dateTimeField29 = gJChronology23.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField30 = gJChronology23.clockhourOfHalfday();
        org.joda.time.Instant instant31 = gJChronology23.getGregorianCutover();
        org.joda.time.DateTime dateTime32 = instant20.toDateTime((org.joda.time.Chronology) gJChronology23);
        org.joda.time.DurationField durationField33 = gJChronology23.hours();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant20 and dateTime32", (instant20.compareTo(dateTime32) == 0) == instant20.equals(dateTime32));
    }

    @Test
    public void test1609() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1609");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        boolean boolean2 = instant1.isEqualNow();
        boolean boolean4 = instant1.isEqual(0L);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = null;
        boolean boolean6 = instant1.isSupported(dateTimeFieldType5);
        org.joda.time.Instant instant9 = instant1.withDurationAdded((-61827926399999L), (int) (short) -1);
        org.joda.time.MutableDateTime mutableDateTime10 = instant9.toMutableDateTime();
        org.joda.time.Instant instant11 = instant9.toInstant();
        java.util.TimeZone timeZone12 = null;
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forTimeZone(timeZone12);
        org.joda.time.chrono.GJChronology gJChronology14 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone13);
        org.joda.time.DurationField durationField15 = gJChronology14.halfdays();
        org.joda.time.DateTimeField dateTimeField16 = gJChronology14.minuteOfDay();
        java.util.TimeZone timeZone17 = null;
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forTimeZone(timeZone17);
        java.lang.String str20 = dateTimeZone18.getNameKey((long) 100);
        boolean boolean21 = dateTimeZone18.isFixed();
        java.lang.String str22 = dateTimeZone18.toString();
        boolean boolean24 = dateTimeZone18.isStandardOffset((long) (byte) 0);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone18);
        org.joda.time.Chronology chronology26 = gJChronology14.withZone(dateTimeZone18);
        org.joda.time.DateTimeField dateTimeField27 = gJChronology14.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField28 = gJChronology14.minuteOfHour();
        org.joda.time.MutableDateTime mutableDateTime29 = instant11.toMutableDateTime((org.joda.time.Chronology) gJChronology14);
        org.joda.time.ReadableDuration readableDuration30 = null;
        org.joda.time.Instant instant31 = instant11.minus(readableDuration30);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant31 and mutableDateTime29", (instant31.compareTo(mutableDateTime29) == 0) == instant31.equals(mutableDateTime29));
    }

    @Test
    public void test1610() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1610");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = gJChronology2.halfdays();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.millisOfDay();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.minuteOfDay();
        org.joda.time.DurationField durationField6 = gJChronology2.centuries();
        int int7 = gJChronology2.getMinimumDaysInFirstWeek();
        org.joda.time.DurationField durationField8 = gJChronology2.weekyears();
        org.joda.time.DateTimeField dateTimeField9 = gJChronology2.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField10 = gJChronology2.weekOfWeekyear();
        org.joda.time.DurationField durationField11 = gJChronology2.years();
        org.joda.time.DateTimeField dateTimeField12 = gJChronology2.yearOfCentury();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on durationField8 and durationField11", (durationField8.compareTo(durationField11) == 0) == durationField8.equals(durationField11));
    }

    @Test
    public void test1611() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1611");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        boolean boolean2 = instant1.isEqualNow();
        boolean boolean4 = instant1.isEqual(0L);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = null;
        boolean boolean6 = instant1.isSupported(dateTimeFieldType5);
        org.joda.time.Instant instant9 = instant1.withDurationAdded((-61827926399999L), (int) (short) -1);
        org.joda.time.MutableDateTime mutableDateTime10 = instant9.toMutableDateTime();
        boolean boolean11 = instant9.isAfterNow();
        java.util.TimeZone timeZone12 = null;
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forTimeZone(timeZone12);
        org.joda.time.chrono.GJChronology gJChronology14 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone13);
        org.joda.time.DurationField durationField15 = gJChronology14.halfdays();
        long long19 = gJChronology14.add((long) 'a', (-1L), (int) (short) 0);
        long long23 = gJChronology14.add((long) (byte) 0, (long) '4', 100);
        org.joda.time.DateTimeField dateTimeField24 = gJChronology14.minuteOfHour();
        org.joda.time.DurationField durationField25 = gJChronology14.hours();
        org.joda.time.DateTimeField dateTimeField26 = gJChronology14.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField27 = gJChronology14.millisOfSecond();
        org.joda.time.DurationField durationField28 = gJChronology14.seconds();
        java.lang.String str29 = gJChronology14.toString();
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        long long33 = gJChronology14.add(readablePeriod30, 349200000L, 0);
        org.joda.time.DurationField durationField34 = gJChronology14.millis();
        boolean boolean35 = instant9.equals((java.lang.Object) gJChronology14);
        java.util.TimeZone timeZone36 = null;
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.forTimeZone(timeZone36);
        org.joda.time.chrono.GJChronology gJChronology38 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone37);
        org.joda.time.DurationField durationField39 = gJChronology38.halfdays();
        long long43 = gJChronology38.add((long) 'a', (-1L), (int) (short) 0);
        boolean boolean45 = gJChronology38.equals((java.lang.Object) 0);
        org.joda.time.DateTimeField dateTimeField46 = gJChronology38.dayOfMonth();
        org.joda.time.DurationField durationField47 = gJChronology38.days();
        org.joda.time.DateTimeField dateTimeField48 = gJChronology38.millisOfSecond();
        org.joda.time.DurationField durationField49 = gJChronology38.millis();
        org.joda.time.ReadablePeriod readablePeriod50 = null;
        long long53 = gJChronology38.add(readablePeriod50, (-220870497598236L), (int) (byte) 100);
        org.joda.time.DateTimeField dateTimeField54 = gJChronology38.hourOfHalfday();
        org.joda.time.DateTime dateTime55 = instant9.toDateTime((org.joda.time.Chronology) gJChronology38);
        org.joda.time.DateTimeField dateTimeField56 = gJChronology38.dayOfMonth();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant9 and dateTime55", (instant9.compareTo(dateTime55) == 0) == instant9.equals(dateTime55));
    }

    @Test
    public void test1612() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1612");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forTimeZone(timeZone2);
        org.joda.time.chrono.GJChronology gJChronology4 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone3);
        org.joda.time.DateTimeField dateTimeField5 = gJChronology4.millisOfSecond();
        int int6 = instant1.get(dateTimeField5);
        boolean boolean7 = instant1.isEqualNow();
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.Instant instant10 = instant1.withDurationAdded(readableDuration8, (int) (short) 0);
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.Instant instant12 = instant1.minus(readableDuration11);
        java.util.TimeZone timeZone13 = null;
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forTimeZone(timeZone13);
        org.joda.time.chrono.GJChronology gJChronology15 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone14);
        org.joda.time.DurationField durationField16 = gJChronology15.halfdays();
        long long20 = gJChronology15.add((long) 'a', (-1L), (int) (short) 0);
        long long24 = gJChronology15.add((long) (byte) 0, (long) '4', 100);
        org.joda.time.DateTimeField dateTimeField25 = gJChronology15.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField26 = gJChronology15.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField27 = gJChronology15.secondOfDay();
        org.joda.time.DateTime dateTime28 = instant1.toDateTime((org.joda.time.Chronology) gJChronology15);
        org.joda.time.DateTimeField dateTimeField29 = gJChronology15.dayOfYear();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and dateTime28", (instant1.compareTo(dateTime28) == 0) == instant1.equals(dateTime28));
    }

    @Test
    public void test1613() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1613");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        int int4 = dateTimeZone1.getStandardOffset((long) (byte) 0);
        org.joda.time.Instant instant6 = new org.joda.time.Instant(52L);
        boolean boolean7 = instant6.isEqualNow();
        java.lang.String str8 = instant6.toString();
        java.util.TimeZone timeZone9 = null;
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forTimeZone(timeZone9);
        org.joda.time.chrono.GJChronology gJChronology11 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone10);
        java.util.Locale locale13 = new java.util.Locale("hi!");
        java.lang.String str14 = locale13.getCountry();
        java.util.Locale locale15 = java.util.Locale.getDefault();
        java.lang.String str16 = locale15.getDisplayName();
        java.lang.String str17 = locale13.getDisplayScript(locale15);
        boolean boolean18 = dateTimeZone10.equals((java.lang.Object) locale15);
        int int20 = dateTimeZone10.getOffsetFromLocal((long) (short) 10);
        java.util.TimeZone timeZone21 = null;
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forTimeZone(timeZone21);
        org.joda.time.chrono.GJChronology gJChronology23 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone22);
        org.joda.time.DateTimeField dateTimeField24 = gJChronology23.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField25 = gJChronology23.weekyearOfCentury();
        org.joda.time.Instant instant26 = gJChronology23.getGregorianCutover();
        org.joda.time.Instant instant28 = instant26.withMillis(0L);
        org.joda.time.Instant instant30 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone31 = null;
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.forTimeZone(timeZone31);
        org.joda.time.chrono.GJChronology gJChronology33 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone32);
        org.joda.time.DateTimeField dateTimeField34 = gJChronology33.millisOfSecond();
        int int35 = instant30.get(dateTimeField34);
        org.joda.time.Instant instant37 = instant30.plus(0L);
        int int38 = instant28.compareTo((org.joda.time.ReadableInstant) instant37);
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = null;
        boolean boolean40 = instant37.isSupported(dateTimeFieldType39);
        int int41 = dateTimeZone10.getOffset((org.joda.time.ReadableInstant) instant37);
        boolean boolean42 = instant6.isAfter((org.joda.time.ReadableInstant) instant37);
        org.joda.time.chrono.GJChronology gJChronology43 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1, (org.joda.time.ReadableInstant) instant6);
        org.joda.time.DurationField durationField44 = gJChronology43.eras();
        org.joda.time.DateTimeField dateTimeField45 = gJChronology43.dayOfYear();
        org.joda.time.DateTimeField dateTimeField46 = gJChronology43.weekyear();
        org.joda.time.DurationField durationField47 = gJChronology43.months();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField44, durationField47, and durationField44", !(durationField44.compareTo(durationField47) == 0) || (Math.signum(durationField44.compareTo(durationField44)) == Math.signum(durationField47.compareTo(durationField44))));
    }

    @Test
    public void test1614() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1614");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField3 = gJChronology2.millisOfSecond();
        org.joda.time.DurationField durationField4 = gJChronology2.millis();
        org.joda.time.DurationField durationField5 = gJChronology2.weeks();
        org.joda.time.DurationField durationField6 = gJChronology2.months();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology2.year();
        org.joda.time.DurationField durationField8 = gJChronology2.minutes();
        org.joda.time.DurationField durationField9 = gJChronology2.weekyears();
        org.joda.time.DateTimeField dateTimeField10 = gJChronology2.secondOfDay();
        org.joda.time.DurationField durationField11 = gJChronology2.centuries();
        org.joda.time.DurationField durationField12 = gJChronology2.years();
        org.joda.time.DurationField durationField13 = gJChronology2.millis();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on durationField9 and durationField12", (durationField9.compareTo(durationField12) == 0) == durationField9.equals(durationField12));
    }

    @Test
    public void test1615() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1615");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        boolean boolean2 = instant1.isEqualNow();
        java.lang.String str3 = instant1.toString();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.MutableDateTime mutableDateTime5 = instant1.toMutableDateTime(chronology4);
        org.joda.time.Instant instant7 = new org.joda.time.Instant(52L);
        boolean boolean8 = instant7.isEqualNow();
        org.joda.time.Instant instant10 = new org.joda.time.Instant(52L);
        org.joda.time.Instant instant12 = instant10.withMillis((long) 'u');
        boolean boolean13 = instant7.isAfter((org.joda.time.ReadableInstant) instant10);
        boolean boolean14 = mutableDateTime5.isEqual((org.joda.time.ReadableInstant) instant10);
        java.util.TimeZone timeZone15 = null;
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forTimeZone(timeZone15);
        org.joda.time.chrono.GJChronology gJChronology17 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone16);
        org.joda.time.DurationField durationField18 = gJChronology17.halfdays();
        org.joda.time.DateTimeField dateTimeField19 = gJChronology17.millisOfDay();
        org.joda.time.DateTimeField dateTimeField20 = gJChronology17.minuteOfDay();
        org.joda.time.DurationField durationField21 = gJChronology17.centuries();
        org.joda.time.DateTimeField dateTimeField22 = gJChronology17.dayOfYear();
        java.lang.String str23 = gJChronology17.toString();
        org.joda.time.DurationField durationField24 = gJChronology17.halfdays();
        org.joda.time.DateTimeField dateTimeField25 = gJChronology17.clockhourOfHalfday();
        org.joda.time.DateTime dateTime26 = mutableDateTime5.toDateTime((org.joda.time.Chronology) gJChronology17);
        org.joda.time.Instant instant28 = new org.joda.time.Instant(52L);
        boolean boolean29 = instant28.isEqualNow();
        org.joda.time.ReadableDuration readableDuration30 = null;
        org.joda.time.Instant instant31 = instant28.plus(readableDuration30);
        long long32 = instant28.getMillis();
        java.lang.String str33 = instant28.toString();
        org.joda.time.Instant instant34 = instant28.toInstant();
        org.joda.time.ReadableDuration readableDuration35 = null;
        org.joda.time.Instant instant37 = instant28.withDurationAdded(readableDuration35, (int) 'x');
        long long38 = instant28.getMillis();
        boolean boolean39 = instant28.isAfterNow();
        org.joda.time.Instant instant41 = instant28.minus(4324199948L);
        org.joda.time.DateTimeZone dateTimeZone42 = instant28.getZone();
        java.lang.String str44 = dateTimeZone42.getName(600000L);
        org.joda.time.Instant instant46 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone47 = null;
        org.joda.time.DateTimeZone dateTimeZone48 = org.joda.time.DateTimeZone.forTimeZone(timeZone47);
        org.joda.time.chrono.GJChronology gJChronology49 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone48);
        org.joda.time.DateTimeField dateTimeField50 = gJChronology49.millisOfSecond();
        int int51 = instant46.get(dateTimeField50);
        boolean boolean52 = instant46.isEqualNow();
        org.joda.time.ReadableDuration readableDuration53 = null;
        org.joda.time.Instant instant55 = instant46.withDurationAdded(readableDuration53, (int) (short) 0);
        org.joda.time.Instant instant57 = instant46.plus(35000L);
        org.joda.time.Instant instant58 = instant57.toInstant();
        org.joda.time.chrono.GJChronology gJChronology59 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone42, (org.joda.time.ReadableInstant) instant58);
        org.joda.time.DateTimeField dateTimeField60 = gJChronology59.minuteOfHour();
        org.joda.time.DurationField durationField61 = gJChronology59.hours();
        org.joda.time.DateTime dateTime62 = mutableDateTime5.toDateTime((org.joda.time.Chronology) gJChronology59);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and dateTime26", (instant1.compareTo(dateTime26) == 0) == instant1.equals(dateTime26));
    }

    @Test
    public void test1616() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1616");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = gJChronology2.halfdays();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.millisOfDay();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.minuteOfDay();
        org.joda.time.DurationField durationField6 = gJChronology2.centuries();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology2.dayOfYear();
        java.lang.String str8 = gJChronology2.toString();
        org.joda.time.DateTimeField dateTimeField9 = gJChronology2.minuteOfDay();
        org.joda.time.DurationField durationField10 = gJChronology2.seconds();
        org.joda.time.DurationField durationField11 = gJChronology2.eras();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField11, durationField3, and durationField6", !(durationField11.compareTo(durationField3) == 0) || (Math.signum(durationField11.compareTo(durationField6)) == Math.signum(durationField3.compareTo(durationField6))));
    }

    @Test
    public void test1617() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1617");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = gJChronology2.halfdays();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.millisOfDay();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.minuteOfDay();
        org.joda.time.DurationField durationField6 = gJChronology2.centuries();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology2.dayOfYear();
        java.lang.String str8 = gJChronology2.toString();
        org.joda.time.DurationField durationField9 = gJChronology2.years();
        org.joda.time.DurationField durationField10 = gJChronology2.hours();
        org.joda.time.DurationField durationField11 = gJChronology2.days();
        org.joda.time.DurationField durationField12 = gJChronology2.weekyears();
        java.util.TimeZone timeZone13 = null;
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forTimeZone(timeZone13);
        org.joda.time.chrono.GJChronology gJChronology15 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone14);
        org.joda.time.DurationField durationField16 = gJChronology15.halfdays();
        long long19 = durationField16.add((long) 100, 100L);
        java.util.TimeZone timeZone20 = null;
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forTimeZone(timeZone20);
        org.joda.time.chrono.GJChronology gJChronology22 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone21);
        org.joda.time.DurationField durationField23 = gJChronology22.halfdays();
        long long27 = gJChronology22.add((long) 'a', (-1L), (int) (short) 0);
        boolean boolean29 = gJChronology22.equals((java.lang.Object) 0);
        org.joda.time.DateTimeField dateTimeField30 = gJChronology22.dayOfMonth();
        org.joda.time.DurationField durationField31 = gJChronology22.millis();
        int int32 = durationField16.compareTo(durationField31);
        long long35 = durationField16.getMillis((int) (short) 10, (-1L));
        boolean boolean36 = durationField16.isSupported();
        long long39 = durationField16.getValueAsLong((long) 'a', 126403200120L);
        int int40 = durationField12.compareTo(durationField16);
        java.lang.String str41 = durationField16.getName();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on durationField9 and durationField12", (durationField9.compareTo(durationField12) == 0) == durationField9.equals(durationField12));
    }

    @Test
    public void test1618() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1618");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField3 = gJChronology2.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.weekyear();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.halfdayOfDay();
        org.joda.time.DurationField durationField6 = gJChronology2.years();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology2.clockhourOfDay();
        org.joda.time.DurationField durationField8 = gJChronology2.weeks();
        org.joda.time.DateTimeField dateTimeField9 = gJChronology2.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField10 = gJChronology2.secondOfMinute();
        org.joda.time.DurationField durationField11 = gJChronology2.eras();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField11, durationField6, and durationField8", !(durationField11.compareTo(durationField6) == 0) || (Math.signum(durationField11.compareTo(durationField8)) == Math.signum(durationField6.compareTo(durationField8))));
    }

    @Test
    public void test1619() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1619");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        boolean boolean2 = instant1.isEqualNow();
        boolean boolean4 = instant1.isEqual(0L);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = null;
        boolean boolean6 = instant1.isSupported(dateTimeFieldType5);
        org.joda.time.Instant instant9 = instant1.withDurationAdded((-61827926399999L), (int) (short) -1);
        org.joda.time.MutableDateTime mutableDateTime10 = instant9.toMutableDateTime();
        org.joda.time.Instant instant11 = instant9.toInstant();
        java.util.TimeZone timeZone12 = null;
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forTimeZone(timeZone12);
        org.joda.time.chrono.GJChronology gJChronology14 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone13);
        org.joda.time.DurationField durationField15 = gJChronology14.halfdays();
        org.joda.time.DateTimeField dateTimeField16 = gJChronology14.minuteOfDay();
        java.util.TimeZone timeZone17 = null;
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forTimeZone(timeZone17);
        java.lang.String str20 = dateTimeZone18.getNameKey((long) 100);
        boolean boolean21 = dateTimeZone18.isFixed();
        java.lang.String str22 = dateTimeZone18.toString();
        boolean boolean24 = dateTimeZone18.isStandardOffset((long) (byte) 0);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone18);
        org.joda.time.Chronology chronology26 = gJChronology14.withZone(dateTimeZone18);
        org.joda.time.DateTimeField dateTimeField27 = gJChronology14.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField28 = gJChronology14.minuteOfHour();
        org.joda.time.MutableDateTime mutableDateTime29 = instant11.toMutableDateTime((org.joda.time.Chronology) gJChronology14);
        org.joda.time.DateTimeField dateTimeField30 = gJChronology14.minuteOfHour();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant9 and mutableDateTime29", (instant9.compareTo(mutableDateTime29) == 0) == instant9.equals(mutableDateTime29));
    }

    @Test
    public void test1620() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1620");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = gJChronology2.halfdays();
        long long7 = gJChronology2.add((long) 'a', (-1L), (int) (short) 0);
        boolean boolean9 = gJChronology2.equals((java.lang.Object) 0);
        org.joda.time.DateTimeField dateTimeField10 = gJChronology2.dayOfMonth();
        org.joda.time.DurationField durationField11 = gJChronology2.seconds();
        org.joda.time.DateTimeField dateTimeField12 = gJChronology2.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField13 = gJChronology2.era();
        org.joda.time.DateTimeField dateTimeField14 = gJChronology2.hourOfDay();
        java.lang.String str15 = gJChronology2.toString();
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        long long19 = gJChronology2.add(readablePeriod16, 3732632410199948L, 12);
        org.joda.time.Instant instant20 = gJChronology2.getGregorianCutover();
        java.util.TimeZone timeZone21 = null;
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forTimeZone(timeZone21);
        org.joda.time.chrono.GJChronology gJChronology23 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone22);
        org.joda.time.DateTimeField dateTimeField24 = gJChronology23.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField25 = gJChronology23.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField26 = gJChronology23.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField27 = gJChronology23.hourOfHalfday();
        org.joda.time.DurationField durationField28 = gJChronology23.halfdays();
        org.joda.time.DateTimeField dateTimeField29 = gJChronology23.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField30 = gJChronology23.clockhourOfHalfday();
        org.joda.time.Instant instant31 = gJChronology23.getGregorianCutover();
        org.joda.time.DateTime dateTime32 = instant20.toDateTime((org.joda.time.Chronology) gJChronology23);
        boolean boolean34 = instant20.isAfter(4317599948L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant20 and dateTime32", (instant20.compareTo(dateTime32) == 0) == instant20.equals(dateTime32));
    }

    @Test
    public void test1621() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1621");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = gJChronology2.halfdays();
        long long7 = gJChronology2.add((long) 'a', (-1L), (int) (short) 0);
        boolean boolean9 = gJChronology2.equals((java.lang.Object) 0);
        org.joda.time.DateTimeField dateTimeField10 = gJChronology2.dayOfMonth();
        org.joda.time.DurationField durationField11 = gJChronology2.days();
        long long15 = gJChronology2.add((long) '4', 432000000L, (int) (short) 0);
        org.joda.time.DurationField durationField16 = gJChronology2.minutes();
        org.joda.time.DateTimeField dateTimeField17 = gJChronology2.halfdayOfDay();
        org.joda.time.DurationField durationField18 = gJChronology2.weeks();
        java.util.TimeZone timeZone19 = null;
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forTimeZone(timeZone19);
        org.joda.time.chrono.GJChronology gJChronology21 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone20);
        int int23 = dateTimeZone20.getStandardOffset((long) (byte) 0);
        org.joda.time.Instant instant25 = new org.joda.time.Instant(52L);
        boolean boolean26 = instant25.isEqualNow();
        java.lang.String str27 = instant25.toString();
        java.util.TimeZone timeZone28 = null;
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forTimeZone(timeZone28);
        org.joda.time.chrono.GJChronology gJChronology30 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone29);
        java.util.Locale locale32 = new java.util.Locale("hi!");
        java.lang.String str33 = locale32.getCountry();
        java.util.Locale locale34 = java.util.Locale.getDefault();
        java.lang.String str35 = locale34.getDisplayName();
        java.lang.String str36 = locale32.getDisplayScript(locale34);
        boolean boolean37 = dateTimeZone29.equals((java.lang.Object) locale34);
        int int39 = dateTimeZone29.getOffsetFromLocal((long) (short) 10);
        java.util.TimeZone timeZone40 = null;
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.forTimeZone(timeZone40);
        org.joda.time.chrono.GJChronology gJChronology42 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone41);
        org.joda.time.DateTimeField dateTimeField43 = gJChronology42.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField44 = gJChronology42.weekyearOfCentury();
        org.joda.time.Instant instant45 = gJChronology42.getGregorianCutover();
        org.joda.time.Instant instant47 = instant45.withMillis(0L);
        org.joda.time.Instant instant49 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone50 = null;
        org.joda.time.DateTimeZone dateTimeZone51 = org.joda.time.DateTimeZone.forTimeZone(timeZone50);
        org.joda.time.chrono.GJChronology gJChronology52 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone51);
        org.joda.time.DateTimeField dateTimeField53 = gJChronology52.millisOfSecond();
        int int54 = instant49.get(dateTimeField53);
        org.joda.time.Instant instant56 = instant49.plus(0L);
        int int57 = instant47.compareTo((org.joda.time.ReadableInstant) instant56);
        org.joda.time.DateTimeFieldType dateTimeFieldType58 = null;
        boolean boolean59 = instant56.isSupported(dateTimeFieldType58);
        int int60 = dateTimeZone29.getOffset((org.joda.time.ReadableInstant) instant56);
        boolean boolean61 = instant25.isAfter((org.joda.time.ReadableInstant) instant56);
        org.joda.time.chrono.GJChronology gJChronology62 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone20, (org.joda.time.ReadableInstant) instant25);
        org.joda.time.Chronology chronology63 = gJChronology2.withZone(dateTimeZone20);
        org.joda.time.DurationField durationField64 = gJChronology2.eras();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField64, durationField3, and durationField11", !(durationField64.compareTo(durationField3) == 0) || (Math.signum(durationField64.compareTo(durationField11)) == Math.signum(durationField3.compareTo(durationField11))));
    }

    @Test
    public void test1622() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1622");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = gJChronology2.halfdays();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.millisOfDay();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.minuteOfDay();
        org.joda.time.DurationField durationField6 = gJChronology2.centuries();
        int int7 = gJChronology2.getMinimumDaysInFirstWeek();
        org.joda.time.DateTimeField dateTimeField8 = gJChronology2.weekyear();
        org.joda.time.DateTimeField dateTimeField9 = gJChronology2.weekyearOfCentury();
        org.joda.time.DurationField durationField10 = gJChronology2.halfdays();
        org.joda.time.Instant instant11 = gJChronology2.getGregorianCutover();
        boolean boolean12 = instant11.isAfterNow();
        boolean boolean13 = instant11.isAfterNow();
        org.joda.time.DateTime dateTime14 = instant11.toDateTimeISO();
        java.util.TimeZone timeZone15 = null;
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forTimeZone(timeZone15);
        org.joda.time.chrono.GJChronology gJChronology17 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone16);
        org.joda.time.DurationField durationField18 = gJChronology17.halfdays();
        org.joda.time.DateTimeField dateTimeField19 = gJChronology17.millisOfDay();
        org.joda.time.DateTimeField dateTimeField20 = gJChronology17.minuteOfDay();
        org.joda.time.DurationField durationField21 = gJChronology17.centuries();
        org.joda.time.DateTimeField dateTimeField22 = gJChronology17.millisOfSecond();
        org.joda.time.Chronology chronology23 = gJChronology17.withUTC();
        org.joda.time.DateTimeField dateTimeField24 = gJChronology17.monthOfYear();
        org.joda.time.DateTime dateTime25 = dateTime14.toDateTime((org.joda.time.Chronology) gJChronology17);
        org.joda.time.DateTimeField dateTimeField26 = gJChronology17.minuteOfHour();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant11 and dateTime25", (instant11.compareTo(dateTime25) == 0) == instant11.equals(dateTime25));
    }

    @Test
    public void test1623() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1623");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        int int3 = dateTimeZone1.getOffsetFromLocal((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(0, (int) (short) 10);
        long long8 = dateTimeZone1.getMillisKeepLocal(dateTimeZone6, (-61827926399999L));
        java.util.Locale locale10 = java.util.Locale.getDefault();
        java.lang.String str11 = locale10.getDisplayLanguage();
        java.lang.String str12 = dateTimeZone6.getShortName(186805440000000000L, locale10);
        java.util.Locale locale14 = java.util.Locale.GERMANY;
        java.lang.String str15 = locale14.getDisplayLanguage();
        java.util.Locale locale16 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str17 = locale14.getDisplayVariant(locale16);
        java.lang.String str18 = dateTimeZone6.getName(31556952000L, locale14);
        org.joda.time.chrono.GJChronology gJChronology19 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone6);
        org.joda.time.Chronology chronology20 = gJChronology19.withUTC();
        org.joda.time.DurationField durationField21 = gJChronology19.weeks();
        java.util.TimeZone timeZone22 = null;
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        java.util.TimeZone timeZone24 = null;
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forTimeZone(timeZone24);
        org.joda.time.chrono.GJChronology gJChronology26 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone25);
        int int28 = dateTimeZone25.getOffsetFromLocal(1000L);
        long long30 = dateTimeZone23.getMillisKeepLocal(dateTimeZone25, (-61827926399999L));
        int int32 = dateTimeZone25.getOffset(5935258842600053L);
        java.util.TimeZone timeZone33 = null;
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.forTimeZone(timeZone33);
        org.joda.time.chrono.GJChronology gJChronology35 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone34);
        org.joda.time.DateTimeField dateTimeField36 = gJChronology35.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField37 = gJChronology35.weekyearOfCentury();
        org.joda.time.Instant instant38 = gJChronology35.getGregorianCutover();
        org.joda.time.Instant instant40 = instant38.withMillis(0L);
        org.joda.time.Instant instant42 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone43 = null;
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.forTimeZone(timeZone43);
        org.joda.time.chrono.GJChronology gJChronology45 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone44);
        org.joda.time.DateTimeField dateTimeField46 = gJChronology45.millisOfSecond();
        int int47 = instant42.get(dateTimeField46);
        org.joda.time.Instant instant49 = instant42.plus(0L);
        int int50 = instant40.compareTo((org.joda.time.ReadableInstant) instant49);
        java.util.TimeZone timeZone51 = null;
        org.joda.time.DateTimeZone dateTimeZone52 = org.joda.time.DateTimeZone.forTimeZone(timeZone51);
        org.joda.time.chrono.GJChronology gJChronology53 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone52);
        org.joda.time.DurationField durationField54 = gJChronology53.halfdays();
        org.joda.time.DateTimeField dateTimeField55 = gJChronology53.millisOfDay();
        org.joda.time.DateTimeField dateTimeField56 = gJChronology53.minuteOfDay();
        org.joda.time.DurationField durationField57 = gJChronology53.centuries();
        org.joda.time.DateTimeField dateTimeField58 = gJChronology53.halfdayOfDay();
        java.util.Locale locale59 = java.util.Locale.ITALIAN;
        java.util.Locale locale60 = locale59.stripExtensions();
        java.util.Locale locale61 = java.util.Locale.CANADA;
        java.lang.String str62 = locale59.getDisplayVariant(locale61);
        boolean boolean63 = gJChronology53.equals((java.lang.Object) locale61);
        org.joda.time.DateTime dateTime64 = instant40.toDateTime((org.joda.time.Chronology) gJChronology53);
        org.joda.time.chrono.GJChronology gJChronology65 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone25, (org.joda.time.ReadableInstant) dateTime64);
        org.joda.time.Chronology chronology66 = gJChronology19.withZone(dateTimeZone25);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant40 and dateTime64", (instant40.compareTo(dateTime64) == 0) == instant40.equals(dateTime64));
    }

    @Test
    public void test1624() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1624");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        boolean boolean2 = instant1.isEqualNow();
        org.joda.time.ReadableDuration readableDuration3 = null;
        org.joda.time.Instant instant4 = instant1.plus(readableDuration3);
        org.joda.time.Instant instant6 = new org.joda.time.Instant(52L);
        org.joda.time.Instant instant8 = instant6.withMillis((long) 'u');
        boolean boolean9 = instant1.isBefore((org.joda.time.ReadableInstant) instant6);
        org.joda.time.DateTimeZone dateTimeZone10 = instant6.getZone();
        org.joda.time.MutableDateTime mutableDateTime11 = instant6.toMutableDateTime();
        org.joda.time.Chronology chronology12 = instant6.getChronology();
        org.joda.time.DateTimeField dateTimeField13 = chronology12.millisOfDay();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and mutableDateTime11", (instant1.compareTo(mutableDateTime11) == 0) == instant1.equals(mutableDateTime11));
    }

    @Test
    public void test1625() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1625");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forTimeZone(timeZone2);
        org.joda.time.chrono.GJChronology gJChronology4 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone3);
        org.joda.time.DateTimeField dateTimeField5 = gJChronology4.millisOfSecond();
        int int6 = instant1.get(dateTimeField5);
        org.joda.time.Instant instant8 = instant1.plus(0L);
        org.joda.time.Instant instant9 = instant8.toInstant();
        org.joda.time.Instant instant11 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone12 = null;
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forTimeZone(timeZone12);
        org.joda.time.chrono.GJChronology gJChronology14 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone13);
        org.joda.time.DateTimeField dateTimeField15 = gJChronology14.millisOfSecond();
        int int16 = instant11.get(dateTimeField15);
        org.joda.time.Instant instant18 = instant11.plus(0L);
        org.joda.time.Instant instant19 = instant18.toInstant();
        boolean boolean20 = instant9.isEqual((org.joda.time.ReadableInstant) instant19);
        org.joda.time.Instant instant22 = new org.joda.time.Instant(52L);
        boolean boolean23 = instant22.isEqualNow();
        org.joda.time.ReadableDuration readableDuration24 = null;
        org.joda.time.Instant instant25 = instant22.plus(readableDuration24);
        org.joda.time.Instant instant27 = new org.joda.time.Instant(52L);
        org.joda.time.Instant instant29 = instant27.withMillis((long) 'u');
        boolean boolean30 = instant22.isBefore((org.joda.time.ReadableInstant) instant27);
        org.joda.time.Instant instant31 = instant27.toInstant();
        org.joda.time.DateTime dateTime32 = instant27.toDateTime();
        boolean boolean33 = instant19.isBefore((org.joda.time.ReadableInstant) instant27);
        java.util.TimeZone timeZone34 = null;
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.forTimeZone(timeZone34);
        org.joda.time.chrono.GJChronology gJChronology36 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone35);
        org.joda.time.DurationField durationField37 = gJChronology36.halfdays();
        org.joda.time.DateTimeField dateTimeField38 = gJChronology36.millisOfDay();
        org.joda.time.DateTimeField dateTimeField39 = gJChronology36.minuteOfDay();
        org.joda.time.DurationField durationField40 = gJChronology36.centuries();
        org.joda.time.DateTimeField dateTimeField41 = gJChronology36.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField42 = gJChronology36.weekyear();
        org.joda.time.DateTime dateTime43 = instant19.toDateTime((org.joda.time.Chronology) gJChronology36);
        org.joda.time.DateTimeField dateTimeField44 = gJChronology36.secondOfMinute();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and dateTime32", (instant1.compareTo(dateTime32) == 0) == instant1.equals(dateTime32));
    }

    @Test
    public void test1626() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1626");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        org.joda.time.Instant instant3 = instant1.withMillis((long) 'u');
        java.util.TimeZone timeZone4 = null;
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forTimeZone(timeZone4);
        org.joda.time.chrono.GJChronology gJChronology6 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone5);
        org.joda.time.DurationField durationField7 = gJChronology6.halfdays();
        long long11 = gJChronology6.add((long) 'a', (-1L), (int) (short) 0);
        boolean boolean13 = gJChronology6.equals((java.lang.Object) 0);
        org.joda.time.DateTimeField dateTimeField14 = gJChronology6.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology6.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField16 = gJChronology6.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField17 = gJChronology6.clockhourOfHalfday();
        org.joda.time.DateTime dateTime18 = instant1.toDateTime((org.joda.time.Chronology) gJChronology6);
        java.util.TimeZone timeZone19 = null;
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forTimeZone(timeZone19);
        org.joda.time.chrono.GJChronology gJChronology21 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone20);
        org.joda.time.DurationField durationField22 = gJChronology21.halfdays();
        long long26 = gJChronology21.add((long) 'a', (-1L), (int) (short) 0);
        long long30 = gJChronology21.add((long) (byte) 0, (long) '4', 100);
        org.joda.time.DateTimeField dateTimeField31 = gJChronology21.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField32 = gJChronology21.year();
        org.joda.time.DateTimeField dateTimeField33 = gJChronology21.monthOfYear();
        org.joda.time.MutableDateTime mutableDateTime34 = instant1.toMutableDateTime((org.joda.time.Chronology) gJChronology21);
        boolean boolean36 = instant1.isAfter(4324200000L);
        org.joda.time.ReadableDuration readableDuration37 = null;
        org.joda.time.Instant instant38 = instant1.plus(readableDuration37);
        java.util.TimeZone timeZone39 = null;
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.forTimeZone(timeZone39);
        org.joda.time.chrono.GJChronology gJChronology41 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone40);
        org.joda.time.DurationField durationField42 = gJChronology41.halfdays();
        long long46 = gJChronology41.add((long) 'a', (-1L), (int) (short) 0);
        long long50 = gJChronology41.add((long) (byte) 0, (long) '4', 100);
        org.joda.time.DateTimeField dateTimeField51 = gJChronology41.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField52 = gJChronology41.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField53 = gJChronology41.secondOfDay();
        int int54 = instant1.get(dateTimeField53);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime18 and instant1", (dateTime18.compareTo(instant1) == 0) == dateTime18.equals(instant1));
    }

    @Test
    public void test1627() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1627");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forTimeZone(timeZone2);
        org.joda.time.chrono.GJChronology gJChronology4 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone3);
        org.joda.time.DateTimeField dateTimeField5 = gJChronology4.millisOfSecond();
        int int6 = instant1.get(dateTimeField5);
        java.util.TimeZone timeZone7 = null;
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forTimeZone(timeZone7);
        org.joda.time.chrono.GJChronology gJChronology9 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone8);
        org.joda.time.DurationField durationField10 = gJChronology9.halfdays();
        java.util.TimeZone timeZone11 = null;
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forTimeZone(timeZone11);
        org.joda.time.chrono.GJChronology gJChronology13 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone12);
        long long17 = dateTimeZone12.convertLocalToUTC((long) (byte) -1, true, 0L);
        boolean boolean19 = dateTimeZone12.equals((java.lang.Object) true);
        org.joda.time.Chronology chronology20 = gJChronology9.withZone(dateTimeZone12);
        org.joda.time.MutableDateTime mutableDateTime21 = instant1.toMutableDateTime(dateTimeZone12);
        org.joda.time.Chronology chronology22 = instant1.getChronology();
        org.joda.time.DurationField durationField23 = chronology22.days();
        java.lang.String str24 = durationField23.getName();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and mutableDateTime21", (instant1.compareTo(mutableDateTime21) == 0) == instant1.equals(mutableDateTime21));
    }

    @Test
    public void test1628() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1628");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        boolean boolean2 = instant1.isEqualNow();
        java.lang.String str3 = instant1.toString();
        org.joda.time.Instant instant5 = new org.joda.time.Instant(52L);
        boolean boolean6 = instant5.isEqualNow();
        java.lang.String str7 = instant5.toString();
        java.lang.String str8 = instant5.toString();
        org.joda.time.Instant instant11 = instant5.withDurationAdded(115200000L, (int) (short) 1);
        int int12 = instant1.compareTo((org.joda.time.ReadableInstant) instant5);
        org.joda.time.MutableDateTime mutableDateTime13 = instant1.toMutableDateTime();
        java.util.TimeZone timeZone14 = null;
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forTimeZone(timeZone14);
        org.joda.time.chrono.GJChronology gJChronology16 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone15);
        org.joda.time.DateTimeField dateTimeField17 = gJChronology16.era();
        org.joda.time.DurationField durationField18 = gJChronology16.months();
        org.joda.time.DateTimeField dateTimeField19 = gJChronology16.weekyearOfCentury();
        int int20 = instant1.get(dateTimeField19);
        java.util.TimeZone timeZone21 = null;
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forTimeZone(timeZone21);
        org.joda.time.chrono.GJChronology gJChronology23 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone22);
        java.util.Locale locale25 = new java.util.Locale("hi!");
        java.lang.String str26 = locale25.getCountry();
        java.util.Locale locale27 = java.util.Locale.getDefault();
        java.lang.String str28 = locale27.getDisplayName();
        java.lang.String str29 = locale25.getDisplayScript(locale27);
        boolean boolean30 = dateTimeZone22.equals((java.lang.Object) locale27);
        int int32 = dateTimeZone22.getOffsetFromLocal((long) (short) 10);
        java.util.TimeZone timeZone33 = null;
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.forTimeZone(timeZone33);
        org.joda.time.chrono.GJChronology gJChronology35 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone34);
        org.joda.time.DateTimeField dateTimeField36 = gJChronology35.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField37 = gJChronology35.weekyearOfCentury();
        org.joda.time.Instant instant38 = gJChronology35.getGregorianCutover();
        org.joda.time.Instant instant40 = instant38.withMillis(0L);
        org.joda.time.Instant instant42 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone43 = null;
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.forTimeZone(timeZone43);
        org.joda.time.chrono.GJChronology gJChronology45 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone44);
        org.joda.time.DateTimeField dateTimeField46 = gJChronology45.millisOfSecond();
        int int47 = instant42.get(dateTimeField46);
        org.joda.time.Instant instant49 = instant42.plus(0L);
        int int50 = instant40.compareTo((org.joda.time.ReadableInstant) instant49);
        org.joda.time.DateTimeFieldType dateTimeFieldType51 = null;
        boolean boolean52 = instant49.isSupported(dateTimeFieldType51);
        int int53 = dateTimeZone22.getOffset((org.joda.time.ReadableInstant) instant49);
        boolean boolean55 = instant49.isAfter(1000L);
        org.joda.time.Instant instant56 = instant49.toInstant();
        org.joda.time.Instant instant58 = instant49.minus(3600000L);
        org.joda.time.DateTimeZone dateTimeZone59 = instant58.getZone();
        boolean boolean60 = instant1.isBefore((org.joda.time.ReadableInstant) instant58);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant5 and mutableDateTime13", (instant5.compareTo(mutableDateTime13) == 0) == instant5.equals(mutableDateTime13));
    }

    @Test
    public void test1629() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1629");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forTimeZone(timeZone2);
        org.joda.time.chrono.GJChronology gJChronology4 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone3);
        org.joda.time.DateTimeField dateTimeField5 = gJChronology4.millisOfSecond();
        int int6 = instant1.get(dateTimeField5);
        org.joda.time.Instant instant8 = instant1.plus(0L);
        java.util.TimeZone timeZone9 = null;
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forTimeZone(timeZone9);
        org.joda.time.chrono.GJChronology gJChronology11 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone10);
        org.joda.time.DurationField durationField12 = gJChronology11.halfdays();
        long long16 = gJChronology11.add((long) 'a', (-1L), (int) (short) 0);
        boolean boolean18 = gJChronology11.equals((java.lang.Object) 0);
        org.joda.time.DateTimeField dateTimeField19 = gJChronology11.dayOfMonth();
        org.joda.time.DurationField durationField20 = gJChronology11.days();
        long long24 = gJChronology11.add((long) '4', 432000000L, (int) (short) 0);
        org.joda.time.DurationField durationField25 = gJChronology11.years();
        java.lang.String str26 = gJChronology11.toString();
        org.joda.time.DateTimeField dateTimeField27 = gJChronology11.hourOfDay();
        boolean boolean28 = instant8.equals((java.lang.Object) gJChronology11);
        org.joda.time.DateTime dateTime29 = instant8.toDateTime();
        org.joda.time.Instant instant31 = new org.joda.time.Instant(52L);
        boolean boolean32 = instant31.isEqualNow();
        java.lang.String str33 = instant31.toString();
        java.lang.String str34 = instant31.toString();
        org.joda.time.Instant instant36 = new org.joda.time.Instant(52L);
        boolean boolean37 = instant36.isEqualNow();
        org.joda.time.ReadableDuration readableDuration38 = null;
        org.joda.time.Instant instant39 = instant36.plus(readableDuration38);
        boolean boolean40 = instant31.isBefore((org.joda.time.ReadableInstant) instant39);
        org.joda.time.Instant instant42 = instant39.plus((long) (short) 100);
        org.joda.time.MutableDateTime mutableDateTime43 = instant39.toMutableDateTime();
        org.joda.time.DateTimeZone dateTimeZone44 = mutableDateTime43.getZone();
        boolean boolean45 = instant8.isAfter((org.joda.time.ReadableInstant) mutableDateTime43);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant8 and dateTime29", (instant8.compareTo(dateTime29) == 0) == instant8.equals(dateTime29));
    }

    @Test
    public void test1630() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1630");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        java.util.Locale locale4 = new java.util.Locale("hi!");
        java.lang.String str5 = locale4.getCountry();
        java.util.Locale locale6 = java.util.Locale.getDefault();
        java.lang.String str7 = locale6.getDisplayName();
        java.lang.String str8 = locale4.getDisplayScript(locale6);
        boolean boolean9 = dateTimeZone1.equals((java.lang.Object) locale6);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetMillis((int) '4');
        java.util.TimeZone timeZone12 = dateTimeZone11.toTimeZone();
        long long15 = dateTimeZone11.adjustOffset((long) 0, false);
        int int17 = dateTimeZone11.getOffsetFromLocal((-26438399999L));
        long long19 = dateTimeZone1.getMillisKeepLocal(dateTimeZone11, (long) (byte) 10);
        org.joda.time.Instant instant21 = new org.joda.time.Instant(52L);
        boolean boolean22 = instant21.isEqualNow();
        org.joda.time.ReadableDuration readableDuration23 = null;
        org.joda.time.Instant instant24 = instant21.plus(readableDuration23);
        long long25 = instant21.getMillis();
        java.lang.String str26 = instant21.toString();
        org.joda.time.Instant instant27 = instant21.toInstant();
        org.joda.time.ReadableDuration readableDuration28 = null;
        org.joda.time.Instant instant30 = instant21.withDurationAdded(readableDuration28, (int) 'x');
        java.util.TimeZone timeZone31 = null;
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.forTimeZone(timeZone31);
        org.joda.time.chrono.GJChronology gJChronology33 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone32);
        org.joda.time.DateTimeField dateTimeField34 = gJChronology33.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField35 = gJChronology33.yearOfCentury();
        int int36 = instant30.get(dateTimeField35);
        org.joda.time.chrono.GJChronology gJChronology37 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone11, (org.joda.time.ReadableInstant) instant30);
        org.joda.time.DateTimeField dateTimeField38 = gJChronology37.minuteOfDay();
        java.util.TimeZone timeZone39 = null;
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.forTimeZone(timeZone39);
        org.joda.time.chrono.GJChronology gJChronology41 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone40);
        org.joda.time.DurationField durationField42 = gJChronology41.halfdays();
        org.joda.time.DateTimeField dateTimeField43 = gJChronology41.millisOfDay();
        org.joda.time.DateTimeField dateTimeField44 = gJChronology41.minuteOfDay();
        org.joda.time.DurationField durationField45 = gJChronology41.centuries();
        org.joda.time.DateTimeField dateTimeField46 = gJChronology41.dayOfYear();
        java.lang.String str47 = gJChronology41.toString();
        org.joda.time.DateTimeField dateTimeField48 = gJChronology41.dayOfYear();
        org.joda.time.Chronology chronology49 = gJChronology41.withUTC();
        org.joda.time.DateTimeZone dateTimeZone50 = gJChronology41.getZone();
        org.joda.time.Chronology chronology51 = gJChronology37.withZone(dateTimeZone50);
        org.joda.time.DurationField durationField52 = gJChronology37.years();
        java.lang.String str53 = gJChronology37.toString();
        org.joda.time.DateTimeField dateTimeField54 = gJChronology37.era();
        java.util.TimeZone timeZone55 = null;
        org.joda.time.DateTimeZone dateTimeZone56 = org.joda.time.DateTimeZone.forTimeZone(timeZone55);
        org.joda.time.chrono.GJChronology gJChronology57 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone56);
        org.joda.time.DurationField durationField58 = gJChronology57.halfdays();
        long long62 = gJChronology57.add((long) 'a', (-1L), (int) (short) 0);
        org.joda.time.DateTimeField dateTimeField63 = gJChronology57.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField64 = gJChronology57.centuryOfEra();
        long long68 = gJChronology57.add(262974600000L, (long) (byte) 100, (int) '4');
        org.joda.time.DurationField durationField69 = gJChronology57.hours();
        java.util.TimeZone timeZone70 = null;
        org.joda.time.DateTimeZone dateTimeZone71 = org.joda.time.DateTimeZone.forTimeZone(timeZone70);
        org.joda.time.Chronology chronology72 = gJChronology57.withZone(dateTimeZone71);
        org.joda.time.DurationField durationField73 = gJChronology57.centuries();
        org.joda.time.DateTimeZone dateTimeZone74 = gJChronology57.getZone();
        org.joda.time.Chronology chronology75 = gJChronology37.withZone(dateTimeZone74);
        org.joda.time.DurationField durationField76 = gJChronology37.hours();
        org.joda.time.DateTimeField dateTimeField77 = gJChronology37.secondOfDay();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on durationField69 and durationField76", (durationField69.compareTo(durationField76) == 0) == durationField69.equals(durationField76));
    }

    @Test
    public void test1631() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1631");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forTimeZone(timeZone2);
        org.joda.time.chrono.GJChronology gJChronology4 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone3);
        org.joda.time.DateTimeField dateTimeField5 = gJChronology4.millisOfSecond();
        int int6 = instant1.get(dateTimeField5);
        org.joda.time.Instant instant8 = instant1.plus(0L);
        java.util.TimeZone timeZone9 = null;
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forTimeZone(timeZone9);
        org.joda.time.chrono.GJChronology gJChronology11 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone10);
        org.joda.time.DurationField durationField12 = gJChronology11.halfdays();
        org.joda.time.Chronology chronology13 = gJChronology11.withUTC();
        java.lang.String str14 = gJChronology11.toString();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology11.hourOfHalfday();
        int int16 = instant1.get(dateTimeField15);
        org.joda.time.Instant instant18 = new org.joda.time.Instant(52L);
        boolean boolean19 = instant18.isEqualNow();
        org.joda.time.ReadableDuration readableDuration20 = null;
        org.joda.time.Instant instant21 = instant18.plus(readableDuration20);
        org.joda.time.Instant instant23 = new org.joda.time.Instant(52L);
        org.joda.time.Instant instant25 = instant23.withMillis((long) 'u');
        boolean boolean26 = instant18.isBefore((org.joda.time.ReadableInstant) instant23);
        boolean boolean27 = instant1.isEqual((org.joda.time.ReadableInstant) instant23);
        boolean boolean29 = instant23.isBefore((long) 28800104);
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = null;
        boolean boolean31 = instant23.isSupported(dateTimeFieldType30);
        org.joda.time.DateTime dateTime32 = instant23.toDateTimeISO();
        java.util.TimeZone timeZone33 = null;
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.forTimeZone(timeZone33);
        org.joda.time.chrono.GJChronology gJChronology35 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone34);
        org.joda.time.DateTimeField dateTimeField36 = gJChronology35.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField37 = gJChronology35.weekyearOfCentury();
        org.joda.time.Instant instant38 = gJChronology35.getGregorianCutover();
        org.joda.time.Instant instant40 = instant38.withMillis(0L);
        org.joda.time.Instant instant42 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone43 = null;
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.forTimeZone(timeZone43);
        org.joda.time.chrono.GJChronology gJChronology45 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone44);
        org.joda.time.DateTimeField dateTimeField46 = gJChronology45.millisOfSecond();
        int int47 = instant42.get(dateTimeField46);
        org.joda.time.Instant instant49 = instant42.plus(0L);
        int int50 = instant40.compareTo((org.joda.time.ReadableInstant) instant49);
        org.joda.time.Instant instant52 = new org.joda.time.Instant(52L);
        boolean boolean53 = instant52.isEqualNow();
        org.joda.time.ReadableDuration readableDuration54 = null;
        org.joda.time.Instant instant55 = instant52.plus(readableDuration54);
        boolean boolean57 = instant55.equals((java.lang.Object) ' ');
        boolean boolean58 = instant49.isEqual((org.joda.time.ReadableInstant) instant55);
        java.lang.String str59 = instant49.toString();
        org.joda.time.ReadableDuration readableDuration60 = null;
        org.joda.time.Instant instant62 = instant49.withDurationAdded(readableDuration60, 1431201);
        java.lang.Object obj63 = null;
        boolean boolean64 = instant49.equals(obj63);
        java.lang.String str65 = instant49.toString();
        org.joda.time.MutableDateTime mutableDateTime66 = instant49.toMutableDateTimeISO();
        boolean boolean67 = mutableDateTime66.isBeforeNow();
        boolean boolean68 = instant23.isAfter((org.joda.time.ReadableInstant) mutableDateTime66);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and dateTime32", (instant1.compareTo(dateTime32) == 0) == instant1.equals(dateTime32));
    }

    @Test
    public void test1632() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1632");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = gJChronology2.halfdays();
        long long7 = gJChronology2.add((long) 'a', (-1L), (int) (short) 0);
        long long11 = gJChronology2.add((long) (byte) 0, (long) '4', 100);
        org.joda.time.DateTimeField dateTimeField12 = gJChronology2.minuteOfHour();
        org.joda.time.DurationField durationField13 = gJChronology2.hours();
        org.joda.time.DateTimeField dateTimeField14 = gJChronology2.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology2.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField16 = gJChronology2.secondOfDay();
        org.joda.time.DateTimeField dateTimeField17 = gJChronology2.secondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone18 = gJChronology2.getZone();
        org.joda.time.Chronology chronology19 = gJChronology2.withUTC();
        org.joda.time.DurationField durationField20 = gJChronology2.eras();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField20, durationField3, and durationField13", !(durationField20.compareTo(durationField3) == 0) || (Math.signum(durationField20.compareTo(durationField13)) == Math.signum(durationField3.compareTo(durationField13))));
    }

    @Test
    public void test1633() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1633");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        boolean boolean2 = instant1.isEqualNow();
        org.joda.time.ReadableDuration readableDuration3 = null;
        org.joda.time.Instant instant4 = instant1.plus(readableDuration3);
        org.joda.time.Instant instant6 = instant1.withMillis((long) 4);
        boolean boolean8 = instant6.isEqual(0L);
        java.util.TimeZone timeZone9 = null;
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forTimeZone(timeZone9);
        org.joda.time.chrono.GJChronology gJChronology11 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone10);
        org.joda.time.DurationField durationField12 = gJChronology11.halfdays();
        org.joda.time.Chronology chronology13 = gJChronology11.withUTC();
        java.lang.String str14 = gJChronology11.toString();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology11.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField16 = gJChronology11.minuteOfDay();
        boolean boolean17 = instant6.equals((java.lang.Object) dateTimeField16);
        org.joda.time.Instant instant19 = new org.joda.time.Instant(52L);
        boolean boolean20 = instant19.isEqualNow();
        org.joda.time.ReadableDuration readableDuration21 = null;
        org.joda.time.Instant instant22 = instant19.plus(readableDuration21);
        boolean boolean24 = instant22.equals((java.lang.Object) ' ');
        org.joda.time.Instant instant26 = instant22.plus(3600000L);
        org.joda.time.Instant instant28 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone29 = null;
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forTimeZone(timeZone29);
        org.joda.time.chrono.GJChronology gJChronology31 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone30);
        org.joda.time.DateTimeField dateTimeField32 = gJChronology31.millisOfSecond();
        int int33 = instant28.get(dateTimeField32);
        org.joda.time.Instant instant35 = instant28.plus(0L);
        java.util.TimeZone timeZone36 = null;
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.forTimeZone(timeZone36);
        org.joda.time.chrono.GJChronology gJChronology38 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone37);
        org.joda.time.DurationField durationField39 = gJChronology38.halfdays();
        org.joda.time.Chronology chronology40 = gJChronology38.withUTC();
        java.lang.String str41 = gJChronology38.toString();
        org.joda.time.DateTimeField dateTimeField42 = gJChronology38.hourOfHalfday();
        int int43 = instant28.get(dateTimeField42);
        java.util.TimeZone timeZone44 = null;
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.forTimeZone(timeZone44);
        org.joda.time.chrono.GJChronology gJChronology46 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone45);
        org.joda.time.DurationField durationField47 = gJChronology46.halfdays();
        long long51 = gJChronology46.add((long) 'a', (-1L), (int) (short) 0);
        org.joda.time.DateTimeField dateTimeField52 = gJChronology46.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField53 = gJChronology46.secondOfMinute();
        org.joda.time.Instant instant55 = new org.joda.time.Instant(52L);
        boolean boolean56 = instant55.isEqualNow();
        org.joda.time.ReadableDuration readableDuration57 = null;
        org.joda.time.Instant instant58 = instant55.plus(readableDuration57);
        boolean boolean59 = gJChronology46.equals((java.lang.Object) instant55);
        org.joda.time.DateTimeFieldType dateTimeFieldType60 = null;
        boolean boolean61 = instant55.isSupported(dateTimeFieldType60);
        org.joda.time.DateTimeFieldType dateTimeFieldType62 = null;
        boolean boolean63 = instant55.isSupported(dateTimeFieldType62);
        org.joda.time.DateTimeZone dateTimeZone64 = instant55.getZone();
        boolean boolean65 = instant28.isAfter((org.joda.time.ReadableInstant) instant55);
        org.joda.time.Instant instant67 = instant28.minus((long) 70);
        org.joda.time.Instant instant69 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone70 = null;
        org.joda.time.DateTimeZone dateTimeZone71 = org.joda.time.DateTimeZone.forTimeZone(timeZone70);
        org.joda.time.chrono.GJChronology gJChronology72 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone71);
        org.joda.time.DateTimeField dateTimeField73 = gJChronology72.millisOfSecond();
        int int74 = instant69.get(dateTimeField73);
        boolean boolean75 = instant69.isEqualNow();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter76 = null;
        java.lang.String str77 = instant69.toString(dateTimeFormatter76);
        boolean boolean78 = instant28.isAfter((org.joda.time.ReadableInstant) instant69);
        boolean boolean79 = instant26.isEqual((org.joda.time.ReadableInstant) instant28);
        org.joda.time.Chronology chronology80 = instant28.getChronology();
        org.joda.time.DateTimeFieldType dateTimeFieldType81 = null;
        boolean boolean82 = instant28.isSupported(dateTimeFieldType81);
        boolean boolean83 = instant6.isAfter((org.joda.time.ReadableInstant) instant28);
        org.joda.time.Instant instant84 = instant28.toInstant();
        org.joda.time.MutableDateTime mutableDateTime85 = instant84.toMutableDateTimeISO();
        org.joda.time.Chronology chronology86 = instant84.getChronology();
        org.joda.time.ReadableDuration readableDuration87 = null;
        org.joda.time.Instant instant88 = instant84.minus(readableDuration87);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and mutableDateTime85", (instant1.compareTo(mutableDateTime85) == 0) == instant1.equals(mutableDateTime85));
    }

    @Test
    public void test1634() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1634");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField3 = gJChronology2.millisOfSecond();
        org.joda.time.DurationField durationField4 = gJChronology2.millis();
        org.joda.time.DurationField durationField5 = gJChronology2.weekyears();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology2.weekOfWeekyear();
        org.joda.time.Chronology chronology7 = gJChronology2.withUTC();
        org.joda.time.DurationField durationField8 = chronology7.eras();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField8, durationField4, and durationField5", !(durationField8.compareTo(durationField4) == 0) || (Math.signum(durationField8.compareTo(durationField5)) == Math.signum(durationField4.compareTo(durationField5))));
    }

    @Test
    public void test1635() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1635");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        boolean boolean2 = instant1.isEqualNow();
        boolean boolean4 = instant1.isEqual(0L);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = null;
        boolean boolean6 = instant1.isSupported(dateTimeFieldType5);
        org.joda.time.Instant instant9 = instant1.withDurationAdded((-61827926399999L), (int) (short) -1);
        org.joda.time.MutableDateTime mutableDateTime10 = instant9.toMutableDateTime();
        org.joda.time.Instant instant12 = new org.joda.time.Instant(52L);
        boolean boolean13 = instant12.isEqualNow();
        java.lang.String str14 = instant12.toString();
        org.joda.time.DateTimeZone dateTimeZone15 = instant12.getZone();
        java.util.TimeZone timeZone16 = null;
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forTimeZone(timeZone16);
        org.joda.time.chrono.GJChronology gJChronology18 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone17);
        org.joda.time.DurationField durationField19 = gJChronology18.halfdays();
        org.joda.time.DateTimeField dateTimeField20 = gJChronology18.millisOfDay();
        org.joda.time.DateTimeField dateTimeField21 = gJChronology18.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField22 = gJChronology18.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone23 = gJChronology18.getZone();
        boolean boolean24 = dateTimeZone23.isFixed();
        boolean boolean25 = dateTimeZone23.isFixed();
        java.lang.String str26 = dateTimeZone23.toString();
        java.util.TimeZone timeZone27 = null;
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forTimeZone(timeZone27);
        org.joda.time.chrono.GJChronology gJChronology29 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone28);
        org.joda.time.DateTimeField dateTimeField30 = gJChronology29.millisOfSecond();
        org.joda.time.DurationField durationField31 = gJChronology29.millis();
        org.joda.time.ReadablePeriod readablePeriod32 = null;
        long long35 = gJChronology29.add(readablePeriod32, (long) 'a', (int) '4');
        org.joda.time.DateTimeField dateTimeField36 = gJChronology29.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField37 = gJChronology29.yearOfCentury();
        boolean boolean38 = dateTimeZone23.equals((java.lang.Object) dateTimeField37);
        int int40 = dateTimeZone23.getOffsetFromLocal((long) ' ');
        long long42 = dateTimeZone15.getMillisKeepLocal(dateTimeZone23, 1431201L);
        java.util.TimeZone timeZone43 = null;
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.forTimeZone(timeZone43);
        org.joda.time.chrono.GJChronology gJChronology45 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone44);
        org.joda.time.DurationField durationField46 = gJChronology45.halfdays();
        org.joda.time.DateTimeField dateTimeField47 = gJChronology45.millisOfDay();
        org.joda.time.DateTimeField dateTimeField48 = gJChronology45.minuteOfDay();
        org.joda.time.DurationField durationField49 = gJChronology45.centuries();
        org.joda.time.DateTimeField dateTimeField50 = gJChronology45.halfdayOfDay();
        java.util.Locale locale51 = java.util.Locale.ITALIAN;
        java.util.Locale locale52 = locale51.stripExtensions();
        java.util.Locale locale53 = java.util.Locale.CANADA;
        java.lang.String str54 = locale51.getDisplayVariant(locale53);
        boolean boolean55 = gJChronology45.equals((java.lang.Object) locale53);
        org.joda.time.DurationField durationField56 = gJChronology45.days();
        long long58 = durationField56.getMillis(10);
        boolean boolean59 = dateTimeZone23.equals((java.lang.Object) long58);
        org.joda.time.DateTime dateTime60 = instant9.toDateTime(dateTimeZone23);
        java.util.TimeZone timeZone61 = null;
        org.joda.time.DateTimeZone dateTimeZone62 = org.joda.time.DateTimeZone.forTimeZone(timeZone61);
        org.joda.time.chrono.GJChronology gJChronology63 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone62);
        org.joda.time.DateTimeField dateTimeField64 = gJChronology63.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField65 = gJChronology63.weekyear();
        org.joda.time.DurationField durationField66 = gJChronology63.centuries();
        org.joda.time.DateTimeField dateTimeField67 = gJChronology63.millisOfDay();
        org.joda.time.ReadablePeriod readablePeriod68 = null;
        long long71 = gJChronology63.add(readablePeriod68, (long) '4', (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField72 = gJChronology63.hourOfHalfday();
        org.joda.time.Chronology chronology73 = gJChronology63.withUTC();
        org.joda.time.DateTimeZone dateTimeZone74 = gJChronology63.getZone();
        org.joda.time.DateTimeField dateTimeField75 = gJChronology63.hourOfHalfday();
        org.joda.time.Instant instant76 = gJChronology63.getGregorianCutover();
        java.util.TimeZone timeZone77 = null;
        org.joda.time.DateTimeZone dateTimeZone78 = org.joda.time.DateTimeZone.forTimeZone(timeZone77);
        org.joda.time.chrono.GJChronology gJChronology79 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone78);
        org.joda.time.DateTimeField dateTimeField80 = gJChronology79.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField81 = gJChronology79.clockhourOfHalfday();
        org.joda.time.DurationField durationField82 = gJChronology79.millis();
        boolean boolean83 = instant76.equals((java.lang.Object) durationField82);
        int int84 = dateTimeZone23.getOffset((org.joda.time.ReadableInstant) instant76);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant9 and mutableDateTime10", (instant9.compareTo(mutableDateTime10) == 0) == instant9.equals(mutableDateTime10));
    }

    @Test
    public void test1636() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1636");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        boolean boolean2 = instant1.isEqualNow();
        java.lang.String str3 = instant1.toString();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.MutableDateTime mutableDateTime5 = instant1.toMutableDateTime(chronology4);
        org.joda.time.MutableDateTime mutableDateTime6 = instant1.toMutableDateTime();
        org.joda.time.MutableDateTime mutableDateTime7 = instant1.toMutableDateTime();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = null;
        java.lang.String str9 = instant1.toString(dateTimeFormatter8);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.Instant instant11 = instant1.minus(readableDuration10);
        java.util.TimeZone timeZone12 = null;
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forTimeZone(timeZone12);
        org.joda.time.chrono.GJChronology gJChronology14 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone13);
        org.joda.time.DurationField durationField15 = gJChronology14.halfdays();
        long long19 = gJChronology14.add((long) 'a', (-1L), (int) (short) 0);
        long long23 = gJChronology14.add((long) (byte) 0, (long) '4', 100);
        org.joda.time.DurationField durationField24 = gJChronology14.years();
        long long26 = durationField24.getMillis((long) 100);
        long long28 = durationField24.getValueAsLong((long) (byte) 10);
        long long31 = durationField24.subtract((long) 0, 4200000);
        int int34 = durationField24.getDifference(0L, 2629746000L);
        boolean boolean35 = instant1.equals((java.lang.Object) int34);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime5 and instant1", (mutableDateTime5.compareTo(instant1) == 0) == mutableDateTime5.equals(instant1));
    }

    @Test
    public void test1637() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1637");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forTimeZone(timeZone2);
        org.joda.time.chrono.GJChronology gJChronology4 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone3);
        org.joda.time.DateTimeField dateTimeField5 = gJChronology4.millisOfSecond();
        int int6 = instant1.get(dateTimeField5);
        org.joda.time.Instant instant8 = instant1.plus(0L);
        long long9 = instant1.getMillis();
        org.joda.time.Instant instant11 = new org.joda.time.Instant(52L);
        boolean boolean12 = instant11.isEqualNow();
        java.lang.String str13 = instant11.toString();
        java.lang.String str14 = instant11.toString();
        org.joda.time.Instant instant16 = new org.joda.time.Instant(52L);
        boolean boolean17 = instant16.isEqualNow();
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.Instant instant19 = instant16.plus(readableDuration18);
        boolean boolean20 = instant11.isBefore((org.joda.time.ReadableInstant) instant19);
        org.joda.time.ReadableDuration readableDuration21 = null;
        org.joda.time.Instant instant22 = instant19.minus(readableDuration21);
        boolean boolean23 = instant1.isAfter((org.joda.time.ReadableInstant) instant19);
        boolean boolean24 = instant19.isEqualNow();
        org.joda.time.Instant instant25 = instant19.toInstant();
        org.joda.time.Instant instant26 = instant19.toInstant();
        org.joda.time.DateTime dateTime27 = instant19.toDateTime();
        long long28 = instant19.getMillis();
        boolean boolean30 = instant19.isBefore(19210299733462551L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and dateTime27", (instant1.compareTo(dateTime27) == 0) == instant1.equals(dateTime27));
    }

    @Test
    public void test1638() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1638");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        java.util.Locale locale4 = new java.util.Locale("hi!");
        java.lang.String str5 = locale4.getCountry();
        java.util.Locale locale6 = java.util.Locale.getDefault();
        java.lang.String str7 = locale6.getDisplayName();
        java.lang.String str8 = locale4.getDisplayScript(locale6);
        boolean boolean9 = dateTimeZone1.equals((java.lang.Object) locale6);
        int int11 = dateTimeZone1.getOffsetFromLocal((long) (short) 10);
        java.util.TimeZone timeZone12 = null;
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forTimeZone(timeZone12);
        org.joda.time.chrono.GJChronology gJChronology14 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone13);
        org.joda.time.DateTimeField dateTimeField15 = gJChronology14.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField16 = gJChronology14.weekyearOfCentury();
        org.joda.time.Instant instant17 = gJChronology14.getGregorianCutover();
        org.joda.time.Instant instant19 = instant17.withMillis(0L);
        org.joda.time.Instant instant21 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone22 = null;
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        org.joda.time.chrono.GJChronology gJChronology24 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone23);
        org.joda.time.DateTimeField dateTimeField25 = gJChronology24.millisOfSecond();
        int int26 = instant21.get(dateTimeField25);
        org.joda.time.Instant instant28 = instant21.plus(0L);
        int int29 = instant19.compareTo((org.joda.time.ReadableInstant) instant28);
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = null;
        boolean boolean31 = instant28.isSupported(dateTimeFieldType30);
        int int32 = dateTimeZone1.getOffset((org.joda.time.ReadableInstant) instant28);
        boolean boolean34 = instant28.isAfter(1000L);
        org.joda.time.MutableDateTime mutableDateTime35 = instant28.toMutableDateTimeISO();
        java.lang.String str36 = instant28.toString();
        org.joda.time.DateTimeZone dateTimeZone37 = instant28.getZone();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant28 and mutableDateTime35", (instant28.compareTo(mutableDateTime35) == 0) == instant28.equals(mutableDateTime35));
    }

    @Test
    public void test1639() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1639");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        boolean boolean2 = instant1.isEqualNow();
        org.joda.time.ReadableDuration readableDuration3 = null;
        org.joda.time.Instant instant4 = instant1.plus(readableDuration3);
        boolean boolean6 = instant4.equals((java.lang.Object) ' ');
        org.joda.time.Instant instant8 = new org.joda.time.Instant(52L);
        boolean boolean9 = instant8.isEqualNow();
        java.lang.String str10 = instant8.toString();
        java.lang.String str11 = instant8.toString();
        boolean boolean12 = instant4.isBefore((org.joda.time.ReadableInstant) instant8);
        org.joda.time.Instant instant14 = instant8.minus((long) (-102228));
        boolean boolean15 = instant14.isAfterNow();
        java.util.TimeZone timeZone16 = null;
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forTimeZone(timeZone16);
        org.joda.time.chrono.GJChronology gJChronology18 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone17);
        org.joda.time.DurationField durationField19 = gJChronology18.halfdays();
        long long23 = gJChronology18.add((long) 'a', (-1L), (int) (short) 0);
        long long27 = gJChronology18.add((long) (byte) 0, (long) '4', 100);
        org.joda.time.DateTimeField dateTimeField28 = gJChronology18.minuteOfHour();
        org.joda.time.DurationField durationField29 = gJChronology18.hours();
        org.joda.time.DateTimeField dateTimeField30 = gJChronology18.hourOfHalfday();
        org.joda.time.Chronology chronology31 = gJChronology18.withUTC();
        org.joda.time.DateTimeField dateTimeField32 = gJChronology18.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField33 = gJChronology18.secondOfMinute();
        org.joda.time.DurationField durationField34 = gJChronology18.months();
        org.joda.time.MutableDateTime mutableDateTime35 = instant14.toMutableDateTime((org.joda.time.Chronology) gJChronology18);
        org.joda.time.DateTimeField dateTimeField36 = gJChronology18.dayOfYear();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant14 and mutableDateTime35", (instant14.compareTo(mutableDateTime35) == 0) == instant14.equals(mutableDateTime35));
    }

    @Test
    public void test1640() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1640");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(4000L);
        java.util.TimeZone timeZone2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forTimeZone(timeZone2);
        org.joda.time.chrono.GJChronology gJChronology4 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone3);
        org.joda.time.DateTimeField dateTimeField5 = gJChronology4.era();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology4.year();
        org.joda.time.DateTime dateTime7 = instant1.toDateTime((org.joda.time.Chronology) gJChronology4);
        org.joda.time.DateTimeField dateTimeField8 = gJChronology4.era();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and dateTime7", (instant1.compareTo(dateTime7) == 0) == instant1.equals(dateTime7));
    }

    @Test
    public void test1641() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1641");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forTimeZone(timeZone2);
        org.joda.time.chrono.GJChronology gJChronology4 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone3);
        org.joda.time.DateTimeField dateTimeField5 = gJChronology4.millisOfSecond();
        int int6 = instant1.get(dateTimeField5);
        org.joda.time.Instant instant8 = instant1.plus(0L);
        org.joda.time.Instant instant9 = instant8.toInstant();
        org.joda.time.Instant instant11 = new org.joda.time.Instant(52L);
        boolean boolean12 = instant11.isEqualNow();
        java.lang.String str13 = instant11.toString();
        java.lang.String str14 = instant11.toString();
        org.joda.time.Instant instant16 = new org.joda.time.Instant(52L);
        boolean boolean17 = instant16.isEqualNow();
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.Instant instant19 = instant16.plus(readableDuration18);
        boolean boolean20 = instant11.isBefore((org.joda.time.ReadableInstant) instant19);
        org.joda.time.Instant instant22 = instant11.minus((long) 0);
        int int23 = instant8.compareTo((org.joda.time.ReadableInstant) instant11);
        java.util.TimeZone timeZone24 = null;
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forTimeZone(timeZone24);
        org.joda.time.chrono.GJChronology gJChronology26 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone25);
        org.joda.time.DateTimeField dateTimeField27 = gJChronology26.millisOfSecond();
        org.joda.time.DurationField durationField28 = gJChronology26.millis();
        org.joda.time.ReadablePeriod readablePeriod29 = null;
        long long32 = gJChronology26.add(readablePeriod29, (long) 'a', (int) '4');
        org.joda.time.DateTimeZone dateTimeZone33 = gJChronology26.getZone();
        org.joda.time.Instant instant35 = new org.joda.time.Instant(52L);
        boolean boolean36 = instant35.isEqualNow();
        org.joda.time.ReadableDuration readableDuration37 = null;
        org.joda.time.Instant instant38 = instant35.plus(readableDuration37);
        long long39 = instant35.getMillis();
        java.lang.Object obj40 = null;
        boolean boolean41 = instant35.equals(obj40);
        org.joda.time.Instant instant43 = new org.joda.time.Instant(52L);
        boolean boolean44 = instant43.isEqualNow();
        org.joda.time.ReadableDuration readableDuration45 = null;
        org.joda.time.Instant instant46 = instant43.plus(readableDuration45);
        long long47 = instant43.getMillis();
        java.lang.String str48 = instant43.toString();
        org.joda.time.Instant instant49 = instant43.toInstant();
        org.joda.time.ReadableDuration readableDuration50 = null;
        org.joda.time.Instant instant52 = instant43.withDurationAdded(readableDuration50, (int) 'x');
        org.joda.time.Instant instant53 = instant43.toInstant();
        int int54 = instant35.compareTo((org.joda.time.ReadableInstant) instant43);
        int int55 = dateTimeZone33.getOffset((org.joda.time.ReadableInstant) instant35);
        boolean boolean56 = instant35.isAfterNow();
        boolean boolean57 = instant35.isAfterNow();
        int int58 = instant8.compareTo((org.joda.time.ReadableInstant) instant35);
        org.joda.time.DateTimeZone dateTimeZone59 = instant8.getZone();
        org.joda.time.Instant instant61 = new org.joda.time.Instant(52L);
        boolean boolean62 = instant61.isEqualNow();
        org.joda.time.ReadableDuration readableDuration63 = null;
        org.joda.time.Instant instant64 = instant61.plus(readableDuration63);
        long long65 = instant61.getMillis();
        java.lang.String str66 = instant61.toString();
        org.joda.time.Instant instant67 = instant61.toInstant();
        org.joda.time.ReadableDuration readableDuration68 = null;
        org.joda.time.Instant instant70 = instant61.withDurationAdded(readableDuration68, (int) 'x');
        org.joda.time.DateTimeZone dateTimeZone71 = instant61.getZone();
        org.joda.time.Chronology chronology72 = instant61.getChronology();
        org.joda.time.Instant instant75 = instant61.withDurationAdded(0L, 1582);
        org.joda.time.ReadableDuration readableDuration76 = null;
        org.joda.time.Instant instant78 = instant61.withDurationAdded(readableDuration76, 88);
        org.joda.time.chrono.GJChronology gJChronology79 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone59, (org.joda.time.ReadableInstant) instant61);
        org.joda.time.Instant instant81 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone82 = null;
        org.joda.time.DateTimeZone dateTimeZone83 = org.joda.time.DateTimeZone.forTimeZone(timeZone82);
        org.joda.time.chrono.GJChronology gJChronology84 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone83);
        org.joda.time.DateTimeField dateTimeField85 = gJChronology84.millisOfSecond();
        int int86 = instant81.get(dateTimeField85);
        boolean boolean87 = instant81.isEqualNow();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter88 = null;
        java.lang.String str89 = instant81.toString(dateTimeFormatter88);
        boolean boolean90 = instant81.isAfterNow();
        org.joda.time.Instant instant91 = instant81.toInstant();
        org.joda.time.DateTime dateTime92 = instant91.toDateTime();
        boolean boolean93 = instant61.isBefore((org.joda.time.ReadableInstant) instant91);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and dateTime92", (instant1.compareTo(dateTime92) == 0) == instant1.equals(dateTime92));
    }

    @Test
    public void test1642() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1642");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str3 = dateTimeZone1.getNameKey((long) 100);
        boolean boolean4 = dateTimeZone1.isFixed();
        org.joda.time.chrono.GJChronology gJChronology5 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        int int6 = gJChronology5.getMinimumDaysInFirstWeek();
        java.lang.String str7 = gJChronology5.toString();
        org.joda.time.DateTimeField dateTimeField8 = gJChronology5.yearOfEra();
        org.joda.time.DateTimeField dateTimeField9 = gJChronology5.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField10 = gJChronology5.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField11 = gJChronology5.year();
        org.joda.time.DateTimeZone dateTimeZone12 = gJChronology5.getZone();
        org.joda.time.Instant instant14 = new org.joda.time.Instant(52L);
        boolean boolean15 = instant14.isEqualNow();
        org.joda.time.ReadableDuration readableDuration16 = null;
        org.joda.time.Instant instant17 = instant14.plus(readableDuration16);
        boolean boolean19 = instant17.equals((java.lang.Object) ' ');
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(1, 10);
        java.util.TimeZone timeZone23 = null;
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forTimeZone(timeZone23);
        long long26 = dateTimeZone22.getMillisKeepLocal(dateTimeZone24, 4320000000L);
        boolean boolean27 = instant17.equals((java.lang.Object) 4320000000L);
        boolean boolean28 = instant17.isEqualNow();
        org.joda.time.DateTime dateTime29 = instant17.toDateTime();
        int int30 = dateTimeZone12.getOffset((org.joda.time.ReadableInstant) dateTime29);
        long long33 = dateTimeZone12.adjustOffset((-9617627519900L), false);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant14 and dateTime29", (instant14.compareTo(dateTime29) == 0) == instant14.equals(dateTime29));
    }

    @Test
    public void test1643() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1643");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        boolean boolean2 = instant1.isEqualNow();
        java.lang.String str3 = instant1.toString();
        java.util.TimeZone timeZone4 = null;
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forTimeZone(timeZone4);
        org.joda.time.chrono.GJChronology gJChronology6 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone5);
        java.util.Locale locale8 = new java.util.Locale("hi!");
        java.lang.String str9 = locale8.getCountry();
        java.util.Locale locale10 = java.util.Locale.getDefault();
        java.lang.String str11 = locale10.getDisplayName();
        java.lang.String str12 = locale8.getDisplayScript(locale10);
        boolean boolean13 = dateTimeZone5.equals((java.lang.Object) locale10);
        int int15 = dateTimeZone5.getOffsetFromLocal((long) (short) 10);
        java.util.TimeZone timeZone16 = null;
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forTimeZone(timeZone16);
        org.joda.time.chrono.GJChronology gJChronology18 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone17);
        org.joda.time.DateTimeField dateTimeField19 = gJChronology18.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField20 = gJChronology18.weekyearOfCentury();
        org.joda.time.Instant instant21 = gJChronology18.getGregorianCutover();
        org.joda.time.Instant instant23 = instant21.withMillis(0L);
        org.joda.time.Instant instant25 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone26 = null;
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forTimeZone(timeZone26);
        org.joda.time.chrono.GJChronology gJChronology28 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone27);
        org.joda.time.DateTimeField dateTimeField29 = gJChronology28.millisOfSecond();
        int int30 = instant25.get(dateTimeField29);
        org.joda.time.Instant instant32 = instant25.plus(0L);
        int int33 = instant23.compareTo((org.joda.time.ReadableInstant) instant32);
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = null;
        boolean boolean35 = instant32.isSupported(dateTimeFieldType34);
        int int36 = dateTimeZone5.getOffset((org.joda.time.ReadableInstant) instant32);
        boolean boolean37 = instant1.isAfter((org.joda.time.ReadableInstant) instant32);
        org.joda.time.ReadableDuration readableDuration38 = null;
        org.joda.time.Instant instant39 = instant1.minus(readableDuration38);
        org.joda.time.Instant instant40 = instant39.toInstant();
        java.util.Date date41 = instant39.toDate();
        java.util.TimeZone timeZone42 = null;
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.forTimeZone(timeZone42);
        org.joda.time.chrono.GJChronology gJChronology44 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone43);
        java.util.Locale locale46 = new java.util.Locale("hi!");
        java.lang.String str47 = locale46.getCountry();
        java.util.Locale locale48 = java.util.Locale.getDefault();
        java.lang.String str49 = locale48.getDisplayName();
        java.lang.String str50 = locale46.getDisplayScript(locale48);
        boolean boolean51 = dateTimeZone43.equals((java.lang.Object) locale48);
        org.joda.time.DateTimeZone dateTimeZone53 = org.joda.time.DateTimeZone.forOffsetMillis((int) '4');
        java.util.TimeZone timeZone54 = dateTimeZone53.toTimeZone();
        long long57 = dateTimeZone53.adjustOffset((long) 0, false);
        int int59 = dateTimeZone53.getOffsetFromLocal((-26438399999L));
        long long61 = dateTimeZone43.getMillisKeepLocal(dateTimeZone53, (long) (byte) 10);
        org.joda.time.Instant instant63 = new org.joda.time.Instant(52L);
        boolean boolean64 = instant63.isEqualNow();
        org.joda.time.ReadableDuration readableDuration65 = null;
        org.joda.time.Instant instant66 = instant63.plus(readableDuration65);
        long long67 = instant63.getMillis();
        java.lang.String str68 = instant63.toString();
        org.joda.time.Instant instant69 = instant63.toInstant();
        org.joda.time.ReadableDuration readableDuration70 = null;
        org.joda.time.Instant instant72 = instant63.withDurationAdded(readableDuration70, (int) 'x');
        java.util.TimeZone timeZone73 = null;
        org.joda.time.DateTimeZone dateTimeZone74 = org.joda.time.DateTimeZone.forTimeZone(timeZone73);
        org.joda.time.chrono.GJChronology gJChronology75 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone74);
        org.joda.time.DateTimeField dateTimeField76 = gJChronology75.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField77 = gJChronology75.yearOfCentury();
        int int78 = instant72.get(dateTimeField77);
        org.joda.time.chrono.GJChronology gJChronology79 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone53, (org.joda.time.ReadableInstant) instant72);
        org.joda.time.Instant instant80 = instant72.toInstant();
        org.joda.time.DateTime dateTime81 = instant72.toDateTimeISO();
        boolean boolean82 = instant39.isAfter((org.joda.time.ReadableInstant) instant72);
        org.joda.time.ReadableDuration readableDuration83 = null;
        org.joda.time.Instant instant84 = instant39.minus(readableDuration83);
        org.joda.time.DateTimeZone dateTimeZone85 = instant84.getZone();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant84 and dateTime81", (instant84.compareTo(dateTime81) == 0) == instant84.equals(dateTime81));
    }

    @Test
    public void test1644() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1644");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        boolean boolean2 = instant1.isEqualNow();
        java.lang.String str3 = instant1.toString();
        org.joda.time.Instant instant5 = new org.joda.time.Instant(52L);
        boolean boolean6 = instant5.isEqualNow();
        java.lang.String str7 = instant5.toString();
        java.lang.String str8 = instant5.toString();
        org.joda.time.Instant instant11 = instant5.withDurationAdded(115200000L, (int) (short) 1);
        int int12 = instant1.compareTo((org.joda.time.ReadableInstant) instant5);
        org.joda.time.Instant instant14 = new org.joda.time.Instant(52L);
        boolean boolean15 = instant14.isEqualNow();
        org.joda.time.ReadableDuration readableDuration16 = null;
        org.joda.time.Instant instant17 = instant14.plus(readableDuration16);
        boolean boolean19 = instant17.equals((java.lang.Object) ' ');
        boolean boolean20 = instant5.isAfter((org.joda.time.ReadableInstant) instant17);
        java.lang.String str21 = instant17.toString();
        java.util.TimeZone timeZone22 = null;
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        org.joda.time.chrono.GJChronology gJChronology24 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone23);
        org.joda.time.DurationField durationField25 = gJChronology24.halfdays();
        long long29 = gJChronology24.add(0L, (long) (short) -1, (int) '4');
        org.joda.time.Instant instant30 = gJChronology24.getGregorianCutover();
        boolean boolean31 = instant17.isAfter((org.joda.time.ReadableInstant) instant30);
        org.joda.time.ReadableDuration readableDuration32 = null;
        org.joda.time.Instant instant33 = instant17.minus(readableDuration32);
        java.util.TimeZone timeZone34 = null;
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.forTimeZone(timeZone34);
        org.joda.time.chrono.GJChronology gJChronology36 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone35);
        org.joda.time.DurationField durationField37 = gJChronology36.halfdays();
        org.joda.time.DateTimeField dateTimeField38 = gJChronology36.millisOfDay();
        org.joda.time.DateTimeField dateTimeField39 = gJChronology36.minuteOfDay();
        org.joda.time.DurationField durationField40 = gJChronology36.centuries();
        org.joda.time.DateTimeField dateTimeField41 = gJChronology36.dayOfYear();
        java.lang.String str42 = gJChronology36.toString();
        org.joda.time.DateTimeField dateTimeField43 = gJChronology36.minuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone44 = gJChronology36.getZone();
        org.joda.time.DateTime dateTime45 = instant33.toDateTime(dateTimeZone44);
        org.joda.time.MutableDateTime mutableDateTime46 = instant33.toMutableDateTime();
        java.util.Date date47 = mutableDateTime46.toDate();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and dateTime45", (instant1.compareTo(dateTime45) == 0) == instant1.equals(dateTime45));
    }

    @Test
    public void test1645() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1645");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        boolean boolean2 = instant1.isEqualNow();
        java.lang.String str3 = instant1.toString();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.MutableDateTime mutableDateTime5 = instant1.toMutableDateTime(chronology4);
        org.joda.time.Instant instant7 = new org.joda.time.Instant(52L);
        boolean boolean8 = instant7.isEqualNow();
        org.joda.time.Instant instant10 = new org.joda.time.Instant(52L);
        org.joda.time.Instant instant12 = instant10.withMillis((long) 'u');
        boolean boolean13 = instant7.isAfter((org.joda.time.ReadableInstant) instant10);
        boolean boolean14 = mutableDateTime5.isEqual((org.joda.time.ReadableInstant) instant10);
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.Instant instant16 = instant10.plus(readableDuration15);
        org.joda.time.MutableDateTime mutableDateTime17 = instant10.toMutableDateTimeISO();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and mutableDateTime5", (instant1.compareTo(mutableDateTime5) == 0) == instant1.equals(mutableDateTime5));
    }

    @Test
    public void test1646() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1646");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = gJChronology2.halfdays();
        long long7 = gJChronology2.add((long) 'a', (-1L), (int) (short) 0);
        org.joda.time.DateTimeField dateTimeField8 = gJChronology2.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField9 = gJChronology2.secondOfMinute();
        org.joda.time.Instant instant11 = new org.joda.time.Instant(52L);
        boolean boolean12 = instant11.isEqualNow();
        org.joda.time.ReadableDuration readableDuration13 = null;
        org.joda.time.Instant instant14 = instant11.plus(readableDuration13);
        boolean boolean15 = gJChronology2.equals((java.lang.Object) instant11);
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = null;
        boolean boolean17 = instant11.isSupported(dateTimeFieldType16);
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = null;
        boolean boolean19 = instant11.isSupported(dateTimeFieldType18);
        org.joda.time.DateTimeZone dateTimeZone20 = instant11.getZone();
        org.joda.time.Instant instant22 = instant11.plus((long) 'a');
        org.joda.time.Instant instant24 = instant11.withMillis(432000001L);
        org.joda.time.Instant instant26 = new org.joda.time.Instant(52L);
        boolean boolean27 = instant26.isEqualNow();
        org.joda.time.ReadableDuration readableDuration28 = null;
        org.joda.time.Instant instant29 = instant26.plus(readableDuration28);
        long long30 = instant26.getMillis();
        java.lang.String str31 = instant26.toString();
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.getDefault();
        long long34 = dateTimeZone32.nextTransition(1000L);
        org.joda.time.DateTime dateTime35 = instant26.toDateTime(dateTimeZone32);
        org.joda.time.DateTime dateTime36 = instant24.toDateTime(dateTimeZone32);
        org.joda.time.DateTimeFieldType dateTimeFieldType37 = null;
        boolean boolean38 = dateTime36.isSupported(dateTimeFieldType37);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant11 and dateTime35", (instant11.compareTo(dateTime35) == 0) == instant11.equals(dateTime35));
    }

    @Test
    public void test1647() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1647");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.util.TimeZone timeZone2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forTimeZone(timeZone2);
        org.joda.time.chrono.GJChronology gJChronology4 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone3);
        int int6 = dateTimeZone3.getOffsetFromLocal(1000L);
        long long8 = dateTimeZone1.getMillisKeepLocal(dateTimeZone3, (-61827926399999L));
        java.lang.String str9 = dateTimeZone3.toString();
        org.joda.time.Instant instant11 = new org.joda.time.Instant(52L);
        boolean boolean12 = instant11.isEqualNow();
        org.joda.time.ReadableDuration readableDuration13 = null;
        org.joda.time.Instant instant14 = instant11.plus(readableDuration13);
        long long15 = instant11.getMillis();
        java.lang.String str16 = instant11.toString();
        org.joda.time.Instant instant17 = instant11.toInstant();
        org.joda.time.Instant instant19 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone20 = null;
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forTimeZone(timeZone20);
        org.joda.time.chrono.GJChronology gJChronology22 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone21);
        org.joda.time.DateTimeField dateTimeField23 = gJChronology22.millisOfSecond();
        int int24 = instant19.get(dateTimeField23);
        org.joda.time.Chronology chronology25 = instant19.getChronology();
        boolean boolean26 = instant11.isBefore((org.joda.time.ReadableInstant) instant19);
        boolean boolean28 = instant11.isEqual(1136050274678400000L);
        org.joda.time.chrono.GJChronology gJChronology29 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone3, (org.joda.time.ReadableInstant) instant11);
        org.joda.time.DateTime dateTime30 = instant11.toDateTime();
        org.joda.time.Instant instant32 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone33 = null;
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.forTimeZone(timeZone33);
        org.joda.time.chrono.GJChronology gJChronology35 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone34);
        org.joda.time.DateTimeField dateTimeField36 = gJChronology35.millisOfSecond();
        int int37 = instant32.get(dateTimeField36);
        boolean boolean38 = instant32.isEqualNow();
        java.util.TimeZone timeZone39 = null;
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.forTimeZone(timeZone39);
        java.lang.String str42 = dateTimeZone40.getNameKey((long) 100);
        boolean boolean43 = dateTimeZone40.isFixed();
        java.util.Locale locale47 = new java.util.Locale("DurationField[halfdays]", "\u82f1\u6587");
        java.lang.String str48 = dateTimeZone40.getName((long) (short) 10, locale47);
        org.joda.time.Instant instant50 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone51 = null;
        org.joda.time.DateTimeZone dateTimeZone52 = org.joda.time.DateTimeZone.forTimeZone(timeZone51);
        org.joda.time.chrono.GJChronology gJChronology53 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone52);
        org.joda.time.DateTimeField dateTimeField54 = gJChronology53.millisOfSecond();
        int int55 = instant50.get(dateTimeField54);
        org.joda.time.Chronology chronology56 = instant50.getChronology();
        org.joda.time.chrono.GJChronology gJChronology57 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone40, (org.joda.time.ReadableInstant) instant50);
        boolean boolean58 = instant32.isEqual((org.joda.time.ReadableInstant) instant50);
        org.joda.time.Instant instant59 = instant50.toInstant();
        boolean boolean60 = instant11.isEqual((org.joda.time.ReadableInstant) instant59);
        org.joda.time.Instant instant61 = instant59.toInstant();
        org.joda.time.MutableDateTime mutableDateTime62 = instant61.toMutableDateTime();
        boolean boolean64 = instant61.isBefore((-1274105869258439L));
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant11 and dateTime30", (instant11.compareTo(dateTime30) == 0) == instant11.equals(dateTime30));
    }

    @Test
    public void test1648() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1648");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = gJChronology2.halfdays();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.millisOfDay();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.minuteOfDay();
        org.joda.time.DurationField durationField6 = gJChronology2.centuries();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology2.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField8 = gJChronology2.year();
        org.joda.time.DurationField durationField9 = gJChronology2.weekyears();
        java.lang.String str10 = gJChronology2.toString();
        org.joda.time.DateTimeField dateTimeField11 = gJChronology2.hourOfHalfday();
        org.joda.time.Chronology chronology12 = gJChronology2.withUTC();
        org.joda.time.DurationField durationField13 = gJChronology2.years();
        org.joda.time.DurationField durationField14 = gJChronology2.halfdays();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on durationField9 and durationField13", (durationField9.compareTo(durationField13) == 0) == durationField9.equals(durationField13));
    }

    @Test
    public void test1649() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1649");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        boolean boolean2 = instant1.isEqualNow();
        boolean boolean4 = instant1.isEqual(0L);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = null;
        boolean boolean6 = instant1.isSupported(dateTimeFieldType5);
        org.joda.time.Instant instant9 = instant1.withDurationAdded((-61827926399999L), (int) (short) -1);
        org.joda.time.MutableDateTime mutableDateTime10 = instant9.toMutableDateTime();
        boolean boolean11 = instant9.isAfterNow();
        java.util.TimeZone timeZone12 = null;
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forTimeZone(timeZone12);
        org.joda.time.chrono.GJChronology gJChronology14 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone13);
        org.joda.time.DurationField durationField15 = gJChronology14.halfdays();
        long long19 = gJChronology14.add((long) 'a', (-1L), (int) (short) 0);
        long long23 = gJChronology14.add((long) (byte) 0, (long) '4', 100);
        org.joda.time.DateTimeField dateTimeField24 = gJChronology14.minuteOfHour();
        org.joda.time.DurationField durationField25 = gJChronology14.hours();
        org.joda.time.DateTimeField dateTimeField26 = gJChronology14.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField27 = gJChronology14.millisOfSecond();
        org.joda.time.DurationField durationField28 = gJChronology14.months();
        org.joda.time.DurationField durationField29 = gJChronology14.hours();
        org.joda.time.DateTimeField dateTimeField30 = gJChronology14.centuryOfEra();
        org.joda.time.DurationField durationField31 = gJChronology14.millis();
        org.joda.time.DateTimeField dateTimeField32 = gJChronology14.era();
        org.joda.time.MutableDateTime mutableDateTime33 = instant9.toMutableDateTime((org.joda.time.Chronology) gJChronology14);
        boolean boolean34 = instant9.isAfterNow();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime10 and mutableDateTime33", (mutableDateTime10.compareTo(mutableDateTime33) == 0) == mutableDateTime10.equals(mutableDateTime33));
    }

    @Test
    public void test1650() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1650");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forTimeZone(timeZone2);
        org.joda.time.chrono.GJChronology gJChronology4 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone3);
        org.joda.time.DateTimeField dateTimeField5 = gJChronology4.millisOfSecond();
        int int6 = instant1.get(dateTimeField5);
        boolean boolean7 = instant1.isEqualNow();
        org.joda.time.Instant instant9 = new org.joda.time.Instant(52L);
        boolean boolean10 = instant9.isEqualNow();
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.Instant instant12 = instant9.plus(readableDuration11);
        long long13 = instant9.getMillis();
        java.lang.Object obj14 = null;
        boolean boolean15 = instant9.equals(obj14);
        org.joda.time.Instant instant17 = new org.joda.time.Instant(52L);
        boolean boolean18 = instant17.isEqualNow();
        org.joda.time.ReadableDuration readableDuration19 = null;
        org.joda.time.Instant instant20 = instant17.plus(readableDuration19);
        long long21 = instant17.getMillis();
        java.lang.String str22 = instant17.toString();
        org.joda.time.Instant instant23 = instant17.toInstant();
        org.joda.time.ReadableDuration readableDuration24 = null;
        org.joda.time.Instant instant26 = instant17.withDurationAdded(readableDuration24, (int) 'x');
        org.joda.time.Instant instant27 = instant17.toInstant();
        int int28 = instant9.compareTo((org.joda.time.ReadableInstant) instant17);
        boolean boolean29 = instant1.isBefore((org.joda.time.ReadableInstant) instant17);
        java.util.TimeZone timeZone30 = null;
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forTimeZone(timeZone30);
        org.joda.time.chrono.GJChronology gJChronology32 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone31);
        org.joda.time.DurationField durationField33 = gJChronology32.halfdays();
        long long37 = gJChronology32.add((long) 'a', (-1L), (int) (short) 0);
        org.joda.time.DateTimeField dateTimeField38 = gJChronology32.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField39 = gJChronology32.secondOfMinute();
        org.joda.time.Instant instant41 = new org.joda.time.Instant(52L);
        boolean boolean42 = instant41.isEqualNow();
        org.joda.time.ReadableDuration readableDuration43 = null;
        org.joda.time.Instant instant44 = instant41.plus(readableDuration43);
        boolean boolean45 = gJChronology32.equals((java.lang.Object) instant41);
        org.joda.time.DateTimeFieldType dateTimeFieldType46 = null;
        boolean boolean47 = instant41.isSupported(dateTimeFieldType46);
        org.joda.time.DateTimeFieldType dateTimeFieldType48 = null;
        boolean boolean49 = instant41.isSupported(dateTimeFieldType48);
        java.lang.String str50 = instant41.toString();
        boolean boolean51 = instant1.isAfter((org.joda.time.ReadableInstant) instant41);
        org.joda.time.Instant instant53 = instant1.plus(171253440000000000L);
        boolean boolean55 = instant1.isEqual((-60479999900L));
        org.joda.time.DateTimeZone dateTimeZone57 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        org.joda.time.DateTime dateTime58 = instant1.toDateTime(dateTimeZone57);
        boolean boolean60 = instant1.isAfter(261698877903000004L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant9 and dateTime58", (instant9.compareTo(dateTime58) == 0) == instant9.equals(dateTime58));
    }

    @Test
    public void test1651() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1651");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forTimeZone(timeZone2);
        org.joda.time.chrono.GJChronology gJChronology4 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone3);
        org.joda.time.DateTimeField dateTimeField5 = gJChronology4.millisOfSecond();
        int int6 = instant1.get(dateTimeField5);
        org.joda.time.Instant instant8 = instant1.plus(0L);
        org.joda.time.Instant instant9 = instant8.toInstant();
        org.joda.time.Instant instant11 = new org.joda.time.Instant(52L);
        boolean boolean12 = instant11.isEqualNow();
        java.lang.String str13 = instant11.toString();
        java.lang.String str14 = instant11.toString();
        org.joda.time.Instant instant16 = new org.joda.time.Instant(52L);
        boolean boolean17 = instant16.isEqualNow();
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.Instant instant19 = instant16.plus(readableDuration18);
        boolean boolean20 = instant11.isBefore((org.joda.time.ReadableInstant) instant19);
        org.joda.time.Instant instant22 = instant11.minus((long) 0);
        int int23 = instant8.compareTo((org.joda.time.ReadableInstant) instant11);
        org.joda.time.Instant instant26 = instant11.withDurationAdded((long) (short) 100, 70);
        org.joda.time.ReadableInstant readableInstant27 = null;
        boolean boolean28 = instant11.isBefore(readableInstant27);
        org.joda.time.Instant instant30 = new org.joda.time.Instant(52L);
        boolean boolean31 = instant30.isEqualNow();
        org.joda.time.ReadableDuration readableDuration32 = null;
        org.joda.time.Instant instant33 = instant30.plus(readableDuration32);
        long long34 = instant30.getMillis();
        java.lang.String str35 = instant30.toString();
        org.joda.time.Instant instant36 = instant30.toInstant();
        org.joda.time.ReadableDuration readableDuration37 = null;
        org.joda.time.Instant instant39 = instant30.withDurationAdded(readableDuration37, (int) 'x');
        java.util.TimeZone timeZone40 = null;
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.forTimeZone(timeZone40);
        java.lang.String str43 = dateTimeZone41.getNameKey((long) 100);
        boolean boolean44 = dateTimeZone41.isFixed();
        org.joda.time.chrono.GJChronology gJChronology45 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone41);
        java.lang.String str46 = dateTimeZone41.toString();
        org.joda.time.DateTime dateTime47 = instant39.toDateTime(dateTimeZone41);
        boolean boolean48 = instant11.isBefore((org.joda.time.ReadableInstant) dateTime47);
        java.util.TimeZone timeZone49 = null;
        org.joda.time.DateTimeZone dateTimeZone50 = org.joda.time.DateTimeZone.forTimeZone(timeZone49);
        org.joda.time.chrono.GJChronology gJChronology51 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone50);
        org.joda.time.DateTimeField dateTimeField52 = gJChronology51.era();
        org.joda.time.DateTimeField dateTimeField53 = gJChronology51.weekyear();
        org.joda.time.DateTimeField dateTimeField54 = gJChronology51.weekyearOfCentury();
        org.joda.time.DurationField durationField55 = gJChronology51.millis();
        org.joda.time.DurationField durationField56 = gJChronology51.seconds();
        org.joda.time.DateTime dateTime57 = instant11.toDateTime((org.joda.time.Chronology) gJChronology51);
        org.joda.time.ReadableDuration readableDuration58 = null;
        org.joda.time.Instant instant59 = instant11.plus(readableDuration58);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and dateTime47", (instant1.compareTo(dateTime47) == 0) == instant1.equals(dateTime47));
    }

    @Test
    public void test1652() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1652");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = gJChronology2.years();
        java.util.TimeZone timeZone4 = null;
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forTimeZone(timeZone4);
        org.joda.time.chrono.GJChronology gJChronology6 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone5);
        org.joda.time.DurationField durationField7 = gJChronology6.halfdays();
        org.joda.time.DateTimeField dateTimeField8 = gJChronology6.millisOfDay();
        org.joda.time.DateTimeField dateTimeField9 = gJChronology6.minuteOfDay();
        org.joda.time.DurationField durationField10 = gJChronology6.centuries();
        java.util.TimeZone timeZone11 = null;
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forTimeZone(timeZone11);
        org.joda.time.chrono.GJChronology gJChronology13 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone12);
        org.joda.time.DurationField durationField14 = gJChronology13.halfdays();
        long long17 = durationField14.add((long) 100, 100L);
        boolean boolean18 = durationField14.isPrecise();
        int int19 = durationField10.compareTo(durationField14);
        boolean boolean20 = gJChronology2.equals((java.lang.Object) durationField10);
        org.joda.time.DateTimeField dateTimeField21 = gJChronology2.dayOfYear();
        org.joda.time.DateTimeField dateTimeField22 = gJChronology2.hourOfDay();
        java.lang.String str23 = gJChronology2.toString();
        org.joda.time.DateTimeField dateTimeField24 = gJChronology2.yearOfCentury();
        org.joda.time.DurationField durationField25 = gJChronology2.months();
        org.joda.time.DurationField durationField26 = gJChronology2.weeks();
        java.lang.String str27 = gJChronology2.toString();
        org.joda.time.DurationField durationField28 = gJChronology2.eras();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField28, durationField3, and durationField7", !(durationField28.compareTo(durationField3) == 0) || (Math.signum(durationField28.compareTo(durationField7)) == Math.signum(durationField3.compareTo(durationField7))));
    }

    @Test
    public void test1653() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1653");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forTimeZone(timeZone2);
        org.joda.time.chrono.GJChronology gJChronology4 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone3);
        org.joda.time.DateTimeField dateTimeField5 = gJChronology4.millisOfSecond();
        int int6 = instant1.get(dateTimeField5);
        boolean boolean7 = instant1.isEqualNow();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = null;
        java.lang.String str9 = instant1.toString(dateTimeFormatter8);
        boolean boolean10 = instant1.isAfterNow();
        org.joda.time.Instant instant12 = instant1.minus(43201764L);
        org.joda.time.Instant instant14 = instant12.plus(7816188L);
        org.joda.time.Instant instant16 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone17 = null;
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forTimeZone(timeZone17);
        org.joda.time.chrono.GJChronology gJChronology19 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone18);
        org.joda.time.DateTimeField dateTimeField20 = gJChronology19.millisOfSecond();
        int int21 = instant16.get(dateTimeField20);
        org.joda.time.Instant instant23 = instant16.plus(0L);
        org.joda.time.Instant instant24 = instant23.toInstant();
        org.joda.time.Instant instant26 = new org.joda.time.Instant(52L);
        boolean boolean27 = instant26.isEqualNow();
        java.lang.String str28 = instant26.toString();
        java.lang.String str29 = instant26.toString();
        org.joda.time.Instant instant31 = new org.joda.time.Instant(52L);
        boolean boolean32 = instant31.isEqualNow();
        org.joda.time.ReadableDuration readableDuration33 = null;
        org.joda.time.Instant instant34 = instant31.plus(readableDuration33);
        boolean boolean35 = instant26.isBefore((org.joda.time.ReadableInstant) instant34);
        org.joda.time.Instant instant37 = instant26.minus((long) 0);
        int int38 = instant23.compareTo((org.joda.time.ReadableInstant) instant26);
        org.joda.time.DateTime dateTime39 = instant23.toDateTimeISO();
        org.joda.time.Instant instant41 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone42 = null;
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.forTimeZone(timeZone42);
        org.joda.time.chrono.GJChronology gJChronology44 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone43);
        org.joda.time.DateTimeField dateTimeField45 = gJChronology44.millisOfSecond();
        int int46 = instant41.get(dateTimeField45);
        org.joda.time.Instant instant48 = instant41.plus(0L);
        boolean boolean49 = dateTime39.isAfter((org.joda.time.ReadableInstant) instant41);
        boolean boolean50 = instant12.isBefore((org.joda.time.ReadableInstant) dateTime39);
        boolean boolean51 = instant12.isEqualNow();
        org.joda.time.Instant instant53 = instant12.minus(31536001869L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and dateTime39", (instant1.compareTo(dateTime39) == 0) == instant1.equals(dateTime39));
    }

    @Test
    public void test1654() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1654");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = gJChronology2.halfdays();
        long long7 = gJChronology2.add((long) 'a', (-1L), (int) (short) 0);
        long long11 = gJChronology2.add((long) (byte) 0, (long) '4', 100);
        org.joda.time.DateTimeField dateTimeField12 = gJChronology2.minuteOfHour();
        org.joda.time.DurationField durationField13 = gJChronology2.hours();
        org.joda.time.DateTimeField dateTimeField14 = gJChronology2.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology2.millisOfSecond();
        org.joda.time.DurationField durationField16 = gJChronology2.seconds();
        java.lang.String str17 = gJChronology2.toString();
        org.joda.time.DateTimeField dateTimeField18 = gJChronology2.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField19 = gJChronology2.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField20 = gJChronology2.secondOfMinute();
        org.joda.time.DurationField durationField21 = gJChronology2.eras();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField21, durationField3, and durationField13", !(durationField21.compareTo(durationField3) == 0) || (Math.signum(durationField21.compareTo(durationField13)) == Math.signum(durationField3.compareTo(durationField13))));
    }

    @Test
    public void test1655() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1655");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        boolean boolean2 = instant1.isEqualNow();
        java.lang.String str3 = instant1.toString();
        java.lang.String str4 = instant1.toString();
        org.joda.time.Instant instant6 = new org.joda.time.Instant(52L);
        boolean boolean7 = instant6.isEqualNow();
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.Instant instant9 = instant6.plus(readableDuration8);
        boolean boolean10 = instant1.isBefore((org.joda.time.ReadableInstant) instant9);
        org.joda.time.Instant instant12 = new org.joda.time.Instant(52L);
        boolean boolean13 = instant12.isEqualNow();
        org.joda.time.ReadableDuration readableDuration14 = null;
        org.joda.time.Instant instant15 = instant12.plus(readableDuration14);
        long long16 = instant12.getMillis();
        java.lang.String str17 = instant12.toString();
        org.joda.time.Instant instant18 = instant12.toInstant();
        boolean boolean19 = instant9.isAfter((org.joda.time.ReadableInstant) instant12);
        java.util.TimeZone timeZone20 = null;
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forTimeZone(timeZone20);
        org.joda.time.chrono.GJChronology gJChronology22 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone21);
        org.joda.time.DurationField durationField23 = gJChronology22.halfdays();
        long long27 = gJChronology22.add((long) 'a', (-1L), (int) (short) 0);
        boolean boolean29 = gJChronology22.equals((java.lang.Object) 0);
        org.joda.time.DateTimeField dateTimeField30 = gJChronology22.dayOfMonth();
        org.joda.time.DurationField durationField31 = gJChronology22.seconds();
        org.joda.time.DateTimeField dateTimeField32 = gJChronology22.dayOfYear();
        org.joda.time.DateTimeField dateTimeField33 = gJChronology22.secondOfMinute();
        org.joda.time.Chronology chronology34 = gJChronology22.withUTC();
        org.joda.time.MutableDateTime mutableDateTime35 = instant9.toMutableDateTime((org.joda.time.Chronology) gJChronology22);
        org.joda.time.DurationField durationField36 = gJChronology22.hours();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and mutableDateTime35", (instant1.compareTo(mutableDateTime35) == 0) == instant1.equals(mutableDateTime35));
    }

    @Test
    public void test1656() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1656");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = gJChronology2.halfdays();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.millisOfDay();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.minuteOfDay();
        org.joda.time.DurationField durationField6 = gJChronology2.centuries();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology2.dayOfYear();
        java.lang.String str8 = gJChronology2.toString();
        org.joda.time.DurationField durationField9 = gJChronology2.years();
        int int10 = gJChronology2.getMinimumDaysInFirstWeek();
        org.joda.time.DateTimeField dateTimeField11 = gJChronology2.monthOfYear();
        org.joda.time.Chronology chronology12 = gJChronology2.withUTC();
        org.joda.time.DateTimeField dateTimeField13 = gJChronology2.dayOfWeek();
        org.joda.time.DurationField durationField14 = gJChronology2.eras();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField14, durationField3, and durationField6", !(durationField14.compareTo(durationField3) == 0) || (Math.signum(durationField14.compareTo(durationField6)) == Math.signum(durationField3.compareTo(durationField6))));
    }

    @Test
    public void test1657() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1657");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        boolean boolean2 = instant1.isEqualNow();
        java.lang.String str3 = instant1.toString();
        java.util.TimeZone timeZone4 = null;
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forTimeZone(timeZone4);
        org.joda.time.chrono.GJChronology gJChronology6 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone5);
        java.util.Locale locale8 = new java.util.Locale("hi!");
        java.lang.String str9 = locale8.getCountry();
        java.util.Locale locale10 = java.util.Locale.getDefault();
        java.lang.String str11 = locale10.getDisplayName();
        java.lang.String str12 = locale8.getDisplayScript(locale10);
        boolean boolean13 = dateTimeZone5.equals((java.lang.Object) locale10);
        int int15 = dateTimeZone5.getOffsetFromLocal((long) (short) 10);
        java.util.TimeZone timeZone16 = null;
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forTimeZone(timeZone16);
        org.joda.time.chrono.GJChronology gJChronology18 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone17);
        org.joda.time.DateTimeField dateTimeField19 = gJChronology18.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField20 = gJChronology18.weekyearOfCentury();
        org.joda.time.Instant instant21 = gJChronology18.getGregorianCutover();
        org.joda.time.Instant instant23 = instant21.withMillis(0L);
        org.joda.time.Instant instant25 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone26 = null;
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forTimeZone(timeZone26);
        org.joda.time.chrono.GJChronology gJChronology28 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone27);
        org.joda.time.DateTimeField dateTimeField29 = gJChronology28.millisOfSecond();
        int int30 = instant25.get(dateTimeField29);
        org.joda.time.Instant instant32 = instant25.plus(0L);
        int int33 = instant23.compareTo((org.joda.time.ReadableInstant) instant32);
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = null;
        boolean boolean35 = instant32.isSupported(dateTimeFieldType34);
        int int36 = dateTimeZone5.getOffset((org.joda.time.ReadableInstant) instant32);
        boolean boolean37 = instant1.isAfter((org.joda.time.ReadableInstant) instant32);
        org.joda.time.ReadableDuration readableDuration38 = null;
        org.joda.time.Instant instant39 = instant1.minus(readableDuration38);
        org.joda.time.Instant instant40 = instant39.toInstant();
        java.util.TimeZone timeZone41 = null;
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.forTimeZone(timeZone41);
        java.lang.String str44 = dateTimeZone42.getNameKey((long) 100);
        boolean boolean45 = dateTimeZone42.isFixed();
        org.joda.time.chrono.GJChronology gJChronology46 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone42);
        int int47 = gJChronology46.getMinimumDaysInFirstWeek();
        org.joda.time.DateTimeField dateTimeField48 = gJChronology46.clockhourOfDay();
        boolean boolean49 = instant39.equals((java.lang.Object) dateTimeField48);
        org.joda.time.DateTimeFieldType dateTimeFieldType50 = null;
        boolean boolean51 = instant39.isSupported(dateTimeFieldType50);
        long long52 = instant39.getMillis();
        org.joda.time.Instant instant54 = instant39.plus(45164341756801679L);
        org.joda.time.DateTimeZone dateTimeZone56 = org.joda.time.DateTimeZone.forOffsetHours((int) (short) 0);
        org.joda.time.chrono.GJChronology gJChronology57 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone56);
        org.joda.time.DateTimeField dateTimeField58 = gJChronology57.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime59 = instant39.toMutableDateTime((org.joda.time.Chronology) gJChronology57);
        org.joda.time.Instant instant61 = new org.joda.time.Instant(52L);
        boolean boolean62 = instant61.isEqualNow();
        org.joda.time.ReadableDuration readableDuration63 = null;
        org.joda.time.Instant instant64 = instant61.plus(readableDuration63);
        long long65 = instant61.getMillis();
        java.lang.String str66 = instant61.toString();
        org.joda.time.Instant instant67 = instant61.toInstant();
        org.joda.time.ReadableDuration readableDuration68 = null;
        org.joda.time.Instant instant70 = instant61.withDurationAdded(readableDuration68, (int) 'x');
        org.joda.time.DateTimeZone dateTimeZone71 = instant61.getZone();
        boolean boolean72 = instant39.isBefore((org.joda.time.ReadableInstant) instant61);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant39 and mutableDateTime59", (instant39.compareTo(mutableDateTime59) == 0) == instant39.equals(mutableDateTime59));
    }

    @Test
    public void test1658() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1658");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        boolean boolean2 = instant1.isEqualNow();
        org.joda.time.ReadableDuration readableDuration3 = null;
        org.joda.time.Instant instant4 = instant1.plus(readableDuration3);
        org.joda.time.Instant instant6 = new org.joda.time.Instant(52L);
        org.joda.time.Instant instant8 = instant6.withMillis((long) 'u');
        boolean boolean9 = instant1.isBefore((org.joda.time.ReadableInstant) instant6);
        java.util.TimeZone timeZone10 = null;
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forTimeZone(timeZone10);
        org.joda.time.chrono.GJChronology gJChronology12 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone11);
        org.joda.time.DurationField durationField13 = gJChronology12.halfdays();
        long long17 = gJChronology12.add((long) 'a', (-1L), (int) (short) 0);
        long long21 = gJChronology12.add((long) (byte) 0, (long) '4', 100);
        org.joda.time.DateTimeField dateTimeField22 = gJChronology12.minuteOfHour();
        org.joda.time.DurationField durationField23 = gJChronology12.hours();
        org.joda.time.DateTimeField dateTimeField24 = gJChronology12.weekOfWeekyear();
        org.joda.time.DateTime dateTime25 = instant6.toDateTime((org.joda.time.Chronology) gJChronology12);
        org.joda.time.DateTimeField dateTimeField26 = gJChronology12.minuteOfDay();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and dateTime25", (instant1.compareTo(dateTime25) == 0) == instant1.equals(dateTime25));
    }

    @Test
    public void test1659() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1659");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField3 = gJChronology2.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.secondOfMinute();
        org.joda.time.Chronology chronology6 = gJChronology2.withUTC();
        org.joda.time.DurationField durationField7 = gJChronology2.eras();
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        long long11 = gJChronology2.add(readablePeriod8, (-31399199948L), 17520000);
        org.joda.time.DurationField durationField12 = gJChronology2.minutes();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField7, durationField12, and durationField7", !(durationField7.compareTo(durationField12) == 0) || (Math.signum(durationField7.compareTo(durationField7)) == Math.signum(durationField12.compareTo(durationField7))));
    }

    @Test
    public void test1660() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1660");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forTimeZone(timeZone2);
        org.joda.time.chrono.GJChronology gJChronology4 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone3);
        org.joda.time.DateTimeField dateTimeField5 = gJChronology4.millisOfSecond();
        int int6 = instant1.get(dateTimeField5);
        org.joda.time.Instant instant8 = instant1.plus(0L);
        long long9 = instant8.getMillis();
        java.util.TimeZone timeZone10 = null;
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forTimeZone(timeZone10);
        org.joda.time.chrono.GJChronology gJChronology12 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone11);
        org.joda.time.DurationField durationField13 = gJChronology12.halfdays();
        long long17 = gJChronology12.add((long) 'a', (-1L), (int) (short) 0);
        long long21 = gJChronology12.add((long) (byte) 0, (long) '4', 100);
        org.joda.time.DurationField durationField22 = gJChronology12.years();
        org.joda.time.Instant instant23 = gJChronology12.getGregorianCutover();
        org.joda.time.DateTimeField dateTimeField24 = gJChronology12.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime25 = instant8.toMutableDateTime((org.joda.time.Chronology) gJChronology12);
        org.joda.time.DurationField durationField26 = gJChronology12.days();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and mutableDateTime25", (instant1.compareTo(mutableDateTime25) == 0) == instant1.equals(mutableDateTime25));
    }

    @Test
    public void test1661() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1661");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = gJChronology2.halfdays();
        long long7 = gJChronology2.add((long) 'a', (-1L), (int) (short) 0);
        boolean boolean9 = gJChronology2.equals((java.lang.Object) 0);
        org.joda.time.DateTimeField dateTimeField10 = gJChronology2.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField11 = gJChronology2.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField12 = gJChronology2.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField13 = gJChronology2.year();
        org.joda.time.DurationField durationField14 = gJChronology2.years();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology2.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField16 = gJChronology2.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField17 = gJChronology2.minuteOfDay();
        org.joda.time.DurationField durationField18 = gJChronology2.weeks();
        org.joda.time.DurationField durationField19 = gJChronology2.eras();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField19, durationField3, and durationField14", !(durationField19.compareTo(durationField3) == 0) || (Math.signum(durationField19.compareTo(durationField14)) == Math.signum(durationField3.compareTo(durationField14))));
    }

    @Test
    public void test1662() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1662");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = gJChronology2.halfdays();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.millisOfDay();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.minuteOfDay();
        org.joda.time.DurationField durationField6 = gJChronology2.centuries();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology2.dayOfYear();
        java.lang.String str8 = gJChronology2.toString();
        org.joda.time.DurationField durationField9 = gJChronology2.years();
        org.joda.time.DateTimeField dateTimeField10 = gJChronology2.yearOfEra();
        org.joda.time.DateTimeField dateTimeField11 = gJChronology2.clockhourOfHalfday();
        java.lang.String str12 = gJChronology2.toString();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetMillis((int) '4');
        org.joda.time.DateTimeZone.setDefault(dateTimeZone14);
        java.util.TimeZone timeZone16 = dateTimeZone14.toTimeZone();
        java.util.TimeZone timeZone17 = dateTimeZone14.toTimeZone();
        org.joda.time.Chronology chronology18 = gJChronology2.withZone(dateTimeZone14);
        org.joda.time.DurationField durationField19 = gJChronology2.eras();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField19, durationField3, and durationField6", !(durationField19.compareTo(durationField3) == 0) || (Math.signum(durationField19.compareTo(durationField6)) == Math.signum(durationField3.compareTo(durationField6))));
    }

    @Test
    public void test1663() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1663");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        boolean boolean2 = instant1.isEqualNow();
        java.lang.String str3 = instant1.toString();
        java.util.TimeZone timeZone4 = null;
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forTimeZone(timeZone4);
        org.joda.time.chrono.GJChronology gJChronology6 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone5);
        java.util.Locale locale8 = new java.util.Locale("hi!");
        java.lang.String str9 = locale8.getCountry();
        java.util.Locale locale10 = java.util.Locale.getDefault();
        java.lang.String str11 = locale10.getDisplayName();
        java.lang.String str12 = locale8.getDisplayScript(locale10);
        boolean boolean13 = dateTimeZone5.equals((java.lang.Object) locale10);
        int int15 = dateTimeZone5.getOffsetFromLocal((long) (short) 10);
        java.util.TimeZone timeZone16 = null;
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forTimeZone(timeZone16);
        org.joda.time.chrono.GJChronology gJChronology18 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone17);
        org.joda.time.DateTimeField dateTimeField19 = gJChronology18.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField20 = gJChronology18.weekyearOfCentury();
        org.joda.time.Instant instant21 = gJChronology18.getGregorianCutover();
        org.joda.time.Instant instant23 = instant21.withMillis(0L);
        org.joda.time.Instant instant25 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone26 = null;
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forTimeZone(timeZone26);
        org.joda.time.chrono.GJChronology gJChronology28 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone27);
        org.joda.time.DateTimeField dateTimeField29 = gJChronology28.millisOfSecond();
        int int30 = instant25.get(dateTimeField29);
        org.joda.time.Instant instant32 = instant25.plus(0L);
        int int33 = instant23.compareTo((org.joda.time.ReadableInstant) instant32);
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = null;
        boolean boolean35 = instant32.isSupported(dateTimeFieldType34);
        int int36 = dateTimeZone5.getOffset((org.joda.time.ReadableInstant) instant32);
        boolean boolean37 = instant1.isAfter((org.joda.time.ReadableInstant) instant32);
        org.joda.time.ReadableDuration readableDuration38 = null;
        org.joda.time.Instant instant40 = instant1.withDurationAdded(readableDuration38, 1);
        boolean boolean41 = instant40.isEqualNow();
        boolean boolean43 = instant40.isEqual(349200L);
        java.lang.String str44 = instant40.toString();
        java.util.TimeZone timeZone45 = null;
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.forTimeZone(timeZone45);
        org.joda.time.chrono.GJChronology gJChronology47 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone46);
        org.joda.time.DateTimeField dateTimeField48 = gJChronology47.millisOfSecond();
        org.joda.time.DurationField durationField49 = gJChronology47.millis();
        org.joda.time.DurationField durationField50 = gJChronology47.weekyears();
        org.joda.time.DateTimeField dateTimeField51 = gJChronology47.dayOfYear();
        org.joda.time.DateTimeField dateTimeField52 = gJChronology47.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField53 = gJChronology47.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField54 = gJChronology47.yearOfEra();
        org.joda.time.DateTimeField dateTimeField55 = gJChronology47.dayOfWeek();
        boolean boolean56 = instant40.equals((java.lang.Object) gJChronology47);
        org.joda.time.MutableDateTime mutableDateTime57 = instant40.toMutableDateTime();
        org.joda.time.Instant instant59 = instant40.withMillis((-3600000L));
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant40 and mutableDateTime57", (instant40.compareTo(mutableDateTime57) == 0) == instant40.equals(mutableDateTime57));
    }

    @Test
    public void test1664() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1664");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = gJChronology2.halfdays();
        long long7 = gJChronology2.add((long) 'a', (-1L), (int) (short) 0);
        boolean boolean9 = gJChronology2.equals((java.lang.Object) 0);
        org.joda.time.DateTimeField dateTimeField10 = gJChronology2.dayOfMonth();
        org.joda.time.DurationField durationField11 = gJChronology2.days();
        long long15 = gJChronology2.add((long) '4', 432000000L, (int) (short) 0);
        org.joda.time.DurationField durationField16 = gJChronology2.years();
        java.util.TimeZone timeZone17 = null;
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forTimeZone(timeZone17);
        java.lang.String str20 = dateTimeZone18.getNameKey((long) 100);
        boolean boolean21 = dateTimeZone18.isFixed();
        java.lang.String str22 = dateTimeZone18.toString();
        boolean boolean24 = dateTimeZone18.isStandardOffset((long) (byte) 0);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone18);
        org.joda.time.Chronology chronology26 = gJChronology2.withZone(dateTimeZone18);
        org.joda.time.Instant instant28 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone29 = null;
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forTimeZone(timeZone29);
        org.joda.time.chrono.GJChronology gJChronology31 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone30);
        org.joda.time.DateTimeField dateTimeField32 = gJChronology31.millisOfSecond();
        int int33 = instant28.get(dateTimeField32);
        boolean boolean34 = instant28.isEqualNow();
        org.joda.time.tz.NameProvider nameProvider35 = org.joda.time.DateTimeZone.getNameProvider();
        org.joda.time.DateTimeZone.setNameProvider(nameProvider35);
        org.joda.time.DateTimeZone.setNameProvider(nameProvider35);
        boolean boolean38 = instant28.equals((java.lang.Object) nameProvider35);
        org.joda.time.Instant instant40 = new org.joda.time.Instant(52L);
        boolean boolean41 = instant40.isEqualNow();
        java.lang.String str42 = instant40.toString();
        org.joda.time.DateTimeZone dateTimeZone43 = instant40.getZone();
        org.joda.time.DateTime dateTime44 = instant28.toDateTime(dateTimeZone43);
        java.lang.String str45 = instant28.toString();
        java.lang.String str46 = instant28.toString();
        org.joda.time.chrono.GJChronology gJChronology47 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone18, (org.joda.time.ReadableInstant) instant28);
        org.joda.time.DateTime dateTime48 = instant28.toDateTimeISO();
        boolean boolean50 = instant28.isAfter(473356798L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant40 and dateTime48", (instant40.compareTo(dateTime48) == 0) == instant40.equals(dateTime48));
    }

    @Test
    public void test1665() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1665");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        java.util.Locale locale4 = new java.util.Locale("hi!");
        java.lang.String str5 = locale4.getCountry();
        java.util.Locale locale6 = java.util.Locale.getDefault();
        java.lang.String str7 = locale6.getDisplayName();
        java.lang.String str8 = locale4.getDisplayScript(locale6);
        boolean boolean9 = dateTimeZone1.equals((java.lang.Object) locale6);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetMillis((int) '4');
        java.util.TimeZone timeZone12 = dateTimeZone11.toTimeZone();
        long long15 = dateTimeZone11.adjustOffset((long) 0, false);
        int int17 = dateTimeZone11.getOffsetFromLocal((-26438399999L));
        long long19 = dateTimeZone1.getMillisKeepLocal(dateTimeZone11, (long) (byte) 10);
        org.joda.time.Instant instant21 = new org.joda.time.Instant(52L);
        boolean boolean22 = instant21.isEqualNow();
        org.joda.time.ReadableDuration readableDuration23 = null;
        org.joda.time.Instant instant24 = instant21.plus(readableDuration23);
        long long25 = instant21.getMillis();
        java.lang.String str26 = instant21.toString();
        org.joda.time.Instant instant27 = instant21.toInstant();
        org.joda.time.ReadableDuration readableDuration28 = null;
        org.joda.time.Instant instant30 = instant21.withDurationAdded(readableDuration28, (int) 'x');
        java.util.TimeZone timeZone31 = null;
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.forTimeZone(timeZone31);
        org.joda.time.chrono.GJChronology gJChronology33 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone32);
        org.joda.time.DateTimeField dateTimeField34 = gJChronology33.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField35 = gJChronology33.yearOfCentury();
        int int36 = instant30.get(dateTimeField35);
        org.joda.time.chrono.GJChronology gJChronology37 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone11, (org.joda.time.ReadableInstant) instant30);
        org.joda.time.DateTimeField dateTimeField38 = gJChronology37.minuteOfDay();
        java.util.TimeZone timeZone39 = null;
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.forTimeZone(timeZone39);
        org.joda.time.chrono.GJChronology gJChronology41 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone40);
        org.joda.time.DurationField durationField42 = gJChronology41.halfdays();
        org.joda.time.DateTimeField dateTimeField43 = gJChronology41.millisOfDay();
        org.joda.time.DateTimeField dateTimeField44 = gJChronology41.minuteOfDay();
        org.joda.time.DurationField durationField45 = gJChronology41.centuries();
        org.joda.time.DateTimeField dateTimeField46 = gJChronology41.dayOfYear();
        java.lang.String str47 = gJChronology41.toString();
        org.joda.time.DateTimeField dateTimeField48 = gJChronology41.dayOfYear();
        org.joda.time.Chronology chronology49 = gJChronology41.withUTC();
        org.joda.time.DateTimeZone dateTimeZone50 = gJChronology41.getZone();
        org.joda.time.Chronology chronology51 = gJChronology37.withZone(dateTimeZone50);
        org.joda.time.DurationField durationField52 = gJChronology37.years();
        java.lang.String str53 = gJChronology37.toString();
        org.joda.time.DateTimeField dateTimeField54 = gJChronology37.era();
        java.util.TimeZone timeZone55 = null;
        org.joda.time.DateTimeZone dateTimeZone56 = org.joda.time.DateTimeZone.forTimeZone(timeZone55);
        org.joda.time.chrono.GJChronology gJChronology57 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone56);
        org.joda.time.DurationField durationField58 = gJChronology57.halfdays();
        long long62 = gJChronology57.add((long) 'a', (-1L), (int) (short) 0);
        org.joda.time.DateTimeField dateTimeField63 = gJChronology57.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField64 = gJChronology57.centuryOfEra();
        long long68 = gJChronology57.add(262974600000L, (long) (byte) 100, (int) '4');
        org.joda.time.DurationField durationField69 = gJChronology57.hours();
        java.util.TimeZone timeZone70 = null;
        org.joda.time.DateTimeZone dateTimeZone71 = org.joda.time.DateTimeZone.forTimeZone(timeZone70);
        org.joda.time.Chronology chronology72 = gJChronology57.withZone(dateTimeZone71);
        org.joda.time.DurationField durationField73 = gJChronology57.centuries();
        org.joda.time.DateTimeZone dateTimeZone74 = gJChronology57.getZone();
        org.joda.time.Chronology chronology75 = gJChronology37.withZone(dateTimeZone74);
        org.joda.time.DurationField durationField76 = gJChronology37.centuries();
        org.joda.time.DateTimeField dateTimeField77 = gJChronology37.monthOfYear();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on durationField45 and durationField76", (durationField45.compareTo(durationField76) == 0) == durationField45.equals(durationField76));
    }

    @Test
    public void test1666() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1666");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = gJChronology2.halfdays();
        long long7 = gJChronology2.add((long) 'a', (-1L), (int) (short) 0);
        boolean boolean9 = gJChronology2.equals((java.lang.Object) 0);
        org.joda.time.DateTimeField dateTimeField10 = gJChronology2.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField11 = gJChronology2.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField12 = gJChronology2.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField13 = gJChronology2.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField14 = gJChronology2.dayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone15 = gJChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField16 = gJChronology2.halfdayOfDay();
        org.joda.time.Instant instant17 = gJChronology2.getGregorianCutover();
        java.util.TimeZone timeZone18 = null;
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forTimeZone(timeZone18);
        org.joda.time.chrono.GJChronology gJChronology20 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone19);
        java.util.Locale locale22 = new java.util.Locale("hi!");
        java.lang.String str23 = locale22.getCountry();
        java.util.Locale locale24 = java.util.Locale.getDefault();
        java.lang.String str25 = locale24.getDisplayName();
        java.lang.String str26 = locale22.getDisplayScript(locale24);
        boolean boolean27 = dateTimeZone19.equals((java.lang.Object) locale24);
        int int29 = dateTimeZone19.getOffsetFromLocal((long) (short) 10);
        java.util.TimeZone timeZone30 = null;
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forTimeZone(timeZone30);
        org.joda.time.chrono.GJChronology gJChronology32 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone31);
        org.joda.time.DateTimeField dateTimeField33 = gJChronology32.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField34 = gJChronology32.weekyearOfCentury();
        org.joda.time.Instant instant35 = gJChronology32.getGregorianCutover();
        org.joda.time.Instant instant37 = instant35.withMillis(0L);
        org.joda.time.Instant instant39 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone40 = null;
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.forTimeZone(timeZone40);
        org.joda.time.chrono.GJChronology gJChronology42 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone41);
        org.joda.time.DateTimeField dateTimeField43 = gJChronology42.millisOfSecond();
        int int44 = instant39.get(dateTimeField43);
        org.joda.time.Instant instant46 = instant39.plus(0L);
        int int47 = instant37.compareTo((org.joda.time.ReadableInstant) instant46);
        org.joda.time.DateTimeFieldType dateTimeFieldType48 = null;
        boolean boolean49 = instant46.isSupported(dateTimeFieldType48);
        int int50 = dateTimeZone19.getOffset((org.joda.time.ReadableInstant) instant46);
        boolean boolean52 = instant46.isAfter(1000L);
        org.joda.time.MutableDateTime mutableDateTime53 = instant46.toMutableDateTimeISO();
        java.util.TimeZone timeZone54 = null;
        org.joda.time.DateTimeZone dateTimeZone55 = org.joda.time.DateTimeZone.forTimeZone(timeZone54);
        org.joda.time.chrono.GJChronology gJChronology56 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone55);
        org.joda.time.DurationField durationField57 = gJChronology56.halfdays();
        long long61 = gJChronology56.add((long) 'a', (-1L), (int) (short) 0);
        boolean boolean63 = gJChronology56.equals((java.lang.Object) 0);
        org.joda.time.DateTimeField dateTimeField64 = gJChronology56.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField65 = gJChronology56.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField66 = gJChronology56.clockhourOfDay();
        long long71 = gJChronology56.getDateTimeMillis(10, (int) (short) 10, 4, (int) (byte) 1);
        org.joda.time.DateTimeField dateTimeField72 = gJChronology56.millisOfDay();
        java.lang.String str73 = gJChronology56.toString();
        org.joda.time.DateTimeField dateTimeField74 = gJChronology56.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField75 = gJChronology56.minuteOfDay();
        org.joda.time.DurationField durationField76 = gJChronology56.seconds();
        java.util.TimeZone timeZone77 = null;
        org.joda.time.DateTimeZone dateTimeZone78 = org.joda.time.DateTimeZone.forTimeZone(timeZone77);
        org.joda.time.chrono.GJChronology gJChronology79 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone78);
        org.joda.time.DateTimeField dateTimeField80 = gJChronology79.millisOfSecond();
        org.joda.time.DurationField durationField81 = gJChronology79.millis();
        org.joda.time.DateTimeZone dateTimeZone82 = gJChronology79.getZone();
        long long84 = dateTimeZone82.nextTransition(4320000000L);
        boolean boolean86 = dateTimeZone82.isStandardOffset(3155760001170L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone82);
        org.joda.time.Chronology chronology88 = gJChronology56.withZone(dateTimeZone82);
        org.joda.time.MutableDateTime mutableDateTime89 = instant46.toMutableDateTime(dateTimeZone82);
        boolean boolean90 = instant17.isAfter((org.joda.time.ReadableInstant) mutableDateTime89);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant39 and mutableDateTime53", (instant39.compareTo(mutableDateTime53) == 0) == instant39.equals(mutableDateTime53));
    }

    @Test
    public void test1667() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1667");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        boolean boolean2 = instant1.isEqualNow();
        org.joda.time.ReadableDuration readableDuration3 = null;
        org.joda.time.Instant instant4 = instant1.plus(readableDuration3);
        boolean boolean6 = instant4.equals((java.lang.Object) ' ');
        org.joda.time.Instant instant8 = new org.joda.time.Instant(52L);
        boolean boolean9 = instant8.isEqualNow();
        java.lang.String str10 = instant8.toString();
        java.lang.String str11 = instant8.toString();
        boolean boolean12 = instant4.isBefore((org.joda.time.ReadableInstant) instant8);
        org.joda.time.Instant instant14 = instant8.minus((long) (-102228));
        java.util.TimeZone timeZone15 = null;
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forTimeZone(timeZone15);
        java.lang.String str18 = dateTimeZone16.getNameKey((long) 100);
        long long21 = dateTimeZone16.convertLocalToUTC((-2246399965L), true);
        long long24 = dateTimeZone16.adjustOffset((long) '#', true);
        org.joda.time.MutableDateTime mutableDateTime25 = instant8.toMutableDateTime(dateTimeZone16);
        org.joda.time.Instant instant27 = new org.joda.time.Instant(52L);
        boolean boolean28 = instant27.isEqualNow();
        org.joda.time.ReadableDuration readableDuration29 = null;
        org.joda.time.Instant instant30 = instant27.plus(readableDuration29);
        long long31 = instant27.getMillis();
        java.lang.Object obj32 = null;
        boolean boolean33 = instant27.equals(obj32);
        org.joda.time.Instant instant35 = instant27.minus(3155695200000L);
        java.util.TimeZone timeZone36 = null;
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.forTimeZone(timeZone36);
        org.joda.time.chrono.GJChronology gJChronology38 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone37);
        org.joda.time.DurationField durationField39 = gJChronology38.years();
        java.util.TimeZone timeZone40 = null;
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.forTimeZone(timeZone40);
        org.joda.time.chrono.GJChronology gJChronology42 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone41);
        org.joda.time.DurationField durationField43 = gJChronology42.halfdays();
        org.joda.time.DateTimeField dateTimeField44 = gJChronology42.millisOfDay();
        org.joda.time.DateTimeField dateTimeField45 = gJChronology42.minuteOfDay();
        org.joda.time.DurationField durationField46 = gJChronology42.centuries();
        java.util.TimeZone timeZone47 = null;
        org.joda.time.DateTimeZone dateTimeZone48 = org.joda.time.DateTimeZone.forTimeZone(timeZone47);
        org.joda.time.chrono.GJChronology gJChronology49 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone48);
        org.joda.time.DurationField durationField50 = gJChronology49.halfdays();
        long long53 = durationField50.add((long) 100, 100L);
        boolean boolean54 = durationField50.isPrecise();
        int int55 = durationField46.compareTo(durationField50);
        boolean boolean56 = gJChronology38.equals((java.lang.Object) durationField46);
        org.joda.time.DateTimeField dateTimeField57 = gJChronology38.dayOfYear();
        org.joda.time.DateTimeField dateTimeField58 = gJChronology38.era();
        org.joda.time.MutableDateTime mutableDateTime59 = instant35.toMutableDateTime((org.joda.time.Chronology) gJChronology38);
        long long60 = instant35.getMillis();
        boolean boolean61 = instant35.isEqualNow();
        org.joda.time.Chronology chronology62 = instant35.getChronology();
        int int63 = instant8.compareTo((org.joda.time.ReadableInstant) instant35);
        org.joda.time.Instant instant65 = new org.joda.time.Instant(52L);
        boolean boolean66 = instant65.isEqualNow();
        java.lang.String str67 = instant65.toString();
        org.joda.time.Instant instant69 = new org.joda.time.Instant(52L);
        boolean boolean70 = instant69.isEqualNow();
        java.lang.String str71 = instant69.toString();
        java.lang.String str72 = instant69.toString();
        org.joda.time.Instant instant75 = instant69.withDurationAdded(115200000L, (int) (short) 1);
        int int76 = instant65.compareTo((org.joda.time.ReadableInstant) instant69);
        org.joda.time.Instant instant78 = new org.joda.time.Instant(52L);
        boolean boolean79 = instant78.isEqualNow();
        org.joda.time.ReadableDuration readableDuration80 = null;
        org.joda.time.Instant instant81 = instant78.plus(readableDuration80);
        boolean boolean83 = instant81.equals((java.lang.Object) ' ');
        boolean boolean84 = instant69.isAfter((org.joda.time.ReadableInstant) instant81);
        java.lang.String str85 = instant81.toString();
        java.lang.String str86 = instant81.toString();
        org.joda.time.ReadableDuration readableDuration87 = null;
        org.joda.time.Instant instant89 = instant81.withDurationAdded(readableDuration87, 236785);
        org.joda.time.Instant instant91 = new org.joda.time.Instant((-64983772799999L));
        org.joda.time.DateTime dateTime92 = instant91.toDateTime();
        org.joda.time.MutableDateTime mutableDateTime93 = instant91.toMutableDateTime();
        int int94 = instant81.compareTo((org.joda.time.ReadableInstant) instant91);
        org.joda.time.DateTimeZone dateTimeZone95 = instant91.getZone();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone95);
        org.joda.time.MutableDateTime mutableDateTime97 = instant8.toMutableDateTime(dateTimeZone95);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and mutableDateTime25", (instant1.compareTo(mutableDateTime25) == 0) == instant1.equals(mutableDateTime25));
    }

    @Test
    public void test1668() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1668");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        boolean boolean2 = instant1.isEqualNow();
        java.lang.String str3 = instant1.toString();
        java.lang.String str4 = instant1.toString();
        org.joda.time.Instant instant7 = instant1.withDurationAdded(115200000L, (int) (short) 1);
        org.joda.time.Instant instant9 = instant1.withMillis((-6720000000L));
        org.joda.time.Instant instant11 = new org.joda.time.Instant(52L);
        boolean boolean12 = instant11.isEqualNow();
        org.joda.time.ReadableDuration readableDuration13 = null;
        org.joda.time.Instant instant14 = instant11.plus(readableDuration13);
        org.joda.time.Instant instant16 = new org.joda.time.Instant(52L);
        org.joda.time.Instant instant18 = instant16.withMillis((long) 'u');
        boolean boolean19 = instant11.isBefore((org.joda.time.ReadableInstant) instant16);
        org.joda.time.Instant instant22 = instant16.withDurationAdded(4320000000L, (int) 'u');
        org.joda.time.Chronology chronology23 = instant22.getChronology();
        boolean boolean24 = instant1.isAfter((org.joda.time.ReadableInstant) instant22);
        java.util.TimeZone timeZone25 = null;
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forTimeZone(timeZone25);
        org.joda.time.chrono.GJChronology gJChronology27 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone26);
        org.joda.time.DateTimeField dateTimeField28 = gJChronology27.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField29 = gJChronology27.weekyear();
        org.joda.time.DurationField durationField30 = gJChronology27.centuries();
        org.joda.time.DateTimeField dateTimeField31 = gJChronology27.millisOfDay();
        org.joda.time.ReadablePeriod readablePeriod32 = null;
        long long35 = gJChronology27.add(readablePeriod32, (long) '4', (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField36 = gJChronology27.hourOfHalfday();
        org.joda.time.Chronology chronology37 = gJChronology27.withUTC();
        org.joda.time.DateTime dateTime38 = instant22.toDateTime(chronology37);
        java.util.TimeZone timeZone39 = null;
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.forTimeZone(timeZone39);
        org.joda.time.chrono.GJChronology gJChronology41 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone40);
        org.joda.time.DateTimeField dateTimeField42 = gJChronology41.millisOfSecond();
        org.joda.time.DurationField durationField43 = gJChronology41.millis();
        org.joda.time.DurationField durationField44 = gJChronology41.weeks();
        org.joda.time.DurationField durationField45 = gJChronology41.days();
        org.joda.time.DateTimeField dateTimeField46 = gJChronology41.year();
        org.joda.time.DateTimeField dateTimeField47 = gJChronology41.era();
        org.joda.time.MutableDateTime mutableDateTime48 = instant22.toMutableDateTime((org.joda.time.Chronology) gJChronology41);
        org.joda.time.Instant instant49 = instant22.toInstant();
        org.joda.time.Instant instant51 = new org.joda.time.Instant(52L);
        boolean boolean52 = instant51.isEqualNow();
        org.joda.time.Instant instant54 = new org.joda.time.Instant(52L);
        org.joda.time.Instant instant56 = instant54.withMillis((long) 'u');
        boolean boolean57 = instant51.isAfter((org.joda.time.ReadableInstant) instant54);
        boolean boolean58 = instant22.equals((java.lang.Object) instant51);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime38 and instant22", (dateTime38.compareTo(instant22) == 0) == dateTime38.equals(instant22));
    }

    @Test
    public void test1669() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1669");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        long long6 = dateTimeZone1.convertLocalToUTC((long) (byte) -1, true, 0L);
        boolean boolean8 = dateTimeZone1.equals((java.lang.Object) true);
        org.joda.time.chrono.GJChronology gJChronology9 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField10 = gJChronology9.weekyear();
        org.joda.time.DateTimeField dateTimeField11 = gJChronology9.era();
        org.joda.time.DateTimeField dateTimeField12 = gJChronology9.centuryOfEra();
        org.joda.time.DurationField durationField13 = gJChronology9.eras();
        org.joda.time.DateTimeField dateTimeField14 = gJChronology9.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology9.dayOfMonth();
        org.joda.time.DurationField durationField16 = gJChronology9.minutes();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField13, durationField16, and durationField13", !(durationField13.compareTo(durationField16) == 0) || (Math.signum(durationField13.compareTo(durationField13)) == Math.signum(durationField16.compareTo(durationField13))));
    }

    @Test
    public void test1670() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1670");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forTimeZone(timeZone2);
        org.joda.time.chrono.GJChronology gJChronology4 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone3);
        org.joda.time.DateTimeField dateTimeField5 = gJChronology4.millisOfSecond();
        int int6 = instant1.get(dateTimeField5);
        boolean boolean7 = instant1.isEqualNow();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = null;
        java.lang.String str9 = instant1.toString(dateTimeFormatter8);
        boolean boolean10 = instant1.isAfterNow();
        org.joda.time.Instant instant12 = new org.joda.time.Instant((long) '#');
        java.util.TimeZone timeZone13 = null;
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forTimeZone(timeZone13);
        org.joda.time.chrono.GJChronology gJChronology15 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone14);
        org.joda.time.DateTimeField dateTimeField16 = gJChronology15.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField17 = gJChronology15.weekyearOfCentury();
        org.joda.time.Instant instant18 = gJChronology15.getGregorianCutover();
        boolean boolean19 = instant12.equals((java.lang.Object) gJChronology15);
        org.joda.time.DateTimeField dateTimeField20 = gJChronology15.secondOfMinute();
        org.joda.time.MutableDateTime mutableDateTime21 = instant1.toMutableDateTime((org.joda.time.Chronology) gJChronology15);
        org.joda.time.DateTimeField dateTimeField22 = gJChronology15.hourOfDay();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and mutableDateTime21", (instant1.compareTo(mutableDateTime21) == 0) == instant1.equals(mutableDateTime21));
    }

    @Test
    public void test1671() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1671");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = gJChronology2.halfdays();
        org.joda.time.Chronology chronology4 = gJChronology2.withUTC();
        java.lang.String str5 = gJChronology2.toString();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology2.hourOfHalfday();
        java.util.TimeZone timeZone7 = null;
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forTimeZone(timeZone7);
        java.lang.String str10 = dateTimeZone8.getNameKey((long) 100);
        boolean boolean11 = dateTimeZone8.isFixed();
        org.joda.time.chrono.GJChronology gJChronology12 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone8);
        java.lang.String str13 = dateTimeZone8.toString();
        long long16 = dateTimeZone8.adjustOffset((-61827739199999L), false);
        org.joda.time.Chronology chronology17 = gJChronology2.withZone(dateTimeZone8);
        org.joda.time.DateTimeField dateTimeField18 = gJChronology2.dayOfMonth();
        org.joda.time.DurationField durationField19 = gJChronology2.eras();
        org.joda.time.DurationField durationField20 = gJChronology2.minutes();
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField3 and durationField19", Math.signum(durationField3.compareTo(durationField19)) == -Math.signum(durationField19.compareTo(durationField3)));
    }

    @Test
    public void test1672() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1672");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        boolean boolean2 = instant1.isEqualNow();
        org.joda.time.ReadableDuration readableDuration3 = null;
        org.joda.time.Instant instant4 = instant1.plus(readableDuration3);
        long long5 = instant1.getMillis();
        java.lang.String str6 = instant1.toString();
        org.joda.time.Instant instant7 = instant1.toInstant();
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.Instant instant10 = instant1.withDurationAdded(readableDuration8, (int) 'x');
        org.joda.time.Instant instant11 = instant1.toInstant();
        java.util.Date date12 = instant1.toDate();
        org.joda.time.DateTimeZone dateTimeZone13 = instant1.getZone();
        org.joda.time.ReadableDuration readableDuration14 = null;
        org.joda.time.Instant instant16 = instant1.withDurationAdded(readableDuration14, 0);
        java.util.TimeZone timeZone17 = null;
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forTimeZone(timeZone17);
        org.joda.time.chrono.GJChronology gJChronology19 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone18);
        org.joda.time.DateTimeField dateTimeField20 = gJChronology19.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField21 = gJChronology19.weekyear();
        org.joda.time.DateTimeField dateTimeField22 = gJChronology19.halfdayOfDay();
        org.joda.time.DurationField durationField23 = gJChronology19.years();
        org.joda.time.DurationField durationField24 = gJChronology19.minutes();
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        long long28 = gJChronology19.add(readablePeriod25, (-42L), (int) '4');
        org.joda.time.ReadablePeriod readablePeriod29 = null;
        long long32 = gJChronology19.add(readablePeriod29, (long) 432000001, (int) (byte) 10);
        org.joda.time.DurationField durationField33 = gJChronology19.halfdays();
        java.lang.String str34 = gJChronology19.toString();
        org.joda.time.MutableDateTime mutableDateTime35 = instant1.toMutableDateTime((org.joda.time.Chronology) gJChronology19);
        org.joda.time.Instant instant37 = new org.joda.time.Instant(52L);
        boolean boolean38 = instant37.isEqualNow();
        org.joda.time.ReadableDuration readableDuration39 = null;
        org.joda.time.Instant instant40 = instant37.plus(readableDuration39);
        org.joda.time.Instant instant42 = instant37.withMillis((long) 4);
        org.joda.time.Instant instant44 = instant42.withMillis((-5919628L));
        java.util.TimeZone timeZone45 = null;
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.forTimeZone(timeZone45);
        org.joda.time.chrono.GJChronology gJChronology47 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone46);
        org.joda.time.DateTimeField dateTimeField48 = gJChronology47.millisOfSecond();
        org.joda.time.DurationField durationField49 = gJChronology47.weeks();
        org.joda.time.DurationField durationField50 = gJChronology47.months();
        java.lang.String str51 = gJChronology47.toString();
        org.joda.time.DateTimeField dateTimeField52 = gJChronology47.centuryOfEra();
        org.joda.time.DateTime dateTime53 = instant42.toDateTime((org.joda.time.Chronology) gJChronology47);
        org.joda.time.Instant instant55 = instant42.plus(6728400000L);
        boolean boolean56 = mutableDateTime35.isBefore((org.joda.time.ReadableInstant) instant42);
        boolean boolean58 = instant42.isEqual(4160246400000L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and mutableDateTime35", (instant1.compareTo(mutableDateTime35) == 0) == instant1.equals(mutableDateTime35));
    }

    @Test
    public void test1673() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1673");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forTimeZone(timeZone2);
        org.joda.time.chrono.GJChronology gJChronology4 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone3);
        org.joda.time.DateTimeField dateTimeField5 = gJChronology4.millisOfSecond();
        int int6 = instant1.get(dateTimeField5);
        boolean boolean7 = instant1.isEqualNow();
        org.joda.time.Instant instant9 = new org.joda.time.Instant(52L);
        boolean boolean10 = instant9.isEqualNow();
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.Instant instant12 = instant9.plus(readableDuration11);
        long long13 = instant9.getMillis();
        java.lang.Object obj14 = null;
        boolean boolean15 = instant9.equals(obj14);
        org.joda.time.Instant instant17 = new org.joda.time.Instant(52L);
        boolean boolean18 = instant17.isEqualNow();
        org.joda.time.ReadableDuration readableDuration19 = null;
        org.joda.time.Instant instant20 = instant17.plus(readableDuration19);
        long long21 = instant17.getMillis();
        java.lang.String str22 = instant17.toString();
        org.joda.time.Instant instant23 = instant17.toInstant();
        org.joda.time.ReadableDuration readableDuration24 = null;
        org.joda.time.Instant instant26 = instant17.withDurationAdded(readableDuration24, (int) 'x');
        org.joda.time.Instant instant27 = instant17.toInstant();
        int int28 = instant9.compareTo((org.joda.time.ReadableInstant) instant17);
        boolean boolean29 = instant1.isBefore((org.joda.time.ReadableInstant) instant17);
        java.util.TimeZone timeZone30 = null;
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forTimeZone(timeZone30);
        org.joda.time.chrono.GJChronology gJChronology32 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone31);
        org.joda.time.DurationField durationField33 = gJChronology32.halfdays();
        long long37 = gJChronology32.add((long) 'a', (-1L), (int) (short) 0);
        org.joda.time.DateTimeField dateTimeField38 = gJChronology32.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField39 = gJChronology32.secondOfMinute();
        org.joda.time.Instant instant41 = new org.joda.time.Instant(52L);
        boolean boolean42 = instant41.isEqualNow();
        org.joda.time.ReadableDuration readableDuration43 = null;
        org.joda.time.Instant instant44 = instant41.plus(readableDuration43);
        boolean boolean45 = gJChronology32.equals((java.lang.Object) instant41);
        org.joda.time.DateTimeFieldType dateTimeFieldType46 = null;
        boolean boolean47 = instant41.isSupported(dateTimeFieldType46);
        org.joda.time.DateTimeFieldType dateTimeFieldType48 = null;
        boolean boolean49 = instant41.isSupported(dateTimeFieldType48);
        java.lang.String str50 = instant41.toString();
        boolean boolean51 = instant1.isAfter((org.joda.time.ReadableInstant) instant41);
        org.joda.time.Instant instant53 = instant1.plus(171253440000000000L);
        boolean boolean55 = instant1.isEqual((-60479999900L));
        org.joda.time.DateTimeZone dateTimeZone57 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        org.joda.time.DateTime dateTime58 = instant1.toDateTime(dateTimeZone57);
        org.joda.time.Instant instant60 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone61 = null;
        org.joda.time.DateTimeZone dateTimeZone62 = org.joda.time.DateTimeZone.forTimeZone(timeZone61);
        org.joda.time.chrono.GJChronology gJChronology63 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone62);
        org.joda.time.DateTimeField dateTimeField64 = gJChronology63.millisOfSecond();
        int int65 = instant60.get(dateTimeField64);
        org.joda.time.Instant instant67 = instant60.plus(0L);
        org.joda.time.Instant instant68 = instant67.toInstant();
        org.joda.time.Instant instant70 = new org.joda.time.Instant(52L);
        boolean boolean71 = instant70.isEqualNow();
        java.lang.String str72 = instant70.toString();
        java.lang.String str73 = instant70.toString();
        org.joda.time.Instant instant75 = new org.joda.time.Instant(52L);
        boolean boolean76 = instant75.isEqualNow();
        org.joda.time.ReadableDuration readableDuration77 = null;
        org.joda.time.Instant instant78 = instant75.plus(readableDuration77);
        boolean boolean79 = instant70.isBefore((org.joda.time.ReadableInstant) instant78);
        org.joda.time.Instant instant81 = instant70.minus((long) 0);
        int int82 = instant67.compareTo((org.joda.time.ReadableInstant) instant70);
        org.joda.time.Instant instant85 = instant70.withDurationAdded((long) (short) 100, 70);
        java.util.TimeZone timeZone86 = null;
        org.joda.time.DateTimeZone dateTimeZone87 = org.joda.time.DateTimeZone.forTimeZone(timeZone86);
        org.joda.time.chrono.GJChronology gJChronology88 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone87);
        int int90 = dateTimeZone87.getOffsetFromLocal(1000L);
        org.joda.time.MutableDateTime mutableDateTime91 = instant85.toMutableDateTime(dateTimeZone87);
        boolean boolean92 = dateTime58.isAfter((org.joda.time.ReadableInstant) instant85);
        org.joda.time.Chronology chronology93 = instant85.getChronology();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and dateTime58", (instant1.compareTo(dateTime58) == 0) == instant1.equals(dateTime58));
    }

    @Test
    public void test1674() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1674");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField3 = gJChronology2.millisOfSecond();
        org.joda.time.DurationField durationField4 = gJChronology2.millis();
        org.joda.time.DurationField durationField5 = gJChronology2.weekyears();
        org.joda.time.DurationField durationField6 = gJChronology2.years();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology2.year();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on durationField5 and durationField6", (durationField5.compareTo(durationField6) == 0) == durationField5.equals(durationField6));
    }

    @Test
    public void test1675() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1675");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField3 = gJChronology2.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.weekyear();
        org.joda.time.DurationField durationField5 = gJChronology2.centuries();
        long long9 = gJChronology2.add(0L, 4324200000L, (-5914428));
        org.joda.time.DateTimeField dateTimeField10 = gJChronology2.hourOfDay();
        org.joda.time.DateTimeField dateTimeField11 = gJChronology2.monthOfYear();
        org.joda.time.DurationField durationField12 = gJChronology2.eras();
        org.joda.time.DateTimeField dateTimeField13 = gJChronology2.dayOfWeek();
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField5 and durationField12", Math.signum(durationField5.compareTo(durationField12)) == -Math.signum(durationField12.compareTo(durationField5)));
    }

    @Test
    public void test1676() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1676");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forTimeZone(timeZone2);
        org.joda.time.chrono.GJChronology gJChronology4 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone3);
        org.joda.time.DateTimeField dateTimeField5 = gJChronology4.millisOfSecond();
        int int6 = instant1.get(dateTimeField5);
        org.joda.time.Instant instant8 = instant1.plus(0L);
        boolean boolean9 = instant8.isEqualNow();
        java.util.TimeZone timeZone10 = null;
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forTimeZone(timeZone10);
        org.joda.time.chrono.GJChronology gJChronology12 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone11);
        org.joda.time.DurationField durationField13 = gJChronology12.halfdays();
        long long17 = gJChronology12.add((long) 'a', (-1L), (int) (short) 0);
        boolean boolean19 = gJChronology12.equals((java.lang.Object) 0);
        org.joda.time.DateTimeField dateTimeField20 = gJChronology12.dayOfMonth();
        org.joda.time.DurationField durationField21 = gJChronology12.millis();
        org.joda.time.DurationField durationField22 = gJChronology12.years();
        org.joda.time.MutableDateTime mutableDateTime23 = instant8.toMutableDateTime((org.joda.time.Chronology) gJChronology12);
        org.joda.time.Instant instant25 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone26 = null;
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forTimeZone(timeZone26);
        org.joda.time.chrono.GJChronology gJChronology28 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone27);
        org.joda.time.DateTimeField dateTimeField29 = gJChronology28.millisOfSecond();
        int int30 = instant25.get(dateTimeField29);
        boolean boolean31 = instant25.isEqualNow();
        org.joda.time.tz.NameProvider nameProvider32 = org.joda.time.DateTimeZone.getNameProvider();
        org.joda.time.DateTimeZone.setNameProvider(nameProvider32);
        org.joda.time.DateTimeZone.setNameProvider(nameProvider32);
        boolean boolean35 = instant25.equals((java.lang.Object) nameProvider32);
        org.joda.time.Instant instant37 = new org.joda.time.Instant(52L);
        boolean boolean38 = instant37.isEqualNow();
        java.lang.String str39 = instant37.toString();
        org.joda.time.DateTimeZone dateTimeZone40 = instant37.getZone();
        org.joda.time.DateTime dateTime41 = instant25.toDateTime(dateTimeZone40);
        org.joda.time.ReadableDuration readableDuration42 = null;
        org.joda.time.Instant instant44 = instant25.withDurationAdded(readableDuration42, 73048);
        org.joda.time.Instant instant45 = instant44.toInstant();
        boolean boolean46 = instant8.isBefore((org.joda.time.ReadableInstant) instant45);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant8 and mutableDateTime23", (instant8.compareTo(mutableDateTime23) == 0) == instant8.equals(mutableDateTime23));
    }

    @Test
    public void test1677() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1677");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = gJChronology2.halfdays();
        long long7 = gJChronology2.add((long) 'a', (-1L), (int) (short) 0);
        long long11 = gJChronology2.add((long) (byte) 0, (long) '4', 100);
        org.joda.time.DateTimeField dateTimeField12 = gJChronology2.minuteOfHour();
        org.joda.time.DurationField durationField13 = gJChronology2.hours();
        org.joda.time.DateTimeField dateTimeField14 = gJChronology2.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology2.millisOfSecond();
        org.joda.time.DurationField durationField16 = gJChronology2.months();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetMillis((int) '4');
        java.util.TimeZone timeZone19 = dateTimeZone18.toTimeZone();
        long long22 = dateTimeZone18.adjustOffset((long) 0, false);
        int int24 = dateTimeZone18.getOffsetFromLocal((-26438399999L));
        long long26 = dateTimeZone18.previousTransition((long) (byte) 1);
        java.lang.String str27 = dateTimeZone18.getID();
        org.joda.time.LocalDateTime localDateTime28 = null;
        boolean boolean29 = dateTimeZone18.isLocalDateTimeGap(localDateTime28);
        java.util.Locale locale32 = new java.util.Locale("hi!");
        java.lang.String str33 = locale32.getCountry();
        java.lang.String str34 = locale32.getCountry();
        java.lang.String str35 = dateTimeZone18.getName(747221760000000000L, locale32);
        org.joda.time.Chronology chronology36 = gJChronology2.withZone(dateTimeZone18);
        org.joda.time.DurationField durationField37 = chronology36.eras();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField37, durationField3, and durationField13", !(durationField37.compareTo(durationField3) == 0) || (Math.signum(durationField37.compareTo(durationField13)) == Math.signum(durationField3.compareTo(durationField13))));
    }

    @Test
    public void test1678() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1678");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        boolean boolean2 = instant1.isEqualNow();
        java.lang.String str3 = instant1.toString();
        java.lang.String str4 = instant1.toString();
        org.joda.time.Instant instant6 = new org.joda.time.Instant(52L);
        boolean boolean7 = instant6.isEqualNow();
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.Instant instant9 = instant6.plus(readableDuration8);
        boolean boolean10 = instant1.isBefore((org.joda.time.ReadableInstant) instant9);
        org.joda.time.Instant instant12 = instant9.plus((long) (short) 100);
        java.lang.String str13 = instant9.toString();
        boolean boolean15 = instant9.isBefore(262974670000L);
        java.lang.String str16 = instant9.toString();
        org.joda.time.Instant instant18 = instant9.withMillis((long) 30);
        org.joda.time.Instant instant20 = new org.joda.time.Instant(52L);
        boolean boolean21 = instant20.isEqualNow();
        org.joda.time.ReadableDuration readableDuration22 = null;
        org.joda.time.Instant instant23 = instant20.plus(readableDuration22);
        org.joda.time.Instant instant25 = new org.joda.time.Instant(52L);
        org.joda.time.Instant instant27 = instant25.withMillis((long) 'u');
        boolean boolean28 = instant20.isBefore((org.joda.time.ReadableInstant) instant25);
        org.joda.time.Instant instant31 = instant25.withDurationAdded(4320000000L, (int) 'u');
        org.joda.time.Chronology chronology32 = instant31.getChronology();
        org.joda.time.Instant instant34 = new org.joda.time.Instant(52L);
        boolean boolean35 = instant34.isEqualNow();
        org.joda.time.ReadableDuration readableDuration36 = null;
        org.joda.time.Instant instant37 = instant34.plus(readableDuration36);
        boolean boolean39 = instant37.equals((java.lang.Object) ' ');
        org.joda.time.Instant instant41 = new org.joda.time.Instant(52L);
        boolean boolean42 = instant41.isEqualNow();
        java.lang.String str43 = instant41.toString();
        java.lang.String str44 = instant41.toString();
        boolean boolean45 = instant37.isBefore((org.joda.time.ReadableInstant) instant41);
        boolean boolean46 = instant31.isBefore((org.joda.time.ReadableInstant) instant37);
        org.joda.time.ReadableDuration readableDuration47 = null;
        org.joda.time.Instant instant48 = instant37.minus(readableDuration47);
        org.joda.time.DateTimeZone dateTimeZone49 = null;
        org.joda.time.MutableDateTime mutableDateTime50 = instant48.toMutableDateTime(dateTimeZone49);
        boolean boolean51 = instant9.isEqual((org.joda.time.ReadableInstant) instant48);
        boolean boolean53 = instant9.isBefore((-871521494022L));
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and mutableDateTime50", (instant1.compareTo(mutableDateTime50) == 0) == instant1.equals(mutableDateTime50));
    }

    @Test
    public void test1679() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1679");
        org.joda.time.Instant instant1 = org.joda.time.Instant.parse("3929-04-02T00:00:00.051Z");
        org.joda.time.DateTime dateTime2 = instant1.toDateTime();
        java.util.TimeZone timeZone3 = null;
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forTimeZone(timeZone3);
        org.joda.time.chrono.GJChronology gJChronology5 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone4);
        org.joda.time.DateTimeField dateTimeField6 = gJChronology5.era();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology5.year();
        org.joda.time.DateTimeField dateTimeField8 = gJChronology5.secondOfDay();
        org.joda.time.DurationField durationField9 = gJChronology5.years();
        boolean boolean10 = instant1.equals((java.lang.Object) gJChronology5);
        org.joda.time.DateTimeField dateTimeField11 = gJChronology5.dayOfMonth();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and dateTime2", (instant1.compareTo(dateTime2) == 0) == instant1.equals(dateTime2));
    }

    @Test
    public void test1680() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1680");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forTimeZone(timeZone2);
        org.joda.time.chrono.GJChronology gJChronology4 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone3);
        org.joda.time.DateTimeField dateTimeField5 = gJChronology4.millisOfSecond();
        int int6 = instant1.get(dateTimeField5);
        org.joda.time.Instant instant8 = instant1.plus(0L);
        org.joda.time.Instant instant9 = instant8.toInstant();
        org.joda.time.Instant instant11 = new org.joda.time.Instant(52L);
        boolean boolean12 = instant11.isEqualNow();
        java.lang.String str13 = instant11.toString();
        java.lang.String str14 = instant11.toString();
        org.joda.time.Instant instant16 = new org.joda.time.Instant(52L);
        boolean boolean17 = instant16.isEqualNow();
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.Instant instant19 = instant16.plus(readableDuration18);
        boolean boolean20 = instant11.isBefore((org.joda.time.ReadableInstant) instant19);
        org.joda.time.Instant instant22 = instant11.minus((long) 0);
        int int23 = instant8.compareTo((org.joda.time.ReadableInstant) instant11);
        boolean boolean25 = instant8.equals((java.lang.Object) 349200L);
        long long26 = instant8.getMillis();
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = null;
        boolean boolean28 = instant8.isSupported(dateTimeFieldType27);
        org.joda.time.Instant instant30 = instant8.withMillis((-2208729596097L));
        java.util.TimeZone timeZone31 = null;
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.forTimeZone(timeZone31);
        org.joda.time.chrono.GJChronology gJChronology33 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone32);
        org.joda.time.DurationField durationField34 = gJChronology33.halfdays();
        long long38 = gJChronology33.add((long) 'a', (-1L), (int) (short) 0);
        org.joda.time.DateTimeField dateTimeField39 = gJChronology33.halfdayOfDay();
        org.joda.time.Chronology chronology40 = gJChronology33.withUTC();
        java.lang.String str41 = gJChronology33.toString();
        org.joda.time.Chronology chronology42 = gJChronology33.withUTC();
        org.joda.time.DateTimeField dateTimeField43 = gJChronology33.millisOfDay();
        org.joda.time.DateTimeField dateTimeField44 = gJChronology33.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime45 = instant8.toMutableDateTime((org.joda.time.Chronology) gJChronology33);
        org.joda.time.DateTimeField dateTimeField46 = gJChronology33.halfdayOfDay();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and mutableDateTime45", (instant1.compareTo(mutableDateTime45) == 0) == instant1.equals(mutableDateTime45));
    }

    @Test
    public void test1681() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1681");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField3 = gJChronology2.millisOfSecond();
        org.joda.time.DurationField durationField4 = gJChronology2.millis();
        org.joda.time.DurationField durationField5 = gJChronology2.weekyears();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology2.dayOfYear();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology2.clockhourOfDay();
        org.joda.time.DateTimeZone dateTimeZone8 = gJChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField9 = gJChronology2.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField10 = gJChronology2.halfdayOfDay();
        org.joda.time.DurationField durationField11 = gJChronology2.eras();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField11, durationField4, and durationField5", !(durationField11.compareTo(durationField4) == 0) || (Math.signum(durationField11.compareTo(durationField5)) == Math.signum(durationField4.compareTo(durationField5))));
    }

    @Test
    public void test1682() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1682");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        long long6 = dateTimeZone1.convertLocalToUTC((long) (byte) -1, true, 0L);
        boolean boolean8 = dateTimeZone1.equals((java.lang.Object) true);
        long long12 = dateTimeZone1.convertLocalToUTC((long) 'a', true, 0L);
        org.joda.time.Instant instant14 = new org.joda.time.Instant(52L);
        boolean boolean15 = instant14.isEqualNow();
        java.lang.String str16 = instant14.toString();
        java.lang.String str17 = instant14.toString();
        org.joda.time.Instant instant20 = instant14.withDurationAdded(115200000L, (int) (short) 1);
        org.joda.time.Instant instant21 = instant14.toInstant();
        long long22 = instant14.getMillis();
        java.util.TimeZone timeZone23 = null;
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forTimeZone(timeZone23);
        int int26 = dateTimeZone24.getOffsetFromLocal((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(0, (int) (short) 10);
        long long31 = dateTimeZone24.getMillisKeepLocal(dateTimeZone29, (-61827926399999L));
        org.joda.time.MutableDateTime mutableDateTime32 = instant14.toMutableDateTime(dateTimeZone24);
        org.joda.time.chrono.GJChronology gJChronology33 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1, (org.joda.time.ReadableInstant) mutableDateTime32);
        org.joda.time.Instant instant35 = new org.joda.time.Instant(52L);
        boolean boolean36 = instant35.isEqualNow();
        java.lang.String str37 = instant35.toString();
        org.joda.time.Instant instant39 = new org.joda.time.Instant(52L);
        boolean boolean40 = instant39.isEqualNow();
        java.lang.String str41 = instant39.toString();
        java.lang.String str42 = instant39.toString();
        org.joda.time.Instant instant45 = instant39.withDurationAdded(115200000L, (int) (short) 1);
        int int46 = instant35.compareTo((org.joda.time.ReadableInstant) instant39);
        org.joda.time.Instant instant48 = new org.joda.time.Instant(52L);
        boolean boolean49 = instant48.isEqualNow();
        org.joda.time.ReadableDuration readableDuration50 = null;
        org.joda.time.Instant instant51 = instant48.plus(readableDuration50);
        boolean boolean53 = instant51.equals((java.lang.Object) ' ');
        boolean boolean54 = instant39.isAfter((org.joda.time.ReadableInstant) instant51);
        java.lang.String str55 = instant51.toString();
        java.lang.String str56 = instant51.toString();
        org.joda.time.ReadableDuration readableDuration57 = null;
        org.joda.time.Instant instant59 = instant51.withDurationAdded(readableDuration57, 236785);
        org.joda.time.Instant instant61 = new org.joda.time.Instant((-64983772799999L));
        org.joda.time.DateTime dateTime62 = instant61.toDateTime();
        org.joda.time.MutableDateTime mutableDateTime63 = instant61.toMutableDateTime();
        int int64 = instant51.compareTo((org.joda.time.ReadableInstant) instant61);
        org.joda.time.DateTimeZone dateTimeZone65 = instant61.getZone();
        org.joda.time.DateTime dateTime66 = instant61.toDateTime();
        org.joda.time.chrono.GJChronology gJChronology67 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1, (org.joda.time.ReadableInstant) dateTime66);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant14 and mutableDateTime32", (instant14.compareTo(mutableDateTime32) == 0) == instant14.equals(mutableDateTime32));
    }

    @Test
    public void test1683() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1683");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = gJChronology2.years();
        java.util.TimeZone timeZone4 = null;
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forTimeZone(timeZone4);
        org.joda.time.chrono.GJChronology gJChronology6 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone5);
        org.joda.time.DurationField durationField7 = gJChronology6.halfdays();
        org.joda.time.DateTimeField dateTimeField8 = gJChronology6.millisOfDay();
        org.joda.time.DateTimeField dateTimeField9 = gJChronology6.minuteOfDay();
        org.joda.time.DurationField durationField10 = gJChronology6.centuries();
        java.util.TimeZone timeZone11 = null;
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forTimeZone(timeZone11);
        org.joda.time.chrono.GJChronology gJChronology13 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone12);
        org.joda.time.DurationField durationField14 = gJChronology13.halfdays();
        long long17 = durationField14.add((long) 100, 100L);
        boolean boolean18 = durationField14.isPrecise();
        int int19 = durationField10.compareTo(durationField14);
        boolean boolean20 = gJChronology2.equals((java.lang.Object) durationField10);
        org.joda.time.DateTimeField dateTimeField21 = gJChronology2.dayOfYear();
        org.joda.time.DateTimeField dateTimeField22 = gJChronology2.clockhourOfHalfday();
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        long long26 = gJChronology2.add(readablePeriod23, (-2246400017000L), 1182);
        org.joda.time.DurationField durationField27 = gJChronology2.days();
        org.joda.time.DurationField durationField28 = gJChronology2.eras();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField28, durationField3, and durationField7", !(durationField28.compareTo(durationField3) == 0) || (Math.signum(durationField28.compareTo(durationField7)) == Math.signum(durationField3.compareTo(durationField7))));
    }

    @Test
    public void test1684() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1684");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        boolean boolean2 = instant1.isEqualNow();
        java.lang.String str3 = instant1.toString();
        java.util.TimeZone timeZone4 = null;
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forTimeZone(timeZone4);
        org.joda.time.chrono.GJChronology gJChronology6 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone5);
        java.util.Locale locale8 = new java.util.Locale("hi!");
        java.lang.String str9 = locale8.getCountry();
        java.util.Locale locale10 = java.util.Locale.getDefault();
        java.lang.String str11 = locale10.getDisplayName();
        java.lang.String str12 = locale8.getDisplayScript(locale10);
        boolean boolean13 = dateTimeZone5.equals((java.lang.Object) locale10);
        int int15 = dateTimeZone5.getOffsetFromLocal((long) (short) 10);
        java.util.TimeZone timeZone16 = null;
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forTimeZone(timeZone16);
        org.joda.time.chrono.GJChronology gJChronology18 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone17);
        org.joda.time.DateTimeField dateTimeField19 = gJChronology18.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField20 = gJChronology18.weekyearOfCentury();
        org.joda.time.Instant instant21 = gJChronology18.getGregorianCutover();
        org.joda.time.Instant instant23 = instant21.withMillis(0L);
        org.joda.time.Instant instant25 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone26 = null;
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forTimeZone(timeZone26);
        org.joda.time.chrono.GJChronology gJChronology28 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone27);
        org.joda.time.DateTimeField dateTimeField29 = gJChronology28.millisOfSecond();
        int int30 = instant25.get(dateTimeField29);
        org.joda.time.Instant instant32 = instant25.plus(0L);
        int int33 = instant23.compareTo((org.joda.time.ReadableInstant) instant32);
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = null;
        boolean boolean35 = instant32.isSupported(dateTimeFieldType34);
        int int36 = dateTimeZone5.getOffset((org.joda.time.ReadableInstant) instant32);
        boolean boolean37 = instant1.isAfter((org.joda.time.ReadableInstant) instant32);
        org.joda.time.ReadableDuration readableDuration38 = null;
        org.joda.time.Instant instant40 = instant1.withDurationAdded(readableDuration38, 1);
        boolean boolean41 = instant40.isEqualNow();
        org.joda.time.Instant instant42 = instant40.toInstant();
        org.joda.time.MutableDateTime mutableDateTime43 = instant42.toMutableDateTime();
        java.util.TimeZone timeZone44 = null;
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.forTimeZone(timeZone44);
        org.joda.time.chrono.GJChronology gJChronology46 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone45);
        org.joda.time.DateTimeField dateTimeField47 = gJChronology46.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField48 = gJChronology46.weekyearOfCentury();
        org.joda.time.Instant instant49 = gJChronology46.getGregorianCutover();
        org.joda.time.Instant instant51 = instant49.withMillis(0L);
        org.joda.time.Instant instant53 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone54 = null;
        org.joda.time.DateTimeZone dateTimeZone55 = org.joda.time.DateTimeZone.forTimeZone(timeZone54);
        org.joda.time.chrono.GJChronology gJChronology56 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone55);
        org.joda.time.DateTimeField dateTimeField57 = gJChronology56.millisOfSecond();
        int int58 = instant53.get(dateTimeField57);
        org.joda.time.Instant instant60 = instant53.plus(0L);
        int int61 = instant51.compareTo((org.joda.time.ReadableInstant) instant60);
        org.joda.time.DateTimeFieldType dateTimeFieldType62 = null;
        boolean boolean63 = instant60.isSupported(dateTimeFieldType62);
        org.joda.time.Instant instant65 = instant60.minus((long) (short) 10);
        org.joda.time.ReadableDuration readableDuration66 = null;
        org.joda.time.Instant instant67 = instant65.minus(readableDuration66);
        boolean boolean69 = instant67.isAfter(624L);
        int int70 = instant42.compareTo((org.joda.time.ReadableInstant) instant67);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant42 and mutableDateTime43", (instant42.compareTo(mutableDateTime43) == 0) == instant42.equals(mutableDateTime43));
    }

    @Test
    public void test1685() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1685");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forTimeZone(timeZone2);
        org.joda.time.chrono.GJChronology gJChronology4 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone3);
        org.joda.time.DateTimeField dateTimeField5 = gJChronology4.millisOfSecond();
        int int6 = instant1.get(dateTimeField5);
        boolean boolean7 = instant1.isEqualNow();
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.Instant instant10 = instant1.withDurationAdded(readableDuration8, (int) (short) 0);
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.Instant instant12 = instant1.plus(readableDuration11);
        org.joda.time.ReadableDuration readableDuration13 = null;
        org.joda.time.Instant instant14 = instant12.minus(readableDuration13);
        org.joda.time.DateTime dateTime15 = instant14.toDateTime();
        boolean boolean17 = dateTime15.isAfter((long) (short) -1);
        java.util.TimeZone timeZone18 = null;
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forTimeZone(timeZone18);
        org.joda.time.chrono.GJChronology gJChronology20 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone19);
        org.joda.time.DurationField durationField21 = gJChronology20.halfdays();
        long long25 = gJChronology20.add((long) 'a', (-1L), (int) (short) 0);
        boolean boolean27 = gJChronology20.equals((java.lang.Object) 0);
        org.joda.time.DateTimeField dateTimeField28 = gJChronology20.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField29 = gJChronology20.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField30 = gJChronology20.clockhourOfDay();
        long long35 = gJChronology20.getDateTimeMillis(10, (int) (short) 10, 4, (int) (byte) 1);
        org.joda.time.DateTimeField dateTimeField36 = gJChronology20.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField37 = gJChronology20.era();
        org.joda.time.DateTimeField dateTimeField38 = gJChronology20.millisOfDay();
        org.joda.time.DateTimeField dateTimeField39 = gJChronology20.yearOfEra();
        org.joda.time.DateTimeZone dateTimeZone40 = gJChronology20.getZone();
        boolean boolean41 = dateTime15.equals((java.lang.Object) dateTimeZone40);
        org.joda.time.Instant instant43 = new org.joda.time.Instant(52L);
        boolean boolean44 = instant43.isEqualNow();
        org.joda.time.Instant instant46 = new org.joda.time.Instant(52L);
        org.joda.time.Instant instant48 = instant46.withMillis((long) 'u');
        boolean boolean49 = instant43.isAfter((org.joda.time.ReadableInstant) instant46);
        org.joda.time.DateTime dateTime50 = instant43.toDateTimeISO();
        java.util.TimeZone timeZone51 = null;
        org.joda.time.DateTimeZone dateTimeZone52 = org.joda.time.DateTimeZone.forTimeZone(timeZone51);
        org.joda.time.chrono.GJChronology gJChronology53 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone52);
        org.joda.time.DateTimeField dateTimeField54 = gJChronology53.millisOfSecond();
        org.joda.time.DurationField durationField55 = gJChronology53.millis();
        org.joda.time.DateTimeZone dateTimeZone56 = gJChronology53.getZone();
        org.joda.time.DateTimeField dateTimeField57 = gJChronology53.hourOfHalfday();
        org.joda.time.DurationField durationField58 = gJChronology53.halfdays();
        org.joda.time.DateTimeZone dateTimeZone60 = org.joda.time.DateTimeZone.forOffsetHours((int) '4');
        long long63 = dateTimeZone60.adjustOffset((-64983772800051L), true);
        long long65 = dateTimeZone60.convertUTCToLocal(5983L);
        org.joda.time.Chronology chronology66 = gJChronology53.withZone(dateTimeZone60);
        java.lang.String str67 = dateTimeZone60.getID();
        org.joda.time.DateTime dateTime68 = dateTime50.toDateTime(dateTimeZone60);
        boolean boolean69 = dateTime15.isBefore((org.joda.time.ReadableInstant) dateTime50);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and dateTime68", (instant1.compareTo(dateTime68) == 0) == instant1.equals(dateTime68));
    }

    @Test
    public void test1686() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1686");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField3 = gJChronology2.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology2.hourOfDay();
        org.joda.time.DurationField durationField7 = gJChronology2.months();
        org.joda.time.DurationField durationField8 = gJChronology2.eras();
        org.joda.time.DurationField durationField9 = gJChronology2.minutes();
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField7 and durationField8", Math.signum(durationField7.compareTo(durationField8)) == -Math.signum(durationField8.compareTo(durationField7)));
    }

    @Test
    public void test1687() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1687");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField3 = gJChronology2.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.minuteOfHour();
        org.joda.time.DurationField durationField6 = gJChronology2.halfdays();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology2.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField8 = gJChronology2.year();
        org.joda.time.DateTimeField dateTimeField9 = gJChronology2.minuteOfHour();
        org.joda.time.DurationField durationField10 = gJChronology2.weekyears();
        org.joda.time.DateTimeField dateTimeField11 = gJChronology2.dayOfYear();
        org.joda.time.DurationField durationField12 = gJChronology2.minutes();
        java.util.TimeZone timeZone13 = null;
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forTimeZone(timeZone13);
        org.joda.time.chrono.GJChronology gJChronology15 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone14);
        org.joda.time.DurationField durationField16 = gJChronology15.halfdays();
        long long20 = gJChronology15.add((long) 'a', (-1L), (int) (short) 0);
        boolean boolean22 = gJChronology15.equals((java.lang.Object) 0);
        org.joda.time.DateTimeField dateTimeField23 = gJChronology15.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField24 = gJChronology15.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField25 = gJChronology15.clockhourOfDay();
        long long30 = gJChronology15.getDateTimeMillis(10, (int) (short) 10, 4, (int) (byte) 1);
        org.joda.time.DateTimeField dateTimeField31 = gJChronology15.millisOfDay();
        java.lang.String str32 = gJChronology15.toString();
        org.joda.time.DateTimeField dateTimeField33 = gJChronology15.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField34 = gJChronology15.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField35 = gJChronology15.halfdayOfDay();
        java.util.TimeZone timeZone36 = null;
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.forTimeZone(timeZone36);
        org.joda.time.chrono.GJChronology gJChronology38 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone37);
        org.joda.time.DurationField durationField39 = gJChronology38.halfdays();
        long long43 = gJChronology38.add((long) 'a', (-1L), (int) (short) 0);
        long long47 = gJChronology38.add((long) (byte) 0, (long) '4', 100);
        org.joda.time.DurationField durationField48 = gJChronology38.years();
        org.joda.time.DateTimeField dateTimeField49 = gJChronology38.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone50 = gJChronology38.getZone();
        org.joda.time.Chronology chronology51 = gJChronology15.withZone(dateTimeZone50);
        org.joda.time.DurationField durationField52 = gJChronology15.days();
        org.joda.time.DurationField durationField53 = gJChronology15.years();
        org.joda.time.DateTimeZone dateTimeZone54 = gJChronology15.getZone();
        java.util.TimeZone timeZone55 = null;
        org.joda.time.DateTimeZone dateTimeZone56 = org.joda.time.DateTimeZone.forTimeZone(timeZone55);
        int int58 = dateTimeZone56.getOffsetFromLocal((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone61 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(0, (int) (short) 10);
        long long63 = dateTimeZone56.getMillisKeepLocal(dateTimeZone61, (-61827926399999L));
        long long65 = dateTimeZone54.getMillisKeepLocal(dateTimeZone61, (long) 'a');
        long long67 = dateTimeZone54.nextTransition(17296799948L);
        org.joda.time.Chronology chronology68 = gJChronology2.withZone(dateTimeZone54);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on durationField10 and durationField48", (durationField10.compareTo(durationField48) == 0) == durationField10.equals(durationField48));
    }

    @Test
    public void test1688() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1688");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forTimeZone(timeZone2);
        org.joda.time.chrono.GJChronology gJChronology4 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone3);
        org.joda.time.DateTimeField dateTimeField5 = gJChronology4.millisOfSecond();
        int int6 = instant1.get(dateTimeField5);
        org.joda.time.Instant instant8 = instant1.plus(0L);
        long long9 = instant8.getMillis();
        org.joda.time.Instant instant12 = instant8.withDurationAdded((long) 12, 97);
        org.joda.time.DateTimeZone dateTimeZone13 = instant12.getZone();
        org.joda.time.Instant instant14 = instant12.toInstant();
        java.util.TimeZone timeZone15 = null;
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forTimeZone(timeZone15);
        org.joda.time.chrono.GJChronology gJChronology17 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone16);
        org.joda.time.DateTimeField dateTimeField18 = gJChronology17.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField19 = gJChronology17.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField20 = gJChronology17.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField21 = gJChronology17.hourOfHalfday();
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        long long25 = gJChronology17.add(readablePeriod22, (-599851L), (-5914428));
        org.joda.time.MutableDateTime mutableDateTime26 = instant14.toMutableDateTime((org.joda.time.Chronology) gJChronology17);
        org.joda.time.Instant instant28 = new org.joda.time.Instant((java.lang.Object) (-22087032463023600L));
        org.joda.time.Instant instant29 = instant28.toInstant();
        boolean boolean31 = instant28.isEqual((-683420883428L));
        org.joda.time.DateTime dateTime32 = instant28.toDateTime();
        boolean boolean33 = instant14.isAfter((org.joda.time.ReadableInstant) dateTime32);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant14 and mutableDateTime26", (instant14.compareTo(mutableDateTime26) == 0) == instant14.equals(mutableDateTime26));
    }

    @Test
    public void test1689() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1689");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        boolean boolean2 = instant1.isEqualNow();
        org.joda.time.ReadableDuration readableDuration3 = null;
        org.joda.time.Instant instant4 = instant1.plus(readableDuration3);
        long long5 = instant1.getMillis();
        java.lang.String str6 = instant1.toString();
        boolean boolean8 = instant1.isAfter((long) (-1));
        org.joda.time.Instant instant9 = instant1.toInstant();
        org.joda.time.Instant instant11 = instant9.plus((-61827926999999L));
        java.util.TimeZone timeZone12 = null;
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forTimeZone(timeZone12);
        java.lang.String str15 = dateTimeZone13.getNameKey((long) 100);
        boolean boolean16 = dateTimeZone13.isFixed();
        org.joda.time.chrono.GJChronology gJChronology17 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone13);
        org.joda.time.DurationField durationField18 = gJChronology17.hours();
        java.util.TimeZone timeZone19 = null;
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forTimeZone(timeZone19);
        org.joda.time.chrono.GJChronology gJChronology21 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone20);
        org.joda.time.DurationField durationField22 = gJChronology21.halfdays();
        long long26 = gJChronology21.add((long) 'a', (-1L), (int) (short) 0);
        org.joda.time.DateTimeField dateTimeField27 = gJChronology21.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField28 = gJChronology21.secondOfMinute();
        org.joda.time.Instant instant30 = new org.joda.time.Instant(52L);
        boolean boolean31 = instant30.isEqualNow();
        org.joda.time.ReadableDuration readableDuration32 = null;
        org.joda.time.Instant instant33 = instant30.plus(readableDuration32);
        boolean boolean34 = gJChronology21.equals((java.lang.Object) instant30);
        org.joda.time.DateTimeFieldType dateTimeFieldType35 = null;
        boolean boolean36 = instant30.isSupported(dateTimeFieldType35);
        org.joda.time.DateTimeFieldType dateTimeFieldType37 = null;
        boolean boolean38 = instant30.isSupported(dateTimeFieldType37);
        org.joda.time.DateTimeZone dateTimeZone39 = instant30.getZone();
        long long41 = dateTimeZone39.nextTransition(349200L);
        org.joda.time.Chronology chronology42 = gJChronology17.withZone(dateTimeZone39);
        org.joda.time.DateTime dateTime43 = instant9.toDateTime(chronology42);
        org.joda.time.DateTime dateTime44 = instant9.toDateTimeISO();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant9 and dateTime43", (instant9.compareTo(dateTime43) == 0) == instant9.equals(dateTime43));
    }

    @Test
    public void test1690() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1690");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forTimeZone(timeZone2);
        org.joda.time.chrono.GJChronology gJChronology4 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone3);
        org.joda.time.DateTimeField dateTimeField5 = gJChronology4.millisOfSecond();
        int int6 = instant1.get(dateTimeField5);
        org.joda.time.Instant instant8 = instant1.plus(0L);
        java.util.TimeZone timeZone9 = null;
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forTimeZone(timeZone9);
        org.joda.time.chrono.GJChronology gJChronology11 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone10);
        org.joda.time.DurationField durationField12 = gJChronology11.halfdays();
        org.joda.time.Chronology chronology13 = gJChronology11.withUTC();
        java.lang.String str14 = gJChronology11.toString();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology11.hourOfHalfday();
        int int16 = instant1.get(dateTimeField15);
        java.util.TimeZone timeZone17 = null;
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forTimeZone(timeZone17);
        org.joda.time.chrono.GJChronology gJChronology19 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone18);
        org.joda.time.DurationField durationField20 = gJChronology19.halfdays();
        long long24 = gJChronology19.add((long) 'a', (-1L), (int) (short) 0);
        org.joda.time.DateTimeField dateTimeField25 = gJChronology19.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField26 = gJChronology19.secondOfMinute();
        org.joda.time.Instant instant28 = new org.joda.time.Instant(52L);
        boolean boolean29 = instant28.isEqualNow();
        org.joda.time.ReadableDuration readableDuration30 = null;
        org.joda.time.Instant instant31 = instant28.plus(readableDuration30);
        boolean boolean32 = gJChronology19.equals((java.lang.Object) instant28);
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = null;
        boolean boolean34 = instant28.isSupported(dateTimeFieldType33);
        org.joda.time.DateTimeFieldType dateTimeFieldType35 = null;
        boolean boolean36 = instant28.isSupported(dateTimeFieldType35);
        org.joda.time.DateTimeZone dateTimeZone37 = instant28.getZone();
        boolean boolean38 = instant1.isAfter((org.joda.time.ReadableInstant) instant28);
        long long39 = instant28.getMillis();
        java.lang.String str40 = instant28.toString();
        org.joda.time.DateTimeZone dateTimeZone41 = instant28.getZone();
        java.util.TimeZone timeZone42 = null;
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.forTimeZone(timeZone42);
        java.lang.String str45 = dateTimeZone43.getNameKey((long) 100);
        long long48 = dateTimeZone43.convertLocalToUTC((-2246399965L), true);
        long long52 = dateTimeZone43.convertLocalToUTC(4320000000L, true, (long) 'a');
        boolean boolean53 = dateTimeZone43.isFixed();
        int int55 = dateTimeZone43.getOffset(97L);
        org.joda.time.MutableDateTime mutableDateTime56 = instant28.toMutableDateTime(dateTimeZone43);
        java.util.TimeZone timeZone57 = null;
        org.joda.time.DateTimeZone dateTimeZone58 = org.joda.time.DateTimeZone.forTimeZone(timeZone57);
        org.joda.time.chrono.GJChronology gJChronology59 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone58);
        org.joda.time.DurationField durationField60 = gJChronology59.halfdays();
        long long64 = gJChronology59.add((long) 'a', (-1L), (int) (short) 0);
        boolean boolean66 = gJChronology59.equals((java.lang.Object) 0);
        org.joda.time.DateTimeField dateTimeField67 = gJChronology59.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField68 = gJChronology59.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField69 = gJChronology59.clockhourOfDay();
        long long74 = gJChronology59.getDateTimeMillis(10, (int) (short) 10, 4, (int) (byte) 1);
        org.joda.time.Instant instant75 = gJChronology59.getGregorianCutover();
        org.joda.time.DateTimeField dateTimeField76 = gJChronology59.yearOfEra();
        org.joda.time.DurationField durationField77 = gJChronology59.minutes();
        org.joda.time.DurationField durationField78 = gJChronology59.centuries();
        java.lang.String str79 = gJChronology59.toString();
        org.joda.time.Chronology chronology80 = gJChronology59.withUTC();
        org.joda.time.DateTimeField dateTimeField81 = gJChronology59.minuteOfDay();
        org.joda.time.Chronology chronology82 = gJChronology59.withUTC();
        org.joda.time.MutableDateTime mutableDateTime83 = mutableDateTime56.toMutableDateTime((org.joda.time.Chronology) gJChronology59);
        org.joda.time.Instant instant85 = new org.joda.time.Instant(52L);
        boolean boolean86 = instant85.isEqualNow();
        org.joda.time.ReadableDuration readableDuration87 = null;
        org.joda.time.Instant instant88 = instant85.plus(readableDuration87);
        org.joda.time.Instant instant90 = instant85.withMillis((long) 4);
        boolean boolean92 = instant90.isEqual(0L);
        boolean boolean94 = instant90.isBefore(16L);
        boolean boolean95 = mutableDateTime56.isBefore((org.joda.time.ReadableInstant) instant90);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and mutableDateTime83", (instant1.compareTo(mutableDateTime83) == 0) == instant1.equals(mutableDateTime83));
    }

    @Test
    public void test1691() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1691");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(55296000);
        org.joda.time.Instant instant3 = new org.joda.time.Instant(52L);
        boolean boolean4 = instant3.isEqualNow();
        boolean boolean6 = instant3.isEqual(0L);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = null;
        boolean boolean8 = instant3.isSupported(dateTimeFieldType7);
        boolean boolean9 = instant3.isAfterNow();
        org.joda.time.Instant instant11 = new org.joda.time.Instant(52L);
        boolean boolean12 = instant11.isEqualNow();
        org.joda.time.ReadableDuration readableDuration13 = null;
        org.joda.time.Instant instant14 = instant11.plus(readableDuration13);
        long long15 = instant11.getMillis();
        java.lang.String str16 = instant11.toString();
        boolean boolean17 = instant3.isBefore((org.joda.time.ReadableInstant) instant11);
        boolean boolean18 = dateTimeZone1.equals((java.lang.Object) instant11);
        java.util.TimeZone timeZone19 = null;
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forTimeZone(timeZone19);
        org.joda.time.chrono.GJChronology gJChronology21 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone20);
        org.joda.time.DurationField durationField22 = gJChronology21.halfdays();
        org.joda.time.DateTimeField dateTimeField23 = gJChronology21.millisOfDay();
        org.joda.time.DateTimeField dateTimeField24 = gJChronology21.minuteOfDay();
        org.joda.time.DurationField durationField25 = gJChronology21.centuries();
        org.joda.time.DateTimeField dateTimeField26 = gJChronology21.dayOfYear();
        java.lang.String str27 = gJChronology21.toString();
        org.joda.time.DurationField durationField28 = gJChronology21.years();
        org.joda.time.DateTimeField dateTimeField29 = gJChronology21.yearOfEra();
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(0, (int) (short) 10);
        org.joda.time.Chronology chronology33 = gJChronology21.withZone(dateTimeZone32);
        org.joda.time.ReadableInstant readableInstant34 = null;
        int int35 = dateTimeZone32.getOffset(readableInstant34);
        org.joda.time.Instant instant37 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone38 = null;
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.forTimeZone(timeZone38);
        org.joda.time.chrono.GJChronology gJChronology40 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone39);
        org.joda.time.DateTimeField dateTimeField41 = gJChronology40.millisOfSecond();
        int int42 = instant37.get(dateTimeField41);
        org.joda.time.Instant instant44 = instant37.plus(0L);
        org.joda.time.Instant instant45 = instant44.toInstant();
        org.joda.time.Instant instant47 = new org.joda.time.Instant(52L);
        boolean boolean48 = instant47.isEqualNow();
        java.lang.String str49 = instant47.toString();
        java.lang.String str50 = instant47.toString();
        org.joda.time.Instant instant52 = new org.joda.time.Instant(52L);
        boolean boolean53 = instant52.isEqualNow();
        org.joda.time.ReadableDuration readableDuration54 = null;
        org.joda.time.Instant instant55 = instant52.plus(readableDuration54);
        boolean boolean56 = instant47.isBefore((org.joda.time.ReadableInstant) instant55);
        org.joda.time.Instant instant58 = instant47.minus((long) 0);
        int int59 = instant44.compareTo((org.joda.time.ReadableInstant) instant47);
        org.joda.time.Instant instant62 = instant47.withDurationAdded((long) (short) 100, 70);
        org.joda.time.chrono.GJChronology gJChronology63 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone32, (org.joda.time.ReadableInstant) instant62);
        org.joda.time.DateTime dateTime64 = instant62.toDateTimeISO();
        org.joda.time.chrono.GJChronology gJChronology65 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1, (org.joda.time.ReadableInstant) instant62);
        org.joda.time.DateTimeField dateTimeField66 = gJChronology65.dayOfMonth();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant62 and dateTime64", (instant62.compareTo(dateTime64) == 0) == instant62.equals(dateTime64));
    }

    @Test
    public void test1692() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1692");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forTimeZone(timeZone2);
        org.joda.time.chrono.GJChronology gJChronology4 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone3);
        org.joda.time.DateTimeField dateTimeField5 = gJChronology4.millisOfSecond();
        int int6 = instant1.get(dateTimeField5);
        java.util.TimeZone timeZone7 = null;
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forTimeZone(timeZone7);
        org.joda.time.chrono.GJChronology gJChronology9 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone8);
        org.joda.time.DurationField durationField10 = gJChronology9.halfdays();
        java.util.TimeZone timeZone11 = null;
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forTimeZone(timeZone11);
        org.joda.time.chrono.GJChronology gJChronology13 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone12);
        long long17 = dateTimeZone12.convertLocalToUTC((long) (byte) -1, true, 0L);
        boolean boolean19 = dateTimeZone12.equals((java.lang.Object) true);
        org.joda.time.Chronology chronology20 = gJChronology9.withZone(dateTimeZone12);
        org.joda.time.MutableDateTime mutableDateTime21 = instant1.toMutableDateTime(dateTimeZone12);
        boolean boolean22 = mutableDateTime21.isAfterNow();
        java.util.TimeZone timeZone23 = null;
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forTimeZone(timeZone23);
        org.joda.time.chrono.GJChronology gJChronology25 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone24);
        org.joda.time.DurationField durationField26 = gJChronology25.halfdays();
        long long30 = gJChronology25.add((long) 'a', (-1L), (int) (short) 0);
        boolean boolean31 = mutableDateTime21.equals((java.lang.Object) gJChronology25);
        org.joda.time.Instant instant33 = new org.joda.time.Instant(52L);
        boolean boolean34 = instant33.isEqualNow();
        org.joda.time.ReadableDuration readableDuration35 = null;
        org.joda.time.Instant instant36 = instant33.plus(readableDuration35);
        long long37 = instant33.getMillis();
        java.lang.String str38 = instant33.toString();
        boolean boolean40 = instant33.isAfter((long) (-1));
        org.joda.time.Instant instant41 = instant33.toInstant();
        boolean boolean42 = mutableDateTime21.isEqual((org.joda.time.ReadableInstant) instant41);
        org.joda.time.Instant instant43 = instant41.toInstant();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and mutableDateTime21", (instant1.compareTo(mutableDateTime21) == 0) == instant1.equals(mutableDateTime21));
    }

    @Test
    public void test1693() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1693");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        boolean boolean2 = instant1.isEqualNow();
        java.lang.String str3 = instant1.toString();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.MutableDateTime mutableDateTime5 = instant1.toMutableDateTime(chronology4);
        java.util.List<java.util.Locale.LanguageRange> languageRangeList7 = java.util.Locale.LanguageRange.parse("halfdays");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap8 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList9 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList7, strMap8);
        java.util.Locale.LanguageRange[] languageRangeArray10 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList11 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList11, languageRangeArray10);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap13 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList14 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList11, strMap13);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap15 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList16 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList14, strMap15);
        java.util.List<java.util.Locale.LanguageRange> languageRangeList18 = java.util.Locale.LanguageRange.parse("halfdays");
        java.util.Locale locale19 = java.util.Locale.getDefault();
        java.lang.String str20 = locale19.getDisplayLanguage();
        java.util.Locale locale21 = java.util.Locale.CANADA;
        java.lang.String str22 = locale21.getDisplayVariant();
        java.util.Locale locale23 = java.util.Locale.JAPAN;
        java.lang.String str24 = locale23.getCountry();
        java.util.Locale locale25 = java.util.Locale.KOREA;
        java.util.Locale locale26 = java.util.Locale.GERMANY;
        java.util.Locale locale28 = java.util.Locale.forLanguageTag("hi!");
        java.lang.String str29 = locale28.toLanguageTag();
        java.util.Locale locale31 = new java.util.Locale("hi!");
        java.lang.String str32 = locale31.getCountry();
        java.lang.String str33 = locale31.getLanguage();
        java.util.Locale locale35 = java.util.Locale.forLanguageTag("halfdays");
        boolean boolean36 = locale35.hasExtensions();
        java.util.Locale locale37 = java.util.Locale.getDefault();
        java.lang.String str38 = locale37.getISO3Language();
        java.util.Locale locale40 = new java.util.Locale("hi!");
        java.lang.String str41 = locale40.getCountry();
        java.lang.String str42 = locale40.getCountry();
        java.util.Locale locale43 = java.util.Locale.getDefault();
        java.util.Locale locale44 = java.util.Locale.CHINA;
        java.util.Locale locale45 = java.util.Locale.getDefault();
        java.lang.String str46 = locale45.getDisplayName();
        java.lang.String str47 = locale45.getDisplayVariant();
        java.util.Locale locale48 = java.util.Locale.ROOT;
        java.lang.String str49 = locale48.getDisplayScript();
        java.util.Locale locale50 = java.util.Locale.getDefault();
        java.lang.String str51 = locale50.getDisplayName();
        java.util.Locale locale52 = java.util.Locale.CANADA;
        java.lang.String str53 = locale52.getISO3Language();
        java.util.Locale locale54 = java.util.Locale.getDefault();
        java.lang.String str55 = locale54.getDisplayLanguage();
        java.lang.String str56 = locale54.toLanguageTag();
        java.util.Locale locale58 = new java.util.Locale("hi!");
        java.lang.String str59 = locale58.getCountry();
        java.util.Locale locale60 = java.util.Locale.getDefault();
        java.lang.String str61 = locale60.getDisplayName();
        java.lang.String str62 = locale58.getDisplayScript(locale60);
        java.util.Locale locale63 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Locale locale64 = java.util.Locale.JAPAN;
        java.lang.String str65 = locale64.getCountry();
        java.util.Locale locale67 = new java.util.Locale("hi!");
        java.lang.String str68 = locale67.getCountry();
        java.lang.String str69 = locale67.getScript();
        java.util.Locale locale70 = java.util.Locale.CANADA;
        java.lang.String str71 = locale70.getISO3Language();
        java.util.Locale locale72 = java.util.Locale.getDefault();
        java.lang.String str73 = locale72.getDisplayName();
        java.lang.String str74 = locale72.getDisplayVariant();
        java.util.Locale[] localeArray75 = new java.util.Locale[] { locale19, locale21, locale23, locale25, locale26, locale28, locale31, locale35, locale37, locale40, locale43, locale44, locale45, locale48, locale50, locale52, locale54, locale58, locale63, locale64, locale67, locale70, locale72 };
        java.util.ArrayList<java.util.Locale> localeList76 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean77 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList76, localeArray75);
        java.util.Locale locale78 = java.util.Locale.lookup(languageRangeList18, (java.util.Collection<java.util.Locale>) localeList76);
        java.util.Locale locale79 = java.util.Locale.lookup(languageRangeList16, (java.util.Collection<java.util.Locale>) localeList76);
        java.util.Locale locale80 = java.util.Locale.lookup(languageRangeList7, (java.util.Collection<java.util.Locale>) localeList76);
        java.util.Set<java.lang.String> strSet81 = locale80.getUnicodeLocaleAttributes();
        boolean boolean82 = mutableDateTime5.equals((java.lang.Object) locale80);
        java.lang.String str83 = locale80.getVariant();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and mutableDateTime5", (instant1.compareTo(mutableDateTime5) == 0) == instant1.equals(mutableDateTime5));
    }

    @Test
    public void test1694() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1694");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        boolean boolean2 = instant1.isEqualNow();
        org.joda.time.ReadableDuration readableDuration3 = null;
        org.joda.time.Instant instant4 = instant1.plus(readableDuration3);
        long long5 = instant1.getMillis();
        java.lang.Object obj6 = null;
        boolean boolean7 = instant1.equals(obj6);
        java.util.TimeZone timeZone8 = null;
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forTimeZone(timeZone8);
        java.lang.String str11 = dateTimeZone9.getNameKey((long) 100);
        boolean boolean12 = dateTimeZone9.isFixed();
        org.joda.time.chrono.GJChronology gJChronology13 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone9);
        long long15 = dateTimeZone9.convertUTCToLocal(5200L);
        org.joda.time.chrono.GJChronology gJChronology16 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone9);
        java.lang.String str18 = dateTimeZone9.getName(5983L);
        java.util.TimeZone timeZone19 = dateTimeZone9.toTimeZone();
        org.joda.time.MutableDateTime mutableDateTime20 = instant1.toMutableDateTime(dateTimeZone9);
        java.lang.String str21 = dateTimeZone9.getID();
        java.util.Locale locale23 = java.util.Locale.ITALIAN;
        java.util.Locale locale24 = locale23.stripExtensions();
        java.util.Locale locale25 = java.util.Locale.CANADA;
        java.lang.String str26 = locale23.getDisplayVariant(locale25);
        java.util.Locale locale27 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale28 = java.util.Locale.ENGLISH;
        java.lang.String str29 = locale27.getDisplayLanguage(locale28);
        java.util.Locale locale30 = java.util.Locale.CANADA;
        java.lang.String str31 = locale30.getISO3Language();
        java.lang.String str32 = locale27.getDisplayVariant(locale30);
        java.lang.String str33 = locale27.getDisplayName();
        java.lang.String str34 = locale25.getDisplayCountry(locale27);
        java.util.Locale.Builder builder35 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder36 = builder35.clear();
        java.util.Locale.Builder builder38 = builder36.removeUnicodeLocaleAttribute("und");
        java.util.Locale.Builder builder39 = builder38.clearExtensions();
        java.util.Locale.Builder builder40 = builder39.clearExtensions();
        java.util.Locale locale41 = java.util.Locale.ENGLISH;
        java.lang.String str43 = locale41.getUnicodeLocaleType("zh");
        java.lang.String str45 = locale41.getExtension('a');
        java.util.Locale locale47 = new java.util.Locale("hi!");
        java.lang.String str48 = locale47.getVariant();
        java.util.Locale locale50 = java.util.Locale.forLanguageTag("hi!");
        java.lang.String str51 = locale50.toLanguageTag();
        java.lang.String str52 = locale47.getDisplayName(locale50);
        java.util.Locale locale53 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale54 = java.util.Locale.ENGLISH;
        java.lang.String str55 = locale53.getDisplayLanguage(locale54);
        java.util.Locale locale56 = java.util.Locale.CANADA;
        java.lang.String str57 = locale56.getISO3Language();
        java.lang.String str58 = locale53.getDisplayVariant(locale56);
        java.lang.String str59 = locale50.getDisplayCountry(locale56);
        java.util.Set<java.lang.String> strSet60 = locale50.getUnicodeLocaleAttributes();
        java.lang.String str61 = locale41.getDisplayLanguage(locale50);
        java.util.Locale.Builder builder62 = builder39.setLocale(locale41);
        java.lang.String str63 = locale27.getDisplayLanguage(locale41);
        java.lang.String str64 = dateTimeZone9.getShortName((-311284872043881L), locale27);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and mutableDateTime20", (instant1.compareTo(mutableDateTime20) == 0) == instant1.equals(mutableDateTime20));
    }

    @Test
    public void test1695() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1695");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forTimeZone(timeZone2);
        org.joda.time.chrono.GJChronology gJChronology4 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone3);
        org.joda.time.DateTimeField dateTimeField5 = gJChronology4.millisOfSecond();
        int int6 = instant1.get(dateTimeField5);
        boolean boolean7 = instant1.isEqualNow();
        org.joda.time.DateTime dateTime8 = instant1.toDateTime();
        org.joda.time.Instant instant11 = instant1.withDurationAdded((long) 1431201, 1970);
        org.joda.time.Instant instant13 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone14 = null;
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forTimeZone(timeZone14);
        org.joda.time.chrono.GJChronology gJChronology16 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone15);
        org.joda.time.DateTimeField dateTimeField17 = gJChronology16.millisOfSecond();
        int int18 = instant13.get(dateTimeField17);
        org.joda.time.Instant instant20 = instant13.plus(0L);
        long long21 = instant20.getMillis();
        org.joda.time.Instant instant24 = instant20.withDurationAdded((long) 12, 97);
        org.joda.time.DateTimeZone dateTimeZone25 = instant24.getZone();
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = null;
        boolean boolean27 = instant24.isSupported(dateTimeFieldType26);
        boolean boolean28 = instant11.isEqual((org.joda.time.ReadableInstant) instant24);
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) ' ', 0);
        java.util.TimeZone timeZone32 = null;
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.forTimeZone(timeZone32);
        org.joda.time.chrono.GJChronology gJChronology34 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone33);
        org.joda.time.DateTimeField dateTimeField35 = gJChronology34.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField36 = gJChronology34.weekyear();
        org.joda.time.DateTimeField dateTimeField37 = gJChronology34.halfdayOfDay();
        org.joda.time.DurationField durationField38 = gJChronology34.years();
        org.joda.time.DurationField durationField39 = gJChronology34.minutes();
        java.util.TimeZone timeZone40 = null;
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.forTimeZone(timeZone40);
        java.lang.String str43 = dateTimeZone41.getNameKey((long) 100);
        boolean boolean44 = dateTimeZone41.isFixed();
        org.joda.time.chrono.GJChronology gJChronology45 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone41);
        int int46 = gJChronology45.getMinimumDaysInFirstWeek();
        java.lang.String str47 = gJChronology45.toString();
        org.joda.time.DateTimeField dateTimeField48 = gJChronology45.yearOfEra();
        org.joda.time.DateTimeField dateTimeField49 = gJChronology45.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField50 = gJChronology45.dayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone51 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology52 = gJChronology45.withZone(dateTimeZone51);
        org.joda.time.Chronology chronology53 = gJChronology34.withZone(dateTimeZone51);
        long long55 = dateTimeZone31.getMillisKeepLocal(dateTimeZone51, 2764800000L);
        org.joda.time.DateTime dateTime56 = instant24.toDateTime(dateTimeZone51);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and dateTime8", (instant1.compareTo(dateTime8) == 0) == instant1.equals(dateTime8));
    }

    @Test
    public void test1696() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1696");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField3 = gJChronology2.millisOfSecond();
        org.joda.time.DurationField durationField4 = gJChronology2.millis();
        org.joda.time.DateTimeZone dateTimeZone5 = gJChronology2.getZone();
        org.joda.time.Instant instant7 = new org.joda.time.Instant(52L);
        boolean boolean8 = instant7.isEqualNow();
        org.joda.time.ReadableDuration readableDuration9 = null;
        org.joda.time.Instant instant10 = instant7.plus(readableDuration9);
        long long11 = instant7.getMillis();
        java.lang.Object obj12 = null;
        boolean boolean13 = instant7.equals(obj12);
        org.joda.time.DateTime dateTime14 = instant7.toDateTime();
        int int15 = dateTimeZone5.getOffset((org.joda.time.ReadableInstant) dateTime14);
        long long17 = dateTimeZone5.convertUTCToLocal((long) (-7));
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant7 and dateTime14", (instant7.compareTo(dateTime14) == 0) == instant7.equals(dateTime14));
    }

    @Test
    public void test1697() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1697");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = gJChronology2.halfdays();
        long long7 = gJChronology2.add((long) 'a', (-1L), (int) (short) 0);
        boolean boolean9 = gJChronology2.equals((java.lang.Object) 0);
        org.joda.time.DateTimeField dateTimeField10 = gJChronology2.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField11 = gJChronology2.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField12 = gJChronology2.clockhourOfDay();
        long long17 = gJChronology2.getDateTimeMillis(10, (int) (short) 10, 4, (int) (byte) 1);
        org.joda.time.DateTimeField dateTimeField18 = gJChronology2.millisOfDay();
        java.lang.String str19 = gJChronology2.toString();
        org.joda.time.DateTimeField dateTimeField20 = gJChronology2.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField21 = gJChronology2.centuryOfEra();
        long long25 = gJChronology2.add(0L, 10L, 100);
        org.joda.time.Instant instant26 = new org.joda.time.Instant((java.lang.Object) 0L);
        java.util.Date date27 = instant26.toDate();
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(1, 10);
        java.util.TimeZone timeZone31 = null;
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.forTimeZone(timeZone31);
        long long34 = dateTimeZone30.getMillisKeepLocal(dateTimeZone32, 4320000000L);
        org.joda.time.Instant instant36 = new org.joda.time.Instant(52L);
        boolean boolean37 = instant36.isEqualNow();
        org.joda.time.ReadableDuration readableDuration38 = null;
        org.joda.time.Instant instant39 = instant36.plus(readableDuration38);
        long long40 = instant36.getMillis();
        java.lang.String str41 = instant36.toString();
        org.joda.time.Instant instant42 = instant36.toInstant();
        org.joda.time.ReadableDuration readableDuration43 = null;
        org.joda.time.Instant instant45 = instant36.withDurationAdded(readableDuration43, (int) 'x');
        org.joda.time.Instant instant46 = instant36.toInstant();
        int int47 = dateTimeZone30.getOffset((org.joda.time.ReadableInstant) instant36);
        org.joda.time.ReadableDuration readableDuration48 = null;
        org.joda.time.Instant instant50 = instant36.withDurationAdded(readableDuration48, 1582);
        boolean boolean51 = instant26.isBefore((org.joda.time.ReadableInstant) instant50);
        java.util.TimeZone timeZone52 = null;
        org.joda.time.DateTimeZone dateTimeZone53 = org.joda.time.DateTimeZone.forTimeZone(timeZone52);
        org.joda.time.chrono.GJChronology gJChronology54 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone53);
        org.joda.time.DurationField durationField55 = gJChronology54.halfdays();
        long long59 = gJChronology54.add((long) 'a', (-1L), (int) (short) 0);
        org.joda.time.DateTimeField dateTimeField60 = gJChronology54.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField61 = gJChronology54.secondOfMinute();
        org.joda.time.Instant instant63 = new org.joda.time.Instant(52L);
        boolean boolean64 = instant63.isEqualNow();
        org.joda.time.ReadableDuration readableDuration65 = null;
        org.joda.time.Instant instant66 = instant63.plus(readableDuration65);
        boolean boolean67 = gJChronology54.equals((java.lang.Object) instant63);
        java.util.Date date68 = instant63.toDate();
        org.joda.time.MutableDateTime mutableDateTime69 = instant63.toMutableDateTime();
        boolean boolean70 = instant26.isBefore((org.joda.time.ReadableInstant) instant63);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant36 and mutableDateTime69", (instant36.compareTo(mutableDateTime69) == 0) == instant36.equals(mutableDateTime69));
    }

    @Test
    public void test1698() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1698");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = gJChronology2.halfdays();
        long long7 = gJChronology2.add((long) 'a', (-1L), (int) (short) 0);
        boolean boolean9 = gJChronology2.equals((java.lang.Object) 0);
        org.joda.time.DateTimeField dateTimeField10 = gJChronology2.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField11 = gJChronology2.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField12 = gJChronology2.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField13 = gJChronology2.clockhourOfHalfday();
        org.joda.time.DurationField durationField14 = gJChronology2.halfdays();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology2.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField16 = gJChronology2.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField17 = gJChronology2.weekyearOfCentury();
        java.util.TimeZone timeZone18 = null;
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forTimeZone(timeZone18);
        org.joda.time.chrono.GJChronology gJChronology20 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone19);
        org.joda.time.DurationField durationField21 = gJChronology20.halfdays();
        org.joda.time.DateTimeField dateTimeField22 = gJChronology20.millisOfDay();
        org.joda.time.DateTimeField dateTimeField23 = gJChronology20.minuteOfDay();
        org.joda.time.DurationField durationField24 = gJChronology20.centuries();
        org.joda.time.DateTimeField dateTimeField25 = gJChronology20.yearOfEra();
        boolean boolean26 = gJChronology2.equals((java.lang.Object) gJChronology20);
        org.joda.time.Chronology chronology27 = gJChronology20.withUTC();
        org.joda.time.DateTimeField dateTimeField28 = gJChronology20.dayOfMonth();
        org.joda.time.DurationField durationField29 = gJChronology20.eras();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField29, durationField3, and durationField24", !(durationField29.compareTo(durationField3) == 0) || (Math.signum(durationField29.compareTo(durationField24)) == Math.signum(durationField3.compareTo(durationField24))));
    }

    @Test
    public void test1699() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1699");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = gJChronology2.halfdays();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.millisOfDay();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.minuteOfDay();
        org.joda.time.DurationField durationField6 = gJChronology2.centuries();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology2.dayOfYear();
        java.lang.String str8 = gJChronology2.toString();
        org.joda.time.DateTimeField dateTimeField9 = gJChronology2.dayOfYear();
        org.joda.time.DateTimeField dateTimeField10 = gJChronology2.dayOfMonth();
        org.joda.time.DurationField durationField11 = gJChronology2.years();
        org.joda.time.DateTimeField dateTimeField12 = gJChronology2.minuteOfHour();
        org.joda.time.DurationField durationField13 = gJChronology2.halfdays();
        org.joda.time.DateTimeField dateTimeField14 = gJChronology2.yearOfCentury();
        java.util.TimeZone timeZone15 = null;
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forTimeZone(timeZone15);
        org.joda.time.chrono.GJChronology gJChronology17 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone16);
        long long21 = dateTimeZone16.convertLocalToUTC((long) (byte) -1, true, 0L);
        boolean boolean23 = dateTimeZone16.equals((java.lang.Object) true);
        org.joda.time.chrono.GJChronology gJChronology24 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone16);
        org.joda.time.DateTimeField dateTimeField25 = gJChronology24.weekyear();
        org.joda.time.DateTimeField dateTimeField26 = gJChronology24.era();
        org.joda.time.DateTimeZone dateTimeZone27 = gJChronology24.getZone();
        org.joda.time.Chronology chronology28 = gJChronology2.withZone(dateTimeZone27);
        org.joda.time.DateTimeZone dateTimeZone29 = gJChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField30 = gJChronology2.clockhourOfHalfday();
        org.joda.time.DurationField durationField31 = gJChronology2.weekyears();
        java.util.TimeZone timeZone32 = null;
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.forTimeZone(timeZone32);
        org.joda.time.chrono.GJChronology gJChronology34 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone33);
        org.joda.time.DurationField durationField35 = gJChronology34.halfdays();
        org.joda.time.DateTimeField dateTimeField36 = gJChronology34.millisOfDay();
        org.joda.time.DateTimeField dateTimeField37 = gJChronology34.minuteOfDay();
        org.joda.time.DurationField durationField38 = gJChronology34.centuries();
        org.joda.time.DateTimeField dateTimeField39 = gJChronology34.halfdayOfDay();
        java.util.Locale locale40 = java.util.Locale.ITALIAN;
        java.util.Locale locale41 = locale40.stripExtensions();
        java.util.Locale locale42 = java.util.Locale.CANADA;
        java.lang.String str43 = locale40.getDisplayVariant(locale42);
        boolean boolean44 = gJChronology34.equals((java.lang.Object) locale42);
        org.joda.time.Instant instant45 = gJChronology34.getGregorianCutover();
        org.joda.time.DateTimeField dateTimeField46 = gJChronology34.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField47 = gJChronology34.yearOfCentury();
        boolean boolean48 = gJChronology2.equals((java.lang.Object) gJChronology34);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on durationField11 and durationField31", (durationField11.compareTo(durationField31) == 0) == durationField11.equals(durationField31));
    }

    @Test
    public void test1700() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1700");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField3 = gJChronology2.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.weekyearOfCentury();
        org.joda.time.Instant instant5 = gJChronology2.getGregorianCutover();
        org.joda.time.Instant instant7 = instant5.withMillis(0L);
        org.joda.time.Instant instant9 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone10 = null;
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forTimeZone(timeZone10);
        org.joda.time.chrono.GJChronology gJChronology12 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone11);
        org.joda.time.DateTimeField dateTimeField13 = gJChronology12.millisOfSecond();
        int int14 = instant9.get(dateTimeField13);
        org.joda.time.Instant instant16 = instant9.plus(0L);
        int int17 = instant7.compareTo((org.joda.time.ReadableInstant) instant16);
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = null;
        boolean boolean19 = instant16.isSupported(dateTimeFieldType18);
        org.joda.time.Instant instant21 = instant16.minus((long) (short) 10);
        org.joda.time.ReadableDuration readableDuration22 = null;
        org.joda.time.Instant instant23 = instant21.minus(readableDuration22);
        java.util.TimeZone timeZone24 = null;
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forTimeZone(timeZone24);
        java.lang.String str27 = dateTimeZone25.getNameKey((long) 100);
        org.joda.time.MutableDateTime mutableDateTime28 = instant21.toMutableDateTime(dateTimeZone25);
        long long32 = dateTimeZone25.convertLocalToUTC(17296799948L, false, (-132541887340800000L));
        org.joda.time.LocalDateTime localDateTime33 = null;
        boolean boolean34 = dateTimeZone25.isLocalDateTimeGap(localDateTime33);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant21 and mutableDateTime28", (instant21.compareTo(mutableDateTime28) == 0) == instant21.equals(mutableDateTime28));
    }

    @Test
    public void test1701() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1701");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forTimeZone(timeZone2);
        org.joda.time.chrono.GJChronology gJChronology4 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone3);
        org.joda.time.DateTimeField dateTimeField5 = gJChronology4.millisOfSecond();
        int int6 = instant1.get(dateTimeField5);
        org.joda.time.Instant instant8 = instant1.plus(0L);
        org.joda.time.Instant instant9 = instant8.toInstant();
        org.joda.time.Instant instant11 = new org.joda.time.Instant(52L);
        boolean boolean12 = instant11.isEqualNow();
        java.lang.String str13 = instant11.toString();
        java.lang.String str14 = instant11.toString();
        org.joda.time.Instant instant16 = new org.joda.time.Instant(52L);
        boolean boolean17 = instant16.isEqualNow();
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.Instant instant19 = instant16.plus(readableDuration18);
        boolean boolean20 = instant11.isBefore((org.joda.time.ReadableInstant) instant19);
        org.joda.time.Instant instant22 = instant11.minus((long) 0);
        int int23 = instant8.compareTo((org.joda.time.ReadableInstant) instant11);
        org.joda.time.Instant instant26 = instant11.withDurationAdded((long) (short) 100, 70);
        org.joda.time.ReadableDuration readableDuration27 = null;
        org.joda.time.Instant instant28 = instant11.minus(readableDuration27);
        java.util.TimeZone timeZone29 = null;
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forTimeZone(timeZone29);
        java.lang.String str32 = dateTimeZone30.getNameKey((long) 100);
        boolean boolean33 = dateTimeZone30.isFixed();
        java.util.Locale locale37 = new java.util.Locale("DurationField[halfdays]", "\u82f1\u6587");
        java.lang.String str38 = dateTimeZone30.getName((long) (short) 10, locale37);
        org.joda.time.Instant instant40 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone41 = null;
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.forTimeZone(timeZone41);
        org.joda.time.chrono.GJChronology gJChronology43 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone42);
        org.joda.time.DateTimeField dateTimeField44 = gJChronology43.millisOfSecond();
        int int45 = instant40.get(dateTimeField44);
        org.joda.time.Chronology chronology46 = instant40.getChronology();
        org.joda.time.chrono.GJChronology gJChronology47 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone30, (org.joda.time.ReadableInstant) instant40);
        long long48 = instant40.getMillis();
        org.joda.time.ReadableDuration readableDuration49 = null;
        org.joda.time.Instant instant50 = instant40.minus(readableDuration49);
        java.lang.String str51 = instant40.toString();
        org.joda.time.Instant instant53 = instant40.withMillis(3155760000000L);
        boolean boolean54 = instant28.isAfter((org.joda.time.ReadableInstant) instant53);
        org.joda.time.Chronology chronology55 = instant53.getChronology();
        org.joda.time.MutableDateTime mutableDateTime56 = instant53.toMutableDateTimeISO();
        boolean boolean58 = instant53.isBefore((long) (byte) -1);
        boolean boolean59 = instant53.isEqualNow();
        long long60 = instant53.getMillis();
        boolean boolean62 = instant53.isEqual((-6893400000L));
        java.util.TimeZone timeZone63 = null;
        org.joda.time.DateTimeZone dateTimeZone64 = org.joda.time.DateTimeZone.forTimeZone(timeZone63);
        java.lang.String str66 = dateTimeZone64.getNameKey((long) 100);
        boolean boolean67 = dateTimeZone64.isFixed();
        org.joda.time.chrono.GJChronology gJChronology68 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone64);
        int int69 = gJChronology68.getMinimumDaysInFirstWeek();
        java.lang.String str70 = gJChronology68.toString();
        org.joda.time.DateTimeField dateTimeField71 = gJChronology68.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField72 = gJChronology68.hourOfHalfday();
        org.joda.time.MutableDateTime mutableDateTime73 = instant53.toMutableDateTime((org.joda.time.Chronology) gJChronology68);
        java.lang.String str74 = mutableDateTime73.toString();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant53 and mutableDateTime56", (instant53.compareTo(mutableDateTime56) == 0) == instant53.equals(mutableDateTime56));
    }

    @Test
    public void test1702() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1702");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField3 = gJChronology2.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.weekyearOfCentury();
        org.joda.time.Instant instant5 = gJChronology2.getGregorianCutover();
        org.joda.time.Instant instant7 = instant5.withMillis(0L);
        org.joda.time.Instant instant9 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone10 = null;
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forTimeZone(timeZone10);
        org.joda.time.chrono.GJChronology gJChronology12 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone11);
        org.joda.time.DateTimeField dateTimeField13 = gJChronology12.millisOfSecond();
        int int14 = instant9.get(dateTimeField13);
        org.joda.time.Instant instant16 = instant9.plus(0L);
        int int17 = instant7.compareTo((org.joda.time.ReadableInstant) instant16);
        org.joda.time.Instant instant19 = new org.joda.time.Instant(52L);
        boolean boolean20 = instant19.isEqualNow();
        org.joda.time.ReadableDuration readableDuration21 = null;
        org.joda.time.Instant instant22 = instant19.plus(readableDuration21);
        boolean boolean24 = instant22.equals((java.lang.Object) ' ');
        boolean boolean25 = instant16.isEqual((org.joda.time.ReadableInstant) instant22);
        java.lang.String str26 = instant16.toString();
        org.joda.time.Instant instant27 = new org.joda.time.Instant((java.lang.Object) str26);
        org.joda.time.Instant instant29 = instant27.plus(3692163384000L);
        boolean boolean30 = instant29.isBeforeNow();
        java.util.Date date31 = instant29.toDate();
        boolean boolean33 = instant29.isAfter(230523534360000000L);
        org.joda.time.Instant instant36 = instant29.withDurationAdded((-85477377L), 33000052);
        org.joda.time.DateTimeZone dateTimeZone37 = null;
        org.joda.time.MutableDateTime mutableDateTime38 = instant36.toMutableDateTime(dateTimeZone37);
        org.joda.time.Instant instant41 = instant36.withDurationAdded((long) (-25), 7200);
        org.joda.time.ReadableDuration readableDuration42 = null;
        org.joda.time.Instant instant43 = instant36.minus(readableDuration42);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter44 = null;
        java.lang.String str45 = instant43.toString(dateTimeFormatter44);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant43 and mutableDateTime38", (instant43.compareTo(mutableDateTime38) == 0) == instant43.equals(mutableDateTime38));
    }

    @Test
    public void test1703() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1703");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forTimeZone(timeZone2);
        org.joda.time.chrono.GJChronology gJChronology4 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone3);
        org.joda.time.DateTimeField dateTimeField5 = gJChronology4.millisOfSecond();
        int int6 = instant1.get(dateTimeField5);
        org.joda.time.Instant instant8 = instant1.plus(0L);
        java.util.TimeZone timeZone9 = null;
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forTimeZone(timeZone9);
        org.joda.time.chrono.GJChronology gJChronology11 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone10);
        org.joda.time.DurationField durationField12 = gJChronology11.halfdays();
        org.joda.time.Chronology chronology13 = gJChronology11.withUTC();
        java.lang.String str14 = gJChronology11.toString();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology11.hourOfHalfday();
        int int16 = instant1.get(dateTimeField15);
        org.joda.time.Instant instant18 = new org.joda.time.Instant(52L);
        boolean boolean19 = instant18.isEqualNow();
        org.joda.time.ReadableDuration readableDuration20 = null;
        org.joda.time.Instant instant21 = instant18.plus(readableDuration20);
        org.joda.time.Instant instant23 = new org.joda.time.Instant(52L);
        org.joda.time.Instant instant25 = instant23.withMillis((long) 'u');
        boolean boolean26 = instant18.isBefore((org.joda.time.ReadableInstant) instant23);
        boolean boolean27 = instant1.isEqual((org.joda.time.ReadableInstant) instant23);
        org.joda.time.Instant instant29 = instant1.plus(3732480000000000L);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter30 = null;
        java.lang.String str31 = instant29.toString(dateTimeFormatter30);
        org.joda.time.MutableDateTime mutableDateTime32 = instant29.toMutableDateTime();
        org.joda.time.Instant instant33 = instant29.toInstant();
        java.util.TimeZone timeZone34 = null;
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.forTimeZone(timeZone34);
        org.joda.time.chrono.GJChronology gJChronology36 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone35);
        org.joda.time.DateTimeField dateTimeField37 = gJChronology36.millisOfSecond();
        org.joda.time.DurationField durationField38 = gJChronology36.millis();
        org.joda.time.DurationField durationField39 = gJChronology36.weeks();
        org.joda.time.DurationField durationField40 = gJChronology36.days();
        org.joda.time.DateTimeField dateTimeField41 = gJChronology36.year();
        org.joda.time.DateTimeField dateTimeField42 = gJChronology36.millisOfDay();
        org.joda.time.DateTimeField dateTimeField43 = gJChronology36.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField44 = gJChronology36.dayOfWeek();
        org.joda.time.DurationField durationField45 = gJChronology36.minutes();
        boolean boolean46 = instant29.equals((java.lang.Object) gJChronology36);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime32 and instant29", (mutableDateTime32.compareTo(instant29) == 0) == mutableDateTime32.equals(instant29));
    }

    @Test
    public void test1704() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1704");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField3 = gJChronology2.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.weekyear();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology2.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology2.weekyearOfCentury();
        org.joda.time.Instant instant8 = gJChronology2.getGregorianCutover();
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = null;
        boolean boolean10 = instant8.isSupported(dateTimeFieldType9);
        org.joda.time.Instant instant12 = new org.joda.time.Instant(3155760000000L);
        org.joda.time.Instant instant13 = instant12.toInstant();
        boolean boolean14 = instant13.isEqualNow();
        org.joda.time.Instant instant16 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone17 = null;
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forTimeZone(timeZone17);
        org.joda.time.chrono.GJChronology gJChronology19 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone18);
        org.joda.time.DateTimeField dateTimeField20 = gJChronology19.millisOfSecond();
        int int21 = instant16.get(dateTimeField20);
        org.joda.time.Instant instant23 = instant16.plus(0L);
        org.joda.time.Instant instant24 = instant23.toInstant();
        org.joda.time.Instant instant26 = new org.joda.time.Instant(52L);
        boolean boolean27 = instant26.isEqualNow();
        java.lang.String str28 = instant26.toString();
        java.lang.String str29 = instant26.toString();
        org.joda.time.Instant instant31 = new org.joda.time.Instant(52L);
        boolean boolean32 = instant31.isEqualNow();
        org.joda.time.ReadableDuration readableDuration33 = null;
        org.joda.time.Instant instant34 = instant31.plus(readableDuration33);
        boolean boolean35 = instant26.isBefore((org.joda.time.ReadableInstant) instant34);
        org.joda.time.Instant instant37 = instant26.minus((long) 0);
        int int38 = instant23.compareTo((org.joda.time.ReadableInstant) instant26);
        org.joda.time.Instant instant41 = instant23.withDurationAdded((long) 432086114, 97);
        org.joda.time.MutableDateTime mutableDateTime42 = instant41.toMutableDateTime();
        org.joda.time.Instant instant44 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone45 = null;
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.forTimeZone(timeZone45);
        org.joda.time.chrono.GJChronology gJChronology47 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone46);
        org.joda.time.DateTimeField dateTimeField48 = gJChronology47.millisOfSecond();
        int int49 = instant44.get(dateTimeField48);
        boolean boolean50 = instant44.isEqualNow();
        org.joda.time.DateTime dateTime51 = instant44.toDateTime();
        boolean boolean52 = mutableDateTime42.isAfter((org.joda.time.ReadableInstant) dateTime51);
        boolean boolean53 = instant13.isAfter((org.joda.time.ReadableInstant) dateTime51);
        java.util.TimeZone timeZone54 = null;
        org.joda.time.DateTimeZone dateTimeZone55 = org.joda.time.DateTimeZone.forTimeZone(timeZone54);
        org.joda.time.chrono.GJChronology gJChronology56 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone55);
        org.joda.time.DateTimeField dateTimeField57 = gJChronology56.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField58 = gJChronology56.weekyearOfCentury();
        org.joda.time.Instant instant59 = gJChronology56.getGregorianCutover();
        org.joda.time.Instant instant61 = instant59.withMillis(0L);
        org.joda.time.Instant instant63 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone64 = null;
        org.joda.time.DateTimeZone dateTimeZone65 = org.joda.time.DateTimeZone.forTimeZone(timeZone64);
        org.joda.time.chrono.GJChronology gJChronology66 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone65);
        org.joda.time.DateTimeField dateTimeField67 = gJChronology66.millisOfSecond();
        int int68 = instant63.get(dateTimeField67);
        org.joda.time.Instant instant70 = instant63.plus(0L);
        int int71 = instant61.compareTo((org.joda.time.ReadableInstant) instant70);
        org.joda.time.Instant instant73 = new org.joda.time.Instant(52L);
        boolean boolean74 = instant73.isEqualNow();
        org.joda.time.ReadableDuration readableDuration75 = null;
        org.joda.time.Instant instant76 = instant73.plus(readableDuration75);
        boolean boolean78 = instant76.equals((java.lang.Object) ' ');
        boolean boolean79 = instant70.isEqual((org.joda.time.ReadableInstant) instant76);
        boolean boolean80 = dateTime51.isAfter((org.joda.time.ReadableInstant) instant76);
        int int81 = instant8.compareTo((org.joda.time.ReadableInstant) instant76);
        org.joda.time.Instant instant83 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone84 = null;
        org.joda.time.DateTimeZone dateTimeZone85 = org.joda.time.DateTimeZone.forTimeZone(timeZone84);
        org.joda.time.chrono.GJChronology gJChronology86 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone85);
        org.joda.time.DateTimeField dateTimeField87 = gJChronology86.millisOfSecond();
        int int88 = instant83.get(dateTimeField87);
        org.joda.time.Chronology chronology89 = instant83.getChronology();
        org.joda.time.Instant instant91 = instant83.withMillis((-24192000000000L));
        org.joda.time.MutableDateTime mutableDateTime92 = instant83.toMutableDateTimeISO();
        long long93 = mutableDateTime92.getMillis();
        org.joda.time.Instant instant94 = mutableDateTime92.toInstant();
        long long95 = mutableDateTime92.getMillis();
        boolean boolean96 = instant76.isAfter((org.joda.time.ReadableInstant) mutableDateTime92);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant16 and dateTime51", (instant16.compareTo(dateTime51) == 0) == instant16.equals(dateTime51));
    }

    @Test
    public void test1705() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1705");
        org.joda.time.Instant instant0 = org.joda.time.Instant.now();
        java.util.TimeZone timeZone1 = null;
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forTimeZone(timeZone1);
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone2);
        org.joda.time.DurationField durationField4 = gJChronology3.halfdays();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology3.millisOfDay();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology3.halfdayOfDay();
        int int7 = instant0.get(dateTimeField6);
        org.joda.time.Instant instant9 = instant0.minus(4156171L);
        boolean boolean11 = instant9.isAfter((-1000L));
        org.joda.time.Instant instant13 = instant9.plus(1247262110179199981L);
        org.joda.time.DateTime dateTime14 = instant13.toDateTime();
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.Instant instant17 = instant13.withDurationAdded(readableDuration15, 0);
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.Instant instant20 = instant17.withDurationAdded(readableDuration18, (-16799));
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant20 and dateTime14", (instant20.compareTo(dateTime14) == 0) == instant20.equals(dateTime14));
    }

    @Test
    public void test1706() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1706");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        boolean boolean2 = instant1.isEqualNow();
        java.lang.String str3 = instant1.toString();
        java.lang.String str4 = instant1.toString();
        org.joda.time.Instant instant6 = new org.joda.time.Instant(52L);
        boolean boolean7 = instant6.isEqualNow();
        java.lang.String str8 = instant6.toString();
        java.lang.String str9 = instant6.toString();
        org.joda.time.Instant instant12 = instant6.withDurationAdded(115200000L, (int) (short) 1);
        boolean boolean13 = instant12.isBeforeNow();
        boolean boolean14 = instant1.isBefore((org.joda.time.ReadableInstant) instant12);
        org.joda.time.Instant instant16 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone17 = null;
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forTimeZone(timeZone17);
        org.joda.time.chrono.GJChronology gJChronology19 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone18);
        org.joda.time.DateTimeField dateTimeField20 = gJChronology19.millisOfSecond();
        int int21 = instant16.get(dateTimeField20);
        org.joda.time.Instant instant23 = instant16.plus(0L);
        org.joda.time.Instant instant24 = instant23.toInstant();
        org.joda.time.Instant instant26 = new org.joda.time.Instant(52L);
        boolean boolean27 = instant26.isEqualNow();
        java.lang.String str28 = instant26.toString();
        java.lang.String str29 = instant26.toString();
        org.joda.time.Instant instant31 = new org.joda.time.Instant(52L);
        boolean boolean32 = instant31.isEqualNow();
        org.joda.time.ReadableDuration readableDuration33 = null;
        org.joda.time.Instant instant34 = instant31.plus(readableDuration33);
        boolean boolean35 = instant26.isBefore((org.joda.time.ReadableInstant) instant34);
        org.joda.time.Instant instant37 = instant26.minus((long) 0);
        int int38 = instant23.compareTo((org.joda.time.ReadableInstant) instant26);
        org.joda.time.Instant instant41 = instant26.withDurationAdded((long) (short) 100, 70);
        java.util.TimeZone timeZone42 = null;
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.forTimeZone(timeZone42);
        org.joda.time.chrono.GJChronology gJChronology44 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone43);
        int int46 = dateTimeZone43.getOffsetFromLocal(1000L);
        org.joda.time.MutableDateTime mutableDateTime47 = instant41.toMutableDateTime(dateTimeZone43);
        boolean boolean48 = instant1.isAfter((org.joda.time.ReadableInstant) mutableDateTime47);
        java.util.Date date49 = instant1.toDate();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant41 and mutableDateTime47", (instant41.compareTo(mutableDateTime47) == 0) == instant41.equals(mutableDateTime47));
    }

    @Test
    public void test1707() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1707");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = gJChronology2.halfdays();
        long long7 = gJChronology2.add((long) 'a', (-1L), (int) (short) 0);
        boolean boolean9 = gJChronology2.equals((java.lang.Object) 0);
        org.joda.time.DateTimeField dateTimeField10 = gJChronology2.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField11 = gJChronology2.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField12 = gJChronology2.clockhourOfDay();
        long long17 = gJChronology2.getDateTimeMillis(10, (int) (short) 10, 4, (int) (byte) 1);
        org.joda.time.Chronology chronology18 = gJChronology2.withUTC();
        org.joda.time.DurationField durationField19 = chronology18.halfdays();
        org.joda.time.DurationField durationField20 = chronology18.days();
        long long22 = durationField20.getMillis(31298400000L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on durationField3 and durationField19", (durationField3.compareTo(durationField19) == 0) == durationField3.equals(durationField19));
    }

    @Test
    public void test1708() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1708");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        boolean boolean2 = instant1.isEqualNow();
        java.lang.String str3 = instant1.toString();
        java.lang.String str4 = instant1.toString();
        org.joda.time.Instant instant7 = instant1.withDurationAdded(115200000L, (int) (short) 1);
        org.joda.time.Instant instant9 = instant1.plus((long) (short) 100);
        org.joda.time.Instant instant11 = new org.joda.time.Instant(52L);
        boolean boolean12 = instant11.isEqualNow();
        org.joda.time.ReadableDuration readableDuration13 = null;
        org.joda.time.Instant instant14 = instant11.plus(readableDuration13);
        boolean boolean16 = instant14.equals((java.lang.Object) ' ');
        org.joda.time.Instant instant18 = instant14.plus(3600000L);
        org.joda.time.Instant instant20 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone21 = null;
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forTimeZone(timeZone21);
        org.joda.time.chrono.GJChronology gJChronology23 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone22);
        org.joda.time.DateTimeField dateTimeField24 = gJChronology23.millisOfSecond();
        int int25 = instant20.get(dateTimeField24);
        org.joda.time.Instant instant27 = instant20.plus(0L);
        java.util.TimeZone timeZone28 = null;
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forTimeZone(timeZone28);
        org.joda.time.chrono.GJChronology gJChronology30 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone29);
        org.joda.time.DurationField durationField31 = gJChronology30.halfdays();
        org.joda.time.Chronology chronology32 = gJChronology30.withUTC();
        java.lang.String str33 = gJChronology30.toString();
        org.joda.time.DateTimeField dateTimeField34 = gJChronology30.hourOfHalfday();
        int int35 = instant20.get(dateTimeField34);
        java.util.TimeZone timeZone36 = null;
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.forTimeZone(timeZone36);
        org.joda.time.chrono.GJChronology gJChronology38 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone37);
        org.joda.time.DurationField durationField39 = gJChronology38.halfdays();
        long long43 = gJChronology38.add((long) 'a', (-1L), (int) (short) 0);
        org.joda.time.DateTimeField dateTimeField44 = gJChronology38.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField45 = gJChronology38.secondOfMinute();
        org.joda.time.Instant instant47 = new org.joda.time.Instant(52L);
        boolean boolean48 = instant47.isEqualNow();
        org.joda.time.ReadableDuration readableDuration49 = null;
        org.joda.time.Instant instant50 = instant47.plus(readableDuration49);
        boolean boolean51 = gJChronology38.equals((java.lang.Object) instant47);
        org.joda.time.DateTimeFieldType dateTimeFieldType52 = null;
        boolean boolean53 = instant47.isSupported(dateTimeFieldType52);
        org.joda.time.DateTimeFieldType dateTimeFieldType54 = null;
        boolean boolean55 = instant47.isSupported(dateTimeFieldType54);
        org.joda.time.DateTimeZone dateTimeZone56 = instant47.getZone();
        boolean boolean57 = instant20.isAfter((org.joda.time.ReadableInstant) instant47);
        org.joda.time.Instant instant59 = instant20.minus((long) 70);
        org.joda.time.Instant instant61 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone62 = null;
        org.joda.time.DateTimeZone dateTimeZone63 = org.joda.time.DateTimeZone.forTimeZone(timeZone62);
        org.joda.time.chrono.GJChronology gJChronology64 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone63);
        org.joda.time.DateTimeField dateTimeField65 = gJChronology64.millisOfSecond();
        int int66 = instant61.get(dateTimeField65);
        boolean boolean67 = instant61.isEqualNow();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter68 = null;
        java.lang.String str69 = instant61.toString(dateTimeFormatter68);
        boolean boolean70 = instant20.isAfter((org.joda.time.ReadableInstant) instant61);
        boolean boolean71 = instant18.isEqual((org.joda.time.ReadableInstant) instant20);
        org.joda.time.Instant instant72 = instant18.toInstant();
        org.joda.time.Instant instant74 = instant72.minus((-378658602152915L));
        org.joda.time.MutableDateTime mutableDateTime75 = instant74.toMutableDateTime();
        boolean boolean76 = instant9.isAfter((org.joda.time.ReadableInstant) mutableDateTime75);
        org.joda.time.DateTime dateTime77 = instant9.toDateTime();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant74 and mutableDateTime75", (instant74.compareTo(mutableDateTime75) == 0) == instant74.equals(mutableDateTime75));
    }

    @Test
    public void test1709() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1709");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        long long6 = dateTimeZone1.convertLocalToUTC((long) (byte) -1, true, 0L);
        boolean boolean8 = dateTimeZone1.equals((java.lang.Object) true);
        java.util.Locale locale10 = java.util.Locale.getDefault();
        java.lang.String str11 = locale10.getDisplayLanguage();
        java.lang.String str12 = locale10.toLanguageTag();
        java.lang.String str13 = dateTimeZone1.getShortName(0L, locale10);
        java.util.TimeZone timeZone14 = null;
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forTimeZone(timeZone14);
        org.joda.time.chrono.GJChronology gJChronology16 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone15);
        org.joda.time.DateTimeField dateTimeField17 = gJChronology16.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField18 = gJChronology16.weekyearOfCentury();
        org.joda.time.Instant instant19 = gJChronology16.getGregorianCutover();
        org.joda.time.Instant instant21 = instant19.withMillis(0L);
        org.joda.time.chrono.GJChronology gJChronology23 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1, (org.joda.time.ReadableInstant) instant19, 4);
        java.util.TimeZone timeZone24 = null;
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forTimeZone(timeZone24);
        org.joda.time.chrono.GJChronology gJChronology26 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone25);
        org.joda.time.DateTimeField dateTimeField27 = gJChronology26.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField28 = gJChronology26.weekyearOfCentury();
        org.joda.time.Instant instant29 = gJChronology26.getGregorianCutover();
        org.joda.time.Instant instant31 = instant29.withMillis(0L);
        org.joda.time.Instant instant33 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone34 = null;
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.forTimeZone(timeZone34);
        org.joda.time.chrono.GJChronology gJChronology36 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone35);
        org.joda.time.DateTimeField dateTimeField37 = gJChronology36.millisOfSecond();
        int int38 = instant33.get(dateTimeField37);
        org.joda.time.Instant instant40 = instant33.plus(0L);
        int int41 = instant31.compareTo((org.joda.time.ReadableInstant) instant40);
        org.joda.time.Instant instant43 = new org.joda.time.Instant(52L);
        boolean boolean44 = instant43.isEqualNow();
        org.joda.time.ReadableDuration readableDuration45 = null;
        org.joda.time.Instant instant46 = instant43.plus(readableDuration45);
        boolean boolean48 = instant46.equals((java.lang.Object) ' ');
        boolean boolean49 = instant40.isEqual((org.joda.time.ReadableInstant) instant46);
        java.lang.String str50 = instant40.toString();
        org.joda.time.ReadableDuration readableDuration51 = null;
        org.joda.time.Instant instant53 = instant40.withDurationAdded(readableDuration51, 1431201);
        int int54 = dateTimeZone1.getOffset((org.joda.time.ReadableInstant) instant40);
        java.util.Date date55 = instant40.toDate();
        java.util.Date date56 = instant40.toDate();
        org.joda.time.Instant instant58 = instant40.plus(262978799880000L);
        java.util.TimeZone timeZone59 = null;
        org.joda.time.DateTimeZone dateTimeZone60 = org.joda.time.DateTimeZone.forTimeZone(timeZone59);
        org.joda.time.chrono.GJChronology gJChronology61 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone60);
        org.joda.time.DateTimeField dateTimeField62 = gJChronology61.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField63 = gJChronology61.weekyear();
        org.joda.time.DurationField durationField64 = gJChronology61.centuries();
        org.joda.time.DateTimeField dateTimeField65 = gJChronology61.halfdayOfDay();
        org.joda.time.DurationField durationField66 = gJChronology61.minutes();
        org.joda.time.DateTimeField dateTimeField67 = gJChronology61.yearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone70 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) -1, 52);
        org.joda.time.Chronology chronology71 = gJChronology61.withZone(dateTimeZone70);
        org.joda.time.MutableDateTime mutableDateTime72 = instant58.toMutableDateTime((org.joda.time.Chronology) gJChronology61);
        org.joda.time.DateTimeField dateTimeField73 = gJChronology61.yearOfCentury();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant58 and mutableDateTime72", (instant58.compareTo(mutableDateTime72) == 0) == instant58.equals(mutableDateTime72));
    }

    @Test
    public void test1710() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1710");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = gJChronology2.halfdays();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.millisOfDay();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.minuteOfDay();
        org.joda.time.DurationField durationField6 = gJChronology2.centuries();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology2.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField8 = gJChronology2.year();
        org.joda.time.Instant instant9 = gJChronology2.getGregorianCutover();
        java.util.TimeZone timeZone10 = null;
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forTimeZone(timeZone10);
        org.joda.time.chrono.GJChronology gJChronology12 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone11);
        org.joda.time.DurationField durationField13 = gJChronology12.halfdays();
        org.joda.time.DateTimeField dateTimeField14 = gJChronology12.millisOfDay();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology12.minuteOfDay();
        org.joda.time.DurationField durationField16 = gJChronology12.centuries();
        org.joda.time.DateTimeField dateTimeField17 = gJChronology12.dayOfYear();
        java.lang.String str18 = gJChronology12.toString();
        org.joda.time.DateTimeField dateTimeField19 = gJChronology12.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone20 = gJChronology12.getZone();
        org.joda.time.chrono.GJChronology gJChronology21 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone20);
        org.joda.time.Chronology chronology22 = gJChronology2.withZone(dateTimeZone20);
        long long25 = dateTimeZone20.convertLocalToUTC(349200L, false);
        java.lang.Object obj26 = null;
        boolean boolean27 = dateTimeZone20.equals(obj26);
        long long30 = dateTimeZone20.adjustOffset(43201764L, true);
        java.util.TimeZone timeZone31 = dateTimeZone20.toTimeZone();
        org.joda.time.Instant instant33 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone34 = null;
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.forTimeZone(timeZone34);
        org.joda.time.chrono.GJChronology gJChronology36 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone35);
        org.joda.time.DateTimeField dateTimeField37 = gJChronology36.millisOfSecond();
        int int38 = instant33.get(dateTimeField37);
        boolean boolean39 = instant33.isEqualNow();
        org.joda.time.tz.NameProvider nameProvider40 = org.joda.time.DateTimeZone.getNameProvider();
        org.joda.time.DateTimeZone.setNameProvider(nameProvider40);
        org.joda.time.DateTimeZone.setNameProvider(nameProvider40);
        boolean boolean43 = instant33.equals((java.lang.Object) nameProvider40);
        org.joda.time.Instant instant45 = new org.joda.time.Instant(52L);
        boolean boolean46 = instant45.isEqualNow();
        java.lang.String str47 = instant45.toString();
        org.joda.time.DateTimeZone dateTimeZone48 = instant45.getZone();
        org.joda.time.DateTime dateTime49 = instant33.toDateTime(dateTimeZone48);
        java.lang.String str50 = instant33.toString();
        org.joda.time.ReadableDuration readableDuration51 = null;
        org.joda.time.Instant instant52 = instant33.plus(readableDuration51);
        org.joda.time.DateTimeZone dateTimeZone53 = instant52.getZone();
        org.joda.time.MutableDateTime mutableDateTime54 = instant52.toMutableDateTime();
        org.joda.time.chrono.GJChronology gJChronology55 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone20, (org.joda.time.ReadableInstant) instant52);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone20);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant33 and mutableDateTime54", (instant33.compareTo(mutableDateTime54) == 0) == instant33.equals(mutableDateTime54));
    }

    @Test
    public void test1711() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1711");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = gJChronology2.halfdays();
        long long7 = gJChronology2.add(0L, (long) (short) -1, (int) '4');
        java.util.TimeZone timeZone8 = null;
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forTimeZone(timeZone8);
        org.joda.time.chrono.GJChronology gJChronology10 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone9);
        org.joda.time.DurationField durationField11 = gJChronology10.halfdays();
        org.joda.time.DateTimeField dateTimeField12 = gJChronology10.millisOfDay();
        org.joda.time.DateTimeField dateTimeField13 = gJChronology10.minuteOfDay();
        org.joda.time.DurationField durationField14 = gJChronology10.centuries();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology10.dayOfYear();
        java.lang.String str16 = gJChronology10.toString();
        org.joda.time.DurationField durationField17 = gJChronology10.years();
        org.joda.time.DateTimeField dateTimeField18 = gJChronology10.yearOfEra();
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(0, (int) (short) 10);
        org.joda.time.Chronology chronology22 = gJChronology10.withZone(dateTimeZone21);
        org.joda.time.Chronology chronology23 = gJChronology2.withZone(dateTimeZone21);
        org.joda.time.DurationField durationField24 = gJChronology2.halfdays();
        org.joda.time.Instant instant25 = gJChronology2.getGregorianCutover();
        org.joda.time.Instant instant27 = instant25.withMillis((long) (short) -1);
        boolean boolean29 = instant25.isEqual(849253L);
        org.joda.time.Instant instant31 = new org.joda.time.Instant(52L);
        boolean boolean32 = instant31.isEqualNow();
        java.lang.String str33 = instant31.toString();
        org.joda.time.DateTimeZone dateTimeZone34 = instant31.getZone();
        org.joda.time.Instant instant36 = instant31.minus((-2208729599948L));
        org.joda.time.ReadableDuration readableDuration37 = null;
        org.joda.time.Instant instant38 = instant31.plus(readableDuration37);
        int int39 = instant25.compareTo((org.joda.time.ReadableInstant) instant31);
        org.joda.time.DateTime dateTime40 = instant31.toDateTimeISO();
        org.joda.time.Instant instant41 = dateTime40.toInstant();
        org.joda.time.Instant instant43 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone44 = null;
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.forTimeZone(timeZone44);
        org.joda.time.chrono.GJChronology gJChronology46 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone45);
        org.joda.time.DateTimeField dateTimeField47 = gJChronology46.millisOfSecond();
        int int48 = instant43.get(dateTimeField47);
        org.joda.time.Instant instant50 = instant43.plus(0L);
        org.joda.time.Instant instant51 = instant50.toInstant();
        org.joda.time.Instant instant53 = new org.joda.time.Instant(52L);
        boolean boolean54 = instant53.isEqualNow();
        java.lang.String str55 = instant53.toString();
        java.lang.String str56 = instant53.toString();
        org.joda.time.Instant instant58 = new org.joda.time.Instant(52L);
        boolean boolean59 = instant58.isEqualNow();
        org.joda.time.ReadableDuration readableDuration60 = null;
        org.joda.time.Instant instant61 = instant58.plus(readableDuration60);
        boolean boolean62 = instant53.isBefore((org.joda.time.ReadableInstant) instant61);
        org.joda.time.Instant instant64 = instant53.minus((long) 0);
        int int65 = instant50.compareTo((org.joda.time.ReadableInstant) instant53);
        org.joda.time.DateTime dateTime66 = instant50.toDateTimeISO();
        org.joda.time.Instant instant68 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone69 = null;
        org.joda.time.DateTimeZone dateTimeZone70 = org.joda.time.DateTimeZone.forTimeZone(timeZone69);
        org.joda.time.chrono.GJChronology gJChronology71 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone70);
        org.joda.time.DateTimeField dateTimeField72 = gJChronology71.millisOfSecond();
        int int73 = instant68.get(dateTimeField72);
        org.joda.time.Instant instant75 = instant68.plus(0L);
        boolean boolean76 = dateTime66.isAfter((org.joda.time.ReadableInstant) instant68);
        boolean boolean78 = dateTime66.isEqual((-820800000L));
        boolean boolean79 = dateTime66.isAfterNow();
        boolean boolean80 = dateTime66.isBeforeNow();
        boolean boolean81 = instant41.isAfter((org.joda.time.ReadableInstant) dateTime66);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant31 and dateTime40", (instant31.compareTo(dateTime40) == 0) == instant31.equals(dateTime40));
    }

    @Test
    public void test1712() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1712");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forTimeZone(timeZone2);
        org.joda.time.chrono.GJChronology gJChronology4 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone3);
        org.joda.time.DateTimeField dateTimeField5 = gJChronology4.millisOfSecond();
        int int6 = instant1.get(dateTimeField5);
        boolean boolean7 = instant1.isEqualNow();
        org.joda.time.tz.NameProvider nameProvider8 = org.joda.time.DateTimeZone.getNameProvider();
        org.joda.time.DateTimeZone.setNameProvider(nameProvider8);
        org.joda.time.DateTimeZone.setNameProvider(nameProvider8);
        boolean boolean11 = instant1.equals((java.lang.Object) nameProvider8);
        org.joda.time.Instant instant13 = new org.joda.time.Instant(52L);
        boolean boolean14 = instant13.isEqualNow();
        java.lang.String str15 = instant13.toString();
        org.joda.time.DateTimeZone dateTimeZone16 = instant13.getZone();
        org.joda.time.DateTime dateTime17 = instant1.toDateTime(dateTimeZone16);
        java.lang.String str18 = instant1.toString();
        org.joda.time.ReadableDuration readableDuration19 = null;
        org.joda.time.Instant instant20 = instant1.plus(readableDuration19);
        org.joda.time.Instant instant22 = instant20.withMillis(220898620800000L);
        org.joda.time.ReadableDuration readableDuration23 = null;
        org.joda.time.Instant instant24 = instant20.plus(readableDuration23);
        org.joda.time.ReadableDuration readableDuration25 = null;
        org.joda.time.Instant instant27 = instant20.withDurationAdded(readableDuration25, 47040000);
        org.joda.time.MutableDateTime mutableDateTime28 = instant20.toMutableDateTime();
        org.joda.time.Instant instant30 = new org.joda.time.Instant(52L);
        boolean boolean31 = instant30.isEqualNow();
        org.joda.time.ReadableDuration readableDuration32 = null;
        org.joda.time.Instant instant33 = instant30.plus(readableDuration32);
        long long34 = instant30.getMillis();
        java.lang.String str35 = instant30.toString();
        org.joda.time.Instant instant36 = instant30.toInstant();
        org.joda.time.ReadableDuration readableDuration37 = null;
        org.joda.time.Instant instant39 = instant30.withDurationAdded(readableDuration37, (int) 'x');
        org.joda.time.Instant instant40 = instant30.toInstant();
        java.util.Date date41 = instant30.toDate();
        long long42 = instant30.getMillis();
        boolean boolean43 = instant20.equals((java.lang.Object) instant30);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant20 and mutableDateTime28", (instant20.compareTo(mutableDateTime28) == 0) == instant20.equals(mutableDateTime28));
    }

    @Test
    public void test1713() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1713");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forTimeZone(timeZone2);
        org.joda.time.chrono.GJChronology gJChronology4 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone3);
        org.joda.time.DateTimeField dateTimeField5 = gJChronology4.millisOfSecond();
        int int6 = instant1.get(dateTimeField5);
        org.joda.time.Instant instant8 = instant1.plus(0L);
        org.joda.time.Instant instant9 = instant8.toInstant();
        org.joda.time.Instant instant11 = new org.joda.time.Instant(52L);
        boolean boolean12 = instant11.isEqualNow();
        java.lang.String str13 = instant11.toString();
        java.lang.String str14 = instant11.toString();
        org.joda.time.Instant instant16 = new org.joda.time.Instant(52L);
        boolean boolean17 = instant16.isEqualNow();
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.Instant instant19 = instant16.plus(readableDuration18);
        boolean boolean20 = instant11.isBefore((org.joda.time.ReadableInstant) instant19);
        org.joda.time.Instant instant22 = instant11.minus((long) 0);
        int int23 = instant8.compareTo((org.joda.time.ReadableInstant) instant11);
        org.joda.time.Instant instant26 = instant11.withDurationAdded((long) (short) 100, 70);
        org.joda.time.ReadableDuration readableDuration27 = null;
        org.joda.time.Instant instant28 = instant11.minus(readableDuration27);
        org.joda.time.Instant instant30 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone31 = null;
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.forTimeZone(timeZone31);
        org.joda.time.chrono.GJChronology gJChronology33 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone32);
        org.joda.time.DateTimeField dateTimeField34 = gJChronology33.millisOfSecond();
        int int35 = instant30.get(dateTimeField34);
        boolean boolean36 = instant30.isEqualNow();
        org.joda.time.tz.NameProvider nameProvider37 = org.joda.time.DateTimeZone.getNameProvider();
        org.joda.time.DateTimeZone.setNameProvider(nameProvider37);
        org.joda.time.DateTimeZone.setNameProvider(nameProvider37);
        boolean boolean40 = instant30.equals((java.lang.Object) nameProvider37);
        org.joda.time.Instant instant42 = instant30.minus(0L);
        int int43 = instant28.compareTo((org.joda.time.ReadableInstant) instant30);
        long long44 = instant30.getMillis();
        java.util.TimeZone timeZone45 = null;
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.forTimeZone(timeZone45);
        org.joda.time.chrono.GJChronology gJChronology47 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone46);
        org.joda.time.DurationField durationField48 = gJChronology47.halfdays();
        org.joda.time.DateTimeField dateTimeField49 = gJChronology47.millisOfDay();
        org.joda.time.DateTimeField dateTimeField50 = gJChronology47.minuteOfDay();
        org.joda.time.DurationField durationField51 = gJChronology47.centuries();
        int int52 = gJChronology47.getMinimumDaysInFirstWeek();
        org.joda.time.DateTimeField dateTimeField53 = gJChronology47.weekyear();
        org.joda.time.DateTimeField dateTimeField54 = gJChronology47.weekyearOfCentury();
        org.joda.time.DurationField durationField55 = gJChronology47.halfdays();
        org.joda.time.DurationField durationField56 = gJChronology47.days();
        org.joda.time.MutableDateTime mutableDateTime57 = instant30.toMutableDateTime((org.joda.time.Chronology) gJChronology47);
        org.joda.time.Instant instant58 = mutableDateTime57.toInstant();
        org.joda.time.DateTime dateTime59 = instant58.toDateTimeISO();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and mutableDateTime57", (instant1.compareTo(mutableDateTime57) == 0) == instant1.equals(mutableDateTime57));
    }

    @Test
    public void test1714() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1714");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str3 = dateTimeZone1.getNameKey((long) 100);
        boolean boolean4 = dateTimeZone1.isFixed();
        java.util.Locale locale8 = new java.util.Locale("DurationField[halfdays]", "\u82f1\u6587");
        java.lang.String str9 = dateTimeZone1.getName((long) (short) 10, locale8);
        org.joda.time.Instant instant11 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone12 = null;
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forTimeZone(timeZone12);
        org.joda.time.chrono.GJChronology gJChronology14 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone13);
        org.joda.time.DateTimeField dateTimeField15 = gJChronology14.millisOfSecond();
        int int16 = instant11.get(dateTimeField15);
        org.joda.time.Chronology chronology17 = instant11.getChronology();
        org.joda.time.chrono.GJChronology gJChronology18 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1, (org.joda.time.ReadableInstant) instant11);
        org.joda.time.DateTime dateTime19 = instant11.toDateTime();
        java.util.TimeZone timeZone20 = null;
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forTimeZone(timeZone20);
        org.joda.time.chrono.GJChronology gJChronology22 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone21);
        org.joda.time.DurationField durationField23 = gJChronology22.halfdays();
        long long27 = gJChronology22.add((long) 'a', (-1L), (int) (short) 0);
        boolean boolean29 = gJChronology22.equals((java.lang.Object) 0);
        org.joda.time.DateTimeField dateTimeField30 = gJChronology22.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField31 = gJChronology22.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField32 = gJChronology22.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField33 = gJChronology22.year();
        int int34 = dateTime19.get(dateTimeField33);
        java.util.TimeZone timeZone35 = null;
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.forTimeZone(timeZone35);
        org.joda.time.chrono.GJChronology gJChronology37 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone36);
        org.joda.time.DateTimeField dateTimeField38 = gJChronology37.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField39 = gJChronology37.weekyearOfCentury();
        org.joda.time.Instant instant40 = gJChronology37.getGregorianCutover();
        org.joda.time.Instant instant42 = instant40.withMillis(0L);
        org.joda.time.Instant instant44 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone45 = null;
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.forTimeZone(timeZone45);
        org.joda.time.chrono.GJChronology gJChronology47 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone46);
        org.joda.time.DateTimeField dateTimeField48 = gJChronology47.millisOfSecond();
        int int49 = instant44.get(dateTimeField48);
        org.joda.time.Instant instant51 = instant44.plus(0L);
        int int52 = instant42.compareTo((org.joda.time.ReadableInstant) instant51);
        org.joda.time.DateTimeFieldType dateTimeFieldType53 = null;
        boolean boolean54 = instant51.isSupported(dateTimeFieldType53);
        org.joda.time.Instant instant56 = new org.joda.time.Instant(52L);
        boolean boolean57 = instant56.isEqualNow();
        org.joda.time.ReadableDuration readableDuration58 = null;
        org.joda.time.Instant instant59 = instant56.plus(readableDuration58);
        int int60 = instant51.compareTo((org.joda.time.ReadableInstant) instant56);
        org.joda.time.Instant instant62 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone63 = null;
        org.joda.time.DateTimeZone dateTimeZone64 = org.joda.time.DateTimeZone.forTimeZone(timeZone63);
        org.joda.time.chrono.GJChronology gJChronology65 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone64);
        org.joda.time.DateTimeField dateTimeField66 = gJChronology65.millisOfSecond();
        int int67 = instant62.get(dateTimeField66);
        boolean boolean68 = instant62.isEqualNow();
        org.joda.time.ReadableDuration readableDuration69 = null;
        org.joda.time.Instant instant71 = instant62.withDurationAdded(readableDuration69, (int) (short) 0);
        org.joda.time.ReadableDuration readableDuration72 = null;
        org.joda.time.Instant instant73 = instant62.plus(readableDuration72);
        boolean boolean74 = instant51.isEqual((org.joda.time.ReadableInstant) instant73);
        org.joda.time.MutableDateTime mutableDateTime75 = instant73.toMutableDateTime();
        boolean boolean76 = dateTime19.equals((java.lang.Object) instant73);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant11 and mutableDateTime75", (instant11.compareTo(mutableDateTime75) == 0) == instant11.equals(mutableDateTime75));
    }

    @Test
    public void test1715() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1715");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        boolean boolean2 = instant1.isEqualNow();
        java.lang.String str3 = instant1.toString();
        java.lang.String str4 = instant1.toString();
        org.joda.time.Instant instant6 = new org.joda.time.Instant(52L);
        boolean boolean7 = instant6.isEqualNow();
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.Instant instant9 = instant6.plus(readableDuration8);
        boolean boolean10 = instant1.isBefore((org.joda.time.ReadableInstant) instant9);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = null;
        java.lang.String str12 = instant9.toString(dateTimeFormatter11);
        java.util.TimeZone timeZone13 = null;
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forTimeZone(timeZone13);
        java.util.Locale locale16 = java.util.Locale.ENGLISH;
        java.lang.String str17 = dateTimeZone14.getShortName((-2246399965L), locale16);
        java.util.Locale locale20 = new java.util.Locale("hi!");
        java.lang.String str21 = locale20.getCountry();
        java.lang.String str22 = locale20.getScript();
        java.util.Locale locale23 = java.util.Locale.ITALIAN;
        java.util.Locale locale24 = locale23.stripExtensions();
        java.util.Locale locale25 = java.util.Locale.CANADA;
        java.lang.String str26 = locale23.getDisplayVariant(locale25);
        java.lang.String str27 = locale20.getDisplayScript(locale23);
        java.util.Locale locale29 = java.util.Locale.forLanguageTag("");
        java.util.Locale locale30 = java.util.Locale.GERMAN;
        java.lang.String str31 = locale30.getDisplayCountry();
        java.lang.String str32 = locale29.getDisplayLanguage(locale30);
        java.lang.String str33 = locale20.getDisplayScript(locale30);
        java.util.Locale locale34 = locale30.stripExtensions();
        java.util.Set<java.lang.String> strSet35 = locale34.getUnicodeLocaleAttributes();
        java.lang.String str36 = dateTimeZone14.getName((long) (short) 100, locale34);
        java.util.TimeZone timeZone37 = null;
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forTimeZone(timeZone37);
        org.joda.time.chrono.GJChronology gJChronology39 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone38);
        org.joda.time.DurationField durationField40 = gJChronology39.halfdays();
        org.joda.time.DateTimeField dateTimeField41 = gJChronology39.millisOfDay();
        org.joda.time.DateTimeField dateTimeField42 = gJChronology39.minuteOfDay();
        org.joda.time.DurationField durationField43 = gJChronology39.centuries();
        org.joda.time.DateTimeField dateTimeField44 = gJChronology39.dayOfYear();
        java.lang.String str45 = gJChronology39.toString();
        org.joda.time.DateTimeField dateTimeField46 = gJChronology39.dayOfYear();
        org.joda.time.DateTimeField dateTimeField47 = gJChronology39.dayOfMonth();
        org.joda.time.DurationField durationField48 = gJChronology39.years();
        org.joda.time.DateTimeField dateTimeField49 = gJChronology39.minuteOfHour();
        java.util.TimeZone timeZone50 = null;
        org.joda.time.DateTimeZone dateTimeZone51 = org.joda.time.DateTimeZone.forTimeZone(timeZone50);
        org.joda.time.chrono.GJChronology gJChronology52 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone51);
        org.joda.time.DurationField durationField53 = gJChronology52.halfdays();
        long long57 = gJChronology52.add((long) 'a', (-1L), (int) (short) 0);
        boolean boolean59 = gJChronology52.equals((java.lang.Object) 0);
        org.joda.time.DateTimeField dateTimeField60 = gJChronology52.dayOfMonth();
        org.joda.time.DurationField durationField61 = gJChronology52.days();
        long long65 = gJChronology52.add((long) '4', 432000000L, (int) (short) 0);
        org.joda.time.DurationField durationField66 = gJChronology52.years();
        java.util.TimeZone timeZone67 = null;
        org.joda.time.DateTimeZone dateTimeZone68 = org.joda.time.DateTimeZone.forTimeZone(timeZone67);
        java.lang.String str70 = dateTimeZone68.getNameKey((long) 100);
        boolean boolean71 = dateTimeZone68.isFixed();
        java.lang.String str72 = dateTimeZone68.toString();
        boolean boolean74 = dateTimeZone68.isStandardOffset((long) (byte) 0);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone68);
        org.joda.time.Chronology chronology76 = gJChronology52.withZone(dateTimeZone68);
        org.joda.time.Chronology chronology77 = gJChronology39.withZone(dateTimeZone68);
        long long79 = dateTimeZone14.getMillisKeepLocal(dateTimeZone68, 25107085123201869L);
        org.joda.time.MutableDateTime mutableDateTime80 = instant9.toMutableDateTime(dateTimeZone68);
        long long81 = instant9.getMillis();
        org.joda.time.ReadableDuration readableDuration82 = null;
        org.joda.time.Instant instant83 = instant9.plus(readableDuration82);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and mutableDateTime80", (instant1.compareTo(mutableDateTime80) == 0) == instant1.equals(mutableDateTime80));
    }

    @Test
    public void test1716() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1716");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = gJChronology2.years();
        java.util.TimeZone timeZone4 = null;
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forTimeZone(timeZone4);
        org.joda.time.chrono.GJChronology gJChronology6 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone5);
        org.joda.time.DurationField durationField7 = gJChronology6.halfdays();
        org.joda.time.DateTimeField dateTimeField8 = gJChronology6.millisOfDay();
        org.joda.time.DateTimeField dateTimeField9 = gJChronology6.minuteOfDay();
        org.joda.time.DurationField durationField10 = gJChronology6.centuries();
        java.util.TimeZone timeZone11 = null;
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forTimeZone(timeZone11);
        org.joda.time.chrono.GJChronology gJChronology13 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone12);
        org.joda.time.DurationField durationField14 = gJChronology13.halfdays();
        long long17 = durationField14.add((long) 100, 100L);
        boolean boolean18 = durationField14.isPrecise();
        int int19 = durationField10.compareTo(durationField14);
        boolean boolean20 = gJChronology2.equals((java.lang.Object) durationField10);
        org.joda.time.DateTimeField dateTimeField21 = gJChronology2.secondOfDay();
        org.joda.time.Instant instant23 = new org.joda.time.Instant(52L);
        boolean boolean24 = instant23.isEqualNow();
        org.joda.time.ReadableDuration readableDuration25 = null;
        org.joda.time.Instant instant26 = instant23.plus(readableDuration25);
        long long27 = instant23.getMillis();
        java.lang.String str28 = instant23.toString();
        org.joda.time.Instant instant29 = instant23.toInstant();
        org.joda.time.ReadableDuration readableDuration30 = null;
        org.joda.time.Instant instant32 = instant23.withDurationAdded(readableDuration30, (int) 'x');
        org.joda.time.DateTimeZone dateTimeZone33 = instant23.getZone();
        java.util.TimeZone timeZone34 = null;
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.forTimeZone(timeZone34);
        org.joda.time.chrono.GJChronology gJChronology36 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone35);
        org.joda.time.DateTimeField dateTimeField37 = gJChronology36.millisOfSecond();
        org.joda.time.DurationField durationField38 = gJChronology36.millis();
        org.joda.time.ReadablePeriod readablePeriod39 = null;
        long long42 = gJChronology36.add(readablePeriod39, (long) 'a', (int) '4');
        org.joda.time.DateTimeField dateTimeField43 = gJChronology36.clockhourOfDay();
        org.joda.time.MutableDateTime mutableDateTime44 = instant23.toMutableDateTime((org.joda.time.Chronology) gJChronology36);
        boolean boolean45 = gJChronology2.equals((java.lang.Object) mutableDateTime44);
        org.joda.time.DurationField durationField46 = gJChronology2.hours();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant23 and mutableDateTime44", (instant23.compareTo(mutableDateTime44) == 0) == instant23.equals(mutableDateTime44));
    }

    @Test
    public void test1717() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1717");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forTimeZone(timeZone2);
        org.joda.time.chrono.GJChronology gJChronology4 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone3);
        org.joda.time.DateTimeField dateTimeField5 = gJChronology4.millisOfSecond();
        int int6 = instant1.get(dateTimeField5);
        boolean boolean7 = instant1.isEqualNow();
        boolean boolean9 = instant1.isBefore(35L);
        java.util.TimeZone timeZone10 = null;
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forTimeZone(timeZone10);
        org.joda.time.chrono.GJChronology gJChronology12 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone11);
        org.joda.time.DateTimeField dateTimeField13 = gJChronology12.era();
        org.joda.time.DateTimeField dateTimeField14 = gJChronology12.centuryOfEra();
        org.joda.time.DurationField durationField15 = gJChronology12.hours();
        org.joda.time.DateTimeField dateTimeField16 = gJChronology12.monthOfYear();
        org.joda.time.DateTimeField dateTimeField17 = gJChronology12.dayOfWeek();
        org.joda.time.Chronology chronology18 = gJChronology12.withUTC();
        org.joda.time.DurationField durationField19 = gJChronology12.centuries();
        java.util.TimeZone timeZone20 = null;
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forTimeZone(timeZone20);
        java.lang.String str23 = dateTimeZone21.getNameKey((long) 100);
        boolean boolean24 = dateTimeZone21.isFixed();
        org.joda.time.chrono.GJChronology gJChronology25 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone21);
        int int26 = gJChronology25.getMinimumDaysInFirstWeek();
        java.lang.String str27 = gJChronology25.toString();
        org.joda.time.DateTimeField dateTimeField28 = gJChronology25.yearOfEra();
        org.joda.time.DateTimeField dateTimeField29 = gJChronology25.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField30 = gJChronology25.dayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology32 = gJChronology25.withZone(dateTimeZone31);
        org.joda.time.DateTimeField dateTimeField33 = chronology32.millisOfSecond();
        java.util.TimeZone timeZone34 = null;
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.forTimeZone(timeZone34);
        org.joda.time.chrono.GJChronology gJChronology36 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone35);
        int int38 = dateTimeZone35.getOffsetFromLocal((long) (-1));
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.forOffsetHours((int) '4');
        long long42 = dateTimeZone35.getMillisKeepLocal(dateTimeZone40, (-8380800000L));
        org.joda.time.Chronology chronology43 = chronology32.withZone(dateTimeZone35);
        java.util.TimeZone timeZone44 = null;
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.forTimeZone(timeZone44);
        org.joda.time.chrono.GJChronology gJChronology46 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone45);
        org.joda.time.DurationField durationField47 = gJChronology46.halfdays();
        java.util.TimeZone timeZone48 = null;
        org.joda.time.DateTimeZone dateTimeZone49 = org.joda.time.DateTimeZone.forTimeZone(timeZone48);
        org.joda.time.chrono.GJChronology gJChronology50 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone49);
        long long54 = dateTimeZone49.convertLocalToUTC((long) (byte) -1, true, 0L);
        boolean boolean56 = dateTimeZone49.equals((java.lang.Object) true);
        org.joda.time.Chronology chronology57 = gJChronology46.withZone(dateTimeZone49);
        org.joda.time.LocalDateTime localDateTime58 = null;
        boolean boolean59 = dateTimeZone49.isLocalDateTimeGap(localDateTime58);
        boolean boolean60 = dateTimeZone49.isFixed();
        long long62 = dateTimeZone35.getMillisKeepLocal(dateTimeZone49, (long) (short) -1);
        org.joda.time.Chronology chronology63 = gJChronology12.withZone(dateTimeZone49);
        org.joda.time.Instant instant65 = new org.joda.time.Instant(52L);
        boolean boolean66 = instant65.isEqualNow();
        java.lang.String str67 = instant65.toString();
        org.joda.time.Chronology chronology68 = null;
        org.joda.time.MutableDateTime mutableDateTime69 = instant65.toMutableDateTime(chronology68);
        org.joda.time.MutableDateTime mutableDateTime70 = instant65.toMutableDateTime();
        org.joda.time.MutableDateTime mutableDateTime71 = instant65.toMutableDateTime();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter72 = null;
        java.lang.String str73 = instant65.toString(dateTimeFormatter72);
        org.joda.time.chrono.GJChronology gJChronology74 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone49, (org.joda.time.ReadableInstant) instant65);
        int int75 = instant1.compareTo((org.joda.time.ReadableInstant) instant65);
        long long76 = instant1.getMillis();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant65 and mutableDateTime69", (instant65.compareTo(mutableDateTime69) == 0) == instant65.equals(mutableDateTime69));
    }

    @Test
    public void test1718() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1718");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        long long6 = dateTimeZone1.convertLocalToUTC((long) (byte) -1, true, 0L);
        boolean boolean8 = dateTimeZone1.equals((java.lang.Object) true);
        org.joda.time.chrono.GJChronology gJChronology9 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField10 = gJChronology9.weekyear();
        org.joda.time.DateTimeField dateTimeField11 = gJChronology9.era();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(0, (int) (short) 10);
        long long16 = dateTimeZone14.convertUTCToLocal(262974670000L);
        java.lang.String str17 = dateTimeZone14.toString();
        java.util.TimeZone timeZone18 = null;
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forTimeZone(timeZone18);
        org.joda.time.chrono.GJChronology gJChronology20 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone19);
        org.joda.time.DateTimeField dateTimeField21 = gJChronology20.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField22 = gJChronology20.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField23 = gJChronology20.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField24 = gJChronology20.hourOfHalfday();
        org.joda.time.DurationField durationField25 = gJChronology20.halfdays();
        org.joda.time.DateTimeField dateTimeField26 = gJChronology20.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField27 = gJChronology20.clockhourOfHalfday();
        org.joda.time.Instant instant28 = gJChronology20.getGregorianCutover();
        java.util.TimeZone timeZone29 = null;
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forTimeZone(timeZone29);
        org.joda.time.chrono.GJChronology gJChronology31 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone30);
        org.joda.time.DurationField durationField32 = gJChronology31.halfdays();
        org.joda.time.DateTimeField dateTimeField33 = gJChronology31.millisOfDay();
        org.joda.time.DateTimeField dateTimeField34 = gJChronology31.minuteOfDay();
        org.joda.time.DurationField durationField35 = gJChronology31.centuries();
        org.joda.time.DateTimeField dateTimeField36 = gJChronology31.halfdayOfDay();
        java.util.Locale locale37 = java.util.Locale.ITALIAN;
        java.util.Locale locale38 = locale37.stripExtensions();
        java.util.Locale locale39 = java.util.Locale.CANADA;
        java.lang.String str40 = locale37.getDisplayVariant(locale39);
        boolean boolean41 = gJChronology31.equals((java.lang.Object) locale39);
        org.joda.time.DateTimeField dateTimeField42 = gJChronology31.weekyear();
        int int43 = instant28.get(dateTimeField42);
        org.joda.time.MutableDateTime mutableDateTime44 = instant28.toMutableDateTime();
        org.joda.time.chrono.GJChronology gJChronology45 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone14, (org.joda.time.ReadableInstant) instant28);
        org.joda.time.Chronology chronology46 = gJChronology9.withZone(dateTimeZone14);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant28 and mutableDateTime44", (instant28.compareTo(mutableDateTime44) == 0) == instant28.equals(mutableDateTime44));
    }

    @Test
    public void test1719() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1719");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        boolean boolean2 = instant1.isEqualNow();
        java.lang.String str3 = instant1.toString();
        java.lang.String str4 = instant1.toString();
        org.joda.time.Instant instant7 = instant1.withDurationAdded(115200000L, (int) (short) 1);
        org.joda.time.Instant instant9 = new org.joda.time.Instant(52L);
        boolean boolean10 = instant9.isEqualNow();
        java.lang.String str11 = instant9.toString();
        org.joda.time.Instant instant13 = new org.joda.time.Instant(52L);
        boolean boolean14 = instant13.isEqualNow();
        java.lang.String str15 = instant13.toString();
        java.lang.String str16 = instant13.toString();
        org.joda.time.Instant instant19 = instant13.withDurationAdded(115200000L, (int) (short) 1);
        int int20 = instant9.compareTo((org.joda.time.ReadableInstant) instant13);
        int int21 = instant7.compareTo((org.joda.time.ReadableInstant) instant9);
        long long22 = instant7.getMillis();
        java.util.TimeZone timeZone23 = null;
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forTimeZone(timeZone23);
        org.joda.time.chrono.GJChronology gJChronology25 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone24);
        org.joda.time.DateTimeField dateTimeField26 = gJChronology25.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField27 = gJChronology25.weekyear();
        org.joda.time.DurationField durationField28 = gJChronology25.centuries();
        org.joda.time.DateTimeField dateTimeField29 = gJChronology25.millisOfDay();
        org.joda.time.DateTimeField dateTimeField30 = gJChronology25.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField31 = gJChronology25.yearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone32 = gJChronology25.getZone();
        java.util.TimeZone timeZone33 = dateTimeZone32.toTimeZone();
        org.joda.time.LocalDateTime localDateTime34 = null;
        boolean boolean35 = dateTimeZone32.isLocalDateTimeGap(localDateTime34);
        org.joda.time.DateTime dateTime36 = instant7.toDateTime(dateTimeZone32);
        java.util.TimeZone timeZone37 = null;
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forTimeZone(timeZone37);
        org.joda.time.chrono.GJChronology gJChronology39 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone38);
        org.joda.time.DurationField durationField40 = gJChronology39.halfdays();
        long long44 = gJChronology39.add((long) 'a', (-1L), (int) (short) 0);
        boolean boolean46 = gJChronology39.equals((java.lang.Object) 0);
        org.joda.time.DateTimeField dateTimeField47 = gJChronology39.dayOfMonth();
        org.joda.time.DurationField durationField48 = gJChronology39.days();
        org.joda.time.DurationField durationField49 = gJChronology39.seconds();
        java.util.TimeZone timeZone50 = null;
        org.joda.time.DateTimeZone dateTimeZone51 = org.joda.time.DateTimeZone.forTimeZone(timeZone50);
        int int53 = dateTimeZone51.getOffsetFromLocal((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone56 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(0, (int) (short) 10);
        long long58 = dateTimeZone51.getMillisKeepLocal(dateTimeZone56, (-61827926399999L));
        java.util.Locale locale60 = new java.util.Locale("hi!");
        boolean boolean61 = dateTimeZone51.equals((java.lang.Object) locale60);
        org.joda.time.Chronology chronology62 = gJChronology39.withZone(dateTimeZone51);
        org.joda.time.Instant instant63 = gJChronology39.getGregorianCutover();
        org.joda.time.Chronology chronology64 = instant63.getChronology();
        org.joda.time.Instant instant67 = instant63.withDurationAdded(33000087052L, 0);
        boolean boolean68 = instant7.isAfter((org.joda.time.ReadableInstant) instant67);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant19 and dateTime36", (instant19.compareTo(dateTime36) == 0) == instant19.equals(dateTime36));
    }

    @Test
    public void test1720() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1720");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        boolean boolean2 = instant1.isEqualNow();
        java.lang.String str3 = instant1.toString();
        org.joda.time.Instant instant5 = new org.joda.time.Instant(52L);
        boolean boolean6 = instant5.isEqualNow();
        java.lang.String str7 = instant5.toString();
        java.lang.String str8 = instant5.toString();
        org.joda.time.Instant instant11 = instant5.withDurationAdded(115200000L, (int) (short) 1);
        int int12 = instant1.compareTo((org.joda.time.ReadableInstant) instant5);
        org.joda.time.MutableDateTime mutableDateTime13 = instant1.toMutableDateTime();
        java.util.TimeZone timeZone14 = null;
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forTimeZone(timeZone14);
        org.joda.time.chrono.GJChronology gJChronology16 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone15);
        org.joda.time.DateTimeField dateTimeField17 = gJChronology16.era();
        org.joda.time.DurationField durationField18 = gJChronology16.months();
        org.joda.time.DateTimeField dateTimeField19 = gJChronology16.weekyearOfCentury();
        int int20 = instant1.get(dateTimeField19);
        org.joda.time.Instant instant22 = new org.joda.time.Instant((-220870497598236L));
        org.joda.time.MutableDateTime mutableDateTime23 = instant22.toMutableDateTimeISO();
        org.joda.time.Instant instant25 = new org.joda.time.Instant(52L);
        boolean boolean26 = instant25.isEqualNow();
        long long27 = instant25.getMillis();
        int int28 = instant22.compareTo((org.joda.time.ReadableInstant) instant25);
        long long29 = instant25.getMillis();
        int int30 = instant1.compareTo((org.joda.time.ReadableInstant) instant25);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant5 and mutableDateTime13", (instant5.compareTo(mutableDateTime13) == 0) == instant5.equals(mutableDateTime13));
    }

    @Test
    public void test1721() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1721");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        boolean boolean2 = instant1.isEqualNow();
        org.joda.time.ReadableDuration readableDuration3 = null;
        org.joda.time.Instant instant4 = instant1.plus(readableDuration3);
        long long5 = instant1.getMillis();
        java.lang.String str6 = instant1.toString();
        org.joda.time.Instant instant7 = instant1.toInstant();
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.Instant instant10 = instant1.withDurationAdded(readableDuration8, (int) 'x');
        java.util.TimeZone timeZone11 = null;
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forTimeZone(timeZone11);
        org.joda.time.chrono.GJChronology gJChronology13 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone12);
        org.joda.time.DateTimeField dateTimeField14 = gJChronology13.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology13.yearOfCentury();
        int int16 = instant10.get(dateTimeField15);
        org.joda.time.Instant instant17 = instant10.toInstant();
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.Instant instant19 = instant10.minus(readableDuration18);
        org.joda.time.Instant instant21 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone22 = null;
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        org.joda.time.chrono.GJChronology gJChronology24 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone23);
        org.joda.time.DateTimeField dateTimeField25 = gJChronology24.millisOfSecond();
        int int26 = instant21.get(dateTimeField25);
        org.joda.time.Instant instant28 = instant21.plus(0L);
        java.util.TimeZone timeZone29 = null;
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forTimeZone(timeZone29);
        org.joda.time.chrono.GJChronology gJChronology31 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone30);
        org.joda.time.DurationField durationField32 = gJChronology31.halfdays();
        org.joda.time.Chronology chronology33 = gJChronology31.withUTC();
        java.lang.String str34 = gJChronology31.toString();
        org.joda.time.DateTimeField dateTimeField35 = gJChronology31.hourOfHalfday();
        int int36 = instant21.get(dateTimeField35);
        org.joda.time.Instant instant38 = new org.joda.time.Instant(52L);
        boolean boolean39 = instant38.isEqualNow();
        org.joda.time.ReadableDuration readableDuration40 = null;
        org.joda.time.Instant instant41 = instant38.plus(readableDuration40);
        org.joda.time.Instant instant43 = new org.joda.time.Instant(52L);
        org.joda.time.Instant instant45 = instant43.withMillis((long) 'u');
        boolean boolean46 = instant38.isBefore((org.joda.time.ReadableInstant) instant43);
        boolean boolean47 = instant21.isEqual((org.joda.time.ReadableInstant) instant43);
        boolean boolean48 = instant10.isBefore((org.joda.time.ReadableInstant) instant21);
        org.joda.time.Instant instant49 = instant21.toInstant();
        java.util.TimeZone timeZone50 = null;
        org.joda.time.DateTimeZone dateTimeZone51 = org.joda.time.DateTimeZone.forTimeZone(timeZone50);
        java.lang.String str53 = dateTimeZone51.getNameKey((long) 100);
        boolean boolean54 = dateTimeZone51.isFixed();
        org.joda.time.chrono.GJChronology gJChronology55 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone51);
        org.joda.time.DurationField durationField56 = gJChronology55.hours();
        org.joda.time.MutableDateTime mutableDateTime57 = instant21.toMutableDateTime((org.joda.time.Chronology) gJChronology55);
        org.joda.time.DateTimeField dateTimeField58 = gJChronology55.hourOfHalfday();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and mutableDateTime57", (instant1.compareTo(mutableDateTime57) == 0) == instant1.equals(mutableDateTime57));
    }

    @Test
    public void test1722() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1722");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = gJChronology2.halfdays();
        long long7 = gJChronology2.add((long) 'a', (-1L), (int) (short) 0);
        boolean boolean9 = gJChronology2.equals((java.lang.Object) 0);
        org.joda.time.DateTimeField dateTimeField10 = gJChronology2.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField11 = gJChronology2.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField12 = gJChronology2.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField13 = gJChronology2.hourOfHalfday();
        org.joda.time.Chronology chronology14 = gJChronology2.withUTC();
        org.joda.time.Instant instant15 = org.joda.time.Instant.now();
        org.joda.time.Instant instant18 = instant15.withDurationAdded(306102434400000L, (int) (short) 100);
        java.util.TimeZone timeZone19 = null;
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forTimeZone(timeZone19);
        org.joda.time.chrono.GJChronology gJChronology21 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone20);
        long long25 = dateTimeZone20.convertLocalToUTC((long) (byte) -1, true, 0L);
        boolean boolean27 = dateTimeZone20.equals((java.lang.Object) true);
        long long29 = dateTimeZone20.nextTransition((long) '4');
        java.lang.String str31 = dateTimeZone20.getShortName(432000001L);
        java.util.TimeZone timeZone32 = dateTimeZone20.toTimeZone();
        org.joda.time.DateTime dateTime33 = instant15.toDateTime(dateTimeZone20);
        org.joda.time.DateTimeZone dateTimeZone34 = dateTime33.getZone();
        org.joda.time.Chronology chronology35 = gJChronology2.withZone(dateTimeZone34);
        org.joda.time.DateTimeField dateTimeField36 = gJChronology2.yearOfEra();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant15 and dateTime33", (instant15.compareTo(dateTime33) == 0) == instant15.equals(dateTime33));
    }

    @Test
    public void test1723() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1723");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField3 = gJChronology2.millisOfSecond();
        org.joda.time.DurationField durationField4 = gJChronology2.millis();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.hourOfHalfday();
        java.util.Locale.Builder builder6 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder7 = builder6.clear();
        java.util.Locale.Builder builder9 = builder7.removeUnicodeLocaleAttribute("und");
        java.util.Locale.Builder builder10 = builder9.clearExtensions();
        java.util.Locale.Builder builder11 = builder10.clearExtensions();
        java.util.Locale locale12 = builder10.build();
        java.util.Locale.Builder builder14 = builder10.setLanguageTag("en-US");
        java.util.Locale.Builder builder16 = builder10.addUnicodeLocaleAttribute("deu");
        java.util.Locale.Builder builder17 = builder16.clearExtensions();
        boolean boolean18 = gJChronology2.equals((java.lang.Object) builder17);
        org.joda.time.Instant instant20 = new org.joda.time.Instant((-64983772799999L));
        org.joda.time.DateTime dateTime21 = instant20.toDateTime();
        org.joda.time.Chronology chronology22 = dateTime21.getChronology();
        java.util.TimeZone timeZone23 = null;
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forTimeZone(timeZone23);
        org.joda.time.chrono.GJChronology gJChronology25 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone24);
        java.util.Locale locale27 = new java.util.Locale("hi!");
        java.lang.String str28 = locale27.getCountry();
        java.util.Locale locale29 = java.util.Locale.getDefault();
        java.lang.String str30 = locale29.getDisplayName();
        java.lang.String str31 = locale27.getDisplayScript(locale29);
        boolean boolean32 = dateTimeZone24.equals((java.lang.Object) locale29);
        int int34 = dateTimeZone24.getOffsetFromLocal((long) (short) 10);
        java.util.TimeZone timeZone35 = null;
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.forTimeZone(timeZone35);
        org.joda.time.chrono.GJChronology gJChronology37 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone36);
        org.joda.time.DateTimeField dateTimeField38 = gJChronology37.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField39 = gJChronology37.weekyearOfCentury();
        org.joda.time.Instant instant40 = gJChronology37.getGregorianCutover();
        org.joda.time.Instant instant42 = instant40.withMillis(0L);
        org.joda.time.Instant instant44 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone45 = null;
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.forTimeZone(timeZone45);
        org.joda.time.chrono.GJChronology gJChronology47 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone46);
        org.joda.time.DateTimeField dateTimeField48 = gJChronology47.millisOfSecond();
        int int49 = instant44.get(dateTimeField48);
        org.joda.time.Instant instant51 = instant44.plus(0L);
        int int52 = instant42.compareTo((org.joda.time.ReadableInstant) instant51);
        org.joda.time.DateTimeFieldType dateTimeFieldType53 = null;
        boolean boolean54 = instant51.isSupported(dateTimeFieldType53);
        int int55 = dateTimeZone24.getOffset((org.joda.time.ReadableInstant) instant51);
        org.joda.time.DateTime dateTime56 = instant51.toDateTimeISO();
        org.joda.time.Instant instant58 = new org.joda.time.Instant(3155760000000L);
        org.joda.time.Instant instant59 = instant58.toInstant();
        int int60 = dateTime56.compareTo((org.joda.time.ReadableInstant) instant58);
        org.joda.time.Instant instant62 = new org.joda.time.Instant(52L);
        boolean boolean63 = instant62.isEqualNow();
        java.lang.String str64 = instant62.toString();
        org.joda.time.Instant instant66 = new org.joda.time.Instant(52L);
        boolean boolean67 = instant66.isEqualNow();
        java.lang.String str68 = instant66.toString();
        java.lang.String str69 = instant66.toString();
        org.joda.time.Instant instant72 = instant66.withDurationAdded(115200000L, (int) (short) 1);
        int int73 = instant62.compareTo((org.joda.time.ReadableInstant) instant66);
        org.joda.time.Instant instant75 = new org.joda.time.Instant(52L);
        boolean boolean76 = instant75.isEqualNow();
        org.joda.time.ReadableDuration readableDuration77 = null;
        org.joda.time.Instant instant78 = instant75.plus(readableDuration77);
        boolean boolean80 = instant78.equals((java.lang.Object) ' ');
        boolean boolean81 = instant66.isAfter((org.joda.time.ReadableInstant) instant78);
        java.lang.String str82 = instant78.toString();
        java.lang.String str83 = instant78.toString();
        boolean boolean84 = dateTime56.isEqual((org.joda.time.ReadableInstant) instant78);
        org.joda.time.DateTimeZone dateTimeZone85 = dateTime56.getZone();
        org.joda.time.DateTime dateTime86 = dateTime21.toDateTime(dateTimeZone85);
        java.util.TimeZone timeZone87 = null;
        org.joda.time.DateTimeZone dateTimeZone88 = org.joda.time.DateTimeZone.forTimeZone(timeZone87);
        org.joda.time.chrono.GJChronology gJChronology89 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone88);
        org.joda.time.DateTimeField dateTimeField90 = gJChronology89.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField91 = gJChronology89.weekyearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime92 = dateTime21.toMutableDateTime((org.joda.time.Chronology) gJChronology89);
        boolean boolean93 = gJChronology2.equals((java.lang.Object) gJChronology89);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant20 and dateTime21", (instant20.compareTo(dateTime21) == 0) == instant20.equals(dateTime21));
    }

    @Test
    public void test1724() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1724");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField3 = gJChronology2.millisOfSecond();
        org.joda.time.DurationField durationField4 = gJChronology2.millis();
        org.joda.time.DurationField durationField5 = gJChronology2.weekyears();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology2.dayOfYear();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology2.yearOfEra();
        org.joda.time.DateTimeField dateTimeField8 = gJChronology2.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField9 = gJChronology2.era();
        org.joda.time.DurationField durationField10 = gJChronology2.centuries();
        java.util.TimeZone timeZone11 = null;
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forTimeZone(timeZone11);
        java.util.TimeZone timeZone13 = null;
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forTimeZone(timeZone13);
        org.joda.time.chrono.GJChronology gJChronology15 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone14);
        int int17 = dateTimeZone14.getOffsetFromLocal(1000L);
        long long19 = dateTimeZone12.getMillisKeepLocal(dateTimeZone14, (-61827926399999L));
        java.lang.String str20 = dateTimeZone14.toString();
        org.joda.time.Instant instant22 = new org.joda.time.Instant(52L);
        boolean boolean23 = instant22.isEqualNow();
        org.joda.time.ReadableDuration readableDuration24 = null;
        org.joda.time.Instant instant25 = instant22.plus(readableDuration24);
        long long26 = instant22.getMillis();
        java.lang.String str27 = instant22.toString();
        org.joda.time.Instant instant28 = instant22.toInstant();
        org.joda.time.Instant instant30 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone31 = null;
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.forTimeZone(timeZone31);
        org.joda.time.chrono.GJChronology gJChronology33 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone32);
        org.joda.time.DateTimeField dateTimeField34 = gJChronology33.millisOfSecond();
        int int35 = instant30.get(dateTimeField34);
        org.joda.time.Chronology chronology36 = instant30.getChronology();
        boolean boolean37 = instant22.isBefore((org.joda.time.ReadableInstant) instant30);
        boolean boolean39 = instant22.isEqual(1136050274678400000L);
        org.joda.time.chrono.GJChronology gJChronology40 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone14, (org.joda.time.ReadableInstant) instant22);
        org.joda.time.Instant instant42 = new org.joda.time.Instant(52L);
        boolean boolean43 = instant42.isEqualNow();
        java.lang.String str44 = instant42.toString();
        java.util.TimeZone timeZone45 = null;
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.forTimeZone(timeZone45);
        org.joda.time.chrono.GJChronology gJChronology47 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone46);
        java.util.Locale locale49 = new java.util.Locale("hi!");
        java.lang.String str50 = locale49.getCountry();
        java.util.Locale locale51 = java.util.Locale.getDefault();
        java.lang.String str52 = locale51.getDisplayName();
        java.lang.String str53 = locale49.getDisplayScript(locale51);
        boolean boolean54 = dateTimeZone46.equals((java.lang.Object) locale51);
        int int56 = dateTimeZone46.getOffsetFromLocal((long) (short) 10);
        java.util.TimeZone timeZone57 = null;
        org.joda.time.DateTimeZone dateTimeZone58 = org.joda.time.DateTimeZone.forTimeZone(timeZone57);
        org.joda.time.chrono.GJChronology gJChronology59 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone58);
        org.joda.time.DateTimeField dateTimeField60 = gJChronology59.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField61 = gJChronology59.weekyearOfCentury();
        org.joda.time.Instant instant62 = gJChronology59.getGregorianCutover();
        org.joda.time.Instant instant64 = instant62.withMillis(0L);
        org.joda.time.Instant instant66 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone67 = null;
        org.joda.time.DateTimeZone dateTimeZone68 = org.joda.time.DateTimeZone.forTimeZone(timeZone67);
        org.joda.time.chrono.GJChronology gJChronology69 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone68);
        org.joda.time.DateTimeField dateTimeField70 = gJChronology69.millisOfSecond();
        int int71 = instant66.get(dateTimeField70);
        org.joda.time.Instant instant73 = instant66.plus(0L);
        int int74 = instant64.compareTo((org.joda.time.ReadableInstant) instant73);
        org.joda.time.DateTimeFieldType dateTimeFieldType75 = null;
        boolean boolean76 = instant73.isSupported(dateTimeFieldType75);
        int int77 = dateTimeZone46.getOffset((org.joda.time.ReadableInstant) instant73);
        boolean boolean78 = instant42.isAfter((org.joda.time.ReadableInstant) instant73);
        int int79 = dateTimeZone14.getOffset((org.joda.time.ReadableInstant) instant42);
        org.joda.time.Chronology chronology80 = gJChronology2.withZone(dateTimeZone14);
        org.joda.time.Instant instant82 = new org.joda.time.Instant(52L);
        boolean boolean83 = instant82.isEqualNow();
        org.joda.time.ReadableDuration readableDuration84 = null;
        org.joda.time.Instant instant85 = instant82.plus(readableDuration84);
        long long86 = instant82.getMillis();
        java.lang.String str87 = instant82.toString();
        org.joda.time.Instant instant88 = instant82.toInstant();
        org.joda.time.DateTime dateTime89 = instant82.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone90 = dateTime89.getZone();
        org.joda.time.Chronology chronology91 = gJChronology2.withZone(dateTimeZone90);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant22 and dateTime89", (instant22.compareTo(dateTime89) == 0) == instant22.equals(dateTime89));
    }

    @Test
    public void test1725() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1725");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.Instant instant2 = new org.joda.time.Instant(52L);
        boolean boolean3 = instant2.isEqualNow();
        java.lang.String str4 = instant2.toString();
        java.lang.String str5 = instant2.toString();
        org.joda.time.Instant instant8 = instant2.withDurationAdded(115200000L, (int) (short) 1);
        org.joda.time.Instant instant10 = new org.joda.time.Instant(52L);
        boolean boolean11 = instant10.isEqualNow();
        java.lang.String str12 = instant10.toString();
        org.joda.time.Instant instant14 = new org.joda.time.Instant(52L);
        boolean boolean15 = instant14.isEqualNow();
        java.lang.String str16 = instant14.toString();
        java.lang.String str17 = instant14.toString();
        org.joda.time.Instant instant20 = instant14.withDurationAdded(115200000L, (int) (short) 1);
        int int21 = instant10.compareTo((org.joda.time.ReadableInstant) instant14);
        int int22 = instant8.compareTo((org.joda.time.ReadableInstant) instant10);
        java.util.TimeZone timeZone23 = null;
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forTimeZone(timeZone23);
        org.joda.time.chrono.GJChronology gJChronology25 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone24);
        org.joda.time.DurationField durationField26 = gJChronology25.halfdays();
        org.joda.time.DateTimeField dateTimeField27 = gJChronology25.millisOfDay();
        org.joda.time.DateTimeField dateTimeField28 = gJChronology25.minuteOfDay();
        org.joda.time.DurationField durationField29 = gJChronology25.centuries();
        org.joda.time.DateTimeField dateTimeField30 = gJChronology25.yearOfEra();
        org.joda.time.DateTimeField dateTimeField31 = gJChronology25.millisOfDay();
        int int32 = instant8.get(dateTimeField31);
        org.joda.time.ReadableInstant readableInstant33 = null;
        boolean boolean34 = instant8.isBefore(readableInstant33);
        org.joda.time.ReadableDuration readableDuration35 = null;
        org.joda.time.Instant instant36 = instant8.plus(readableDuration35);
        org.joda.time.DateTime dateTime37 = instant8.toDateTimeISO();
        org.joda.time.chrono.GJChronology gJChronology38 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, (org.joda.time.ReadableInstant) instant8);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant20 and dateTime37", (instant20.compareTo(dateTime37) == 0) == instant20.equals(dateTime37));
    }

    @Test
    public void test1726() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1726");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        boolean boolean2 = instant1.isEqualNow();
        java.lang.String str3 = instant1.toString();
        org.joda.time.Instant instant5 = new org.joda.time.Instant(52L);
        boolean boolean6 = instant5.isEqualNow();
        java.lang.String str7 = instant5.toString();
        java.lang.String str8 = instant5.toString();
        org.joda.time.Instant instant11 = instant5.withDurationAdded(115200000L, (int) (short) 1);
        int int12 = instant1.compareTo((org.joda.time.ReadableInstant) instant5);
        org.joda.time.Instant instant14 = new org.joda.time.Instant(52L);
        boolean boolean15 = instant14.isEqualNow();
        org.joda.time.ReadableDuration readableDuration16 = null;
        org.joda.time.Instant instant17 = instant14.plus(readableDuration16);
        boolean boolean19 = instant17.equals((java.lang.Object) ' ');
        boolean boolean20 = instant5.isAfter((org.joda.time.ReadableInstant) instant17);
        java.lang.String str21 = instant17.toString();
        java.util.TimeZone timeZone22 = null;
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        org.joda.time.chrono.GJChronology gJChronology24 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone23);
        org.joda.time.DurationField durationField25 = gJChronology24.halfdays();
        long long29 = gJChronology24.add(0L, (long) (short) -1, (int) '4');
        org.joda.time.Instant instant30 = gJChronology24.getGregorianCutover();
        boolean boolean31 = instant17.isAfter((org.joda.time.ReadableInstant) instant30);
        org.joda.time.ReadableDuration readableDuration32 = null;
        org.joda.time.Instant instant33 = instant17.minus(readableDuration32);
        java.util.TimeZone timeZone34 = null;
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.forTimeZone(timeZone34);
        org.joda.time.chrono.GJChronology gJChronology36 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone35);
        org.joda.time.DurationField durationField37 = gJChronology36.halfdays();
        org.joda.time.DateTimeField dateTimeField38 = gJChronology36.millisOfDay();
        org.joda.time.DateTimeField dateTimeField39 = gJChronology36.minuteOfDay();
        org.joda.time.DurationField durationField40 = gJChronology36.centuries();
        org.joda.time.DateTimeField dateTimeField41 = gJChronology36.dayOfYear();
        java.lang.String str42 = gJChronology36.toString();
        org.joda.time.DateTimeField dateTimeField43 = gJChronology36.minuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone44 = gJChronology36.getZone();
        org.joda.time.DateTime dateTime45 = instant33.toDateTime(dateTimeZone44);
        org.joda.time.Instant instant48 = instant33.withDurationAdded((-599939L), (-25));
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and dateTime45", (instant1.compareTo(dateTime45) == 0) == instant1.equals(dateTime45));
    }

    @Test
    public void test1727() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1727");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        boolean boolean2 = instant1.isEqualNow();
        org.joda.time.ReadableDuration readableDuration3 = null;
        org.joda.time.Instant instant4 = instant1.plus(readableDuration3);
        long long5 = instant1.getMillis();
        java.lang.Object obj6 = null;
        boolean boolean7 = instant1.equals(obj6);
        java.util.TimeZone timeZone8 = null;
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forTimeZone(timeZone8);
        org.joda.time.chrono.GJChronology gJChronology10 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone9);
        org.joda.time.DateTimeField dateTimeField11 = gJChronology10.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField12 = gJChronology10.weekyearOfCentury();
        org.joda.time.Instant instant13 = gJChronology10.getGregorianCutover();
        org.joda.time.Instant instant15 = new org.joda.time.Instant(52L);
        boolean boolean16 = instant15.isEqualNow();
        java.lang.String str17 = instant15.toString();
        java.lang.String str18 = instant15.toString();
        org.joda.time.Instant instant20 = new org.joda.time.Instant(52L);
        boolean boolean21 = instant20.isEqualNow();
        org.joda.time.ReadableDuration readableDuration22 = null;
        org.joda.time.Instant instant23 = instant20.plus(readableDuration22);
        boolean boolean24 = instant15.isBefore((org.joda.time.ReadableInstant) instant23);
        org.joda.time.Instant instant26 = instant23.plus((long) (short) 100);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.MutableDateTime mutableDateTime28 = instant23.toMutableDateTime(chronology27);
        boolean boolean29 = instant13.isEqual((org.joda.time.ReadableInstant) mutableDateTime28);
        boolean boolean30 = instant1.isAfter((org.joda.time.ReadableInstant) mutableDateTime28);
        org.joda.time.Instant instant31 = instant1.toInstant();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant31 and mutableDateTime28", (instant31.compareTo(mutableDateTime28) == 0) == instant31.equals(mutableDateTime28));
    }

    @Test
    public void test1728() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1728");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        boolean boolean2 = instant1.isEqualNow();
        org.joda.time.ReadableDuration readableDuration3 = null;
        org.joda.time.Instant instant4 = instant1.plus(readableDuration3);
        long long5 = instant1.getMillis();
        java.lang.String str6 = instant1.toString();
        org.joda.time.Instant instant7 = instant1.toInstant();
        java.util.TimeZone timeZone8 = null;
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forTimeZone(timeZone8);
        java.lang.String str11 = dateTimeZone9.getNameKey((long) 100);
        long long14 = dateTimeZone9.convertLocalToUTC((-2246399965L), true);
        org.joda.time.MutableDateTime mutableDateTime15 = instant7.toMutableDateTime(dateTimeZone9);
        int int17 = dateTimeZone9.getOffset(25925166840100L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone9);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and mutableDateTime15", (instant1.compareTo(mutableDateTime15) == 0) == instant1.equals(mutableDateTime15));
    }

    @Test
    public void test1729() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1729");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(13, 4);
        long long4 = dateTimeZone2.previousTransition((-61827926473049L));
        int int6 = dateTimeZone2.getOffset((-102228000L));
        java.lang.String str8 = dateTimeZone2.getShortName(17296800364L);
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetMillis((int) '4');
        java.util.TimeZone timeZone11 = dateTimeZone10.toTimeZone();
        long long14 = dateTimeZone10.adjustOffset((long) 0, false);
        int int16 = dateTimeZone10.getOffsetFromLocal((-26438399999L));
        java.util.TimeZone timeZone17 = dateTimeZone10.toTimeZone();
        java.lang.String str19 = dateTimeZone10.getShortName((-53L));
        java.util.TimeZone timeZone20 = null;
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forTimeZone(timeZone20);
        org.joda.time.chrono.GJChronology gJChronology22 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone21);
        org.joda.time.DurationField durationField23 = gJChronology22.halfdays();
        long long27 = gJChronology22.add((long) 'a', (-1L), (int) (short) 0);
        org.joda.time.DateTimeField dateTimeField28 = gJChronology22.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField29 = gJChronology22.secondOfMinute();
        org.joda.time.Instant instant31 = new org.joda.time.Instant(52L);
        boolean boolean32 = instant31.isEqualNow();
        org.joda.time.ReadableDuration readableDuration33 = null;
        org.joda.time.Instant instant34 = instant31.plus(readableDuration33);
        boolean boolean35 = gJChronology22.equals((java.lang.Object) instant31);
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = null;
        boolean boolean37 = instant31.isSupported(dateTimeFieldType36);
        org.joda.time.DateTimeFieldType dateTimeFieldType38 = null;
        boolean boolean39 = instant31.isSupported(dateTimeFieldType38);
        org.joda.time.DateTimeZone dateTimeZone40 = instant31.getZone();
        org.joda.time.Instant instant42 = instant31.plus((long) 'a');
        org.joda.time.ReadableDuration readableDuration43 = null;
        org.joda.time.Instant instant44 = instant31.minus(readableDuration43);
        int int45 = dateTimeZone10.getOffset((org.joda.time.ReadableInstant) instant31);
        boolean boolean46 = instant31.isBeforeNow();
        java.util.TimeZone timeZone47 = null;
        org.joda.time.DateTimeZone dateTimeZone48 = org.joda.time.DateTimeZone.forTimeZone(timeZone47);
        java.lang.String str50 = dateTimeZone48.getNameKey((long) 100);
        boolean boolean51 = dateTimeZone48.isFixed();
        long long54 = dateTimeZone48.adjustOffset((long) (short) 10, true);
        boolean boolean56 = dateTimeZone48.equals((java.lang.Object) "durationfield[months]");
        org.joda.time.DateTime dateTime57 = instant31.toDateTime(dateTimeZone48);
        boolean boolean58 = dateTimeZone48.isFixed();
        java.lang.String str60 = dateTimeZone48.getShortName((-311655009643881L));
        long long62 = dateTimeZone2.getMillisKeepLocal(dateTimeZone48, (-950400000L));
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant31 and dateTime57", (instant31.compareTo(dateTime57) == 0) == instant31.equals(dateTime57));
    }

    @Test
    public void test1730() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1730");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        boolean boolean2 = instant1.isEqualNow();
        org.joda.time.ReadableDuration readableDuration3 = null;
        org.joda.time.Instant instant4 = instant1.plus(readableDuration3);
        long long5 = instant1.getMillis();
        org.joda.time.Instant instant8 = instant1.withDurationAdded((long) 'a', (int) (byte) 10);
        org.joda.time.Instant instant10 = instant8.minus(3155760000052L);
        long long11 = instant8.getMillis();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 0, (int) (byte) 1);
        java.lang.String str16 = dateTimeZone14.getNameKey((-61827926399999L));
        long long20 = dateTimeZone14.convertLocalToUTC(5200L, false, 186641343849600000L);
        long long22 = dateTimeZone14.previousTransition(25107085123201869L);
        org.joda.time.MutableDateTime mutableDateTime23 = instant8.toMutableDateTime(dateTimeZone14);
        org.joda.time.DateTimeZone dateTimeZone24 = mutableDateTime23.getZone();
        java.util.TimeZone timeZone25 = null;
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forTimeZone(timeZone25);
        org.joda.time.chrono.GJChronology gJChronology27 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone26);
        org.joda.time.DateTimeField dateTimeField28 = gJChronology27.era();
        org.joda.time.DateTimeField dateTimeField29 = gJChronology27.weekyear();
        org.joda.time.DateTimeField dateTimeField30 = gJChronology27.weekyearOfCentury();
        org.joda.time.DurationField durationField31 = gJChronology27.millis();
        org.joda.time.DateTimeField dateTimeField32 = gJChronology27.dayOfWeek();
        org.joda.time.DurationField durationField33 = gJChronology27.millis();
        org.joda.time.Instant instant34 = gJChronology27.getGregorianCutover();
        org.joda.time.Instant instant37 = instant34.withDurationAdded((-61352915L), (-19));
        boolean boolean38 = instant37.isAfterNow();
        java.util.TimeZone timeZone39 = null;
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.forTimeZone(timeZone39);
        org.joda.time.chrono.GJChronology gJChronology41 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone40);
        org.joda.time.DateTimeField dateTimeField42 = gJChronology41.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField43 = gJChronology41.weekyear();
        org.joda.time.DurationField durationField44 = gJChronology41.centuries();
        org.joda.time.DateTimeField dateTimeField45 = gJChronology41.millisOfDay();
        org.joda.time.DateTimeField dateTimeField46 = gJChronology41.secondOfMinute();
        org.joda.time.DateTime dateTime47 = instant37.toDateTime((org.joda.time.Chronology) gJChronology41);
        java.util.TimeZone timeZone48 = null;
        org.joda.time.DateTimeZone dateTimeZone49 = org.joda.time.DateTimeZone.forTimeZone(timeZone48);
        org.joda.time.chrono.GJChronology gJChronology50 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone49);
        org.joda.time.DurationField durationField51 = gJChronology50.halfdays();
        long long55 = gJChronology50.add((long) 'a', (-1L), (int) (short) 0);
        long long59 = gJChronology50.add((long) (byte) 0, (long) '4', 100);
        org.joda.time.DateTimeField dateTimeField60 = gJChronology50.minuteOfHour();
        org.joda.time.DurationField durationField61 = gJChronology50.hours();
        org.joda.time.DateTimeField dateTimeField62 = gJChronology50.hourOfHalfday();
        java.util.TimeZone timeZone63 = null;
        org.joda.time.DateTimeZone dateTimeZone64 = org.joda.time.DateTimeZone.forTimeZone(timeZone63);
        org.joda.time.chrono.GJChronology gJChronology65 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone64);
        java.util.Locale locale67 = new java.util.Locale("hi!");
        java.lang.String str68 = locale67.getCountry();
        java.util.Locale locale69 = java.util.Locale.getDefault();
        java.lang.String str70 = locale69.getDisplayName();
        java.lang.String str71 = locale67.getDisplayScript(locale69);
        boolean boolean72 = dateTimeZone64.equals((java.lang.Object) locale69);
        org.joda.time.Chronology chronology73 = gJChronology50.withZone(dateTimeZone64);
        org.joda.time.DateTimeField dateTimeField74 = gJChronology50.dayOfWeek();
        org.joda.time.DurationField durationField75 = gJChronology50.seconds();
        org.joda.time.DurationField durationField76 = gJChronology50.days();
        org.joda.time.DateTimeField dateTimeField77 = gJChronology50.millisOfSecond();
        org.joda.time.DateTime dateTime78 = dateTime47.toDateTime((org.joda.time.Chronology) gJChronology50);
        int int79 = dateTimeZone24.getOffset((org.joda.time.ReadableInstant) dateTime78);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant8 and mutableDateTime23", (instant8.compareTo(mutableDateTime23) == 0) == instant8.equals(mutableDateTime23));
    }

    @Test
    public void test1731() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1731");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        boolean boolean2 = instant1.isEqualNow();
        org.joda.time.ReadableDuration readableDuration3 = null;
        org.joda.time.Instant instant4 = instant1.plus(readableDuration3);
        long long5 = instant1.getMillis();
        java.lang.String str6 = instant1.toString();
        org.joda.time.Instant instant7 = instant1.toInstant();
        org.joda.time.DateTime dateTime8 = instant1.toDateTime();
        org.joda.time.ReadableInstant readableInstant9 = null;
        boolean boolean10 = dateTime8.isBefore(readableInstant9);
        boolean boolean12 = dateTime8.isEqual(0L);
        org.joda.time.DateTimeZone dateTimeZone13 = dateTime8.getZone();
        java.util.Locale locale16 = new java.util.Locale("DurationField[halfdays]", "\u82f1\u6587");
        java.util.Set<java.lang.Character> charSet17 = locale16.getExtensionKeys();
        java.lang.String str18 = locale16.getDisplayCountry();
        java.lang.String str19 = locale16.getDisplayVariant();
        java.util.Locale.setDefault(locale16);
        boolean boolean21 = dateTimeZone13.equals((java.lang.Object) locale16);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and dateTime8", (instant1.compareTo(dateTime8) == 0) == instant1.equals(dateTime8));
    }

    @Test
    public void test1732() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1732");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = gJChronology2.halfdays();
        long long7 = gJChronology2.add((long) 'a', (-1L), (int) (short) 0);
        org.joda.time.DateTimeField dateTimeField8 = gJChronology2.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField9 = gJChronology2.secondOfMinute();
        org.joda.time.Instant instant11 = new org.joda.time.Instant(52L);
        boolean boolean12 = instant11.isEqualNow();
        org.joda.time.ReadableDuration readableDuration13 = null;
        org.joda.time.Instant instant14 = instant11.plus(readableDuration13);
        boolean boolean15 = gJChronology2.equals((java.lang.Object) instant11);
        java.util.TimeZone timeZone16 = null;
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forTimeZone(timeZone16);
        org.joda.time.chrono.GJChronology gJChronology18 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone17);
        org.joda.time.DurationField durationField19 = gJChronology18.halfdays();
        org.joda.time.DateTimeField dateTimeField20 = gJChronology18.millisOfDay();
        org.joda.time.DateTimeField dateTimeField21 = gJChronology18.minuteOfDay();
        org.joda.time.DurationField durationField22 = gJChronology18.centuries();
        org.joda.time.DateTimeField dateTimeField23 = gJChronology18.dayOfYear();
        java.lang.String str24 = gJChronology18.toString();
        org.joda.time.DateTimeField dateTimeField25 = gJChronology18.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone26 = gJChronology18.getZone();
        org.joda.time.DateTime dateTime27 = instant11.toDateTime((org.joda.time.Chronology) gJChronology18);
        java.util.TimeZone timeZone28 = null;
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forTimeZone(timeZone28);
        java.lang.String str31 = dateTimeZone29.getNameKey((long) 100);
        boolean boolean32 = dateTimeZone29.isFixed();
        java.lang.String str33 = dateTimeZone29.toString();
        boolean boolean35 = dateTimeZone29.isStandardOffset((long) (byte) 0);
        java.util.TimeZone timeZone36 = null;
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.forTimeZone(timeZone36);
        org.joda.time.chrono.GJChronology gJChronology38 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone37);
        org.joda.time.DurationField durationField39 = gJChronology38.halfdays();
        org.joda.time.DateTimeField dateTimeField40 = gJChronology38.millisOfDay();
        org.joda.time.DateTimeField dateTimeField41 = gJChronology38.minuteOfDay();
        org.joda.time.DurationField durationField42 = gJChronology38.centuries();
        org.joda.time.DateTimeField dateTimeField43 = gJChronology38.dayOfYear();
        org.joda.time.DateTimeField dateTimeField44 = gJChronology38.weekyearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(1, 10);
        java.util.TimeZone timeZone48 = null;
        org.joda.time.DateTimeZone dateTimeZone49 = org.joda.time.DateTimeZone.forTimeZone(timeZone48);
        long long51 = dateTimeZone47.getMillisKeepLocal(dateTimeZone49, 4320000000L);
        java.util.TimeZone timeZone52 = null;
        org.joda.time.DateTimeZone dateTimeZone53 = org.joda.time.DateTimeZone.forTimeZone(timeZone52);
        java.lang.String str55 = dateTimeZone53.getNameKey((long) 100);
        boolean boolean56 = dateTimeZone53.isFixed();
        java.lang.String str57 = dateTimeZone53.toString();
        java.lang.String str58 = dateTimeZone53.getID();
        long long60 = dateTimeZone49.getMillisKeepLocal(dateTimeZone53, (long) (byte) -1);
        org.joda.time.Chronology chronology61 = gJChronology38.withZone(dateTimeZone53);
        org.joda.time.Instant instant62 = gJChronology38.getGregorianCutover();
        int int63 = dateTimeZone29.getOffset((org.joda.time.ReadableInstant) instant62);
        java.lang.String str64 = dateTimeZone29.toString();
        org.joda.time.DateTime dateTime65 = dateTime27.toDateTime(dateTimeZone29);
        org.joda.time.DateTimeZone dateTimeZone66 = dateTime65.getZone();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant11 and dateTime65", (instant11.compareTo(dateTime65) == 0) == instant11.equals(dateTime65));
    }

    @Test
    public void test1733() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1733");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forTimeZone(timeZone2);
        org.joda.time.chrono.GJChronology gJChronology4 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone3);
        org.joda.time.DateTimeField dateTimeField5 = gJChronology4.millisOfSecond();
        int int6 = instant1.get(dateTimeField5);
        org.joda.time.Instant instant8 = instant1.plus(0L);
        java.util.TimeZone timeZone9 = null;
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forTimeZone(timeZone9);
        org.joda.time.chrono.GJChronology gJChronology11 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone10);
        org.joda.time.DurationField durationField12 = gJChronology11.halfdays();
        org.joda.time.Chronology chronology13 = gJChronology11.withUTC();
        java.lang.String str14 = gJChronology11.toString();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology11.hourOfHalfday();
        int int16 = instant1.get(dateTimeField15);
        java.util.TimeZone timeZone17 = null;
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forTimeZone(timeZone17);
        org.joda.time.chrono.GJChronology gJChronology19 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone18);
        org.joda.time.DurationField durationField20 = gJChronology19.halfdays();
        long long24 = gJChronology19.add((long) 'a', (-1L), (int) (short) 0);
        org.joda.time.DateTimeField dateTimeField25 = gJChronology19.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField26 = gJChronology19.secondOfMinute();
        org.joda.time.Instant instant28 = new org.joda.time.Instant(52L);
        boolean boolean29 = instant28.isEqualNow();
        org.joda.time.ReadableDuration readableDuration30 = null;
        org.joda.time.Instant instant31 = instant28.plus(readableDuration30);
        boolean boolean32 = gJChronology19.equals((java.lang.Object) instant28);
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = null;
        boolean boolean34 = instant28.isSupported(dateTimeFieldType33);
        org.joda.time.DateTimeFieldType dateTimeFieldType35 = null;
        boolean boolean36 = instant28.isSupported(dateTimeFieldType35);
        org.joda.time.DateTimeZone dateTimeZone37 = instant28.getZone();
        boolean boolean38 = instant1.isAfter((org.joda.time.ReadableInstant) instant28);
        org.joda.time.Instant instant39 = instant1.toInstant();
        org.joda.time.MutableDateTime mutableDateTime40 = instant1.toMutableDateTimeISO();
        java.util.TimeZone timeZone41 = null;
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.forTimeZone(timeZone41);
        java.lang.String str44 = dateTimeZone42.getNameKey((long) 100);
        boolean boolean45 = dateTimeZone42.isFixed();
        org.joda.time.chrono.GJChronology gJChronology46 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone42);
        org.joda.time.DurationField durationField47 = gJChronology46.hours();
        org.joda.time.DateTimeField dateTimeField48 = gJChronology46.weekyear();
        org.joda.time.DateTimeField dateTimeField49 = gJChronology46.year();
        org.joda.time.DurationField durationField50 = gJChronology46.days();
        org.joda.time.DateTimeField dateTimeField51 = gJChronology46.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField52 = gJChronology46.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField53 = gJChronology46.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField54 = gJChronology46.minuteOfHour();
        int int55 = instant1.get(dateTimeField54);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and mutableDateTime40", (instant1.compareTo(mutableDateTime40) == 0) == instant1.equals(mutableDateTime40));
    }

    @Test
    public void test1734() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1734");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forTimeZone(timeZone2);
        org.joda.time.chrono.GJChronology gJChronology4 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone3);
        org.joda.time.DateTimeField dateTimeField5 = gJChronology4.millisOfSecond();
        int int6 = instant1.get(dateTimeField5);
        org.joda.time.Instant instant8 = instant1.plus(0L);
        org.joda.time.Instant instant9 = instant8.toInstant();
        org.joda.time.Instant instant11 = new org.joda.time.Instant(52L);
        boolean boolean12 = instant11.isEqualNow();
        java.lang.String str13 = instant11.toString();
        java.lang.String str14 = instant11.toString();
        org.joda.time.Instant instant16 = new org.joda.time.Instant(52L);
        boolean boolean17 = instant16.isEqualNow();
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.Instant instant19 = instant16.plus(readableDuration18);
        boolean boolean20 = instant11.isBefore((org.joda.time.ReadableInstant) instant19);
        org.joda.time.Instant instant22 = instant11.minus((long) 0);
        int int23 = instant8.compareTo((org.joda.time.ReadableInstant) instant11);
        org.joda.time.Instant instant26 = instant11.withDurationAdded((long) (short) 100, 70);
        java.util.TimeZone timeZone27 = null;
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forTimeZone(timeZone27);
        org.joda.time.chrono.GJChronology gJChronology29 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone28);
        int int31 = dateTimeZone28.getOffsetFromLocal(1000L);
        org.joda.time.MutableDateTime mutableDateTime32 = instant26.toMutableDateTime(dateTimeZone28);
        org.joda.time.ReadableDuration readableDuration33 = null;
        org.joda.time.Instant instant35 = instant26.withDurationAdded(readableDuration33, (int) (byte) 1);
        org.joda.time.Instant instant37 = new org.joda.time.Instant(52L);
        boolean boolean38 = instant37.isEqualNow();
        org.joda.time.ReadableDuration readableDuration39 = null;
        org.joda.time.Instant instant40 = instant37.plus(readableDuration39);
        long long41 = instant37.getMillis();
        java.lang.String str42 = instant37.toString();
        org.joda.time.Instant instant43 = instant37.toInstant();
        java.util.TimeZone timeZone44 = null;
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.forTimeZone(timeZone44);
        java.lang.String str47 = dateTimeZone45.getNameKey((long) 100);
        long long50 = dateTimeZone45.convertLocalToUTC((-2246399965L), true);
        org.joda.time.MutableDateTime mutableDateTime51 = instant43.toMutableDateTime(dateTimeZone45);
        boolean boolean53 = mutableDateTime51.isEqual((long) '#');
        org.joda.time.DateTimeZone dateTimeZone54 = mutableDateTime51.getZone();
        java.util.TimeZone timeZone55 = null;
        org.joda.time.DateTimeZone dateTimeZone56 = org.joda.time.DateTimeZone.forTimeZone(timeZone55);
        org.joda.time.chrono.GJChronology gJChronology57 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone56);
        org.joda.time.DurationField durationField58 = gJChronology57.halfdays();
        org.joda.time.DateTimeField dateTimeField59 = gJChronology57.millisOfDay();
        org.joda.time.DateTimeField dateTimeField60 = gJChronology57.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField61 = gJChronology57.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField62 = gJChronology57.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField63 = gJChronology57.weekOfWeekyear();
        org.joda.time.DurationField durationField64 = gJChronology57.days();
        org.joda.time.Instant instant65 = gJChronology57.getGregorianCutover();
        boolean boolean66 = mutableDateTime51.equals((java.lang.Object) instant65);
        boolean boolean67 = instant26.isEqual((org.joda.time.ReadableInstant) instant65);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and mutableDateTime51", (instant1.compareTo(mutableDateTime51) == 0) == instant1.equals(mutableDateTime51));
    }

    @Test
    public void test1735() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1735");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        java.lang.String str2 = instant1.toString();
        org.joda.time.DateTime dateTime3 = instant1.toDateTimeISO();
        java.util.TimeZone timeZone4 = null;
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forTimeZone(timeZone4);
        org.joda.time.chrono.GJChronology gJChronology6 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone5);
        org.joda.time.DurationField durationField7 = gJChronology6.halfdays();
        long long11 = gJChronology6.add((long) 'a', (-1L), (int) (short) 0);
        org.joda.time.DateTimeField dateTimeField12 = gJChronology6.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField13 = gJChronology6.centuryOfEra();
        long long17 = gJChronology6.add(262974600000L, (long) (byte) 100, (int) '4');
        org.joda.time.DateTimeField dateTimeField18 = gJChronology6.monthOfYear();
        boolean boolean19 = dateTime3.equals((java.lang.Object) gJChronology6);
        org.joda.time.DateTimeField dateTimeField20 = gJChronology6.yearOfEra();
        org.joda.time.DurationField durationField21 = gJChronology6.eras();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and dateTime3", (instant1.compareTo(dateTime3) == 0) == instant1.equals(dateTime3));
    }

    @Test
    public void test1736() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1736");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forTimeZone(timeZone2);
        org.joda.time.chrono.GJChronology gJChronology4 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone3);
        org.joda.time.DateTimeField dateTimeField5 = gJChronology4.millisOfSecond();
        int int6 = instant1.get(dateTimeField5);
        org.joda.time.Instant instant8 = instant1.plus(0L);
        org.joda.time.Instant instant9 = instant8.toInstant();
        org.joda.time.Instant instant11 = new org.joda.time.Instant(52L);
        boolean boolean12 = instant11.isEqualNow();
        java.lang.String str13 = instant11.toString();
        java.lang.String str14 = instant11.toString();
        org.joda.time.Instant instant16 = new org.joda.time.Instant(52L);
        boolean boolean17 = instant16.isEqualNow();
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.Instant instant19 = instant16.plus(readableDuration18);
        boolean boolean20 = instant11.isBefore((org.joda.time.ReadableInstant) instant19);
        org.joda.time.Instant instant22 = instant11.minus((long) 0);
        int int23 = instant8.compareTo((org.joda.time.ReadableInstant) instant11);
        org.joda.time.Instant instant26 = instant11.withDurationAdded((long) (short) 100, 70);
        org.joda.time.MutableDateTime mutableDateTime27 = instant26.toMutableDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone28 = instant26.getZone();
        java.lang.String str30 = dateTimeZone28.getName((-42L));
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant26 and mutableDateTime27", (instant26.compareTo(mutableDateTime27) == 0) == instant26.equals(mutableDateTime27));
    }

    @Test
    public void test1737() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1737");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forTimeZone(timeZone2);
        org.joda.time.chrono.GJChronology gJChronology4 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone3);
        org.joda.time.DateTimeField dateTimeField5 = gJChronology4.millisOfSecond();
        int int6 = instant1.get(dateTimeField5);
        boolean boolean7 = instant1.isEqualNow();
        org.joda.time.DateTime dateTime8 = instant1.toDateTime();
        org.joda.time.Instant instant11 = instant1.withDurationAdded((long) 1431201, 1970);
        org.joda.time.Instant instant13 = instant1.minus((long) (byte) 10);
        org.joda.time.ReadableDuration readableDuration14 = null;
        org.joda.time.Instant instant15 = instant1.plus(readableDuration14);
        java.util.TimeZone timeZone16 = null;
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forTimeZone(timeZone16);
        org.joda.time.chrono.GJChronology gJChronology18 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone17);
        org.joda.time.DurationField durationField19 = gJChronology18.halfdays();
        org.joda.time.DateTimeField dateTimeField20 = gJChronology18.millisOfDay();
        org.joda.time.DateTimeField dateTimeField21 = gJChronology18.minuteOfDay();
        org.joda.time.DurationField durationField22 = gJChronology18.centuries();
        org.joda.time.DateTimeField dateTimeField23 = gJChronology18.dayOfYear();
        org.joda.time.DateTimeField dateTimeField24 = gJChronology18.millisOfDay();
        org.joda.time.DateTimeField dateTimeField25 = gJChronology18.year();
        org.joda.time.DateTimeField dateTimeField26 = gJChronology18.weekyear();
        org.joda.time.DateTimeField dateTimeField27 = gJChronology18.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField28 = gJChronology18.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField29 = gJChronology18.year();
        int int30 = gJChronology18.getMinimumDaysInFirstWeek();
        boolean boolean31 = instant15.equals((java.lang.Object) int30);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant15 and dateTime8", (instant15.compareTo(dateTime8) == 0) == instant15.equals(dateTime8));
    }

    @Test
    public void test1738() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1738");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forTimeZone(timeZone2);
        org.joda.time.chrono.GJChronology gJChronology4 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone3);
        org.joda.time.DateTimeField dateTimeField5 = gJChronology4.millisOfSecond();
        int int6 = instant1.get(dateTimeField5);
        org.joda.time.Instant instant8 = instant1.plus(0L);
        org.joda.time.Instant instant9 = instant8.toInstant();
        org.joda.time.Instant instant11 = new org.joda.time.Instant(52L);
        boolean boolean12 = instant11.isEqualNow();
        java.lang.String str13 = instant11.toString();
        java.lang.String str14 = instant11.toString();
        org.joda.time.Instant instant16 = new org.joda.time.Instant(52L);
        boolean boolean17 = instant16.isEqualNow();
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.Instant instant19 = instant16.plus(readableDuration18);
        boolean boolean20 = instant11.isBefore((org.joda.time.ReadableInstant) instant19);
        org.joda.time.Instant instant22 = instant11.minus((long) 0);
        int int23 = instant8.compareTo((org.joda.time.ReadableInstant) instant11);
        boolean boolean25 = instant8.equals((java.lang.Object) 349200L);
        org.joda.time.DateTime dateTime26 = instant8.toDateTime();
        java.util.TimeZone timeZone27 = null;
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forTimeZone(timeZone27);
        org.joda.time.chrono.GJChronology gJChronology29 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone28);
        org.joda.time.DurationField durationField30 = gJChronology29.halfdays();
        org.joda.time.DateTimeField dateTimeField31 = gJChronology29.millisOfDay();
        org.joda.time.DateTimeField dateTimeField32 = gJChronology29.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField33 = gJChronology29.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField34 = gJChronology29.hourOfHalfday();
        org.joda.time.DurationField durationField35 = gJChronology29.seconds();
        org.joda.time.DateTimeField dateTimeField36 = gJChronology29.millisOfDay();
        org.joda.time.DateTimeField dateTimeField37 = gJChronology29.monthOfYear();
        org.joda.time.DateTime dateTime38 = dateTime26.toDateTime((org.joda.time.Chronology) gJChronology29);
        org.joda.time.Instant instant39 = new org.joda.time.Instant((java.lang.Object) dateTime38);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and dateTime26", (instant1.compareTo(dateTime26) == 0) == instant1.equals(dateTime26));
    }

    @Test
    public void test1739() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1739");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField3 = gJChronology2.millisOfSecond();
        org.joda.time.DurationField durationField4 = gJChronology2.millis();
        org.joda.time.DurationField durationField5 = gJChronology2.weeks();
        org.joda.time.DurationField durationField6 = gJChronology2.months();
        org.joda.time.DurationField durationField7 = gJChronology2.months();
        org.joda.time.DateTimeField dateTimeField8 = gJChronology2.hourOfHalfday();
        org.joda.time.Instant instant9 = gJChronology2.getGregorianCutover();
        org.joda.time.Instant instant11 = new org.joda.time.Instant(52L);
        boolean boolean12 = instant11.isEqualNow();
        java.lang.String str13 = instant11.toString();
        org.joda.time.Instant instant15 = new org.joda.time.Instant(52L);
        boolean boolean16 = instant15.isEqualNow();
        java.lang.String str17 = instant15.toString();
        java.lang.String str18 = instant15.toString();
        org.joda.time.Instant instant21 = instant15.withDurationAdded(115200000L, (int) (short) 1);
        int int22 = instant11.compareTo((org.joda.time.ReadableInstant) instant15);
        org.joda.time.Instant instant24 = new org.joda.time.Instant(52L);
        boolean boolean25 = instant24.isEqualNow();
        org.joda.time.ReadableDuration readableDuration26 = null;
        org.joda.time.Instant instant27 = instant24.plus(readableDuration26);
        boolean boolean29 = instant27.equals((java.lang.Object) ' ');
        boolean boolean30 = instant15.isAfter((org.joda.time.ReadableInstant) instant27);
        java.lang.String str31 = instant27.toString();
        java.util.TimeZone timeZone32 = null;
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.forTimeZone(timeZone32);
        org.joda.time.chrono.GJChronology gJChronology34 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone33);
        org.joda.time.DurationField durationField35 = gJChronology34.halfdays();
        long long39 = gJChronology34.add(0L, (long) (short) -1, (int) '4');
        org.joda.time.Instant instant40 = gJChronology34.getGregorianCutover();
        boolean boolean41 = instant27.isAfter((org.joda.time.ReadableInstant) instant40);
        java.util.TimeZone timeZone42 = null;
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.forTimeZone(timeZone42);
        org.joda.time.chrono.GJChronology gJChronology44 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone43);
        org.joda.time.DurationField durationField45 = gJChronology44.halfdays();
        org.joda.time.DateTimeField dateTimeField46 = gJChronology44.millisOfDay();
        org.joda.time.DateTimeField dateTimeField47 = gJChronology44.minuteOfDay();
        org.joda.time.DurationField durationField48 = gJChronology44.centuries();
        int int49 = gJChronology44.getMinimumDaysInFirstWeek();
        org.joda.time.DateTimeField dateTimeField50 = gJChronology44.weekyear();
        org.joda.time.DateTimeField dateTimeField51 = gJChronology44.weekyearOfCentury();
        org.joda.time.DurationField durationField52 = gJChronology44.halfdays();
        java.lang.String str53 = gJChronology44.toString();
        org.joda.time.DurationField durationField54 = gJChronology44.halfdays();
        org.joda.time.DateTime dateTime55 = instant40.toDateTime((org.joda.time.Chronology) gJChronology44);
        org.joda.time.DateTime dateTime56 = instant9.toDateTime((org.joda.time.Chronology) gJChronology44);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant9 and dateTime55", (instant9.compareTo(dateTime55) == 0) == instant9.equals(dateTime55));
    }

    @Test
    public void test1740() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1740");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = gJChronology2.halfdays();
        long long7 = gJChronology2.add((long) 'a', (-1L), (int) (short) 0);
        boolean boolean9 = gJChronology2.equals((java.lang.Object) 0);
        org.joda.time.DateTimeField dateTimeField10 = gJChronology2.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField11 = gJChronology2.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField12 = gJChronology2.clockhourOfDay();
        long long17 = gJChronology2.getDateTimeMillis(10, (int) (short) 10, 4, (int) (byte) 1);
        org.joda.time.Chronology chronology18 = gJChronology2.withUTC();
        org.joda.time.DateTimeField dateTimeField19 = gJChronology2.hourOfDay();
        org.joda.time.DurationField durationField20 = gJChronology2.eras();
        org.joda.time.DateTimeField dateTimeField21 = gJChronology2.millisOfSecond();
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField3 and durationField20", Math.signum(durationField3.compareTo(durationField20)) == -Math.signum(durationField20.compareTo(durationField3)));
    }

    @Test
    public void test1741() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1741");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = gJChronology2.halfdays();
        long long7 = gJChronology2.add(0L, (long) (short) -1, (int) '4');
        java.util.TimeZone timeZone8 = null;
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forTimeZone(timeZone8);
        org.joda.time.chrono.GJChronology gJChronology10 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone9);
        org.joda.time.DurationField durationField11 = gJChronology10.halfdays();
        org.joda.time.DateTimeField dateTimeField12 = gJChronology10.millisOfDay();
        org.joda.time.DateTimeField dateTimeField13 = gJChronology10.minuteOfDay();
        org.joda.time.DurationField durationField14 = gJChronology10.centuries();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology10.dayOfYear();
        java.lang.String str16 = gJChronology10.toString();
        org.joda.time.DurationField durationField17 = gJChronology10.years();
        org.joda.time.DateTimeField dateTimeField18 = gJChronology10.yearOfEra();
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(0, (int) (short) 10);
        org.joda.time.Chronology chronology22 = gJChronology10.withZone(dateTimeZone21);
        org.joda.time.Chronology chronology23 = gJChronology2.withZone(dateTimeZone21);
        org.joda.time.DurationField durationField24 = gJChronology2.halfdays();
        org.joda.time.Instant instant25 = gJChronology2.getGregorianCutover();
        org.joda.time.Instant instant27 = instant25.withMillis((long) (short) -1);
        boolean boolean29 = instant25.isEqual(849253L);
        org.joda.time.Instant instant31 = new org.joda.time.Instant(52L);
        boolean boolean32 = instant31.isEqualNow();
        java.lang.String str33 = instant31.toString();
        org.joda.time.DateTimeZone dateTimeZone34 = instant31.getZone();
        org.joda.time.Instant instant36 = instant31.minus((-2208729599948L));
        org.joda.time.ReadableDuration readableDuration37 = null;
        org.joda.time.Instant instant38 = instant31.plus(readableDuration37);
        int int39 = instant25.compareTo((org.joda.time.ReadableInstant) instant31);
        org.joda.time.DateTime dateTime40 = instant31.toDateTimeISO();
        org.joda.time.Instant instant41 = dateTime40.toInstant();
        boolean boolean42 = instant41.isEqualNow();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant31 and dateTime40", (instant31.compareTo(dateTime40) == 0) == instant31.equals(dateTime40));
    }

    @Test
    public void test1742() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1742");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forTimeZone(timeZone2);
        org.joda.time.chrono.GJChronology gJChronology4 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone3);
        org.joda.time.DateTimeField dateTimeField5 = gJChronology4.millisOfSecond();
        int int6 = instant1.get(dateTimeField5);
        boolean boolean7 = instant1.isEqualNow();
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.Instant instant10 = instant1.withDurationAdded(readableDuration8, (int) (short) 0);
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.Instant instant12 = instant1.plus(readableDuration11);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = null;
        java.lang.String str14 = instant1.toString(dateTimeFormatter13);
        java.util.TimeZone timeZone15 = null;
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forTimeZone(timeZone15);
        org.joda.time.chrono.GJChronology gJChronology17 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone16);
        org.joda.time.DateTimeField dateTimeField18 = gJChronology17.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField19 = gJChronology17.weekyearOfCentury();
        org.joda.time.Instant instant20 = gJChronology17.getGregorianCutover();
        org.joda.time.Instant instant22 = instant20.withMillis(0L);
        org.joda.time.Instant instant24 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone25 = null;
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forTimeZone(timeZone25);
        org.joda.time.chrono.GJChronology gJChronology27 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone26);
        org.joda.time.DateTimeField dateTimeField28 = gJChronology27.millisOfSecond();
        int int29 = instant24.get(dateTimeField28);
        org.joda.time.Instant instant31 = instant24.plus(0L);
        int int32 = instant22.compareTo((org.joda.time.ReadableInstant) instant31);
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = null;
        boolean boolean34 = instant31.isSupported(dateTimeFieldType33);
        org.joda.time.Instant instant36 = new org.joda.time.Instant(52L);
        boolean boolean37 = instant36.isEqualNow();
        org.joda.time.ReadableDuration readableDuration38 = null;
        org.joda.time.Instant instant39 = instant36.plus(readableDuration38);
        int int40 = instant31.compareTo((org.joda.time.ReadableInstant) instant36);
        int int41 = instant1.compareTo((org.joda.time.ReadableInstant) instant36);
        org.joda.time.Instant instant43 = instant1.withMillis(43200000L);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter44 = null;
        java.lang.String str45 = instant43.toString(dateTimeFormatter44);
        org.joda.time.DateTime dateTime46 = instant43.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration47 = null;
        org.joda.time.Instant instant48 = instant43.plus(readableDuration47);
        org.joda.time.ReadableDuration readableDuration49 = null;
        org.joda.time.Instant instant50 = instant43.minus(readableDuration49);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime46 and instant50", (dateTime46.compareTo(instant50) == 0) == dateTime46.equals(instant50));
    }

    @Test
    public void test1743() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1743");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = gJChronology2.halfdays();
        long long7 = gJChronology2.add((long) 'a', (-1L), (int) (short) 0);
        long long11 = gJChronology2.add((long) (byte) 0, (long) '4', 100);
        org.joda.time.DurationField durationField12 = gJChronology2.years();
        org.joda.time.DateTimeField dateTimeField13 = gJChronology2.dayOfYear();
        org.joda.time.DateTimeField dateTimeField14 = gJChronology2.hourOfDay();
        org.joda.time.DurationField durationField15 = gJChronology2.weekyears();
        org.joda.time.DateTimeField dateTimeField16 = gJChronology2.secondOfDay();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on durationField12 and durationField15", (durationField12.compareTo(durationField15) == 0) == durationField12.equals(durationField15));
    }

    @Test
    public void test1744() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1744");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = gJChronology2.halfdays();
        long long7 = gJChronology2.add((long) 'a', (-1L), (int) (short) 0);
        org.joda.time.DateTimeField dateTimeField8 = gJChronology2.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField9 = gJChronology2.secondOfMinute();
        org.joda.time.Instant instant11 = new org.joda.time.Instant(52L);
        boolean boolean12 = instant11.isEqualNow();
        org.joda.time.ReadableDuration readableDuration13 = null;
        org.joda.time.Instant instant14 = instant11.plus(readableDuration13);
        boolean boolean15 = gJChronology2.equals((java.lang.Object) instant11);
        java.util.TimeZone timeZone16 = null;
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forTimeZone(timeZone16);
        org.joda.time.chrono.GJChronology gJChronology18 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone17);
        org.joda.time.DurationField durationField19 = gJChronology18.halfdays();
        org.joda.time.DateTimeField dateTimeField20 = gJChronology18.millisOfDay();
        org.joda.time.DateTimeField dateTimeField21 = gJChronology18.minuteOfDay();
        org.joda.time.DurationField durationField22 = gJChronology18.centuries();
        org.joda.time.DateTimeField dateTimeField23 = gJChronology18.dayOfYear();
        java.lang.String str24 = gJChronology18.toString();
        org.joda.time.DateTimeField dateTimeField25 = gJChronology18.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone26 = gJChronology18.getZone();
        org.joda.time.DateTime dateTime27 = instant11.toDateTime((org.joda.time.Chronology) gJChronology18);
        org.joda.time.DateTimeField dateTimeField28 = gJChronology18.yearOfCentury();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant11 and dateTime27", (instant11.compareTo(dateTime27) == 0) == instant11.equals(dateTime27));
    }

    @Test
    public void test1745() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1745");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField3 = gJChronology2.millisOfSecond();
        org.joda.time.DurationField durationField4 = gJChronology2.millis();
        org.joda.time.DateTimeZone dateTimeZone5 = gJChronology2.getZone();
        org.joda.time.Instant instant7 = new org.joda.time.Instant(52L);
        boolean boolean8 = instant7.isEqualNow();
        org.joda.time.ReadableDuration readableDuration9 = null;
        org.joda.time.Instant instant10 = instant7.plus(readableDuration9);
        long long11 = instant7.getMillis();
        java.lang.Object obj12 = null;
        boolean boolean13 = instant7.equals(obj12);
        org.joda.time.DateTime dateTime14 = instant7.toDateTime();
        int int15 = dateTimeZone5.getOffset((org.joda.time.ReadableInstant) dateTime14);
        java.lang.Class<?> wildcardClass16 = dateTimeZone5.getClass();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant7 and dateTime14", (instant7.compareTo(dateTime14) == 0) == instant7.equals(dateTime14));
    }

    @Test
    public void test1746() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1746");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField3 = gJChronology2.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.weekyear();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.halfdayOfDay();
        org.joda.time.DurationField durationField6 = gJChronology2.years();
        org.joda.time.DurationField durationField7 = gJChronology2.minutes();
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        long long11 = gJChronology2.add(readablePeriod8, (-42L), (int) '4');
        org.joda.time.Chronology chronology12 = gJChronology2.withUTC();
        org.joda.time.DateTimeField dateTimeField13 = gJChronology2.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField14 = gJChronology2.dayOfYear();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology2.dayOfWeek();
        org.joda.time.DurationField durationField16 = gJChronology2.months();
        org.joda.time.DurationField durationField17 = gJChronology2.weekyears();
        org.joda.time.DateTimeField dateTimeField18 = gJChronology2.halfdayOfDay();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on durationField6 and durationField17", (durationField6.compareTo(durationField17) == 0) == durationField6.equals(durationField17));
    }

    @Test
    public void test1747() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1747");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        boolean boolean2 = instant1.isEqualNow();
        java.lang.String str3 = instant1.toString();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.MutableDateTime mutableDateTime5 = instant1.toMutableDateTime(chronology4);
        org.joda.time.Instant instant7 = new org.joda.time.Instant(52L);
        boolean boolean8 = instant7.isEqualNow();
        org.joda.time.Instant instant10 = new org.joda.time.Instant(52L);
        org.joda.time.Instant instant12 = instant10.withMillis((long) 'u');
        boolean boolean13 = instant7.isAfter((org.joda.time.ReadableInstant) instant10);
        boolean boolean14 = mutableDateTime5.isEqual((org.joda.time.ReadableInstant) instant10);
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.Instant instant16 = instant10.plus(readableDuration15);
        org.joda.time.ReadableDuration readableDuration17 = null;
        org.joda.time.Instant instant18 = instant16.plus(readableDuration17);
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = null;
        boolean boolean20 = instant16.isSupported(dateTimeFieldType19);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and mutableDateTime5", (instant1.compareTo(mutableDateTime5) == 0) == instant1.equals(mutableDateTime5));
    }

    @Test
    public void test1748() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1748");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        java.util.Locale locale4 = new java.util.Locale("hi!");
        java.lang.String str5 = locale4.getCountry();
        java.util.Locale locale6 = java.util.Locale.getDefault();
        java.lang.String str7 = locale6.getDisplayName();
        java.lang.String str8 = locale4.getDisplayScript(locale6);
        boolean boolean9 = dateTimeZone1.equals((java.lang.Object) locale6);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetMillis((int) '4');
        java.util.TimeZone timeZone12 = dateTimeZone11.toTimeZone();
        long long15 = dateTimeZone11.adjustOffset((long) 0, false);
        int int17 = dateTimeZone11.getOffsetFromLocal((-26438399999L));
        long long19 = dateTimeZone1.getMillisKeepLocal(dateTimeZone11, (long) (byte) 10);
        org.joda.time.Instant instant21 = new org.joda.time.Instant(52L);
        boolean boolean22 = instant21.isEqualNow();
        org.joda.time.ReadableDuration readableDuration23 = null;
        org.joda.time.Instant instant24 = instant21.plus(readableDuration23);
        long long25 = instant21.getMillis();
        java.lang.String str26 = instant21.toString();
        org.joda.time.Instant instant27 = instant21.toInstant();
        org.joda.time.ReadableDuration readableDuration28 = null;
        org.joda.time.Instant instant30 = instant21.withDurationAdded(readableDuration28, (int) 'x');
        java.util.TimeZone timeZone31 = null;
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.forTimeZone(timeZone31);
        org.joda.time.chrono.GJChronology gJChronology33 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone32);
        org.joda.time.DateTimeField dateTimeField34 = gJChronology33.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField35 = gJChronology33.yearOfCentury();
        int int36 = instant30.get(dateTimeField35);
        org.joda.time.chrono.GJChronology gJChronology37 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone11, (org.joda.time.ReadableInstant) instant30);
        org.joda.time.Instant instant38 = instant30.toInstant();
        org.joda.time.Instant instant40 = new org.joda.time.Instant(52L);
        boolean boolean41 = instant40.isEqualNow();
        java.lang.String str42 = instant40.toString();
        java.lang.String str43 = instant40.toString();
        org.joda.time.Instant instant45 = new org.joda.time.Instant(52L);
        boolean boolean46 = instant45.isEqualNow();
        org.joda.time.ReadableDuration readableDuration47 = null;
        org.joda.time.Instant instant48 = instant45.plus(readableDuration47);
        boolean boolean49 = instant40.isBefore((org.joda.time.ReadableInstant) instant48);
        org.joda.time.DateTime dateTime50 = instant40.toDateTime();
        boolean boolean51 = instant38.isAfter((org.joda.time.ReadableInstant) instant40);
        long long52 = instant38.getMillis();
        boolean boolean53 = instant38.isAfterNow();
        org.joda.time.Chronology chronology54 = instant38.getChronology();
        java.lang.String str55 = instant38.toString();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant38 and dateTime50", (instant38.compareTo(dateTime50) == 0) == instant38.equals(dateTime50));
    }

    @Test
    public void test1749() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1749");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        boolean boolean2 = instant1.isEqualNow();
        org.joda.time.ReadableDuration readableDuration3 = null;
        org.joda.time.Instant instant4 = instant1.plus(readableDuration3);
        org.joda.time.Instant instant6 = new org.joda.time.Instant(52L);
        org.joda.time.Instant instant8 = instant6.withMillis((long) 'u');
        boolean boolean9 = instant1.isBefore((org.joda.time.ReadableInstant) instant6);
        org.joda.time.Instant instant12 = instant6.withDurationAdded(4320000000L, (int) 'u');
        org.joda.time.Chronology chronology13 = instant12.getChronology();
        org.joda.time.Instant instant15 = new org.joda.time.Instant(52L);
        boolean boolean16 = instant15.isEqualNow();
        org.joda.time.ReadableDuration readableDuration17 = null;
        org.joda.time.Instant instant18 = instant15.plus(readableDuration17);
        boolean boolean20 = instant18.equals((java.lang.Object) ' ');
        org.joda.time.Instant instant22 = new org.joda.time.Instant(52L);
        boolean boolean23 = instant22.isEqualNow();
        java.lang.String str24 = instant22.toString();
        java.lang.String str25 = instant22.toString();
        boolean boolean26 = instant18.isBefore((org.joda.time.ReadableInstant) instant22);
        boolean boolean27 = instant12.isBefore((org.joda.time.ReadableInstant) instant18);
        org.joda.time.ReadableDuration readableDuration28 = null;
        org.joda.time.Instant instant29 = instant18.minus(readableDuration28);
        org.joda.time.Instant instant31 = new org.joda.time.Instant(52L);
        boolean boolean32 = instant31.isEqualNow();
        org.joda.time.ReadableDuration readableDuration33 = null;
        org.joda.time.Instant instant34 = instant31.plus(readableDuration33);
        org.joda.time.Instant instant36 = new org.joda.time.Instant(52L);
        org.joda.time.Instant instant38 = instant36.withMillis((long) 'u');
        java.util.TimeZone timeZone39 = null;
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.forTimeZone(timeZone39);
        org.joda.time.chrono.GJChronology gJChronology41 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone40);
        org.joda.time.DurationField durationField42 = gJChronology41.halfdays();
        long long46 = gJChronology41.add((long) 'a', (-1L), (int) (short) 0);
        boolean boolean48 = gJChronology41.equals((java.lang.Object) 0);
        org.joda.time.DateTimeField dateTimeField49 = gJChronology41.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField50 = gJChronology41.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField51 = gJChronology41.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField52 = gJChronology41.clockhourOfHalfday();
        org.joda.time.DateTime dateTime53 = instant36.toDateTime((org.joda.time.Chronology) gJChronology41);
        java.lang.String str54 = dateTime53.toString();
        boolean boolean55 = instant34.isEqual((org.joda.time.ReadableInstant) dateTime53);
        boolean boolean56 = instant29.isAfter((org.joda.time.ReadableInstant) instant34);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and dateTime53", (instant1.compareTo(dateTime53) == 0) == instant1.equals(dateTime53));
    }

    @Test
    public void test1750() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1750");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forTimeZone(timeZone2);
        org.joda.time.chrono.GJChronology gJChronology4 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone3);
        org.joda.time.DateTimeField dateTimeField5 = gJChronology4.millisOfSecond();
        int int6 = instant1.get(dateTimeField5);
        boolean boolean7 = instant1.isEqualNow();
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.Instant instant10 = instant1.withDurationAdded(readableDuration8, (int) (short) 0);
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.Instant instant12 = instant1.plus(readableDuration11);
        org.joda.time.ReadableDuration readableDuration13 = null;
        org.joda.time.Instant instant14 = instant12.minus(readableDuration13);
        org.joda.time.DateTime dateTime15 = instant12.toDateTimeISO();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter16 = null;
        java.lang.String str17 = instant12.toString(dateTimeFormatter16);
        org.joda.time.Instant instant20 = instant12.withDurationAdded((-330912000462858L), (-766));
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant12 and dateTime15", (instant12.compareTo(dateTime15) == 0) == instant12.equals(dateTime15));
    }

    @Test
    public void test1751() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1751");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forTimeZone(timeZone2);
        org.joda.time.chrono.GJChronology gJChronology4 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone3);
        org.joda.time.DateTimeField dateTimeField5 = gJChronology4.millisOfSecond();
        int int6 = instant1.get(dateTimeField5);
        boolean boolean7 = instant1.isEqualNow();
        org.joda.time.DateTime dateTime8 = instant1.toDateTime();
        org.joda.time.Instant instant11 = instant1.withDurationAdded((long) 1431201, 1970);
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.Instant instant14 = instant11.withDurationAdded(readableDuration12, (int) (short) -1);
        boolean boolean16 = instant14.isEqual(43200100L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and dateTime8", (instant1.compareTo(dateTime8) == 0) == instant1.equals(dateTime8));
    }

    @Test
    public void test1752() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1752");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        boolean boolean2 = instant1.isEqualNow();
        org.joda.time.ReadableDuration readableDuration3 = null;
        org.joda.time.Instant instant4 = instant1.plus(readableDuration3);
        long long5 = instant1.getMillis();
        org.joda.time.Instant instant7 = instant1.minus(4320000100L);
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHours((int) ' ');
        boolean boolean10 = dateTimeZone9.isFixed();
        long long12 = dateTimeZone9.convertUTCToLocal(259200006000000L);
        org.joda.time.MutableDateTime mutableDateTime13 = instant1.toMutableDateTime(dateTimeZone9);
        org.joda.time.MutableDateTime mutableDateTime14 = instant1.toMutableDateTime();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and mutableDateTime13", (instant1.compareTo(mutableDateTime13) == 0) == instant1.equals(mutableDateTime13));
    }

    @Test
    public void test1753() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1753");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField3 = gJChronology2.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.weekyearOfCentury();
        org.joda.time.Instant instant5 = gJChronology2.getGregorianCutover();
        org.joda.time.Instant instant7 = instant5.withMillis(0L);
        org.joda.time.Instant instant9 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone10 = null;
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forTimeZone(timeZone10);
        org.joda.time.chrono.GJChronology gJChronology12 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone11);
        org.joda.time.DateTimeField dateTimeField13 = gJChronology12.millisOfSecond();
        int int14 = instant9.get(dateTimeField13);
        org.joda.time.Instant instant16 = instant9.plus(0L);
        int int17 = instant7.compareTo((org.joda.time.ReadableInstant) instant16);
        org.joda.time.Instant instant19 = new org.joda.time.Instant(52L);
        boolean boolean20 = instant19.isEqualNow();
        org.joda.time.ReadableDuration readableDuration21 = null;
        org.joda.time.Instant instant22 = instant19.plus(readableDuration21);
        boolean boolean24 = instant22.equals((java.lang.Object) ' ');
        boolean boolean25 = instant16.isEqual((org.joda.time.ReadableInstant) instant22);
        java.lang.String str26 = instant16.toString();
        org.joda.time.ReadableDuration readableDuration27 = null;
        org.joda.time.Instant instant29 = instant16.withDurationAdded(readableDuration27, 1431201);
        boolean boolean31 = instant16.isEqual(4320000001L);
        org.joda.time.ReadableDuration readableDuration32 = null;
        org.joda.time.Instant instant34 = instant16.withDurationAdded(readableDuration32, (-93));
        org.joda.time.Instant instant36 = new org.joda.time.Instant(52L);
        boolean boolean37 = instant36.isEqualNow();
        java.lang.String str38 = instant36.toString();
        java.lang.String str39 = instant36.toString();
        org.joda.time.Instant instant42 = instant36.withDurationAdded(115200000L, (int) (short) 1);
        boolean boolean43 = instant42.isBeforeNow();
        org.joda.time.DateTime dateTime44 = instant42.toDateTimeISO();
        org.joda.time.DateTimeFieldType dateTimeFieldType45 = null;
        boolean boolean46 = instant42.isSupported(dateTimeFieldType45);
        org.joda.time.Instant instant48 = new org.joda.time.Instant((-220870497598236L));
        boolean boolean49 = instant42.isAfter((org.joda.time.ReadableInstant) instant48);
        int int50 = instant34.compareTo((org.joda.time.ReadableInstant) instant48);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant42 and dateTime44", (instant42.compareTo(dateTime44) == 0) == instant42.equals(dateTime44));
    }

    @Test
    public void test1754() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1754");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forTimeZone(timeZone2);
        org.joda.time.chrono.GJChronology gJChronology4 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone3);
        org.joda.time.DateTimeField dateTimeField5 = gJChronology4.millisOfSecond();
        int int6 = instant1.get(dateTimeField5);
        org.joda.time.Instant instant8 = instant1.plus(0L);
        java.util.TimeZone timeZone9 = null;
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forTimeZone(timeZone9);
        org.joda.time.chrono.GJChronology gJChronology11 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone10);
        org.joda.time.DurationField durationField12 = gJChronology11.halfdays();
        org.joda.time.Chronology chronology13 = gJChronology11.withUTC();
        java.lang.String str14 = gJChronology11.toString();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology11.hourOfHalfday();
        int int16 = instant1.get(dateTimeField15);
        java.util.TimeZone timeZone17 = null;
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forTimeZone(timeZone17);
        org.joda.time.chrono.GJChronology gJChronology19 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone18);
        org.joda.time.DurationField durationField20 = gJChronology19.halfdays();
        long long24 = gJChronology19.add((long) 'a', (-1L), (int) (short) 0);
        org.joda.time.DateTimeField dateTimeField25 = gJChronology19.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField26 = gJChronology19.secondOfMinute();
        org.joda.time.Instant instant28 = new org.joda.time.Instant(52L);
        boolean boolean29 = instant28.isEqualNow();
        org.joda.time.ReadableDuration readableDuration30 = null;
        org.joda.time.Instant instant31 = instant28.plus(readableDuration30);
        boolean boolean32 = gJChronology19.equals((java.lang.Object) instant28);
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = null;
        boolean boolean34 = instant28.isSupported(dateTimeFieldType33);
        org.joda.time.DateTimeFieldType dateTimeFieldType35 = null;
        boolean boolean36 = instant28.isSupported(dateTimeFieldType35);
        org.joda.time.DateTimeZone dateTimeZone37 = instant28.getZone();
        boolean boolean38 = instant1.isAfter((org.joda.time.ReadableInstant) instant28);
        org.joda.time.ReadableDuration readableDuration39 = null;
        org.joda.time.Instant instant41 = instant28.withDurationAdded(readableDuration39, (-1030465449));
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.MutableDateTime mutableDateTime43 = instant41.toMutableDateTime(chronology42);
        org.joda.time.ReadableDuration readableDuration44 = null;
        org.joda.time.Instant instant45 = instant41.plus(readableDuration44);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and mutableDateTime43", (instant1.compareTo(mutableDateTime43) == 0) == instant1.equals(mutableDateTime43));
    }

    @Test
    public void test1755() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1755");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField3 = gJChronology2.millisOfSecond();
        org.joda.time.DurationField durationField4 = gJChronology2.millis();
        org.joda.time.DurationField durationField5 = gJChronology2.weekyears();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology2.weekOfWeekyear();
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        long long10 = gJChronology2.add(readablePeriod7, 259168556400000L, 432000000);
        org.joda.time.DateTimeField dateTimeField11 = gJChronology2.monthOfYear();
        org.joda.time.DurationField durationField12 = gJChronology2.eras();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField12, durationField4, and durationField5", !(durationField12.compareTo(durationField4) == 0) || (Math.signum(durationField12.compareTo(durationField5)) == Math.signum(durationField4.compareTo(durationField5))));
    }

    @Test
    public void test1756() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1756");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = gJChronology2.halfdays();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.millisOfDay();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.minuteOfDay();
        org.joda.time.DurationField durationField6 = gJChronology2.centuries();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology2.dayOfYear();
        java.lang.String str8 = gJChronology2.toString();
        org.joda.time.DateTimeField dateTimeField9 = gJChronology2.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone10 = gJChronology2.getZone();
        java.util.TimeZone timeZone11 = null;
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forTimeZone(timeZone11);
        org.joda.time.chrono.GJChronology gJChronology13 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone12);
        java.util.Locale locale15 = new java.util.Locale("hi!");
        java.lang.String str16 = locale15.getCountry();
        java.util.Locale locale17 = java.util.Locale.getDefault();
        java.lang.String str18 = locale17.getDisplayName();
        java.lang.String str19 = locale15.getDisplayScript(locale17);
        boolean boolean20 = dateTimeZone12.equals((java.lang.Object) locale17);
        org.joda.time.Chronology chronology21 = gJChronology2.withZone(dateTimeZone12);
        org.joda.time.DurationField durationField22 = gJChronology2.seconds();
        org.joda.time.Instant instant24 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone25 = null;
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forTimeZone(timeZone25);
        org.joda.time.chrono.GJChronology gJChronology27 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone26);
        org.joda.time.DateTimeField dateTimeField28 = gJChronology27.millisOfSecond();
        int int29 = instant24.get(dateTimeField28);
        boolean boolean30 = instant24.isEqualNow();
        org.joda.time.ReadableDuration readableDuration31 = null;
        org.joda.time.Instant instant33 = instant24.withDurationAdded(readableDuration31, (int) (short) 0);
        org.joda.time.ReadableDuration readableDuration34 = null;
        org.joda.time.Instant instant35 = instant24.plus(readableDuration34);
        org.joda.time.ReadableDuration readableDuration36 = null;
        org.joda.time.Instant instant37 = instant35.minus(readableDuration36);
        org.joda.time.Instant instant39 = new org.joda.time.Instant(4000L);
        boolean boolean41 = instant39.isAfter((-8567999948L));
        java.lang.String str42 = instant39.toString();
        int int43 = instant37.compareTo((org.joda.time.ReadableInstant) instant39);
        java.util.TimeZone timeZone44 = null;
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.forTimeZone(timeZone44);
        org.joda.time.chrono.GJChronology gJChronology46 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone45);
        org.joda.time.DateTimeField dateTimeField47 = gJChronology46.millisOfSecond();
        org.joda.time.DurationField durationField48 = gJChronology46.millis();
        org.joda.time.ReadablePeriod readablePeriod49 = null;
        long long52 = gJChronology46.add(readablePeriod49, (long) 'a', (int) '4');
        org.joda.time.DateTimeField dateTimeField53 = gJChronology46.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField54 = gJChronology46.minuteOfDay();
        int int55 = instant37.get(dateTimeField54);
        org.joda.time.Chronology chronology56 = instant37.getChronology();
        org.joda.time.DurationField durationField57 = chronology56.centuries();
        org.joda.time.DurationFieldType durationFieldType58 = durationField57.getType();
        int int59 = durationField22.compareTo(durationField57);
        long long61 = durationField22.getMillis(76876747L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on durationField6 and durationField57", (durationField6.compareTo(durationField57) == 0) == durationField6.equals(durationField57));
    }

    @Test
    public void test1757() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1757");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        boolean boolean2 = instant1.isEqualNow();
        java.lang.String str3 = instant1.toString();
        java.lang.String str4 = instant1.toString();
        org.joda.time.Instant instant7 = instant1.withDurationAdded(115200000L, (int) (short) 1);
        org.joda.time.Instant instant9 = instant1.withMillis((-6720000000L));
        org.joda.time.Instant instant11 = new org.joda.time.Instant(52L);
        boolean boolean12 = instant11.isEqualNow();
        org.joda.time.ReadableDuration readableDuration13 = null;
        org.joda.time.Instant instant14 = instant11.plus(readableDuration13);
        org.joda.time.Instant instant16 = new org.joda.time.Instant(52L);
        org.joda.time.Instant instant18 = instant16.withMillis((long) 'u');
        boolean boolean19 = instant11.isBefore((org.joda.time.ReadableInstant) instant16);
        org.joda.time.Instant instant22 = instant16.withDurationAdded(4320000000L, (int) 'u');
        org.joda.time.Chronology chronology23 = instant22.getChronology();
        boolean boolean24 = instant1.isAfter((org.joda.time.ReadableInstant) instant22);
        java.util.TimeZone timeZone25 = null;
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forTimeZone(timeZone25);
        org.joda.time.chrono.GJChronology gJChronology27 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone26);
        org.joda.time.DateTimeField dateTimeField28 = gJChronology27.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField29 = gJChronology27.weekyear();
        org.joda.time.DurationField durationField30 = gJChronology27.centuries();
        org.joda.time.DateTimeField dateTimeField31 = gJChronology27.millisOfDay();
        org.joda.time.ReadablePeriod readablePeriod32 = null;
        long long35 = gJChronology27.add(readablePeriod32, (long) '4', (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField36 = gJChronology27.hourOfHalfday();
        org.joda.time.Chronology chronology37 = gJChronology27.withUTC();
        org.joda.time.DateTime dateTime38 = instant22.toDateTime(chronology37);
        java.util.TimeZone timeZone39 = null;
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.forTimeZone(timeZone39);
        org.joda.time.chrono.GJChronology gJChronology41 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone40);
        org.joda.time.DurationField durationField42 = gJChronology41.halfdays();
        long long46 = gJChronology41.add((long) 'a', (-1L), (int) (short) 0);
        boolean boolean48 = gJChronology41.equals((java.lang.Object) 0);
        org.joda.time.DateTimeField dateTimeField49 = gJChronology41.dayOfMonth();
        org.joda.time.DurationField durationField50 = gJChronology41.days();
        org.joda.time.DurationField durationField51 = gJChronology41.seconds();
        java.util.TimeZone timeZone52 = null;
        org.joda.time.DateTimeZone dateTimeZone53 = org.joda.time.DateTimeZone.forTimeZone(timeZone52);
        int int55 = dateTimeZone53.getOffsetFromLocal((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone58 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(0, (int) (short) 10);
        long long60 = dateTimeZone53.getMillisKeepLocal(dateTimeZone58, (-61827926399999L));
        java.util.Locale locale62 = new java.util.Locale("hi!");
        boolean boolean63 = dateTimeZone53.equals((java.lang.Object) locale62);
        org.joda.time.Chronology chronology64 = gJChronology41.withZone(dateTimeZone53);
        org.joda.time.Instant instant65 = gJChronology41.getGregorianCutover();
        int int66 = dateTime38.compareTo((org.joda.time.ReadableInstant) instant65);
        boolean boolean68 = instant65.isBefore((-9617627519848L));
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant22 and dateTime38", (instant22.compareTo(dateTime38) == 0) == instant22.equals(dateTime38));
    }

    @Test
    public void test1758() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1758");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField3 = gJChronology2.millisOfSecond();
        org.joda.time.DurationField durationField4 = gJChronology2.millis();
        org.joda.time.DurationField durationField5 = gJChronology2.weeks();
        long long9 = gJChronology2.add(43201764L, 262974600000L, (int) (short) 100);
        org.joda.time.DateTimeField dateTimeField10 = gJChronology2.secondOfMinute();
        org.joda.time.Instant instant11 = gJChronology2.getGregorianCutover();
        org.joda.time.DurationField durationField12 = gJChronology2.eras();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField12, durationField4, and durationField5", !(durationField12.compareTo(durationField4) == 0) || (Math.signum(durationField12.compareTo(durationField5)) == Math.signum(durationField4.compareTo(durationField5))));
    }

    @Test
    public void test1759() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1759");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = gJChronology2.halfdays();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.millisOfDay();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.minuteOfDay();
        org.joda.time.DurationField durationField6 = gJChronology2.centuries();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology2.dayOfYear();
        java.lang.String str8 = gJChronology2.toString();
        org.joda.time.DateTimeField dateTimeField9 = gJChronology2.dayOfYear();
        org.joda.time.Chronology chronology10 = gJChronology2.withUTC();
        org.joda.time.DateTimeZone dateTimeZone11 = gJChronology2.getZone();
        java.lang.String str12 = dateTimeZone11.getID();
        org.joda.time.Instant instant14 = new org.joda.time.Instant(52L);
        boolean boolean15 = instant14.isEqualNow();
        org.joda.time.ReadableDuration readableDuration16 = null;
        org.joda.time.Instant instant17 = instant14.plus(readableDuration16);
        long long18 = instant14.getMillis();
        java.lang.Object obj19 = null;
        boolean boolean20 = instant14.equals(obj19);
        org.joda.time.Instant instant22 = new org.joda.time.Instant(52L);
        boolean boolean23 = instant22.isEqualNow();
        org.joda.time.ReadableDuration readableDuration24 = null;
        org.joda.time.Instant instant25 = instant22.plus(readableDuration24);
        long long26 = instant22.getMillis();
        java.lang.String str27 = instant22.toString();
        org.joda.time.Instant instant28 = instant22.toInstant();
        org.joda.time.ReadableDuration readableDuration29 = null;
        org.joda.time.Instant instant31 = instant22.withDurationAdded(readableDuration29, (int) 'x');
        org.joda.time.Instant instant32 = instant22.toInstant();
        int int33 = instant14.compareTo((org.joda.time.ReadableInstant) instant22);
        boolean boolean34 = instant14.isBeforeNow();
        org.joda.time.chrono.GJChronology gJChronology35 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone11, (org.joda.time.ReadableInstant) instant14);
        org.joda.time.DateTime dateTime36 = instant14.toDateTime();
        org.joda.time.Instant instant37 = instant14.toInstant();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant37 and dateTime36", (instant37.compareTo(dateTime36) == 0) == instant37.equals(dateTime36));
    }

    @Test
    public void test1760() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1760");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.util.TimeZone timeZone2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forTimeZone(timeZone2);
        org.joda.time.chrono.GJChronology gJChronology4 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone3);
        int int6 = dateTimeZone3.getOffsetFromLocal(1000L);
        long long8 = dateTimeZone1.getMillisKeepLocal(dateTimeZone3, (-61827926399999L));
        java.lang.String str9 = dateTimeZone3.toString();
        org.joda.time.Instant instant11 = new org.joda.time.Instant(52L);
        boolean boolean12 = instant11.isEqualNow();
        org.joda.time.ReadableDuration readableDuration13 = null;
        org.joda.time.Instant instant14 = instant11.plus(readableDuration13);
        long long15 = instant11.getMillis();
        java.lang.String str16 = instant11.toString();
        org.joda.time.Instant instant17 = instant11.toInstant();
        org.joda.time.Instant instant19 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone20 = null;
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forTimeZone(timeZone20);
        org.joda.time.chrono.GJChronology gJChronology22 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone21);
        org.joda.time.DateTimeField dateTimeField23 = gJChronology22.millisOfSecond();
        int int24 = instant19.get(dateTimeField23);
        org.joda.time.Chronology chronology25 = instant19.getChronology();
        boolean boolean26 = instant11.isBefore((org.joda.time.ReadableInstant) instant19);
        boolean boolean28 = instant11.isEqual(1136050274678400000L);
        org.joda.time.chrono.GJChronology gJChronology29 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone3, (org.joda.time.ReadableInstant) instant11);
        org.joda.time.DateTime dateTime30 = instant11.toDateTime();
        org.joda.time.ReadableDuration readableDuration31 = null;
        org.joda.time.Instant instant32 = instant11.minus(readableDuration31);
        org.joda.time.MutableDateTime mutableDateTime33 = instant32.toMutableDateTimeISO();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant32 and dateTime30", (instant32.compareTo(dateTime30) == 0) == instant32.equals(dateTime30));
    }

    @Test
    public void test1761() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1761");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        boolean boolean2 = instant1.isEqualNow();
        java.lang.String str3 = instant1.toString();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.MutableDateTime mutableDateTime5 = instant1.toMutableDateTime(chronology4);
        org.joda.time.MutableDateTime mutableDateTime6 = instant1.toMutableDateTime();
        org.joda.time.MutableDateTime mutableDateTime7 = instant1.toMutableDateTime();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = null;
        java.lang.String str9 = instant1.toString(dateTimeFormatter8);
        org.joda.time.MutableDateTime mutableDateTime10 = instant1.toMutableDateTime();
        java.util.TimeZone timeZone11 = null;
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forTimeZone(timeZone11);
        org.joda.time.chrono.GJChronology gJChronology13 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone12);
        org.joda.time.DurationField durationField14 = gJChronology13.halfdays();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology13.millisOfDay();
        org.joda.time.DateTimeField dateTimeField16 = gJChronology13.minuteOfDay();
        org.joda.time.DurationField durationField17 = gJChronology13.centuries();
        org.joda.time.DateTimeField dateTimeField18 = gJChronology13.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField19 = gJChronology13.year();
        org.joda.time.Instant instant20 = gJChronology13.getGregorianCutover();
        org.joda.time.MutableDateTime mutableDateTime21 = mutableDateTime10.toMutableDateTime((org.joda.time.Chronology) gJChronology13);
        java.util.TimeZone timeZone22 = null;
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        org.joda.time.chrono.GJChronology gJChronology24 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone23);
        org.joda.time.DurationField durationField25 = gJChronology24.halfdays();
        org.joda.time.DateTimeField dateTimeField26 = gJChronology24.millisOfDay();
        org.joda.time.DateTimeField dateTimeField27 = gJChronology24.minuteOfDay();
        org.joda.time.DurationField durationField28 = gJChronology24.centuries();
        org.joda.time.DateTimeField dateTimeField29 = gJChronology24.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField30 = gJChronology24.year();
        org.joda.time.DurationField durationField31 = gJChronology24.weekyears();
        org.joda.time.ReadablePeriod readablePeriod32 = null;
        long long35 = gJChronology24.add(readablePeriod32, 0L, (int) 'a');
        org.joda.time.DateTimeField dateTimeField36 = gJChronology24.minuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone37 = gJChronology24.getZone();
        org.joda.time.MutableDateTime mutableDateTime38 = mutableDateTime10.toMutableDateTime(dateTimeZone37);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and mutableDateTime5", (instant1.compareTo(mutableDateTime5) == 0) == instant1.equals(mutableDateTime5));
    }

    @Test
    public void test1762() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1762");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        boolean boolean2 = instant1.isEqualNow();
        java.lang.String str3 = instant1.toString();
        java.lang.String str4 = instant1.toString();
        org.joda.time.Instant instant6 = new org.joda.time.Instant(52L);
        boolean boolean7 = instant6.isEqualNow();
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.Instant instant9 = instant6.plus(readableDuration8);
        boolean boolean10 = instant1.isBefore((org.joda.time.ReadableInstant) instant9);
        org.joda.time.Instant instant12 = new org.joda.time.Instant(52L);
        boolean boolean13 = instant12.isEqualNow();
        org.joda.time.ReadableDuration readableDuration14 = null;
        org.joda.time.Instant instant15 = instant12.plus(readableDuration14);
        long long16 = instant12.getMillis();
        java.lang.String str17 = instant12.toString();
        org.joda.time.Instant instant18 = instant12.toInstant();
        boolean boolean19 = instant9.isAfter((org.joda.time.ReadableInstant) instant12);
        java.util.TimeZone timeZone20 = null;
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forTimeZone(timeZone20);
        org.joda.time.chrono.GJChronology gJChronology22 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone21);
        org.joda.time.DurationField durationField23 = gJChronology22.halfdays();
        long long27 = gJChronology22.add((long) 'a', (-1L), (int) (short) 0);
        boolean boolean29 = gJChronology22.equals((java.lang.Object) 0);
        org.joda.time.DateTimeField dateTimeField30 = gJChronology22.dayOfMonth();
        org.joda.time.DurationField durationField31 = gJChronology22.seconds();
        org.joda.time.DateTimeField dateTimeField32 = gJChronology22.dayOfYear();
        org.joda.time.DateTimeField dateTimeField33 = gJChronology22.secondOfMinute();
        org.joda.time.Chronology chronology34 = gJChronology22.withUTC();
        org.joda.time.MutableDateTime mutableDateTime35 = instant9.toMutableDateTime((org.joda.time.Chronology) gJChronology22);
        org.joda.time.ReadableDuration readableDuration36 = null;
        org.joda.time.Instant instant37 = instant9.minus(readableDuration36);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and mutableDateTime35", (instant1.compareTo(mutableDateTime35) == 0) == instant1.equals(mutableDateTime35));
    }

    @Test
    public void test1763() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1763");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forTimeZone(timeZone2);
        org.joda.time.chrono.GJChronology gJChronology4 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone3);
        org.joda.time.DateTimeField dateTimeField5 = gJChronology4.millisOfSecond();
        int int6 = instant1.get(dateTimeField5);
        boolean boolean7 = instant1.isEqualNow();
        org.joda.time.DateTime dateTime8 = instant1.toDateTime();
        java.util.TimeZone timeZone9 = null;
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forTimeZone(timeZone9);
        org.joda.time.chrono.GJChronology gJChronology11 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone10);
        org.joda.time.DurationField durationField12 = gJChronology11.halfdays();
        org.joda.time.DateTimeField dateTimeField13 = gJChronology11.millisOfDay();
        org.joda.time.DateTimeField dateTimeField14 = gJChronology11.minuteOfDay();
        org.joda.time.DurationField durationField15 = gJChronology11.centuries();
        org.joda.time.DateTimeField dateTimeField16 = gJChronology11.dayOfYear();
        java.lang.String str17 = gJChronology11.toString();
        org.joda.time.DurationField durationField18 = gJChronology11.years();
        org.joda.time.MutableDateTime mutableDateTime19 = dateTime8.toMutableDateTime((org.joda.time.Chronology) gJChronology11);
        java.util.TimeZone timeZone20 = null;
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forTimeZone(timeZone20);
        org.joda.time.chrono.GJChronology gJChronology22 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone21);
        org.joda.time.DateTimeField dateTimeField23 = gJChronology22.era();
        org.joda.time.DateTimeField dateTimeField24 = gJChronology22.era();
        org.joda.time.DurationField durationField25 = gJChronology22.years();
        org.joda.time.DateTimeField dateTimeField26 = gJChronology22.dayOfWeek();
        int int27 = dateTime8.get(dateTimeField26);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and mutableDateTime19", (instant1.compareTo(mutableDateTime19) == 0) == instant1.equals(mutableDateTime19));
    }

    @Test
    public void test1764() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1764");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str3 = dateTimeZone1.getNameKey((long) 100);
        boolean boolean4 = dateTimeZone1.isFixed();
        org.joda.time.chrono.GJChronology gJChronology5 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        int int6 = gJChronology5.getMinimumDaysInFirstWeek();
        java.lang.String str7 = gJChronology5.toString();
        org.joda.time.DateTimeField dateTimeField8 = gJChronology5.yearOfEra();
        org.joda.time.DateTimeField dateTimeField9 = gJChronology5.yearOfCentury();
        org.joda.time.DurationField durationField10 = gJChronology5.eras();
        org.joda.time.DateTimeField dateTimeField11 = gJChronology5.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField12 = gJChronology5.hourOfHalfday();
        org.joda.time.DurationField durationField13 = gJChronology5.hours();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField10, durationField13, and durationField10", !(durationField10.compareTo(durationField13) == 0) || (Math.signum(durationField10.compareTo(durationField10)) == Math.signum(durationField13.compareTo(durationField10))));
    }

    @Test
    public void test1765() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1765");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField3 = gJChronology2.millisOfSecond();
        org.joda.time.DurationField durationField4 = gJChronology2.millis();
        org.joda.time.DurationField durationField5 = gJChronology2.weekyears();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology2.dayOfYear();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology2.yearOfEra();
        org.joda.time.DateTimeField dateTimeField8 = gJChronology2.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField9 = gJChronology2.secondOfDay();
        org.joda.time.DateTimeField dateTimeField10 = gJChronology2.year();
        org.joda.time.DurationField durationField11 = gJChronology2.eras();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField11, durationField4, and durationField5", !(durationField11.compareTo(durationField4) == 0) || (Math.signum(durationField11.compareTo(durationField5)) == Math.signum(durationField4.compareTo(durationField5))));
    }

    @Test
    public void test1766() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1766");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forTimeZone(timeZone2);
        org.joda.time.chrono.GJChronology gJChronology4 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone3);
        org.joda.time.DateTimeField dateTimeField5 = gJChronology4.millisOfSecond();
        int int6 = instant1.get(dateTimeField5);
        boolean boolean7 = instant1.isEqualNow();
        org.joda.time.tz.NameProvider nameProvider8 = org.joda.time.DateTimeZone.getNameProvider();
        org.joda.time.DateTimeZone.setNameProvider(nameProvider8);
        org.joda.time.DateTimeZone.setNameProvider(nameProvider8);
        boolean boolean11 = instant1.equals((java.lang.Object) nameProvider8);
        org.joda.time.Instant instant13 = new org.joda.time.Instant(52L);
        boolean boolean14 = instant13.isEqualNow();
        java.lang.String str15 = instant13.toString();
        org.joda.time.DateTimeZone dateTimeZone16 = instant13.getZone();
        org.joda.time.DateTime dateTime17 = instant1.toDateTime(dateTimeZone16);
        long long18 = instant1.getMillis();
        org.joda.time.DateTime dateTime19 = instant1.toDateTimeISO();
        java.util.TimeZone timeZone20 = null;
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forTimeZone(timeZone20);
        org.joda.time.chrono.GJChronology gJChronology22 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone21);
        org.joda.time.DateTimeField dateTimeField23 = gJChronology22.era();
        org.joda.time.DateTimeField dateTimeField24 = gJChronology22.year();
        org.joda.time.DurationField durationField25 = gJChronology22.weekyears();
        org.joda.time.DateTimeField dateTimeField26 = gJChronology22.minuteOfHour();
        org.joda.time.DateTimeZone dateTimeZone27 = gJChronology22.getZone();
        org.joda.time.DateTime dateTime28 = instant1.toDateTime((org.joda.time.Chronology) gJChronology22);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant13 and dateTime19", (instant13.compareTo(dateTime19) == 0) == instant13.equals(dateTime19));
    }

    @Test
    public void test1767() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1767");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis((int) '4');
        java.util.TimeZone timeZone2 = dateTimeZone1.toTimeZone();
        long long5 = dateTimeZone1.adjustOffset((long) 0, false);
        int int7 = dateTimeZone1.getOffsetFromLocal((-26438399999L));
        java.util.TimeZone timeZone8 = dateTimeZone1.toTimeZone();
        java.lang.String str10 = dateTimeZone1.getShortName((-53L));
        java.util.TimeZone timeZone11 = null;
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forTimeZone(timeZone11);
        org.joda.time.chrono.GJChronology gJChronology13 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone12);
        org.joda.time.DurationField durationField14 = gJChronology13.halfdays();
        long long18 = gJChronology13.add((long) 'a', (-1L), (int) (short) 0);
        org.joda.time.DateTimeField dateTimeField19 = gJChronology13.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField20 = gJChronology13.secondOfMinute();
        org.joda.time.Instant instant22 = new org.joda.time.Instant(52L);
        boolean boolean23 = instant22.isEqualNow();
        org.joda.time.ReadableDuration readableDuration24 = null;
        org.joda.time.Instant instant25 = instant22.plus(readableDuration24);
        boolean boolean26 = gJChronology13.equals((java.lang.Object) instant22);
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = null;
        boolean boolean28 = instant22.isSupported(dateTimeFieldType27);
        org.joda.time.DateTimeFieldType dateTimeFieldType29 = null;
        boolean boolean30 = instant22.isSupported(dateTimeFieldType29);
        org.joda.time.DateTimeZone dateTimeZone31 = instant22.getZone();
        org.joda.time.Instant instant33 = instant22.plus((long) 'a');
        org.joda.time.ReadableDuration readableDuration34 = null;
        org.joda.time.Instant instant35 = instant22.minus(readableDuration34);
        int int36 = dateTimeZone1.getOffset((org.joda.time.ReadableInstant) instant22);
        boolean boolean37 = instant22.isBeforeNow();
        java.util.TimeZone timeZone38 = null;
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.forTimeZone(timeZone38);
        java.lang.String str41 = dateTimeZone39.getNameKey((long) 100);
        boolean boolean42 = dateTimeZone39.isFixed();
        long long45 = dateTimeZone39.adjustOffset((long) (short) 10, true);
        boolean boolean47 = dateTimeZone39.equals((java.lang.Object) "durationfield[months]");
        org.joda.time.DateTime dateTime48 = instant22.toDateTime(dateTimeZone39);
        long long52 = dateTimeZone39.convertLocalToUTC((-705599969L), false, 4156171L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant22 and dateTime48", (instant22.compareTo(dateTime48) == 0) == instant22.equals(dateTime48));
    }

    @Test
    public void test1768() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1768");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = gJChronology2.years();
        java.util.TimeZone timeZone4 = null;
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forTimeZone(timeZone4);
        org.joda.time.chrono.GJChronology gJChronology6 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone5);
        org.joda.time.DurationField durationField7 = gJChronology6.halfdays();
        org.joda.time.DateTimeField dateTimeField8 = gJChronology6.millisOfDay();
        org.joda.time.DateTimeField dateTimeField9 = gJChronology6.minuteOfDay();
        org.joda.time.DurationField durationField10 = gJChronology6.centuries();
        java.util.TimeZone timeZone11 = null;
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forTimeZone(timeZone11);
        org.joda.time.chrono.GJChronology gJChronology13 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone12);
        org.joda.time.DurationField durationField14 = gJChronology13.halfdays();
        long long17 = durationField14.add((long) 100, 100L);
        boolean boolean18 = durationField14.isPrecise();
        int int19 = durationField10.compareTo(durationField14);
        boolean boolean20 = gJChronology2.equals((java.lang.Object) durationField10);
        org.joda.time.DateTimeField dateTimeField21 = gJChronology2.dayOfYear();
        org.joda.time.DateTimeField dateTimeField22 = gJChronology2.era();
        org.joda.time.DateTimeZone dateTimeZone23 = gJChronology2.getZone();
        java.lang.String str24 = dateTimeZone23.getID();
        org.joda.time.Instant instant26 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone27 = null;
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forTimeZone(timeZone27);
        org.joda.time.chrono.GJChronology gJChronology29 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone28);
        org.joda.time.DateTimeField dateTimeField30 = gJChronology29.millisOfSecond();
        int int31 = instant26.get(dateTimeField30);
        boolean boolean32 = instant26.isEqualNow();
        org.joda.time.Instant instant34 = new org.joda.time.Instant(52L);
        boolean boolean35 = instant34.isEqualNow();
        org.joda.time.ReadableDuration readableDuration36 = null;
        org.joda.time.Instant instant37 = instant34.plus(readableDuration36);
        long long38 = instant34.getMillis();
        java.lang.Object obj39 = null;
        boolean boolean40 = instant34.equals(obj39);
        org.joda.time.Instant instant42 = new org.joda.time.Instant(52L);
        boolean boolean43 = instant42.isEqualNow();
        org.joda.time.ReadableDuration readableDuration44 = null;
        org.joda.time.Instant instant45 = instant42.plus(readableDuration44);
        long long46 = instant42.getMillis();
        java.lang.String str47 = instant42.toString();
        org.joda.time.Instant instant48 = instant42.toInstant();
        org.joda.time.ReadableDuration readableDuration49 = null;
        org.joda.time.Instant instant51 = instant42.withDurationAdded(readableDuration49, (int) 'x');
        org.joda.time.Instant instant52 = instant42.toInstant();
        int int53 = instant34.compareTo((org.joda.time.ReadableInstant) instant42);
        boolean boolean54 = instant26.isBefore((org.joda.time.ReadableInstant) instant42);
        java.util.TimeZone timeZone55 = null;
        org.joda.time.DateTimeZone dateTimeZone56 = org.joda.time.DateTimeZone.forTimeZone(timeZone55);
        org.joda.time.chrono.GJChronology gJChronology57 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone56);
        org.joda.time.DurationField durationField58 = gJChronology57.halfdays();
        long long62 = gJChronology57.add((long) 'a', (-1L), (int) (short) 0);
        org.joda.time.DateTimeField dateTimeField63 = gJChronology57.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField64 = gJChronology57.secondOfMinute();
        org.joda.time.Instant instant66 = new org.joda.time.Instant(52L);
        boolean boolean67 = instant66.isEqualNow();
        org.joda.time.ReadableDuration readableDuration68 = null;
        org.joda.time.Instant instant69 = instant66.plus(readableDuration68);
        boolean boolean70 = gJChronology57.equals((java.lang.Object) instant66);
        org.joda.time.DateTimeFieldType dateTimeFieldType71 = null;
        boolean boolean72 = instant66.isSupported(dateTimeFieldType71);
        org.joda.time.DateTimeFieldType dateTimeFieldType73 = null;
        boolean boolean74 = instant66.isSupported(dateTimeFieldType73);
        java.lang.String str75 = instant66.toString();
        boolean boolean76 = instant26.isAfter((org.joda.time.ReadableInstant) instant66);
        org.joda.time.MutableDateTime mutableDateTime77 = instant66.toMutableDateTimeISO();
        org.joda.time.chrono.GJChronology gJChronology79 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone23, (org.joda.time.ReadableInstant) mutableDateTime77, (int) (byte) 1);
        org.joda.time.DurationField durationField80 = gJChronology79.halfdays();
        org.joda.time.DurationField durationField81 = gJChronology79.years();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on durationField7 and durationField80", (durationField7.compareTo(durationField80) == 0) == durationField7.equals(durationField80));
    }

    @Test
    public void test1769() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1769");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField3 = gJChronology2.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.weekyear();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology2.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology2.weekyearOfCentury();
        org.joda.time.Instant instant8 = gJChronology2.getGregorianCutover();
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = null;
        boolean boolean10 = instant8.isSupported(dateTimeFieldType9);
        org.joda.time.Instant instant12 = new org.joda.time.Instant(3155760000000L);
        org.joda.time.Instant instant13 = instant12.toInstant();
        boolean boolean14 = instant13.isEqualNow();
        org.joda.time.Instant instant16 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone17 = null;
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forTimeZone(timeZone17);
        org.joda.time.chrono.GJChronology gJChronology19 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone18);
        org.joda.time.DateTimeField dateTimeField20 = gJChronology19.millisOfSecond();
        int int21 = instant16.get(dateTimeField20);
        org.joda.time.Instant instant23 = instant16.plus(0L);
        org.joda.time.Instant instant24 = instant23.toInstant();
        org.joda.time.Instant instant26 = new org.joda.time.Instant(52L);
        boolean boolean27 = instant26.isEqualNow();
        java.lang.String str28 = instant26.toString();
        java.lang.String str29 = instant26.toString();
        org.joda.time.Instant instant31 = new org.joda.time.Instant(52L);
        boolean boolean32 = instant31.isEqualNow();
        org.joda.time.ReadableDuration readableDuration33 = null;
        org.joda.time.Instant instant34 = instant31.plus(readableDuration33);
        boolean boolean35 = instant26.isBefore((org.joda.time.ReadableInstant) instant34);
        org.joda.time.Instant instant37 = instant26.minus((long) 0);
        int int38 = instant23.compareTo((org.joda.time.ReadableInstant) instant26);
        org.joda.time.Instant instant41 = instant23.withDurationAdded((long) 432086114, 97);
        org.joda.time.MutableDateTime mutableDateTime42 = instant41.toMutableDateTime();
        org.joda.time.Instant instant44 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone45 = null;
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.forTimeZone(timeZone45);
        org.joda.time.chrono.GJChronology gJChronology47 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone46);
        org.joda.time.DateTimeField dateTimeField48 = gJChronology47.millisOfSecond();
        int int49 = instant44.get(dateTimeField48);
        boolean boolean50 = instant44.isEqualNow();
        org.joda.time.DateTime dateTime51 = instant44.toDateTime();
        boolean boolean52 = mutableDateTime42.isAfter((org.joda.time.ReadableInstant) dateTime51);
        boolean boolean53 = instant13.isAfter((org.joda.time.ReadableInstant) dateTime51);
        java.util.TimeZone timeZone54 = null;
        org.joda.time.DateTimeZone dateTimeZone55 = org.joda.time.DateTimeZone.forTimeZone(timeZone54);
        org.joda.time.chrono.GJChronology gJChronology56 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone55);
        org.joda.time.DateTimeField dateTimeField57 = gJChronology56.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField58 = gJChronology56.weekyearOfCentury();
        org.joda.time.Instant instant59 = gJChronology56.getGregorianCutover();
        org.joda.time.Instant instant61 = instant59.withMillis(0L);
        org.joda.time.Instant instant63 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone64 = null;
        org.joda.time.DateTimeZone dateTimeZone65 = org.joda.time.DateTimeZone.forTimeZone(timeZone64);
        org.joda.time.chrono.GJChronology gJChronology66 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone65);
        org.joda.time.DateTimeField dateTimeField67 = gJChronology66.millisOfSecond();
        int int68 = instant63.get(dateTimeField67);
        org.joda.time.Instant instant70 = instant63.plus(0L);
        int int71 = instant61.compareTo((org.joda.time.ReadableInstant) instant70);
        org.joda.time.Instant instant73 = new org.joda.time.Instant(52L);
        boolean boolean74 = instant73.isEqualNow();
        org.joda.time.ReadableDuration readableDuration75 = null;
        org.joda.time.Instant instant76 = instant73.plus(readableDuration75);
        boolean boolean78 = instant76.equals((java.lang.Object) ' ');
        boolean boolean79 = instant70.isEqual((org.joda.time.ReadableInstant) instant76);
        boolean boolean80 = dateTime51.isAfter((org.joda.time.ReadableInstant) instant76);
        int int81 = instant8.compareTo((org.joda.time.ReadableInstant) instant76);
        org.joda.time.Chronology chronology82 = instant8.getChronology();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant16 and dateTime51", (instant16.compareTo(dateTime51) == 0) == instant16.equals(dateTime51));
    }

    @Test
    public void test1770() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1770");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField3 = gJChronology2.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.weekyearOfCentury();
        org.joda.time.Instant instant5 = gJChronology2.getGregorianCutover();
        org.joda.time.Instant instant7 = instant5.withMillis(0L);
        org.joda.time.Instant instant9 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone10 = null;
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forTimeZone(timeZone10);
        org.joda.time.chrono.GJChronology gJChronology12 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone11);
        org.joda.time.DateTimeField dateTimeField13 = gJChronology12.millisOfSecond();
        int int14 = instant9.get(dateTimeField13);
        org.joda.time.Instant instant16 = instant9.plus(0L);
        int int17 = instant7.compareTo((org.joda.time.ReadableInstant) instant16);
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = null;
        boolean boolean19 = instant16.isSupported(dateTimeFieldType18);
        org.joda.time.Instant instant21 = new org.joda.time.Instant(52L);
        boolean boolean22 = instant21.isEqualNow();
        org.joda.time.ReadableDuration readableDuration23 = null;
        org.joda.time.Instant instant24 = instant21.plus(readableDuration23);
        int int25 = instant16.compareTo((org.joda.time.ReadableInstant) instant21);
        org.joda.time.Instant instant27 = new org.joda.time.Instant(52L);
        boolean boolean28 = instant27.isEqualNow();
        int int29 = instant16.compareTo((org.joda.time.ReadableInstant) instant27);
        org.joda.time.Instant instant31 = new org.joda.time.Instant(4000L);
        boolean boolean32 = instant27.isAfter((org.joda.time.ReadableInstant) instant31);
        org.joda.time.ReadableDuration readableDuration33 = null;
        org.joda.time.Instant instant34 = instant31.plus(readableDuration33);
        org.joda.time.DateTime dateTime35 = instant31.toDateTimeISO();
        org.joda.time.Chronology chronology36 = instant31.getChronology();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant31 and dateTime35", (instant31.compareTo(dateTime35) == 0) == instant31.equals(dateTime35));
    }

    @Test
    public void test1771() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1771");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        boolean boolean2 = instant1.isEqualNow();
        java.lang.String str3 = instant1.toString();
        java.lang.String str4 = instant1.toString();
        org.joda.time.Instant instant6 = new org.joda.time.Instant(52L);
        boolean boolean7 = instant6.isEqualNow();
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.Instant instant9 = instant6.plus(readableDuration8);
        boolean boolean10 = instant1.isBefore((org.joda.time.ReadableInstant) instant9);
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.Instant instant12 = instant9.minus(readableDuration11);
        boolean boolean13 = instant12.isBeforeNow();
        org.joda.time.MutableDateTime mutableDateTime14 = instant12.toMutableDateTime();
        long long15 = instant12.getMillis();
        org.joda.time.Chronology chronology16 = instant12.getChronology();
        java.lang.String str17 = chronology16.toString();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and mutableDateTime14", (instant1.compareTo(mutableDateTime14) == 0) == instant1.equals(mutableDateTime14));
    }

    @Test
    public void test1772() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1772");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        boolean boolean2 = instant1.isEqualNow();
        org.joda.time.ReadableDuration readableDuration3 = null;
        org.joda.time.Instant instant4 = instant1.plus(readableDuration3);
        org.joda.time.Instant instant6 = instant1.withMillis((long) 4);
        boolean boolean7 = instant6.isBeforeNow();
        boolean boolean9 = instant6.isBefore(5185792L);
        org.joda.time.MutableDateTime mutableDateTime10 = instant6.toMutableDateTime();
        org.joda.time.Instant instant11 = instant6.toInstant();
        org.joda.time.MutableDateTime mutableDateTime12 = instant6.toMutableDateTime();
        java.util.TimeZone timeZone13 = null;
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forTimeZone(timeZone13);
        org.joda.time.chrono.GJChronology gJChronology15 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone14);
        org.joda.time.DateTimeField dateTimeField16 = gJChronology15.era();
        org.joda.time.DateTimeField dateTimeField17 = gJChronology15.weekyear();
        org.joda.time.DateTimeField dateTimeField18 = gJChronology15.weekyearOfCentury();
        boolean boolean19 = instant6.equals((java.lang.Object) dateTimeField18);
        org.joda.time.Instant instant22 = instant6.withDurationAdded((long) 30, (-166));
        org.joda.time.Instant instant23 = instant22.toInstant();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant6 and mutableDateTime10", (instant6.compareTo(mutableDateTime10) == 0) == instant6.equals(mutableDateTime10));
    }

    @Test
    public void test1773() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1773");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) '#');
        java.util.TimeZone timeZone2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forTimeZone(timeZone2);
        org.joda.time.chrono.GJChronology gJChronology4 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone3);
        org.joda.time.DateTimeField dateTimeField5 = gJChronology4.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology4.weekyearOfCentury();
        org.joda.time.Instant instant7 = gJChronology4.getGregorianCutover();
        boolean boolean8 = instant1.equals((java.lang.Object) gJChronology4);
        org.joda.time.MutableDateTime mutableDateTime9 = instant1.toMutableDateTime();
        org.joda.time.Instant instant11 = new org.joda.time.Instant(52L);
        boolean boolean12 = instant11.isEqualNow();
        org.joda.time.ReadableDuration readableDuration13 = null;
        org.joda.time.Instant instant14 = instant11.plus(readableDuration13);
        long long15 = instant11.getMillis();
        java.lang.String str16 = instant11.toString();
        org.joda.time.Instant instant17 = instant11.toInstant();
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.Instant instant20 = instant11.withDurationAdded(readableDuration18, (int) 'x');
        java.util.TimeZone timeZone21 = null;
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forTimeZone(timeZone21);
        org.joda.time.chrono.GJChronology gJChronology23 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone22);
        org.joda.time.DateTimeField dateTimeField24 = gJChronology23.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField25 = gJChronology23.yearOfCentury();
        int int26 = instant20.get(dateTimeField25);
        org.joda.time.Instant instant27 = instant20.toInstant();
        boolean boolean28 = instant1.isBefore((org.joda.time.ReadableInstant) instant20);
        org.joda.time.Instant instant29 = instant1.toInstant();
        org.joda.time.Instant instant31 = instant1.withMillis((long) 600000);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime9 and instant1", (mutableDateTime9.compareTo(instant1) == 0) == mutableDateTime9.equals(instant1));
    }

    @Test
    public void test1774() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1774");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = gJChronology2.halfdays();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.millisOfDay();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.minuteOfDay();
        org.joda.time.DurationField durationField6 = gJChronology2.centuries();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology2.dayOfYear();
        java.lang.String str8 = gJChronology2.toString();
        org.joda.time.DateTimeField dateTimeField9 = gJChronology2.dayOfYear();
        org.joda.time.DateTimeField dateTimeField10 = gJChronology2.dayOfMonth();
        org.joda.time.DurationField durationField11 = gJChronology2.years();
        org.joda.time.DateTimeField dateTimeField12 = gJChronology2.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField13 = gJChronology2.weekyearOfCentury();
        org.joda.time.DurationField durationField14 = gJChronology2.eras();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField14, durationField3, and durationField6", !(durationField14.compareTo(durationField3) == 0) || (Math.signum(durationField14.compareTo(durationField6)) == Math.signum(durationField3.compareTo(durationField6))));
    }

    @Test
    public void test1775() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1775");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = gJChronology2.halfdays();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.millisOfDay();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology2.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone7 = gJChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField8 = gJChronology2.millisOfSecond();
        org.joda.time.DurationField durationField9 = gJChronology2.days();
        org.joda.time.DateTimeZone dateTimeZone10 = gJChronology2.getZone();
        int int12 = dateTimeZone10.getOffset(61018721252556879L);
        org.joda.time.Instant instant14 = new org.joda.time.Instant(52L);
        boolean boolean15 = instant14.isEqualNow();
        org.joda.time.ReadableDuration readableDuration16 = null;
        org.joda.time.Instant instant17 = instant14.plus(readableDuration16);
        long long18 = instant14.getMillis();
        org.joda.time.Instant instant20 = instant14.minus(4320000100L);
        boolean boolean22 = instant14.isEqual(221529803040000000L);
        org.joda.time.Instant instant24 = new org.joda.time.Instant(52L);
        boolean boolean25 = instant24.isEqualNow();
        org.joda.time.ReadableDuration readableDuration26 = null;
        org.joda.time.Instant instant27 = instant24.plus(readableDuration26);
        long long28 = instant24.getMillis();
        java.lang.Object obj29 = null;
        boolean boolean30 = instant24.equals(obj29);
        org.joda.time.Instant instant32 = instant24.minus(3155695200000L);
        org.joda.time.Chronology chronology33 = instant24.getChronology();
        boolean boolean34 = instant14.isAfter((org.joda.time.ReadableInstant) instant24);
        org.joda.time.Instant instant35 = instant24.toInstant();
        org.joda.time.DateTime dateTime36 = instant24.toDateTimeISO();
        boolean boolean37 = dateTimeZone10.equals((java.lang.Object) instant24);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant14 and dateTime36", (instant14.compareTo(dateTime36) == 0) == instant14.equals(dateTime36));
    }

    @Test
    public void test1776() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1776");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        boolean boolean2 = instant1.isEqualNow();
        java.lang.String str3 = instant1.toString();
        java.lang.String str4 = instant1.toString();
        org.joda.time.Instant instant7 = instant1.withDurationAdded(115200000L, (int) (short) 1);
        boolean boolean8 = instant7.isBeforeNow();
        org.joda.time.DateTime dateTime9 = instant7.toDateTimeISO();
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = null;
        boolean boolean11 = instant7.isSupported(dateTimeFieldType10);
        org.joda.time.Instant instant13 = instant7.plus(3155695200000L);
        java.util.TimeZone timeZone14 = null;
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forTimeZone(timeZone14);
        org.joda.time.chrono.GJChronology gJChronology16 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone15);
        org.joda.time.DurationField durationField17 = gJChronology16.halfdays();
        org.joda.time.DateTimeField dateTimeField18 = gJChronology16.millisOfDay();
        org.joda.time.DateTimeField dateTimeField19 = gJChronology16.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField20 = gJChronology16.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField21 = gJChronology16.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField22 = gJChronology16.clockhourOfDay();
        org.joda.time.DateTime dateTime23 = instant7.toDateTime((org.joda.time.Chronology) gJChronology16);
        org.joda.time.DateTimeField dateTimeField24 = gJChronology16.yearOfCentury();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant7 and dateTime9", (instant7.compareTo(dateTime9) == 0) == instant7.equals(dateTime9));
    }

    @Test
    public void test1777() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1777");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = gJChronology2.halfdays();
        long long6 = durationField3.add((long) 100, 100L);
        boolean boolean7 = durationField3.isPrecise();
        long long10 = durationField3.getValueAsLong(1L, (long) 0);
        java.lang.String str11 = durationField3.getName();
        long long14 = durationField3.getDifferenceAsLong(3155760000000L, (-220870497598236L));
        org.joda.time.Instant instant15 = new org.joda.time.Instant((java.lang.Object) 3155760000000L);
        org.joda.time.DateTimeZone dateTimeZone16 = instant15.getZone();
        org.joda.time.Instant instant18 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone19 = null;
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forTimeZone(timeZone19);
        org.joda.time.chrono.GJChronology gJChronology21 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone20);
        org.joda.time.DateTimeField dateTimeField22 = gJChronology21.millisOfSecond();
        int int23 = instant18.get(dateTimeField22);
        org.joda.time.Instant instant25 = instant18.plus(0L);
        java.util.TimeZone timeZone26 = null;
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forTimeZone(timeZone26);
        org.joda.time.chrono.GJChronology gJChronology28 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone27);
        org.joda.time.DurationField durationField29 = gJChronology28.halfdays();
        org.joda.time.Chronology chronology30 = gJChronology28.withUTC();
        java.lang.String str31 = gJChronology28.toString();
        org.joda.time.DateTimeField dateTimeField32 = gJChronology28.hourOfHalfday();
        int int33 = instant18.get(dateTimeField32);
        org.joda.time.Instant instant35 = new org.joda.time.Instant(52L);
        boolean boolean36 = instant35.isEqualNow();
        java.lang.String str37 = instant35.toString();
        org.joda.time.Instant instant39 = new org.joda.time.Instant(52L);
        boolean boolean40 = instant39.isEqualNow();
        java.lang.String str41 = instant39.toString();
        java.lang.String str42 = instant39.toString();
        org.joda.time.Instant instant45 = instant39.withDurationAdded(115200000L, (int) (short) 1);
        int int46 = instant35.compareTo((org.joda.time.ReadableInstant) instant39);
        org.joda.time.Instant instant48 = new org.joda.time.Instant(52L);
        boolean boolean49 = instant48.isEqualNow();
        org.joda.time.ReadableDuration readableDuration50 = null;
        org.joda.time.Instant instant51 = instant48.plus(readableDuration50);
        boolean boolean53 = instant51.equals((java.lang.Object) ' ');
        boolean boolean54 = instant39.isAfter((org.joda.time.ReadableInstant) instant51);
        int int55 = instant18.compareTo((org.joda.time.ReadableInstant) instant39);
        org.joda.time.Instant instant57 = instant39.minus(10699L);
        org.joda.time.DateTimeZone dateTimeZone58 = instant57.getZone();
        org.joda.time.Instant instant59 = instant57.toInstant();
        java.util.TimeZone timeZone60 = null;
        org.joda.time.DateTimeZone dateTimeZone61 = org.joda.time.DateTimeZone.forTimeZone(timeZone60);
        org.joda.time.chrono.GJChronology gJChronology62 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone61);
        org.joda.time.DurationField durationField63 = gJChronology62.halfdays();
        long long67 = gJChronology62.add((long) 'a', (-1L), (int) (short) 0);
        long long71 = gJChronology62.add((long) (byte) 0, (long) '4', 100);
        org.joda.time.DateTimeField dateTimeField72 = gJChronology62.minuteOfHour();
        org.joda.time.DurationField durationField73 = gJChronology62.hours();
        org.joda.time.DateTimeField dateTimeField74 = gJChronology62.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField75 = gJChronology62.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField76 = gJChronology62.centuryOfEra();
        java.util.TimeZone timeZone77 = null;
        org.joda.time.DateTimeZone dateTimeZone78 = org.joda.time.DateTimeZone.forTimeZone(timeZone77);
        org.joda.time.chrono.GJChronology gJChronology79 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone78);
        org.joda.time.DurationField durationField80 = gJChronology79.halfdays();
        long long84 = gJChronology79.add((long) 'a', (-1L), (int) (short) 0);
        long long88 = gJChronology79.add((long) (byte) 0, (long) '4', 100);
        org.joda.time.DateTimeField dateTimeField89 = gJChronology79.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField90 = gJChronology79.year();
        org.joda.time.DurationField durationField91 = gJChronology79.centuries();
        org.joda.time.DateTimeField dateTimeField92 = gJChronology79.dayOfMonth();
        boolean boolean93 = gJChronology62.equals((java.lang.Object) dateTimeField92);
        org.joda.time.DateTimeZone dateTimeZone94 = gJChronology62.getZone();
        org.joda.time.MutableDateTime mutableDateTime95 = instant57.toMutableDateTime(dateTimeZone94);
        org.joda.time.MutableDateTime mutableDateTime96 = instant57.toMutableDateTimeISO();
        org.joda.time.MutableDateTime mutableDateTime97 = instant57.toMutableDateTime();
        org.joda.time.chrono.GJChronology gJChronology98 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone16, (org.joda.time.ReadableInstant) instant57);
        java.lang.String str99 = dateTimeZone16.toString();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant57 and mutableDateTime95", (instant57.compareTo(mutableDateTime95) == 0) == instant57.equals(mutableDateTime95));
    }

    @Test
    public void test1778() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1778");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        boolean boolean2 = instant1.isEqualNow();
        java.lang.String str3 = instant1.toString();
        java.lang.String str4 = instant1.toString();
        org.joda.time.Instant instant6 = new org.joda.time.Instant(52L);
        boolean boolean7 = instant6.isEqualNow();
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.Instant instant9 = instant6.plus(readableDuration8);
        boolean boolean10 = instant1.isBefore((org.joda.time.ReadableInstant) instant9);
        org.joda.time.Instant instant12 = instant9.plus((long) (short) 100);
        java.lang.String str13 = instant9.toString();
        boolean boolean15 = instant9.isBefore(262974670000L);
        java.lang.String str16 = instant9.toString();
        org.joda.time.Instant instant18 = instant9.withMillis((long) 30);
        org.joda.time.Instant instant20 = new org.joda.time.Instant(52L);
        boolean boolean21 = instant20.isEqualNow();
        org.joda.time.ReadableDuration readableDuration22 = null;
        org.joda.time.Instant instant23 = instant20.plus(readableDuration22);
        org.joda.time.Instant instant25 = new org.joda.time.Instant(52L);
        org.joda.time.Instant instant27 = instant25.withMillis((long) 'u');
        boolean boolean28 = instant20.isBefore((org.joda.time.ReadableInstant) instant25);
        org.joda.time.Instant instant31 = instant25.withDurationAdded(4320000000L, (int) 'u');
        org.joda.time.Chronology chronology32 = instant31.getChronology();
        org.joda.time.Instant instant34 = new org.joda.time.Instant(52L);
        boolean boolean35 = instant34.isEqualNow();
        org.joda.time.ReadableDuration readableDuration36 = null;
        org.joda.time.Instant instant37 = instant34.plus(readableDuration36);
        boolean boolean39 = instant37.equals((java.lang.Object) ' ');
        org.joda.time.Instant instant41 = new org.joda.time.Instant(52L);
        boolean boolean42 = instant41.isEqualNow();
        java.lang.String str43 = instant41.toString();
        java.lang.String str44 = instant41.toString();
        boolean boolean45 = instant37.isBefore((org.joda.time.ReadableInstant) instant41);
        boolean boolean46 = instant31.isBefore((org.joda.time.ReadableInstant) instant37);
        org.joda.time.ReadableDuration readableDuration47 = null;
        org.joda.time.Instant instant48 = instant37.minus(readableDuration47);
        org.joda.time.DateTimeZone dateTimeZone49 = null;
        org.joda.time.MutableDateTime mutableDateTime50 = instant48.toMutableDateTime(dateTimeZone49);
        boolean boolean51 = instant9.isEqual((org.joda.time.ReadableInstant) instant48);
        boolean boolean53 = instant48.equals((java.lang.Object) "cinese-ZH");
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and mutableDateTime50", (instant1.compareTo(mutableDateTime50) == 0) == instant1.equals(mutableDateTime50));
    }

    @Test
    public void test1779() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1779");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = gJChronology2.halfdays();
        long long7 = gJChronology2.add((long) 'a', (-1L), (int) (short) 0);
        long long11 = gJChronology2.add((long) (byte) 0, (long) '4', 100);
        org.joda.time.DurationField durationField12 = gJChronology2.years();
        org.joda.time.Instant instant13 = gJChronology2.getGregorianCutover();
        org.joda.time.Instant instant14 = instant13.toInstant();
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.Instant instant16 = instant13.minus(readableDuration15);
        org.joda.time.MutableDateTime mutableDateTime17 = instant13.toMutableDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(1, 10);
        java.lang.String str22 = dateTimeZone20.getShortName(97L);
        org.joda.time.chrono.GJChronology gJChronology25 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone20, (long) (byte) 100, 1);
        org.joda.time.DurationField durationField26 = gJChronology25.weeks();
        org.joda.time.DurationField durationField27 = gJChronology25.minutes();
        org.joda.time.DateTime dateTime28 = instant13.toDateTime((org.joda.time.Chronology) gJChronology25);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant13 and mutableDateTime17", (instant13.compareTo(mutableDateTime17) == 0) == instant13.equals(mutableDateTime17));
    }

    @Test
    public void test1780() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1780");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = gJChronology2.halfdays();
        long long7 = gJChronology2.add((long) 'a', (-1L), (int) (short) 0);
        boolean boolean9 = gJChronology2.equals((java.lang.Object) 0);
        org.joda.time.DateTimeField dateTimeField10 = gJChronology2.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField11 = gJChronology2.hourOfHalfday();
        org.joda.time.Instant instant12 = gJChronology2.getGregorianCutover();
        java.util.TimeZone timeZone13 = null;
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forTimeZone(timeZone13);
        org.joda.time.chrono.GJChronology gJChronology15 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone14);
        org.joda.time.DurationField durationField16 = gJChronology15.halfdays();
        org.joda.time.DateTimeField dateTimeField17 = gJChronology15.millisOfDay();
        org.joda.time.DateTimeField dateTimeField18 = gJChronology15.minuteOfDay();
        org.joda.time.DurationField durationField19 = gJChronology15.centuries();
        org.joda.time.DateTimeField dateTimeField20 = gJChronology15.dayOfYear();
        java.lang.String str21 = gJChronology15.toString();
        org.joda.time.DateTimeField dateTimeField22 = gJChronology15.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone23 = gJChronology15.getZone();
        org.joda.time.chrono.GJChronology gJChronology24 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone23);
        org.joda.time.DateTimeField dateTimeField25 = gJChronology24.clockhourOfDay();
        org.joda.time.DurationField durationField26 = gJChronology24.centuries();
        org.joda.time.DurationField durationField27 = gJChronology24.months();
        org.joda.time.DateTimeField dateTimeField28 = gJChronology24.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField29 = gJChronology24.minuteOfDay();
        java.util.TimeZone timeZone30 = null;
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forTimeZone(timeZone30);
        org.joda.time.chrono.GJChronology gJChronology32 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone31);
        org.joda.time.DurationField durationField33 = gJChronology32.halfdays();
        org.joda.time.DateTimeField dateTimeField34 = gJChronology32.millisOfDay();
        org.joda.time.DateTimeField dateTimeField35 = gJChronology32.minuteOfDay();
        org.joda.time.DurationField durationField36 = gJChronology32.centuries();
        org.joda.time.DateTimeField dateTimeField37 = gJChronology32.yearOfCentury();
        org.joda.time.Chronology chronology38 = gJChronology32.withUTC();
        org.joda.time.DateTimeZone dateTimeZone39 = gJChronology32.getZone();
        int int41 = dateTimeZone39.getOffset((long) 73050);
        java.lang.String str43 = dateTimeZone39.getShortName((long) (byte) 1);
        org.joda.time.Chronology chronology44 = gJChronology24.withZone(dateTimeZone39);
        org.joda.time.DateTime dateTime45 = instant12.toDateTime(dateTimeZone39);
        java.util.TimeZone timeZone46 = dateTimeZone39.toTimeZone();
        java.lang.String str47 = dateTimeZone39.toString();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant12 and dateTime45", (instant12.compareTo(dateTime45) == 0) == instant12.equals(dateTime45));
    }

    @Test
    public void test1781() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1781");
        org.joda.time.Instant instant0 = org.joda.time.Instant.now();
        org.joda.time.Instant instant3 = instant0.withDurationAdded(306102434400000L, (int) (short) 100);
        org.joda.time.DateTime dateTime4 = instant3.toDateTime();
        org.joda.time.Instant instant5 = dateTime4.toInstant();
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.Instant instant8 = instant5.withDurationAdded(readableDuration6, 360000);
        java.util.TimeZone timeZone9 = null;
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forTimeZone(timeZone9);
        org.joda.time.chrono.GJChronology gJChronology11 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone10);
        org.joda.time.DateTimeField dateTimeField12 = gJChronology11.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField13 = gJChronology11.weekyearOfCentury();
        org.joda.time.Instant instant14 = gJChronology11.getGregorianCutover();
        org.joda.time.Instant instant16 = instant14.withMillis(0L);
        org.joda.time.Instant instant18 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone19 = null;
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forTimeZone(timeZone19);
        org.joda.time.chrono.GJChronology gJChronology21 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone20);
        org.joda.time.DateTimeField dateTimeField22 = gJChronology21.millisOfSecond();
        int int23 = instant18.get(dateTimeField22);
        org.joda.time.Instant instant25 = instant18.plus(0L);
        int int26 = instant16.compareTo((org.joda.time.ReadableInstant) instant25);
        org.joda.time.Instant instant28 = new org.joda.time.Instant(52L);
        boolean boolean29 = instant28.isEqualNow();
        org.joda.time.ReadableDuration readableDuration30 = null;
        org.joda.time.Instant instant31 = instant28.plus(readableDuration30);
        boolean boolean33 = instant31.equals((java.lang.Object) ' ');
        boolean boolean34 = instant25.isEqual((org.joda.time.ReadableInstant) instant31);
        java.lang.String str35 = instant25.toString();
        org.joda.time.Instant instant36 = instant25.toInstant();
        org.joda.time.DateTime dateTime37 = instant25.toDateTime();
        java.util.TimeZone timeZone38 = null;
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.forTimeZone(timeZone38);
        org.joda.time.chrono.GJChronology gJChronology40 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone39);
        java.util.Locale locale42 = new java.util.Locale("hi!");
        java.lang.String str43 = locale42.getCountry();
        java.util.Locale locale44 = java.util.Locale.getDefault();
        java.lang.String str45 = locale44.getDisplayName();
        java.lang.String str46 = locale42.getDisplayScript(locale44);
        boolean boolean47 = dateTimeZone39.equals((java.lang.Object) locale44);
        int int49 = dateTimeZone39.getOffsetFromLocal((long) (short) 10);
        java.util.TimeZone timeZone50 = null;
        org.joda.time.DateTimeZone dateTimeZone51 = org.joda.time.DateTimeZone.forTimeZone(timeZone50);
        org.joda.time.chrono.GJChronology gJChronology52 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone51);
        org.joda.time.DateTimeField dateTimeField53 = gJChronology52.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField54 = gJChronology52.weekyearOfCentury();
        org.joda.time.Instant instant55 = gJChronology52.getGregorianCutover();
        org.joda.time.Instant instant57 = instant55.withMillis(0L);
        org.joda.time.Instant instant59 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone60 = null;
        org.joda.time.DateTimeZone dateTimeZone61 = org.joda.time.DateTimeZone.forTimeZone(timeZone60);
        org.joda.time.chrono.GJChronology gJChronology62 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone61);
        org.joda.time.DateTimeField dateTimeField63 = gJChronology62.millisOfSecond();
        int int64 = instant59.get(dateTimeField63);
        org.joda.time.Instant instant66 = instant59.plus(0L);
        int int67 = instant57.compareTo((org.joda.time.ReadableInstant) instant66);
        org.joda.time.DateTimeFieldType dateTimeFieldType68 = null;
        boolean boolean69 = instant66.isSupported(dateTimeFieldType68);
        int int70 = dateTimeZone39.getOffset((org.joda.time.ReadableInstant) instant66);
        org.joda.time.DateTime dateTime71 = instant66.toDateTimeISO();
        int int72 = dateTime37.compareTo((org.joda.time.ReadableInstant) dateTime71);
        java.util.TimeZone timeZone73 = null;
        org.joda.time.DateTimeZone dateTimeZone74 = org.joda.time.DateTimeZone.forTimeZone(timeZone73);
        org.joda.time.chrono.GJChronology gJChronology75 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone74);
        org.joda.time.DateTimeField dateTimeField76 = gJChronology75.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField77 = gJChronology75.weekyearOfCentury();
        org.joda.time.Instant instant78 = gJChronology75.getGregorianCutover();
        org.joda.time.Instant instant80 = instant78.withMillis(0L);
        org.joda.time.Instant instant82 = instant80.minus(0L);
        boolean boolean83 = dateTime37.isBefore((org.joda.time.ReadableInstant) instant80);
        boolean boolean84 = instant5.isBefore((org.joda.time.ReadableInstant) instant80);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant3 and dateTime4", (instant3.compareTo(dateTime4) == 0) == instant3.equals(dateTime4));
    }

    @Test
    public void test1782() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1782");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        boolean boolean2 = instant1.isEqualNow();
        java.lang.String str3 = instant1.toString();
        java.lang.String str4 = instant1.toString();
        org.joda.time.Instant instant7 = instant1.withDurationAdded(115200000L, (int) (short) 1);
        java.util.TimeZone timeZone8 = null;
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forTimeZone(timeZone8);
        java.lang.String str11 = dateTimeZone9.getNameKey((long) 100);
        boolean boolean12 = dateTimeZone9.isFixed();
        org.joda.time.DateTime dateTime13 = instant1.toDateTime(dateTimeZone9);
        boolean boolean15 = instant1.isAfter(0L);
        java.util.TimeZone timeZone16 = null;
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forTimeZone(timeZone16);
        org.joda.time.chrono.GJChronology gJChronology18 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone17);
        org.joda.time.DateTimeField dateTimeField19 = gJChronology18.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField20 = gJChronology18.weekyear();
        org.joda.time.DurationField durationField21 = gJChronology18.centuries();
        org.joda.time.DateTimeField dateTimeField22 = gJChronology18.halfdayOfDay();
        org.joda.time.DurationField durationField23 = gJChronology18.minutes();
        org.joda.time.DateTimeField dateTimeField24 = gJChronology18.yearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) -1, 52);
        org.joda.time.Chronology chronology28 = gJChronology18.withZone(dateTimeZone27);
        java.lang.String str29 = dateTimeZone27.getID();
        org.joda.time.DateTime dateTime30 = instant1.toDateTime(dateTimeZone27);
        org.joda.time.DateTimeZone dateTimeZone31 = instant1.getZone();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime13 and dateTime30", (dateTime13.compareTo(dateTime30) == 0) == dateTime13.equals(dateTime30));
    }

    @Test
    public void test1783() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1783");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forTimeZone(timeZone2);
        org.joda.time.chrono.GJChronology gJChronology4 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone3);
        org.joda.time.DateTimeField dateTimeField5 = gJChronology4.millisOfSecond();
        int int6 = instant1.get(dateTimeField5);
        boolean boolean7 = instant1.isEqualNow();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = null;
        java.lang.String str9 = instant1.toString(dateTimeFormatter8);
        boolean boolean10 = instant1.isAfterNow();
        org.joda.time.Instant instant11 = instant1.toInstant();
        boolean boolean12 = instant11.isEqualNow();
        org.joda.time.Instant instant14 = new org.joda.time.Instant(52L);
        boolean boolean15 = instant14.isEqualNow();
        java.lang.String str16 = instant14.toString();
        java.lang.String str17 = instant14.toString();
        org.joda.time.Instant instant19 = new org.joda.time.Instant(52L);
        boolean boolean20 = instant19.isEqualNow();
        org.joda.time.ReadableDuration readableDuration21 = null;
        org.joda.time.Instant instant22 = instant19.plus(readableDuration21);
        boolean boolean23 = instant14.isBefore((org.joda.time.ReadableInstant) instant22);
        org.joda.time.Instant instant25 = instant22.plus(747221760000000000L);
        org.joda.time.Instant instant27 = new org.joda.time.Instant(52L);
        boolean boolean28 = instant27.isEqualNow();
        java.lang.String str29 = instant27.toString();
        java.util.TimeZone timeZone30 = null;
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forTimeZone(timeZone30);
        org.joda.time.chrono.GJChronology gJChronology32 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone31);
        java.util.Locale locale34 = new java.util.Locale("hi!");
        java.lang.String str35 = locale34.getCountry();
        java.util.Locale locale36 = java.util.Locale.getDefault();
        java.lang.String str37 = locale36.getDisplayName();
        java.lang.String str38 = locale34.getDisplayScript(locale36);
        boolean boolean39 = dateTimeZone31.equals((java.lang.Object) locale36);
        int int41 = dateTimeZone31.getOffsetFromLocal((long) (short) 10);
        java.util.TimeZone timeZone42 = null;
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.forTimeZone(timeZone42);
        org.joda.time.chrono.GJChronology gJChronology44 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone43);
        org.joda.time.DateTimeField dateTimeField45 = gJChronology44.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField46 = gJChronology44.weekyearOfCentury();
        org.joda.time.Instant instant47 = gJChronology44.getGregorianCutover();
        org.joda.time.Instant instant49 = instant47.withMillis(0L);
        org.joda.time.Instant instant51 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone52 = null;
        org.joda.time.DateTimeZone dateTimeZone53 = org.joda.time.DateTimeZone.forTimeZone(timeZone52);
        org.joda.time.chrono.GJChronology gJChronology54 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone53);
        org.joda.time.DateTimeField dateTimeField55 = gJChronology54.millisOfSecond();
        int int56 = instant51.get(dateTimeField55);
        org.joda.time.Instant instant58 = instant51.plus(0L);
        int int59 = instant49.compareTo((org.joda.time.ReadableInstant) instant58);
        org.joda.time.DateTimeFieldType dateTimeFieldType60 = null;
        boolean boolean61 = instant58.isSupported(dateTimeFieldType60);
        int int62 = dateTimeZone31.getOffset((org.joda.time.ReadableInstant) instant58);
        boolean boolean63 = instant27.isAfter((org.joda.time.ReadableInstant) instant58);
        org.joda.time.ReadableDuration readableDuration64 = null;
        org.joda.time.Instant instant66 = instant27.withDurationAdded(readableDuration64, 1);
        int int67 = instant25.compareTo((org.joda.time.ReadableInstant) instant27);
        java.util.TimeZone timeZone68 = null;
        org.joda.time.DateTimeZone dateTimeZone69 = org.joda.time.DateTimeZone.forTimeZone(timeZone68);
        org.joda.time.chrono.GJChronology gJChronology70 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone69);
        org.joda.time.DurationField durationField71 = gJChronology70.halfdays();
        long long75 = gJChronology70.add((long) 'a', (-1L), (int) (short) 0);
        org.joda.time.DateTimeField dateTimeField76 = gJChronology70.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField77 = gJChronology70.secondOfMinute();
        org.joda.time.Instant instant79 = new org.joda.time.Instant(52L);
        boolean boolean80 = instant79.isEqualNow();
        org.joda.time.ReadableDuration readableDuration81 = null;
        org.joda.time.Instant instant82 = instant79.plus(readableDuration81);
        boolean boolean83 = gJChronology70.equals((java.lang.Object) instant79);
        java.util.TimeZone timeZone84 = null;
        org.joda.time.DateTimeZone dateTimeZone85 = org.joda.time.DateTimeZone.forTimeZone(timeZone84);
        org.joda.time.chrono.GJChronology gJChronology86 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone85);
        org.joda.time.DurationField durationField87 = gJChronology86.halfdays();
        org.joda.time.DateTimeField dateTimeField88 = gJChronology86.millisOfDay();
        org.joda.time.DateTimeField dateTimeField89 = gJChronology86.minuteOfDay();
        org.joda.time.DurationField durationField90 = gJChronology86.centuries();
        org.joda.time.DateTimeField dateTimeField91 = gJChronology86.dayOfYear();
        java.lang.String str92 = gJChronology86.toString();
        org.joda.time.DateTimeField dateTimeField93 = gJChronology86.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone94 = gJChronology86.getZone();
        org.joda.time.DateTime dateTime95 = instant79.toDateTime((org.joda.time.Chronology) gJChronology86);
        boolean boolean97 = dateTime95.isBefore(262974605200L);
        int int98 = instant27.compareTo((org.joda.time.ReadableInstant) dateTime95);
        boolean boolean99 = instant11.equals((java.lang.Object) int98);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant11 and dateTime95", (instant11.compareTo(dateTime95) == 0) == instant11.equals(dateTime95));
    }

    @Test
    public void test1784() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1784");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        boolean boolean2 = instant1.isEqualNow();
        java.lang.String str3 = instant1.toString();
        java.lang.String str4 = instant1.toString();
        org.joda.time.Instant instant7 = instant1.withDurationAdded(115200000L, (int) (short) 1);
        java.util.TimeZone timeZone8 = null;
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forTimeZone(timeZone8);
        java.lang.String str11 = dateTimeZone9.getNameKey((long) 100);
        boolean boolean12 = dateTimeZone9.isFixed();
        org.joda.time.DateTime dateTime13 = instant1.toDateTime(dateTimeZone9);
        boolean boolean15 = instant1.isAfter(0L);
        java.util.TimeZone timeZone16 = null;
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forTimeZone(timeZone16);
        org.joda.time.chrono.GJChronology gJChronology18 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone17);
        org.joda.time.DateTimeField dateTimeField19 = gJChronology18.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField20 = gJChronology18.weekyear();
        org.joda.time.DurationField durationField21 = gJChronology18.centuries();
        org.joda.time.DateTimeField dateTimeField22 = gJChronology18.halfdayOfDay();
        org.joda.time.DurationField durationField23 = gJChronology18.minutes();
        org.joda.time.DateTimeField dateTimeField24 = gJChronology18.yearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) -1, 52);
        org.joda.time.Chronology chronology28 = gJChronology18.withZone(dateTimeZone27);
        java.lang.String str29 = dateTimeZone27.getID();
        org.joda.time.DateTime dateTime30 = instant1.toDateTime(dateTimeZone27);
        org.joda.time.Instant instant32 = new org.joda.time.Instant(52L);
        boolean boolean33 = instant32.isEqualNow();
        org.joda.time.ReadableDuration readableDuration34 = null;
        org.joda.time.Instant instant35 = instant32.plus(readableDuration34);
        long long36 = instant32.getMillis();
        org.joda.time.Instant instant39 = instant32.withDurationAdded((long) 'a', (int) (byte) 10);
        org.joda.time.Instant instant41 = instant39.minus(3155760000052L);
        long long42 = instant39.getMillis();
        org.joda.time.Instant instant44 = new org.joda.time.Instant(52L);
        boolean boolean45 = instant44.isEqualNow();
        java.lang.String str46 = instant44.toString();
        java.lang.String str47 = instant44.toString();
        org.joda.time.Instant instant49 = new org.joda.time.Instant(52L);
        boolean boolean50 = instant49.isEqualNow();
        org.joda.time.ReadableDuration readableDuration51 = null;
        org.joda.time.Instant instant52 = instant49.plus(readableDuration51);
        boolean boolean53 = instant44.isBefore((org.joda.time.ReadableInstant) instant52);
        org.joda.time.Instant instant55 = instant52.plus((long) (short) 100);
        java.lang.String str56 = instant52.toString();
        boolean boolean58 = instant52.isBefore((-3155695200000L));
        org.joda.time.ReadableDuration readableDuration59 = null;
        org.joda.time.Instant instant60 = instant52.minus(readableDuration59);
        int int61 = instant39.compareTo((org.joda.time.ReadableInstant) instant60);
        org.joda.time.ReadableDuration readableDuration62 = null;
        org.joda.time.Instant instant63 = instant60.minus(readableDuration62);
        org.joda.time.ReadableDuration readableDuration64 = null;
        org.joda.time.Instant instant66 = instant63.withDurationAdded(readableDuration64, 3500);
        int int67 = dateTime30.compareTo((org.joda.time.ReadableInstant) instant66);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and dateTime13", (instant1.compareTo(dateTime13) == 0) == instant1.equals(dateTime13));
    }

    @Test
    public void test1785() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1785");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField3 = gJChronology2.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.weekyearOfCentury();
        org.joda.time.Instant instant5 = gJChronology2.getGregorianCutover();
        org.joda.time.Instant instant7 = new org.joda.time.Instant(52L);
        boolean boolean8 = instant7.isEqualNow();
        java.lang.String str9 = instant7.toString();
        java.lang.String str10 = instant7.toString();
        org.joda.time.Instant instant12 = new org.joda.time.Instant(52L);
        boolean boolean13 = instant12.isEqualNow();
        org.joda.time.ReadableDuration readableDuration14 = null;
        org.joda.time.Instant instant15 = instant12.plus(readableDuration14);
        boolean boolean16 = instant7.isBefore((org.joda.time.ReadableInstant) instant15);
        org.joda.time.Instant instant18 = instant15.plus((long) (short) 100);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MutableDateTime mutableDateTime20 = instant15.toMutableDateTime(chronology19);
        boolean boolean21 = instant5.isEqual((org.joda.time.ReadableInstant) mutableDateTime20);
        java.util.TimeZone timeZone22 = null;
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        org.joda.time.chrono.GJChronology gJChronology24 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone23);
        org.joda.time.DurationField durationField25 = gJChronology24.halfdays();
        long long29 = gJChronology24.add((long) 'a', (-1L), (int) (short) 0);
        boolean boolean31 = gJChronology24.equals((java.lang.Object) 0);
        org.joda.time.DateTimeField dateTimeField32 = gJChronology24.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField33 = gJChronology24.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField34 = gJChronology24.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField35 = gJChronology24.clockhourOfHalfday();
        org.joda.time.DurationField durationField36 = gJChronology24.halfdays();
        org.joda.time.DateTimeField dateTimeField37 = gJChronology24.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField38 = gJChronology24.centuryOfEra();
        boolean boolean39 = mutableDateTime20.equals((java.lang.Object) gJChronology24);
        org.joda.time.Instant instant41 = new org.joda.time.Instant(52L);
        boolean boolean42 = instant41.isEqualNow();
        java.lang.String str43 = instant41.toString();
        java.util.TimeZone timeZone44 = null;
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.forTimeZone(timeZone44);
        org.joda.time.chrono.GJChronology gJChronology46 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone45);
        java.util.Locale locale48 = new java.util.Locale("hi!");
        java.lang.String str49 = locale48.getCountry();
        java.util.Locale locale50 = java.util.Locale.getDefault();
        java.lang.String str51 = locale50.getDisplayName();
        java.lang.String str52 = locale48.getDisplayScript(locale50);
        boolean boolean53 = dateTimeZone45.equals((java.lang.Object) locale50);
        int int55 = dateTimeZone45.getOffsetFromLocal((long) (short) 10);
        java.util.TimeZone timeZone56 = null;
        org.joda.time.DateTimeZone dateTimeZone57 = org.joda.time.DateTimeZone.forTimeZone(timeZone56);
        org.joda.time.chrono.GJChronology gJChronology58 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone57);
        org.joda.time.DateTimeField dateTimeField59 = gJChronology58.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField60 = gJChronology58.weekyearOfCentury();
        org.joda.time.Instant instant61 = gJChronology58.getGregorianCutover();
        org.joda.time.Instant instant63 = instant61.withMillis(0L);
        org.joda.time.Instant instant65 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone66 = null;
        org.joda.time.DateTimeZone dateTimeZone67 = org.joda.time.DateTimeZone.forTimeZone(timeZone66);
        org.joda.time.chrono.GJChronology gJChronology68 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone67);
        org.joda.time.DateTimeField dateTimeField69 = gJChronology68.millisOfSecond();
        int int70 = instant65.get(dateTimeField69);
        org.joda.time.Instant instant72 = instant65.plus(0L);
        int int73 = instant63.compareTo((org.joda.time.ReadableInstant) instant72);
        org.joda.time.DateTimeFieldType dateTimeFieldType74 = null;
        boolean boolean75 = instant72.isSupported(dateTimeFieldType74);
        int int76 = dateTimeZone45.getOffset((org.joda.time.ReadableInstant) instant72);
        boolean boolean77 = instant41.isAfter((org.joda.time.ReadableInstant) instant72);
        org.joda.time.Instant instant79 = instant72.withMillis((long) 10);
        org.joda.time.DateTime dateTime80 = instant72.toDateTimeISO();
        java.util.TimeZone timeZone81 = null;
        org.joda.time.DateTimeZone dateTimeZone82 = org.joda.time.DateTimeZone.forTimeZone(timeZone81);
        org.joda.time.chrono.GJChronology gJChronology83 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone82);
        org.joda.time.DurationField durationField84 = gJChronology83.halfdays();
        long long88 = gJChronology83.add((long) 'a', (-1L), (int) (short) 0);
        long long92 = gJChronology83.add((long) (byte) 0, (long) '4', 100);
        org.joda.time.DurationField durationField93 = gJChronology83.years();
        org.joda.time.DateTimeField dateTimeField94 = gJChronology83.dayOfYear();
        int int95 = dateTime80.get(dateTimeField94);
        org.joda.time.DateTimeZone dateTimeZone96 = dateTime80.getZone();
        boolean boolean97 = mutableDateTime20.isAfter((org.joda.time.ReadableInstant) dateTime80);
        boolean boolean99 = mutableDateTime20.isBefore(7200000L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant7 and dateTime80", (instant7.compareTo(dateTime80) == 0) == instant7.equals(dateTime80));
    }

    @Test
    public void test1786() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1786");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = gJChronology2.halfdays();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.millisOfDay();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.minuteOfDay();
        org.joda.time.DurationField durationField6 = gJChronology2.centuries();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology2.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField8 = gJChronology2.year();
        org.joda.time.DurationField durationField9 = gJChronology2.weekyears();
        java.lang.String str10 = gJChronology2.toString();
        org.joda.time.DateTimeField dateTimeField11 = gJChronology2.hourOfHalfday();
        org.joda.time.Chronology chronology12 = gJChronology2.withUTC();
        org.joda.time.DurationField durationField13 = gJChronology2.years();
        org.joda.time.Chronology chronology14 = gJChronology2.withUTC();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on durationField9 and durationField13", (durationField9.compareTo(durationField13) == 0) == durationField9.equals(durationField13));
    }

    @Test
    public void test1787() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1787");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField3 = gJChronology2.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology2.hourOfDay();
        org.joda.time.DurationField durationField7 = gJChronology2.months();
        org.joda.time.DurationField durationField8 = gJChronology2.eras();
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.Chronology chronology10 = gJChronology2.withZone(dateTimeZone9);
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField7 and durationField8", Math.signum(durationField7.compareTo(durationField8)) == -Math.signum(durationField8.compareTo(durationField7)));
    }

    @Test
    public void test1788() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1788");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        boolean boolean2 = instant1.isEqualNow();
        org.joda.time.ReadableDuration readableDuration3 = null;
        org.joda.time.Instant instant4 = instant1.plus(readableDuration3);
        org.joda.time.Instant instant6 = new org.joda.time.Instant(52L);
        org.joda.time.Instant instant8 = instant6.withMillis((long) 'u');
        java.util.TimeZone timeZone9 = null;
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forTimeZone(timeZone9);
        org.joda.time.chrono.GJChronology gJChronology11 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone10);
        org.joda.time.DurationField durationField12 = gJChronology11.halfdays();
        long long16 = gJChronology11.add((long) 'a', (-1L), (int) (short) 0);
        boolean boolean18 = gJChronology11.equals((java.lang.Object) 0);
        org.joda.time.DateTimeField dateTimeField19 = gJChronology11.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField20 = gJChronology11.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField21 = gJChronology11.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField22 = gJChronology11.clockhourOfHalfday();
        org.joda.time.DateTime dateTime23 = instant6.toDateTime((org.joda.time.Chronology) gJChronology11);
        java.lang.String str24 = dateTime23.toString();
        boolean boolean25 = instant4.isEqual((org.joda.time.ReadableInstant) dateTime23);
        long long26 = instant4.getMillis();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant4 and dateTime23", (instant4.compareTo(dateTime23) == 0) == instant4.equals(dateTime23));
    }

    @Test
    public void test1789() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1789");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = gJChronology2.halfdays();
        long long7 = gJChronology2.add(0L, (long) (short) -1, (int) '4');
        org.joda.time.DurationField durationField8 = gJChronology2.weekyears();
        org.joda.time.DurationField durationField9 = gJChronology2.months();
        org.joda.time.DurationField durationField10 = gJChronology2.years();
        org.joda.time.DateTimeField dateTimeField11 = gJChronology2.minuteOfHour();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on durationField8 and durationField10", (durationField8.compareTo(durationField10) == 0) == durationField8.equals(durationField10));
    }

    @Test
    public void test1790() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1790");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = gJChronology2.halfdays();
        long long7 = gJChronology2.add((long) 'a', (-1L), (int) (short) 0);
        boolean boolean9 = gJChronology2.equals((java.lang.Object) 0);
        org.joda.time.DateTimeField dateTimeField10 = gJChronology2.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField11 = gJChronology2.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField12 = gJChronology2.clockhourOfDay();
        long long17 = gJChronology2.getDateTimeMillis(10, (int) (short) 10, 4, (int) (byte) 1);
        org.joda.time.DateTimeField dateTimeField18 = gJChronology2.millisOfDay();
        java.lang.String str19 = gJChronology2.toString();
        org.joda.time.DateTimeField dateTimeField20 = gJChronology2.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField21 = gJChronology2.centuryOfEra();
        long long25 = gJChronology2.add(0L, 10L, 100);
        org.joda.time.Instant instant26 = new org.joda.time.Instant((java.lang.Object) 0L);
        java.lang.String str27 = instant26.toString();
        org.joda.time.Instant instant30 = instant26.withDurationAdded((-8567399948L), (int) 'u');
        org.joda.time.Chronology chronology31 = instant30.getChronology();
        org.joda.time.Instant instant32 = instant30.toInstant();
        java.util.TimeZone timeZone33 = null;
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.forTimeZone(timeZone33);
        org.joda.time.chrono.GJChronology gJChronology35 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone34);
        org.joda.time.DurationField durationField36 = gJChronology35.halfdays();
        long long40 = gJChronology35.add((long) 'a', (-1L), (int) (short) 0);
        org.joda.time.DateTimeField dateTimeField41 = gJChronology35.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField42 = gJChronology35.secondOfMinute();
        org.joda.time.Instant instant44 = new org.joda.time.Instant(52L);
        boolean boolean45 = instant44.isEqualNow();
        org.joda.time.ReadableDuration readableDuration46 = null;
        org.joda.time.Instant instant47 = instant44.plus(readableDuration46);
        boolean boolean48 = gJChronology35.equals((java.lang.Object) instant44);
        java.util.TimeZone timeZone49 = null;
        org.joda.time.DateTimeZone dateTimeZone50 = org.joda.time.DateTimeZone.forTimeZone(timeZone49);
        org.joda.time.chrono.GJChronology gJChronology51 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone50);
        org.joda.time.DurationField durationField52 = gJChronology51.halfdays();
        org.joda.time.DateTimeField dateTimeField53 = gJChronology51.millisOfDay();
        org.joda.time.DateTimeField dateTimeField54 = gJChronology51.minuteOfDay();
        org.joda.time.DurationField durationField55 = gJChronology51.centuries();
        org.joda.time.DateTimeField dateTimeField56 = gJChronology51.dayOfYear();
        java.lang.String str57 = gJChronology51.toString();
        org.joda.time.DateTimeField dateTimeField58 = gJChronology51.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone59 = gJChronology51.getZone();
        org.joda.time.DateTime dateTime60 = instant44.toDateTime((org.joda.time.Chronology) gJChronology51);
        org.joda.time.Instant instant62 = new org.joda.time.Instant(52L);
        boolean boolean63 = instant62.isEqualNow();
        java.lang.String str64 = instant62.toString();
        org.joda.time.DateTimeZone dateTimeZone65 = instant62.getZone();
        org.joda.time.Instant instant67 = instant62.minus((-2208729599948L));
        boolean boolean68 = instant62.isBeforeNow();
        boolean boolean69 = dateTime60.isEqual((org.joda.time.ReadableInstant) instant62);
        int int70 = instant30.compareTo((org.joda.time.ReadableInstant) instant62);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant44 and dateTime60", (instant44.compareTo(dateTime60) == 0) == instant44.equals(dateTime60));
    }

    @Test
    public void test1791() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1791");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = gJChronology2.halfdays();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.millisOfDay();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.minuteOfDay();
        org.joda.time.DurationField durationField6 = gJChronology2.centuries();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology2.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField8 = gJChronology2.year();
        org.joda.time.DurationField durationField9 = gJChronology2.weekyears();
        java.lang.String str10 = gJChronology2.toString();
        org.joda.time.DateTimeField dateTimeField11 = gJChronology2.hourOfHalfday();
        org.joda.time.Chronology chronology12 = gJChronology2.withUTC();
        org.joda.time.DurationField durationField13 = gJChronology2.years();
        org.joda.time.DateTimeField dateTimeField14 = gJChronology2.year();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on durationField9 and durationField13", (durationField9.compareTo(durationField13) == 0) == durationField9.equals(durationField13));
    }

    @Test
    public void test1792() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1792");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField3 = gJChronology2.millisOfSecond();
        org.joda.time.DurationField durationField4 = gJChronology2.millis();
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        long long8 = gJChronology2.add(readablePeriod5, (long) 'a', (int) '4');
        org.joda.time.DateTimeField dateTimeField9 = gJChronology2.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField10 = gJChronology2.year();
        org.joda.time.DurationField durationField11 = gJChronology2.years();
        org.joda.time.DateTimeField dateTimeField12 = gJChronology2.dayOfMonth();
        org.joda.time.DurationField durationField13 = gJChronology2.eras();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField13, durationField4, and durationField11", !(durationField13.compareTo(durationField4) == 0) || (Math.signum(durationField13.compareTo(durationField11)) == Math.signum(durationField4.compareTo(durationField11))));
    }

    @Test
    public void test1793() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1793");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = gJChronology2.halfdays();
        long long7 = gJChronology2.add((long) 'a', (-1L), (int) (short) 0);
        boolean boolean9 = gJChronology2.equals((java.lang.Object) 0);
        org.joda.time.DateTimeField dateTimeField10 = gJChronology2.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField11 = gJChronology2.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField12 = gJChronology2.clockhourOfDay();
        long long17 = gJChronology2.getDateTimeMillis(10, (int) (short) 10, 4, (int) (byte) 1);
        org.joda.time.DateTimeField dateTimeField18 = gJChronology2.millisOfDay();
        java.lang.String str19 = gJChronology2.toString();
        org.joda.time.DateTimeField dateTimeField20 = gJChronology2.dayOfYear();
        org.joda.time.DurationField durationField21 = gJChronology2.days();
        org.joda.time.DateTimeField dateTimeField22 = gJChronology2.monthOfYear();
        org.joda.time.DurationField durationField23 = gJChronology2.eras();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField23, durationField3, and durationField21", !(durationField23.compareTo(durationField3) == 0) || (Math.signum(durationField23.compareTo(durationField21)) == Math.signum(durationField3.compareTo(durationField21))));
    }

    @Test
    public void test1794() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1794");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        boolean boolean2 = instant1.isEqualNow();
        java.lang.String str3 = instant1.toString();
        java.lang.String str4 = instant1.toString();
        org.joda.time.Instant instant7 = instant1.withDurationAdded(115200000L, (int) (short) 1);
        org.joda.time.Instant instant8 = instant1.toInstant();
        long long9 = instant1.getMillis();
        java.util.TimeZone timeZone10 = null;
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forTimeZone(timeZone10);
        org.joda.time.chrono.GJChronology gJChronology12 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone11);
        org.joda.time.DateTimeField dateTimeField13 = gJChronology12.millisOfSecond();
        org.joda.time.DurationField durationField14 = gJChronology12.weeks();
        org.joda.time.DurationField durationField15 = gJChronology12.months();
        java.lang.String str16 = gJChronology12.toString();
        org.joda.time.DateTimeField dateTimeField17 = gJChronology12.dayOfWeek();
        boolean boolean18 = instant1.equals((java.lang.Object) gJChronology12);
        org.joda.time.ReadableDuration readableDuration19 = null;
        org.joda.time.Instant instant21 = instant1.withDurationAdded(readableDuration19, (-313));
        java.util.TimeZone timeZone22 = null;
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        org.joda.time.chrono.GJChronology gJChronology24 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone23);
        org.joda.time.DurationField durationField25 = gJChronology24.halfdays();
        long long29 = gJChronology24.add((long) 'a', (-1L), (int) (short) 0);
        long long33 = gJChronology24.add((long) (byte) 0, (long) '4', 100);
        org.joda.time.DateTimeField dateTimeField34 = gJChronology24.minuteOfHour();
        org.joda.time.DurationField durationField35 = gJChronology24.hours();
        org.joda.time.DateTimeField dateTimeField36 = gJChronology24.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField37 = gJChronology24.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField38 = gJChronology24.secondOfDay();
        org.joda.time.DateTimeField dateTimeField39 = gJChronology24.secondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone40 = gJChronology24.getZone();
        long long42 = dateTimeZone40.convertUTCToLocal(3155760000000L);
        org.joda.time.chrono.GJChronology gJChronology43 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone40);
        org.joda.time.DateTimeField dateTimeField44 = gJChronology43.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField45 = gJChronology43.clockhourOfHalfday();
        org.joda.time.DateTime dateTime46 = instant21.toDateTime((org.joda.time.Chronology) gJChronology43);
        org.joda.time.DateTimeField dateTimeField47 = gJChronology43.halfdayOfDay();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and dateTime46", (instant1.compareTo(dateTime46) == 0) == instant1.equals(dateTime46));
    }

    @Test
    public void test1795() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1795");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = gJChronology2.halfdays();
        long long7 = gJChronology2.add((long) 'a', (-1L), (int) (short) 0);
        boolean boolean9 = gJChronology2.equals((java.lang.Object) 0);
        org.joda.time.DateTimeField dateTimeField10 = gJChronology2.dayOfMonth();
        org.joda.time.DurationField durationField11 = gJChronology2.seconds();
        org.joda.time.DateTimeField dateTimeField12 = gJChronology2.halfdayOfDay();
        org.joda.time.DurationField durationField13 = gJChronology2.days();
        org.joda.time.DateTimeField dateTimeField14 = gJChronology2.yearOfEra();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology2.secondOfMinute();
        org.joda.time.DurationField durationField16 = gJChronology2.eras();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField16, durationField3, and durationField11", !(durationField16.compareTo(durationField3) == 0) || (Math.signum(durationField16.compareTo(durationField11)) == Math.signum(durationField3.compareTo(durationField11))));
    }

    @Test
    public void test1796() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1796");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forTimeZone(timeZone2);
        org.joda.time.chrono.GJChronology gJChronology4 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone3);
        org.joda.time.DateTimeField dateTimeField5 = gJChronology4.millisOfSecond();
        int int6 = instant1.get(dateTimeField5);
        boolean boolean7 = instant1.isEqualNow();
        boolean boolean9 = instant1.isBefore(35L);
        java.util.TimeZone timeZone10 = null;
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forTimeZone(timeZone10);
        org.joda.time.chrono.GJChronology gJChronology12 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone11);
        org.joda.time.DateTimeField dateTimeField13 = gJChronology12.era();
        org.joda.time.DateTimeField dateTimeField14 = gJChronology12.centuryOfEra();
        org.joda.time.DurationField durationField15 = gJChronology12.hours();
        org.joda.time.DateTimeField dateTimeField16 = gJChronology12.monthOfYear();
        org.joda.time.DateTimeField dateTimeField17 = gJChronology12.dayOfWeek();
        org.joda.time.Chronology chronology18 = gJChronology12.withUTC();
        org.joda.time.DurationField durationField19 = gJChronology12.centuries();
        java.util.TimeZone timeZone20 = null;
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forTimeZone(timeZone20);
        java.lang.String str23 = dateTimeZone21.getNameKey((long) 100);
        boolean boolean24 = dateTimeZone21.isFixed();
        org.joda.time.chrono.GJChronology gJChronology25 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone21);
        int int26 = gJChronology25.getMinimumDaysInFirstWeek();
        java.lang.String str27 = gJChronology25.toString();
        org.joda.time.DateTimeField dateTimeField28 = gJChronology25.yearOfEra();
        org.joda.time.DateTimeField dateTimeField29 = gJChronology25.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField30 = gJChronology25.dayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology32 = gJChronology25.withZone(dateTimeZone31);
        org.joda.time.DateTimeField dateTimeField33 = chronology32.millisOfSecond();
        java.util.TimeZone timeZone34 = null;
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.forTimeZone(timeZone34);
        org.joda.time.chrono.GJChronology gJChronology36 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone35);
        int int38 = dateTimeZone35.getOffsetFromLocal((long) (-1));
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.forOffsetHours((int) '4');
        long long42 = dateTimeZone35.getMillisKeepLocal(dateTimeZone40, (-8380800000L));
        org.joda.time.Chronology chronology43 = chronology32.withZone(dateTimeZone35);
        java.util.TimeZone timeZone44 = null;
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.forTimeZone(timeZone44);
        org.joda.time.chrono.GJChronology gJChronology46 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone45);
        org.joda.time.DurationField durationField47 = gJChronology46.halfdays();
        java.util.TimeZone timeZone48 = null;
        org.joda.time.DateTimeZone dateTimeZone49 = org.joda.time.DateTimeZone.forTimeZone(timeZone48);
        org.joda.time.chrono.GJChronology gJChronology50 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone49);
        long long54 = dateTimeZone49.convertLocalToUTC((long) (byte) -1, true, 0L);
        boolean boolean56 = dateTimeZone49.equals((java.lang.Object) true);
        org.joda.time.Chronology chronology57 = gJChronology46.withZone(dateTimeZone49);
        org.joda.time.LocalDateTime localDateTime58 = null;
        boolean boolean59 = dateTimeZone49.isLocalDateTimeGap(localDateTime58);
        boolean boolean60 = dateTimeZone49.isFixed();
        long long62 = dateTimeZone35.getMillisKeepLocal(dateTimeZone49, (long) (short) -1);
        org.joda.time.Chronology chronology63 = gJChronology12.withZone(dateTimeZone49);
        org.joda.time.Instant instant65 = new org.joda.time.Instant(52L);
        boolean boolean66 = instant65.isEqualNow();
        java.lang.String str67 = instant65.toString();
        org.joda.time.Chronology chronology68 = null;
        org.joda.time.MutableDateTime mutableDateTime69 = instant65.toMutableDateTime(chronology68);
        org.joda.time.MutableDateTime mutableDateTime70 = instant65.toMutableDateTime();
        org.joda.time.MutableDateTime mutableDateTime71 = instant65.toMutableDateTime();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter72 = null;
        java.lang.String str73 = instant65.toString(dateTimeFormatter72);
        org.joda.time.chrono.GJChronology gJChronology74 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone49, (org.joda.time.ReadableInstant) instant65);
        int int75 = instant1.compareTo((org.joda.time.ReadableInstant) instant65);
        java.util.TimeZone timeZone76 = null;
        org.joda.time.DateTimeZone dateTimeZone77 = org.joda.time.DateTimeZone.forTimeZone(timeZone76);
        org.joda.time.chrono.GJChronology gJChronology78 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone77);
        org.joda.time.DateTimeField dateTimeField79 = gJChronology78.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField80 = gJChronology78.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField81 = gJChronology78.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField82 = gJChronology78.halfdayOfDay();
        org.joda.time.MutableDateTime mutableDateTime83 = instant1.toMutableDateTime((org.joda.time.Chronology) gJChronology78);
        org.joda.time.DateTimeField dateTimeField84 = gJChronology78.year();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and mutableDateTime83", (instant1.compareTo(mutableDateTime83) == 0) == instant1.equals(mutableDateTime83));
    }

    @Test
    public void test1797() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1797");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField3 = gJChronology2.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.weekyearOfCentury();
        org.joda.time.Instant instant5 = gJChronology2.getGregorianCutover();
        org.joda.time.Instant instant7 = instant5.withMillis(0L);
        org.joda.time.Instant instant9 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone10 = null;
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forTimeZone(timeZone10);
        org.joda.time.chrono.GJChronology gJChronology12 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone11);
        org.joda.time.DateTimeField dateTimeField13 = gJChronology12.millisOfSecond();
        int int14 = instant9.get(dateTimeField13);
        org.joda.time.Instant instant16 = instant9.plus(0L);
        int int17 = instant7.compareTo((org.joda.time.ReadableInstant) instant16);
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = null;
        boolean boolean19 = instant16.isSupported(dateTimeFieldType18);
        org.joda.time.Instant instant21 = new org.joda.time.Instant(52L);
        boolean boolean22 = instant21.isEqualNow();
        org.joda.time.ReadableDuration readableDuration23 = null;
        org.joda.time.Instant instant24 = instant21.plus(readableDuration23);
        int int25 = instant16.compareTo((org.joda.time.ReadableInstant) instant21);
        org.joda.time.Instant instant27 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone28 = null;
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forTimeZone(timeZone28);
        org.joda.time.chrono.GJChronology gJChronology30 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone29);
        org.joda.time.DateTimeField dateTimeField31 = gJChronology30.millisOfSecond();
        int int32 = instant27.get(dateTimeField31);
        boolean boolean33 = instant27.isEqualNow();
        org.joda.time.ReadableDuration readableDuration34 = null;
        org.joda.time.Instant instant36 = instant27.withDurationAdded(readableDuration34, (int) (short) 0);
        org.joda.time.ReadableDuration readableDuration37 = null;
        org.joda.time.Instant instant38 = instant27.plus(readableDuration37);
        boolean boolean39 = instant16.isEqual((org.joda.time.ReadableInstant) instant38);
        java.util.TimeZone timeZone40 = null;
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.forTimeZone(timeZone40);
        org.joda.time.chrono.GJChronology gJChronology42 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone41);
        org.joda.time.DurationField durationField43 = gJChronology42.halfdays();
        long long47 = gJChronology42.add((long) 'a', (-1L), (int) (short) 0);
        boolean boolean49 = gJChronology42.equals((java.lang.Object) 0);
        org.joda.time.DateTimeField dateTimeField50 = gJChronology42.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField51 = gJChronology42.hourOfHalfday();
        org.joda.time.Instant instant52 = gJChronology42.getGregorianCutover();
        java.util.TimeZone timeZone53 = null;
        org.joda.time.DateTimeZone dateTimeZone54 = org.joda.time.DateTimeZone.forTimeZone(timeZone53);
        java.lang.String str56 = dateTimeZone54.getNameKey((long) 100);
        boolean boolean57 = dateTimeZone54.isFixed();
        org.joda.time.chrono.GJChronology gJChronology58 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone54);
        int int59 = gJChronology58.getMinimumDaysInFirstWeek();
        java.lang.String str60 = gJChronology58.toString();
        org.joda.time.DateTimeField dateTimeField61 = gJChronology58.yearOfEra();
        org.joda.time.DateTimeField dateTimeField62 = gJChronology58.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField63 = gJChronology58.weekyear();
        int int64 = instant52.get(dateTimeField63);
        boolean boolean65 = instant16.isBefore((org.joda.time.ReadableInstant) instant52);
        org.joda.time.Instant instant67 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone68 = null;
        org.joda.time.DateTimeZone dateTimeZone69 = org.joda.time.DateTimeZone.forTimeZone(timeZone68);
        org.joda.time.chrono.GJChronology gJChronology70 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone69);
        org.joda.time.DateTimeField dateTimeField71 = gJChronology70.millisOfSecond();
        int int72 = instant67.get(dateTimeField71);
        boolean boolean73 = instant67.isEqualNow();
        org.joda.time.ReadableDuration readableDuration74 = null;
        org.joda.time.Instant instant76 = instant67.withDurationAdded(readableDuration74, (int) (short) 0);
        org.joda.time.ReadableDuration readableDuration77 = null;
        org.joda.time.Instant instant78 = instant67.plus(readableDuration77);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter79 = null;
        java.lang.String str80 = instant67.toString(dateTimeFormatter79);
        org.joda.time.Instant instant83 = instant67.withDurationAdded((long) (byte) 1, 0);
        int int84 = instant16.compareTo((org.joda.time.ReadableInstant) instant83);
        org.joda.time.Instant instant85 = instant16.toInstant();
        java.util.TimeZone timeZone86 = null;
        org.joda.time.DateTimeZone dateTimeZone87 = org.joda.time.DateTimeZone.forTimeZone(timeZone86);
        org.joda.time.chrono.GJChronology gJChronology88 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone87);
        org.joda.time.DateTimeField dateTimeField89 = gJChronology88.era();
        java.lang.String str90 = gJChronology88.toString();
        org.joda.time.DateTimeField dateTimeField91 = gJChronology88.weekOfWeekyear();
        org.joda.time.Instant instant92 = gJChronology88.getGregorianCutover();
        org.joda.time.Chronology chronology93 = gJChronology88.withUTC();
        org.joda.time.DateTimeField dateTimeField94 = gJChronology88.weekOfWeekyear();
        org.joda.time.DateTime dateTime95 = instant85.toDateTime((org.joda.time.Chronology) gJChronology88);
        org.joda.time.DateTimeField dateTimeField96 = gJChronology88.monthOfYear();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant9 and dateTime95", (instant9.compareTo(dateTime95) == 0) == instant9.equals(dateTime95));
    }

    @Test
    public void test1798() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1798");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        boolean boolean2 = instant1.isEqualNow();
        org.joda.time.ReadableDuration readableDuration3 = null;
        org.joda.time.Instant instant4 = instant1.plus(readableDuration3);
        long long5 = instant1.getMillis();
        java.lang.String str6 = instant1.toString();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.getDefault();
        long long9 = dateTimeZone7.nextTransition(1000L);
        org.joda.time.DateTime dateTime10 = instant1.toDateTime(dateTimeZone7);
        java.util.TimeZone timeZone11 = null;
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forTimeZone(timeZone11);
        org.joda.time.chrono.GJChronology gJChronology13 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone12);
        long long17 = dateTimeZone12.convertLocalToUTC((long) (byte) -1, true, 0L);
        boolean boolean19 = dateTimeZone12.equals((java.lang.Object) true);
        org.joda.time.chrono.GJChronology gJChronology20 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone12);
        org.joda.time.DateTimeField dateTimeField21 = gJChronology20.weekyear();
        org.joda.time.DateTimeField dateTimeField22 = gJChronology20.era();
        org.joda.time.DateTimeField dateTimeField23 = gJChronology20.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        long long27 = gJChronology20.add(readablePeriod24, (-26438399999L), (int) (byte) 100);
        org.joda.time.DurationField durationField28 = gJChronology20.hours();
        org.joda.time.DateTimeField dateTimeField29 = gJChronology20.era();
        org.joda.time.MutableDateTime mutableDateTime30 = dateTime10.toMutableDateTime((org.joda.time.Chronology) gJChronology20);
        org.joda.time.DurationField durationField31 = gJChronology20.centuries();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and mutableDateTime30", (instant1.compareTo(mutableDateTime30) == 0) == instant1.equals(mutableDateTime30));
    }

    @Test
    public void test1799() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1799");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((-315566928000000L));
        java.util.TimeZone timeZone2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forTimeZone(timeZone2);
        org.joda.time.chrono.GJChronology gJChronology4 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone3);
        org.joda.time.DurationField durationField5 = gJChronology4.halfdays();
        long long9 = gJChronology4.add((long) 'a', (-1L), (int) (short) 0);
        org.joda.time.DateTimeField dateTimeField10 = gJChronology4.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField11 = gJChronology4.centuryOfEra();
        long long15 = gJChronology4.add(262974600000L, (long) (byte) 100, (int) '4');
        org.joda.time.DateTimeField dateTimeField16 = gJChronology4.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField17 = gJChronology4.weekOfWeekyear();
        org.joda.time.DateTime dateTime18 = instant1.toDateTime((org.joda.time.Chronology) gJChronology4);
        java.util.TimeZone timeZone19 = null;
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forTimeZone(timeZone19);
        org.joda.time.chrono.GJChronology gJChronology21 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone20);
        org.joda.time.DurationField durationField22 = gJChronology21.halfdays();
        long long26 = gJChronology21.add(0L, (long) (short) -1, (int) '4');
        java.util.TimeZone timeZone27 = null;
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forTimeZone(timeZone27);
        org.joda.time.chrono.GJChronology gJChronology29 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone28);
        org.joda.time.DurationField durationField30 = gJChronology29.halfdays();
        org.joda.time.DateTimeField dateTimeField31 = gJChronology29.millisOfDay();
        org.joda.time.DateTimeField dateTimeField32 = gJChronology29.minuteOfDay();
        org.joda.time.DurationField durationField33 = gJChronology29.centuries();
        org.joda.time.DateTimeField dateTimeField34 = gJChronology29.dayOfYear();
        java.lang.String str35 = gJChronology29.toString();
        org.joda.time.DurationField durationField36 = gJChronology29.years();
        org.joda.time.DateTimeField dateTimeField37 = gJChronology29.yearOfEra();
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(0, (int) (short) 10);
        org.joda.time.Chronology chronology41 = gJChronology29.withZone(dateTimeZone40);
        org.joda.time.Chronology chronology42 = gJChronology21.withZone(dateTimeZone40);
        org.joda.time.DurationField durationField43 = gJChronology21.halfdays();
        org.joda.time.Instant instant44 = gJChronology21.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration45 = null;
        org.joda.time.Instant instant46 = instant44.plus(readableDuration45);
        org.joda.time.DateTime dateTime47 = instant46.toDateTimeISO();
        boolean boolean48 = instant1.isBefore((org.joda.time.ReadableInstant) dateTime47);
        org.joda.time.Instant instant50 = new org.joda.time.Instant(52L);
        boolean boolean51 = instant50.isEqualNow();
        org.joda.time.ReadableDuration readableDuration52 = null;
        org.joda.time.Instant instant53 = instant50.plus(readableDuration52);
        org.joda.time.Instant instant55 = instant50.withMillis((long) 4);
        org.joda.time.Instant instant57 = instant55.withMillis((-5919628L));
        java.util.TimeZone timeZone58 = null;
        org.joda.time.DateTimeZone dateTimeZone59 = org.joda.time.DateTimeZone.forTimeZone(timeZone58);
        org.joda.time.chrono.GJChronology gJChronology60 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone59);
        org.joda.time.DateTimeField dateTimeField61 = gJChronology60.millisOfSecond();
        org.joda.time.DurationField durationField62 = gJChronology60.weeks();
        org.joda.time.DurationField durationField63 = gJChronology60.months();
        java.lang.String str64 = gJChronology60.toString();
        org.joda.time.DateTimeField dateTimeField65 = gJChronology60.centuryOfEra();
        org.joda.time.DateTime dateTime66 = instant55.toDateTime((org.joda.time.Chronology) gJChronology60);
        org.joda.time.ReadableDuration readableDuration67 = null;
        org.joda.time.Instant instant68 = instant55.minus(readableDuration67);
        boolean boolean69 = dateTime47.isEqual((org.joda.time.ReadableInstant) instant68);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and dateTime18", (instant1.compareTo(dateTime18) == 0) == instant1.equals(dateTime18));
    }

    @Test
    public void test1800() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1800");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((-220870497598236L));
        org.joda.time.MutableDateTime mutableDateTime2 = instant1.toMutableDateTime();
        org.joda.time.Instant instant4 = new org.joda.time.Instant(52L);
        boolean boolean5 = instant4.isEqualNow();
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.Instant instant7 = instant4.plus(readableDuration6);
        org.joda.time.Instant instant9 = new org.joda.time.Instant(52L);
        org.joda.time.Instant instant11 = instant9.withMillis((long) 'u');
        boolean boolean12 = instant4.isBefore((org.joda.time.ReadableInstant) instant9);
        java.util.TimeZone timeZone13 = null;
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forTimeZone(timeZone13);
        org.joda.time.chrono.GJChronology gJChronology15 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone14);
        org.joda.time.DurationField durationField16 = gJChronology15.halfdays();
        long long20 = gJChronology15.add((long) 'a', (-1L), (int) (short) 0);
        long long24 = gJChronology15.add((long) (byte) 0, (long) '4', 100);
        org.joda.time.DateTimeField dateTimeField25 = gJChronology15.minuteOfHour();
        org.joda.time.DurationField durationField26 = gJChronology15.hours();
        org.joda.time.DateTimeField dateTimeField27 = gJChronology15.weekOfWeekyear();
        org.joda.time.DateTime dateTime28 = instant9.toDateTime((org.joda.time.Chronology) gJChronology15);
        boolean boolean29 = instant1.isBefore((org.joda.time.ReadableInstant) dateTime28);
        org.joda.time.Instant instant31 = new org.joda.time.Instant(52L);
        boolean boolean32 = instant31.isEqualNow();
        org.joda.time.Instant instant34 = new org.joda.time.Instant(52L);
        org.joda.time.Instant instant36 = instant34.withMillis((long) 'u');
        boolean boolean37 = instant31.isAfter((org.joda.time.ReadableInstant) instant34);
        org.joda.time.DateTime dateTime38 = instant31.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone39 = dateTime38.getZone();
        boolean boolean40 = instant1.isAfter((org.joda.time.ReadableInstant) dateTime38);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant4 and dateTime28", (instant4.compareTo(dateTime28) == 0) == instant4.equals(dateTime28));
    }

    @Test
    public void test1801() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1801");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField3 = gJChronology2.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.weekyearOfCentury();
        org.joda.time.Instant instant5 = gJChronology2.getGregorianCutover();
        org.joda.time.Instant instant7 = instant5.withMillis(0L);
        org.joda.time.Instant instant9 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone10 = null;
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forTimeZone(timeZone10);
        org.joda.time.chrono.GJChronology gJChronology12 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone11);
        org.joda.time.DateTimeField dateTimeField13 = gJChronology12.millisOfSecond();
        int int14 = instant9.get(dateTimeField13);
        org.joda.time.Instant instant16 = instant9.plus(0L);
        int int17 = instant7.compareTo((org.joda.time.ReadableInstant) instant16);
        org.joda.time.DateTimeZone dateTimeZone18 = instant16.getZone();
        org.joda.time.DateTime dateTime19 = instant16.toDateTimeISO();
        long long20 = instant16.getMillis();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant16 and dateTime19", (instant16.compareTo(dateTime19) == 0) == instant16.equals(dateTime19));
    }

    @Test
    public void test1802() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1802");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        boolean boolean2 = instant1.isEqualNow();
        java.lang.String str3 = instant1.toString();
        java.util.TimeZone timeZone4 = null;
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forTimeZone(timeZone4);
        org.joda.time.chrono.GJChronology gJChronology6 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone5);
        java.util.Locale locale8 = new java.util.Locale("hi!");
        java.lang.String str9 = locale8.getCountry();
        java.util.Locale locale10 = java.util.Locale.getDefault();
        java.lang.String str11 = locale10.getDisplayName();
        java.lang.String str12 = locale8.getDisplayScript(locale10);
        boolean boolean13 = dateTimeZone5.equals((java.lang.Object) locale10);
        int int15 = dateTimeZone5.getOffsetFromLocal((long) (short) 10);
        java.util.TimeZone timeZone16 = null;
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forTimeZone(timeZone16);
        org.joda.time.chrono.GJChronology gJChronology18 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone17);
        org.joda.time.DateTimeField dateTimeField19 = gJChronology18.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField20 = gJChronology18.weekyearOfCentury();
        org.joda.time.Instant instant21 = gJChronology18.getGregorianCutover();
        org.joda.time.Instant instant23 = instant21.withMillis(0L);
        org.joda.time.Instant instant25 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone26 = null;
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forTimeZone(timeZone26);
        org.joda.time.chrono.GJChronology gJChronology28 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone27);
        org.joda.time.DateTimeField dateTimeField29 = gJChronology28.millisOfSecond();
        int int30 = instant25.get(dateTimeField29);
        org.joda.time.Instant instant32 = instant25.plus(0L);
        int int33 = instant23.compareTo((org.joda.time.ReadableInstant) instant32);
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = null;
        boolean boolean35 = instant32.isSupported(dateTimeFieldType34);
        int int36 = dateTimeZone5.getOffset((org.joda.time.ReadableInstant) instant32);
        boolean boolean37 = instant1.isAfter((org.joda.time.ReadableInstant) instant32);
        org.joda.time.ReadableDuration readableDuration38 = null;
        org.joda.time.Instant instant40 = instant1.withDurationAdded(readableDuration38, 1);
        boolean boolean41 = instant40.isEqualNow();
        org.joda.time.Instant instant42 = instant40.toInstant();
        org.joda.time.Instant instant44 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone45 = null;
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.forTimeZone(timeZone45);
        org.joda.time.chrono.GJChronology gJChronology47 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone46);
        org.joda.time.DateTimeField dateTimeField48 = gJChronology47.millisOfSecond();
        int int49 = instant44.get(dateTimeField48);
        org.joda.time.Instant instant51 = instant44.plus(0L);
        java.util.TimeZone timeZone52 = null;
        org.joda.time.DateTimeZone dateTimeZone53 = org.joda.time.DateTimeZone.forTimeZone(timeZone52);
        org.joda.time.chrono.GJChronology gJChronology54 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone53);
        org.joda.time.DurationField durationField55 = gJChronology54.halfdays();
        org.joda.time.Chronology chronology56 = gJChronology54.withUTC();
        java.lang.String str57 = gJChronology54.toString();
        org.joda.time.DateTimeField dateTimeField58 = gJChronology54.hourOfHalfday();
        int int59 = instant44.get(dateTimeField58);
        org.joda.time.Instant instant61 = new org.joda.time.Instant(52L);
        boolean boolean62 = instant61.isEqualNow();
        org.joda.time.ReadableDuration readableDuration63 = null;
        org.joda.time.Instant instant64 = instant61.plus(readableDuration63);
        org.joda.time.Instant instant66 = new org.joda.time.Instant(52L);
        org.joda.time.Instant instant68 = instant66.withMillis((long) 'u');
        boolean boolean69 = instant61.isBefore((org.joda.time.ReadableInstant) instant66);
        boolean boolean70 = instant44.isEqual((org.joda.time.ReadableInstant) instant66);
        boolean boolean71 = instant42.equals((java.lang.Object) instant66);
        java.lang.String str72 = instant66.toString();
        org.joda.time.MutableDateTime mutableDateTime73 = instant66.toMutableDateTimeISO();
        org.joda.time.Instant instant74 = org.joda.time.Instant.now();
        java.util.TimeZone timeZone75 = null;
        org.joda.time.DateTimeZone dateTimeZone76 = org.joda.time.DateTimeZone.forTimeZone(timeZone75);
        org.joda.time.chrono.GJChronology gJChronology77 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone76);
        org.joda.time.DurationField durationField78 = gJChronology77.halfdays();
        org.joda.time.DateTimeField dateTimeField79 = gJChronology77.millisOfDay();
        org.joda.time.DateTimeField dateTimeField80 = gJChronology77.halfdayOfDay();
        int int81 = instant74.get(dateTimeField80);
        java.util.Date date82 = instant74.toDate();
        boolean boolean84 = instant74.isBefore(1907L);
        org.joda.time.DateTime dateTime85 = instant74.toDateTimeISO();
        org.joda.time.Instant instant87 = new org.joda.time.Instant((-2246399965L));
        int int88 = instant74.compareTo((org.joda.time.ReadableInstant) instant87);
        boolean boolean89 = mutableDateTime73.isBefore((org.joda.time.ReadableInstant) instant87);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant74 and dateTime85", (instant74.compareTo(dateTime85) == 0) == instant74.equals(dateTime85));
    }

    @Test
    public void test1803() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1803");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str3 = dateTimeZone1.getNameKey((long) 100);
        boolean boolean4 = dateTimeZone1.isFixed();
        java.lang.String str5 = dateTimeZone1.toString();
        boolean boolean7 = dateTimeZone1.isStandardOffset((long) (byte) 0);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        java.util.TimeZone timeZone9 = null;
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forTimeZone(timeZone9);
        org.joda.time.chrono.GJChronology gJChronology11 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone10);
        int int13 = dateTimeZone10.getOffsetFromLocal((long) (-1));
        int int15 = dateTimeZone10.getOffset((-61827926399999L));
        java.lang.String str16 = dateTimeZone10.toString();
        long long18 = dateTimeZone1.getMillisKeepLocal(dateTimeZone10, 100L);
        int int20 = dateTimeZone1.getStandardOffset(0L);
        java.util.TimeZone timeZone21 = null;
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forTimeZone(timeZone21);
        org.joda.time.chrono.GJChronology gJChronology23 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone22);
        org.joda.time.DateTimeField dateTimeField24 = gJChronology23.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField25 = gJChronology23.weekyearOfCentury();
        org.joda.time.Instant instant26 = gJChronology23.getGregorianCutover();
        org.joda.time.Instant instant28 = instant26.withMillis(0L);
        org.joda.time.Instant instant30 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone31 = null;
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.forTimeZone(timeZone31);
        org.joda.time.chrono.GJChronology gJChronology33 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone32);
        org.joda.time.DateTimeField dateTimeField34 = gJChronology33.millisOfSecond();
        int int35 = instant30.get(dateTimeField34);
        org.joda.time.Instant instant37 = instant30.plus(0L);
        int int38 = instant28.compareTo((org.joda.time.ReadableInstant) instant37);
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = null;
        boolean boolean40 = instant37.isSupported(dateTimeFieldType39);
        org.joda.time.Instant instant42 = instant37.minus((long) (short) 10);
        org.joda.time.ReadableDuration readableDuration43 = null;
        org.joda.time.Instant instant44 = instant42.minus(readableDuration43);
        boolean boolean45 = instant42.isAfterNow();
        org.joda.time.MutableDateTime mutableDateTime46 = instant42.toMutableDateTime();
        org.joda.time.chrono.GJChronology gJChronology47 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1, (org.joda.time.ReadableInstant) instant42);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant42 and mutableDateTime46", (instant42.compareTo(mutableDateTime46) == 0) == instant42.equals(mutableDateTime46));
    }

    @Test
    public void test1804() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1804");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = gJChronology2.years();
        java.util.TimeZone timeZone4 = null;
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forTimeZone(timeZone4);
        org.joda.time.chrono.GJChronology gJChronology6 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone5);
        org.joda.time.DurationField durationField7 = gJChronology6.halfdays();
        org.joda.time.DateTimeField dateTimeField8 = gJChronology6.millisOfDay();
        org.joda.time.DateTimeField dateTimeField9 = gJChronology6.minuteOfDay();
        org.joda.time.DurationField durationField10 = gJChronology6.centuries();
        java.util.TimeZone timeZone11 = null;
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forTimeZone(timeZone11);
        org.joda.time.chrono.GJChronology gJChronology13 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone12);
        org.joda.time.DurationField durationField14 = gJChronology13.halfdays();
        long long17 = durationField14.add((long) 100, 100L);
        boolean boolean18 = durationField14.isPrecise();
        int int19 = durationField10.compareTo(durationField14);
        boolean boolean20 = gJChronology2.equals((java.lang.Object) durationField10);
        org.joda.time.DateTimeField dateTimeField21 = gJChronology2.dayOfYear();
        org.joda.time.DateTimeField dateTimeField22 = gJChronology2.era();
        org.joda.time.DateTimeZone dateTimeZone23 = gJChronology2.getZone();
        java.lang.String str24 = dateTimeZone23.getID();
        org.joda.time.Instant instant26 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone27 = null;
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forTimeZone(timeZone27);
        org.joda.time.chrono.GJChronology gJChronology29 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone28);
        org.joda.time.DateTimeField dateTimeField30 = gJChronology29.millisOfSecond();
        int int31 = instant26.get(dateTimeField30);
        boolean boolean32 = instant26.isEqualNow();
        org.joda.time.Instant instant34 = new org.joda.time.Instant(52L);
        boolean boolean35 = instant34.isEqualNow();
        org.joda.time.ReadableDuration readableDuration36 = null;
        org.joda.time.Instant instant37 = instant34.plus(readableDuration36);
        long long38 = instant34.getMillis();
        java.lang.Object obj39 = null;
        boolean boolean40 = instant34.equals(obj39);
        org.joda.time.Instant instant42 = new org.joda.time.Instant(52L);
        boolean boolean43 = instant42.isEqualNow();
        org.joda.time.ReadableDuration readableDuration44 = null;
        org.joda.time.Instant instant45 = instant42.plus(readableDuration44);
        long long46 = instant42.getMillis();
        java.lang.String str47 = instant42.toString();
        org.joda.time.Instant instant48 = instant42.toInstant();
        org.joda.time.ReadableDuration readableDuration49 = null;
        org.joda.time.Instant instant51 = instant42.withDurationAdded(readableDuration49, (int) 'x');
        org.joda.time.Instant instant52 = instant42.toInstant();
        int int53 = instant34.compareTo((org.joda.time.ReadableInstant) instant42);
        boolean boolean54 = instant26.isBefore((org.joda.time.ReadableInstant) instant42);
        java.util.TimeZone timeZone55 = null;
        org.joda.time.DateTimeZone dateTimeZone56 = org.joda.time.DateTimeZone.forTimeZone(timeZone55);
        org.joda.time.chrono.GJChronology gJChronology57 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone56);
        org.joda.time.DurationField durationField58 = gJChronology57.halfdays();
        long long62 = gJChronology57.add((long) 'a', (-1L), (int) (short) 0);
        org.joda.time.DateTimeField dateTimeField63 = gJChronology57.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField64 = gJChronology57.secondOfMinute();
        org.joda.time.Instant instant66 = new org.joda.time.Instant(52L);
        boolean boolean67 = instant66.isEqualNow();
        org.joda.time.ReadableDuration readableDuration68 = null;
        org.joda.time.Instant instant69 = instant66.plus(readableDuration68);
        boolean boolean70 = gJChronology57.equals((java.lang.Object) instant66);
        org.joda.time.DateTimeFieldType dateTimeFieldType71 = null;
        boolean boolean72 = instant66.isSupported(dateTimeFieldType71);
        org.joda.time.DateTimeFieldType dateTimeFieldType73 = null;
        boolean boolean74 = instant66.isSupported(dateTimeFieldType73);
        java.lang.String str75 = instant66.toString();
        boolean boolean76 = instant26.isAfter((org.joda.time.ReadableInstant) instant66);
        org.joda.time.MutableDateTime mutableDateTime77 = instant66.toMutableDateTimeISO();
        org.joda.time.chrono.GJChronology gJChronology79 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone23, (org.joda.time.ReadableInstant) mutableDateTime77, (int) (byte) 1);
        java.util.Locale locale81 = java.util.Locale.GERMAN;
        java.lang.String str82 = locale81.getCountry();
        java.lang.String str83 = locale81.getDisplayName();
        java.util.Locale locale84 = java.util.Locale.CANADA;
        java.lang.String str85 = locale84.getDisplayVariant();
        java.lang.String str86 = locale81.getDisplayCountry(locale84);
        java.lang.String str87 = locale81.getDisplayScript();
        java.util.Set<java.lang.Character> charSet88 = locale81.getExtensionKeys();
        java.lang.String str89 = locale81.getDisplayScript();
        java.lang.String str90 = dateTimeZone23.getShortName((long) (-1045470876), locale81);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant26 and mutableDateTime77", (instant26.compareTo(mutableDateTime77) == 0) == instant26.equals(mutableDateTime77));
    }

    @Test
    public void test1805() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1805");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        boolean boolean2 = instant1.isEqualNow();
        org.joda.time.ReadableDuration readableDuration3 = null;
        org.joda.time.Instant instant4 = instant1.plus(readableDuration3);
        long long5 = instant1.getMillis();
        org.joda.time.Instant instant8 = instant1.withDurationAdded((long) 'a', (int) (byte) 10);
        org.joda.time.DateTime dateTime9 = instant8.toDateTimeISO();
        java.util.TimeZone timeZone10 = null;
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forTimeZone(timeZone10);
        org.joda.time.chrono.GJChronology gJChronology12 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone11);
        org.joda.time.DateTimeField dateTimeField13 = gJChronology12.millisOfSecond();
        org.joda.time.DurationField durationField14 = gJChronology12.millis();
        org.joda.time.DurationField durationField15 = gJChronology12.weeks();
        long long19 = gJChronology12.add(43201764L, 262974600000L, (int) (short) 100);
        org.joda.time.DateTimeField dateTimeField20 = gJChronology12.secondOfMinute();
        org.joda.time.Instant instant21 = gJChronology12.getGregorianCutover();
        boolean boolean22 = dateTime9.isBefore((org.joda.time.ReadableInstant) instant21);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter23 = null;
        java.lang.String str24 = instant21.toString(dateTimeFormatter23);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant8 and dateTime9", (instant8.compareTo(dateTime9) == 0) == instant8.equals(dateTime9));
    }

    @Test
    public void test1806() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1806");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.util.TimeZone timeZone2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forTimeZone(timeZone2);
        org.joda.time.chrono.GJChronology gJChronology4 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone3);
        int int6 = dateTimeZone3.getOffsetFromLocal(1000L);
        long long8 = dateTimeZone1.getMillisKeepLocal(dateTimeZone3, (-61827926399999L));
        java.lang.String str9 = dateTimeZone3.toString();
        org.joda.time.Instant instant11 = new org.joda.time.Instant(52L);
        boolean boolean12 = instant11.isEqualNow();
        org.joda.time.ReadableDuration readableDuration13 = null;
        org.joda.time.Instant instant14 = instant11.plus(readableDuration13);
        long long15 = instant11.getMillis();
        java.lang.String str16 = instant11.toString();
        org.joda.time.Instant instant17 = instant11.toInstant();
        org.joda.time.Instant instant19 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone20 = null;
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forTimeZone(timeZone20);
        org.joda.time.chrono.GJChronology gJChronology22 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone21);
        org.joda.time.DateTimeField dateTimeField23 = gJChronology22.millisOfSecond();
        int int24 = instant19.get(dateTimeField23);
        org.joda.time.Chronology chronology25 = instant19.getChronology();
        boolean boolean26 = instant11.isBefore((org.joda.time.ReadableInstant) instant19);
        boolean boolean28 = instant11.isEqual(1136050274678400000L);
        org.joda.time.chrono.GJChronology gJChronology29 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone3, (org.joda.time.ReadableInstant) instant11);
        org.joda.time.DateTime dateTime30 = instant11.toDateTime();
        org.joda.time.Instant instant31 = instant11.toInstant();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant31 and dateTime30", (instant31.compareTo(dateTime30) == 0) == instant31.equals(dateTime30));
    }

    @Test
    public void test1807() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1807");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        boolean boolean2 = instant1.isEqualNow();
        java.lang.String str3 = instant1.toString();
        java.util.TimeZone timeZone4 = null;
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forTimeZone(timeZone4);
        org.joda.time.chrono.GJChronology gJChronology6 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone5);
        java.util.Locale locale8 = new java.util.Locale("hi!");
        java.lang.String str9 = locale8.getCountry();
        java.util.Locale locale10 = java.util.Locale.getDefault();
        java.lang.String str11 = locale10.getDisplayName();
        java.lang.String str12 = locale8.getDisplayScript(locale10);
        boolean boolean13 = dateTimeZone5.equals((java.lang.Object) locale10);
        int int15 = dateTimeZone5.getOffsetFromLocal((long) (short) 10);
        java.util.TimeZone timeZone16 = null;
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forTimeZone(timeZone16);
        org.joda.time.chrono.GJChronology gJChronology18 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone17);
        org.joda.time.DateTimeField dateTimeField19 = gJChronology18.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField20 = gJChronology18.weekyearOfCentury();
        org.joda.time.Instant instant21 = gJChronology18.getGregorianCutover();
        org.joda.time.Instant instant23 = instant21.withMillis(0L);
        org.joda.time.Instant instant25 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone26 = null;
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forTimeZone(timeZone26);
        org.joda.time.chrono.GJChronology gJChronology28 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone27);
        org.joda.time.DateTimeField dateTimeField29 = gJChronology28.millisOfSecond();
        int int30 = instant25.get(dateTimeField29);
        org.joda.time.Instant instant32 = instant25.plus(0L);
        int int33 = instant23.compareTo((org.joda.time.ReadableInstant) instant32);
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = null;
        boolean boolean35 = instant32.isSupported(dateTimeFieldType34);
        int int36 = dateTimeZone5.getOffset((org.joda.time.ReadableInstant) instant32);
        boolean boolean37 = instant1.isAfter((org.joda.time.ReadableInstant) instant32);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter38 = null;
        java.lang.String str39 = instant1.toString(dateTimeFormatter38);
        org.joda.time.Instant instant40 = org.joda.time.Instant.now();
        java.util.TimeZone timeZone41 = null;
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.forTimeZone(timeZone41);
        org.joda.time.chrono.GJChronology gJChronology43 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone42);
        org.joda.time.DurationField durationField44 = gJChronology43.halfdays();
        org.joda.time.DateTimeField dateTimeField45 = gJChronology43.millisOfDay();
        org.joda.time.DateTimeField dateTimeField46 = gJChronology43.halfdayOfDay();
        int int47 = instant40.get(dateTimeField46);
        java.util.Date date48 = instant40.toDate();
        boolean boolean49 = instant1.isEqual((org.joda.time.ReadableInstant) instant40);
        java.util.TimeZone timeZone50 = null;
        org.joda.time.DateTimeZone dateTimeZone51 = org.joda.time.DateTimeZone.forTimeZone(timeZone50);
        java.lang.String str53 = dateTimeZone51.getNameKey((long) 100);
        boolean boolean54 = dateTimeZone51.isFixed();
        org.joda.time.chrono.GJChronology gJChronology55 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone51);
        int int56 = gJChronology55.getMinimumDaysInFirstWeek();
        java.lang.String str57 = gJChronology55.toString();
        org.joda.time.DateTimeField dateTimeField58 = gJChronology55.yearOfEra();
        org.joda.time.DateTimeField dateTimeField59 = gJChronology55.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField60 = gJChronology55.dayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone61 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology62 = gJChronology55.withZone(dateTimeZone61);
        org.joda.time.DateTimeField dateTimeField63 = chronology62.millisOfSecond();
        java.util.TimeZone timeZone64 = null;
        org.joda.time.DateTimeZone dateTimeZone65 = org.joda.time.DateTimeZone.forTimeZone(timeZone64);
        org.joda.time.chrono.GJChronology gJChronology66 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone65);
        int int68 = dateTimeZone65.getOffsetFromLocal((long) (-1));
        org.joda.time.DateTimeZone dateTimeZone70 = org.joda.time.DateTimeZone.forOffsetHours((int) '4');
        long long72 = dateTimeZone65.getMillisKeepLocal(dateTimeZone70, (-8380800000L));
        org.joda.time.Chronology chronology73 = chronology62.withZone(dateTimeZone65);
        java.util.TimeZone timeZone74 = null;
        org.joda.time.DateTimeZone dateTimeZone75 = org.joda.time.DateTimeZone.forTimeZone(timeZone74);
        org.joda.time.chrono.GJChronology gJChronology76 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone75);
        org.joda.time.DurationField durationField77 = gJChronology76.halfdays();
        java.util.TimeZone timeZone78 = null;
        org.joda.time.DateTimeZone dateTimeZone79 = org.joda.time.DateTimeZone.forTimeZone(timeZone78);
        org.joda.time.chrono.GJChronology gJChronology80 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone79);
        long long84 = dateTimeZone79.convertLocalToUTC((long) (byte) -1, true, 0L);
        boolean boolean86 = dateTimeZone79.equals((java.lang.Object) true);
        org.joda.time.Chronology chronology87 = gJChronology76.withZone(dateTimeZone79);
        org.joda.time.LocalDateTime localDateTime88 = null;
        boolean boolean89 = dateTimeZone79.isLocalDateTimeGap(localDateTime88);
        boolean boolean90 = dateTimeZone79.isFixed();
        long long92 = dateTimeZone65.getMillisKeepLocal(dateTimeZone79, (long) (short) -1);
        java.lang.String str94 = dateTimeZone79.getName((long) 1970);
        org.joda.time.MutableDateTime mutableDateTime95 = instant1.toMutableDateTime(dateTimeZone79);
        long long98 = dateTimeZone79.convertLocalToUTC(110449353000000L, false);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and mutableDateTime95", (instant1.compareTo(mutableDateTime95) == 0) == instant1.equals(mutableDateTime95));
    }

    @Test
    public void test1808() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1808");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField3 = gJChronology2.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.weekyearOfCentury();
        org.joda.time.Instant instant5 = gJChronology2.getGregorianCutover();
        org.joda.time.Instant instant7 = instant5.withMillis(0L);
        org.joda.time.Instant instant9 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone10 = null;
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forTimeZone(timeZone10);
        org.joda.time.chrono.GJChronology gJChronology12 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone11);
        org.joda.time.DateTimeField dateTimeField13 = gJChronology12.millisOfSecond();
        int int14 = instant9.get(dateTimeField13);
        org.joda.time.Instant instant16 = instant9.plus(0L);
        int int17 = instant7.compareTo((org.joda.time.ReadableInstant) instant16);
        boolean boolean18 = instant7.isAfterNow();
        org.joda.time.Instant instant20 = instant7.withMillis(186641344513152000L);
        java.util.Date date21 = instant7.toDate();
        org.joda.time.Instant instant23 = instant7.minus((-1559979L));
        org.joda.time.MutableDateTime mutableDateTime24 = instant7.toMutableDateTime();
        org.joda.time.ReadableDuration readableDuration25 = null;
        org.joda.time.Instant instant26 = instant7.plus(readableDuration25);
        java.util.TimeZone timeZone27 = null;
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forTimeZone(timeZone27);
        org.joda.time.chrono.GJChronology gJChronology29 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone28);
        org.joda.time.DurationField durationField30 = gJChronology29.halfdays();
        long long34 = gJChronology29.add((long) 'a', (-1L), (int) (short) 0);
        long long38 = gJChronology29.add((long) (byte) 0, (long) '4', 100);
        org.joda.time.DateTimeField dateTimeField39 = gJChronology29.minuteOfHour();
        org.joda.time.DurationField durationField40 = gJChronology29.hours();
        org.joda.time.DateTimeField dateTimeField41 = gJChronology29.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField42 = gJChronology29.millisOfSecond();
        org.joda.time.DurationField durationField43 = gJChronology29.seconds();
        java.lang.String str44 = gJChronology29.toString();
        org.joda.time.DateTimeField dateTimeField45 = gJChronology29.millisOfSecond();
        org.joda.time.DateTime dateTime46 = instant26.toDateTime((org.joda.time.Chronology) gJChronology29);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant26 and mutableDateTime24", (instant26.compareTo(mutableDateTime24) == 0) == instant26.equals(mutableDateTime24));
    }

    @Test
    public void test1809() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1809");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        java.util.Locale locale4 = new java.util.Locale("hi!");
        java.lang.String str5 = locale4.getCountry();
        java.util.Locale locale6 = java.util.Locale.getDefault();
        java.lang.String str7 = locale6.getDisplayName();
        java.lang.String str8 = locale4.getDisplayScript(locale6);
        boolean boolean9 = dateTimeZone1.equals((java.lang.Object) locale6);
        int int11 = dateTimeZone1.getOffsetFromLocal((long) (short) 10);
        java.util.TimeZone timeZone12 = null;
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forTimeZone(timeZone12);
        org.joda.time.chrono.GJChronology gJChronology14 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone13);
        org.joda.time.DateTimeField dateTimeField15 = gJChronology14.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField16 = gJChronology14.weekyearOfCentury();
        org.joda.time.Instant instant17 = gJChronology14.getGregorianCutover();
        org.joda.time.Instant instant19 = instant17.withMillis(0L);
        org.joda.time.Instant instant21 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone22 = null;
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        org.joda.time.chrono.GJChronology gJChronology24 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone23);
        org.joda.time.DateTimeField dateTimeField25 = gJChronology24.millisOfSecond();
        int int26 = instant21.get(dateTimeField25);
        org.joda.time.Instant instant28 = instant21.plus(0L);
        int int29 = instant19.compareTo((org.joda.time.ReadableInstant) instant28);
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = null;
        boolean boolean31 = instant28.isSupported(dateTimeFieldType30);
        int int32 = dateTimeZone1.getOffset((org.joda.time.ReadableInstant) instant28);
        boolean boolean34 = instant28.isAfter(1000L);
        org.joda.time.Instant instant35 = instant28.toInstant();
        org.joda.time.Instant instant37 = instant28.minus(3600000L);
        java.util.TimeZone timeZone38 = null;
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.forTimeZone(timeZone38);
        org.joda.time.chrono.GJChronology gJChronology40 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone39);
        org.joda.time.DurationField durationField41 = gJChronology40.halfdays();
        org.joda.time.DateTimeField dateTimeField42 = gJChronology40.millisOfDay();
        org.joda.time.DateTimeField dateTimeField43 = gJChronology40.minuteOfDay();
        org.joda.time.DurationField durationField44 = gJChronology40.centuries();
        org.joda.time.DateTimeField dateTimeField45 = gJChronology40.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField46 = gJChronology40.year();
        org.joda.time.DurationField durationField47 = gJChronology40.weekyears();
        org.joda.time.DurationField durationField48 = gJChronology40.minutes();
        org.joda.time.DateTimeField dateTimeField49 = gJChronology40.dayOfYear();
        org.joda.time.DateTime dateTime50 = instant37.toDateTime((org.joda.time.Chronology) gJChronology40);
        java.util.TimeZone timeZone51 = null;
        org.joda.time.DateTimeZone dateTimeZone52 = org.joda.time.DateTimeZone.forTimeZone(timeZone51);
        org.joda.time.chrono.GJChronology gJChronology53 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone52);
        org.joda.time.DateTimeField dateTimeField54 = gJChronology53.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField55 = gJChronology53.weekyear();
        org.joda.time.DateTimeField dateTimeField56 = gJChronology53.halfdayOfDay();
        org.joda.time.DurationField durationField57 = gJChronology53.years();
        org.joda.time.DateTimeField dateTimeField58 = gJChronology53.dayOfWeek();
        org.joda.time.DurationField durationField59 = gJChronology53.eras();
        boolean boolean60 = durationField59.isPrecise();
        long long61 = durationField59.getUnitMillis();
        boolean boolean62 = dateTime50.equals((java.lang.Object) durationField59);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on durationField47 and durationField57", (durationField47.compareTo(durationField57) == 0) == durationField47.equals(durationField57));
    }

    @Test
    public void test1810() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1810");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        org.joda.time.Instant instant3 = instant1.withMillis((long) 'u');
        java.util.TimeZone timeZone4 = null;
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forTimeZone(timeZone4);
        org.joda.time.chrono.GJChronology gJChronology6 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone5);
        org.joda.time.DurationField durationField7 = gJChronology6.halfdays();
        long long11 = gJChronology6.add((long) 'a', (-1L), (int) (short) 0);
        boolean boolean13 = gJChronology6.equals((java.lang.Object) 0);
        org.joda.time.DateTimeField dateTimeField14 = gJChronology6.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology6.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField16 = gJChronology6.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField17 = gJChronology6.clockhourOfHalfday();
        org.joda.time.DateTime dateTime18 = instant1.toDateTime((org.joda.time.Chronology) gJChronology6);
        java.util.TimeZone timeZone19 = null;
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forTimeZone(timeZone19);
        org.joda.time.chrono.GJChronology gJChronology21 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone20);
        org.joda.time.DurationField durationField22 = gJChronology21.halfdays();
        long long26 = gJChronology21.add((long) 'a', (-1L), (int) (short) 0);
        long long30 = gJChronology21.add((long) (byte) 0, (long) '4', 100);
        org.joda.time.DateTimeField dateTimeField31 = gJChronology21.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField32 = gJChronology21.year();
        org.joda.time.DateTimeField dateTimeField33 = gJChronology21.monthOfYear();
        org.joda.time.MutableDateTime mutableDateTime34 = instant1.toMutableDateTime((org.joda.time.Chronology) gJChronology21);
        boolean boolean36 = instant1.isAfter(4324200000L);
        java.util.TimeZone timeZone37 = null;
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forTimeZone(timeZone37);
        org.joda.time.chrono.GJChronology gJChronology39 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone38);
        org.joda.time.DateTimeField dateTimeField40 = gJChronology39.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField41 = gJChronology39.weekyear();
        org.joda.time.DurationField durationField42 = gJChronology39.centuries();
        org.joda.time.DateTimeField dateTimeField43 = gJChronology39.millisOfDay();
        org.joda.time.DateTimeField dateTimeField44 = gJChronology39.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField45 = gJChronology39.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField46 = gJChronology39.dayOfWeek();
        int int47 = instant1.get(dateTimeField46);
        org.joda.time.DateTime dateTime48 = instant1.toDateTimeISO();
        org.joda.time.Instant instant50 = instant1.withMillis(56855116800000L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime18 and dateTime48", (dateTime18.compareTo(dateTime48) == 0) == dateTime18.equals(dateTime48));
    }

    @Test
    public void test1811() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1811");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forTimeZone(timeZone2);
        org.joda.time.chrono.GJChronology gJChronology4 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone3);
        org.joda.time.DateTimeField dateTimeField5 = gJChronology4.millisOfSecond();
        int int6 = instant1.get(dateTimeField5);
        org.joda.time.Instant instant8 = instant1.plus(0L);
        long long9 = instant8.getMillis();
        org.joda.time.Instant instant12 = instant8.withDurationAdded((long) 12, 97);
        org.joda.time.DateTimeZone dateTimeZone13 = instant12.getZone();
        org.joda.time.Instant instant15 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone16 = null;
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forTimeZone(timeZone16);
        org.joda.time.chrono.GJChronology gJChronology18 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone17);
        org.joda.time.DateTimeField dateTimeField19 = gJChronology18.millisOfSecond();
        int int20 = instant15.get(dateTimeField19);
        org.joda.time.Instant instant22 = instant15.plus(0L);
        org.joda.time.Instant instant23 = instant22.toInstant();
        org.joda.time.Instant instant25 = new org.joda.time.Instant(52L);
        boolean boolean26 = instant25.isEqualNow();
        java.lang.String str27 = instant25.toString();
        java.lang.String str28 = instant25.toString();
        org.joda.time.Instant instant30 = new org.joda.time.Instant(52L);
        boolean boolean31 = instant30.isEqualNow();
        org.joda.time.ReadableDuration readableDuration32 = null;
        org.joda.time.Instant instant33 = instant30.plus(readableDuration32);
        boolean boolean34 = instant25.isBefore((org.joda.time.ReadableInstant) instant33);
        org.joda.time.Instant instant36 = instant25.minus((long) 0);
        int int37 = instant22.compareTo((org.joda.time.ReadableInstant) instant25);
        org.joda.time.Instant instant40 = instant25.withDurationAdded((long) (short) 100, 70);
        org.joda.time.ReadableInstant readableInstant41 = null;
        boolean boolean42 = instant25.isBefore(readableInstant41);
        java.lang.String str43 = instant25.toString();
        boolean boolean44 = instant12.isEqual((org.joda.time.ReadableInstant) instant25);
        org.joda.time.Chronology chronology45 = instant25.getChronology();
        org.joda.time.DateTimeZone dateTimeZone48 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(1, 10);
        java.lang.String str50 = dateTimeZone48.getShortName(97L);
        org.joda.time.chrono.GJChronology gJChronology53 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone48, (long) (byte) 100, 1);
        java.util.TimeZone timeZone55 = null;
        org.joda.time.DateTimeZone dateTimeZone56 = org.joda.time.DateTimeZone.forTimeZone(timeZone55);
        java.lang.String str58 = dateTimeZone56.getNameKey((long) 100);
        boolean boolean59 = dateTimeZone56.isFixed();
        java.util.Locale locale63 = new java.util.Locale("DurationField[halfdays]", "\u82f1\u6587");
        java.lang.String str64 = dateTimeZone56.getName((long) (short) 10, locale63);
        org.joda.time.Instant instant66 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone67 = null;
        org.joda.time.DateTimeZone dateTimeZone68 = org.joda.time.DateTimeZone.forTimeZone(timeZone67);
        org.joda.time.chrono.GJChronology gJChronology69 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone68);
        org.joda.time.DateTimeField dateTimeField70 = gJChronology69.millisOfSecond();
        int int71 = instant66.get(dateTimeField70);
        org.joda.time.Chronology chronology72 = instant66.getChronology();
        org.joda.time.chrono.GJChronology gJChronology73 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone56, (org.joda.time.ReadableInstant) instant66);
        long long74 = instant66.getMillis();
        org.joda.time.ReadableDuration readableDuration75 = null;
        org.joda.time.Instant instant76 = instant66.minus(readableDuration75);
        java.util.Locale.Category category77 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale78 = java.util.Locale.getDefault();
        boolean boolean79 = locale78.hasExtensions();
        java.lang.String str80 = locale78.getISO3Language();
        java.util.Locale.setDefault(category77, locale78);
        java.util.Locale locale82 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale83 = java.util.Locale.ENGLISH;
        java.lang.String str84 = locale82.getDisplayLanguage(locale83);
        java.util.Locale locale85 = java.util.Locale.CANADA;
        java.lang.String str86 = locale85.getISO3Language();
        java.lang.String str87 = locale82.getDisplayVariant(locale85);
        java.lang.String str88 = locale82.getDisplayName();
        java.util.Locale.setDefault(category77, locale82);
        boolean boolean90 = instant66.equals((java.lang.Object) locale82);
        java.lang.String str91 = dateTimeZone48.getShortName((-2208729596000L), locale82);
        int int93 = dateTimeZone48.getStandardOffset((-599968L));
        long long96 = dateTimeZone48.adjustOffset((-248400000L), true);
        org.joda.time.MutableDateTime mutableDateTime97 = instant25.toMutableDateTime(dateTimeZone48);
        org.joda.time.Chronology chronology98 = instant25.getChronology();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and mutableDateTime97", (instant1.compareTo(mutableDateTime97) == 0) == instant1.equals(mutableDateTime97));
    }

    @Test
    public void test1812() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1812");
        org.joda.time.Instant instant1 = org.joda.time.Instant.parse("3929-04-02T00:00:00.051Z");
        org.joda.time.Instant instant3 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone4 = null;
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forTimeZone(timeZone4);
        org.joda.time.chrono.GJChronology gJChronology6 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone5);
        org.joda.time.DateTimeField dateTimeField7 = gJChronology6.millisOfSecond();
        int int8 = instant3.get(dateTimeField7);
        boolean boolean9 = instant3.isEqualNow();
        org.joda.time.Instant instant11 = new org.joda.time.Instant(52L);
        boolean boolean12 = instant11.isEqualNow();
        org.joda.time.ReadableDuration readableDuration13 = null;
        org.joda.time.Instant instant14 = instant11.plus(readableDuration13);
        long long15 = instant11.getMillis();
        java.lang.Object obj16 = null;
        boolean boolean17 = instant11.equals(obj16);
        org.joda.time.Instant instant19 = new org.joda.time.Instant(52L);
        boolean boolean20 = instant19.isEqualNow();
        org.joda.time.ReadableDuration readableDuration21 = null;
        org.joda.time.Instant instant22 = instant19.plus(readableDuration21);
        long long23 = instant19.getMillis();
        java.lang.String str24 = instant19.toString();
        org.joda.time.Instant instant25 = instant19.toInstant();
        org.joda.time.ReadableDuration readableDuration26 = null;
        org.joda.time.Instant instant28 = instant19.withDurationAdded(readableDuration26, (int) 'x');
        org.joda.time.Instant instant29 = instant19.toInstant();
        int int30 = instant11.compareTo((org.joda.time.ReadableInstant) instant19);
        boolean boolean31 = instant3.isBefore((org.joda.time.ReadableInstant) instant19);
        java.util.TimeZone timeZone32 = null;
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.forTimeZone(timeZone32);
        org.joda.time.chrono.GJChronology gJChronology34 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone33);
        org.joda.time.DurationField durationField35 = gJChronology34.halfdays();
        long long39 = gJChronology34.add((long) 'a', (-1L), (int) (short) 0);
        org.joda.time.DateTimeField dateTimeField40 = gJChronology34.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField41 = gJChronology34.secondOfMinute();
        org.joda.time.Instant instant43 = new org.joda.time.Instant(52L);
        boolean boolean44 = instant43.isEqualNow();
        org.joda.time.ReadableDuration readableDuration45 = null;
        org.joda.time.Instant instant46 = instant43.plus(readableDuration45);
        boolean boolean47 = gJChronology34.equals((java.lang.Object) instant43);
        org.joda.time.DateTimeFieldType dateTimeFieldType48 = null;
        boolean boolean49 = instant43.isSupported(dateTimeFieldType48);
        org.joda.time.DateTimeFieldType dateTimeFieldType50 = null;
        boolean boolean51 = instant43.isSupported(dateTimeFieldType50);
        java.lang.String str52 = instant43.toString();
        boolean boolean53 = instant3.isAfter((org.joda.time.ReadableInstant) instant43);
        java.util.TimeZone timeZone54 = null;
        org.joda.time.DateTimeZone dateTimeZone55 = org.joda.time.DateTimeZone.forTimeZone(timeZone54);
        java.lang.String str57 = dateTimeZone55.getNameKey((long) 100);
        boolean boolean58 = dateTimeZone55.isFixed();
        org.joda.time.chrono.GJChronology gJChronology59 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone55);
        int int60 = gJChronology59.getMinimumDaysInFirstWeek();
        java.lang.String str61 = gJChronology59.toString();
        org.joda.time.DateTimeField dateTimeField62 = gJChronology59.yearOfEra();
        org.joda.time.DateTime dateTime63 = instant3.toDateTime((org.joda.time.Chronology) gJChronology59);
        boolean boolean64 = dateTime63.isAfterNow();
        org.joda.time.Chronology chronology65 = dateTime63.getChronology();
        int int66 = instant1.compareTo((org.joda.time.ReadableInstant) dateTime63);
        org.joda.time.DateTimeZone dateTimeZone67 = dateTime63.getZone();
        boolean boolean68 = dateTime63.isEqualNow();
        java.util.TimeZone timeZone69 = null;
        org.joda.time.DateTimeZone dateTimeZone70 = org.joda.time.DateTimeZone.forTimeZone(timeZone69);
        org.joda.time.chrono.GJChronology gJChronology71 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone70);
        long long75 = dateTimeZone70.convertLocalToUTC((long) (byte) -1, true, 0L);
        boolean boolean77 = dateTimeZone70.equals((java.lang.Object) true);
        org.joda.time.chrono.GJChronology gJChronology78 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone70);
        org.joda.time.DateTimeField dateTimeField79 = gJChronology78.weekyear();
        org.joda.time.DateTimeField dateTimeField80 = gJChronology78.era();
        org.joda.time.DateTimeField dateTimeField81 = gJChronology78.centuryOfEra();
        org.joda.time.Chronology chronology82 = gJChronology78.withUTC();
        org.joda.time.DurationField durationField83 = gJChronology78.years();
        java.util.TimeZone timeZone84 = null;
        org.joda.time.DateTimeZone dateTimeZone85 = org.joda.time.DateTimeZone.forTimeZone(timeZone84);
        java.lang.String str87 = dateTimeZone85.getNameKey((long) 100);
        long long90 = dateTimeZone85.convertLocalToUTC((-2246399965L), true);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone85);
        org.joda.time.Chronology chronology92 = gJChronology78.withZone(dateTimeZone85);
        org.joda.time.DateTime dateTime93 = dateTime63.toDateTime((org.joda.time.Chronology) gJChronology78);
        org.joda.time.Chronology chronology94 = dateTime63.getChronology();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant3 and dateTime63", (instant3.compareTo(dateTime63) == 0) == instant3.equals(dateTime63));
    }

    @Test
    public void test1813() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1813");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = gJChronology2.halfdays();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.millisOfDay();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.monthOfYear();
        org.joda.time.Chronology chronology6 = gJChronology2.withUTC();
        org.joda.time.Instant instant7 = gJChronology2.getGregorianCutover();
        java.util.TimeZone timeZone8 = null;
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forTimeZone(timeZone8);
        org.joda.time.chrono.GJChronology gJChronology10 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone9);
        org.joda.time.DateTimeField dateTimeField11 = gJChronology10.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField12 = gJChronology10.weekyearOfCentury();
        org.joda.time.Instant instant13 = gJChronology10.getGregorianCutover();
        org.joda.time.Instant instant15 = instant13.withMillis(0L);
        org.joda.time.Instant instant17 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone18 = null;
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forTimeZone(timeZone18);
        org.joda.time.chrono.GJChronology gJChronology20 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone19);
        org.joda.time.DateTimeField dateTimeField21 = gJChronology20.millisOfSecond();
        int int22 = instant17.get(dateTimeField21);
        org.joda.time.Instant instant24 = instant17.plus(0L);
        int int25 = instant15.compareTo((org.joda.time.ReadableInstant) instant24);
        java.util.TimeZone timeZone26 = null;
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forTimeZone(timeZone26);
        org.joda.time.chrono.GJChronology gJChronology28 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone27);
        org.joda.time.DurationField durationField29 = gJChronology28.halfdays();
        org.joda.time.DateTimeField dateTimeField30 = gJChronology28.millisOfDay();
        org.joda.time.DateTimeField dateTimeField31 = gJChronology28.minuteOfDay();
        org.joda.time.DurationField durationField32 = gJChronology28.centuries();
        org.joda.time.DateTimeField dateTimeField33 = gJChronology28.halfdayOfDay();
        java.util.Locale locale34 = java.util.Locale.ITALIAN;
        java.util.Locale locale35 = locale34.stripExtensions();
        java.util.Locale locale36 = java.util.Locale.CANADA;
        java.lang.String str37 = locale34.getDisplayVariant(locale36);
        boolean boolean38 = gJChronology28.equals((java.lang.Object) locale36);
        org.joda.time.DateTime dateTime39 = instant15.toDateTime((org.joda.time.Chronology) gJChronology28);
        boolean boolean40 = instant7.isAfter((org.joda.time.ReadableInstant) dateTime39);
        org.joda.time.DateTime dateTime41 = instant7.toDateTimeISO();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant15 and dateTime39", (instant15.compareTo(dateTime39) == 0) == instant15.equals(dateTime39));
    }

    @Test
    public void test1814() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1814");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forTimeZone(timeZone2);
        org.joda.time.chrono.GJChronology gJChronology4 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone3);
        org.joda.time.DateTimeField dateTimeField5 = gJChronology4.millisOfSecond();
        int int6 = instant1.get(dateTimeField5);
        org.joda.time.Instant instant8 = instant1.plus(0L);
        boolean boolean9 = instant8.isEqualNow();
        java.util.TimeZone timeZone10 = null;
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forTimeZone(timeZone10);
        org.joda.time.chrono.GJChronology gJChronology12 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone11);
        org.joda.time.DurationField durationField13 = gJChronology12.halfdays();
        long long17 = gJChronology12.add((long) 'a', (-1L), (int) (short) 0);
        boolean boolean19 = gJChronology12.equals((java.lang.Object) 0);
        org.joda.time.DateTimeField dateTimeField20 = gJChronology12.dayOfMonth();
        org.joda.time.DurationField durationField21 = gJChronology12.millis();
        org.joda.time.DurationField durationField22 = gJChronology12.years();
        org.joda.time.MutableDateTime mutableDateTime23 = instant8.toMutableDateTime((org.joda.time.Chronology) gJChronology12);
        org.joda.time.DateTimeField dateTimeField24 = gJChronology12.era();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and mutableDateTime23", (instant1.compareTo(mutableDateTime23) == 0) == instant1.equals(mutableDateTime23));
    }

    @Test
    public void test1815() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1815");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        boolean boolean2 = instant1.isEqualNow();
        org.joda.time.ReadableDuration readableDuration3 = null;
        org.joda.time.Instant instant4 = instant1.plus(readableDuration3);
        org.joda.time.Instant instant6 = new org.joda.time.Instant(52L);
        org.joda.time.Instant instant8 = instant6.withMillis((long) 'u');
        boolean boolean9 = instant1.isBefore((org.joda.time.ReadableInstant) instant6);
        org.joda.time.DateTimeZone dateTimeZone10 = instant6.getZone();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetMillis((int) '4');
        java.util.TimeZone timeZone13 = dateTimeZone12.toTimeZone();
        long long16 = dateTimeZone12.adjustOffset((long) 0, false);
        int int18 = dateTimeZone12.getOffsetFromLocal((-26438399999L));
        java.util.TimeZone timeZone19 = dateTimeZone12.toTimeZone();
        java.lang.String str20 = dateTimeZone12.getID();
        org.joda.time.DateTime dateTime21 = instant6.toDateTime(dateTimeZone12);
        java.util.TimeZone timeZone22 = null;
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        java.lang.String str25 = dateTimeZone23.getNameKey((long) 100);
        boolean boolean26 = dateTimeZone23.isFixed();
        java.util.Locale locale30 = new java.util.Locale("DurationField[halfdays]", "\u82f1\u6587");
        java.lang.String str31 = dateTimeZone23.getName((long) (short) 10, locale30);
        java.lang.String str33 = dateTimeZone23.getNameKey(17296800000L);
        long long36 = dateTimeZone23.adjustOffset(4492800100L, true);
        org.joda.time.DateTime dateTime37 = dateTime21.toDateTime(dateTimeZone23);
        org.joda.time.DateTimeZone dateTimeZone38 = dateTime21.getZone();
        java.util.TimeZone timeZone39 = null;
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.forTimeZone(timeZone39);
        org.joda.time.chrono.GJChronology gJChronology41 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone40);
        org.joda.time.DurationField durationField42 = gJChronology41.halfdays();
        org.joda.time.DateTimeField dateTimeField43 = gJChronology41.millisOfDay();
        org.joda.time.DateTimeField dateTimeField44 = gJChronology41.secondOfMinute();
        org.joda.time.DurationField durationField45 = gJChronology41.weekyears();
        java.lang.String str46 = gJChronology41.toString();
        org.joda.time.DateTime dateTime47 = dateTime21.toDateTime((org.joda.time.Chronology) gJChronology41);
        java.util.TimeZone timeZone48 = null;
        org.joda.time.DateTimeZone dateTimeZone49 = org.joda.time.DateTimeZone.forTimeZone(timeZone48);
        org.joda.time.chrono.GJChronology gJChronology50 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone49);
        org.joda.time.DurationField durationField51 = gJChronology50.halfdays();
        long long55 = gJChronology50.add((long) 'a', (-1L), (int) (short) 0);
        boolean boolean57 = gJChronology50.equals((java.lang.Object) 0);
        org.joda.time.DateTimeField dateTimeField58 = gJChronology50.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField59 = gJChronology50.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField60 = gJChronology50.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField61 = gJChronology50.clockhourOfHalfday();
        org.joda.time.DurationField durationField62 = gJChronology50.halfdays();
        org.joda.time.DateTimeField dateTimeField63 = gJChronology50.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField64 = gJChronology50.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField65 = gJChronology50.weekyearOfCentury();
        org.joda.time.Chronology chronology66 = gJChronology50.withUTC();
        org.joda.time.DateTimeField dateTimeField67 = gJChronology50.dayOfWeek();
        org.joda.time.DateTime dateTime68 = dateTime47.toDateTime((org.joda.time.Chronology) gJChronology50);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and dateTime21", (instant1.compareTo(dateTime21) == 0) == instant1.equals(dateTime21));
    }

    @Test
    public void test1816() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1816");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        boolean boolean2 = instant1.isEqualNow();
        org.joda.time.ReadableDuration readableDuration3 = null;
        org.joda.time.Instant instant4 = instant1.plus(readableDuration3);
        org.joda.time.Instant instant6 = new org.joda.time.Instant(52L);
        org.joda.time.Instant instant8 = instant6.withMillis((long) 'u');
        boolean boolean9 = instant1.isBefore((org.joda.time.ReadableInstant) instant6);
        org.joda.time.DateTimeZone dateTimeZone10 = instant6.getZone();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetMillis((int) '4');
        java.util.TimeZone timeZone13 = dateTimeZone12.toTimeZone();
        long long16 = dateTimeZone12.adjustOffset((long) 0, false);
        int int18 = dateTimeZone12.getOffsetFromLocal((-26438399999L));
        java.util.TimeZone timeZone19 = dateTimeZone12.toTimeZone();
        java.lang.String str20 = dateTimeZone12.getID();
        org.joda.time.DateTime dateTime21 = instant6.toDateTime(dateTimeZone12);
        java.util.TimeZone timeZone22 = null;
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        java.lang.String str25 = dateTimeZone23.getNameKey((long) 100);
        boolean boolean26 = dateTimeZone23.isFixed();
        java.util.Locale locale30 = new java.util.Locale("DurationField[halfdays]", "\u82f1\u6587");
        java.lang.String str31 = dateTimeZone23.getName((long) (short) 10, locale30);
        java.lang.String str33 = dateTimeZone23.getNameKey(17296800000L);
        long long36 = dateTimeZone23.adjustOffset(4492800100L, true);
        org.joda.time.DateTime dateTime37 = dateTime21.toDateTime(dateTimeZone23);
        org.joda.time.Chronology chronology38 = dateTime21.getChronology();
        org.joda.time.DurationField durationField39 = chronology38.weekyears();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and dateTime21", (instant1.compareTo(dateTime21) == 0) == instant1.equals(dateTime21));
    }

    @Test
    public void test1817() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1817");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forTimeZone(timeZone2);
        org.joda.time.chrono.GJChronology gJChronology4 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone3);
        org.joda.time.DateTimeField dateTimeField5 = gJChronology4.millisOfSecond();
        int int6 = instant1.get(dateTimeField5);
        boolean boolean7 = instant1.isEqualNow();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = null;
        java.lang.String str9 = instant1.toString(dateTimeFormatter8);
        boolean boolean10 = instant1.isAfterNow();
        org.joda.time.Instant instant11 = instant1.toInstant();
        org.joda.time.DateTime dateTime12 = instant11.toDateTime();
        org.joda.time.Instant instant14 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone15 = null;
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forTimeZone(timeZone15);
        org.joda.time.chrono.GJChronology gJChronology17 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone16);
        org.joda.time.DateTimeField dateTimeField18 = gJChronology17.millisOfSecond();
        int int19 = instant14.get(dateTimeField18);
        boolean boolean20 = instant14.isEqualNow();
        org.joda.time.Instant instant22 = new org.joda.time.Instant(52L);
        boolean boolean23 = instant22.isEqualNow();
        org.joda.time.ReadableDuration readableDuration24 = null;
        org.joda.time.Instant instant25 = instant22.plus(readableDuration24);
        long long26 = instant22.getMillis();
        java.lang.Object obj27 = null;
        boolean boolean28 = instant22.equals(obj27);
        org.joda.time.Instant instant30 = new org.joda.time.Instant(52L);
        boolean boolean31 = instant30.isEqualNow();
        org.joda.time.ReadableDuration readableDuration32 = null;
        org.joda.time.Instant instant33 = instant30.plus(readableDuration32);
        long long34 = instant30.getMillis();
        java.lang.String str35 = instant30.toString();
        org.joda.time.Instant instant36 = instant30.toInstant();
        org.joda.time.ReadableDuration readableDuration37 = null;
        org.joda.time.Instant instant39 = instant30.withDurationAdded(readableDuration37, (int) 'x');
        org.joda.time.Instant instant40 = instant30.toInstant();
        int int41 = instant22.compareTo((org.joda.time.ReadableInstant) instant30);
        boolean boolean42 = instant14.isBefore((org.joda.time.ReadableInstant) instant30);
        org.joda.time.MutableDateTime mutableDateTime43 = instant30.toMutableDateTimeISO();
        int int44 = instant11.compareTo((org.joda.time.ReadableInstant) mutableDateTime43);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant11 and dateTime12", (instant11.compareTo(dateTime12) == 0) == instant11.equals(dateTime12));
    }

    @Test
    public void test1818() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1818");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = gJChronology2.halfdays();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.millisOfDay();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.minuteOfDay();
        org.joda.time.DurationField durationField6 = gJChronology2.centuries();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology2.millisOfSecond();
        org.joda.time.Chronology chronology8 = gJChronology2.withUTC();
        org.joda.time.DateTimeField dateTimeField9 = gJChronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField10 = gJChronology2.weekyearOfCentury();
        org.joda.time.DurationField durationField11 = gJChronology2.centuries();
        org.joda.time.Chronology chronology12 = gJChronology2.withUTC();
        org.joda.time.DurationField durationField13 = chronology12.eras();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField13, durationField3, and durationField6", !(durationField13.compareTo(durationField3) == 0) || (Math.signum(durationField13.compareTo(durationField6)) == Math.signum(durationField3.compareTo(durationField6))));
    }

    @Test
    public void test1819() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1819");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((-2246399965L));
        org.joda.time.Instant instant3 = new org.joda.time.Instant(52L);
        boolean boolean4 = instant3.isEqualNow();
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.Instant instant6 = instant3.plus(readableDuration5);
        long long7 = instant3.getMillis();
        java.lang.String str8 = instant3.toString();
        org.joda.time.Instant instant9 = instant3.toInstant();
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.Instant instant12 = instant3.withDurationAdded(readableDuration10, (int) 'x');
        org.joda.time.Instant instant13 = instant3.toInstant();
        java.util.Date date14 = instant3.toDate();
        long long15 = instant3.getMillis();
        org.joda.time.ReadableDuration readableDuration16 = null;
        org.joda.time.Instant instant17 = instant3.minus(readableDuration16);
        java.util.TimeZone timeZone18 = null;
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forTimeZone(timeZone18);
        org.joda.time.chrono.GJChronology gJChronology20 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone19);
        org.joda.time.DurationField durationField21 = gJChronology20.halfdays();
        org.joda.time.Chronology chronology22 = gJChronology20.withUTC();
        java.lang.String str23 = gJChronology20.toString();
        org.joda.time.DateTimeField dateTimeField24 = gJChronology20.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(1, 10);
        org.joda.time.Chronology chronology28 = gJChronology20.withZone(dateTimeZone27);
        org.joda.time.DateTimeZone dateTimeZone29 = gJChronology20.getZone();
        org.joda.time.DateTime dateTime30 = instant3.toDateTime(dateTimeZone29);
        boolean boolean31 = instant1.isBefore((org.joda.time.ReadableInstant) dateTime30);
        long long32 = dateTime30.getMillis();
        org.joda.time.Instant instant34 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone35 = null;
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.forTimeZone(timeZone35);
        org.joda.time.chrono.GJChronology gJChronology37 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone36);
        org.joda.time.DateTimeField dateTimeField38 = gJChronology37.millisOfSecond();
        int int39 = instant34.get(dateTimeField38);
        org.joda.time.Instant instant41 = instant34.plus(0L);
        org.joda.time.Instant instant42 = instant41.toInstant();
        org.joda.time.Instant instant44 = new org.joda.time.Instant(52L);
        boolean boolean45 = instant44.isEqualNow();
        java.lang.String str46 = instant44.toString();
        java.lang.String str47 = instant44.toString();
        org.joda.time.Instant instant49 = new org.joda.time.Instant(52L);
        boolean boolean50 = instant49.isEqualNow();
        org.joda.time.ReadableDuration readableDuration51 = null;
        org.joda.time.Instant instant52 = instant49.plus(readableDuration51);
        boolean boolean53 = instant44.isBefore((org.joda.time.ReadableInstant) instant52);
        org.joda.time.Instant instant55 = instant44.minus((long) 0);
        int int56 = instant41.compareTo((org.joda.time.ReadableInstant) instant44);
        org.joda.time.Instant instant59 = instant44.withDurationAdded((long) (short) 100, 70);
        org.joda.time.ReadableInstant readableInstant60 = null;
        boolean boolean61 = instant44.isBefore(readableInstant60);
        java.lang.String str62 = instant44.toString();
        org.joda.time.Chronology chronology63 = instant44.getChronology();
        org.joda.time.DateTimeZone dateTimeZone64 = instant44.getZone();
        boolean boolean65 = dateTime30.isEqual((org.joda.time.ReadableInstant) instant44);
        org.joda.time.Instant instant67 = new org.joda.time.Instant(52L);
        boolean boolean68 = instant67.isEqualNow();
        org.joda.time.ReadableDuration readableDuration69 = null;
        org.joda.time.Instant instant70 = instant67.plus(readableDuration69);
        org.joda.time.Instant instant72 = instant67.withMillis((long) 4);
        org.joda.time.Instant instant74 = instant72.withMillis((-5919628L));
        org.joda.time.Instant instant76 = instant74.minus(4324199948L);
        org.joda.time.Instant instant78 = instant76.minus((long) (byte) 1);
        boolean boolean79 = dateTime30.isEqual((org.joda.time.ReadableInstant) instant78);
        boolean boolean80 = instant78.isAfterNow();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant3 and dateTime30", (instant3.compareTo(dateTime30) == 0) == instant3.equals(dateTime30));
    }

    @Test
    public void test1820() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1820");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = gJChronology2.halfdays();
        long long7 = gJChronology2.add((long) 'a', (-1L), (int) (short) 0);
        long long11 = gJChronology2.add((long) (byte) 0, (long) '4', 100);
        org.joda.time.DateTimeField dateTimeField12 = gJChronology2.minuteOfHour();
        org.joda.time.DurationField durationField13 = gJChronology2.hours();
        org.joda.time.DateTimeField dateTimeField14 = gJChronology2.monthOfYear();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology2.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField16 = gJChronology2.dayOfYear();
        org.joda.time.DateTimeField dateTimeField17 = gJChronology2.millisOfSecond();
        org.joda.time.DateTimeZone dateTimeZone18 = gJChronology2.getZone();
        org.joda.time.Instant instant20 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone21 = null;
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forTimeZone(timeZone21);
        org.joda.time.chrono.GJChronology gJChronology23 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone22);
        org.joda.time.DateTimeField dateTimeField24 = gJChronology23.millisOfSecond();
        int int25 = instant20.get(dateTimeField24);
        org.joda.time.Instant instant27 = instant20.plus(0L);
        java.util.TimeZone timeZone28 = null;
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forTimeZone(timeZone28);
        org.joda.time.chrono.GJChronology gJChronology30 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone29);
        org.joda.time.DurationField durationField31 = gJChronology30.halfdays();
        org.joda.time.Chronology chronology32 = gJChronology30.withUTC();
        java.lang.String str33 = gJChronology30.toString();
        org.joda.time.DateTimeField dateTimeField34 = gJChronology30.hourOfHalfday();
        int int35 = instant20.get(dateTimeField34);
        java.util.TimeZone timeZone36 = null;
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.forTimeZone(timeZone36);
        org.joda.time.chrono.GJChronology gJChronology38 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone37);
        org.joda.time.DurationField durationField39 = gJChronology38.halfdays();
        long long43 = gJChronology38.add((long) 'a', (-1L), (int) (short) 0);
        org.joda.time.DateTimeField dateTimeField44 = gJChronology38.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField45 = gJChronology38.secondOfMinute();
        org.joda.time.Instant instant47 = new org.joda.time.Instant(52L);
        boolean boolean48 = instant47.isEqualNow();
        org.joda.time.ReadableDuration readableDuration49 = null;
        org.joda.time.Instant instant50 = instant47.plus(readableDuration49);
        boolean boolean51 = gJChronology38.equals((java.lang.Object) instant47);
        org.joda.time.DateTimeFieldType dateTimeFieldType52 = null;
        boolean boolean53 = instant47.isSupported(dateTimeFieldType52);
        org.joda.time.DateTimeFieldType dateTimeFieldType54 = null;
        boolean boolean55 = instant47.isSupported(dateTimeFieldType54);
        org.joda.time.DateTimeZone dateTimeZone56 = instant47.getZone();
        boolean boolean57 = instant20.isAfter((org.joda.time.ReadableInstant) instant47);
        org.joda.time.Instant instant58 = instant20.toInstant();
        boolean boolean60 = instant58.isAfter((-60000L));
        org.joda.time.Instant instant61 = instant58.toInstant();
        org.joda.time.MutableDateTime mutableDateTime62 = instant61.toMutableDateTimeISO();
        org.joda.time.chrono.GJChronology gJChronology63 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone18, (org.joda.time.ReadableInstant) instant61);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant61 and mutableDateTime62", (instant61.compareTo(mutableDateTime62) == 0) == instant61.equals(mutableDateTime62));
    }

    @Test
    public void test1821() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1821");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((java.lang.Object) 4320000L);
        org.joda.time.Instant instant2 = instant1.toInstant();
        org.joda.time.MutableDateTime mutableDateTime3 = instant1.toMutableDateTime();
        long long4 = instant1.getMillis();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and mutableDateTime3", (instant1.compareTo(mutableDateTime3) == 0) == instant1.equals(mutableDateTime3));
    }

    @Test
    public void test1822() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1822");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        boolean boolean2 = instant1.isEqualNow();
        boolean boolean4 = instant1.isEqual(0L);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = null;
        boolean boolean6 = instant1.isSupported(dateTimeFieldType5);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = null;
        boolean boolean8 = instant1.isSupported(dateTimeFieldType7);
        java.util.TimeZone timeZone9 = null;
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forTimeZone(timeZone9);
        org.joda.time.chrono.GJChronology gJChronology11 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone10);
        org.joda.time.DurationField durationField12 = gJChronology11.halfdays();
        org.joda.time.Chronology chronology13 = gJChronology11.withUTC();
        java.lang.String str14 = gJChronology11.toString();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology11.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(1, 10);
        org.joda.time.Chronology chronology19 = gJChronology11.withZone(dateTimeZone18);
        org.joda.time.MutableDateTime mutableDateTime20 = instant1.toMutableDateTime(dateTimeZone18);
        org.joda.time.ReadableDuration readableDuration21 = null;
        org.joda.time.Instant instant23 = instant1.withDurationAdded(readableDuration21, 97);
        org.joda.time.Instant instant25 = instant1.minus(5935258842600053L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime20 and instant1", (mutableDateTime20.compareTo(instant1) == 0) == mutableDateTime20.equals(instant1));
    }

    @Test
    public void test1823() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1823");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = gJChronology2.years();
        java.util.TimeZone timeZone4 = null;
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forTimeZone(timeZone4);
        org.joda.time.chrono.GJChronology gJChronology6 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone5);
        org.joda.time.DurationField durationField7 = gJChronology6.halfdays();
        org.joda.time.DateTimeField dateTimeField8 = gJChronology6.millisOfDay();
        org.joda.time.DateTimeField dateTimeField9 = gJChronology6.minuteOfDay();
        org.joda.time.DurationField durationField10 = gJChronology6.centuries();
        java.util.TimeZone timeZone11 = null;
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forTimeZone(timeZone11);
        org.joda.time.chrono.GJChronology gJChronology13 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone12);
        org.joda.time.DurationField durationField14 = gJChronology13.halfdays();
        long long17 = durationField14.add((long) 100, 100L);
        boolean boolean18 = durationField14.isPrecise();
        int int19 = durationField10.compareTo(durationField14);
        boolean boolean20 = gJChronology2.equals((java.lang.Object) durationField10);
        org.joda.time.DateTimeField dateTimeField21 = gJChronology2.dayOfYear();
        org.joda.time.DateTimeField dateTimeField22 = gJChronology2.era();
        org.joda.time.DateTimeZone dateTimeZone23 = gJChronology2.getZone();
        org.joda.time.Instant instant24 = gJChronology2.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration25 = null;
        org.joda.time.Instant instant26 = instant24.plus(readableDuration25);
        org.joda.time.Instant instant27 = org.joda.time.Instant.now();
        java.util.TimeZone timeZone28 = null;
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forTimeZone(timeZone28);
        org.joda.time.chrono.GJChronology gJChronology30 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone29);
        org.joda.time.DurationField durationField31 = gJChronology30.halfdays();
        org.joda.time.DateTimeField dateTimeField32 = gJChronology30.millisOfDay();
        org.joda.time.DateTimeField dateTimeField33 = gJChronology30.halfdayOfDay();
        int int34 = instant27.get(dateTimeField33);
        java.util.TimeZone timeZone35 = null;
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.forTimeZone(timeZone35);
        org.joda.time.chrono.GJChronology gJChronology37 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone36);
        long long41 = dateTimeZone36.convertLocalToUTC((long) (byte) -1, true, 0L);
        boolean boolean43 = dateTimeZone36.equals((java.lang.Object) true);
        org.joda.time.chrono.GJChronology gJChronology44 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone36);
        org.joda.time.DateTimeField dateTimeField45 = gJChronology44.weekyear();
        org.joda.time.DateTimeField dateTimeField46 = gJChronology44.clockhourOfHalfday();
        org.joda.time.MutableDateTime mutableDateTime47 = instant27.toMutableDateTime((org.joda.time.Chronology) gJChronology44);
        boolean boolean48 = instant24.isAfter((org.joda.time.ReadableInstant) instant27);
        org.joda.time.Instant instant51 = instant27.withDurationAdded(3692163384000L, 70);
        long long52 = instant27.getMillis();
        boolean boolean53 = instant27.isAfterNow();
        org.joda.time.DateTime dateTime54 = instant27.toDateTime();
        org.joda.time.ReadableDuration readableDuration55 = null;
        org.joda.time.Instant instant56 = instant27.plus(readableDuration55);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime47 and dateTime54", (mutableDateTime47.compareTo(dateTime54) == 0) == mutableDateTime47.equals(dateTime54));
    }

    @Test
    public void test1824() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1824");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forTimeZone(timeZone2);
        org.joda.time.chrono.GJChronology gJChronology4 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone3);
        org.joda.time.DateTimeField dateTimeField5 = gJChronology4.millisOfSecond();
        int int6 = instant1.get(dateTimeField5);
        boolean boolean7 = instant1.isEqualNow();
        org.joda.time.DateTime dateTime8 = instant1.toDateTime();
        org.joda.time.Instant instant11 = instant1.withDurationAdded((long) 1431201, 1970);
        org.joda.time.Instant instant13 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone14 = null;
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forTimeZone(timeZone14);
        org.joda.time.chrono.GJChronology gJChronology16 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone15);
        org.joda.time.DateTimeField dateTimeField17 = gJChronology16.millisOfSecond();
        int int18 = instant13.get(dateTimeField17);
        org.joda.time.Instant instant20 = instant13.plus(0L);
        long long21 = instant20.getMillis();
        org.joda.time.Instant instant24 = instant20.withDurationAdded((long) 12, 97);
        org.joda.time.DateTimeZone dateTimeZone25 = instant24.getZone();
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = null;
        boolean boolean27 = instant24.isSupported(dateTimeFieldType26);
        boolean boolean28 = instant11.isEqual((org.joda.time.ReadableInstant) instant24);
        org.joda.time.Chronology chronology29 = instant11.getChronology();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and dateTime8", (instant1.compareTo(dateTime8) == 0) == instant1.equals(dateTime8));
    }

    @Test
    public void test1825() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1825");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        boolean boolean2 = instant1.isEqualNow();
        org.joda.time.ReadableDuration readableDuration3 = null;
        org.joda.time.Instant instant4 = instant1.plus(readableDuration3);
        boolean boolean6 = instant4.equals((java.lang.Object) ' ');
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(1, 10);
        java.util.TimeZone timeZone10 = null;
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forTimeZone(timeZone10);
        long long13 = dateTimeZone9.getMillisKeepLocal(dateTimeZone11, 4320000000L);
        boolean boolean14 = instant4.equals((java.lang.Object) 4320000000L);
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = null;
        boolean boolean16 = instant4.isSupported(dateTimeFieldType15);
        org.joda.time.DateTime dateTime17 = instant4.toDateTimeISO();
        org.joda.time.Instant instant19 = new org.joda.time.Instant(52L);
        org.joda.time.Instant instant21 = instant19.withMillis((long) 'u');
        java.util.TimeZone timeZone22 = null;
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        org.joda.time.chrono.GJChronology gJChronology24 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone23);
        org.joda.time.DurationField durationField25 = gJChronology24.halfdays();
        long long29 = gJChronology24.add((long) 'a', (-1L), (int) (short) 0);
        boolean boolean31 = gJChronology24.equals((java.lang.Object) 0);
        org.joda.time.DateTimeField dateTimeField32 = gJChronology24.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField33 = gJChronology24.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField34 = gJChronology24.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField35 = gJChronology24.clockhourOfHalfday();
        org.joda.time.DateTime dateTime36 = instant19.toDateTime((org.joda.time.Chronology) gJChronology24);
        java.lang.String str37 = dateTime36.toString();
        long long38 = dateTime36.getMillis();
        long long39 = dateTime36.getMillis();
        boolean boolean40 = dateTime17.isAfter((org.joda.time.ReadableInstant) dateTime36);
        boolean boolean41 = dateTime36.isBeforeNow();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and dateTime17", (instant1.compareTo(dateTime17) == 0) == instant1.equals(dateTime17));
    }

    @Test
    public void test1826() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1826");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = gJChronology2.halfdays();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.millisOfDay();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.minuteOfDay();
        org.joda.time.DurationField durationField6 = gJChronology2.centuries();
        int int7 = gJChronology2.getMinimumDaysInFirstWeek();
        org.joda.time.DateTimeField dateTimeField8 = gJChronology2.weekyear();
        org.joda.time.DateTimeField dateTimeField9 = gJChronology2.weekyearOfCentury();
        org.joda.time.DurationField durationField10 = gJChronology2.halfdays();
        org.joda.time.DateTimeField dateTimeField11 = gJChronology2.monthOfYear();
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        long long15 = gJChronology2.add(readablePeriod12, 3155764201170L, 432000001);
        org.joda.time.DateTimeField dateTimeField16 = gJChronology2.millisOfSecond();
        org.joda.time.DurationField durationField17 = gJChronology2.eras();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField17, durationField3, and durationField6", !(durationField17.compareTo(durationField3) == 0) || (Math.signum(durationField17.compareTo(durationField6)) == Math.signum(durationField3.compareTo(durationField6))));
    }

    @Test
    public void test1827() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1827");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forTimeZone(timeZone2);
        org.joda.time.chrono.GJChronology gJChronology4 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone3);
        org.joda.time.DateTimeField dateTimeField5 = gJChronology4.millisOfSecond();
        int int6 = instant1.get(dateTimeField5);
        org.joda.time.Instant instant8 = instant1.plus(0L);
        org.joda.time.Instant instant9 = instant8.toInstant();
        org.joda.time.Instant instant11 = new org.joda.time.Instant(52L);
        boolean boolean12 = instant11.isEqualNow();
        java.lang.String str13 = instant11.toString();
        java.lang.String str14 = instant11.toString();
        org.joda.time.Instant instant16 = new org.joda.time.Instant(52L);
        boolean boolean17 = instant16.isEqualNow();
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.Instant instant19 = instant16.plus(readableDuration18);
        boolean boolean20 = instant11.isBefore((org.joda.time.ReadableInstant) instant19);
        org.joda.time.Instant instant22 = instant11.minus((long) 0);
        int int23 = instant8.compareTo((org.joda.time.ReadableInstant) instant11);
        org.joda.time.DateTime dateTime24 = instant8.toDateTimeISO();
        org.joda.time.Instant instant25 = instant8.toInstant();
        java.lang.String str26 = instant8.toString();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant8 and dateTime24", (instant8.compareTo(dateTime24) == 0) == instant8.equals(dateTime24));
    }

    @Test
    public void test1828() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1828");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        boolean boolean2 = instant1.isEqualNow();
        org.joda.time.ReadableDuration readableDuration3 = null;
        org.joda.time.Instant instant4 = instant1.plus(readableDuration3);
        long long5 = instant1.getMillis();
        java.lang.Object obj6 = null;
        boolean boolean7 = instant1.equals(obj6);
        org.joda.time.Instant instant9 = new org.joda.time.Instant(52L);
        boolean boolean10 = instant9.isEqualNow();
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.Instant instant12 = instant9.plus(readableDuration11);
        long long13 = instant9.getMillis();
        java.lang.String str14 = instant9.toString();
        org.joda.time.Instant instant15 = instant9.toInstant();
        org.joda.time.ReadableDuration readableDuration16 = null;
        org.joda.time.Instant instant18 = instant9.withDurationAdded(readableDuration16, (int) 'x');
        org.joda.time.Instant instant19 = instant9.toInstant();
        int int20 = instant1.compareTo((org.joda.time.ReadableInstant) instant9);
        boolean boolean22 = instant1.isBefore(14452100L);
        org.joda.time.Instant instant24 = new org.joda.time.Instant(52L);
        boolean boolean25 = instant24.isEqualNow();
        org.joda.time.ReadableDuration readableDuration26 = null;
        org.joda.time.Instant instant27 = instant24.plus(readableDuration26);
        long long28 = instant24.getMillis();
        java.lang.String str29 = instant24.toString();
        org.joda.time.Instant instant30 = instant24.toInstant();
        org.joda.time.ReadableDuration readableDuration31 = null;
        org.joda.time.Instant instant33 = instant24.withDurationAdded(readableDuration31, (int) 'x');
        java.util.TimeZone timeZone34 = null;
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.forTimeZone(timeZone34);
        org.joda.time.chrono.GJChronology gJChronology36 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone35);
        org.joda.time.DateTimeField dateTimeField37 = gJChronology36.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField38 = gJChronology36.yearOfCentury();
        int int39 = instant33.get(dateTimeField38);
        org.joda.time.Instant instant40 = instant33.toInstant();
        org.joda.time.ReadableDuration readableDuration41 = null;
        org.joda.time.Instant instant42 = instant33.minus(readableDuration41);
        int int43 = instant1.compareTo((org.joda.time.ReadableInstant) instant33);
        java.lang.String str44 = instant1.toString();
        java.util.TimeZone timeZone45 = null;
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.forTimeZone(timeZone45);
        org.joda.time.chrono.GJChronology gJChronology47 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone46);
        org.joda.time.DurationField durationField48 = gJChronology47.halfdays();
        long long52 = gJChronology47.add((long) 'a', (-1L), (int) (short) 0);
        boolean boolean54 = gJChronology47.equals((java.lang.Object) 0);
        org.joda.time.DateTimeField dateTimeField55 = gJChronology47.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField56 = gJChronology47.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField57 = gJChronology47.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField58 = gJChronology47.clockhourOfHalfday();
        org.joda.time.DurationField durationField59 = gJChronology47.halfdays();
        long long61 = durationField59.getValueAsLong((-2246399965L));
        boolean boolean62 = instant1.equals((java.lang.Object) long61);
        org.joda.time.DateTimeZone dateTimeZone63 = instant1.getZone();
        java.util.Locale.Builder builder64 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder65 = builder64.clear();
        java.util.Locale.Builder builder67 = builder65.removeUnicodeLocaleAttribute("und");
        java.util.Locale.Builder builder68 = builder67.clearExtensions();
        java.util.Locale.Builder builder69 = builder68.clearExtensions();
        java.util.Locale locale70 = builder68.build();
        java.util.Locale.Builder builder72 = builder68.setLanguageTag("en-US");
        java.util.Locale.Builder builder74 = builder68.addUnicodeLocaleAttribute("deu");
        java.util.Locale.Builder builder75 = builder74.clearExtensions();
        java.util.Locale.Builder builder76 = builder74.clear();
        java.util.Locale locale77 = builder74.build();
        java.util.Locale.Builder builder79 = builder74.removeUnicodeLocaleAttribute("CHN");
        java.util.Locale.Builder builder81 = builder79.setLanguageTag("Italian");
        boolean boolean82 = instant1.equals((java.lang.Object) "Italian");
        org.joda.time.MutableDateTime mutableDateTime83 = instant1.toMutableDateTime();
        org.joda.time.Chronology chronology84 = instant1.getChronology();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and mutableDateTime83", (instant1.compareTo(mutableDateTime83) == 0) == instant1.equals(mutableDateTime83));
    }

    @Test
    public void test1829() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1829");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = gJChronology2.halfdays();
        org.joda.time.Chronology chronology4 = gJChronology2.withUTC();
        java.lang.String str5 = gJChronology2.toString();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology2.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(1, 10);
        org.joda.time.Chronology chronology10 = gJChronology2.withZone(dateTimeZone9);
        long long12 = dateTimeZone9.convertUTCToLocal((-43829L));
        boolean boolean13 = dateTimeZone9.isFixed();
        long long15 = dateTimeZone9.previousTransition((long) 1869);
        org.joda.time.Instant instant17 = new org.joda.time.Instant(52L);
        boolean boolean18 = instant17.isEqualNow();
        java.lang.String str19 = instant17.toString();
        java.util.TimeZone timeZone20 = null;
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forTimeZone(timeZone20);
        org.joda.time.chrono.GJChronology gJChronology22 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone21);
        java.util.Locale locale24 = new java.util.Locale("hi!");
        java.lang.String str25 = locale24.getCountry();
        java.util.Locale locale26 = java.util.Locale.getDefault();
        java.lang.String str27 = locale26.getDisplayName();
        java.lang.String str28 = locale24.getDisplayScript(locale26);
        boolean boolean29 = dateTimeZone21.equals((java.lang.Object) locale26);
        int int31 = dateTimeZone21.getOffsetFromLocal((long) (short) 10);
        java.util.TimeZone timeZone32 = null;
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.forTimeZone(timeZone32);
        org.joda.time.chrono.GJChronology gJChronology34 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone33);
        org.joda.time.DateTimeField dateTimeField35 = gJChronology34.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField36 = gJChronology34.weekyearOfCentury();
        org.joda.time.Instant instant37 = gJChronology34.getGregorianCutover();
        org.joda.time.Instant instant39 = instant37.withMillis(0L);
        org.joda.time.Instant instant41 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone42 = null;
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.forTimeZone(timeZone42);
        org.joda.time.chrono.GJChronology gJChronology44 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone43);
        org.joda.time.DateTimeField dateTimeField45 = gJChronology44.millisOfSecond();
        int int46 = instant41.get(dateTimeField45);
        org.joda.time.Instant instant48 = instant41.plus(0L);
        int int49 = instant39.compareTo((org.joda.time.ReadableInstant) instant48);
        org.joda.time.DateTimeFieldType dateTimeFieldType50 = null;
        boolean boolean51 = instant48.isSupported(dateTimeFieldType50);
        int int52 = dateTimeZone21.getOffset((org.joda.time.ReadableInstant) instant48);
        boolean boolean53 = instant17.isAfter((org.joda.time.ReadableInstant) instant48);
        org.joda.time.ReadableDuration readableDuration54 = null;
        org.joda.time.Instant instant56 = instant17.withDurationAdded(readableDuration54, 1);
        java.lang.String str57 = instant17.toString();
        org.joda.time.Instant instant59 = instant17.minus((-3155673600000L));
        org.joda.time.chrono.GJChronology gJChronology60 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone9, (org.joda.time.ReadableInstant) instant17);
        org.joda.time.Instant instant62 = new org.joda.time.Instant(52L);
        boolean boolean63 = instant62.isEqualNow();
        org.joda.time.ReadableDuration readableDuration64 = null;
        org.joda.time.Instant instant65 = instant62.plus(readableDuration64);
        org.joda.time.Instant instant67 = instant62.withMillis((long) 4);
        boolean boolean68 = instant67.isBeforeNow();
        boolean boolean70 = instant67.isBefore(5185792L);
        org.joda.time.MutableDateTime mutableDateTime71 = instant67.toMutableDateTime();
        org.joda.time.Instant instant73 = instant67.withMillis((-61827926399999L));
        org.joda.time.DateTimeZone dateTimeZone74 = instant67.getZone();
        org.joda.time.DateTime dateTime75 = instant17.toDateTime(dateTimeZone74);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant67 and mutableDateTime71", (instant67.compareTo(mutableDateTime71) == 0) == instant67.equals(mutableDateTime71));
    }

    @Test
    public void test1830() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1830");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        java.util.TimeZone timeZone1 = null;
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forTimeZone(timeZone1);
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone2);
        org.joda.time.DurationField durationField4 = gJChronology3.halfdays();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology3.millisOfDay();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology3.minuteOfDay();
        org.joda.time.DurationField durationField7 = gJChronology3.centuries();
        org.joda.time.DateTimeField dateTimeField8 = gJChronology3.dayOfYear();
        java.lang.String str9 = gJChronology3.toString();
        org.joda.time.DateTimeField dateTimeField10 = gJChronology3.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone11 = gJChronology3.getZone();
        java.util.TimeZone timeZone12 = null;
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forTimeZone(timeZone12);
        org.joda.time.chrono.GJChronology gJChronology14 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone13);
        java.util.Locale locale16 = new java.util.Locale("hi!");
        java.lang.String str17 = locale16.getCountry();
        java.util.Locale locale18 = java.util.Locale.getDefault();
        java.lang.String str19 = locale18.getDisplayName();
        java.lang.String str20 = locale16.getDisplayScript(locale18);
        boolean boolean21 = dateTimeZone13.equals((java.lang.Object) locale18);
        org.joda.time.Chronology chronology22 = gJChronology3.withZone(dateTimeZone13);
        java.util.Locale locale24 = java.util.Locale.GERMAN;
        java.lang.String str25 = locale24.getCountry();
        java.lang.String str26 = locale24.getDisplayName();
        java.lang.String str27 = dateTimeZone13.getName((long) (byte) 0, locale24);
        boolean boolean28 = dateTimeZone13.isFixed();
        org.joda.time.Instant instant30 = new org.joda.time.Instant(52L);
        boolean boolean31 = instant30.isEqualNow();
        java.lang.String str32 = instant30.toString();
        org.joda.time.Instant instant34 = new org.joda.time.Instant(52L);
        boolean boolean35 = instant34.isEqualNow();
        java.lang.String str36 = instant34.toString();
        java.lang.String str37 = instant34.toString();
        org.joda.time.Instant instant40 = instant34.withDurationAdded(115200000L, (int) (short) 1);
        int int41 = instant30.compareTo((org.joda.time.ReadableInstant) instant34);
        org.joda.time.Instant instant43 = new org.joda.time.Instant(52L);
        boolean boolean44 = instant43.isEqualNow();
        org.joda.time.ReadableDuration readableDuration45 = null;
        org.joda.time.Instant instant46 = instant43.plus(readableDuration45);
        boolean boolean48 = instant46.equals((java.lang.Object) ' ');
        boolean boolean49 = instant34.isAfter((org.joda.time.ReadableInstant) instant46);
        java.lang.String str50 = instant46.toString();
        int int51 = dateTimeZone13.getOffset((org.joda.time.ReadableInstant) instant46);
        org.joda.time.chrono.GJChronology gJChronology52 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, (org.joda.time.ReadableInstant) instant46);
        org.joda.time.MutableDateTime mutableDateTime53 = instant46.toMutableDateTimeISO();
        org.joda.time.Instant instant55 = instant46.plus(0L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant30 and mutableDateTime53", (instant30.compareTo(mutableDateTime53) == 0) == instant30.equals(mutableDateTime53));
    }

    @Test
    public void test1831() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1831");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = gJChronology2.halfdays();
        long long7 = gJChronology2.add((long) 'a', (-1L), (int) (short) 0);
        long long11 = gJChronology2.add((long) (byte) 0, (long) '4', 100);
        org.joda.time.DateTimeField dateTimeField12 = gJChronology2.minuteOfHour();
        org.joda.time.DurationField durationField13 = gJChronology2.hours();
        org.joda.time.DateTimeField dateTimeField14 = gJChronology2.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology2.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField16 = gJChronology2.secondOfDay();
        org.joda.time.DateTimeField dateTimeField17 = gJChronology2.secondOfMinute();
        org.joda.time.Instant instant19 = new org.joda.time.Instant(52L);
        boolean boolean20 = instant19.isEqualNow();
        org.joda.time.ReadableDuration readableDuration21 = null;
        org.joda.time.Instant instant22 = instant19.plus(readableDuration21);
        long long23 = instant19.getMillis();
        java.lang.String str24 = instant19.toString();
        org.joda.time.Instant instant25 = instant19.toInstant();
        org.joda.time.ReadableDuration readableDuration26 = null;
        org.joda.time.Instant instant28 = instant19.withDurationAdded(readableDuration26, (int) 'x');
        java.util.TimeZone timeZone29 = null;
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forTimeZone(timeZone29);
        java.lang.String str32 = dateTimeZone30.getNameKey((long) 100);
        boolean boolean33 = dateTimeZone30.isFixed();
        org.joda.time.chrono.GJChronology gJChronology34 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone30);
        java.lang.String str35 = dateTimeZone30.toString();
        org.joda.time.DateTime dateTime36 = instant28.toDateTime(dateTimeZone30);
        java.lang.String str38 = dateTimeZone30.getNameKey((-5919628L));
        long long42 = dateTimeZone30.convertLocalToUTC(42L, true, 10229112000000L);
        org.joda.time.Chronology chronology43 = gJChronology2.withZone(dateTimeZone30);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant19 and dateTime36", (instant19.compareTo(dateTime36) == 0) == instant19.equals(dateTime36));
    }

    @Test
    public void test1832() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1832");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forTimeZone(timeZone2);
        org.joda.time.chrono.GJChronology gJChronology4 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone3);
        org.joda.time.DateTimeField dateTimeField5 = gJChronology4.millisOfSecond();
        int int6 = instant1.get(dateTimeField5);
        boolean boolean7 = instant1.isEqualNow();
        org.joda.time.DateTime dateTime8 = instant1.toDateTime();
        org.joda.time.Instant instant11 = instant1.withDurationAdded((long) 1431201, 1970);
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.Instant instant14 = instant11.withDurationAdded(readableDuration12, (int) (short) -1);
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.Instant instant16 = instant11.minus(readableDuration15);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and dateTime8", (instant1.compareTo(dateTime8) == 0) == instant1.equals(dateTime8));
    }

    @Test
    public void test1833() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1833");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        boolean boolean2 = instant1.isEqualNow();
        java.lang.String str3 = instant1.toString();
        java.lang.String str4 = instant1.toString();
        org.joda.time.Instant instant7 = instant1.withDurationAdded(115200000L, (int) (short) 1);
        boolean boolean8 = instant7.isBeforeNow();
        org.joda.time.DateTime dateTime9 = instant7.toDateTimeISO();
        org.joda.time.Chronology chronology10 = instant7.getChronology();
        org.joda.time.DateTime dateTime11 = instant7.toDateTime();
        java.lang.String str12 = dateTime11.toString();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant7 and dateTime9", (instant7.compareTo(dateTime9) == 0) == instant7.equals(dateTime9));
    }

    @Test
    public void test1834() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1834");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str3 = dateTimeZone1.getNameKey((long) 100);
        boolean boolean4 = dateTimeZone1.isFixed();
        long long7 = dateTimeZone1.adjustOffset((long) (short) 10, true);
        int int9 = dateTimeZone1.getOffset(1L);
        long long11 = dateTimeZone1.convertUTCToLocal((-8567999948L));
        long long13 = dateTimeZone1.previousTransition((long) 600000);
        org.joda.time.Instant instant15 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone16 = null;
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forTimeZone(timeZone16);
        org.joda.time.chrono.GJChronology gJChronology18 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone17);
        org.joda.time.DateTimeField dateTimeField19 = gJChronology18.millisOfSecond();
        int int20 = instant15.get(dateTimeField19);
        org.joda.time.Instant instant22 = instant15.plus(0L);
        org.joda.time.Instant instant24 = new org.joda.time.Instant(52L);
        boolean boolean25 = instant24.isEqualNow();
        org.joda.time.ReadableDuration readableDuration26 = null;
        org.joda.time.Instant instant27 = instant24.plus(readableDuration26);
        long long28 = instant24.getMillis();
        java.lang.String str29 = instant24.toString();
        org.joda.time.Instant instant30 = instant24.toInstant();
        java.util.TimeZone timeZone31 = null;
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.forTimeZone(timeZone31);
        java.lang.String str34 = dateTimeZone32.getNameKey((long) 100);
        long long37 = dateTimeZone32.convertLocalToUTC((-2246399965L), true);
        org.joda.time.MutableDateTime mutableDateTime38 = instant30.toMutableDateTime(dateTimeZone32);
        int int39 = instant22.compareTo((org.joda.time.ReadableInstant) mutableDateTime38);
        int int40 = dateTimeZone1.getOffset((org.joda.time.ReadableInstant) mutableDateTime38);
        int int42 = dateTimeZone1.getStandardOffset((-2292106070966400000L));
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant15 and mutableDateTime38", (instant15.compareTo(mutableDateTime38) == 0) == instant15.equals(mutableDateTime38));
    }

    @Test
    public void test1835() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1835");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        boolean boolean2 = instant1.isEqualNow();
        java.lang.String str3 = instant1.toString();
        java.lang.String str4 = instant1.toString();
        org.joda.time.Instant instant6 = new org.joda.time.Instant(52L);
        boolean boolean7 = instant6.isEqualNow();
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.Instant instant9 = instant6.plus(readableDuration8);
        boolean boolean10 = instant1.isBefore((org.joda.time.ReadableInstant) instant9);
        org.joda.time.Instant instant12 = instant9.plus((long) (short) 100);
        org.joda.time.Chronology chronology13 = instant12.getChronology();
        org.joda.time.Instant instant15 = new org.joda.time.Instant(52L);
        boolean boolean16 = instant15.isEqualNow();
        boolean boolean18 = instant15.isEqual(0L);
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = null;
        boolean boolean20 = instant15.isSupported(dateTimeFieldType19);
        org.joda.time.Instant instant23 = instant15.withDurationAdded((-61827926399999L), (int) (short) -1);
        org.joda.time.MutableDateTime mutableDateTime24 = instant23.toMutableDateTime();
        org.joda.time.DateTimeZone dateTimeZone25 = mutableDateTime24.getZone();
        int int26 = instant12.compareTo((org.joda.time.ReadableInstant) mutableDateTime24);
        org.joda.time.Instant instant28 = new org.joda.time.Instant((-315566928000000L));
        java.util.TimeZone timeZone29 = null;
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forTimeZone(timeZone29);
        org.joda.time.chrono.GJChronology gJChronology31 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone30);
        org.joda.time.DurationField durationField32 = gJChronology31.halfdays();
        long long36 = gJChronology31.add((long) 'a', (-1L), (int) (short) 0);
        org.joda.time.DateTimeField dateTimeField37 = gJChronology31.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField38 = gJChronology31.centuryOfEra();
        long long42 = gJChronology31.add(262974600000L, (long) (byte) 100, (int) '4');
        org.joda.time.DateTimeField dateTimeField43 = gJChronology31.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField44 = gJChronology31.weekOfWeekyear();
        org.joda.time.DateTime dateTime45 = instant28.toDateTime((org.joda.time.Chronology) gJChronology31);
        java.util.TimeZone timeZone46 = null;
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.forTimeZone(timeZone46);
        org.joda.time.chrono.GJChronology gJChronology48 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone47);
        org.joda.time.DurationField durationField49 = gJChronology48.halfdays();
        long long53 = gJChronology48.add(0L, (long) (short) -1, (int) '4');
        java.util.TimeZone timeZone54 = null;
        org.joda.time.DateTimeZone dateTimeZone55 = org.joda.time.DateTimeZone.forTimeZone(timeZone54);
        org.joda.time.chrono.GJChronology gJChronology56 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone55);
        org.joda.time.DurationField durationField57 = gJChronology56.halfdays();
        org.joda.time.DateTimeField dateTimeField58 = gJChronology56.millisOfDay();
        org.joda.time.DateTimeField dateTimeField59 = gJChronology56.minuteOfDay();
        org.joda.time.DurationField durationField60 = gJChronology56.centuries();
        org.joda.time.DateTimeField dateTimeField61 = gJChronology56.dayOfYear();
        java.lang.String str62 = gJChronology56.toString();
        org.joda.time.DurationField durationField63 = gJChronology56.years();
        org.joda.time.DateTimeField dateTimeField64 = gJChronology56.yearOfEra();
        org.joda.time.DateTimeZone dateTimeZone67 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(0, (int) (short) 10);
        org.joda.time.Chronology chronology68 = gJChronology56.withZone(dateTimeZone67);
        org.joda.time.Chronology chronology69 = gJChronology48.withZone(dateTimeZone67);
        org.joda.time.DurationField durationField70 = gJChronology48.halfdays();
        org.joda.time.Instant instant71 = gJChronology48.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration72 = null;
        org.joda.time.Instant instant73 = instant71.plus(readableDuration72);
        org.joda.time.DateTime dateTime74 = instant73.toDateTimeISO();
        boolean boolean75 = instant28.isBefore((org.joda.time.ReadableInstant) dateTime74);
        boolean boolean76 = mutableDateTime24.isAfter((org.joda.time.ReadableInstant) instant28);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant71 and dateTime74", (instant71.compareTo(dateTime74) == 0) == instant71.equals(dateTime74));
    }

    @Test
    public void test1836() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1836");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(4000L);
        java.util.TimeZone timeZone2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forTimeZone(timeZone2);
        org.joda.time.chrono.GJChronology gJChronology4 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone3);
        org.joda.time.DateTimeField dateTimeField5 = gJChronology4.era();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology4.year();
        org.joda.time.DateTime dateTime7 = instant1.toDateTime((org.joda.time.Chronology) gJChronology4);
        java.util.Locale.Category category8 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale9 = java.util.Locale.getDefault(category8);
        java.util.Locale locale10 = java.util.Locale.ROOT;
        java.util.Locale locale11 = java.util.Locale.ITALIAN;
        java.lang.String str12 = locale10.getDisplayName(locale11);
        java.util.Locale locale13 = java.util.Locale.ENGLISH;
        java.lang.String str15 = locale13.getUnicodeLocaleType("zh");
        java.lang.String str16 = locale10.getDisplayCountry(locale13);
        java.lang.String str17 = locale10.getDisplayName();
        java.lang.String str18 = locale9.getDisplayScript(locale10);
        java.util.Locale locale21 = new java.util.Locale("English (United States)", "");
        java.util.Locale locale22 = java.util.Locale.GERMAN;
        java.lang.String str23 = locale22.getCountry();
        java.lang.String str24 = locale22.getDisplayName();
        java.util.Locale locale25 = java.util.Locale.CANADA;
        java.lang.String str26 = locale25.getDisplayVariant();
        java.lang.String str27 = locale22.getDisplayCountry(locale25);
        java.lang.String str28 = locale25.getCountry();
        java.lang.String str29 = locale21.getDisplayLanguage(locale25);
        java.lang.String str30 = locale21.getDisplayLanguage();
        java.util.Locale locale31 = locale21.stripExtensions();
        java.lang.String str32 = locale10.getDisplayCountry(locale31);
        boolean boolean33 = dateTime7.equals((java.lang.Object) locale10);
        java.lang.String str34 = dateTime7.toString();
        org.joda.time.Instant instant36 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone37 = null;
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forTimeZone(timeZone37);
        org.joda.time.chrono.GJChronology gJChronology39 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone38);
        org.joda.time.DateTimeField dateTimeField40 = gJChronology39.millisOfSecond();
        int int41 = instant36.get(dateTimeField40);
        org.joda.time.Instant instant43 = instant36.plus(0L);
        org.joda.time.Instant instant44 = instant43.toInstant();
        org.joda.time.Instant instant46 = new org.joda.time.Instant(52L);
        boolean boolean47 = instant46.isEqualNow();
        java.lang.String str48 = instant46.toString();
        java.lang.String str49 = instant46.toString();
        org.joda.time.Instant instant51 = new org.joda.time.Instant(52L);
        boolean boolean52 = instant51.isEqualNow();
        org.joda.time.ReadableDuration readableDuration53 = null;
        org.joda.time.Instant instant54 = instant51.plus(readableDuration53);
        boolean boolean55 = instant46.isBefore((org.joda.time.ReadableInstant) instant54);
        org.joda.time.Instant instant57 = instant46.minus((long) 0);
        int int58 = instant43.compareTo((org.joda.time.ReadableInstant) instant46);
        org.joda.time.Instant instant61 = instant46.withDurationAdded((long) (short) 100, 70);
        org.joda.time.ReadableInstant readableInstant62 = null;
        boolean boolean63 = instant46.isBefore(readableInstant62);
        org.joda.time.Instant instant65 = new org.joda.time.Instant(52L);
        boolean boolean66 = instant65.isEqualNow();
        org.joda.time.ReadableDuration readableDuration67 = null;
        org.joda.time.Instant instant68 = instant65.plus(readableDuration67);
        long long69 = instant65.getMillis();
        java.lang.String str70 = instant65.toString();
        org.joda.time.Instant instant71 = instant65.toInstant();
        org.joda.time.ReadableDuration readableDuration72 = null;
        org.joda.time.Instant instant74 = instant65.withDurationAdded(readableDuration72, (int) 'x');
        java.util.TimeZone timeZone75 = null;
        org.joda.time.DateTimeZone dateTimeZone76 = org.joda.time.DateTimeZone.forTimeZone(timeZone75);
        java.lang.String str78 = dateTimeZone76.getNameKey((long) 100);
        boolean boolean79 = dateTimeZone76.isFixed();
        org.joda.time.chrono.GJChronology gJChronology80 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone76);
        java.lang.String str81 = dateTimeZone76.toString();
        org.joda.time.DateTime dateTime82 = instant74.toDateTime(dateTimeZone76);
        boolean boolean83 = instant46.isBefore((org.joda.time.ReadableInstant) dateTime82);
        boolean boolean85 = dateTime82.isEqual(52L);
        org.joda.time.Instant instant86 = dateTime82.toInstant();
        boolean boolean87 = dateTime7.isEqual((org.joda.time.ReadableInstant) dateTime82);
        org.joda.time.DateTimeZone dateTimeZone88 = dateTime7.getZone();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant36 and dateTime82", (instant36.compareTo(dateTime82) == 0) == instant36.equals(dateTime82));
    }

    @Test
    public void test1837() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1837");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField3 = gJChronology2.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology2.hourOfHalfday();
        org.joda.time.DurationField durationField7 = gJChronology2.halfdays();
        org.joda.time.DateTimeField dateTimeField8 = gJChronology2.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField9 = gJChronology2.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField10 = gJChronology2.dayOfMonth();
        org.joda.time.DurationField durationField11 = gJChronology2.hours();
        org.joda.time.Instant instant13 = new org.joda.time.Instant(52L);
        boolean boolean14 = instant13.isEqualNow();
        java.lang.String str15 = instant13.toString();
        org.joda.time.Instant instant17 = new org.joda.time.Instant(52L);
        boolean boolean18 = instant17.isEqualNow();
        java.lang.String str19 = instant17.toString();
        java.lang.String str20 = instant17.toString();
        org.joda.time.Instant instant23 = instant17.withDurationAdded(115200000L, (int) (short) 1);
        int int24 = instant13.compareTo((org.joda.time.ReadableInstant) instant17);
        org.joda.time.Instant instant26 = new org.joda.time.Instant(52L);
        boolean boolean27 = instant26.isEqualNow();
        org.joda.time.ReadableDuration readableDuration28 = null;
        org.joda.time.Instant instant29 = instant26.plus(readableDuration28);
        boolean boolean31 = instant29.equals((java.lang.Object) ' ');
        boolean boolean32 = instant17.isAfter((org.joda.time.ReadableInstant) instant29);
        java.lang.String str33 = instant29.toString();
        java.lang.String str34 = instant29.toString();
        org.joda.time.ReadableDuration readableDuration35 = null;
        org.joda.time.Instant instant37 = instant29.withDurationAdded(readableDuration35, 236785);
        org.joda.time.Instant instant39 = new org.joda.time.Instant((-64983772799999L));
        org.joda.time.DateTime dateTime40 = instant39.toDateTime();
        org.joda.time.MutableDateTime mutableDateTime41 = instant39.toMutableDateTime();
        int int42 = instant29.compareTo((org.joda.time.ReadableInstant) instant39);
        java.util.TimeZone timeZone43 = null;
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.forTimeZone(timeZone43);
        org.joda.time.chrono.GJChronology gJChronology45 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone44);
        org.joda.time.DurationField durationField46 = gJChronology45.halfdays();
        long long50 = gJChronology45.add((long) 'a', (-1L), (int) (short) 0);
        long long54 = gJChronology45.add((long) (byte) 0, (long) '4', 100);
        org.joda.time.DateTimeField dateTimeField55 = gJChronology45.minuteOfHour();
        org.joda.time.DurationField durationField56 = gJChronology45.hours();
        org.joda.time.DateTimeField dateTimeField57 = gJChronology45.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField58 = gJChronology45.millisOfSecond();
        org.joda.time.DurationField durationField59 = gJChronology45.months();
        org.joda.time.DateTimeField dateTimeField60 = gJChronology45.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField61 = gJChronology45.weekyearOfCentury();
        java.util.TimeZone timeZone62 = null;
        org.joda.time.DateTimeZone dateTimeZone63 = org.joda.time.DateTimeZone.forTimeZone(timeZone62);
        java.lang.String str65 = dateTimeZone63.getNameKey((long) 100);
        long long68 = dateTimeZone63.convertLocalToUTC((-2246399965L), true);
        long long72 = dateTimeZone63.convertLocalToUTC(4320000000L, true, (long) 'a');
        boolean boolean73 = dateTimeZone63.isFixed();
        int int75 = dateTimeZone63.getOffset(97L);
        long long78 = dateTimeZone63.adjustOffset(7816188L, false);
        org.joda.time.Chronology chronology79 = gJChronology45.withZone(dateTimeZone63);
        long long81 = dateTimeZone63.convertUTCToLocal(1104493320000L);
        long long84 = dateTimeZone63.convertLocalToUTC((-2208729596000L), true);
        org.joda.time.MutableDateTime mutableDateTime85 = instant39.toMutableDateTime(dateTimeZone63);
        int int87 = dateTimeZone63.getOffsetFromLocal(3732479995800000L);
        org.joda.time.Chronology chronology88 = gJChronology2.withZone(dateTimeZone63);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant39 and dateTime40", (instant39.compareTo(dateTime40) == 0) == instant39.equals(dateTime40));
    }

    @Test
    public void test1838() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1838");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = gJChronology2.halfdays();
        long long7 = gJChronology2.add((long) 'a', (-1L), (int) (short) 0);
        org.joda.time.DateTimeField dateTimeField8 = gJChronology2.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField9 = gJChronology2.secondOfMinute();
        org.joda.time.Instant instant11 = new org.joda.time.Instant(52L);
        boolean boolean12 = instant11.isEqualNow();
        org.joda.time.ReadableDuration readableDuration13 = null;
        org.joda.time.Instant instant14 = instant11.plus(readableDuration13);
        boolean boolean15 = gJChronology2.equals((java.lang.Object) instant11);
        org.joda.time.ReadableDuration readableDuration16 = null;
        org.joda.time.Instant instant18 = instant11.withDurationAdded(readableDuration16, 52);
        org.joda.time.Instant instant20 = new org.joda.time.Instant(4320000100L);
        java.util.TimeZone timeZone21 = null;
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forTimeZone(timeZone21);
        org.joda.time.chrono.GJChronology gJChronology23 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone22);
        org.joda.time.DurationField durationField24 = gJChronology23.halfdays();
        org.joda.time.DateTimeField dateTimeField25 = gJChronology23.millisOfDay();
        org.joda.time.DateTimeField dateTimeField26 = gJChronology23.minuteOfDay();
        org.joda.time.DurationField durationField27 = gJChronology23.centuries();
        org.joda.time.DateTimeField dateTimeField28 = gJChronology23.dayOfYear();
        java.lang.String str29 = gJChronology23.toString();
        org.joda.time.DateTimeField dateTimeField30 = gJChronology23.dayOfYear();
        org.joda.time.DateTimeField dateTimeField31 = gJChronology23.dayOfMonth();
        int int32 = instant20.get(dateTimeField31);
        boolean boolean33 = instant11.isBefore((org.joda.time.ReadableInstant) instant20);
        org.joda.time.MutableDateTime mutableDateTime34 = instant11.toMutableDateTimeISO();
        org.joda.time.Instant instant36 = new org.joda.time.Instant(91L);
        org.joda.time.ReadableInstant readableInstant37 = null;
        boolean boolean38 = instant36.isEqual(readableInstant37);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter39 = null;
        java.lang.String str40 = instant36.toString(dateTimeFormatter39);
        boolean boolean41 = instant11.isAfter((org.joda.time.ReadableInstant) instant36);
        org.joda.time.Instant instant43 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone44 = null;
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.forTimeZone(timeZone44);
        org.joda.time.chrono.GJChronology gJChronology46 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone45);
        org.joda.time.DateTimeField dateTimeField47 = gJChronology46.millisOfSecond();
        int int48 = instant43.get(dateTimeField47);
        org.joda.time.Instant instant50 = instant43.plus(0L);
        long long51 = instant43.getMillis();
        org.joda.time.Instant instant53 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone54 = null;
        org.joda.time.DateTimeZone dateTimeZone55 = org.joda.time.DateTimeZone.forTimeZone(timeZone54);
        org.joda.time.chrono.GJChronology gJChronology56 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone55);
        org.joda.time.DateTimeField dateTimeField57 = gJChronology56.millisOfSecond();
        int int58 = instant53.get(dateTimeField57);
        org.joda.time.Instant instant60 = instant53.plus(0L);
        long long61 = instant53.getMillis();
        org.joda.time.Instant instant63 = new org.joda.time.Instant(52L);
        boolean boolean64 = instant63.isEqualNow();
        java.lang.String str65 = instant63.toString();
        java.lang.String str66 = instant63.toString();
        org.joda.time.Instant instant68 = new org.joda.time.Instant(52L);
        boolean boolean69 = instant68.isEqualNow();
        org.joda.time.ReadableDuration readableDuration70 = null;
        org.joda.time.Instant instant71 = instant68.plus(readableDuration70);
        boolean boolean72 = instant63.isBefore((org.joda.time.ReadableInstant) instant71);
        org.joda.time.ReadableDuration readableDuration73 = null;
        org.joda.time.Instant instant74 = instant71.minus(readableDuration73);
        boolean boolean75 = instant53.isAfter((org.joda.time.ReadableInstant) instant71);
        boolean boolean76 = instant71.isEqualNow();
        boolean boolean77 = instant43.isAfter((org.joda.time.ReadableInstant) instant71);
        java.util.TimeZone timeZone78 = null;
        org.joda.time.DateTimeZone dateTimeZone79 = org.joda.time.DateTimeZone.forTimeZone(timeZone78);
        org.joda.time.chrono.GJChronology gJChronology80 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone79);
        org.joda.time.DateTimeField dateTimeField81 = gJChronology80.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField82 = gJChronology80.weekyearOfCentury();
        org.joda.time.Instant instant83 = gJChronology80.getGregorianCutover();
        org.joda.time.Instant instant85 = instant83.withMillis(0L);
        org.joda.time.Chronology chronology86 = instant85.getChronology();
        org.joda.time.Instant instant87 = instant85.toInstant();
        org.joda.time.Instant instant89 = instant87.plus((long) 303090);
        boolean boolean90 = instant71.isBefore((org.joda.time.ReadableInstant) instant89);
        boolean boolean91 = instant36.isEqual((org.joda.time.ReadableInstant) instant89);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant11 and mutableDateTime34", (instant11.compareTo(mutableDateTime34) == 0) == instant11.equals(mutableDateTime34));
    }

    @Test
    public void test1839() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1839");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        org.joda.time.Instant instant3 = instant1.withMillis((long) 'u');
        java.util.TimeZone timeZone4 = null;
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forTimeZone(timeZone4);
        org.joda.time.chrono.GJChronology gJChronology6 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone5);
        org.joda.time.DurationField durationField7 = gJChronology6.halfdays();
        long long11 = gJChronology6.add((long) 'a', (-1L), (int) (short) 0);
        boolean boolean13 = gJChronology6.equals((java.lang.Object) 0);
        org.joda.time.DateTimeField dateTimeField14 = gJChronology6.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology6.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField16 = gJChronology6.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField17 = gJChronology6.clockhourOfHalfday();
        org.joda.time.DateTime dateTime18 = instant1.toDateTime((org.joda.time.Chronology) gJChronology6);
        java.util.TimeZone timeZone19 = null;
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forTimeZone(timeZone19);
        org.joda.time.chrono.GJChronology gJChronology21 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone20);
        org.joda.time.DurationField durationField22 = gJChronology21.halfdays();
        long long26 = gJChronology21.add((long) 'a', (-1L), (int) (short) 0);
        long long30 = gJChronology21.add((long) (byte) 0, (long) '4', 100);
        org.joda.time.DateTimeField dateTimeField31 = gJChronology21.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField32 = gJChronology21.year();
        org.joda.time.DateTimeField dateTimeField33 = gJChronology21.monthOfYear();
        org.joda.time.MutableDateTime mutableDateTime34 = instant1.toMutableDateTime((org.joda.time.Chronology) gJChronology21);
        boolean boolean36 = instant1.isAfter(4324200000L);
        java.util.TimeZone timeZone37 = null;
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forTimeZone(timeZone37);
        org.joda.time.chrono.GJChronology gJChronology39 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone38);
        org.joda.time.DateTimeField dateTimeField40 = gJChronology39.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField41 = gJChronology39.weekyear();
        org.joda.time.DurationField durationField42 = gJChronology39.centuries();
        org.joda.time.DateTimeField dateTimeField43 = gJChronology39.millisOfDay();
        org.joda.time.DateTimeField dateTimeField44 = gJChronology39.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField45 = gJChronology39.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField46 = gJChronology39.dayOfWeek();
        int int47 = instant1.get(dateTimeField46);
        org.joda.time.ReadableDuration readableDuration48 = null;
        org.joda.time.Instant instant49 = instant1.minus(readableDuration48);
        org.joda.time.Instant instant51 = new org.joda.time.Instant(52L);
        boolean boolean52 = instant51.isEqualNow();
        java.lang.String str53 = instant51.toString();
        java.lang.String str54 = instant51.toString();
        org.joda.time.Instant instant56 = new org.joda.time.Instant(52L);
        boolean boolean57 = instant56.isEqualNow();
        java.lang.String str58 = instant56.toString();
        java.lang.String str59 = instant56.toString();
        org.joda.time.Instant instant62 = instant56.withDurationAdded(115200000L, (int) (short) 1);
        boolean boolean63 = instant62.isBeforeNow();
        boolean boolean64 = instant51.isBefore((org.joda.time.ReadableInstant) instant62);
        org.joda.time.DateTime dateTime65 = instant62.toDateTimeISO();
        org.joda.time.DateTimeFieldType dateTimeFieldType66 = null;
        boolean boolean67 = instant62.isSupported(dateTimeFieldType66);
        boolean boolean68 = instant1.isBefore((org.joda.time.ReadableInstant) instant62);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime18 and instant1", (dateTime18.compareTo(instant1) == 0) == dateTime18.equals(instant1));
    }

    @Test
    public void test1840() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1840");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forTimeZone(timeZone2);
        org.joda.time.chrono.GJChronology gJChronology4 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone3);
        org.joda.time.DateTimeField dateTimeField5 = gJChronology4.millisOfSecond();
        int int6 = instant1.get(dateTimeField5);
        java.util.TimeZone timeZone7 = null;
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forTimeZone(timeZone7);
        org.joda.time.chrono.GJChronology gJChronology9 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone8);
        org.joda.time.DurationField durationField10 = gJChronology9.halfdays();
        java.util.TimeZone timeZone11 = null;
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forTimeZone(timeZone11);
        org.joda.time.chrono.GJChronology gJChronology13 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone12);
        long long17 = dateTimeZone12.convertLocalToUTC((long) (byte) -1, true, 0L);
        boolean boolean19 = dateTimeZone12.equals((java.lang.Object) true);
        org.joda.time.Chronology chronology20 = gJChronology9.withZone(dateTimeZone12);
        org.joda.time.MutableDateTime mutableDateTime21 = instant1.toMutableDateTime(dateTimeZone12);
        java.util.TimeZone timeZone22 = null;
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        org.joda.time.chrono.GJChronology gJChronology24 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone23);
        org.joda.time.DateTimeField dateTimeField25 = gJChronology24.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField26 = gJChronology24.weekyear();
        org.joda.time.DateTimeField dateTimeField27 = gJChronology24.halfdayOfDay();
        org.joda.time.DurationField durationField28 = gJChronology24.years();
        org.joda.time.DurationField durationField29 = gJChronology24.minutes();
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        long long33 = gJChronology24.add(readablePeriod30, (-42L), (int) '4');
        org.joda.time.Chronology chronology34 = gJChronology24.withUTC();
        org.joda.time.DateTimeField dateTimeField35 = gJChronology24.minuteOfHour();
        org.joda.time.DurationField durationField36 = gJChronology24.minutes();
        org.joda.time.DurationField durationField37 = gJChronology24.centuries();
        org.joda.time.DateTimeZone dateTimeZone38 = gJChronology24.getZone();
        org.joda.time.DateTime dateTime39 = instant1.toDateTime((org.joda.time.Chronology) gJChronology24);
        java.lang.String str40 = dateTime39.toString();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and mutableDateTime21", (instant1.compareTo(mutableDateTime21) == 0) == instant1.equals(mutableDateTime21));
    }

    @Test
    public void test1841() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1841");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = gJChronology2.halfdays();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.millisOfDay();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.minuteOfDay();
        org.joda.time.DurationField durationField6 = gJChronology2.centuries();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology2.dayOfYear();
        java.lang.String str8 = gJChronology2.toString();
        org.joda.time.DateTimeField dateTimeField9 = gJChronology2.dayOfYear();
        org.joda.time.DateTimeField dateTimeField10 = gJChronology2.dayOfMonth();
        org.joda.time.DurationField durationField11 = gJChronology2.years();
        org.joda.time.DateTimeField dateTimeField12 = gJChronology2.minuteOfHour();
        org.joda.time.DurationField durationField13 = gJChronology2.halfdays();
        org.joda.time.DateTimeField dateTimeField14 = gJChronology2.yearOfCentury();
        java.util.TimeZone timeZone15 = null;
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forTimeZone(timeZone15);
        org.joda.time.chrono.GJChronology gJChronology17 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone16);
        long long21 = dateTimeZone16.convertLocalToUTC((long) (byte) -1, true, 0L);
        boolean boolean23 = dateTimeZone16.equals((java.lang.Object) true);
        org.joda.time.chrono.GJChronology gJChronology24 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone16);
        org.joda.time.DateTimeField dateTimeField25 = gJChronology24.weekyear();
        org.joda.time.DateTimeField dateTimeField26 = gJChronology24.era();
        org.joda.time.DateTimeZone dateTimeZone27 = gJChronology24.getZone();
        org.joda.time.Chronology chronology28 = gJChronology2.withZone(dateTimeZone27);
        org.joda.time.DateTimeZone dateTimeZone29 = gJChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField30 = gJChronology2.clockhourOfHalfday();
        org.joda.time.DurationField durationField31 = gJChronology2.weekyears();
        org.joda.time.DateTimeField dateTimeField32 = gJChronology2.dayOfYear();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on durationField11 and durationField31", (durationField11.compareTo(durationField31) == 0) == durationField11.equals(durationField31));
    }

    @Test
    public void test1842() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1842");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        boolean boolean2 = instant1.isEqualNow();
        java.lang.String str3 = instant1.toString();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.MutableDateTime mutableDateTime5 = instant1.toMutableDateTime(chronology4);
        org.joda.time.MutableDateTime mutableDateTime6 = instant1.toMutableDateTime();
        org.joda.time.MutableDateTime mutableDateTime7 = instant1.toMutableDateTime();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = null;
        java.lang.String str9 = instant1.toString(dateTimeFormatter8);
        org.joda.time.Instant instant11 = instant1.plus(60000L);
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.Instant instant13 = instant1.minus(readableDuration12);
        org.joda.time.Instant instant15 = new org.joda.time.Instant((-2246399965L));
        org.joda.time.DateTime dateTime16 = instant15.toDateTimeISO();
        org.joda.time.Instant instant18 = new org.joda.time.Instant((java.lang.Object) 3732479999999948L);
        boolean boolean19 = instant15.equals((java.lang.Object) instant18);
        org.joda.time.Instant instant20 = instant15.toInstant();
        boolean boolean21 = instant13.isAfter((org.joda.time.ReadableInstant) instant20);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant13 and mutableDateTime5", (instant13.compareTo(mutableDateTime5) == 0) == instant13.equals(mutableDateTime5));
    }

    @Test
    public void test1843() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1843");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = gJChronology2.halfdays();
        long long7 = gJChronology2.add((long) 'a', (-1L), (int) (short) 0);
        org.joda.time.DateTimeField dateTimeField8 = gJChronology2.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField9 = gJChronology2.secondOfMinute();
        org.joda.time.Instant instant11 = new org.joda.time.Instant(52L);
        boolean boolean12 = instant11.isEqualNow();
        org.joda.time.ReadableDuration readableDuration13 = null;
        org.joda.time.Instant instant14 = instant11.plus(readableDuration13);
        boolean boolean15 = gJChronology2.equals((java.lang.Object) instant11);
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = null;
        boolean boolean17 = instant11.isSupported(dateTimeFieldType16);
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = null;
        boolean boolean19 = instant11.isSupported(dateTimeFieldType18);
        org.joda.time.DateTimeZone dateTimeZone20 = instant11.getZone();
        long long21 = instant11.getMillis();
        org.joda.time.Instant instant22 = instant11.toInstant();
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forID("+00:01:58.277");
        int int26 = dateTimeZone24.getStandardOffset((long) 1155627);
        org.joda.time.MutableDateTime mutableDateTime27 = instant22.toMutableDateTime(dateTimeZone24);
        org.joda.time.Instant instant29 = instant22.withMillis(2228879896L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant22 and mutableDateTime27", (instant22.compareTo(mutableDateTime27) == 0) == instant22.equals(mutableDateTime27));
    }

    @Test
    public void test1844() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1844");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        boolean boolean2 = instant1.isEqualNow();
        org.joda.time.ReadableDuration readableDuration3 = null;
        org.joda.time.Instant instant4 = instant1.plus(readableDuration3);
        boolean boolean6 = instant4.equals((java.lang.Object) ' ');
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(1, 10);
        java.util.TimeZone timeZone10 = null;
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forTimeZone(timeZone10);
        long long13 = dateTimeZone9.getMillisKeepLocal(dateTimeZone11, 4320000000L);
        boolean boolean14 = instant4.equals((java.lang.Object) 4320000000L);
        org.joda.time.Instant instant16 = instant4.withMillis(10L);
        java.util.TimeZone timeZone17 = null;
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forTimeZone(timeZone17);
        org.joda.time.chrono.GJChronology gJChronology19 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone18);
        long long23 = dateTimeZone18.convertLocalToUTC((long) (byte) -1, true, 0L);
        boolean boolean25 = dateTimeZone18.equals((java.lang.Object) true);
        org.joda.time.chrono.GJChronology gJChronology26 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone18);
        org.joda.time.DateTimeField dateTimeField27 = gJChronology26.weekyear();
        org.joda.time.DateTimeField dateTimeField28 = gJChronology26.era();
        int int29 = instant16.get(dateTimeField28);
        org.joda.time.Instant instant31 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone32 = null;
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.forTimeZone(timeZone32);
        org.joda.time.chrono.GJChronology gJChronology34 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone33);
        org.joda.time.DateTimeField dateTimeField35 = gJChronology34.millisOfSecond();
        int int36 = instant31.get(dateTimeField35);
        org.joda.time.Instant instant38 = instant31.plus(0L);
        org.joda.time.Instant instant39 = instant38.toInstant();
        org.joda.time.Instant instant41 = new org.joda.time.Instant(52L);
        boolean boolean42 = instant41.isEqualNow();
        java.lang.String str43 = instant41.toString();
        java.lang.String str44 = instant41.toString();
        org.joda.time.Instant instant46 = new org.joda.time.Instant(52L);
        boolean boolean47 = instant46.isEqualNow();
        org.joda.time.ReadableDuration readableDuration48 = null;
        org.joda.time.Instant instant49 = instant46.plus(readableDuration48);
        boolean boolean50 = instant41.isBefore((org.joda.time.ReadableInstant) instant49);
        org.joda.time.Instant instant52 = instant41.minus((long) 0);
        int int53 = instant38.compareTo((org.joda.time.ReadableInstant) instant41);
        org.joda.time.Instant instant56 = instant41.withDurationAdded((long) (short) 100, 70);
        org.joda.time.MutableDateTime mutableDateTime57 = instant56.toMutableDateTimeISO();
        boolean boolean58 = instant16.isBefore((org.joda.time.ReadableInstant) instant56);
        org.joda.time.MutableDateTime mutableDateTime59 = instant16.toMutableDateTime();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant56 and mutableDateTime57", (instant56.compareTo(mutableDateTime57) == 0) == instant56.equals(mutableDateTime57));
    }

    @Test
    public void test1845() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1845");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((-64983772799999L));
        java.util.Date date2 = instant1.toDate();
        org.joda.time.Instant instant3 = instant1.toInstant();
        org.joda.time.DateTime dateTime4 = instant3.toDateTime();
        org.joda.time.Instant instant5 = instant3.toInstant();
        java.util.TimeZone timeZone6 = null;
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forTimeZone(timeZone6);
        java.lang.String str9 = dateTimeZone7.getNameKey((long) 100);
        boolean boolean10 = dateTimeZone7.isFixed();
        org.joda.time.chrono.GJChronology gJChronology11 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone7);
        long long13 = dateTimeZone7.convertUTCToLocal(5200L);
        java.util.Locale.LanguageRange[] languageRangeArray14 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList15 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList15, languageRangeArray14);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap17 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList18 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList15, strMap17);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap19 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList20 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList18, strMap19);
        java.util.Locale.LanguageRange[] languageRangeArray21 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList22 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList22, languageRangeArray21);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap24 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList25 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList22, strMap24);
        java.lang.String[] strArray29 = new java.lang.String[] { "English", "English", "hi!" };
        java.util.ArrayList<java.lang.String> strList30 = new java.util.ArrayList<java.lang.String>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList30, strArray29);
        java.util.List<java.lang.String> strList32 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList22, (java.util.Collection<java.lang.String>) strList30);
        java.util.Locale.FilteringMode filteringMode33 = null;
        java.util.List<java.lang.String> strList34 = java.util.Locale.filterTags(languageRangeList20, (java.util.Collection<java.lang.String>) strList30, filteringMode33);
        java.util.Locale.LanguageRange[] languageRangeArray35 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList36 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList36, languageRangeArray35);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap38 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList39 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList36, strMap38);
        java.util.Locale.LanguageRange[] languageRangeArray40 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList41 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList41, languageRangeArray40);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap43 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList44 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList41, strMap43);
        java.lang.String[] strArray48 = new java.lang.String[] { "English", "English", "hi!" };
        java.util.ArrayList<java.lang.String> strList49 = new java.util.ArrayList<java.lang.String>();
        boolean boolean50 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList49, strArray48);
        java.util.List<java.lang.String> strList51 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList41, (java.util.Collection<java.lang.String>) strList49);
        java.util.List<java.lang.String> strList52 = java.util.Locale.filterTags(languageRangeList39, (java.util.Collection<java.lang.String>) strList51);
        java.util.List<java.lang.String> strList53 = java.util.Locale.filterTags(languageRangeList20, (java.util.Collection<java.lang.String>) strList52);
        java.util.Locale.LanguageRange[] languageRangeArray54 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList55 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean56 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList55, languageRangeArray54);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap57 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList58 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList55, strMap57);
        java.lang.String[] strArray62 = new java.lang.String[] { "English", "English", "hi!" };
        java.util.ArrayList<java.lang.String> strList63 = new java.util.ArrayList<java.lang.String>();
        boolean boolean64 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList63, strArray62);
        java.util.List<java.lang.String> strList65 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList55, (java.util.Collection<java.lang.String>) strList63);
        java.util.List<java.lang.String> strList66 = java.util.Locale.filterTags(languageRangeList20, (java.util.Collection<java.lang.String>) strList65);
        boolean boolean67 = dateTimeZone7.equals((java.lang.Object) languageRangeList20);
        java.util.Locale locale69 = java.util.Locale.CANADA;
        java.lang.String str70 = locale69.getISO3Language();
        java.lang.String str71 = dateTimeZone7.getShortName((long) 'a', locale69);
        java.util.TimeZone timeZone72 = null;
        org.joda.time.DateTimeZone dateTimeZone73 = org.joda.time.DateTimeZone.forTimeZone(timeZone72);
        org.joda.time.chrono.GJChronology gJChronology74 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone73);
        org.joda.time.DurationField durationField75 = gJChronology74.halfdays();
        long long79 = gJChronology74.add((long) 'a', (-1L), (int) (short) 0);
        long long83 = gJChronology74.add((long) (byte) 0, (long) '4', 100);
        org.joda.time.DateTimeField dateTimeField84 = gJChronology74.minuteOfHour();
        org.joda.time.DurationField durationField85 = gJChronology74.hours();
        org.joda.time.DateTimeField dateTimeField86 = gJChronology74.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField87 = gJChronology74.millisOfSecond();
        org.joda.time.DurationField durationField88 = gJChronology74.months();
        org.joda.time.DurationField durationField89 = gJChronology74.hours();
        org.joda.time.DateTimeField dateTimeField90 = gJChronology74.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField91 = gJChronology74.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField92 = gJChronology74.dayOfYear();
        org.joda.time.Instant instant93 = gJChronology74.getGregorianCutover();
        int int94 = dateTimeZone7.getOffset((org.joda.time.ReadableInstant) instant93);
        org.joda.time.chrono.GJChronology gJChronology95 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone7);
        int int97 = dateTimeZone7.getStandardOffset(3060979200000L);
        org.joda.time.DateTime dateTime98 = instant5.toDateTime(dateTimeZone7);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant5 and dateTime4", (instant5.compareTo(dateTime4) == 0) == instant5.equals(dateTime4));
    }

    @Test
    public void test1846() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1846");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((-64983772799999L));
        java.util.Date date2 = instant1.toDate();
        org.joda.time.Instant instant3 = instant1.toInstant();
        org.joda.time.DateTime dateTime4 = instant3.toDateTime();
        org.joda.time.Instant instant5 = org.joda.time.Instant.now();
        org.joda.time.Instant instant8 = instant5.withDurationAdded(306102434400000L, (int) (short) 100);
        java.util.TimeZone timeZone9 = null;
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forTimeZone(timeZone9);
        org.joda.time.chrono.GJChronology gJChronology11 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone10);
        long long15 = dateTimeZone10.convertLocalToUTC((long) (byte) -1, true, 0L);
        boolean boolean17 = dateTimeZone10.equals((java.lang.Object) true);
        long long19 = dateTimeZone10.nextTransition((long) '4');
        java.lang.String str21 = dateTimeZone10.getShortName(432000001L);
        java.util.TimeZone timeZone22 = dateTimeZone10.toTimeZone();
        org.joda.time.DateTime dateTime23 = instant5.toDateTime(dateTimeZone10);
        java.lang.String str24 = dateTime23.toString();
        boolean boolean25 = dateTime4.isBefore((org.joda.time.ReadableInstant) dateTime23);
        java.util.Locale locale29 = new java.util.Locale("de", "1969-12-31T23:59:59.948Z", "zh-EN");
        java.lang.String str30 = locale29.getVariant();
        java.lang.String str31 = locale29.getDisplayScript();
        boolean boolean32 = dateTime4.equals((java.lang.Object) locale29);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant5 and dateTime23", (instant5.compareTo(dateTime23) == 0) == instant5.equals(dateTime23));
    }

    @Test
    public void test1847() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1847");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((-64983772799999L));
        java.util.Date date2 = instant1.toDate();
        org.joda.time.ReadableDuration readableDuration3 = null;
        org.joda.time.Instant instant4 = instant1.minus(readableDuration3);
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.Instant instant6 = instant4.minus(readableDuration5);
        org.joda.time.DateTime dateTime7 = instant4.toDateTimeISO();
        org.joda.time.Instant instant10 = instant4.withDurationAdded((-498048000L), 52);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant4 and dateTime7", (instant4.compareTo(dateTime7) == 0) == instant4.equals(dateTime7));
    }

    @Test
    public void test1848() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1848");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = gJChronology2.halfdays();
        long long7 = gJChronology2.add((long) 'a', (-1L), (int) (short) 0);
        boolean boolean9 = gJChronology2.equals((java.lang.Object) 0);
        org.joda.time.DateTimeField dateTimeField10 = gJChronology2.dayOfWeek();
        org.joda.time.DurationField durationField11 = gJChronology2.days();
        org.joda.time.DateTimeField dateTimeField12 = gJChronology2.weekyearOfCentury();
        org.joda.time.DurationField durationField13 = gJChronology2.weekyears();
        org.joda.time.DurationField durationField14 = gJChronology2.weeks();
        org.joda.time.DurationField durationField15 = gJChronology2.eras();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField15, durationField3, and durationField11", !(durationField15.compareTo(durationField3) == 0) || (Math.signum(durationField15.compareTo(durationField11)) == Math.signum(durationField3.compareTo(durationField11))));
    }

    @Test
    public void test1849() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1849");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = gJChronology2.halfdays();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.millisOfDay();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.minuteOfDay();
        org.joda.time.DurationField durationField6 = gJChronology2.centuries();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology2.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField8 = gJChronology2.year();
        org.joda.time.DurationField durationField9 = gJChronology2.weekyears();
        java.lang.String str10 = gJChronology2.toString();
        org.joda.time.DateTimeField dateTimeField11 = gJChronology2.hourOfHalfday();
        org.joda.time.Chronology chronology12 = gJChronology2.withUTC();
        org.joda.time.DurationField durationField13 = gJChronology2.years();
        org.joda.time.DateTimeZone dateTimeZone14 = gJChronology2.getZone();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on durationField9 and durationField13", (durationField9.compareTo(durationField13) == 0) == durationField9.equals(durationField13));
    }

    @Test
    public void test1850() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1850");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField3 = gJChronology2.era();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.centuryOfEra();
        org.joda.time.DurationField durationField5 = gJChronology2.hours();
        org.joda.time.DateTimeZone dateTimeZone6 = gJChronology2.getZone();
        java.lang.String str7 = dateTimeZone6.getID();
        org.joda.time.chrono.GJChronology gJChronology8 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone6);
        org.joda.time.LocalDateTime localDateTime9 = null;
        boolean boolean10 = dateTimeZone6.isLocalDateTimeGap(localDateTime9);
        java.util.TimeZone timeZone11 = dateTimeZone6.toTimeZone();
        long long13 = dateTimeZone6.convertUTCToLocal(80740740000L);
        long long16 = dateTimeZone6.convertLocalToUTC((long) 135, true);
        org.joda.time.Instant instant18 = new org.joda.time.Instant(52L);
        boolean boolean19 = instant18.isEqualNow();
        org.joda.time.ReadableDuration readableDuration20 = null;
        org.joda.time.Instant instant21 = instant18.plus(readableDuration20);
        org.joda.time.Instant instant23 = instant18.withMillis((long) 4);
        boolean boolean24 = instant23.isBeforeNow();
        boolean boolean26 = instant23.isBefore(5185792L);
        org.joda.time.MutableDateTime mutableDateTime27 = instant23.toMutableDateTime();
        org.joda.time.Instant instant28 = instant23.toInstant();
        org.joda.time.Instant instant31 = instant23.withDurationAdded((long) 1, 117599);
        org.joda.time.chrono.GJChronology gJChronology32 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone6, (org.joda.time.ReadableInstant) instant23);
        org.joda.time.Instant instant34 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone35 = null;
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.forTimeZone(timeZone35);
        org.joda.time.chrono.GJChronology gJChronology37 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone36);
        org.joda.time.DateTimeField dateTimeField38 = gJChronology37.millisOfSecond();
        int int39 = instant34.get(dateTimeField38);
        org.joda.time.Instant instant41 = instant34.plus(0L);
        org.joda.time.Instant instant42 = instant41.toInstant();
        org.joda.time.Instant instant44 = new org.joda.time.Instant(52L);
        boolean boolean45 = instant44.isEqualNow();
        java.lang.String str46 = instant44.toString();
        java.lang.String str47 = instant44.toString();
        org.joda.time.Instant instant49 = new org.joda.time.Instant(52L);
        boolean boolean50 = instant49.isEqualNow();
        org.joda.time.ReadableDuration readableDuration51 = null;
        org.joda.time.Instant instant52 = instant49.plus(readableDuration51);
        boolean boolean53 = instant44.isBefore((org.joda.time.ReadableInstant) instant52);
        org.joda.time.Instant instant55 = instant44.minus((long) 0);
        int int56 = instant41.compareTo((org.joda.time.ReadableInstant) instant44);
        org.joda.time.DateTime dateTime57 = instant41.toDateTimeISO();
        org.joda.time.Instant instant59 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone60 = null;
        org.joda.time.DateTimeZone dateTimeZone61 = org.joda.time.DateTimeZone.forTimeZone(timeZone60);
        org.joda.time.chrono.GJChronology gJChronology62 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone61);
        org.joda.time.DateTimeField dateTimeField63 = gJChronology62.millisOfSecond();
        int int64 = instant59.get(dateTimeField63);
        org.joda.time.Instant instant66 = instant59.plus(0L);
        boolean boolean67 = dateTime57.isAfter((org.joda.time.ReadableInstant) instant59);
        boolean boolean68 = dateTime57.isAfterNow();
        java.lang.String str69 = dateTime57.toString();
        org.joda.time.chrono.GJChronology gJChronology70 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone6, (org.joda.time.ReadableInstant) dateTime57);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant23 and mutableDateTime27", (instant23.compareTo(mutableDateTime27) == 0) == instant23.equals(mutableDateTime27));
    }

    @Test
    public void test1851() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1851");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = gJChronology2.halfdays();
        long long7 = gJChronology2.add(0L, (long) (short) -1, (int) '4');
        java.util.TimeZone timeZone8 = null;
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forTimeZone(timeZone8);
        org.joda.time.chrono.GJChronology gJChronology10 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone9);
        org.joda.time.DurationField durationField11 = gJChronology10.halfdays();
        org.joda.time.DateTimeField dateTimeField12 = gJChronology10.millisOfDay();
        org.joda.time.DateTimeField dateTimeField13 = gJChronology10.minuteOfDay();
        org.joda.time.DurationField durationField14 = gJChronology10.centuries();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology10.dayOfYear();
        java.lang.String str16 = gJChronology10.toString();
        org.joda.time.DurationField durationField17 = gJChronology10.years();
        org.joda.time.DateTimeField dateTimeField18 = gJChronology10.yearOfEra();
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(0, (int) (short) 10);
        org.joda.time.Chronology chronology22 = gJChronology10.withZone(dateTimeZone21);
        org.joda.time.Chronology chronology23 = gJChronology2.withZone(dateTimeZone21);
        org.joda.time.DurationField durationField24 = gJChronology2.halfdays();
        org.joda.time.Instant instant25 = gJChronology2.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration26 = null;
        org.joda.time.Instant instant27 = instant25.plus(readableDuration26);
        org.joda.time.ReadableDuration readableDuration28 = null;
        org.joda.time.Instant instant30 = instant27.withDurationAdded(readableDuration28, 46);
        java.util.TimeZone timeZone31 = null;
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.forTimeZone(timeZone31);
        java.lang.String str34 = dateTimeZone32.getNameKey((long) 100);
        boolean boolean35 = dateTimeZone32.isFixed();
        java.lang.String str36 = dateTimeZone32.toString();
        boolean boolean38 = dateTimeZone32.isStandardOffset((long) (byte) 0);
        java.util.TimeZone timeZone39 = null;
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.forTimeZone(timeZone39);
        org.joda.time.chrono.GJChronology gJChronology41 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone40);
        org.joda.time.DurationField durationField42 = gJChronology41.halfdays();
        org.joda.time.DateTimeField dateTimeField43 = gJChronology41.millisOfDay();
        org.joda.time.DateTimeField dateTimeField44 = gJChronology41.minuteOfDay();
        org.joda.time.DurationField durationField45 = gJChronology41.centuries();
        org.joda.time.DateTimeField dateTimeField46 = gJChronology41.dayOfYear();
        org.joda.time.DateTimeField dateTimeField47 = gJChronology41.weekyearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone50 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(1, 10);
        java.util.TimeZone timeZone51 = null;
        org.joda.time.DateTimeZone dateTimeZone52 = org.joda.time.DateTimeZone.forTimeZone(timeZone51);
        long long54 = dateTimeZone50.getMillisKeepLocal(dateTimeZone52, 4320000000L);
        java.util.TimeZone timeZone55 = null;
        org.joda.time.DateTimeZone dateTimeZone56 = org.joda.time.DateTimeZone.forTimeZone(timeZone55);
        java.lang.String str58 = dateTimeZone56.getNameKey((long) 100);
        boolean boolean59 = dateTimeZone56.isFixed();
        java.lang.String str60 = dateTimeZone56.toString();
        java.lang.String str61 = dateTimeZone56.getID();
        long long63 = dateTimeZone52.getMillisKeepLocal(dateTimeZone56, (long) (byte) -1);
        org.joda.time.Chronology chronology64 = gJChronology41.withZone(dateTimeZone56);
        org.joda.time.Instant instant65 = gJChronology41.getGregorianCutover();
        int int66 = dateTimeZone32.getOffset((org.joda.time.ReadableInstant) instant65);
        int int67 = instant27.compareTo((org.joda.time.ReadableInstant) instant65);
        org.joda.time.Instant instant69 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone70 = null;
        org.joda.time.DateTimeZone dateTimeZone71 = org.joda.time.DateTimeZone.forTimeZone(timeZone70);
        org.joda.time.chrono.GJChronology gJChronology72 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone71);
        org.joda.time.DateTimeField dateTimeField73 = gJChronology72.millisOfSecond();
        int int74 = instant69.get(dateTimeField73);
        boolean boolean75 = instant69.isEqualNow();
        org.joda.time.DateTime dateTime76 = instant69.toDateTime();
        org.joda.time.Instant instant79 = instant69.withDurationAdded((long) 1431201, 1970);
        org.joda.time.ReadableDuration readableDuration80 = null;
        org.joda.time.Instant instant82 = instant79.withDurationAdded(readableDuration80, 432000000);
        boolean boolean83 = instant65.isAfter((org.joda.time.ReadableInstant) instant79);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant69 and dateTime76", (instant69.compareTo(dateTime76) == 0) == instant69.equals(dateTime76));
    }

    @Test
    public void test1852() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1852");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forTimeZone(timeZone2);
        org.joda.time.chrono.GJChronology gJChronology4 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone3);
        org.joda.time.DateTimeField dateTimeField5 = gJChronology4.millisOfSecond();
        int int6 = instant1.get(dateTimeField5);
        org.joda.time.Instant instant8 = instant1.plus(0L);
        java.util.TimeZone timeZone9 = null;
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forTimeZone(timeZone9);
        org.joda.time.chrono.GJChronology gJChronology11 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone10);
        org.joda.time.DurationField durationField12 = gJChronology11.halfdays();
        org.joda.time.Chronology chronology13 = gJChronology11.withUTC();
        java.lang.String str14 = gJChronology11.toString();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology11.hourOfHalfday();
        int int16 = instant1.get(dateTimeField15);
        org.joda.time.Instant instant18 = new org.joda.time.Instant(52L);
        boolean boolean19 = instant18.isEqualNow();
        org.joda.time.ReadableDuration readableDuration20 = null;
        org.joda.time.Instant instant21 = instant18.plus(readableDuration20);
        org.joda.time.Instant instant23 = new org.joda.time.Instant(52L);
        org.joda.time.Instant instant25 = instant23.withMillis((long) 'u');
        boolean boolean26 = instant18.isBefore((org.joda.time.ReadableInstant) instant23);
        boolean boolean27 = instant1.isEqual((org.joda.time.ReadableInstant) instant23);
        org.joda.time.Instant instant29 = instant1.plus(3732480000000000L);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter30 = null;
        java.lang.String str31 = instant29.toString(dateTimeFormatter30);
        org.joda.time.MutableDateTime mutableDateTime32 = instant29.toMutableDateTime();
        org.joda.time.Instant instant33 = instant29.toInstant();
        java.util.TimeZone timeZone34 = null;
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.forTimeZone(timeZone34);
        org.joda.time.chrono.GJChronology gJChronology36 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone35);
        org.joda.time.DurationField durationField37 = gJChronology36.years();
        java.util.TimeZone timeZone38 = null;
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.forTimeZone(timeZone38);
        org.joda.time.chrono.GJChronology gJChronology40 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone39);
        org.joda.time.DurationField durationField41 = gJChronology40.halfdays();
        org.joda.time.DateTimeField dateTimeField42 = gJChronology40.millisOfDay();
        org.joda.time.DateTimeField dateTimeField43 = gJChronology40.minuteOfDay();
        org.joda.time.DurationField durationField44 = gJChronology40.centuries();
        java.util.TimeZone timeZone45 = null;
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.forTimeZone(timeZone45);
        org.joda.time.chrono.GJChronology gJChronology47 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone46);
        org.joda.time.DurationField durationField48 = gJChronology47.halfdays();
        long long51 = durationField48.add((long) 100, 100L);
        boolean boolean52 = durationField48.isPrecise();
        int int53 = durationField44.compareTo(durationField48);
        boolean boolean54 = gJChronology36.equals((java.lang.Object) durationField44);
        org.joda.time.DateTimeField dateTimeField55 = gJChronology36.dayOfYear();
        org.joda.time.DateTimeField dateTimeField56 = gJChronology36.clockhourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone57 = gJChronology36.getZone();
        org.joda.time.MutableDateTime mutableDateTime58 = instant29.toMutableDateTime(dateTimeZone57);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime32 and instant29", (mutableDateTime32.compareTo(instant29) == 0) == mutableDateTime32.equals(instant29));
    }

    @Test
    public void test1853() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1853");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        boolean boolean2 = instant1.isEqualNow();
        org.joda.time.Instant instant4 = new org.joda.time.Instant(52L);
        org.joda.time.Instant instant6 = instant4.withMillis((long) 'u');
        boolean boolean7 = instant1.isAfter((org.joda.time.ReadableInstant) instant4);
        org.joda.time.Instant instant10 = instant1.withDurationAdded(747221751619200000L, (int) (byte) 0);
        org.joda.time.MutableDateTime mutableDateTime11 = instant1.toMutableDateTime();
        java.util.TimeZone timeZone12 = null;
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forTimeZone(timeZone12);
        org.joda.time.chrono.GJChronology gJChronology14 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone13);
        org.joda.time.DurationField durationField15 = gJChronology14.halfdays();
        org.joda.time.DateTimeField dateTimeField16 = gJChronology14.millisOfDay();
        org.joda.time.DateTimeField dateTimeField17 = gJChronology14.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField18 = gJChronology14.weekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime19 = mutableDateTime11.toMutableDateTime((org.joda.time.Chronology) gJChronology14);
        org.joda.time.Instant instant21 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone22 = null;
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        org.joda.time.chrono.GJChronology gJChronology24 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone23);
        org.joda.time.DateTimeField dateTimeField25 = gJChronology24.millisOfSecond();
        int int26 = instant21.get(dateTimeField25);
        org.joda.time.Instant instant28 = instant21.plus(0L);
        org.joda.time.Instant instant29 = instant28.toInstant();
        org.joda.time.Instant instant31 = new org.joda.time.Instant(52L);
        boolean boolean32 = instant31.isEqualNow();
        java.lang.String str33 = instant31.toString();
        java.lang.String str34 = instant31.toString();
        org.joda.time.Instant instant36 = new org.joda.time.Instant(52L);
        boolean boolean37 = instant36.isEqualNow();
        org.joda.time.ReadableDuration readableDuration38 = null;
        org.joda.time.Instant instant39 = instant36.plus(readableDuration38);
        boolean boolean40 = instant31.isBefore((org.joda.time.ReadableInstant) instant39);
        org.joda.time.Instant instant42 = instant31.minus((long) 0);
        int int43 = instant28.compareTo((org.joda.time.ReadableInstant) instant31);
        org.joda.time.Instant instant46 = instant31.withDurationAdded((long) (short) 100, 70);
        org.joda.time.ReadableInstant readableInstant47 = null;
        boolean boolean48 = instant31.isBefore(readableInstant47);
        org.joda.time.ReadableDuration readableDuration49 = null;
        org.joda.time.Instant instant51 = instant31.withDurationAdded(readableDuration49, 10);
        org.joda.time.Instant instant52 = instant31.toInstant();
        org.joda.time.Instant instant54 = instant31.withMillis((long) 7816188);
        java.util.TimeZone timeZone55 = null;
        org.joda.time.DateTimeZone dateTimeZone56 = org.joda.time.DateTimeZone.forTimeZone(timeZone55);
        java.lang.String str58 = dateTimeZone56.getNameKey((long) 100);
        boolean boolean59 = dateTimeZone56.isFixed();
        org.joda.time.chrono.GJChronology gJChronology60 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone56);
        int int61 = gJChronology60.getMinimumDaysInFirstWeek();
        org.joda.time.DateTimeField dateTimeField62 = gJChronology60.clockhourOfDay();
        org.joda.time.DurationField durationField63 = gJChronology60.seconds();
        org.joda.time.DateTimeField dateTimeField64 = gJChronology60.era();
        org.joda.time.DateTimeField dateTimeField65 = gJChronology60.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField66 = gJChronology60.secondOfMinute();
        int int67 = instant31.get(dateTimeField66);
        int int68 = mutableDateTime19.compareTo((org.joda.time.ReadableInstant) instant31);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and mutableDateTime11", (instant1.compareTo(mutableDateTime11) == 0) == instant1.equals(mutableDateTime11));
    }

    @Test
    public void test1854() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1854");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        boolean boolean2 = instant1.isEqualNow();
        java.lang.String str3 = instant1.toString();
        java.lang.String str4 = instant1.toString();
        org.joda.time.Instant instant7 = instant1.withDurationAdded(115200000L, (int) (short) 1);
        org.joda.time.Instant instant9 = new org.joda.time.Instant(52L);
        boolean boolean10 = instant9.isEqualNow();
        java.lang.String str11 = instant9.toString();
        org.joda.time.Instant instant13 = new org.joda.time.Instant(52L);
        boolean boolean14 = instant13.isEqualNow();
        java.lang.String str15 = instant13.toString();
        java.lang.String str16 = instant13.toString();
        org.joda.time.Instant instant19 = instant13.withDurationAdded(115200000L, (int) (short) 1);
        int int20 = instant9.compareTo((org.joda.time.ReadableInstant) instant13);
        int int21 = instant7.compareTo((org.joda.time.ReadableInstant) instant9);
        long long22 = instant7.getMillis();
        java.util.TimeZone timeZone23 = null;
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forTimeZone(timeZone23);
        org.joda.time.chrono.GJChronology gJChronology25 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone24);
        org.joda.time.DateTimeField dateTimeField26 = gJChronology25.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField27 = gJChronology25.weekyear();
        org.joda.time.DurationField durationField28 = gJChronology25.centuries();
        org.joda.time.DateTimeField dateTimeField29 = gJChronology25.millisOfDay();
        org.joda.time.DateTimeField dateTimeField30 = gJChronology25.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField31 = gJChronology25.yearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone32 = gJChronology25.getZone();
        java.util.TimeZone timeZone33 = dateTimeZone32.toTimeZone();
        org.joda.time.LocalDateTime localDateTime34 = null;
        boolean boolean35 = dateTimeZone32.isLocalDateTimeGap(localDateTime34);
        org.joda.time.DateTime dateTime36 = instant7.toDateTime(dateTimeZone32);
        org.joda.time.Instant instant38 = instant7.withMillis(61825636800000L);
        org.joda.time.DateTime dateTime39 = instant38.toDateTime();
        boolean boolean41 = dateTime39.isBefore(454178626800000L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant7 and dateTime36", (instant7.compareTo(dateTime36) == 0) == instant7.equals(dateTime36));
    }

    @Test
    public void test1855() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1855");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forTimeZone(timeZone2);
        org.joda.time.chrono.GJChronology gJChronology4 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone3);
        org.joda.time.DateTimeField dateTimeField5 = gJChronology4.millisOfSecond();
        int int6 = instant1.get(dateTimeField5);
        org.joda.time.Instant instant8 = instant1.plus(0L);
        java.util.TimeZone timeZone9 = null;
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forTimeZone(timeZone9);
        org.joda.time.chrono.GJChronology gJChronology11 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone10);
        org.joda.time.DurationField durationField12 = gJChronology11.halfdays();
        org.joda.time.Chronology chronology13 = gJChronology11.withUTC();
        java.lang.String str14 = gJChronology11.toString();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology11.hourOfHalfday();
        int int16 = instant1.get(dateTimeField15);
        org.joda.time.Instant instant18 = new org.joda.time.Instant(52L);
        boolean boolean19 = instant18.isEqualNow();
        java.lang.String str20 = instant18.toString();
        org.joda.time.Instant instant22 = new org.joda.time.Instant(52L);
        boolean boolean23 = instant22.isEqualNow();
        java.lang.String str24 = instant22.toString();
        java.lang.String str25 = instant22.toString();
        org.joda.time.Instant instant28 = instant22.withDurationAdded(115200000L, (int) (short) 1);
        int int29 = instant18.compareTo((org.joda.time.ReadableInstant) instant22);
        org.joda.time.Instant instant31 = new org.joda.time.Instant(52L);
        boolean boolean32 = instant31.isEqualNow();
        org.joda.time.ReadableDuration readableDuration33 = null;
        org.joda.time.Instant instant34 = instant31.plus(readableDuration33);
        boolean boolean36 = instant34.equals((java.lang.Object) ' ');
        boolean boolean37 = instant22.isAfter((org.joda.time.ReadableInstant) instant34);
        int int38 = instant1.compareTo((org.joda.time.ReadableInstant) instant22);
        org.joda.time.DateTime dateTime39 = instant1.toDateTimeISO();
        org.joda.time.DateTimeFieldType dateTimeFieldType40 = null;
        boolean boolean41 = dateTime39.isSupported(dateTimeFieldType40);
        org.joda.time.Instant instant42 = org.joda.time.Instant.now();
        boolean boolean44 = instant42.isBefore(0L);
        org.joda.time.Instant instant46 = new org.joda.time.Instant(52L);
        org.joda.time.Instant instant48 = instant46.withMillis((long) 'u');
        java.util.TimeZone timeZone49 = null;
        org.joda.time.DateTimeZone dateTimeZone50 = org.joda.time.DateTimeZone.forTimeZone(timeZone49);
        org.joda.time.chrono.GJChronology gJChronology51 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone50);
        org.joda.time.DurationField durationField52 = gJChronology51.halfdays();
        long long56 = gJChronology51.add((long) 'a', (-1L), (int) (short) 0);
        boolean boolean58 = gJChronology51.equals((java.lang.Object) 0);
        org.joda.time.DateTimeField dateTimeField59 = gJChronology51.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField60 = gJChronology51.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField61 = gJChronology51.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField62 = gJChronology51.clockhourOfHalfday();
        org.joda.time.DateTime dateTime63 = instant46.toDateTime((org.joda.time.Chronology) gJChronology51);
        boolean boolean64 = instant42.isEqual((org.joda.time.ReadableInstant) dateTime63);
        boolean boolean65 = dateTime39.isAfter((org.joda.time.ReadableInstant) dateTime63);
        org.joda.time.Instant instant67 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone68 = null;
        org.joda.time.DateTimeZone dateTimeZone69 = org.joda.time.DateTimeZone.forTimeZone(timeZone68);
        org.joda.time.chrono.GJChronology gJChronology70 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone69);
        org.joda.time.DateTimeField dateTimeField71 = gJChronology70.millisOfSecond();
        int int72 = instant67.get(dateTimeField71);
        boolean boolean73 = instant67.isEqualNow();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter74 = null;
        java.lang.String str75 = instant67.toString(dateTimeFormatter74);
        boolean boolean76 = instant67.isAfterNow();
        org.joda.time.Instant instant77 = instant67.toInstant();
        org.joda.time.Instant instant79 = instant67.plus(1512000000L);
        int int80 = dateTime63.compareTo((org.joda.time.ReadableInstant) instant79);
        java.lang.String str81 = dateTime63.toString();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and dateTime39", (instant1.compareTo(dateTime39) == 0) == instant1.equals(dateTime39));
    }

    @Test
    public void test1856() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1856");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        boolean boolean2 = instant1.isEqualNow();
        java.lang.String str3 = instant1.toString();
        java.lang.String str4 = instant1.toString();
        org.joda.time.Instant instant7 = instant1.withDurationAdded(115200000L, (int) (short) 1);
        org.joda.time.Instant instant9 = new org.joda.time.Instant(52L);
        boolean boolean10 = instant9.isEqualNow();
        java.lang.String str11 = instant9.toString();
        org.joda.time.Instant instant13 = new org.joda.time.Instant(52L);
        boolean boolean14 = instant13.isEqualNow();
        java.lang.String str15 = instant13.toString();
        java.lang.String str16 = instant13.toString();
        org.joda.time.Instant instant19 = instant13.withDurationAdded(115200000L, (int) (short) 1);
        int int20 = instant9.compareTo((org.joda.time.ReadableInstant) instant13);
        int int21 = instant7.compareTo((org.joda.time.ReadableInstant) instant9);
        java.util.TimeZone timeZone22 = null;
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        org.joda.time.chrono.GJChronology gJChronology24 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone23);
        org.joda.time.DurationField durationField25 = gJChronology24.halfdays();
        org.joda.time.DateTimeField dateTimeField26 = gJChronology24.millisOfDay();
        org.joda.time.DateTimeField dateTimeField27 = gJChronology24.minuteOfDay();
        org.joda.time.DurationField durationField28 = gJChronology24.centuries();
        org.joda.time.DateTimeField dateTimeField29 = gJChronology24.yearOfEra();
        org.joda.time.DateTimeField dateTimeField30 = gJChronology24.millisOfDay();
        int int31 = instant7.get(dateTimeField30);
        org.joda.time.ReadableInstant readableInstant32 = null;
        boolean boolean33 = instant7.isBefore(readableInstant32);
        org.joda.time.ReadableDuration readableDuration34 = null;
        org.joda.time.Instant instant35 = instant7.plus(readableDuration34);
        org.joda.time.DateTime dateTime36 = instant7.toDateTimeISO();
        org.joda.time.Instant instant38 = new org.joda.time.Instant((java.lang.Object) 4320000L);
        org.joda.time.Instant instant41 = instant38.withDurationAdded(595728097000L, (-5914428));
        int int42 = dateTime36.compareTo((org.joda.time.ReadableInstant) instant41);
        boolean boolean44 = instant41.isAfter(58979943288000L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant7 and dateTime36", (instant7.compareTo(dateTime36) == 0) == instant7.equals(dateTime36));
    }

    @Test
    public void test1857() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1857");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forTimeZone(timeZone2);
        org.joda.time.chrono.GJChronology gJChronology4 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone3);
        org.joda.time.DateTimeField dateTimeField5 = gJChronology4.millisOfSecond();
        int int6 = instant1.get(dateTimeField5);
        org.joda.time.Instant instant8 = instant1.plus(0L);
        java.util.TimeZone timeZone9 = null;
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forTimeZone(timeZone9);
        org.joda.time.chrono.GJChronology gJChronology11 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone10);
        org.joda.time.DurationField durationField12 = gJChronology11.halfdays();
        org.joda.time.Chronology chronology13 = gJChronology11.withUTC();
        java.lang.String str14 = gJChronology11.toString();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology11.hourOfHalfday();
        int int16 = instant1.get(dateTimeField15);
        org.joda.time.Instant instant18 = new org.joda.time.Instant(52L);
        boolean boolean19 = instant18.isEqualNow();
        org.joda.time.ReadableDuration readableDuration20 = null;
        org.joda.time.Instant instant21 = instant18.plus(readableDuration20);
        org.joda.time.Instant instant23 = new org.joda.time.Instant(52L);
        org.joda.time.Instant instant25 = instant23.withMillis((long) 'u');
        boolean boolean26 = instant18.isBefore((org.joda.time.ReadableInstant) instant23);
        boolean boolean27 = instant1.isEqual((org.joda.time.ReadableInstant) instant23);
        org.joda.time.Chronology chronology28 = instant23.getChronology();
        org.joda.time.ReadableDuration readableDuration29 = null;
        org.joda.time.Instant instant30 = instant23.plus(readableDuration29);
        org.joda.time.MutableDateTime mutableDateTime31 = instant23.toMutableDateTime();
        org.joda.time.ReadableDuration readableDuration32 = null;
        org.joda.time.Instant instant33 = instant23.minus(readableDuration32);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and mutableDateTime31", (instant1.compareTo(mutableDateTime31) == 0) == instant1.equals(mutableDateTime31));
    }

    @Test
    public void test1858() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1858");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        int int4 = dateTimeZone1.getOffsetFromLocal(1000L);
        java.util.Locale locale7 = java.util.Locale.forLanguageTag("");
        java.lang.String str8 = dateTimeZone1.getName(43201764L, locale7);
        org.joda.time.Instant instant9 = new org.joda.time.Instant((java.lang.Object) 43201764L);
        java.util.TimeZone timeZone10 = null;
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forTimeZone(timeZone10);
        org.joda.time.chrono.GJChronology gJChronology12 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone11);
        long long16 = dateTimeZone11.convertLocalToUTC((long) (byte) -1, true, 0L);
        java.lang.String str18 = dateTimeZone11.getNameKey((long) (short) 0);
        boolean boolean20 = dateTimeZone11.equals((java.lang.Object) 10);
        org.joda.time.MutableDateTime mutableDateTime21 = instant9.toMutableDateTime(dateTimeZone11);
        long long23 = dateTimeZone11.convertUTCToLocal(1512000000L);
        java.util.Locale locale26 = java.util.Locale.forLanguageTag("CAN");
        java.lang.String str27 = locale26.getScript();
        java.util.Set<java.lang.Character> charSet28 = locale26.getExtensionKeys();
        java.lang.String str29 = locale26.getISO3Country();
        java.util.Locale locale32 = new java.util.Locale("UTC", "");
        java.lang.String str33 = locale26.getDisplayScript(locale32);
        java.lang.String str34 = dateTimeZone11.getShortName(18403199774567036L, locale32);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant9 and mutableDateTime21", (instant9.compareTo(mutableDateTime21) == 0) == instant9.equals(mutableDateTime21));
    }

    @Test
    public void test1859() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1859");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = gJChronology2.halfdays();
        long long7 = gJChronology2.add((long) 'a', (-1L), (int) (short) 0);
        boolean boolean9 = gJChronology2.equals((java.lang.Object) 0);
        org.joda.time.DateTimeField dateTimeField10 = gJChronology2.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField11 = gJChronology2.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField12 = gJChronology2.clockhourOfDay();
        long long17 = gJChronology2.getDateTimeMillis(10, (int) (short) 10, 4, (int) (byte) 1);
        org.joda.time.DateTimeField dateTimeField18 = gJChronology2.millisOfDay();
        java.lang.String str19 = gJChronology2.toString();
        org.joda.time.DateTimeField dateTimeField20 = gJChronology2.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField21 = gJChronology2.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField22 = gJChronology2.halfdayOfDay();
        java.util.TimeZone timeZone23 = null;
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forTimeZone(timeZone23);
        org.joda.time.chrono.GJChronology gJChronology25 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone24);
        org.joda.time.DurationField durationField26 = gJChronology25.halfdays();
        long long30 = gJChronology25.add((long) 'a', (-1L), (int) (short) 0);
        long long34 = gJChronology25.add((long) (byte) 0, (long) '4', 100);
        org.joda.time.DurationField durationField35 = gJChronology25.years();
        org.joda.time.DateTimeField dateTimeField36 = gJChronology25.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone37 = gJChronology25.getZone();
        org.joda.time.Chronology chronology38 = gJChronology2.withZone(dateTimeZone37);
        org.joda.time.DurationField durationField39 = gJChronology2.days();
        org.joda.time.DurationField durationField40 = gJChronology2.years();
        org.joda.time.DateTimeZone dateTimeZone41 = gJChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField42 = gJChronology2.weekyear();
        org.joda.time.DateTimeField dateTimeField43 = gJChronology2.era();
        org.joda.time.DateTimeField dateTimeField44 = gJChronology2.weekyearOfCentury();
        org.joda.time.DurationField durationField45 = gJChronology2.weekyears();
        org.joda.time.DateTimeZone dateTimeZone46 = gJChronology2.getZone();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on durationField35 and durationField45", (durationField35.compareTo(durationField45) == 0) == durationField35.equals(durationField45));
    }

    @Test
    public void test1860() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1860");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forTimeZone(timeZone2);
        org.joda.time.chrono.GJChronology gJChronology4 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone3);
        org.joda.time.DateTimeField dateTimeField5 = gJChronology4.millisOfSecond();
        int int6 = instant1.get(dateTimeField5);
        java.util.TimeZone timeZone7 = null;
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forTimeZone(timeZone7);
        org.joda.time.chrono.GJChronology gJChronology9 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone8);
        org.joda.time.DurationField durationField10 = gJChronology9.halfdays();
        java.util.TimeZone timeZone11 = null;
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forTimeZone(timeZone11);
        org.joda.time.chrono.GJChronology gJChronology13 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone12);
        long long17 = dateTimeZone12.convertLocalToUTC((long) (byte) -1, true, 0L);
        boolean boolean19 = dateTimeZone12.equals((java.lang.Object) true);
        org.joda.time.Chronology chronology20 = gJChronology9.withZone(dateTimeZone12);
        org.joda.time.MutableDateTime mutableDateTime21 = instant1.toMutableDateTime(dateTimeZone12);
        boolean boolean22 = mutableDateTime21.isAfterNow();
        java.util.TimeZone timeZone23 = null;
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forTimeZone(timeZone23);
        org.joda.time.chrono.GJChronology gJChronology25 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone24);
        org.joda.time.DurationField durationField26 = gJChronology25.halfdays();
        long long30 = gJChronology25.add((long) 'a', (-1L), (int) (short) 0);
        boolean boolean31 = mutableDateTime21.equals((java.lang.Object) gJChronology25);
        org.joda.time.Instant instant33 = new org.joda.time.Instant(52L);
        boolean boolean34 = instant33.isEqualNow();
        org.joda.time.ReadableDuration readableDuration35 = null;
        org.joda.time.Instant instant36 = instant33.plus(readableDuration35);
        long long37 = instant33.getMillis();
        java.lang.String str38 = instant33.toString();
        boolean boolean40 = instant33.isAfter((long) (-1));
        org.joda.time.Instant instant41 = instant33.toInstant();
        boolean boolean42 = mutableDateTime21.isEqual((org.joda.time.ReadableInstant) instant41);
        org.joda.time.DateTime dateTime43 = instant41.toDateTimeISO();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and mutableDateTime21", (instant1.compareTo(mutableDateTime21) == 0) == instant1.equals(mutableDateTime21));
    }

    @Test
    public void test1861() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1861");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = gJChronology2.halfdays();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.millisOfDay();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.minuteOfDay();
        org.joda.time.DurationField durationField6 = gJChronology2.centuries();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology2.dayOfYear();
        java.lang.String str8 = gJChronology2.toString();
        org.joda.time.DurationField durationField9 = gJChronology2.years();
        org.joda.time.DateTimeField dateTimeField10 = gJChronology2.yearOfEra();
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(0, (int) (short) 10);
        org.joda.time.Chronology chronology14 = gJChronology2.withZone(dateTimeZone13);
        org.joda.time.ReadableInstant readableInstant15 = null;
        int int16 = dateTimeZone13.getOffset(readableInstant15);
        org.joda.time.Instant instant18 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone19 = null;
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forTimeZone(timeZone19);
        org.joda.time.chrono.GJChronology gJChronology21 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone20);
        org.joda.time.DateTimeField dateTimeField22 = gJChronology21.millisOfSecond();
        int int23 = instant18.get(dateTimeField22);
        org.joda.time.Instant instant25 = instant18.plus(0L);
        org.joda.time.Instant instant26 = instant25.toInstant();
        org.joda.time.Instant instant28 = new org.joda.time.Instant(52L);
        boolean boolean29 = instant28.isEqualNow();
        java.lang.String str30 = instant28.toString();
        java.lang.String str31 = instant28.toString();
        org.joda.time.Instant instant33 = new org.joda.time.Instant(52L);
        boolean boolean34 = instant33.isEqualNow();
        org.joda.time.ReadableDuration readableDuration35 = null;
        org.joda.time.Instant instant36 = instant33.plus(readableDuration35);
        boolean boolean37 = instant28.isBefore((org.joda.time.ReadableInstant) instant36);
        org.joda.time.Instant instant39 = instant28.minus((long) 0);
        int int40 = instant25.compareTo((org.joda.time.ReadableInstant) instant28);
        org.joda.time.Instant instant43 = instant28.withDurationAdded((long) (short) 100, 70);
        org.joda.time.chrono.GJChronology gJChronology44 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone13, (org.joda.time.ReadableInstant) instant43);
        org.joda.time.DateTime dateTime45 = instant43.toDateTimeISO();
        org.joda.time.Instant instant48 = instant43.withDurationAdded(747217518019207000L, 10);
        org.joda.time.Instant instant50 = new org.joda.time.Instant((-220870497598236L));
        org.joda.time.Instant instant53 = instant50.withDurationAdded(1104493320052L, 35);
        org.joda.time.DateTimeFieldType dateTimeFieldType54 = null;
        boolean boolean55 = instant53.isSupported(dateTimeFieldType54);
        boolean boolean56 = instant43.isBefore((org.joda.time.ReadableInstant) instant53);
        org.joda.time.MutableDateTime mutableDateTime57 = instant53.toMutableDateTime();
        org.joda.time.Instant instant58 = instant53.toInstant();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant43 and dateTime45", (instant43.compareTo(dateTime45) == 0) == instant43.equals(dateTime45));
    }

    @Test
    public void test1862() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1862");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        boolean boolean2 = instant1.isEqualNow();
        java.lang.String str3 = instant1.toString();
        java.util.TimeZone timeZone4 = null;
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forTimeZone(timeZone4);
        org.joda.time.chrono.GJChronology gJChronology6 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone5);
        java.util.Locale locale8 = new java.util.Locale("hi!");
        java.lang.String str9 = locale8.getCountry();
        java.util.Locale locale10 = java.util.Locale.getDefault();
        java.lang.String str11 = locale10.getDisplayName();
        java.lang.String str12 = locale8.getDisplayScript(locale10);
        boolean boolean13 = dateTimeZone5.equals((java.lang.Object) locale10);
        int int15 = dateTimeZone5.getOffsetFromLocal((long) (short) 10);
        java.util.TimeZone timeZone16 = null;
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forTimeZone(timeZone16);
        org.joda.time.chrono.GJChronology gJChronology18 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone17);
        org.joda.time.DateTimeField dateTimeField19 = gJChronology18.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField20 = gJChronology18.weekyearOfCentury();
        org.joda.time.Instant instant21 = gJChronology18.getGregorianCutover();
        org.joda.time.Instant instant23 = instant21.withMillis(0L);
        org.joda.time.Instant instant25 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone26 = null;
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forTimeZone(timeZone26);
        org.joda.time.chrono.GJChronology gJChronology28 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone27);
        org.joda.time.DateTimeField dateTimeField29 = gJChronology28.millisOfSecond();
        int int30 = instant25.get(dateTimeField29);
        org.joda.time.Instant instant32 = instant25.plus(0L);
        int int33 = instant23.compareTo((org.joda.time.ReadableInstant) instant32);
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = null;
        boolean boolean35 = instant32.isSupported(dateTimeFieldType34);
        int int36 = dateTimeZone5.getOffset((org.joda.time.ReadableInstant) instant32);
        boolean boolean37 = instant1.isAfter((org.joda.time.ReadableInstant) instant32);
        org.joda.time.Instant instant39 = instant32.withMillis((long) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType40 = null;
        boolean boolean41 = instant39.isSupported(dateTimeFieldType40);
        org.joda.time.ReadableDuration readableDuration42 = null;
        org.joda.time.Instant instant43 = instant39.plus(readableDuration42);
        org.joda.time.MutableDateTime mutableDateTime44 = instant43.toMutableDateTimeISO();
        java.util.TimeZone timeZone45 = null;
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.forTimeZone(timeZone45);
        org.joda.time.chrono.GJChronology gJChronology47 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone46);
        org.joda.time.DateTimeField dateTimeField48 = gJChronology47.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField49 = gJChronology47.weekyearOfCentury();
        org.joda.time.Instant instant50 = gJChronology47.getGregorianCutover();
        org.joda.time.Instant instant52 = new org.joda.time.Instant(52L);
        boolean boolean53 = instant52.isEqualNow();
        java.lang.String str54 = instant52.toString();
        java.lang.String str55 = instant52.toString();
        org.joda.time.Instant instant57 = new org.joda.time.Instant(52L);
        boolean boolean58 = instant57.isEqualNow();
        org.joda.time.ReadableDuration readableDuration59 = null;
        org.joda.time.Instant instant60 = instant57.plus(readableDuration59);
        boolean boolean61 = instant52.isBefore((org.joda.time.ReadableInstant) instant60);
        org.joda.time.Instant instant63 = instant60.plus((long) (short) 100);
        org.joda.time.Chronology chronology64 = null;
        org.joda.time.MutableDateTime mutableDateTime65 = instant60.toMutableDateTime(chronology64);
        boolean boolean66 = instant50.isEqual((org.joda.time.ReadableInstant) mutableDateTime65);
        java.util.TimeZone timeZone67 = null;
        org.joda.time.DateTimeZone dateTimeZone68 = org.joda.time.DateTimeZone.forTimeZone(timeZone67);
        org.joda.time.chrono.GJChronology gJChronology69 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone68);
        org.joda.time.DurationField durationField70 = gJChronology69.halfdays();
        long long74 = gJChronology69.add((long) 'a', (-1L), (int) (short) 0);
        boolean boolean76 = gJChronology69.equals((java.lang.Object) 0);
        org.joda.time.DateTimeField dateTimeField77 = gJChronology69.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField78 = gJChronology69.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField79 = gJChronology69.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField80 = gJChronology69.clockhourOfHalfday();
        org.joda.time.DurationField durationField81 = gJChronology69.halfdays();
        org.joda.time.DateTimeField dateTimeField82 = gJChronology69.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField83 = gJChronology69.centuryOfEra();
        boolean boolean84 = mutableDateTime65.equals((java.lang.Object) gJChronology69);
        int int85 = mutableDateTime44.compareTo((org.joda.time.ReadableInstant) mutableDateTime65);
        java.lang.String str86 = mutableDateTime65.toString();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant39 and mutableDateTime44", (instant39.compareTo(mutableDateTime44) == 0) == instant39.equals(mutableDateTime44));
    }

    @Test
    public void test1863() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1863");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = gJChronology2.halfdays();
        org.joda.time.Chronology chronology4 = gJChronology2.withUTC();
        java.lang.String str5 = gJChronology2.toString();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology2.hourOfHalfday();
        org.joda.time.DurationField durationField7 = gJChronology2.millis();
        org.joda.time.DurationField durationField8 = gJChronology2.hours();
        org.joda.time.DurationField durationField9 = gJChronology2.weekyears();
        org.joda.time.DurationField durationField10 = gJChronology2.weeks();
        org.joda.time.DateTimeField dateTimeField11 = gJChronology2.year();
        org.joda.time.Instant instant12 = org.joda.time.Instant.now();
        org.joda.time.Instant instant15 = instant12.withDurationAdded(306102434400000L, (int) (short) 100);
        java.util.TimeZone timeZone16 = null;
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forTimeZone(timeZone16);
        org.joda.time.chrono.GJChronology gJChronology18 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone17);
        long long22 = dateTimeZone17.convertLocalToUTC((long) (byte) -1, true, 0L);
        boolean boolean24 = dateTimeZone17.equals((java.lang.Object) true);
        long long26 = dateTimeZone17.nextTransition((long) '4');
        java.lang.String str28 = dateTimeZone17.getShortName(432000001L);
        java.util.TimeZone timeZone29 = dateTimeZone17.toTimeZone();
        org.joda.time.DateTime dateTime30 = instant12.toDateTime(dateTimeZone17);
        long long32 = dateTimeZone17.convertUTCToLocal(289240205200L);
        org.joda.time.chrono.GJChronology gJChronology33 = org.joda.time.chrono.GJChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField34 = gJChronology33.era();
        org.joda.time.DateTimeField dateTimeField35 = gJChronology33.year();
        org.joda.time.DateTimeField dateTimeField36 = gJChronology33.hourOfDay();
        boolean boolean37 = dateTimeZone17.equals((java.lang.Object) dateTimeField36);
        org.joda.time.Chronology chronology38 = gJChronology2.withZone(dateTimeZone17);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant12 and dateTime30", (instant12.compareTo(dateTime30) == 0) == instant12.equals(dateTime30));
    }

    @Test
    public void test1864() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1864");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str3 = dateTimeZone1.getNameKey((long) 100);
        boolean boolean4 = dateTimeZone1.isFixed();
        org.joda.time.chrono.GJChronology gJChronology5 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        int int6 = gJChronology5.getMinimumDaysInFirstWeek();
        java.lang.String str7 = gJChronology5.toString();
        org.joda.time.DateTimeField dateTimeField8 = gJChronology5.yearOfEra();
        org.joda.time.DateTimeField dateTimeField9 = gJChronology5.yearOfCentury();
        org.joda.time.DurationField durationField10 = gJChronology5.eras();
        org.joda.time.DateTimeField dateTimeField11 = gJChronology5.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField12 = gJChronology5.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField13 = gJChronology5.yearOfEra();
        org.joda.time.DurationField durationField14 = gJChronology5.halfdays();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField10, durationField14, and durationField10", !(durationField10.compareTo(durationField14) == 0) || (Math.signum(durationField10.compareTo(durationField10)) == Math.signum(durationField14.compareTo(durationField10))));
    }

    @Test
    public void test1865() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1865");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        boolean boolean2 = instant1.isEqualNow();
        org.joda.time.ReadableDuration readableDuration3 = null;
        org.joda.time.Instant instant4 = instant1.plus(readableDuration3);
        org.joda.time.Instant instant6 = instant1.withMillis((long) 4);
        boolean boolean7 = instant1.isAfterNow();
        java.util.TimeZone timeZone8 = null;
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forTimeZone(timeZone8);
        java.lang.String str11 = dateTimeZone9.getNameKey((long) 100);
        boolean boolean12 = dateTimeZone9.isFixed();
        java.lang.String str13 = dateTimeZone9.toString();
        org.joda.time.LocalDateTime localDateTime14 = null;
        boolean boolean15 = dateTimeZone9.isLocalDateTimeGap(localDateTime14);
        java.lang.String str17 = dateTimeZone9.getShortName((long) 12);
        org.joda.time.DateTime dateTime18 = instant1.toDateTime(dateTimeZone9);
        org.joda.time.ReadableInstant readableInstant19 = null;
        boolean boolean20 = instant1.isAfter(readableInstant19);
        org.joda.time.DateTime dateTime21 = instant1.toDateTime();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and dateTime18", (instant1.compareTo(dateTime18) == 0) == instant1.equals(dateTime18));
    }

    @Test
    public void test1866() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1866");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField3 = gJChronology2.era();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.centuryOfEra();
        org.joda.time.DurationField durationField5 = gJChronology2.hours();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology2.monthOfYear();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology2.dayOfWeek();
        org.joda.time.Chronology chronology8 = gJChronology2.withUTC();
        org.joda.time.DurationField durationField9 = gJChronology2.centuries();
        java.util.TimeZone timeZone10 = null;
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forTimeZone(timeZone10);
        java.lang.String str13 = dateTimeZone11.getNameKey((long) 100);
        boolean boolean14 = dateTimeZone11.isFixed();
        org.joda.time.chrono.GJChronology gJChronology15 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone11);
        int int16 = gJChronology15.getMinimumDaysInFirstWeek();
        java.lang.String str17 = gJChronology15.toString();
        org.joda.time.DateTimeField dateTimeField18 = gJChronology15.yearOfEra();
        org.joda.time.DateTimeField dateTimeField19 = gJChronology15.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField20 = gJChronology15.dayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology22 = gJChronology15.withZone(dateTimeZone21);
        org.joda.time.DateTimeField dateTimeField23 = chronology22.millisOfSecond();
        java.util.TimeZone timeZone24 = null;
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forTimeZone(timeZone24);
        org.joda.time.chrono.GJChronology gJChronology26 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone25);
        int int28 = dateTimeZone25.getOffsetFromLocal((long) (-1));
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forOffsetHours((int) '4');
        long long32 = dateTimeZone25.getMillisKeepLocal(dateTimeZone30, (-8380800000L));
        org.joda.time.Chronology chronology33 = chronology22.withZone(dateTimeZone25);
        java.util.TimeZone timeZone34 = null;
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.forTimeZone(timeZone34);
        org.joda.time.chrono.GJChronology gJChronology36 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone35);
        org.joda.time.DurationField durationField37 = gJChronology36.halfdays();
        java.util.TimeZone timeZone38 = null;
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.forTimeZone(timeZone38);
        org.joda.time.chrono.GJChronology gJChronology40 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone39);
        long long44 = dateTimeZone39.convertLocalToUTC((long) (byte) -1, true, 0L);
        boolean boolean46 = dateTimeZone39.equals((java.lang.Object) true);
        org.joda.time.Chronology chronology47 = gJChronology36.withZone(dateTimeZone39);
        org.joda.time.LocalDateTime localDateTime48 = null;
        boolean boolean49 = dateTimeZone39.isLocalDateTimeGap(localDateTime48);
        boolean boolean50 = dateTimeZone39.isFixed();
        long long52 = dateTimeZone25.getMillisKeepLocal(dateTimeZone39, (long) (short) -1);
        org.joda.time.Chronology chronology53 = gJChronology2.withZone(dateTimeZone39);
        org.joda.time.Instant instant55 = new org.joda.time.Instant(52L);
        boolean boolean56 = instant55.isEqualNow();
        java.lang.String str57 = instant55.toString();
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.MutableDateTime mutableDateTime59 = instant55.toMutableDateTime(chronology58);
        org.joda.time.MutableDateTime mutableDateTime60 = instant55.toMutableDateTime();
        org.joda.time.MutableDateTime mutableDateTime61 = instant55.toMutableDateTime();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter62 = null;
        java.lang.String str63 = instant55.toString(dateTimeFormatter62);
        org.joda.time.chrono.GJChronology gJChronology64 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone39, (org.joda.time.ReadableInstant) instant55);
        long long66 = dateTimeZone39.convertUTCToLocal(61582L);
        int int68 = dateTimeZone39.getOffsetFromLocal((-28800052000L));
        boolean boolean70 = dateTimeZone39.equals((java.lang.Object) 12888000000L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant55 and mutableDateTime59", (instant55.compareTo(mutableDateTime59) == 0) == instant55.equals(mutableDateTime59));
    }

    @Test
    public void test1867() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1867");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        boolean boolean2 = instant1.isEqualNow();
        org.joda.time.Instant instant4 = new org.joda.time.Instant(52L);
        org.joda.time.Instant instant6 = instant4.withMillis((long) 'u');
        boolean boolean7 = instant1.isAfter((org.joda.time.ReadableInstant) instant4);
        org.joda.time.Instant instant10 = instant1.withDurationAdded(747221751619200000L, (int) (byte) 0);
        org.joda.time.MutableDateTime mutableDateTime11 = instant1.toMutableDateTime();
        boolean boolean13 = mutableDateTime11.isAfter((long) 1582);
        java.util.TimeZone timeZone14 = null;
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forTimeZone(timeZone14);
        org.joda.time.chrono.GJChronology gJChronology16 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone15);
        org.joda.time.DurationField durationField17 = gJChronology16.halfdays();
        org.joda.time.DateTimeField dateTimeField18 = gJChronology16.millisOfDay();
        org.joda.time.DateTimeField dateTimeField19 = gJChronology16.minuteOfDay();
        org.joda.time.DurationField durationField20 = gJChronology16.centuries();
        org.joda.time.DateTimeField dateTimeField21 = gJChronology16.halfdayOfDay();
        java.util.Locale locale22 = java.util.Locale.ITALIAN;
        java.util.Locale locale23 = locale22.stripExtensions();
        java.util.Locale locale24 = java.util.Locale.CANADA;
        java.lang.String str25 = locale22.getDisplayVariant(locale24);
        boolean boolean26 = gJChronology16.equals((java.lang.Object) locale24);
        org.joda.time.DateTimeField dateTimeField27 = gJChronology16.secondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone28 = gJChronology16.getZone();
        org.joda.time.DateTimeZone dateTimeZone29 = gJChronology16.getZone();
        boolean boolean30 = mutableDateTime11.equals((java.lang.Object) gJChronology16);
        java.util.TimeZone timeZone31 = null;
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.forTimeZone(timeZone31);
        org.joda.time.chrono.GJChronology gJChronology33 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone32);
        org.joda.time.DateTimeField dateTimeField34 = gJChronology33.era();
        org.joda.time.DateTimeField dateTimeField35 = gJChronology33.year();
        org.joda.time.DateTimeZone dateTimeZone36 = gJChronology33.getZone();
        java.util.Locale locale38 = java.util.Locale.ROOT;
        java.util.Locale locale39 = java.util.Locale.GERMAN;
        java.lang.String str40 = locale39.getDisplayCountry();
        java.lang.String str41 = locale38.getDisplayLanguage(locale39);
        java.lang.String str42 = locale39.getCountry();
        java.lang.String str43 = dateTimeZone36.getShortName(0L, locale39);
        java.util.Locale locale46 = new java.util.Locale("hi!");
        java.lang.String str47 = locale46.getCountry();
        java.util.Locale locale48 = java.util.Locale.getDefault();
        java.lang.String str49 = locale48.getDisplayName();
        java.lang.String str50 = locale46.getDisplayScript(locale48);
        java.lang.String str51 = locale46.getVariant();
        java.lang.String str52 = dateTimeZone36.getName(600097L, locale46);
        org.joda.time.Chronology chronology53 = gJChronology16.withZone(dateTimeZone36);
        org.joda.time.DateTimeField dateTimeField54 = gJChronology16.dayOfYear();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and mutableDateTime11", (instant1.compareTo(mutableDateTime11) == 0) == instant1.equals(mutableDateTime11));
    }

    @Test
    public void test1868() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1868");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField3 = gJChronology2.era();
        java.lang.String str4 = gJChronology2.toString();
        org.joda.time.DurationField durationField5 = gJChronology2.eras();
        org.joda.time.Chronology chronology6 = gJChronology2.withUTC();
        org.joda.time.DurationField durationField7 = gJChronology2.halfdays();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField5, durationField7, and durationField5", !(durationField5.compareTo(durationField7) == 0) || (Math.signum(durationField5.compareTo(durationField5)) == Math.signum(durationField7.compareTo(durationField5))));
    }

    @Test
    public void test1869() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1869");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField3 = gJChronology2.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.weekyearOfCentury();
        org.joda.time.Instant instant5 = gJChronology2.getGregorianCutover();
        org.joda.time.Instant instant7 = instant5.withMillis(0L);
        org.joda.time.Instant instant9 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone10 = null;
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forTimeZone(timeZone10);
        org.joda.time.chrono.GJChronology gJChronology12 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone11);
        org.joda.time.DateTimeField dateTimeField13 = gJChronology12.millisOfSecond();
        int int14 = instant9.get(dateTimeField13);
        org.joda.time.Instant instant16 = instant9.plus(0L);
        int int17 = instant7.compareTo((org.joda.time.ReadableInstant) instant16);
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = null;
        boolean boolean19 = instant16.isSupported(dateTimeFieldType18);
        org.joda.time.Instant instant21 = new org.joda.time.Instant(52L);
        boolean boolean22 = instant21.isEqualNow();
        org.joda.time.ReadableDuration readableDuration23 = null;
        org.joda.time.Instant instant24 = instant21.plus(readableDuration23);
        int int25 = instant16.compareTo((org.joda.time.ReadableInstant) instant21);
        org.joda.time.Instant instant27 = new org.joda.time.Instant(52L);
        boolean boolean28 = instant27.isEqualNow();
        int int29 = instant16.compareTo((org.joda.time.ReadableInstant) instant27);
        org.joda.time.Instant instant31 = new org.joda.time.Instant(4000L);
        boolean boolean32 = instant27.isAfter((org.joda.time.ReadableInstant) instant31);
        org.joda.time.ReadableDuration readableDuration33 = null;
        org.joda.time.Instant instant34 = instant31.plus(readableDuration33);
        org.joda.time.DateTime dateTime35 = instant31.toDateTimeISO();
        long long36 = instant31.getMillis();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant31 and dateTime35", (instant31.compareTo(dateTime35) == 0) == instant31.equals(dateTime35));
    }

    @Test
    public void test1870() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1870");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forTimeZone(timeZone2);
        org.joda.time.chrono.GJChronology gJChronology4 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone3);
        org.joda.time.DateTimeField dateTimeField5 = gJChronology4.millisOfSecond();
        int int6 = instant1.get(dateTimeField5);
        boolean boolean7 = instant1.isEqualNow();
        org.joda.time.tz.NameProvider nameProvider8 = org.joda.time.DateTimeZone.getNameProvider();
        org.joda.time.DateTimeZone.setNameProvider(nameProvider8);
        org.joda.time.DateTimeZone.setNameProvider(nameProvider8);
        boolean boolean11 = instant1.equals((java.lang.Object) nameProvider8);
        org.joda.time.Instant instant13 = instant1.minus(0L);
        org.joda.time.Instant instant15 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone16 = null;
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forTimeZone(timeZone16);
        org.joda.time.chrono.GJChronology gJChronology18 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone17);
        org.joda.time.DateTimeField dateTimeField19 = gJChronology18.millisOfSecond();
        int int20 = instant15.get(dateTimeField19);
        org.joda.time.Instant instant22 = instant15.plus(0L);
        org.joda.time.Instant instant23 = instant22.toInstant();
        org.joda.time.Instant instant25 = new org.joda.time.Instant(52L);
        boolean boolean26 = instant25.isEqualNow();
        java.lang.String str27 = instant25.toString();
        java.lang.String str28 = instant25.toString();
        org.joda.time.Instant instant30 = new org.joda.time.Instant(52L);
        boolean boolean31 = instant30.isEqualNow();
        org.joda.time.ReadableDuration readableDuration32 = null;
        org.joda.time.Instant instant33 = instant30.plus(readableDuration32);
        boolean boolean34 = instant25.isBefore((org.joda.time.ReadableInstant) instant33);
        org.joda.time.Instant instant36 = instant25.minus((long) 0);
        int int37 = instant22.compareTo((org.joda.time.ReadableInstant) instant25);
        org.joda.time.Instant instant40 = instant25.withDurationAdded((long) (short) 100, 70);
        org.joda.time.ReadableDuration readableDuration41 = null;
        org.joda.time.Instant instant42 = instant25.minus(readableDuration41);
        boolean boolean43 = instant13.isBefore((org.joda.time.ReadableInstant) instant42);
        java.util.TimeZone timeZone44 = null;
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.forTimeZone(timeZone44);
        org.joda.time.chrono.GJChronology gJChronology46 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone45);
        org.joda.time.DurationField durationField47 = gJChronology46.halfdays();
        long long51 = gJChronology46.add((long) 'a', (-1L), (int) (short) 0);
        boolean boolean53 = gJChronology46.equals((java.lang.Object) 0);
        org.joda.time.DateTimeField dateTimeField54 = gJChronology46.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField55 = gJChronology46.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField56 = gJChronology46.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField57 = gJChronology46.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField58 = gJChronology46.weekyear();
        java.util.TimeZone timeZone59 = null;
        org.joda.time.DateTimeZone dateTimeZone60 = org.joda.time.DateTimeZone.forTimeZone(timeZone59);
        org.joda.time.chrono.GJChronology gJChronology61 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone60);
        org.joda.time.DateTimeField dateTimeField62 = gJChronology61.millisOfSecond();
        org.joda.time.DurationField durationField63 = gJChronology61.millis();
        org.joda.time.DateTimeZone dateTimeZone64 = gJChronology61.getZone();
        org.joda.time.Chronology chronology65 = gJChronology46.withZone(dateTimeZone64);
        org.joda.time.DateTimeField dateTimeField66 = gJChronology46.yearOfEra();
        org.joda.time.DateTime dateTime67 = instant13.toDateTime((org.joda.time.Chronology) gJChronology46);
        java.lang.String str68 = instant13.toString();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant13 and dateTime67", (instant13.compareTo(dateTime67) == 0) == instant13.equals(dateTime67));
    }

    @Test
    public void test1871() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1871");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField3 = gJChronology2.millisOfSecond();
        org.joda.time.DurationField durationField4 = gJChronology2.millis();
        org.joda.time.DurationField durationField5 = gJChronology2.weeks();
        org.joda.time.DurationField durationField6 = gJChronology2.days();
        org.joda.time.DurationField durationField7 = gJChronology2.months();
        org.joda.time.DateTimeField dateTimeField8 = gJChronology2.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField9 = gJChronology2.hourOfDay();
        org.joda.time.DurationField durationField10 = gJChronology2.hours();
        java.util.TimeZone timeZone11 = null;
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forTimeZone(timeZone11);
        java.lang.String str14 = dateTimeZone12.getNameKey((long) 100);
        boolean boolean15 = dateTimeZone12.isFixed();
        org.joda.time.Instant instant17 = new org.joda.time.Instant(52L);
        boolean boolean18 = instant17.isEqualNow();
        java.lang.String str19 = instant17.toString();
        java.lang.String str20 = instant17.toString();
        org.joda.time.Instant instant23 = instant17.withDurationAdded(115200000L, (int) (short) 1);
        java.util.TimeZone timeZone24 = null;
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forTimeZone(timeZone24);
        java.lang.String str27 = dateTimeZone25.getNameKey((long) 100);
        boolean boolean28 = dateTimeZone25.isFixed();
        org.joda.time.DateTime dateTime29 = instant17.toDateTime(dateTimeZone25);
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = null;
        boolean boolean31 = instant17.isSupported(dateTimeFieldType30);
        int int32 = dateTimeZone12.getOffset((org.joda.time.ReadableInstant) instant17);
        java.lang.String str34 = dateTimeZone12.getNameKey((long) (-298));
        org.joda.time.Chronology chronology35 = gJChronology2.withZone(dateTimeZone12);
        org.joda.time.DateTimeField dateTimeField36 = chronology35.yearOfEra();
        org.joda.time.DurationField durationField37 = chronology35.millis();
        org.joda.time.DateTimeField dateTimeField38 = chronology35.dayOfMonth();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant17 and dateTime29", (instant17.compareTo(dateTime29) == 0) == instant17.equals(dateTime29));
    }

    @Test
    public void test1872() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1872");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        boolean boolean2 = instant1.isEqualNow();
        org.joda.time.ReadableDuration readableDuration3 = null;
        org.joda.time.Instant instant4 = instant1.plus(readableDuration3);
        org.joda.time.Instant instant6 = instant1.plus(1431205L);
        java.util.TimeZone timeZone7 = null;
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forTimeZone(timeZone7);
        org.joda.time.chrono.GJChronology gJChronology9 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone8);
        int int11 = dateTimeZone8.getOffsetFromLocal((long) (-1));
        int int13 = dateTimeZone8.getOffset((-61827926399999L));
        java.lang.String str14 = dateTimeZone8.toString();
        long long16 = dateTimeZone8.previousTransition(0L);
        java.util.Locale locale19 = java.util.Locale.forLanguageTag("cinese (Taiwan)");
        java.lang.String str20 = dateTimeZone8.getShortName((-740275192556424000L), locale19);
        org.joda.time.DateTime dateTime21 = instant1.toDateTime(dateTimeZone8);
        java.util.Date date22 = instant1.toDate();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and dateTime21", (instant1.compareTo(dateTime21) == 0) == instant1.equals(dateTime21));
    }

    @Test
    public void test1873() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1873");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        boolean boolean2 = instant1.isEqualNow();
        java.lang.String str3 = instant1.toString();
        org.joda.time.Instant instant5 = new org.joda.time.Instant(52L);
        boolean boolean6 = instant5.isEqualNow();
        java.lang.String str7 = instant5.toString();
        java.lang.String str8 = instant5.toString();
        org.joda.time.Instant instant11 = instant5.withDurationAdded(115200000L, (int) (short) 1);
        int int12 = instant1.compareTo((org.joda.time.ReadableInstant) instant5);
        org.joda.time.Instant instant14 = new org.joda.time.Instant(52L);
        boolean boolean15 = instant14.isEqualNow();
        org.joda.time.ReadableDuration readableDuration16 = null;
        org.joda.time.Instant instant17 = instant14.plus(readableDuration16);
        boolean boolean19 = instant17.equals((java.lang.Object) ' ');
        boolean boolean20 = instant5.isAfter((org.joda.time.ReadableInstant) instant17);
        java.lang.String str21 = instant17.toString();
        java.util.TimeZone timeZone22 = null;
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        org.joda.time.chrono.GJChronology gJChronology24 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone23);
        org.joda.time.DurationField durationField25 = gJChronology24.halfdays();
        long long29 = gJChronology24.add(0L, (long) (short) -1, (int) '4');
        org.joda.time.Instant instant30 = gJChronology24.getGregorianCutover();
        boolean boolean31 = instant17.isAfter((org.joda.time.ReadableInstant) instant30);
        java.util.TimeZone timeZone32 = null;
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.forTimeZone(timeZone32);
        org.joda.time.chrono.GJChronology gJChronology34 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone33);
        org.joda.time.DurationField durationField35 = gJChronology34.halfdays();
        org.joda.time.DateTimeField dateTimeField36 = gJChronology34.millisOfDay();
        org.joda.time.DateTimeField dateTimeField37 = gJChronology34.minuteOfDay();
        org.joda.time.DurationField durationField38 = gJChronology34.centuries();
        int int39 = gJChronology34.getMinimumDaysInFirstWeek();
        org.joda.time.DateTimeField dateTimeField40 = gJChronology34.weekyear();
        org.joda.time.DateTimeField dateTimeField41 = gJChronology34.weekyearOfCentury();
        org.joda.time.DurationField durationField42 = gJChronology34.halfdays();
        java.lang.String str43 = gJChronology34.toString();
        org.joda.time.DurationField durationField44 = gJChronology34.halfdays();
        org.joda.time.DateTime dateTime45 = instant30.toDateTime((org.joda.time.Chronology) gJChronology34);
        org.joda.time.DateTimeField dateTimeField46 = gJChronology34.weekOfWeekyear();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant30 and dateTime45", (instant30.compareTo(dateTime45) == 0) == instant30.equals(dateTime45));
    }

    @Test
    public void test1874() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1874");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        boolean boolean2 = instant1.isEqualNow();
        org.joda.time.ReadableDuration readableDuration3 = null;
        org.joda.time.Instant instant4 = instant1.plus(readableDuration3);
        org.joda.time.Instant instant6 = instant1.withMillis((long) 4);
        org.joda.time.Instant instant8 = instant6.withMillis((-5919628L));
        java.util.TimeZone timeZone9 = null;
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forTimeZone(timeZone9);
        org.joda.time.chrono.GJChronology gJChronology11 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone10);
        org.joda.time.DateTimeField dateTimeField12 = gJChronology11.millisOfSecond();
        org.joda.time.DurationField durationField13 = gJChronology11.weeks();
        org.joda.time.DurationField durationField14 = gJChronology11.months();
        java.lang.String str15 = gJChronology11.toString();
        org.joda.time.DateTimeField dateTimeField16 = gJChronology11.centuryOfEra();
        org.joda.time.DateTime dateTime17 = instant6.toDateTime((org.joda.time.Chronology) gJChronology11);
        org.joda.time.Instant instant19 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone20 = null;
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forTimeZone(timeZone20);
        org.joda.time.chrono.GJChronology gJChronology22 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone21);
        org.joda.time.DateTimeField dateTimeField23 = gJChronology22.millisOfSecond();
        int int24 = instant19.get(dateTimeField23);
        boolean boolean25 = instant19.isEqualNow();
        org.joda.time.DateTime dateTime26 = instant19.toDateTime();
        long long27 = instant19.getMillis();
        org.joda.time.MutableDateTime mutableDateTime28 = instant19.toMutableDateTimeISO();
        boolean boolean29 = instant19.isAfterNow();
        int int30 = dateTime17.compareTo((org.joda.time.ReadableInstant) instant19);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and dateTime26", (instant1.compareTo(dateTime26) == 0) == instant1.equals(dateTime26));
    }

    @Test
    public void test1875() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1875");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        boolean boolean2 = instant1.isEqualNow();
        java.lang.String str3 = instant1.toString();
        org.joda.time.Instant instant5 = new org.joda.time.Instant(52L);
        boolean boolean6 = instant5.isEqualNow();
        java.lang.String str7 = instant5.toString();
        java.lang.String str8 = instant5.toString();
        org.joda.time.Instant instant11 = instant5.withDurationAdded(115200000L, (int) (short) 1);
        int int12 = instant1.compareTo((org.joda.time.ReadableInstant) instant5);
        org.joda.time.Instant instant14 = new org.joda.time.Instant(52L);
        boolean boolean15 = instant14.isEqualNow();
        org.joda.time.ReadableDuration readableDuration16 = null;
        org.joda.time.Instant instant17 = instant14.plus(readableDuration16);
        boolean boolean19 = instant17.equals((java.lang.Object) ' ');
        boolean boolean20 = instant5.isAfter((org.joda.time.ReadableInstant) instant17);
        org.joda.time.DateTime dateTime21 = instant5.toDateTime();
        org.joda.time.ReadableDuration readableDuration22 = null;
        org.joda.time.Instant instant24 = instant5.withDurationAdded(readableDuration22, 52);
        java.lang.String str25 = instant24.toString();
        org.joda.time.Instant instant27 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone28 = null;
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forTimeZone(timeZone28);
        org.joda.time.chrono.GJChronology gJChronology30 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone29);
        org.joda.time.DateTimeField dateTimeField31 = gJChronology30.millisOfSecond();
        int int32 = instant27.get(dateTimeField31);
        boolean boolean33 = instant27.isEqualNow();
        org.joda.time.tz.NameProvider nameProvider34 = org.joda.time.DateTimeZone.getNameProvider();
        org.joda.time.DateTimeZone.setNameProvider(nameProvider34);
        org.joda.time.DateTimeZone.setNameProvider(nameProvider34);
        boolean boolean37 = instant27.equals((java.lang.Object) nameProvider34);
        int int38 = instant24.compareTo((org.joda.time.ReadableInstant) instant27);
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = null;
        boolean boolean40 = instant24.isSupported(dateTimeFieldType39);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and dateTime21", (instant1.compareTo(dateTime21) == 0) == instant1.equals(dateTime21));
    }

    @Test
    public void test1876() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1876");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = gJChronology2.halfdays();
        long long7 = gJChronology2.add((long) 'a', (-1L), (int) (short) 0);
        long long11 = gJChronology2.add((long) (byte) 0, (long) '4', 100);
        org.joda.time.DateTimeField dateTimeField12 = gJChronology2.minuteOfHour();
        org.joda.time.DurationField durationField13 = gJChronology2.hours();
        org.joda.time.DateTimeField dateTimeField14 = gJChronology2.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology2.millisOfSecond();
        org.joda.time.DurationField durationField16 = gJChronology2.months();
        org.joda.time.DurationField durationField17 = gJChronology2.hours();
        org.joda.time.DateTimeField dateTimeField18 = gJChronology2.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField19 = gJChronology2.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField20 = gJChronology2.dayOfYear();
        org.joda.time.Instant instant21 = gJChronology2.getGregorianCutover();
        org.joda.time.Instant instant23 = new org.joda.time.Instant(52L);
        boolean boolean24 = instant23.isEqualNow();
        org.joda.time.ReadableDuration readableDuration25 = null;
        org.joda.time.Instant instant26 = instant23.plus(readableDuration25);
        org.joda.time.Instant instant28 = new org.joda.time.Instant(52L);
        org.joda.time.Instant instant30 = instant28.withMillis((long) 'u');
        boolean boolean31 = instant23.isBefore((org.joda.time.ReadableInstant) instant28);
        org.joda.time.Instant instant32 = instant28.toInstant();
        boolean boolean33 = instant21.isBefore((org.joda.time.ReadableInstant) instant28);
        org.joda.time.Instant instant35 = new org.joda.time.Instant(52L);
        boolean boolean36 = instant35.isEqualNow();
        org.joda.time.Instant instant38 = new org.joda.time.Instant(52L);
        org.joda.time.Instant instant40 = instant38.withMillis((long) 'u');
        boolean boolean41 = instant35.isAfter((org.joda.time.ReadableInstant) instant38);
        org.joda.time.DateTime dateTime42 = instant35.toDateTimeISO();
        java.util.TimeZone timeZone43 = null;
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.forTimeZone(timeZone43);
        org.joda.time.chrono.GJChronology gJChronology45 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone44);
        org.joda.time.DurationField durationField46 = gJChronology45.halfdays();
        long long50 = gJChronology45.add((long) 'a', (-1L), (int) (short) 0);
        boolean boolean52 = gJChronology45.equals((java.lang.Object) 0);
        org.joda.time.DateTimeField dateTimeField53 = gJChronology45.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField54 = gJChronology45.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField55 = gJChronology45.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField56 = gJChronology45.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField57 = gJChronology45.weekyear();
        java.util.TimeZone timeZone58 = null;
        org.joda.time.DateTimeZone dateTimeZone59 = org.joda.time.DateTimeZone.forTimeZone(timeZone58);
        org.joda.time.chrono.GJChronology gJChronology60 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone59);
        org.joda.time.DateTimeField dateTimeField61 = gJChronology60.millisOfSecond();
        org.joda.time.DurationField durationField62 = gJChronology60.millis();
        org.joda.time.DateTimeZone dateTimeZone63 = gJChronology60.getZone();
        org.joda.time.Chronology chronology64 = gJChronology45.withZone(dateTimeZone63);
        org.joda.time.DateTimeField dateTimeField65 = gJChronology45.era();
        int int66 = dateTime42.get(dateTimeField65);
        org.joda.time.Instant instant68 = new org.joda.time.Instant(3155760000000L);
        org.joda.time.Instant instant69 = instant68.toInstant();
        boolean boolean70 = instant69.isEqualNow();
        boolean boolean71 = dateTime42.isBefore((org.joda.time.ReadableInstant) instant69);
        boolean boolean72 = instant28.isAfter((org.joda.time.ReadableInstant) dateTime42);
        org.joda.time.Instant instant74 = new org.joda.time.Instant(864000000L);
        org.joda.time.ReadableDuration readableDuration75 = null;
        org.joda.time.Instant instant77 = instant74.withDurationAdded(readableDuration75, 87696);
        boolean boolean78 = instant74.isEqualNow();
        org.joda.time.DateTimeZone dateTimeZone79 = instant74.getZone();
        org.joda.time.DateTime dateTime80 = instant28.toDateTime(dateTimeZone79);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant23 and dateTime42", (instant23.compareTo(dateTime42) == 0) == instant23.equals(dateTime42));
    }

    @Test
    public void test1877() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1877");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(306102434400000L);
        java.util.TimeZone timeZone2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forTimeZone(timeZone2);
        org.joda.time.chrono.GJChronology gJChronology4 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone3);
        org.joda.time.DateTimeField dateTimeField5 = gJChronology4.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology4.weekyear();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology4.halfdayOfDay();
        org.joda.time.DurationField durationField8 = gJChronology4.years();
        org.joda.time.DurationField durationField9 = gJChronology4.minutes();
        java.util.TimeZone timeZone10 = null;
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forTimeZone(timeZone10);
        java.lang.String str13 = dateTimeZone11.getNameKey((long) 100);
        boolean boolean14 = dateTimeZone11.isFixed();
        org.joda.time.chrono.GJChronology gJChronology15 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone11);
        int int16 = gJChronology15.getMinimumDaysInFirstWeek();
        java.lang.String str17 = gJChronology15.toString();
        org.joda.time.DateTimeField dateTimeField18 = gJChronology15.yearOfEra();
        org.joda.time.DateTimeField dateTimeField19 = gJChronology15.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField20 = gJChronology15.dayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology22 = gJChronology15.withZone(dateTimeZone21);
        org.joda.time.Chronology chronology23 = gJChronology4.withZone(dateTimeZone21);
        org.joda.time.Instant instant25 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone26 = null;
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forTimeZone(timeZone26);
        org.joda.time.chrono.GJChronology gJChronology28 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone27);
        org.joda.time.DateTimeField dateTimeField29 = gJChronology28.millisOfSecond();
        int int30 = instant25.get(dateTimeField29);
        org.joda.time.Instant instant32 = instant25.plus(0L);
        java.util.TimeZone timeZone33 = null;
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.forTimeZone(timeZone33);
        org.joda.time.chrono.GJChronology gJChronology35 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone34);
        org.joda.time.DurationField durationField36 = gJChronology35.halfdays();
        org.joda.time.Chronology chronology37 = gJChronology35.withUTC();
        java.lang.String str38 = gJChronology35.toString();
        org.joda.time.DateTimeField dateTimeField39 = gJChronology35.hourOfHalfday();
        int int40 = instant25.get(dateTimeField39);
        org.joda.time.Instant instant42 = new org.joda.time.Instant(52L);
        boolean boolean43 = instant42.isEqualNow();
        org.joda.time.ReadableDuration readableDuration44 = null;
        org.joda.time.Instant instant45 = instant42.plus(readableDuration44);
        org.joda.time.Instant instant47 = new org.joda.time.Instant(52L);
        org.joda.time.Instant instant49 = instant47.withMillis((long) 'u');
        boolean boolean50 = instant42.isBefore((org.joda.time.ReadableInstant) instant47);
        boolean boolean51 = instant25.isEqual((org.joda.time.ReadableInstant) instant47);
        org.joda.time.chrono.GJChronology gJChronology53 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone21, (org.joda.time.ReadableInstant) instant47, (int) (short) 1);
        org.joda.time.DateTime dateTime54 = instant1.toDateTime(dateTimeZone21);
        long long56 = dateTimeZone21.previousTransition(1780401L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and dateTime54", (instant1.compareTo(dateTime54) == 0) == instant1.equals(dateTime54));
    }

    @Test
    public void test1878() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1878");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(4000L);
        java.lang.String str2 = instant1.toString();
        org.joda.time.Instant instant4 = instant1.withMillis((long) 600000);
        org.joda.time.Chronology chronology5 = instant1.getChronology();
        java.util.TimeZone timeZone6 = null;
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forTimeZone(timeZone6);
        org.joda.time.chrono.GJChronology gJChronology8 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone7);
        org.joda.time.DateTimeField dateTimeField9 = gJChronology8.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField10 = gJChronology8.weekyearOfCentury();
        org.joda.time.Instant instant11 = gJChronology8.getGregorianCutover();
        org.joda.time.Instant instant13 = instant11.withMillis(0L);
        org.joda.time.Instant instant15 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone16 = null;
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forTimeZone(timeZone16);
        org.joda.time.chrono.GJChronology gJChronology18 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone17);
        org.joda.time.DateTimeField dateTimeField19 = gJChronology18.millisOfSecond();
        int int20 = instant15.get(dateTimeField19);
        org.joda.time.Instant instant22 = instant15.plus(0L);
        int int23 = instant13.compareTo((org.joda.time.ReadableInstant) instant22);
        org.joda.time.Instant instant25 = new org.joda.time.Instant(52L);
        boolean boolean26 = instant25.isEqualNow();
        org.joda.time.ReadableDuration readableDuration27 = null;
        org.joda.time.Instant instant28 = instant25.plus(readableDuration27);
        boolean boolean30 = instant28.equals((java.lang.Object) ' ');
        boolean boolean31 = instant22.isEqual((org.joda.time.ReadableInstant) instant28);
        org.joda.time.ReadableDuration readableDuration32 = null;
        org.joda.time.Instant instant34 = instant22.withDurationAdded(readableDuration32, 0);
        org.joda.time.MutableDateTime mutableDateTime35 = instant34.toMutableDateTime();
        boolean boolean36 = instant1.isAfter((org.joda.time.ReadableInstant) instant34);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant34 and mutableDateTime35", (instant34.compareTo(mutableDateTime35) == 0) == instant34.equals(mutableDateTime35));
    }

    @Test
    public void test1879() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1879");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        boolean boolean2 = instant1.isEqualNow();
        org.joda.time.ReadableDuration readableDuration3 = null;
        org.joda.time.Instant instant4 = instant1.plus(readableDuration3);
        long long5 = instant1.getMillis();
        java.lang.Object obj6 = null;
        boolean boolean7 = instant1.equals(obj6);
        org.joda.time.Instant instant9 = instant1.minus(3155695200000L);
        java.util.TimeZone timeZone10 = null;
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forTimeZone(timeZone10);
        org.joda.time.chrono.GJChronology gJChronology12 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone11);
        org.joda.time.DurationField durationField13 = gJChronology12.years();
        java.util.TimeZone timeZone14 = null;
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forTimeZone(timeZone14);
        org.joda.time.chrono.GJChronology gJChronology16 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone15);
        org.joda.time.DurationField durationField17 = gJChronology16.halfdays();
        org.joda.time.DateTimeField dateTimeField18 = gJChronology16.millisOfDay();
        org.joda.time.DateTimeField dateTimeField19 = gJChronology16.minuteOfDay();
        org.joda.time.DurationField durationField20 = gJChronology16.centuries();
        java.util.TimeZone timeZone21 = null;
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forTimeZone(timeZone21);
        org.joda.time.chrono.GJChronology gJChronology23 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone22);
        org.joda.time.DurationField durationField24 = gJChronology23.halfdays();
        long long27 = durationField24.add((long) 100, 100L);
        boolean boolean28 = durationField24.isPrecise();
        int int29 = durationField20.compareTo(durationField24);
        boolean boolean30 = gJChronology12.equals((java.lang.Object) durationField20);
        org.joda.time.DateTimeField dateTimeField31 = gJChronology12.dayOfYear();
        org.joda.time.DateTimeField dateTimeField32 = gJChronology12.era();
        org.joda.time.MutableDateTime mutableDateTime33 = instant9.toMutableDateTime((org.joda.time.Chronology) gJChronology12);
        org.joda.time.Instant instant35 = new org.joda.time.Instant((-220870497598236L));
        org.joda.time.MutableDateTime mutableDateTime36 = instant35.toMutableDateTimeISO();
        boolean boolean37 = mutableDateTime33.isBefore((org.joda.time.ReadableInstant) instant35);
        boolean boolean38 = instant35.isAfterNow();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant9 and mutableDateTime33", (instant9.compareTo(mutableDateTime33) == 0) == instant9.equals(mutableDateTime33));
    }

    @Test
    public void test1880() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1880");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        boolean boolean2 = instant1.isEqualNow();
        java.lang.String str3 = instant1.toString();
        java.lang.String str4 = instant1.toString();
        org.joda.time.Instant instant7 = instant1.withDurationAdded(115200000L, (int) (short) 1);
        boolean boolean8 = instant7.isBeforeNow();
        org.joda.time.Instant instant10 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone11 = null;
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forTimeZone(timeZone11);
        org.joda.time.chrono.GJChronology gJChronology13 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone12);
        org.joda.time.DateTimeField dateTimeField14 = gJChronology13.millisOfSecond();
        int int15 = instant10.get(dateTimeField14);
        boolean boolean16 = instant10.isEqualNow();
        org.joda.time.Instant instant18 = new org.joda.time.Instant(52L);
        boolean boolean19 = instant18.isEqualNow();
        org.joda.time.ReadableDuration readableDuration20 = null;
        org.joda.time.Instant instant21 = instant18.plus(readableDuration20);
        long long22 = instant18.getMillis();
        java.lang.Object obj23 = null;
        boolean boolean24 = instant18.equals(obj23);
        org.joda.time.Instant instant26 = new org.joda.time.Instant(52L);
        boolean boolean27 = instant26.isEqualNow();
        org.joda.time.ReadableDuration readableDuration28 = null;
        org.joda.time.Instant instant29 = instant26.plus(readableDuration28);
        long long30 = instant26.getMillis();
        java.lang.String str31 = instant26.toString();
        org.joda.time.Instant instant32 = instant26.toInstant();
        org.joda.time.ReadableDuration readableDuration33 = null;
        org.joda.time.Instant instant35 = instant26.withDurationAdded(readableDuration33, (int) 'x');
        org.joda.time.Instant instant36 = instant26.toInstant();
        int int37 = instant18.compareTo((org.joda.time.ReadableInstant) instant26);
        boolean boolean38 = instant10.isBefore((org.joda.time.ReadableInstant) instant26);
        java.util.TimeZone timeZone39 = null;
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.forTimeZone(timeZone39);
        org.joda.time.chrono.GJChronology gJChronology41 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone40);
        org.joda.time.DurationField durationField42 = gJChronology41.halfdays();
        long long46 = gJChronology41.add((long) 'a', (-1L), (int) (short) 0);
        org.joda.time.DateTimeField dateTimeField47 = gJChronology41.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField48 = gJChronology41.secondOfMinute();
        org.joda.time.Instant instant50 = new org.joda.time.Instant(52L);
        boolean boolean51 = instant50.isEqualNow();
        org.joda.time.ReadableDuration readableDuration52 = null;
        org.joda.time.Instant instant53 = instant50.plus(readableDuration52);
        boolean boolean54 = gJChronology41.equals((java.lang.Object) instant50);
        org.joda.time.DateTimeFieldType dateTimeFieldType55 = null;
        boolean boolean56 = instant50.isSupported(dateTimeFieldType55);
        org.joda.time.DateTimeFieldType dateTimeFieldType57 = null;
        boolean boolean58 = instant50.isSupported(dateTimeFieldType57);
        java.lang.String str59 = instant50.toString();
        boolean boolean60 = instant10.isAfter((org.joda.time.ReadableInstant) instant50);
        org.joda.time.MutableDateTime mutableDateTime61 = instant50.toMutableDateTimeISO();
        int int62 = instant7.compareTo((org.joda.time.ReadableInstant) mutableDateTime61);
        org.joda.time.Instant instant64 = new org.joda.time.Instant(52L);
        boolean boolean65 = instant64.isEqualNow();
        java.lang.String str66 = instant64.toString();
        java.lang.String str67 = instant64.toString();
        org.joda.time.Instant instant70 = instant64.withDurationAdded(115200000L, (int) (short) 1);
        org.joda.time.Instant instant71 = instant64.toInstant();
        org.joda.time.Instant instant73 = instant71.minus(4492800100L);
        org.joda.time.DateTimeZone dateTimeZone74 = instant73.getZone();
        boolean boolean75 = mutableDateTime61.isEqual((org.joda.time.ReadableInstant) instant73);
        org.joda.time.Instant instant78 = instant73.withDurationAdded(4324200000L, 432000000);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and mutableDateTime61", (instant1.compareTo(mutableDateTime61) == 0) == instant1.equals(mutableDateTime61));
    }

    @Test
    public void test1881() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1881");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField3 = gJChronology2.millisOfSecond();
        org.joda.time.DurationField durationField4 = gJChronology2.millis();
        org.joda.time.DurationField durationField5 = gJChronology2.weeks();
        long long9 = gJChronology2.add(43201764L, 262974600000L, (int) (short) 100);
        org.joda.time.DateTimeField dateTimeField10 = gJChronology2.era();
        org.joda.time.DurationField durationField11 = gJChronology2.eras();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField11, durationField4, and durationField5", !(durationField11.compareTo(durationField4) == 0) || (Math.signum(durationField11.compareTo(durationField5)) == Math.signum(durationField4.compareTo(durationField5))));
    }

    @Test
    public void test1882() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1882");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(864000000L);
        org.joda.time.ReadableDuration readableDuration2 = null;
        org.joda.time.Instant instant4 = instant1.withDurationAdded(readableDuration2, 87696);
        boolean boolean5 = instant1.isEqualNow();
        org.joda.time.DateTimeZone dateTimeZone6 = instant1.getZone();
        java.util.TimeZone timeZone7 = null;
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forTimeZone(timeZone7);
        org.joda.time.chrono.GJChronology gJChronology9 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone8);
        org.joda.time.DurationField durationField10 = gJChronology9.halfdays();
        long long14 = gJChronology9.add((long) 'a', (-1L), (int) (short) 0);
        boolean boolean16 = gJChronology9.equals((java.lang.Object) 0);
        org.joda.time.DateTimeField dateTimeField17 = gJChronology9.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField18 = gJChronology9.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField19 = gJChronology9.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField20 = gJChronology9.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField21 = gJChronology9.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField22 = gJChronology9.yearOfEra();
        org.joda.time.DateTimeField dateTimeField23 = gJChronology9.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone24 = gJChronology9.getZone();
        org.joda.time.Instant instant26 = new org.joda.time.Instant(52L);
        boolean boolean27 = instant26.isEqualNow();
        org.joda.time.ReadableDuration readableDuration28 = null;
        org.joda.time.Instant instant29 = instant26.plus(readableDuration28);
        org.joda.time.Instant instant31 = instant26.withMillis((long) 4);
        boolean boolean32 = dateTimeZone24.equals((java.lang.Object) instant31);
        org.joda.time.MutableDateTime mutableDateTime33 = instant1.toMutableDateTime(dateTimeZone24);
        java.util.TimeZone timeZone34 = null;
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.forTimeZone(timeZone34);
        java.lang.String str37 = dateTimeZone35.getNameKey((long) 100);
        boolean boolean38 = dateTimeZone35.isFixed();
        org.joda.time.chrono.GJChronology gJChronology39 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone35);
        int int40 = gJChronology39.getMinimumDaysInFirstWeek();
        java.lang.String str41 = gJChronology39.toString();
        org.joda.time.Chronology chronology42 = gJChronology39.withUTC();
        org.joda.time.Instant instant44 = new org.joda.time.Instant(52L);
        boolean boolean45 = instant44.isEqualNow();
        java.lang.String str46 = instant44.toString();
        java.lang.String str47 = instant44.toString();
        org.joda.time.Instant instant50 = instant44.withDurationAdded(115200000L, (int) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone51 = instant44.getZone();
        org.joda.time.Chronology chronology52 = gJChronology39.withZone(dateTimeZone51);
        org.joda.time.DurationField durationField53 = gJChronology39.millis();
        org.joda.time.DurationField durationField54 = gJChronology39.weeks();
        boolean boolean55 = dateTimeZone24.equals((java.lang.Object) durationField54);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and mutableDateTime33", (instant1.compareTo(mutableDateTime33) == 0) == instant1.equals(mutableDateTime33));
    }

    @Test
    public void test1883() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1883");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField3 = gJChronology2.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.weekyear();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.halfdayOfDay();
        org.joda.time.DurationField durationField6 = gJChronology2.years();
        org.joda.time.DurationField durationField7 = gJChronology2.minutes();
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        long long11 = gJChronology2.add(readablePeriod8, (-42L), (int) '4');
        org.joda.time.Chronology chronology12 = gJChronology2.withUTC();
        org.joda.time.DateTimeField dateTimeField13 = gJChronology2.minuteOfHour();
        org.joda.time.DurationField durationField14 = gJChronology2.minutes();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology2.era();
        org.joda.time.DateTimeField dateTimeField16 = gJChronology2.yearOfEra();
        org.joda.time.DurationField durationField17 = gJChronology2.eras();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField17, durationField6, and durationField7", !(durationField17.compareTo(durationField6) == 0) || (Math.signum(durationField17.compareTo(durationField7)) == Math.signum(durationField6.compareTo(durationField7))));
    }

    @Test
    public void test1884() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1884");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField3 = gJChronology2.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.weekyearOfCentury();
        org.joda.time.Instant instant5 = gJChronology2.getGregorianCutover();
        org.joda.time.Instant instant7 = instant5.withMillis(0L);
        org.joda.time.Instant instant9 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone10 = null;
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forTimeZone(timeZone10);
        org.joda.time.chrono.GJChronology gJChronology12 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone11);
        org.joda.time.DateTimeField dateTimeField13 = gJChronology12.millisOfSecond();
        int int14 = instant9.get(dateTimeField13);
        org.joda.time.Instant instant16 = instant9.plus(0L);
        int int17 = instant7.compareTo((org.joda.time.ReadableInstant) instant16);
        org.joda.time.Instant instant19 = new org.joda.time.Instant(52L);
        boolean boolean20 = instant19.isEqualNow();
        org.joda.time.ReadableDuration readableDuration21 = null;
        org.joda.time.Instant instant22 = instant19.plus(readableDuration21);
        boolean boolean24 = instant22.equals((java.lang.Object) ' ');
        boolean boolean25 = instant16.isEqual((org.joda.time.ReadableInstant) instant22);
        java.lang.String str26 = instant16.toString();
        org.joda.time.ReadableDuration readableDuration27 = null;
        org.joda.time.Instant instant29 = instant16.withDurationAdded(readableDuration27, 1431201);
        java.lang.Object obj30 = null;
        boolean boolean31 = instant16.equals(obj30);
        java.util.Date date32 = instant16.toDate();
        java.util.Date date33 = instant16.toDate();
        boolean boolean34 = instant16.isBeforeNow();
        org.joda.time.DateTimeZone dateTimeZone35 = instant16.getZone();
        org.joda.time.MutableDateTime mutableDateTime36 = instant16.toMutableDateTimeISO();
        boolean boolean38 = instant16.isEqual(3692163384000L);
        org.joda.time.Instant instant40 = new org.joda.time.Instant(52L);
        boolean boolean41 = instant40.isEqualNow();
        java.lang.String str42 = instant40.toString();
        java.util.TimeZone timeZone43 = null;
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.forTimeZone(timeZone43);
        org.joda.time.chrono.GJChronology gJChronology45 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone44);
        java.util.Locale locale47 = new java.util.Locale("hi!");
        java.lang.String str48 = locale47.getCountry();
        java.util.Locale locale49 = java.util.Locale.getDefault();
        java.lang.String str50 = locale49.getDisplayName();
        java.lang.String str51 = locale47.getDisplayScript(locale49);
        boolean boolean52 = dateTimeZone44.equals((java.lang.Object) locale49);
        int int54 = dateTimeZone44.getOffsetFromLocal((long) (short) 10);
        java.util.TimeZone timeZone55 = null;
        org.joda.time.DateTimeZone dateTimeZone56 = org.joda.time.DateTimeZone.forTimeZone(timeZone55);
        org.joda.time.chrono.GJChronology gJChronology57 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone56);
        org.joda.time.DateTimeField dateTimeField58 = gJChronology57.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField59 = gJChronology57.weekyearOfCentury();
        org.joda.time.Instant instant60 = gJChronology57.getGregorianCutover();
        org.joda.time.Instant instant62 = instant60.withMillis(0L);
        org.joda.time.Instant instant64 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone65 = null;
        org.joda.time.DateTimeZone dateTimeZone66 = org.joda.time.DateTimeZone.forTimeZone(timeZone65);
        org.joda.time.chrono.GJChronology gJChronology67 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone66);
        org.joda.time.DateTimeField dateTimeField68 = gJChronology67.millisOfSecond();
        int int69 = instant64.get(dateTimeField68);
        org.joda.time.Instant instant71 = instant64.plus(0L);
        int int72 = instant62.compareTo((org.joda.time.ReadableInstant) instant71);
        org.joda.time.DateTimeFieldType dateTimeFieldType73 = null;
        boolean boolean74 = instant71.isSupported(dateTimeFieldType73);
        int int75 = dateTimeZone44.getOffset((org.joda.time.ReadableInstant) instant71);
        boolean boolean76 = instant40.isAfter((org.joda.time.ReadableInstant) instant71);
        org.joda.time.ReadableDuration readableDuration77 = null;
        org.joda.time.Instant instant79 = instant40.withDurationAdded(readableDuration77, 1);
        boolean boolean80 = instant79.isEqualNow();
        org.joda.time.Instant instant81 = instant79.toInstant();
        org.joda.time.Instant instant83 = instant79.plus(259199996884004L);
        org.joda.time.Instant instant85 = instant83.plus(261273600604800000L);
        org.joda.time.DateTimeFieldType dateTimeFieldType86 = null;
        boolean boolean87 = instant83.isSupported(dateTimeFieldType86);
        boolean boolean88 = instant16.isEqual((org.joda.time.ReadableInstant) instant83);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant16 and mutableDateTime36", (instant16.compareTo(mutableDateTime36) == 0) == instant16.equals(mutableDateTime36));
    }

    @Test
    public void test1885() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1885");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = gJChronology2.halfdays();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.millisOfDay();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.minuteOfDay();
        org.joda.time.DurationField durationField6 = gJChronology2.centuries();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology2.halfdayOfDay();
        java.util.Locale locale8 = java.util.Locale.ITALIAN;
        java.util.Locale locale9 = locale8.stripExtensions();
        java.util.Locale locale10 = java.util.Locale.CANADA;
        java.lang.String str11 = locale8.getDisplayVariant(locale10);
        boolean boolean12 = gJChronology2.equals((java.lang.Object) locale10);
        org.joda.time.DateTimeField dateTimeField13 = gJChronology2.weekyear();
        org.joda.time.DateTimeField dateTimeField14 = gJChronology2.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology2.hourOfDay();
        org.joda.time.DateTimeField dateTimeField16 = gJChronology2.centuryOfEra();
        java.lang.String str17 = gJChronology2.toString();
        org.joda.time.DurationField durationField18 = gJChronology2.eras();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField18, durationField3, and durationField6", !(durationField18.compareTo(durationField3) == 0) || (Math.signum(durationField18.compareTo(durationField6)) == Math.signum(durationField3.compareTo(durationField6))));
    }

    @Test
    public void test1886() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1886");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        long long6 = dateTimeZone1.convertLocalToUTC((long) (byte) -1, true, 0L);
        boolean boolean8 = dateTimeZone1.equals((java.lang.Object) true);
        org.joda.time.chrono.GJChronology gJChronology9 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        boolean boolean11 = dateTimeZone1.isStandardOffset(43200100L);
        java.util.Locale locale15 = new java.util.Locale("UTC", "zh_TW");
        java.util.Locale locale16 = java.util.Locale.CHINESE;
        boolean boolean17 = locale16.hasExtensions();
        java.util.Locale.setDefault(locale16);
        java.lang.String str19 = locale15.getDisplayLanguage(locale16);
        java.lang.String str20 = locale16.getVariant();
        java.lang.String str21 = locale16.getCountry();
        java.util.Locale locale24 = new java.util.Locale("UTC", "zh_TW");
        java.util.Locale locale25 = java.util.Locale.CHINESE;
        boolean boolean26 = locale25.hasExtensions();
        java.util.Locale.setDefault(locale25);
        java.lang.String str28 = locale24.getDisplayLanguage(locale25);
        java.lang.String str29 = locale25.getVariant();
        java.lang.String str30 = locale16.getDisplayName(locale25);
        java.lang.String str31 = dateTimeZone1.getShortName((-2208729599948L), locale25);
        java.lang.String str33 = dateTimeZone1.getNameKey((long) 432000001);
        org.joda.time.Instant instant35 = new org.joda.time.Instant(52L);
        boolean boolean36 = instant35.isEqualNow();
        java.lang.String str37 = instant35.toString();
        java.lang.String str38 = instant35.toString();
        org.joda.time.Instant instant41 = instant35.withDurationAdded(115200000L, (int) (short) 1);
        java.util.TimeZone timeZone42 = null;
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.forTimeZone(timeZone42);
        java.lang.String str45 = dateTimeZone43.getNameKey((long) 100);
        boolean boolean46 = dateTimeZone43.isFixed();
        org.joda.time.DateTime dateTime47 = instant35.toDateTime(dateTimeZone43);
        org.joda.time.chrono.GJChronology gJChronology48 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1, (org.joda.time.ReadableInstant) instant35);
        boolean boolean50 = dateTimeZone1.isStandardOffset(1431104L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant35 and dateTime47", (instant35.compareTo(dateTime47) == 0) == instant35.equals(dateTime47));
    }

    @Test
    public void test1887() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1887");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        boolean boolean2 = instant1.isEqualNow();
        org.joda.time.ReadableDuration readableDuration3 = null;
        org.joda.time.Instant instant4 = instant1.plus(readableDuration3);
        org.joda.time.Instant instant6 = instant1.withMillis((long) 4);
        boolean boolean8 = instant6.isEqual(0L);
        java.util.TimeZone timeZone9 = null;
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forTimeZone(timeZone9);
        org.joda.time.chrono.GJChronology gJChronology11 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone10);
        org.joda.time.DurationField durationField12 = gJChronology11.halfdays();
        org.joda.time.Chronology chronology13 = gJChronology11.withUTC();
        java.lang.String str14 = gJChronology11.toString();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology11.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField16 = gJChronology11.minuteOfDay();
        boolean boolean17 = instant6.equals((java.lang.Object) dateTimeField16);
        org.joda.time.MutableDateTime mutableDateTime18 = instant6.toMutableDateTimeISO();
        org.joda.time.DateTime dateTime19 = instant6.toDateTime();
        java.util.TimeZone timeZone20 = null;
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forTimeZone(timeZone20);
        org.joda.time.chrono.GJChronology gJChronology22 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone21);
        org.joda.time.DateTimeField dateTimeField23 = gJChronology22.millisOfSecond();
        org.joda.time.DurationField durationField24 = gJChronology22.millis();
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        long long28 = gJChronology22.add(readablePeriod25, (long) 'a', (int) '4');
        org.joda.time.DateTimeZone dateTimeZone29 = gJChronology22.getZone();
        org.joda.time.Instant instant31 = new org.joda.time.Instant(52L);
        boolean boolean32 = instant31.isEqualNow();
        org.joda.time.ReadableDuration readableDuration33 = null;
        org.joda.time.Instant instant34 = instant31.plus(readableDuration33);
        long long35 = instant31.getMillis();
        java.lang.Object obj36 = null;
        boolean boolean37 = instant31.equals(obj36);
        org.joda.time.Instant instant39 = new org.joda.time.Instant(52L);
        boolean boolean40 = instant39.isEqualNow();
        org.joda.time.ReadableDuration readableDuration41 = null;
        org.joda.time.Instant instant42 = instant39.plus(readableDuration41);
        long long43 = instant39.getMillis();
        java.lang.String str44 = instant39.toString();
        org.joda.time.Instant instant45 = instant39.toInstant();
        org.joda.time.ReadableDuration readableDuration46 = null;
        org.joda.time.Instant instant48 = instant39.withDurationAdded(readableDuration46, (int) 'x');
        org.joda.time.Instant instant49 = instant39.toInstant();
        int int50 = instant31.compareTo((org.joda.time.ReadableInstant) instant39);
        int int51 = dateTimeZone29.getOffset((org.joda.time.ReadableInstant) instant31);
        boolean boolean52 = dateTime19.isAfter((org.joda.time.ReadableInstant) instant31);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant6 and mutableDateTime18", (instant6.compareTo(mutableDateTime18) == 0) == instant6.equals(mutableDateTime18));
    }

    @Test
    public void test1888() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1888");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField3 = gJChronology2.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.weekyearOfCentury();
        org.joda.time.Instant instant5 = gJChronology2.getGregorianCutover();
        org.joda.time.Instant instant7 = instant5.withMillis(0L);
        org.joda.time.Instant instant9 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone10 = null;
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forTimeZone(timeZone10);
        org.joda.time.chrono.GJChronology gJChronology12 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone11);
        org.joda.time.DateTimeField dateTimeField13 = gJChronology12.millisOfSecond();
        int int14 = instant9.get(dateTimeField13);
        org.joda.time.Instant instant16 = instant9.plus(0L);
        int int17 = instant7.compareTo((org.joda.time.ReadableInstant) instant16);
        org.joda.time.Instant instant19 = new org.joda.time.Instant(52L);
        boolean boolean20 = instant19.isEqualNow();
        org.joda.time.ReadableDuration readableDuration21 = null;
        org.joda.time.Instant instant22 = instant19.plus(readableDuration21);
        boolean boolean24 = instant22.equals((java.lang.Object) ' ');
        boolean boolean25 = instant16.isEqual((org.joda.time.ReadableInstant) instant22);
        java.lang.String str26 = instant16.toString();
        org.joda.time.Instant instant27 = instant16.toInstant();
        org.joda.time.DateTime dateTime28 = instant16.toDateTime();
        java.util.TimeZone timeZone29 = null;
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forTimeZone(timeZone29);
        org.joda.time.chrono.GJChronology gJChronology31 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone30);
        java.util.Locale locale33 = new java.util.Locale("hi!");
        java.lang.String str34 = locale33.getCountry();
        java.util.Locale locale35 = java.util.Locale.getDefault();
        java.lang.String str36 = locale35.getDisplayName();
        java.lang.String str37 = locale33.getDisplayScript(locale35);
        boolean boolean38 = dateTimeZone30.equals((java.lang.Object) locale35);
        int int40 = dateTimeZone30.getOffsetFromLocal((long) (short) 10);
        java.util.TimeZone timeZone41 = null;
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.forTimeZone(timeZone41);
        org.joda.time.chrono.GJChronology gJChronology43 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone42);
        org.joda.time.DateTimeField dateTimeField44 = gJChronology43.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField45 = gJChronology43.weekyearOfCentury();
        org.joda.time.Instant instant46 = gJChronology43.getGregorianCutover();
        org.joda.time.Instant instant48 = instant46.withMillis(0L);
        org.joda.time.Instant instant50 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone51 = null;
        org.joda.time.DateTimeZone dateTimeZone52 = org.joda.time.DateTimeZone.forTimeZone(timeZone51);
        org.joda.time.chrono.GJChronology gJChronology53 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone52);
        org.joda.time.DateTimeField dateTimeField54 = gJChronology53.millisOfSecond();
        int int55 = instant50.get(dateTimeField54);
        org.joda.time.Instant instant57 = instant50.plus(0L);
        int int58 = instant48.compareTo((org.joda.time.ReadableInstant) instant57);
        org.joda.time.DateTimeFieldType dateTimeFieldType59 = null;
        boolean boolean60 = instant57.isSupported(dateTimeFieldType59);
        int int61 = dateTimeZone30.getOffset((org.joda.time.ReadableInstant) instant57);
        org.joda.time.DateTime dateTime62 = instant57.toDateTimeISO();
        int int63 = dateTime28.compareTo((org.joda.time.ReadableInstant) dateTime62);
        java.util.TimeZone timeZone64 = null;
        org.joda.time.DateTimeZone dateTimeZone65 = org.joda.time.DateTimeZone.forTimeZone(timeZone64);
        org.joda.time.chrono.GJChronology gJChronology66 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone65);
        org.joda.time.DateTimeField dateTimeField67 = gJChronology66.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField68 = gJChronology66.weekyearOfCentury();
        org.joda.time.Instant instant69 = gJChronology66.getGregorianCutover();
        org.joda.time.Instant instant71 = instant69.withMillis(0L);
        org.joda.time.Instant instant73 = instant71.minus(0L);
        boolean boolean74 = dateTime28.isBefore((org.joda.time.ReadableInstant) instant71);
        org.joda.time.DateTime dateTime75 = instant71.toDateTime();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant9 and dateTime28", (instant9.compareTo(dateTime28) == 0) == instant9.equals(dateTime28));
    }

    @Test
    public void test1889() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1889");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField3 = gJChronology2.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.weekyearOfCentury();
        org.joda.time.Instant instant5 = gJChronology2.getGregorianCutover();
        org.joda.time.Instant instant7 = instant5.withMillis(0L);
        org.joda.time.Instant instant9 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone10 = null;
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forTimeZone(timeZone10);
        org.joda.time.chrono.GJChronology gJChronology12 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone11);
        org.joda.time.DateTimeField dateTimeField13 = gJChronology12.millisOfSecond();
        int int14 = instant9.get(dateTimeField13);
        org.joda.time.Instant instant16 = instant9.plus(0L);
        int int17 = instant7.compareTo((org.joda.time.ReadableInstant) instant16);
        org.joda.time.Instant instant19 = new org.joda.time.Instant(52L);
        boolean boolean20 = instant19.isEqualNow();
        org.joda.time.ReadableDuration readableDuration21 = null;
        org.joda.time.Instant instant22 = instant19.plus(readableDuration21);
        boolean boolean24 = instant22.equals((java.lang.Object) ' ');
        boolean boolean25 = instant16.isEqual((org.joda.time.ReadableInstant) instant22);
        java.lang.String str26 = instant16.toString();
        org.joda.time.Instant instant27 = new org.joda.time.Instant((java.lang.Object) str26);
        org.joda.time.Instant instant29 = instant27.plus(3692163384000L);
        boolean boolean30 = instant29.isBeforeNow();
        java.util.Date date31 = instant29.toDate();
        boolean boolean33 = instant29.isAfter(230523534360000000L);
        org.joda.time.Instant instant36 = instant29.withDurationAdded((-85477377L), 33000052);
        org.joda.time.DateTimeZone dateTimeZone37 = null;
        org.joda.time.MutableDateTime mutableDateTime38 = instant36.toMutableDateTime(dateTimeZone37);
        org.joda.time.Instant instant41 = instant36.withDurationAdded((long) (-25), 7200);
        org.joda.time.ReadableDuration readableDuration42 = null;
        org.joda.time.Instant instant43 = instant36.minus(readableDuration42);
        org.joda.time.Chronology chronology44 = instant36.getChronology();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime38 and instant36", (mutableDateTime38.compareTo(instant36) == 0) == mutableDateTime38.equals(instant36));
    }

    @Test
    public void test1890() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1890");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        boolean boolean2 = instant1.isEqualNow();
        java.lang.String str3 = instant1.toString();
        org.joda.time.Instant instant5 = new org.joda.time.Instant(52L);
        boolean boolean6 = instant5.isEqualNow();
        java.lang.String str7 = instant5.toString();
        java.lang.String str8 = instant5.toString();
        org.joda.time.Instant instant11 = instant5.withDurationAdded(115200000L, (int) (short) 1);
        int int12 = instant1.compareTo((org.joda.time.ReadableInstant) instant5);
        org.joda.time.Instant instant14 = instant5.plus((-26442599999L));
        org.joda.time.format.DateTimeFormatter dateTimeFormatter15 = null;
        java.lang.String str16 = instant5.toString(dateTimeFormatter15);
        org.joda.time.MutableDateTime mutableDateTime17 = instant5.toMutableDateTimeISO();
        org.joda.time.Instant instant19 = new org.joda.time.Instant(52L);
        boolean boolean20 = instant19.isEqualNow();
        java.lang.String str21 = instant19.toString();
        java.lang.String str22 = instant19.toString();
        org.joda.time.Instant instant25 = instant19.withDurationAdded(115200000L, (int) (short) 1);
        org.joda.time.Instant instant26 = instant19.toInstant();
        org.joda.time.Instant instant29 = instant19.withDurationAdded(4156171L, (-19));
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.UTC;
        java.util.Locale locale32 = java.util.Locale.ITALIAN;
        java.util.Locale locale33 = locale32.stripExtensions();
        java.util.Locale locale34 = java.util.Locale.CANADA;
        java.lang.String str35 = locale32.getDisplayVariant(locale34);
        java.lang.String str36 = locale34.getDisplayLanguage();
        java.lang.String str37 = locale34.getDisplayScript();
        java.lang.String str38 = dateTimeZone30.getShortName(97000L, locale34);
        long long42 = dateTimeZone30.convertLocalToUTC((long) 30, true, 1101316424L);
        org.joda.time.MutableDateTime mutableDateTime43 = instant19.toMutableDateTime(dateTimeZone30);
        org.joda.time.DateTime dateTime44 = mutableDateTime17.toDateTime(dateTimeZone30);
        java.util.Locale locale47 = new java.util.Locale("hi!");
        java.lang.String str48 = locale47.getCountry();
        java.lang.String str49 = locale47.getLanguage();
        java.lang.String str50 = locale47.getLanguage();
        java.util.Set<java.lang.String> strSet51 = locale47.getUnicodeLocaleAttributes();
        java.util.Locale.Builder builder52 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder53 = builder52.clear();
        java.util.Locale.Builder builder55 = builder53.removeUnicodeLocaleAttribute("und");
        java.util.Locale.Builder builder56 = builder55.clearExtensions();
        java.util.Locale.Builder builder58 = builder56.setLanguage("de");
        java.util.Locale locale59 = java.util.Locale.FRENCH;
        java.util.Locale locale60 = java.util.Locale.ITALIAN;
        java.util.Locale locale61 = locale60.stripExtensions();
        java.util.Locale locale62 = java.util.Locale.CANADA;
        java.lang.String str63 = locale60.getDisplayVariant(locale62);
        java.lang.String str64 = locale59.getDisplayScript(locale60);
        java.util.Set<java.lang.Character> charSet65 = locale60.getExtensionKeys();
        java.util.Locale.Builder builder66 = builder56.setLocale(locale60);
        java.util.Locale locale67 = builder66.build();
        java.lang.String str68 = locale47.getDisplayCountry(locale67);
        java.lang.String str69 = dateTimeZone30.getShortName(0L, locale47);
        java.lang.Object obj70 = locale47.clone();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and mutableDateTime17", (instant1.compareTo(mutableDateTime17) == 0) == instant1.equals(mutableDateTime17));
    }

    @Test
    public void test1891() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1891");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str3 = dateTimeZone1.getNameKey((long) 100);
        boolean boolean4 = dateTimeZone1.isFixed();
        java.util.Locale locale8 = new java.util.Locale("DurationField[halfdays]", "\u82f1\u6587");
        java.lang.String str9 = dateTimeZone1.getName((long) (short) 10, locale8);
        org.joda.time.Instant instant11 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone12 = null;
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forTimeZone(timeZone12);
        org.joda.time.chrono.GJChronology gJChronology14 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone13);
        org.joda.time.DateTimeField dateTimeField15 = gJChronology14.millisOfSecond();
        int int16 = instant11.get(dateTimeField15);
        org.joda.time.Chronology chronology17 = instant11.getChronology();
        org.joda.time.chrono.GJChronology gJChronology18 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1, (org.joda.time.ReadableInstant) instant11);
        org.joda.time.DurationField durationField19 = gJChronology18.eras();
        org.joda.time.DurationField durationField20 = gJChronology18.eras();
        org.joda.time.DurationField durationField21 = gJChronology18.centuries();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField19, durationField21, and durationField19", !(durationField19.compareTo(durationField21) == 0) || (Math.signum(durationField19.compareTo(durationField19)) == Math.signum(durationField21.compareTo(durationField19))));
    }

    @Test
    public void test1892() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1892");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        java.util.Locale locale4 = new java.util.Locale("hi!");
        java.lang.String str5 = locale4.getCountry();
        java.util.Locale locale6 = java.util.Locale.getDefault();
        java.lang.String str7 = locale6.getDisplayName();
        java.lang.String str8 = locale4.getDisplayScript(locale6);
        boolean boolean9 = dateTimeZone1.equals((java.lang.Object) locale6);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetMillis((int) '4');
        java.util.TimeZone timeZone12 = dateTimeZone11.toTimeZone();
        long long15 = dateTimeZone11.adjustOffset((long) 0, false);
        int int17 = dateTimeZone11.getOffsetFromLocal((-26438399999L));
        long long19 = dateTimeZone1.getMillisKeepLocal(dateTimeZone11, (long) (byte) 10);
        org.joda.time.Instant instant21 = new org.joda.time.Instant(52L);
        boolean boolean22 = instant21.isEqualNow();
        org.joda.time.ReadableDuration readableDuration23 = null;
        org.joda.time.Instant instant24 = instant21.plus(readableDuration23);
        long long25 = instant21.getMillis();
        java.lang.String str26 = instant21.toString();
        org.joda.time.Instant instant27 = instant21.toInstant();
        org.joda.time.ReadableDuration readableDuration28 = null;
        org.joda.time.Instant instant30 = instant21.withDurationAdded(readableDuration28, (int) 'x');
        java.util.TimeZone timeZone31 = null;
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.forTimeZone(timeZone31);
        org.joda.time.chrono.GJChronology gJChronology33 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone32);
        org.joda.time.DateTimeField dateTimeField34 = gJChronology33.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField35 = gJChronology33.yearOfCentury();
        int int36 = instant30.get(dateTimeField35);
        org.joda.time.chrono.GJChronology gJChronology37 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone11, (org.joda.time.ReadableInstant) instant30);
        org.joda.time.Instant instant38 = instant30.toInstant();
        java.util.Date date39 = instant38.toDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType40 = null;
        boolean boolean41 = instant38.isSupported(dateTimeFieldType40);
        java.util.TimeZone timeZone42 = null;
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.forTimeZone(timeZone42);
        org.joda.time.chrono.GJChronology gJChronology44 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone43);
        org.joda.time.DurationField durationField45 = gJChronology44.halfdays();
        long long49 = gJChronology44.add((long) 'a', (-1L), (int) (short) 0);
        long long53 = gJChronology44.add((long) (byte) 0, (long) '4', 100);
        org.joda.time.DateTimeField dateTimeField54 = gJChronology44.minuteOfHour();
        org.joda.time.DurationField durationField55 = gJChronology44.hours();
        org.joda.time.DateTimeField dateTimeField56 = gJChronology44.monthOfYear();
        org.joda.time.DateTimeField dateTimeField57 = gJChronology44.secondOfMinute();
        org.joda.time.Chronology chronology58 = gJChronology44.withUTC();
        org.joda.time.DateTimeField dateTimeField59 = gJChronology44.weekyear();
        org.joda.time.DateTimeField dateTimeField60 = gJChronology44.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime61 = instant38.toMutableDateTime((org.joda.time.Chronology) gJChronology44);
        org.joda.time.ReadableDuration readableDuration62 = null;
        org.joda.time.Instant instant63 = instant38.plus(readableDuration62);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant63 and mutableDateTime61", (instant63.compareTo(mutableDateTime61) == 0) == instant63.equals(mutableDateTime61));
    }

    @Test
    public void test1893() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1893");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = gJChronology2.halfdays();
        long long7 = gJChronology2.add((long) 'a', (-1L), (int) (short) 0);
        org.joda.time.DateTimeField dateTimeField8 = gJChronology2.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField9 = gJChronology2.secondOfMinute();
        org.joda.time.Instant instant11 = new org.joda.time.Instant(52L);
        boolean boolean12 = instant11.isEqualNow();
        org.joda.time.ReadableDuration readableDuration13 = null;
        org.joda.time.Instant instant14 = instant11.plus(readableDuration13);
        boolean boolean15 = gJChronology2.equals((java.lang.Object) instant11);
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = null;
        boolean boolean17 = instant11.isSupported(dateTimeFieldType16);
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = null;
        boolean boolean19 = instant11.isSupported(dateTimeFieldType18);
        org.joda.time.DateTimeZone dateTimeZone20 = instant11.getZone();
        org.joda.time.Instant instant22 = instant11.plus((long) 'a');
        org.joda.time.Instant instant24 = instant11.withMillis(432000001L);
        org.joda.time.Instant instant26 = new org.joda.time.Instant(52L);
        boolean boolean27 = instant26.isEqualNow();
        org.joda.time.ReadableDuration readableDuration28 = null;
        org.joda.time.Instant instant29 = instant26.plus(readableDuration28);
        long long30 = instant26.getMillis();
        java.lang.String str31 = instant26.toString();
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.getDefault();
        long long34 = dateTimeZone32.nextTransition(1000L);
        org.joda.time.DateTime dateTime35 = instant26.toDateTime(dateTimeZone32);
        org.joda.time.DateTime dateTime36 = instant24.toDateTime(dateTimeZone32);
        java.util.TimeZone timeZone37 = null;
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forTimeZone(timeZone37);
        org.joda.time.chrono.GJChronology gJChronology39 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone38);
        org.joda.time.DateTimeField dateTimeField40 = gJChronology39.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField41 = gJChronology39.weekyearOfCentury();
        org.joda.time.Instant instant42 = gJChronology39.getGregorianCutover();
        org.joda.time.Instant instant44 = instant42.withMillis(0L);
        org.joda.time.Instant instant46 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone47 = null;
        org.joda.time.DateTimeZone dateTimeZone48 = org.joda.time.DateTimeZone.forTimeZone(timeZone47);
        org.joda.time.chrono.GJChronology gJChronology49 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone48);
        org.joda.time.DateTimeField dateTimeField50 = gJChronology49.millisOfSecond();
        int int51 = instant46.get(dateTimeField50);
        org.joda.time.Instant instant53 = instant46.plus(0L);
        int int54 = instant44.compareTo((org.joda.time.ReadableInstant) instant53);
        org.joda.time.Instant instant56 = new org.joda.time.Instant(52L);
        boolean boolean57 = instant56.isEqualNow();
        org.joda.time.ReadableDuration readableDuration58 = null;
        org.joda.time.Instant instant59 = instant56.plus(readableDuration58);
        boolean boolean61 = instant59.equals((java.lang.Object) ' ');
        boolean boolean62 = instant53.isEqual((org.joda.time.ReadableInstant) instant59);
        java.lang.String str63 = instant53.toString();
        org.joda.time.ReadableDuration readableDuration64 = null;
        org.joda.time.Instant instant66 = instant53.withDurationAdded(readableDuration64, 1431201);
        java.lang.Object obj67 = null;
        boolean boolean68 = instant53.equals(obj67);
        java.util.Date date69 = instant53.toDate();
        java.util.Date date70 = instant53.toDate();
        org.joda.time.Chronology chronology71 = instant53.getChronology();
        org.joda.time.Instant instant73 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone74 = null;
        org.joda.time.DateTimeZone dateTimeZone75 = org.joda.time.DateTimeZone.forTimeZone(timeZone74);
        org.joda.time.chrono.GJChronology gJChronology76 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone75);
        org.joda.time.DateTimeField dateTimeField77 = gJChronology76.millisOfSecond();
        int int78 = instant73.get(dateTimeField77);
        org.joda.time.Instant instant80 = instant73.plus(0L);
        long long81 = instant73.getMillis();
        org.joda.time.Instant instant83 = new org.joda.time.Instant(52L);
        boolean boolean84 = instant83.isEqualNow();
        java.lang.String str85 = instant83.toString();
        java.lang.String str86 = instant83.toString();
        org.joda.time.Instant instant88 = new org.joda.time.Instant(52L);
        boolean boolean89 = instant88.isEqualNow();
        org.joda.time.ReadableDuration readableDuration90 = null;
        org.joda.time.Instant instant91 = instant88.plus(readableDuration90);
        boolean boolean92 = instant83.isBefore((org.joda.time.ReadableInstant) instant91);
        org.joda.time.ReadableDuration readableDuration93 = null;
        org.joda.time.Instant instant94 = instant91.minus(readableDuration93);
        boolean boolean95 = instant73.isAfter((org.joda.time.ReadableInstant) instant91);
        boolean boolean96 = instant91.isEqualNow();
        long long97 = instant91.getMillis();
        int int98 = instant53.compareTo((org.joda.time.ReadableInstant) instant91);
        boolean boolean99 = dateTime36.isEqual((org.joda.time.ReadableInstant) instant91);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant11 and dateTime35", (instant11.compareTo(dateTime35) == 0) == instant11.equals(dateTime35));
    }

    @Test
    public void test1894() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1894");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField3 = gJChronology2.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.weekyearOfCentury();
        org.joda.time.Instant instant5 = gJChronology2.getGregorianCutover();
        org.joda.time.Instant instant7 = instant5.withMillis(0L);
        org.joda.time.Instant instant9 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone10 = null;
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forTimeZone(timeZone10);
        org.joda.time.chrono.GJChronology gJChronology12 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone11);
        org.joda.time.DateTimeField dateTimeField13 = gJChronology12.millisOfSecond();
        int int14 = instant9.get(dateTimeField13);
        org.joda.time.Instant instant16 = instant9.plus(0L);
        int int17 = instant7.compareTo((org.joda.time.ReadableInstant) instant16);
        org.joda.time.Instant instant19 = new org.joda.time.Instant(52L);
        boolean boolean20 = instant19.isEqualNow();
        org.joda.time.ReadableDuration readableDuration21 = null;
        org.joda.time.Instant instant22 = instant19.plus(readableDuration21);
        boolean boolean24 = instant22.equals((java.lang.Object) ' ');
        boolean boolean25 = instant16.isEqual((org.joda.time.ReadableInstant) instant22);
        org.joda.time.MutableDateTime mutableDateTime26 = instant22.toMutableDateTimeISO();
        java.util.TimeZone timeZone27 = null;
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forTimeZone(timeZone27);
        org.joda.time.chrono.GJChronology gJChronology29 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone28);
        org.joda.time.DateTimeField dateTimeField30 = gJChronology29.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField31 = gJChronology29.weekyearOfCentury();
        org.joda.time.Instant instant32 = gJChronology29.getGregorianCutover();
        org.joda.time.Instant instant34 = instant32.withMillis(0L);
        org.joda.time.Instant instant36 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone37 = null;
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forTimeZone(timeZone37);
        org.joda.time.chrono.GJChronology gJChronology39 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone38);
        org.joda.time.DateTimeField dateTimeField40 = gJChronology39.millisOfSecond();
        int int41 = instant36.get(dateTimeField40);
        org.joda.time.Instant instant43 = instant36.plus(0L);
        int int44 = instant34.compareTo((org.joda.time.ReadableInstant) instant43);
        org.joda.time.Instant instant46 = new org.joda.time.Instant(52L);
        boolean boolean47 = instant46.isEqualNow();
        org.joda.time.ReadableDuration readableDuration48 = null;
        org.joda.time.Instant instant49 = instant46.plus(readableDuration48);
        boolean boolean51 = instant49.equals((java.lang.Object) ' ');
        boolean boolean52 = instant43.isEqual((org.joda.time.ReadableInstant) instant49);
        java.lang.String str53 = instant43.toString();
        org.joda.time.ReadableDuration readableDuration54 = null;
        org.joda.time.Instant instant56 = instant43.withDurationAdded(readableDuration54, 1431201);
        boolean boolean57 = instant22.isEqual((org.joda.time.ReadableInstant) instant43);
        org.joda.time.DateTime dateTime58 = instant43.toDateTimeISO();
        org.joda.time.DateTimeFieldType dateTimeFieldType59 = null;
        boolean boolean60 = dateTime58.isSupported(dateTimeFieldType59);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant9 and mutableDateTime26", (instant9.compareTo(mutableDateTime26) == 0) == instant9.equals(mutableDateTime26));
    }

    @Test
    public void test1895() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1895");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(432000001000L);
        org.joda.time.Instant instant3 = new org.joda.time.Instant(52L);
        boolean boolean4 = instant3.isEqualNow();
        java.lang.String str5 = instant3.toString();
        java.lang.String str6 = instant3.toString();
        org.joda.time.Instant instant8 = new org.joda.time.Instant(52L);
        boolean boolean9 = instant8.isEqualNow();
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.Instant instant11 = instant8.plus(readableDuration10);
        boolean boolean12 = instant3.isBefore((org.joda.time.ReadableInstant) instant11);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = null;
        java.lang.String str14 = instant11.toString(dateTimeFormatter13);
        java.util.TimeZone timeZone15 = null;
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forTimeZone(timeZone15);
        java.util.Locale locale18 = java.util.Locale.ENGLISH;
        java.lang.String str19 = dateTimeZone16.getShortName((-2246399965L), locale18);
        java.util.Locale locale22 = new java.util.Locale("hi!");
        java.lang.String str23 = locale22.getCountry();
        java.lang.String str24 = locale22.getScript();
        java.util.Locale locale25 = java.util.Locale.ITALIAN;
        java.util.Locale locale26 = locale25.stripExtensions();
        java.util.Locale locale27 = java.util.Locale.CANADA;
        java.lang.String str28 = locale25.getDisplayVariant(locale27);
        java.lang.String str29 = locale22.getDisplayScript(locale25);
        java.util.Locale locale31 = java.util.Locale.forLanguageTag("");
        java.util.Locale locale32 = java.util.Locale.GERMAN;
        java.lang.String str33 = locale32.getDisplayCountry();
        java.lang.String str34 = locale31.getDisplayLanguage(locale32);
        java.lang.String str35 = locale22.getDisplayScript(locale32);
        java.util.Locale locale36 = locale32.stripExtensions();
        java.util.Set<java.lang.String> strSet37 = locale36.getUnicodeLocaleAttributes();
        java.lang.String str38 = dateTimeZone16.getName((long) (short) 100, locale36);
        java.util.TimeZone timeZone39 = null;
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.forTimeZone(timeZone39);
        org.joda.time.chrono.GJChronology gJChronology41 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone40);
        org.joda.time.DurationField durationField42 = gJChronology41.halfdays();
        org.joda.time.DateTimeField dateTimeField43 = gJChronology41.millisOfDay();
        org.joda.time.DateTimeField dateTimeField44 = gJChronology41.minuteOfDay();
        org.joda.time.DurationField durationField45 = gJChronology41.centuries();
        org.joda.time.DateTimeField dateTimeField46 = gJChronology41.dayOfYear();
        java.lang.String str47 = gJChronology41.toString();
        org.joda.time.DateTimeField dateTimeField48 = gJChronology41.dayOfYear();
        org.joda.time.DateTimeField dateTimeField49 = gJChronology41.dayOfMonth();
        org.joda.time.DurationField durationField50 = gJChronology41.years();
        org.joda.time.DateTimeField dateTimeField51 = gJChronology41.minuteOfHour();
        java.util.TimeZone timeZone52 = null;
        org.joda.time.DateTimeZone dateTimeZone53 = org.joda.time.DateTimeZone.forTimeZone(timeZone52);
        org.joda.time.chrono.GJChronology gJChronology54 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone53);
        org.joda.time.DurationField durationField55 = gJChronology54.halfdays();
        long long59 = gJChronology54.add((long) 'a', (-1L), (int) (short) 0);
        boolean boolean61 = gJChronology54.equals((java.lang.Object) 0);
        org.joda.time.DateTimeField dateTimeField62 = gJChronology54.dayOfMonth();
        org.joda.time.DurationField durationField63 = gJChronology54.days();
        long long67 = gJChronology54.add((long) '4', 432000000L, (int) (short) 0);
        org.joda.time.DurationField durationField68 = gJChronology54.years();
        java.util.TimeZone timeZone69 = null;
        org.joda.time.DateTimeZone dateTimeZone70 = org.joda.time.DateTimeZone.forTimeZone(timeZone69);
        java.lang.String str72 = dateTimeZone70.getNameKey((long) 100);
        boolean boolean73 = dateTimeZone70.isFixed();
        java.lang.String str74 = dateTimeZone70.toString();
        boolean boolean76 = dateTimeZone70.isStandardOffset((long) (byte) 0);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone70);
        org.joda.time.Chronology chronology78 = gJChronology54.withZone(dateTimeZone70);
        org.joda.time.Chronology chronology79 = gJChronology41.withZone(dateTimeZone70);
        long long81 = dateTimeZone16.getMillisKeepLocal(dateTimeZone70, 25107085123201869L);
        org.joda.time.MutableDateTime mutableDateTime82 = instant11.toMutableDateTime(dateTimeZone70);
        int int83 = instant1.compareTo((org.joda.time.ReadableInstant) instant11);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant3 and mutableDateTime82", (instant3.compareTo(mutableDateTime82) == 0) == instant3.equals(mutableDateTime82));
    }

    @Test
    public void test1896() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1896");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField3 = gJChronology2.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.weekyearOfCentury();
        org.joda.time.Instant instant5 = gJChronology2.getGregorianCutover();
        org.joda.time.Instant instant7 = instant5.withMillis(0L);
        org.joda.time.Instant instant9 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone10 = null;
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forTimeZone(timeZone10);
        org.joda.time.chrono.GJChronology gJChronology12 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone11);
        org.joda.time.DateTimeField dateTimeField13 = gJChronology12.millisOfSecond();
        int int14 = instant9.get(dateTimeField13);
        org.joda.time.Instant instant16 = instant9.plus(0L);
        int int17 = instant7.compareTo((org.joda.time.ReadableInstant) instant16);
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = null;
        boolean boolean19 = instant16.isSupported(dateTimeFieldType18);
        long long20 = instant16.getMillis();
        java.util.TimeZone timeZone21 = null;
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forTimeZone(timeZone21);
        org.joda.time.chrono.GJChronology gJChronology23 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone22);
        org.joda.time.DurationField durationField24 = gJChronology23.halfdays();
        org.joda.time.DateTimeField dateTimeField25 = gJChronology23.millisOfDay();
        org.joda.time.DateTimeField dateTimeField26 = gJChronology23.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField27 = gJChronology23.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone28 = gJChronology23.getZone();
        org.joda.time.DurationField durationField29 = gJChronology23.minutes();
        org.joda.time.DateTimeField dateTimeField30 = gJChronology23.millisOfSecond();
        org.joda.time.MutableDateTime mutableDateTime31 = instant16.toMutableDateTime((org.joda.time.Chronology) gJChronology23);
        java.lang.String str32 = instant16.toString();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant16 and mutableDateTime31", (instant16.compareTo(mutableDateTime31) == 0) == instant16.equals(mutableDateTime31));
    }

    @Test
    public void test1897() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1897");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        boolean boolean2 = instant1.isEqualNow();
        java.lang.String str3 = instant1.toString();
        org.joda.time.DateTimeZone dateTimeZone4 = instant1.getZone();
        java.util.TimeZone timeZone5 = null;
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        org.joda.time.chrono.GJChronology gJChronology7 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone6);
        org.joda.time.DurationField durationField8 = gJChronology7.halfdays();
        org.joda.time.DateTimeField dateTimeField9 = gJChronology7.millisOfDay();
        org.joda.time.DateTimeField dateTimeField10 = gJChronology7.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField11 = gJChronology7.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone12 = gJChronology7.getZone();
        boolean boolean13 = dateTimeZone12.isFixed();
        boolean boolean14 = dateTimeZone12.isFixed();
        java.lang.String str15 = dateTimeZone12.toString();
        java.util.TimeZone timeZone16 = null;
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forTimeZone(timeZone16);
        org.joda.time.chrono.GJChronology gJChronology18 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone17);
        org.joda.time.DateTimeField dateTimeField19 = gJChronology18.millisOfSecond();
        org.joda.time.DurationField durationField20 = gJChronology18.millis();
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        long long24 = gJChronology18.add(readablePeriod21, (long) 'a', (int) '4');
        org.joda.time.DateTimeField dateTimeField25 = gJChronology18.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField26 = gJChronology18.yearOfCentury();
        boolean boolean27 = dateTimeZone12.equals((java.lang.Object) dateTimeField26);
        int int29 = dateTimeZone12.getOffsetFromLocal((long) ' ');
        long long31 = dateTimeZone4.getMillisKeepLocal(dateTimeZone12, 1431201L);
        java.util.TimeZone timeZone32 = null;
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.forTimeZone(timeZone32);
        org.joda.time.chrono.GJChronology gJChronology34 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone33);
        org.joda.time.DateTimeField dateTimeField35 = gJChronology34.era();
        org.joda.time.DateTimeField dateTimeField36 = gJChronology34.weekyear();
        org.joda.time.DateTimeField dateTimeField37 = gJChronology34.weekyearOfCentury();
        org.joda.time.DurationField durationField38 = gJChronology34.millis();
        org.joda.time.DateTimeField dateTimeField39 = gJChronology34.dayOfWeek();
        org.joda.time.DurationField durationField40 = gJChronology34.millis();
        org.joda.time.Instant instant41 = gJChronology34.getGregorianCutover();
        org.joda.time.Instant instant44 = instant41.withDurationAdded((-61352915L), (-19));
        boolean boolean45 = instant44.isAfterNow();
        java.util.TimeZone timeZone46 = null;
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.forTimeZone(timeZone46);
        org.joda.time.chrono.GJChronology gJChronology48 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone47);
        org.joda.time.DateTimeField dateTimeField49 = gJChronology48.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField50 = gJChronology48.weekyear();
        org.joda.time.DurationField durationField51 = gJChronology48.centuries();
        org.joda.time.DateTimeField dateTimeField52 = gJChronology48.millisOfDay();
        org.joda.time.DateTimeField dateTimeField53 = gJChronology48.secondOfMinute();
        org.joda.time.DateTime dateTime54 = instant44.toDateTime((org.joda.time.Chronology) gJChronology48);
        org.joda.time.chrono.GJChronology gJChronology55 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone12, (org.joda.time.ReadableInstant) instant44);
        org.joda.time.DurationField durationField56 = gJChronology55.months();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant44 and dateTime54", (instant44.compareTo(dateTime54) == 0) == instant44.equals(dateTime54));
    }

    @Test
    public void test1898() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1898");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField3 = gJChronology2.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.weekyearOfCentury();
        org.joda.time.Instant instant5 = gJChronology2.getGregorianCutover();
        org.joda.time.Instant instant7 = instant5.withMillis(0L);
        org.joda.time.Instant instant9 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone10 = null;
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forTimeZone(timeZone10);
        org.joda.time.chrono.GJChronology gJChronology12 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone11);
        org.joda.time.DateTimeField dateTimeField13 = gJChronology12.millisOfSecond();
        int int14 = instant9.get(dateTimeField13);
        org.joda.time.Instant instant16 = instant9.plus(0L);
        int int17 = instant7.compareTo((org.joda.time.ReadableInstant) instant16);
        java.util.TimeZone timeZone18 = null;
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forTimeZone(timeZone18);
        org.joda.time.chrono.GJChronology gJChronology20 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone19);
        org.joda.time.DurationField durationField21 = gJChronology20.halfdays();
        org.joda.time.DateTimeField dateTimeField22 = gJChronology20.millisOfDay();
        org.joda.time.DateTimeField dateTimeField23 = gJChronology20.minuteOfDay();
        org.joda.time.DurationField durationField24 = gJChronology20.centuries();
        org.joda.time.DateTimeField dateTimeField25 = gJChronology20.halfdayOfDay();
        java.util.Locale locale26 = java.util.Locale.ITALIAN;
        java.util.Locale locale27 = locale26.stripExtensions();
        java.util.Locale locale28 = java.util.Locale.CANADA;
        java.lang.String str29 = locale26.getDisplayVariant(locale28);
        boolean boolean30 = gJChronology20.equals((java.lang.Object) locale28);
        org.joda.time.DateTime dateTime31 = instant7.toDateTime((org.joda.time.Chronology) gJChronology20);
        org.joda.time.DateTimeField dateTimeField32 = gJChronology20.dayOfMonth();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant7 and dateTime31", (instant7.compareTo(dateTime31) == 0) == instant7.equals(dateTime31));
    }

    @Test
    public void test1899() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1899");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        boolean boolean2 = instant1.isEqualNow();
        boolean boolean4 = instant1.isEqual(0L);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = null;
        boolean boolean6 = instant1.isSupported(dateTimeFieldType5);
        org.joda.time.Instant instant9 = instant1.withDurationAdded((-61827926399999L), (int) (short) -1);
        org.joda.time.MutableDateTime mutableDateTime10 = instant9.toMutableDateTime();
        org.joda.time.Instant instant11 = instant9.toInstant();
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.Instant instant13 = instant9.plus(readableDuration12);
        boolean boolean14 = instant9.isAfterNow();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime10 and instant9", (mutableDateTime10.compareTo(instant9) == 0) == mutableDateTime10.equals(instant9));
    }

    @Test
    public void test1900() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1900");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = gJChronology2.halfdays();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.millisOfDay();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.minuteOfDay();
        org.joda.time.DurationField durationField6 = gJChronology2.centuries();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology2.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField8 = gJChronology2.year();
        org.joda.time.DurationField durationField9 = gJChronology2.weekyears();
        org.joda.time.DurationField durationField10 = gJChronology2.minutes();
        org.joda.time.DateTimeField dateTimeField11 = gJChronology2.dayOfYear();
        org.joda.time.Chronology chronology12 = gJChronology2.withUTC();
        org.joda.time.DurationField durationField13 = chronology12.eras();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField13, durationField3, and durationField6", !(durationField13.compareTo(durationField3) == 0) || (Math.signum(durationField13.compareTo(durationField6)) == Math.signum(durationField3.compareTo(durationField6))));
    }

    @Test
    public void test1901() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1901");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        boolean boolean2 = instant1.isEqualNow();
        java.lang.String str3 = instant1.toString();
        java.lang.String str4 = instant1.toString();
        org.joda.time.Instant instant7 = instant1.withDurationAdded(115200000L, (int) (short) 1);
        boolean boolean8 = instant7.isBeforeNow();
        org.joda.time.DateTime dateTime9 = instant7.toDateTimeISO();
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = null;
        boolean boolean11 = instant7.isSupported(dateTimeFieldType10);
        org.joda.time.Instant instant13 = instant7.plus(3155695200000L);
        java.util.TimeZone timeZone14 = null;
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forTimeZone(timeZone14);
        org.joda.time.chrono.GJChronology gJChronology16 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone15);
        org.joda.time.DurationField durationField17 = gJChronology16.halfdays();
        org.joda.time.DateTimeField dateTimeField18 = gJChronology16.millisOfDay();
        org.joda.time.DateTimeField dateTimeField19 = gJChronology16.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField20 = gJChronology16.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField21 = gJChronology16.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField22 = gJChronology16.clockhourOfDay();
        org.joda.time.DateTime dateTime23 = instant7.toDateTime((org.joda.time.Chronology) gJChronology16);
        org.joda.time.DateTime dateTime24 = instant7.toDateTimeISO();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime9 and dateTime23", (dateTime9.compareTo(dateTime23) == 0) == dateTime9.equals(dateTime23));
    }

    @Test
    public void test1902() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1902");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str3 = dateTimeZone1.getNameKey((long) 100);
        long long6 = dateTimeZone1.convertLocalToUTC((-2246399965L), true);
        long long9 = dateTimeZone1.adjustOffset((long) '#', true);
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.chrono.GJChronology gJChronology11 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1, readableInstant10);
        org.joda.time.DurationField durationField12 = gJChronology11.years();
        org.joda.time.DurationField durationField13 = gJChronology11.hours();
        org.joda.time.DurationField durationField14 = gJChronology11.seconds();
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        long long18 = gJChronology11.add(readablePeriod15, (-61827739199L), (-3));
        java.util.TimeZone timeZone19 = null;
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forTimeZone(timeZone19);
        org.joda.time.chrono.GJChronology gJChronology21 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone20);
        org.joda.time.DateTimeField dateTimeField22 = gJChronology21.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField23 = gJChronology21.weekyearOfCentury();
        org.joda.time.Instant instant24 = gJChronology21.getGregorianCutover();
        org.joda.time.Instant instant26 = instant24.withMillis(0L);
        org.joda.time.Instant instant28 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone29 = null;
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forTimeZone(timeZone29);
        org.joda.time.chrono.GJChronology gJChronology31 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone30);
        org.joda.time.DateTimeField dateTimeField32 = gJChronology31.millisOfSecond();
        int int33 = instant28.get(dateTimeField32);
        org.joda.time.Instant instant35 = instant28.plus(0L);
        int int36 = instant26.compareTo((org.joda.time.ReadableInstant) instant35);
        org.joda.time.DateTimeFieldType dateTimeFieldType37 = null;
        boolean boolean38 = instant35.isSupported(dateTimeFieldType37);
        org.joda.time.Instant instant40 = new org.joda.time.Instant(52L);
        boolean boolean41 = instant40.isEqualNow();
        org.joda.time.ReadableDuration readableDuration42 = null;
        org.joda.time.Instant instant43 = instant40.plus(readableDuration42);
        int int44 = instant35.compareTo((org.joda.time.ReadableInstant) instant40);
        org.joda.time.Chronology chronology45 = instant35.getChronology();
        org.joda.time.Instant instant47 = new org.joda.time.Instant(52L);
        boolean boolean48 = instant47.isEqualNow();
        java.lang.String str49 = instant47.toString();
        org.joda.time.Instant instant51 = new org.joda.time.Instant(52L);
        boolean boolean52 = instant51.isEqualNow();
        java.lang.String str53 = instant51.toString();
        java.lang.String str54 = instant51.toString();
        org.joda.time.Instant instant57 = instant51.withDurationAdded(115200000L, (int) (short) 1);
        int int58 = instant47.compareTo((org.joda.time.ReadableInstant) instant51);
        org.joda.time.Instant instant60 = new org.joda.time.Instant(52L);
        boolean boolean61 = instant60.isEqualNow();
        org.joda.time.ReadableDuration readableDuration62 = null;
        org.joda.time.Instant instant63 = instant60.plus(readableDuration62);
        boolean boolean65 = instant63.equals((java.lang.Object) ' ');
        boolean boolean66 = instant51.isAfter((org.joda.time.ReadableInstant) instant63);
        org.joda.time.DateTime dateTime67 = instant51.toDateTime();
        boolean boolean68 = instant35.isBefore((org.joda.time.ReadableInstant) dateTime67);
        boolean boolean70 = instant35.isEqual((-64983772799999L));
        boolean boolean71 = gJChronology11.equals((java.lang.Object) boolean70);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant28 and dateTime67", (instant28.compareTo(dateTime67) == 0) == instant28.equals(dateTime67));
    }

    @Test
    public void test1903() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1903");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forTimeZone(timeZone2);
        org.joda.time.chrono.GJChronology gJChronology4 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone3);
        org.joda.time.DateTimeField dateTimeField5 = gJChronology4.millisOfSecond();
        int int6 = instant1.get(dateTimeField5);
        boolean boolean7 = instant1.isEqualNow();
        org.joda.time.DateTime dateTime8 = instant1.toDateTime();
        org.joda.time.Instant instant11 = instant1.withDurationAdded((long) 1431201, 1970);
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.Instant instant13 = instant11.minus(readableDuration12);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and dateTime8", (instant1.compareTo(dateTime8) == 0) == instant1.equals(dateTime8));
    }

    @Test
    public void test1904() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1904");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField3 = gJChronology2.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.weekyear();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.halfdayOfDay();
        org.joda.time.DurationField durationField6 = gJChronology2.weekyears();
        org.joda.time.DurationField durationField7 = gJChronology2.minutes();
        org.joda.time.DateTimeField dateTimeField8 = gJChronology2.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField9 = gJChronology2.minuteOfDay();
        java.util.TimeZone timeZone10 = null;
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forTimeZone(timeZone10);
        org.joda.time.chrono.GJChronology gJChronology12 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone11);
        org.joda.time.DurationField durationField13 = gJChronology12.halfdays();
        org.joda.time.DateTimeField dateTimeField14 = gJChronology12.millisOfDay();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology12.minuteOfDay();
        org.joda.time.DurationField durationField16 = gJChronology12.centuries();
        org.joda.time.DateTimeField dateTimeField17 = gJChronology12.dayOfYear();
        java.lang.String str18 = gJChronology12.toString();
        org.joda.time.DurationField durationField19 = gJChronology12.years();
        org.joda.time.DurationField durationField20 = gJChronology12.hours();
        org.joda.time.DurationField durationField21 = gJChronology12.days();
        org.joda.time.DateTimeZone dateTimeZone22 = gJChronology12.getZone();
        long long25 = dateTimeZone22.adjustOffset(2246400000L, false);
        org.joda.time.Chronology chronology26 = gJChronology2.withZone(dateTimeZone22);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on durationField6 and durationField19", (durationField6.compareTo(durationField19) == 0) == durationField6.equals(durationField19));
    }

    @Test
    public void test1905() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1905");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        boolean boolean2 = instant1.isEqualNow();
        org.joda.time.ReadableDuration readableDuration3 = null;
        org.joda.time.Instant instant4 = instant1.plus(readableDuration3);
        long long5 = instant1.getMillis();
        java.lang.String str6 = instant1.toString();
        org.joda.time.Instant instant7 = instant1.toInstant();
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.Instant instant10 = instant1.withDurationAdded(readableDuration8, (int) 'x');
        org.joda.time.Instant instant11 = instant1.toInstant();
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.Instant instant14 = instant11.withDurationAdded(readableDuration12, 1959);
        org.joda.time.Instant instant16 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone17 = null;
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forTimeZone(timeZone17);
        org.joda.time.chrono.GJChronology gJChronology19 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone18);
        org.joda.time.DateTimeField dateTimeField20 = gJChronology19.millisOfSecond();
        int int21 = instant16.get(dateTimeField20);
        org.joda.time.Instant instant23 = instant16.plus(0L);
        java.util.TimeZone timeZone24 = null;
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forTimeZone(timeZone24);
        org.joda.time.chrono.GJChronology gJChronology26 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone25);
        org.joda.time.DurationField durationField27 = gJChronology26.halfdays();
        long long31 = gJChronology26.add((long) 'a', (-1L), (int) (short) 0);
        boolean boolean33 = gJChronology26.equals((java.lang.Object) 0);
        org.joda.time.DateTimeField dateTimeField34 = gJChronology26.dayOfMonth();
        org.joda.time.DurationField durationField35 = gJChronology26.days();
        long long39 = gJChronology26.add((long) '4', 432000000L, (int) (short) 0);
        org.joda.time.DurationField durationField40 = gJChronology26.years();
        java.lang.String str41 = gJChronology26.toString();
        org.joda.time.DateTimeField dateTimeField42 = gJChronology26.hourOfDay();
        boolean boolean43 = instant23.equals((java.lang.Object) gJChronology26);
        org.joda.time.DateTime dateTime44 = instant23.toDateTime();
        boolean boolean45 = instant14.isEqual((org.joda.time.ReadableInstant) instant23);
        java.util.TimeZone timeZone46 = null;
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.forTimeZone(timeZone46);
        org.joda.time.chrono.GJChronology gJChronology48 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone47);
        org.joda.time.DurationField durationField49 = gJChronology48.halfdays();
        org.joda.time.DateTimeField dateTimeField50 = gJChronology48.millisOfDay();
        org.joda.time.DateTimeField dateTimeField51 = gJChronology48.minuteOfDay();
        org.joda.time.DurationField durationField52 = gJChronology48.centuries();
        org.joda.time.DateTimeField dateTimeField53 = gJChronology48.dayOfYear();
        java.lang.String str54 = gJChronology48.toString();
        org.joda.time.DateTimeField dateTimeField55 = gJChronology48.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone56 = gJChronology48.getZone();
        java.util.TimeZone timeZone57 = null;
        org.joda.time.DateTimeZone dateTimeZone58 = org.joda.time.DateTimeZone.forTimeZone(timeZone57);
        org.joda.time.chrono.GJChronology gJChronology59 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone58);
        java.util.Locale locale61 = new java.util.Locale("hi!");
        java.lang.String str62 = locale61.getCountry();
        java.util.Locale locale63 = java.util.Locale.getDefault();
        java.lang.String str64 = locale63.getDisplayName();
        java.lang.String str65 = locale61.getDisplayScript(locale63);
        boolean boolean66 = dateTimeZone58.equals((java.lang.Object) locale63);
        org.joda.time.Chronology chronology67 = gJChronology48.withZone(dateTimeZone58);
        org.joda.time.DateTimeField dateTimeField68 = gJChronology48.weekOfWeekyear();
        int int69 = instant23.get(dateTimeField68);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and dateTime44", (instant1.compareTo(dateTime44) == 0) == instant1.equals(dateTime44));
    }

    @Test
    public void test1906() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1906");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str3 = dateTimeZone1.getNameKey((long) 100);
        long long6 = dateTimeZone1.convertLocalToUTC((-2246399965L), true);
        long long10 = dateTimeZone1.convertLocalToUTC(4320000000L, true, (long) 'a');
        boolean boolean11 = dateTimeZone1.isFixed();
        long long13 = dateTimeZone1.nextTransition((long) 0);
        java.util.Locale locale18 = new java.util.Locale("zh-CN", "CA", "-01:52");
        java.lang.String str19 = dateTimeZone1.getName((-72948L), locale18);
        java.util.TimeZone timeZone20 = null;
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forTimeZone(timeZone20);
        org.joda.time.chrono.GJChronology gJChronology22 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone21);
        org.joda.time.DurationField durationField23 = gJChronology22.halfdays();
        long long27 = gJChronology22.add((long) 'a', (-1L), (int) (short) 0);
        org.joda.time.DateTimeField dateTimeField28 = gJChronology22.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField29 = gJChronology22.secondOfMinute();
        org.joda.time.Instant instant31 = new org.joda.time.Instant(52L);
        boolean boolean32 = instant31.isEqualNow();
        org.joda.time.ReadableDuration readableDuration33 = null;
        org.joda.time.Instant instant34 = instant31.plus(readableDuration33);
        boolean boolean35 = gJChronology22.equals((java.lang.Object) instant31);
        java.util.TimeZone timeZone36 = null;
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.forTimeZone(timeZone36);
        org.joda.time.chrono.GJChronology gJChronology38 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone37);
        org.joda.time.DurationField durationField39 = gJChronology38.halfdays();
        org.joda.time.DateTimeField dateTimeField40 = gJChronology38.millisOfDay();
        org.joda.time.DateTimeField dateTimeField41 = gJChronology38.minuteOfDay();
        org.joda.time.DurationField durationField42 = gJChronology38.centuries();
        org.joda.time.DateTimeField dateTimeField43 = gJChronology38.dayOfYear();
        java.lang.String str44 = gJChronology38.toString();
        org.joda.time.DateTimeField dateTimeField45 = gJChronology38.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone46 = gJChronology38.getZone();
        org.joda.time.DateTime dateTime47 = instant31.toDateTime((org.joda.time.Chronology) gJChronology38);
        boolean boolean49 = dateTime47.isBefore(262974605200L);
        org.joda.time.Instant instant51 = new org.joda.time.Instant(52L);
        boolean boolean52 = instant51.isEqualNow();
        org.joda.time.ReadableDuration readableDuration53 = null;
        org.joda.time.Instant instant54 = instant51.plus(readableDuration53);
        boolean boolean56 = instant54.equals((java.lang.Object) ' ');
        org.joda.time.format.DateTimeFormatter dateTimeFormatter57 = null;
        java.lang.String str58 = instant54.toString(dateTimeFormatter57);
        boolean boolean59 = dateTime47.isBefore((org.joda.time.ReadableInstant) instant54);
        org.joda.time.chrono.GJChronology gJChronology60 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1, (org.joda.time.ReadableInstant) instant54);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant31 and dateTime47", (instant31.compareTo(dateTime47) == 0) == instant31.equals(dateTime47));
    }

    @Test
    public void test1907() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1907");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = gJChronology2.halfdays();
        org.joda.time.Chronology chronology4 = gJChronology2.withUTC();
        long long8 = gJChronology2.add((long) (byte) 0, 4324200000L, 4);
        long long12 = gJChronology2.add(3155760000000L, (long) (short) 10, (int) 'u');
        org.joda.time.DateTimeField dateTimeField13 = gJChronology2.secondOfDay();
        org.joda.time.DurationField durationField14 = gJChronology2.seconds();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology2.dayOfMonth();
        org.joda.time.DurationField durationField16 = gJChronology2.eras();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField16, durationField3, and durationField14", !(durationField16.compareTo(durationField3) == 0) || (Math.signum(durationField16.compareTo(durationField14)) == Math.signum(durationField3.compareTo(durationField14))));
    }

    @Test
    public void test1908() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1908");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        boolean boolean2 = instant1.isEqualNow();
        java.lang.String str3 = instant1.toString();
        java.util.TimeZone timeZone4 = null;
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forTimeZone(timeZone4);
        org.joda.time.chrono.GJChronology gJChronology6 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone5);
        java.util.Locale locale8 = new java.util.Locale("hi!");
        java.lang.String str9 = locale8.getCountry();
        java.util.Locale locale10 = java.util.Locale.getDefault();
        java.lang.String str11 = locale10.getDisplayName();
        java.lang.String str12 = locale8.getDisplayScript(locale10);
        boolean boolean13 = dateTimeZone5.equals((java.lang.Object) locale10);
        int int15 = dateTimeZone5.getOffsetFromLocal((long) (short) 10);
        java.util.TimeZone timeZone16 = null;
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forTimeZone(timeZone16);
        org.joda.time.chrono.GJChronology gJChronology18 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone17);
        org.joda.time.DateTimeField dateTimeField19 = gJChronology18.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField20 = gJChronology18.weekyearOfCentury();
        org.joda.time.Instant instant21 = gJChronology18.getGregorianCutover();
        org.joda.time.Instant instant23 = instant21.withMillis(0L);
        org.joda.time.Instant instant25 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone26 = null;
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forTimeZone(timeZone26);
        org.joda.time.chrono.GJChronology gJChronology28 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone27);
        org.joda.time.DateTimeField dateTimeField29 = gJChronology28.millisOfSecond();
        int int30 = instant25.get(dateTimeField29);
        org.joda.time.Instant instant32 = instant25.plus(0L);
        int int33 = instant23.compareTo((org.joda.time.ReadableInstant) instant32);
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = null;
        boolean boolean35 = instant32.isSupported(dateTimeFieldType34);
        int int36 = dateTimeZone5.getOffset((org.joda.time.ReadableInstant) instant32);
        boolean boolean37 = instant1.isAfter((org.joda.time.ReadableInstant) instant32);
        org.joda.time.Instant instant39 = instant32.withMillis((long) 10);
        org.joda.time.DateTime dateTime40 = instant32.toDateTimeISO();
        boolean boolean42 = instant32.isBefore(328332L);
        org.joda.time.DateTime dateTime43 = instant32.toDateTimeISO();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and dateTime40", (instant1.compareTo(dateTime40) == 0) == instant1.equals(dateTime40));
    }

    @Test
    public void test1909() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1909");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forTimeZone(timeZone2);
        org.joda.time.chrono.GJChronology gJChronology4 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone3);
        org.joda.time.DateTimeField dateTimeField5 = gJChronology4.millisOfSecond();
        int int6 = instant1.get(dateTimeField5);
        org.joda.time.Instant instant8 = instant1.plus(0L);
        java.util.TimeZone timeZone9 = null;
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forTimeZone(timeZone9);
        org.joda.time.chrono.GJChronology gJChronology11 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone10);
        org.joda.time.DurationField durationField12 = gJChronology11.halfdays();
        org.joda.time.Chronology chronology13 = gJChronology11.withUTC();
        java.lang.String str14 = gJChronology11.toString();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology11.hourOfHalfday();
        int int16 = instant1.get(dateTimeField15);
        java.util.TimeZone timeZone17 = null;
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forTimeZone(timeZone17);
        org.joda.time.chrono.GJChronology gJChronology19 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone18);
        org.joda.time.DurationField durationField20 = gJChronology19.halfdays();
        long long24 = gJChronology19.add((long) 'a', (-1L), (int) (short) 0);
        org.joda.time.DateTimeField dateTimeField25 = gJChronology19.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField26 = gJChronology19.secondOfMinute();
        org.joda.time.Instant instant28 = new org.joda.time.Instant(52L);
        boolean boolean29 = instant28.isEqualNow();
        org.joda.time.ReadableDuration readableDuration30 = null;
        org.joda.time.Instant instant31 = instant28.plus(readableDuration30);
        boolean boolean32 = gJChronology19.equals((java.lang.Object) instant28);
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = null;
        boolean boolean34 = instant28.isSupported(dateTimeFieldType33);
        org.joda.time.DateTimeFieldType dateTimeFieldType35 = null;
        boolean boolean36 = instant28.isSupported(dateTimeFieldType35);
        org.joda.time.DateTimeZone dateTimeZone37 = instant28.getZone();
        boolean boolean38 = instant1.isAfter((org.joda.time.ReadableInstant) instant28);
        org.joda.time.Instant instant40 = instant1.minus((long) 70);
        org.joda.time.Instant instant42 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone43 = null;
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.forTimeZone(timeZone43);
        org.joda.time.chrono.GJChronology gJChronology45 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone44);
        org.joda.time.DateTimeField dateTimeField46 = gJChronology45.millisOfSecond();
        int int47 = instant42.get(dateTimeField46);
        boolean boolean48 = instant42.isEqualNow();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter49 = null;
        java.lang.String str50 = instant42.toString(dateTimeFormatter49);
        boolean boolean51 = instant1.isAfter((org.joda.time.ReadableInstant) instant42);
        org.joda.time.Instant instant53 = instant42.plus(863999948L);
        java.util.TimeZone timeZone54 = null;
        org.joda.time.DateTimeZone dateTimeZone55 = org.joda.time.DateTimeZone.forTimeZone(timeZone54);
        org.joda.time.chrono.GJChronology gJChronology56 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone55);
        org.joda.time.DurationField durationField57 = gJChronology56.halfdays();
        org.joda.time.DateTimeField dateTimeField58 = gJChronology56.minuteOfDay();
        java.util.TimeZone timeZone59 = null;
        org.joda.time.DateTimeZone dateTimeZone60 = org.joda.time.DateTimeZone.forTimeZone(timeZone59);
        java.lang.String str62 = dateTimeZone60.getNameKey((long) 100);
        boolean boolean63 = dateTimeZone60.isFixed();
        java.util.Locale locale67 = new java.util.Locale("DurationField[halfdays]", "\u82f1\u6587");
        java.lang.String str68 = dateTimeZone60.getName((long) (short) 10, locale67);
        boolean boolean69 = gJChronology56.equals((java.lang.Object) dateTimeZone60);
        boolean boolean70 = instant42.equals((java.lang.Object) gJChronology56);
        org.joda.time.DurationField durationField71 = gJChronology56.eras();
        org.joda.time.ReadablePeriod readablePeriod72 = null;
        long long75 = gJChronology56.add(readablePeriod72, (-481723L), 0);
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField12 and durationField71", Math.signum(durationField12.compareTo(durationField71)) == -Math.signum(durationField71.compareTo(durationField12)));
    }

    @Test
    public void test1910() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1910");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        boolean boolean2 = instant1.isEqualNow();
        org.joda.time.Instant instant4 = new org.joda.time.Instant(52L);
        org.joda.time.Instant instant6 = instant4.withMillis((long) 'u');
        boolean boolean7 = instant1.isAfter((org.joda.time.ReadableInstant) instant4);
        org.joda.time.Instant instant10 = instant1.withDurationAdded(747221751619200000L, (int) (byte) 0);
        org.joda.time.MutableDateTime mutableDateTime11 = instant1.toMutableDateTime();
        boolean boolean13 = mutableDateTime11.isAfter((long) 1582);
        java.util.TimeZone timeZone14 = null;
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forTimeZone(timeZone14);
        org.joda.time.chrono.GJChronology gJChronology16 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone15);
        org.joda.time.DurationField durationField17 = gJChronology16.halfdays();
        org.joda.time.DateTimeField dateTimeField18 = gJChronology16.millisOfDay();
        org.joda.time.DateTimeField dateTimeField19 = gJChronology16.minuteOfDay();
        org.joda.time.DurationField durationField20 = gJChronology16.centuries();
        org.joda.time.DateTimeField dateTimeField21 = gJChronology16.halfdayOfDay();
        java.util.Locale locale22 = java.util.Locale.ITALIAN;
        java.util.Locale locale23 = locale22.stripExtensions();
        java.util.Locale locale24 = java.util.Locale.CANADA;
        java.lang.String str25 = locale22.getDisplayVariant(locale24);
        boolean boolean26 = gJChronology16.equals((java.lang.Object) locale24);
        org.joda.time.DateTimeField dateTimeField27 = gJChronology16.secondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone28 = gJChronology16.getZone();
        org.joda.time.DateTimeZone dateTimeZone29 = gJChronology16.getZone();
        boolean boolean30 = mutableDateTime11.equals((java.lang.Object) gJChronology16);
        java.lang.String str31 = gJChronology16.toString();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and mutableDateTime11", (instant1.compareTo(mutableDateTime11) == 0) == instant1.equals(mutableDateTime11));
    }

    @Test
    public void test1911() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1911");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField3 = gJChronology2.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.weekyearOfCentury();
        org.joda.time.Instant instant5 = gJChronology2.getGregorianCutover();
        org.joda.time.Instant instant7 = instant5.withMillis(0L);
        org.joda.time.Instant instant9 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone10 = null;
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forTimeZone(timeZone10);
        org.joda.time.chrono.GJChronology gJChronology12 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone11);
        org.joda.time.DateTimeField dateTimeField13 = gJChronology12.millisOfSecond();
        int int14 = instant9.get(dateTimeField13);
        org.joda.time.Instant instant16 = instant9.plus(0L);
        int int17 = instant7.compareTo((org.joda.time.ReadableInstant) instant16);
        org.joda.time.Instant instant19 = new org.joda.time.Instant(52L);
        boolean boolean20 = instant19.isEqualNow();
        org.joda.time.ReadableDuration readableDuration21 = null;
        org.joda.time.Instant instant22 = instant19.plus(readableDuration21);
        boolean boolean24 = instant22.equals((java.lang.Object) ' ');
        boolean boolean25 = instant16.isEqual((org.joda.time.ReadableInstant) instant22);
        org.joda.time.MutableDateTime mutableDateTime26 = instant16.toMutableDateTime();
        org.joda.time.Instant instant28 = instant16.plus((long) 8);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter29 = null;
        java.lang.String str30 = instant16.toString(dateTimeFormatter29);
        java.util.Date date31 = instant16.toDate();
        org.joda.time.Instant instant32 = instant16.toInstant();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant32 and mutableDateTime26", (instant32.compareTo(mutableDateTime26) == 0) == instant32.equals(mutableDateTime26));
    }

    @Test
    public void test1912() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1912");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        int int4 = dateTimeZone1.getStandardOffset((long) (byte) 0);
        org.joda.time.Instant instant6 = new org.joda.time.Instant(52L);
        boolean boolean7 = instant6.isEqualNow();
        java.lang.String str8 = instant6.toString();
        java.util.TimeZone timeZone9 = null;
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forTimeZone(timeZone9);
        org.joda.time.chrono.GJChronology gJChronology11 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone10);
        java.util.Locale locale13 = new java.util.Locale("hi!");
        java.lang.String str14 = locale13.getCountry();
        java.util.Locale locale15 = java.util.Locale.getDefault();
        java.lang.String str16 = locale15.getDisplayName();
        java.lang.String str17 = locale13.getDisplayScript(locale15);
        boolean boolean18 = dateTimeZone10.equals((java.lang.Object) locale15);
        int int20 = dateTimeZone10.getOffsetFromLocal((long) (short) 10);
        java.util.TimeZone timeZone21 = null;
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forTimeZone(timeZone21);
        org.joda.time.chrono.GJChronology gJChronology23 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone22);
        org.joda.time.DateTimeField dateTimeField24 = gJChronology23.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField25 = gJChronology23.weekyearOfCentury();
        org.joda.time.Instant instant26 = gJChronology23.getGregorianCutover();
        org.joda.time.Instant instant28 = instant26.withMillis(0L);
        org.joda.time.Instant instant30 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone31 = null;
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.forTimeZone(timeZone31);
        org.joda.time.chrono.GJChronology gJChronology33 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone32);
        org.joda.time.DateTimeField dateTimeField34 = gJChronology33.millisOfSecond();
        int int35 = instant30.get(dateTimeField34);
        org.joda.time.Instant instant37 = instant30.plus(0L);
        int int38 = instant28.compareTo((org.joda.time.ReadableInstant) instant37);
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = null;
        boolean boolean40 = instant37.isSupported(dateTimeFieldType39);
        int int41 = dateTimeZone10.getOffset((org.joda.time.ReadableInstant) instant37);
        boolean boolean42 = instant6.isAfter((org.joda.time.ReadableInstant) instant37);
        org.joda.time.chrono.GJChronology gJChronology43 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1, (org.joda.time.ReadableInstant) instant6);
        org.joda.time.DurationField durationField44 = gJChronology43.eras();
        org.joda.time.DurationField durationField45 = gJChronology43.halfdays();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField44, durationField45, and durationField44", !(durationField44.compareTo(durationField45) == 0) || (Math.signum(durationField44.compareTo(durationField44)) == Math.signum(durationField45.compareTo(durationField44))));
    }

    @Test
    public void test1913() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1913");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField3 = gJChronology2.millisOfSecond();
        org.joda.time.DurationField durationField4 = gJChronology2.millis();
        org.joda.time.DateTimeZone dateTimeZone5 = gJChronology2.getZone();
        long long7 = dateTimeZone5.nextTransition(4320000000L);
        boolean boolean9 = dateTimeZone5.isStandardOffset(3155760001170L);
        java.util.TimeZone timeZone10 = null;
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forTimeZone(timeZone10);
        org.joda.time.chrono.GJChronology gJChronology12 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone11);
        org.joda.time.DateTimeField dateTimeField13 = gJChronology12.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField14 = gJChronology12.weekyearOfCentury();
        org.joda.time.Instant instant15 = gJChronology12.getGregorianCutover();
        org.joda.time.Instant instant17 = instant15.withMillis(0L);
        org.joda.time.Instant instant19 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone20 = null;
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forTimeZone(timeZone20);
        org.joda.time.chrono.GJChronology gJChronology22 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone21);
        org.joda.time.DateTimeField dateTimeField23 = gJChronology22.millisOfSecond();
        int int24 = instant19.get(dateTimeField23);
        org.joda.time.Instant instant26 = instant19.plus(0L);
        int int27 = instant17.compareTo((org.joda.time.ReadableInstant) instant26);
        java.util.TimeZone timeZone28 = null;
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forTimeZone(timeZone28);
        org.joda.time.chrono.GJChronology gJChronology30 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone29);
        org.joda.time.DurationField durationField31 = gJChronology30.halfdays();
        org.joda.time.DateTimeField dateTimeField32 = gJChronology30.millisOfDay();
        org.joda.time.DateTimeField dateTimeField33 = gJChronology30.minuteOfDay();
        org.joda.time.DurationField durationField34 = gJChronology30.centuries();
        org.joda.time.DateTimeField dateTimeField35 = gJChronology30.halfdayOfDay();
        java.util.Locale locale36 = java.util.Locale.ITALIAN;
        java.util.Locale locale37 = locale36.stripExtensions();
        java.util.Locale locale38 = java.util.Locale.CANADA;
        java.lang.String str39 = locale36.getDisplayVariant(locale38);
        boolean boolean40 = gJChronology30.equals((java.lang.Object) locale38);
        org.joda.time.DateTime dateTime41 = instant17.toDateTime((org.joda.time.Chronology) gJChronology30);
        org.joda.time.chrono.GJChronology gJChronology42 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone5, (org.joda.time.ReadableInstant) dateTime41);
        org.joda.time.DateTimeField dateTimeField43 = gJChronology42.dayOfYear();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant17 and dateTime41", (instant17.compareTo(dateTime41) == 0) == instant17.equals(dateTime41));
    }

    @Test
    public void test1914() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1914");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = gJChronology2.halfdays();
        long long7 = gJChronology2.add((long) 'a', (-1L), (int) (short) 0);
        boolean boolean9 = gJChronology2.equals((java.lang.Object) 0);
        org.joda.time.DateTimeField dateTimeField10 = gJChronology2.dayOfMonth();
        org.joda.time.DurationField durationField11 = gJChronology2.seconds();
        org.joda.time.DateTimeField dateTimeField12 = gJChronology2.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField13 = gJChronology2.era();
        org.joda.time.DateTimeField dateTimeField14 = gJChronology2.hourOfDay();
        java.lang.String str15 = gJChronology2.toString();
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        long long19 = gJChronology2.add(readablePeriod16, 3732632410199948L, 12);
        org.joda.time.Instant instant20 = gJChronology2.getGregorianCutover();
        java.util.TimeZone timeZone21 = null;
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forTimeZone(timeZone21);
        org.joda.time.chrono.GJChronology gJChronology23 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone22);
        org.joda.time.DateTimeField dateTimeField24 = gJChronology23.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField25 = gJChronology23.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField26 = gJChronology23.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField27 = gJChronology23.hourOfHalfday();
        org.joda.time.DurationField durationField28 = gJChronology23.halfdays();
        org.joda.time.DateTimeField dateTimeField29 = gJChronology23.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField30 = gJChronology23.clockhourOfHalfday();
        org.joda.time.Instant instant31 = gJChronology23.getGregorianCutover();
        org.joda.time.DateTime dateTime32 = instant20.toDateTime((org.joda.time.Chronology) gJChronology23);
        org.joda.time.DateTimeField dateTimeField33 = gJChronology23.dayOfMonth();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant20 and dateTime32", (instant20.compareTo(dateTime32) == 0) == instant20.equals(dateTime32));
    }

    @Test
    public void test1915() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1915");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forTimeZone(timeZone2);
        org.joda.time.chrono.GJChronology gJChronology4 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone3);
        org.joda.time.DateTimeField dateTimeField5 = gJChronology4.millisOfSecond();
        int int6 = instant1.get(dateTimeField5);
        org.joda.time.Instant instant8 = instant1.plus(0L);
        java.util.TimeZone timeZone9 = null;
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forTimeZone(timeZone9);
        org.joda.time.chrono.GJChronology gJChronology11 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone10);
        org.joda.time.DurationField durationField12 = gJChronology11.halfdays();
        org.joda.time.Chronology chronology13 = gJChronology11.withUTC();
        java.lang.String str14 = gJChronology11.toString();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology11.hourOfHalfday();
        int int16 = instant1.get(dateTimeField15);
        org.joda.time.Instant instant18 = new org.joda.time.Instant(52L);
        boolean boolean19 = instant18.isEqualNow();
        org.joda.time.ReadableDuration readableDuration20 = null;
        org.joda.time.Instant instant21 = instant18.plus(readableDuration20);
        org.joda.time.Instant instant23 = new org.joda.time.Instant(52L);
        org.joda.time.Instant instant25 = instant23.withMillis((long) 'u');
        boolean boolean26 = instant18.isBefore((org.joda.time.ReadableInstant) instant23);
        boolean boolean27 = instant1.isEqual((org.joda.time.ReadableInstant) instant23);
        org.joda.time.DateTime dateTime28 = instant1.toDateTimeISO();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter29 = null;
        java.lang.String str30 = instant1.toString(dateTimeFormatter29);
        boolean boolean32 = instant1.isAfter((-25575169557600000L));
        org.joda.time.MutableDateTime mutableDateTime33 = instant1.toMutableDateTimeISO();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and dateTime28", (instant1.compareTo(dateTime28) == 0) == instant1.equals(dateTime28));
    }

    @Test
    public void test1916() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1916");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forTimeZone(timeZone2);
        org.joda.time.chrono.GJChronology gJChronology4 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone3);
        org.joda.time.DateTimeField dateTimeField5 = gJChronology4.millisOfSecond();
        int int6 = instant1.get(dateTimeField5);
        org.joda.time.Instant instant8 = instant1.plus(0L);
        long long9 = instant1.getMillis();
        org.joda.time.MutableDateTime mutableDateTime10 = instant1.toMutableDateTime();
        org.joda.time.Instant instant12 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone13 = null;
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forTimeZone(timeZone13);
        org.joda.time.chrono.GJChronology gJChronology15 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone14);
        org.joda.time.DateTimeField dateTimeField16 = gJChronology15.millisOfSecond();
        int int17 = instant12.get(dateTimeField16);
        org.joda.time.Chronology chronology18 = instant12.getChronology();
        org.joda.time.Instant instant20 = instant12.withMillis((-24192000000000L));
        org.joda.time.MutableDateTime mutableDateTime21 = instant20.toMutableDateTimeISO();
        org.joda.time.Chronology chronology22 = instant20.getChronology();
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.DateTime dateTime24 = instant20.toDateTime(dateTimeZone23);
        boolean boolean25 = mutableDateTime10.isEqual((org.joda.time.ReadableInstant) instant20);
        boolean boolean27 = instant20.isAfter((-45225226936800000L));
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and mutableDateTime10", (instant1.compareTo(mutableDateTime10) == 0) == instant1.equals(mutableDateTime10));
    }

    @Test
    public void test1917() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1917");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        boolean boolean2 = instant1.isEqualNow();
        boolean boolean4 = instant1.isEqual(0L);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = null;
        boolean boolean6 = instant1.isSupported(dateTimeFieldType5);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = null;
        boolean boolean8 = instant1.isSupported(dateTimeFieldType7);
        org.joda.time.Instant instant10 = instant1.withMillis(0L);
        java.util.TimeZone timeZone11 = null;
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forTimeZone(timeZone11);
        org.joda.time.chrono.GJChronology gJChronology13 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone12);
        org.joda.time.DateTimeField dateTimeField14 = gJChronology13.yearOfCentury();
        int int15 = instant10.get(dateTimeField14);
        boolean boolean17 = instant10.isAfter((long) (-1));
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.getDefault();
        int int20 = dateTimeZone18.getOffset((long) (byte) 1);
        java.util.Locale locale23 = java.util.Locale.forLanguageTag("halfdays");
        java.lang.String str24 = dateTimeZone18.getShortName((long) 1582, locale23);
        long long26 = dateTimeZone18.previousTransition(43200100L);
        org.joda.time.chrono.GJChronology gJChronology27 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone18);
        org.joda.time.MutableDateTime mutableDateTime28 = instant10.toMutableDateTime(dateTimeZone18);
        org.joda.time.Instant instant30 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone31 = null;
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.forTimeZone(timeZone31);
        org.joda.time.chrono.GJChronology gJChronology33 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone32);
        org.joda.time.DateTimeField dateTimeField34 = gJChronology33.millisOfSecond();
        int int35 = instant30.get(dateTimeField34);
        boolean boolean36 = instant30.isEqualNow();
        org.joda.time.Instant instant38 = new org.joda.time.Instant(52L);
        boolean boolean39 = instant38.isEqualNow();
        org.joda.time.ReadableDuration readableDuration40 = null;
        org.joda.time.Instant instant41 = instant38.plus(readableDuration40);
        long long42 = instant38.getMillis();
        java.lang.Object obj43 = null;
        boolean boolean44 = instant38.equals(obj43);
        org.joda.time.Instant instant46 = new org.joda.time.Instant(52L);
        boolean boolean47 = instant46.isEqualNow();
        org.joda.time.ReadableDuration readableDuration48 = null;
        org.joda.time.Instant instant49 = instant46.plus(readableDuration48);
        long long50 = instant46.getMillis();
        java.lang.String str51 = instant46.toString();
        org.joda.time.Instant instant52 = instant46.toInstant();
        org.joda.time.ReadableDuration readableDuration53 = null;
        org.joda.time.Instant instant55 = instant46.withDurationAdded(readableDuration53, (int) 'x');
        org.joda.time.Instant instant56 = instant46.toInstant();
        int int57 = instant38.compareTo((org.joda.time.ReadableInstant) instant46);
        boolean boolean58 = instant30.isBefore((org.joda.time.ReadableInstant) instant46);
        java.util.TimeZone timeZone59 = null;
        org.joda.time.DateTimeZone dateTimeZone60 = org.joda.time.DateTimeZone.forTimeZone(timeZone59);
        org.joda.time.chrono.GJChronology gJChronology61 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone60);
        org.joda.time.DurationField durationField62 = gJChronology61.halfdays();
        long long66 = gJChronology61.add((long) 'a', (-1L), (int) (short) 0);
        org.joda.time.DateTimeField dateTimeField67 = gJChronology61.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField68 = gJChronology61.secondOfMinute();
        org.joda.time.Instant instant70 = new org.joda.time.Instant(52L);
        boolean boolean71 = instant70.isEqualNow();
        org.joda.time.ReadableDuration readableDuration72 = null;
        org.joda.time.Instant instant73 = instant70.plus(readableDuration72);
        boolean boolean74 = gJChronology61.equals((java.lang.Object) instant70);
        org.joda.time.DateTimeFieldType dateTimeFieldType75 = null;
        boolean boolean76 = instant70.isSupported(dateTimeFieldType75);
        org.joda.time.DateTimeFieldType dateTimeFieldType77 = null;
        boolean boolean78 = instant70.isSupported(dateTimeFieldType77);
        java.lang.String str79 = instant70.toString();
        boolean boolean80 = instant30.isAfter((org.joda.time.ReadableInstant) instant70);
        java.util.TimeZone timeZone81 = null;
        org.joda.time.DateTimeZone dateTimeZone82 = org.joda.time.DateTimeZone.forTimeZone(timeZone81);
        java.lang.String str84 = dateTimeZone82.getNameKey((long) 100);
        boolean boolean85 = dateTimeZone82.isFixed();
        org.joda.time.chrono.GJChronology gJChronology86 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone82);
        int int87 = gJChronology86.getMinimumDaysInFirstWeek();
        java.lang.String str88 = gJChronology86.toString();
        org.joda.time.DateTimeField dateTimeField89 = gJChronology86.yearOfEra();
        org.joda.time.DateTime dateTime90 = instant30.toDateTime((org.joda.time.Chronology) gJChronology86);
        boolean boolean91 = dateTime90.isAfterNow();
        long long92 = dateTime90.getMillis();
        boolean boolean93 = mutableDateTime28.isAfter((org.joda.time.ReadableInstant) dateTime90);
        java.lang.String str94 = dateTime90.toString();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant10 and mutableDateTime28", (instant10.compareTo(mutableDateTime28) == 0) == instant10.equals(mutableDateTime28));
    }

    @Test
    public void test1918() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1918");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField3 = gJChronology2.millisOfSecond();
        org.joda.time.DurationField durationField4 = gJChronology2.millis();
        org.joda.time.DurationField durationField5 = gJChronology2.weeks();
        long long9 = gJChronology2.add(43201764L, 262974600000L, (int) (short) 100);
        org.joda.time.DateTimeField dateTimeField10 = gJChronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField11 = gJChronology2.secondOfDay();
        org.joda.time.DurationField durationField12 = gJChronology2.weeks();
        java.util.TimeZone timeZone13 = null;
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forTimeZone(timeZone13);
        java.lang.String str16 = dateTimeZone14.getNameKey((long) 100);
        boolean boolean17 = dateTimeZone14.isFixed();
        org.joda.time.chrono.GJChronology gJChronology18 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone14);
        int int19 = gJChronology18.getMinimumDaysInFirstWeek();
        java.lang.String str20 = gJChronology18.toString();
        org.joda.time.DateTimeField dateTimeField21 = gJChronology18.yearOfEra();
        org.joda.time.DateTimeField dateTimeField22 = gJChronology18.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField23 = gJChronology18.dayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology25 = gJChronology18.withZone(dateTimeZone24);
        org.joda.time.DateTimeField dateTimeField26 = chronology25.millisOfSecond();
        java.util.TimeZone timeZone27 = null;
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forTimeZone(timeZone27);
        org.joda.time.chrono.GJChronology gJChronology29 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone28);
        int int31 = dateTimeZone28.getOffsetFromLocal((long) (-1));
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.forOffsetHours((int) '4');
        long long35 = dateTimeZone28.getMillisKeepLocal(dateTimeZone33, (-8380800000L));
        org.joda.time.Chronology chronology36 = chronology25.withZone(dateTimeZone28);
        java.util.TimeZone timeZone37 = null;
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forTimeZone(timeZone37);
        org.joda.time.chrono.GJChronology gJChronology39 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone38);
        org.joda.time.DurationField durationField40 = gJChronology39.halfdays();
        java.util.TimeZone timeZone41 = null;
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.forTimeZone(timeZone41);
        org.joda.time.chrono.GJChronology gJChronology43 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone42);
        long long47 = dateTimeZone42.convertLocalToUTC((long) (byte) -1, true, 0L);
        boolean boolean49 = dateTimeZone42.equals((java.lang.Object) true);
        org.joda.time.Chronology chronology50 = gJChronology39.withZone(dateTimeZone42);
        org.joda.time.LocalDateTime localDateTime51 = null;
        boolean boolean52 = dateTimeZone42.isLocalDateTimeGap(localDateTime51);
        boolean boolean53 = dateTimeZone42.isFixed();
        long long55 = dateTimeZone28.getMillisKeepLocal(dateTimeZone42, (long) (short) -1);
        org.joda.time.Chronology chronology56 = gJChronology2.withZone(dateTimeZone28);
        org.joda.time.DurationField durationField57 = gJChronology2.eras();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField57, durationField4, and durationField5", !(durationField57.compareTo(durationField4) == 0) || (Math.signum(durationField57.compareTo(durationField5)) == Math.signum(durationField4.compareTo(durationField5))));
    }

    @Test
    public void test1919() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1919");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.util.TimeZone timeZone2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forTimeZone(timeZone2);
        org.joda.time.chrono.GJChronology gJChronology4 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone3);
        int int6 = dateTimeZone3.getOffsetFromLocal(1000L);
        long long8 = dateTimeZone1.getMillisKeepLocal(dateTimeZone3, (-61827926399999L));
        int int10 = dateTimeZone3.getOffset(5935258842600053L);
        java.util.TimeZone timeZone11 = null;
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forTimeZone(timeZone11);
        org.joda.time.chrono.GJChronology gJChronology13 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone12);
        org.joda.time.DateTimeField dateTimeField14 = gJChronology13.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology13.weekyearOfCentury();
        org.joda.time.Instant instant16 = gJChronology13.getGregorianCutover();
        org.joda.time.Instant instant18 = instant16.withMillis(0L);
        org.joda.time.Instant instant20 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone21 = null;
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forTimeZone(timeZone21);
        org.joda.time.chrono.GJChronology gJChronology23 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone22);
        org.joda.time.DateTimeField dateTimeField24 = gJChronology23.millisOfSecond();
        int int25 = instant20.get(dateTimeField24);
        org.joda.time.Instant instant27 = instant20.plus(0L);
        int int28 = instant18.compareTo((org.joda.time.ReadableInstant) instant27);
        java.util.TimeZone timeZone29 = null;
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forTimeZone(timeZone29);
        org.joda.time.chrono.GJChronology gJChronology31 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone30);
        org.joda.time.DurationField durationField32 = gJChronology31.halfdays();
        org.joda.time.DateTimeField dateTimeField33 = gJChronology31.millisOfDay();
        org.joda.time.DateTimeField dateTimeField34 = gJChronology31.minuteOfDay();
        org.joda.time.DurationField durationField35 = gJChronology31.centuries();
        org.joda.time.DateTimeField dateTimeField36 = gJChronology31.halfdayOfDay();
        java.util.Locale locale37 = java.util.Locale.ITALIAN;
        java.util.Locale locale38 = locale37.stripExtensions();
        java.util.Locale locale39 = java.util.Locale.CANADA;
        java.lang.String str40 = locale37.getDisplayVariant(locale39);
        boolean boolean41 = gJChronology31.equals((java.lang.Object) locale39);
        org.joda.time.DateTime dateTime42 = instant18.toDateTime((org.joda.time.Chronology) gJChronology31);
        org.joda.time.chrono.GJChronology gJChronology43 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone3, (org.joda.time.ReadableInstant) dateTime42);
        org.joda.time.DateTimeField dateTimeField44 = gJChronology43.year();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant18 and dateTime42", (instant18.compareTo(dateTime42) == 0) == instant18.equals(dateTime42));
    }

    @Test
    public void test1920() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1920");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        boolean boolean2 = instant1.isEqualNow();
        java.lang.String str3 = instant1.toString();
        org.joda.time.Instant instant5 = new org.joda.time.Instant(52L);
        boolean boolean6 = instant5.isEqualNow();
        java.lang.String str7 = instant5.toString();
        java.lang.String str8 = instant5.toString();
        org.joda.time.Instant instant11 = instant5.withDurationAdded(115200000L, (int) (short) 1);
        int int12 = instant1.compareTo((org.joda.time.ReadableInstant) instant5);
        org.joda.time.Instant instant14 = new org.joda.time.Instant(52L);
        boolean boolean15 = instant14.isEqualNow();
        org.joda.time.ReadableDuration readableDuration16 = null;
        org.joda.time.Instant instant17 = instant14.plus(readableDuration16);
        boolean boolean19 = instant17.equals((java.lang.Object) ' ');
        boolean boolean20 = instant5.isAfter((org.joda.time.ReadableInstant) instant17);
        org.joda.time.DateTime dateTime21 = instant5.toDateTime();
        long long22 = instant5.getMillis();
        boolean boolean24 = instant5.isBefore(33443020800000000L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and dateTime21", (instant1.compareTo(dateTime21) == 0) == instant1.equals(dateTime21));
    }

    @Test
    public void test1921() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1921");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField3 = gJChronology2.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.weekyearOfCentury();
        org.joda.time.Instant instant5 = gJChronology2.getGregorianCutover();
        org.joda.time.Instant instant7 = instant5.withMillis(0L);
        org.joda.time.Instant instant9 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone10 = null;
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forTimeZone(timeZone10);
        org.joda.time.chrono.GJChronology gJChronology12 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone11);
        org.joda.time.DateTimeField dateTimeField13 = gJChronology12.millisOfSecond();
        int int14 = instant9.get(dateTimeField13);
        org.joda.time.Instant instant16 = instant9.plus(0L);
        int int17 = instant7.compareTo((org.joda.time.ReadableInstant) instant16);
        org.joda.time.Instant instant19 = new org.joda.time.Instant(52L);
        boolean boolean20 = instant19.isEqualNow();
        org.joda.time.ReadableDuration readableDuration21 = null;
        org.joda.time.Instant instant22 = instant19.plus(readableDuration21);
        boolean boolean24 = instant22.equals((java.lang.Object) ' ');
        boolean boolean25 = instant16.isEqual((org.joda.time.ReadableInstant) instant22);
        java.lang.String str26 = instant16.toString();
        org.joda.time.ReadableDuration readableDuration27 = null;
        org.joda.time.Instant instant29 = instant16.withDurationAdded(readableDuration27, 1431201);
        long long30 = instant29.getMillis();
        boolean boolean32 = instant29.isEqual(4492800035L);
        org.joda.time.DateTimeZone dateTimeZone33 = instant29.getZone();
        org.joda.time.MutableDateTime mutableDateTime34 = instant29.toMutableDateTimeISO();
        org.joda.time.Instant instant36 = new org.joda.time.Instant(52L);
        boolean boolean37 = instant36.isEqualNow();
        org.joda.time.ReadableDuration readableDuration38 = null;
        org.joda.time.Instant instant39 = instant36.plus(readableDuration38);
        org.joda.time.Instant instant41 = new org.joda.time.Instant(52L);
        org.joda.time.Instant instant43 = instant41.withMillis((long) 'u');
        boolean boolean44 = instant36.isBefore((org.joda.time.ReadableInstant) instant41);
        org.joda.time.Instant instant45 = instant41.toInstant();
        boolean boolean47 = instant41.isAfter((long) 1869);
        java.util.TimeZone timeZone48 = null;
        org.joda.time.DateTimeZone dateTimeZone49 = org.joda.time.DateTimeZone.forTimeZone(timeZone48);
        org.joda.time.chrono.GJChronology gJChronology50 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone49);
        org.joda.time.DateTimeField dateTimeField51 = gJChronology50.millisOfSecond();
        org.joda.time.DurationField durationField52 = gJChronology50.millis();
        org.joda.time.DurationField durationField53 = gJChronology50.weekyears();
        org.joda.time.DateTimeField dateTimeField54 = gJChronology50.dayOfYear();
        org.joda.time.DateTimeField dateTimeField55 = gJChronology50.yearOfEra();
        org.joda.time.DateTimeField dateTimeField56 = gJChronology50.secondOfDay();
        int int57 = instant41.get(dateTimeField56);
        int int58 = mutableDateTime34.compareTo((org.joda.time.ReadableInstant) instant41);
        org.joda.time.Instant instant59 = mutableDateTime34.toInstant();
        org.joda.time.MutableDateTime mutableDateTime60 = instant59.toMutableDateTimeISO();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant9 and mutableDateTime34", (instant9.compareTo(mutableDateTime34) == 0) == instant9.equals(mutableDateTime34));
    }

    @Test
    public void test1922() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1922");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forTimeZone(timeZone2);
        org.joda.time.chrono.GJChronology gJChronology4 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone3);
        org.joda.time.DateTimeField dateTimeField5 = gJChronology4.millisOfSecond();
        int int6 = instant1.get(dateTimeField5);
        boolean boolean7 = instant1.isEqualNow();
        org.joda.time.tz.NameProvider nameProvider8 = org.joda.time.DateTimeZone.getNameProvider();
        org.joda.time.DateTimeZone.setNameProvider(nameProvider8);
        org.joda.time.DateTimeZone.setNameProvider(nameProvider8);
        boolean boolean11 = instant1.equals((java.lang.Object) nameProvider8);
        org.joda.time.Instant instant13 = new org.joda.time.Instant(52L);
        boolean boolean14 = instant13.isEqualNow();
        java.lang.String str15 = instant13.toString();
        org.joda.time.DateTimeZone dateTimeZone16 = instant13.getZone();
        org.joda.time.DateTime dateTime17 = instant1.toDateTime(dateTimeZone16);
        java.lang.String str18 = instant1.toString();
        org.joda.time.Instant instant20 = instant1.withMillis((long) 7200);
        org.joda.time.Instant instant22 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone23 = null;
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forTimeZone(timeZone23);
        org.joda.time.chrono.GJChronology gJChronology25 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone24);
        org.joda.time.DateTimeField dateTimeField26 = gJChronology25.millisOfSecond();
        int int27 = instant22.get(dateTimeField26);
        org.joda.time.Instant instant29 = instant22.plus(0L);
        java.util.TimeZone timeZone30 = null;
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forTimeZone(timeZone30);
        org.joda.time.chrono.GJChronology gJChronology32 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone31);
        org.joda.time.DurationField durationField33 = gJChronology32.halfdays();
        org.joda.time.Chronology chronology34 = gJChronology32.withUTC();
        java.lang.String str35 = gJChronology32.toString();
        org.joda.time.DateTimeField dateTimeField36 = gJChronology32.hourOfHalfday();
        int int37 = instant22.get(dateTimeField36);
        java.util.TimeZone timeZone38 = null;
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.forTimeZone(timeZone38);
        org.joda.time.chrono.GJChronology gJChronology40 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone39);
        org.joda.time.DurationField durationField41 = gJChronology40.halfdays();
        long long45 = gJChronology40.add((long) 'a', (-1L), (int) (short) 0);
        org.joda.time.DateTimeField dateTimeField46 = gJChronology40.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField47 = gJChronology40.secondOfMinute();
        org.joda.time.Instant instant49 = new org.joda.time.Instant(52L);
        boolean boolean50 = instant49.isEqualNow();
        org.joda.time.ReadableDuration readableDuration51 = null;
        org.joda.time.Instant instant52 = instant49.plus(readableDuration51);
        boolean boolean53 = gJChronology40.equals((java.lang.Object) instant49);
        org.joda.time.DateTimeFieldType dateTimeFieldType54 = null;
        boolean boolean55 = instant49.isSupported(dateTimeFieldType54);
        org.joda.time.DateTimeFieldType dateTimeFieldType56 = null;
        boolean boolean57 = instant49.isSupported(dateTimeFieldType56);
        org.joda.time.DateTimeZone dateTimeZone58 = instant49.getZone();
        boolean boolean59 = instant22.isAfter((org.joda.time.ReadableInstant) instant49);
        org.joda.time.Instant instant60 = instant22.toInstant();
        org.joda.time.ReadableDuration readableDuration61 = null;
        org.joda.time.Instant instant62 = instant60.minus(readableDuration61);
        org.joda.time.DateTime dateTime63 = instant62.toDateTime();
        boolean boolean64 = instant20.isAfter((org.joda.time.ReadableInstant) instant62);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and dateTime63", (instant1.compareTo(dateTime63) == 0) == instant1.equals(dateTime63));
    }

    @Test
    public void test1923() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1923");
        org.joda.time.Instant instant0 = org.joda.time.Instant.now();
        java.util.TimeZone timeZone1 = null;
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forTimeZone(timeZone1);
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone2);
        org.joda.time.DurationField durationField4 = gJChronology3.halfdays();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology3.millisOfDay();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology3.halfdayOfDay();
        int int7 = instant0.get(dateTimeField6);
        org.joda.time.Instant instant9 = instant0.withMillis((long) 1970);
        org.joda.time.Instant instant10 = instant9.toInstant();
        org.joda.time.Instant instant12 = instant10.withMillis((-3600000L));
        boolean boolean14 = instant12.isAfter(747221760000000000L);
        org.joda.time.Instant instant16 = new org.joda.time.Instant(52L);
        boolean boolean17 = instant16.isEqualNow();
        java.lang.String str18 = instant16.toString();
        java.lang.String str19 = instant16.toString();
        org.joda.time.Instant instant22 = instant16.withDurationAdded(115200000L, (int) (short) 1);
        java.util.TimeZone timeZone23 = null;
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forTimeZone(timeZone23);
        java.lang.String str26 = dateTimeZone24.getNameKey((long) 100);
        boolean boolean27 = dateTimeZone24.isFixed();
        org.joda.time.DateTime dateTime28 = instant16.toDateTime(dateTimeZone24);
        org.joda.time.DateTimeFieldType dateTimeFieldType29 = null;
        boolean boolean30 = instant16.isSupported(dateTimeFieldType29);
        org.joda.time.Instant instant32 = instant16.withMillis(0L);
        java.util.Locale locale35 = new java.util.Locale("cinese (Taiwan)", "DurationField[weekyears]");
        java.util.Locale locale36 = locale35.stripExtensions();
        java.util.Locale locale39 = new java.util.Locale("EN-US", "ita");
        java.lang.String str40 = locale36.getDisplayScript(locale39);
        boolean boolean41 = instant16.equals((java.lang.Object) str40);
        boolean boolean42 = instant12.isAfter((org.joda.time.ReadableInstant) instant16);
        org.joda.time.Instant instant44 = instant12.minus(9204119467527L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant16 and dateTime28", (instant16.compareTo(dateTime28) == 0) == instant16.equals(dateTime28));
    }

    @Test
    public void test1924() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1924");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        boolean boolean2 = instant1.isEqualNow();
        java.lang.String str3 = instant1.toString();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.MutableDateTime mutableDateTime5 = instant1.toMutableDateTime(chronology4);
        java.util.TimeZone timeZone6 = null;
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forTimeZone(timeZone6);
        org.joda.time.chrono.GJChronology gJChronology8 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone7);
        org.joda.time.DurationField durationField9 = gJChronology8.halfdays();
        long long13 = gJChronology8.add((long) 'a', (-1L), (int) (short) 0);
        boolean boolean15 = gJChronology8.equals((java.lang.Object) 0);
        org.joda.time.DateTimeField dateTimeField16 = gJChronology8.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField17 = gJChronology8.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField18 = gJChronology8.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField19 = gJChronology8.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField20 = gJChronology8.weekyear();
        java.util.TimeZone timeZone21 = null;
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forTimeZone(timeZone21);
        org.joda.time.chrono.GJChronology gJChronology23 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone22);
        org.joda.time.DateTimeField dateTimeField24 = gJChronology23.millisOfSecond();
        org.joda.time.DurationField durationField25 = gJChronology23.millis();
        org.joda.time.DateTimeZone dateTimeZone26 = gJChronology23.getZone();
        org.joda.time.Chronology chronology27 = gJChronology8.withZone(dateTimeZone26);
        long long30 = dateTimeZone26.convertLocalToUTC(110449353600000L, false);
        org.joda.time.DateTime dateTime31 = mutableDateTime5.toDateTime(dateTimeZone26);
        org.joda.time.Instant instant32 = new org.joda.time.Instant((java.lang.Object) dateTime31);
        boolean boolean33 = instant32.isAfterNow();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and mutableDateTime5", (instant1.compareTo(mutableDateTime5) == 0) == instant1.equals(mutableDateTime5));
    }

    @Test
    public void test1925() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1925");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = gJChronology2.halfdays();
        long long7 = gJChronology2.add((long) 'a', (-1L), (int) (short) 0);
        boolean boolean9 = gJChronology2.equals((java.lang.Object) 0);
        org.joda.time.DateTimeField dateTimeField10 = gJChronology2.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField11 = gJChronology2.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField12 = gJChronology2.clockhourOfDay();
        long long17 = gJChronology2.getDateTimeMillis(10, (int) (short) 10, 4, (int) (byte) 1);
        org.joda.time.Instant instant18 = gJChronology2.getGregorianCutover();
        org.joda.time.DateTimeField dateTimeField19 = gJChronology2.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField20 = gJChronology2.weekyear();
        org.joda.time.DateTimeField dateTimeField21 = gJChronology2.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField22 = gJChronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField23 = gJChronology2.secondOfDay();
        org.joda.time.DateTimeField dateTimeField24 = gJChronology2.dayOfMonth();
        org.joda.time.DurationField durationField25 = gJChronology2.eras();
        org.joda.time.DateTimeZone dateTimeZone26 = gJChronology2.getZone();
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField3 and durationField25", Math.signum(durationField3.compareTo(durationField25)) == -Math.signum(durationField25.compareTo(durationField3)));
    }

    @Test
    public void test1926() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1926");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = gJChronology2.halfdays();
        long long7 = gJChronology2.add((long) 'a', (-1L), (int) (short) 0);
        org.joda.time.DateTimeField dateTimeField8 = gJChronology2.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField9 = gJChronology2.secondOfMinute();
        org.joda.time.Instant instant11 = new org.joda.time.Instant(52L);
        boolean boolean12 = instant11.isEqualNow();
        org.joda.time.ReadableDuration readableDuration13 = null;
        org.joda.time.Instant instant14 = instant11.plus(readableDuration13);
        boolean boolean15 = gJChronology2.equals((java.lang.Object) instant11);
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = null;
        boolean boolean17 = instant11.isSupported(dateTimeFieldType16);
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = null;
        boolean boolean19 = instant11.isSupported(dateTimeFieldType18);
        org.joda.time.DateTimeZone dateTimeZone20 = instant11.getZone();
        long long22 = dateTimeZone20.nextTransition(349200L);
        java.lang.String str23 = dateTimeZone20.toString();
        java.util.Locale locale25 = java.util.Locale.ITALIAN;
        java.lang.String str26 = locale25.getCountry();
        java.util.Locale locale27 = java.util.Locale.UK;
        java.lang.String str28 = locale27.getDisplayCountry();
        java.util.Set<java.lang.Character> charSet29 = locale27.getExtensionKeys();
        java.util.Locale locale30 = locale27.stripExtensions();
        java.lang.String str31 = locale25.getDisplayVariant(locale30);
        java.lang.String str33 = locale30.getUnicodeLocaleType("de");
        java.util.Locale locale35 = new java.util.Locale("hi!");
        java.lang.String str36 = locale35.getVariant();
        java.util.Locale locale38 = java.util.Locale.forLanguageTag("hi!");
        java.lang.String str39 = locale38.toLanguageTag();
        java.lang.String str40 = locale35.getDisplayName(locale38);
        java.util.Locale locale41 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale42 = java.util.Locale.ENGLISH;
        java.lang.String str43 = locale41.getDisplayLanguage(locale42);
        java.util.Locale locale44 = java.util.Locale.CANADA;
        java.lang.String str45 = locale44.getISO3Language();
        java.lang.String str46 = locale41.getDisplayVariant(locale44);
        java.lang.String str47 = locale38.getDisplayCountry(locale44);
        java.lang.String str48 = locale30.getDisplayCountry(locale38);
        java.util.Set<java.lang.Character> charSet49 = locale30.getExtensionKeys();
        java.lang.String str50 = dateTimeZone20.getName(0L, locale30);
        java.lang.String str52 = dateTimeZone20.getNameKey(747217518019309440L);
        org.joda.time.Instant instant54 = new org.joda.time.Instant(52L);
        org.joda.time.Instant instant56 = instant54.withMillis((long) 'u');
        java.util.TimeZone timeZone57 = null;
        org.joda.time.DateTimeZone dateTimeZone58 = org.joda.time.DateTimeZone.forTimeZone(timeZone57);
        org.joda.time.chrono.GJChronology gJChronology59 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone58);
        org.joda.time.DurationField durationField60 = gJChronology59.halfdays();
        long long64 = gJChronology59.add((long) 'a', (-1L), (int) (short) 0);
        boolean boolean66 = gJChronology59.equals((java.lang.Object) 0);
        org.joda.time.DateTimeField dateTimeField67 = gJChronology59.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField68 = gJChronology59.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField69 = gJChronology59.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField70 = gJChronology59.clockhourOfHalfday();
        org.joda.time.DateTime dateTime71 = instant54.toDateTime((org.joda.time.Chronology) gJChronology59);
        java.lang.String str72 = dateTime71.toString();
        long long73 = dateTime71.getMillis();
        long long74 = dateTime71.getMillis();
        org.joda.time.chrono.GJChronology gJChronology75 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone20, (org.joda.time.ReadableInstant) dateTime71);
        long long77 = dateTimeZone20.previousTransition((-99980L));
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant11 and dateTime71", (instant11.compareTo(dateTime71) == 0) == instant11.equals(dateTime71));
    }

    @Test
    public void test1927() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1927");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forTimeZone(timeZone2);
        org.joda.time.chrono.GJChronology gJChronology4 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone3);
        org.joda.time.DateTimeField dateTimeField5 = gJChronology4.millisOfSecond();
        int int6 = instant1.get(dateTimeField5);
        boolean boolean7 = instant1.isEqualNow();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = null;
        java.lang.String str9 = instant1.toString(dateTimeFormatter8);
        boolean boolean10 = instant1.isAfterNow();
        org.joda.time.Instant instant11 = instant1.toInstant();
        org.joda.time.Instant instant13 = instant1.plus(1512000000L);
        java.util.Date date14 = instant13.toDate();
        org.joda.time.Chronology chronology15 = instant13.getChronology();
        org.joda.time.Instant instant17 = new org.joda.time.Instant(52L);
        boolean boolean18 = instant17.isEqualNow();
        org.joda.time.ReadableDuration readableDuration19 = null;
        org.joda.time.Instant instant20 = instant17.plus(readableDuration19);
        boolean boolean22 = instant20.equals((java.lang.Object) ' ');
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(1, 10);
        java.util.TimeZone timeZone26 = null;
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forTimeZone(timeZone26);
        long long29 = dateTimeZone25.getMillisKeepLocal(dateTimeZone27, 4320000000L);
        boolean boolean30 = instant20.equals((java.lang.Object) 4320000000L);
        org.joda.time.Instant instant32 = instant20.withMillis(10L);
        boolean boolean33 = instant13.isEqual((org.joda.time.ReadableInstant) instant20);
        org.joda.time.DateTime dateTime34 = instant20.toDateTime();
        java.util.TimeZone timeZone35 = null;
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.forTimeZone(timeZone35);
        java.lang.String str38 = dateTimeZone36.getNameKey((long) 100);
        boolean boolean39 = dateTimeZone36.isFixed();
        org.joda.time.chrono.GJChronology gJChronology40 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone36);
        int int41 = gJChronology40.getMinimumDaysInFirstWeek();
        java.lang.String str42 = gJChronology40.toString();
        org.joda.time.DateTimeField dateTimeField43 = gJChronology40.yearOfEra();
        org.joda.time.DateTimeField dateTimeField44 = gJChronology40.dayOfMonth();
        org.joda.time.DateTime dateTime45 = instant20.toDateTime((org.joda.time.Chronology) gJChronology40);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and dateTime34", (instant1.compareTo(dateTime34) == 0) == instant1.equals(dateTime34));
    }

    @Test
    public void test1928() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1928");
        org.joda.time.Instant instant1 = org.joda.time.Instant.parse("3929-04-02T00:00:00.051Z");
        org.joda.time.Instant instant3 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone4 = null;
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forTimeZone(timeZone4);
        org.joda.time.chrono.GJChronology gJChronology6 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone5);
        org.joda.time.DateTimeField dateTimeField7 = gJChronology6.millisOfSecond();
        int int8 = instant3.get(dateTimeField7);
        boolean boolean9 = instant3.isEqualNow();
        org.joda.time.Instant instant11 = new org.joda.time.Instant(52L);
        boolean boolean12 = instant11.isEqualNow();
        org.joda.time.ReadableDuration readableDuration13 = null;
        org.joda.time.Instant instant14 = instant11.plus(readableDuration13);
        long long15 = instant11.getMillis();
        java.lang.Object obj16 = null;
        boolean boolean17 = instant11.equals(obj16);
        org.joda.time.Instant instant19 = new org.joda.time.Instant(52L);
        boolean boolean20 = instant19.isEqualNow();
        org.joda.time.ReadableDuration readableDuration21 = null;
        org.joda.time.Instant instant22 = instant19.plus(readableDuration21);
        long long23 = instant19.getMillis();
        java.lang.String str24 = instant19.toString();
        org.joda.time.Instant instant25 = instant19.toInstant();
        org.joda.time.ReadableDuration readableDuration26 = null;
        org.joda.time.Instant instant28 = instant19.withDurationAdded(readableDuration26, (int) 'x');
        org.joda.time.Instant instant29 = instant19.toInstant();
        int int30 = instant11.compareTo((org.joda.time.ReadableInstant) instant19);
        boolean boolean31 = instant3.isBefore((org.joda.time.ReadableInstant) instant19);
        java.util.TimeZone timeZone32 = null;
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.forTimeZone(timeZone32);
        org.joda.time.chrono.GJChronology gJChronology34 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone33);
        org.joda.time.DurationField durationField35 = gJChronology34.halfdays();
        long long39 = gJChronology34.add((long) 'a', (-1L), (int) (short) 0);
        org.joda.time.DateTimeField dateTimeField40 = gJChronology34.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField41 = gJChronology34.secondOfMinute();
        org.joda.time.Instant instant43 = new org.joda.time.Instant(52L);
        boolean boolean44 = instant43.isEqualNow();
        org.joda.time.ReadableDuration readableDuration45 = null;
        org.joda.time.Instant instant46 = instant43.plus(readableDuration45);
        boolean boolean47 = gJChronology34.equals((java.lang.Object) instant43);
        org.joda.time.DateTimeFieldType dateTimeFieldType48 = null;
        boolean boolean49 = instant43.isSupported(dateTimeFieldType48);
        org.joda.time.DateTimeFieldType dateTimeFieldType50 = null;
        boolean boolean51 = instant43.isSupported(dateTimeFieldType50);
        java.lang.String str52 = instant43.toString();
        boolean boolean53 = instant3.isAfter((org.joda.time.ReadableInstant) instant43);
        java.util.TimeZone timeZone54 = null;
        org.joda.time.DateTimeZone dateTimeZone55 = org.joda.time.DateTimeZone.forTimeZone(timeZone54);
        java.lang.String str57 = dateTimeZone55.getNameKey((long) 100);
        boolean boolean58 = dateTimeZone55.isFixed();
        org.joda.time.chrono.GJChronology gJChronology59 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone55);
        int int60 = gJChronology59.getMinimumDaysInFirstWeek();
        java.lang.String str61 = gJChronology59.toString();
        org.joda.time.DateTimeField dateTimeField62 = gJChronology59.yearOfEra();
        org.joda.time.DateTime dateTime63 = instant3.toDateTime((org.joda.time.Chronology) gJChronology59);
        boolean boolean64 = dateTime63.isAfterNow();
        org.joda.time.Chronology chronology65 = dateTime63.getChronology();
        int int66 = instant1.compareTo((org.joda.time.ReadableInstant) dateTime63);
        org.joda.time.DateTimeZone dateTimeZone67 = dateTime63.getZone();
        boolean boolean68 = dateTime63.isEqualNow();
        java.util.TimeZone timeZone69 = null;
        org.joda.time.DateTimeZone dateTimeZone70 = org.joda.time.DateTimeZone.forTimeZone(timeZone69);
        org.joda.time.chrono.GJChronology gJChronology71 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone70);
        long long75 = dateTimeZone70.convertLocalToUTC((long) (byte) -1, true, 0L);
        boolean boolean77 = dateTimeZone70.equals((java.lang.Object) true);
        org.joda.time.chrono.GJChronology gJChronology78 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone70);
        org.joda.time.DateTimeField dateTimeField79 = gJChronology78.weekyear();
        org.joda.time.DateTimeField dateTimeField80 = gJChronology78.era();
        org.joda.time.DateTimeField dateTimeField81 = gJChronology78.centuryOfEra();
        org.joda.time.Chronology chronology82 = gJChronology78.withUTC();
        org.joda.time.DurationField durationField83 = gJChronology78.years();
        java.util.TimeZone timeZone84 = null;
        org.joda.time.DateTimeZone dateTimeZone85 = org.joda.time.DateTimeZone.forTimeZone(timeZone84);
        java.lang.String str87 = dateTimeZone85.getNameKey((long) 100);
        long long90 = dateTimeZone85.convertLocalToUTC((-2246399965L), true);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone85);
        org.joda.time.Chronology chronology92 = gJChronology78.withZone(dateTimeZone85);
        org.joda.time.DateTime dateTime93 = dateTime63.toDateTime((org.joda.time.Chronology) gJChronology78);
        org.joda.time.DurationField durationField94 = gJChronology78.weeks();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant3 and dateTime63", (instant3.compareTo(dateTime63) == 0) == instant3.equals(dateTime63));
    }

    @Test
    public void test1929() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1929");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        boolean boolean2 = instant1.isEqualNow();
        org.joda.time.ReadableDuration readableDuration3 = null;
        org.joda.time.Instant instant4 = instant1.plus(readableDuration3);
        long long5 = instant1.getMillis();
        java.lang.String str6 = instant1.toString();
        boolean boolean8 = instant1.isAfter((long) (-1));
        java.lang.Object obj9 = null;
        boolean boolean10 = instant1.equals(obj9);
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = null;
        boolean boolean12 = instant1.isSupported(dateTimeFieldType11);
        org.joda.time.DateTime dateTime13 = instant1.toDateTime();
        java.util.TimeZone timeZone14 = null;
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forTimeZone(timeZone14);
        org.joda.time.chrono.GJChronology gJChronology16 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone15);
        org.joda.time.DurationField durationField17 = gJChronology16.halfdays();
        long long21 = gJChronology16.add((long) 'a', (-1L), (int) (short) 0);
        boolean boolean23 = gJChronology16.equals((java.lang.Object) 0);
        org.joda.time.DateTimeField dateTimeField24 = gJChronology16.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField25 = gJChronology16.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField26 = gJChronology16.clockhourOfDay();
        long long31 = gJChronology16.getDateTimeMillis(10, (int) (short) 10, 4, (int) (byte) 1);
        org.joda.time.Instant instant32 = gJChronology16.getGregorianCutover();
        org.joda.time.DateTimeZone dateTimeZone33 = instant32.getZone();
        java.util.TimeZone timeZone34 = null;
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.forTimeZone(timeZone34);
        org.joda.time.chrono.GJChronology gJChronology36 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone35);
        java.util.Locale locale38 = new java.util.Locale("hi!");
        java.lang.String str39 = locale38.getCountry();
        java.util.Locale locale40 = java.util.Locale.getDefault();
        java.lang.String str41 = locale40.getDisplayName();
        java.lang.String str42 = locale38.getDisplayScript(locale40);
        boolean boolean43 = dateTimeZone35.equals((java.lang.Object) locale40);
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.forOffsetMillis((int) '4');
        java.util.TimeZone timeZone46 = dateTimeZone45.toTimeZone();
        long long49 = dateTimeZone45.adjustOffset((long) 0, false);
        int int51 = dateTimeZone45.getOffsetFromLocal((-26438399999L));
        long long53 = dateTimeZone35.getMillisKeepLocal(dateTimeZone45, (long) (byte) 10);
        org.joda.time.Instant instant55 = new org.joda.time.Instant(52L);
        boolean boolean56 = instant55.isEqualNow();
        org.joda.time.ReadableDuration readableDuration57 = null;
        org.joda.time.Instant instant58 = instant55.plus(readableDuration57);
        long long59 = instant55.getMillis();
        java.lang.String str60 = instant55.toString();
        org.joda.time.Instant instant61 = instant55.toInstant();
        org.joda.time.ReadableDuration readableDuration62 = null;
        org.joda.time.Instant instant64 = instant55.withDurationAdded(readableDuration62, (int) 'x');
        java.util.TimeZone timeZone65 = null;
        org.joda.time.DateTimeZone dateTimeZone66 = org.joda.time.DateTimeZone.forTimeZone(timeZone65);
        org.joda.time.chrono.GJChronology gJChronology67 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone66);
        org.joda.time.DateTimeField dateTimeField68 = gJChronology67.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField69 = gJChronology67.yearOfCentury();
        int int70 = instant64.get(dateTimeField69);
        org.joda.time.chrono.GJChronology gJChronology71 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone45, (org.joda.time.ReadableInstant) instant64);
        org.joda.time.DateTimeField dateTimeField72 = gJChronology71.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField73 = gJChronology71.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField74 = gJChronology71.clockhourOfHalfday();
        org.joda.time.DateTime dateTime75 = instant32.toDateTime((org.joda.time.Chronology) gJChronology71);
        boolean boolean76 = dateTime13.isBefore((org.joda.time.ReadableInstant) instant32);
        org.joda.time.DateTimeZone dateTimeZone77 = dateTime13.getZone();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant32 and dateTime75", (instant32.compareTo(dateTime75) == 0) == instant32.equals(dateTime75));
    }

    @Test
    public void test1930() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1930");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField3 = gJChronology2.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.weekyear();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology2.dayOfYear();
        java.util.TimeZone timeZone7 = null;
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forTimeZone(timeZone7);
        org.joda.time.chrono.GJChronology gJChronology9 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone8);
        int int11 = dateTimeZone8.getStandardOffset((long) (byte) 0);
        org.joda.time.Instant instant13 = new org.joda.time.Instant(52L);
        boolean boolean14 = instant13.isEqualNow();
        java.lang.String str15 = instant13.toString();
        java.util.TimeZone timeZone16 = null;
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forTimeZone(timeZone16);
        org.joda.time.chrono.GJChronology gJChronology18 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone17);
        java.util.Locale locale20 = new java.util.Locale("hi!");
        java.lang.String str21 = locale20.getCountry();
        java.util.Locale locale22 = java.util.Locale.getDefault();
        java.lang.String str23 = locale22.getDisplayName();
        java.lang.String str24 = locale20.getDisplayScript(locale22);
        boolean boolean25 = dateTimeZone17.equals((java.lang.Object) locale22);
        int int27 = dateTimeZone17.getOffsetFromLocal((long) (short) 10);
        java.util.TimeZone timeZone28 = null;
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forTimeZone(timeZone28);
        org.joda.time.chrono.GJChronology gJChronology30 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone29);
        org.joda.time.DateTimeField dateTimeField31 = gJChronology30.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField32 = gJChronology30.weekyearOfCentury();
        org.joda.time.Instant instant33 = gJChronology30.getGregorianCutover();
        org.joda.time.Instant instant35 = instant33.withMillis(0L);
        org.joda.time.Instant instant37 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone38 = null;
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.forTimeZone(timeZone38);
        org.joda.time.chrono.GJChronology gJChronology40 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone39);
        org.joda.time.DateTimeField dateTimeField41 = gJChronology40.millisOfSecond();
        int int42 = instant37.get(dateTimeField41);
        org.joda.time.Instant instant44 = instant37.plus(0L);
        int int45 = instant35.compareTo((org.joda.time.ReadableInstant) instant44);
        org.joda.time.DateTimeFieldType dateTimeFieldType46 = null;
        boolean boolean47 = instant44.isSupported(dateTimeFieldType46);
        int int48 = dateTimeZone17.getOffset((org.joda.time.ReadableInstant) instant44);
        boolean boolean49 = instant13.isAfter((org.joda.time.ReadableInstant) instant44);
        org.joda.time.chrono.GJChronology gJChronology50 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone8, (org.joda.time.ReadableInstant) instant13);
        org.joda.time.Chronology chronology51 = gJChronology2.withZone(dateTimeZone8);
        org.joda.time.DurationField durationField52 = gJChronology2.seconds();
        org.joda.time.DurationField durationField53 = gJChronology2.eras();
        org.joda.time.DateTimeField dateTimeField54 = gJChronology2.minuteOfHour();
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField52 and durationField53", Math.signum(durationField52.compareTo(durationField53)) == -Math.signum(durationField53.compareTo(durationField52)));
    }

    @Test
    public void test1931() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1931");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        org.joda.time.Instant instant3 = instant1.withMillis((long) 'u');
        java.util.TimeZone timeZone4 = null;
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forTimeZone(timeZone4);
        org.joda.time.chrono.GJChronology gJChronology6 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone5);
        org.joda.time.DurationField durationField7 = gJChronology6.halfdays();
        long long11 = gJChronology6.add((long) 'a', (-1L), (int) (short) 0);
        boolean boolean13 = gJChronology6.equals((java.lang.Object) 0);
        org.joda.time.DateTimeField dateTimeField14 = gJChronology6.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology6.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField16 = gJChronology6.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField17 = gJChronology6.clockhourOfHalfday();
        org.joda.time.DateTime dateTime18 = instant1.toDateTime((org.joda.time.Chronology) gJChronology6);
        java.util.TimeZone timeZone19 = null;
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forTimeZone(timeZone19);
        org.joda.time.chrono.GJChronology gJChronology21 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone20);
        org.joda.time.DurationField durationField22 = gJChronology21.halfdays();
        long long26 = gJChronology21.add((long) 'a', (-1L), (int) (short) 0);
        long long30 = gJChronology21.add((long) (byte) 0, (long) '4', 100);
        org.joda.time.DateTimeField dateTimeField31 = gJChronology21.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField32 = gJChronology21.year();
        org.joda.time.DateTimeField dateTimeField33 = gJChronology21.monthOfYear();
        org.joda.time.MutableDateTime mutableDateTime34 = instant1.toMutableDateTime((org.joda.time.Chronology) gJChronology21);
        boolean boolean36 = instant1.isAfter(4324200000L);
        java.util.TimeZone timeZone37 = null;
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forTimeZone(timeZone37);
        org.joda.time.chrono.GJChronology gJChronology39 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone38);
        org.joda.time.DateTimeField dateTimeField40 = gJChronology39.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField41 = gJChronology39.weekyear();
        org.joda.time.DurationField durationField42 = gJChronology39.centuries();
        org.joda.time.DateTimeField dateTimeField43 = gJChronology39.millisOfDay();
        org.joda.time.DateTimeField dateTimeField44 = gJChronology39.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField45 = gJChronology39.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField46 = gJChronology39.dayOfWeek();
        int int47 = instant1.get(dateTimeField46);
        org.joda.time.MutableDateTime mutableDateTime48 = instant1.toMutableDateTime();
        org.joda.time.DateTimeZone dateTimeZone49 = instant1.getZone();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime18 and mutableDateTime48", (dateTime18.compareTo(mutableDateTime48) == 0) == dateTime18.equals(mutableDateTime48));
    }

    @Test
    public void test1932() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1932");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str3 = dateTimeZone1.getNameKey((long) 100);
        boolean boolean4 = dateTimeZone1.isFixed();
        java.util.Locale locale8 = new java.util.Locale("DurationField[halfdays]", "\u82f1\u6587");
        java.lang.String str9 = dateTimeZone1.getName((long) (short) 10, locale8);
        org.joda.time.Instant instant11 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone12 = null;
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forTimeZone(timeZone12);
        org.joda.time.chrono.GJChronology gJChronology14 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone13);
        org.joda.time.DateTimeField dateTimeField15 = gJChronology14.millisOfSecond();
        int int16 = instant11.get(dateTimeField15);
        org.joda.time.Chronology chronology17 = instant11.getChronology();
        org.joda.time.chrono.GJChronology gJChronology18 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1, (org.joda.time.ReadableInstant) instant11);
        org.joda.time.DurationField durationField19 = gJChronology18.eras();
        org.joda.time.DateTimeField dateTimeField20 = gJChronology18.centuryOfEra();
        org.joda.time.DurationField durationField21 = gJChronology18.centuries();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField19, durationField21, and durationField19", !(durationField19.compareTo(durationField21) == 0) || (Math.signum(durationField19.compareTo(durationField19)) == Math.signum(durationField21.compareTo(durationField19))));
    }

    @Test
    public void test1933() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1933");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str3 = dateTimeZone1.getNameKey((long) 100);
        boolean boolean4 = dateTimeZone1.isFixed();
        org.joda.time.Instant instant6 = new org.joda.time.Instant(52L);
        boolean boolean7 = instant6.isEqualNow();
        java.lang.String str8 = instant6.toString();
        java.lang.String str9 = instant6.toString();
        org.joda.time.Instant instant12 = instant6.withDurationAdded(115200000L, (int) (short) 1);
        java.util.TimeZone timeZone13 = null;
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forTimeZone(timeZone13);
        java.lang.String str16 = dateTimeZone14.getNameKey((long) 100);
        boolean boolean17 = dateTimeZone14.isFixed();
        org.joda.time.DateTime dateTime18 = instant6.toDateTime(dateTimeZone14);
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = null;
        boolean boolean20 = instant6.isSupported(dateTimeFieldType19);
        int int21 = dateTimeZone1.getOffset((org.joda.time.ReadableInstant) instant6);
        org.joda.time.Instant instant23 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone24 = null;
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forTimeZone(timeZone24);
        org.joda.time.chrono.GJChronology gJChronology26 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone25);
        org.joda.time.DateTimeField dateTimeField27 = gJChronology26.millisOfSecond();
        int int28 = instant23.get(dateTimeField27);
        org.joda.time.Instant instant30 = instant23.plus(0L);
        org.joda.time.Instant instant31 = instant30.toInstant();
        org.joda.time.Instant instant33 = new org.joda.time.Instant(52L);
        boolean boolean34 = instant33.isEqualNow();
        java.lang.String str35 = instant33.toString();
        java.lang.String str36 = instant33.toString();
        org.joda.time.Instant instant38 = new org.joda.time.Instant(52L);
        boolean boolean39 = instant38.isEqualNow();
        org.joda.time.ReadableDuration readableDuration40 = null;
        org.joda.time.Instant instant41 = instant38.plus(readableDuration40);
        boolean boolean42 = instant33.isBefore((org.joda.time.ReadableInstant) instant41);
        org.joda.time.Instant instant44 = instant33.minus((long) 0);
        int int45 = instant30.compareTo((org.joda.time.ReadableInstant) instant33);
        org.joda.time.DateTime dateTime46 = instant30.toDateTimeISO();
        org.joda.time.Instant instant48 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone49 = null;
        org.joda.time.DateTimeZone dateTimeZone50 = org.joda.time.DateTimeZone.forTimeZone(timeZone49);
        org.joda.time.chrono.GJChronology gJChronology51 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone50);
        org.joda.time.DateTimeField dateTimeField52 = gJChronology51.millisOfSecond();
        int int53 = instant48.get(dateTimeField52);
        org.joda.time.Instant instant55 = instant48.plus(0L);
        boolean boolean56 = dateTime46.isAfter((org.joda.time.ReadableInstant) instant48);
        int int57 = instant6.compareTo((org.joda.time.ReadableInstant) instant48);
        java.lang.String str58 = instant48.toString();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant6 and dateTime18", (instant6.compareTo(dateTime18) == 0) == instant6.equals(dateTime18));
    }

    @Test
    public void test1934() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1934");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forTimeZone(timeZone2);
        org.joda.time.chrono.GJChronology gJChronology4 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone3);
        org.joda.time.DateTimeField dateTimeField5 = gJChronology4.millisOfSecond();
        int int6 = instant1.get(dateTimeField5);
        org.joda.time.Chronology chronology7 = instant1.getChronology();
        org.joda.time.Instant instant9 = instant1.withMillis((-24192000000000L));
        org.joda.time.MutableDateTime mutableDateTime10 = instant1.toMutableDateTimeISO();
        long long11 = mutableDateTime10.getMillis();
        org.joda.time.Instant instant12 = mutableDateTime10.toInstant();
        java.util.Date date13 = instant12.toDate();
        java.util.TimeZone timeZone14 = null;
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forTimeZone(timeZone14);
        org.joda.time.chrono.GJChronology gJChronology16 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone15);
        long long20 = dateTimeZone15.convertLocalToUTC((long) (byte) -1, true, 0L);
        boolean boolean22 = dateTimeZone15.equals((java.lang.Object) true);
        org.joda.time.chrono.GJChronology gJChronology23 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone15);
        org.joda.time.DateTimeField dateTimeField24 = gJChronology23.weekyear();
        org.joda.time.DateTimeField dateTimeField25 = gJChronology23.era();
        org.joda.time.DateTimeField dateTimeField26 = gJChronology23.centuryOfEra();
        org.joda.time.Chronology chronology27 = gJChronology23.withUTC();
        org.joda.time.DurationField durationField28 = gJChronology23.years();
        org.joda.time.MutableDateTime mutableDateTime29 = instant12.toMutableDateTime((org.joda.time.Chronology) gJChronology23);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and mutableDateTime10", (instant1.compareTo(mutableDateTime10) == 0) == instant1.equals(mutableDateTime10));
    }

    @Test
    public void test1935() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1935");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        boolean boolean2 = instant1.isEqualNow();
        java.lang.String str3 = instant1.toString();
        java.lang.String str4 = instant1.toString();
        org.joda.time.Instant instant7 = instant1.withDurationAdded(115200000L, (int) (short) 1);
        boolean boolean8 = instant7.isBeforeNow();
        org.joda.time.Instant instant10 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone11 = null;
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forTimeZone(timeZone11);
        org.joda.time.chrono.GJChronology gJChronology13 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone12);
        org.joda.time.DateTimeField dateTimeField14 = gJChronology13.millisOfSecond();
        int int15 = instant10.get(dateTimeField14);
        boolean boolean16 = instant10.isEqualNow();
        org.joda.time.Instant instant18 = new org.joda.time.Instant(52L);
        boolean boolean19 = instant18.isEqualNow();
        org.joda.time.ReadableDuration readableDuration20 = null;
        org.joda.time.Instant instant21 = instant18.plus(readableDuration20);
        long long22 = instant18.getMillis();
        java.lang.Object obj23 = null;
        boolean boolean24 = instant18.equals(obj23);
        org.joda.time.Instant instant26 = new org.joda.time.Instant(52L);
        boolean boolean27 = instant26.isEqualNow();
        org.joda.time.ReadableDuration readableDuration28 = null;
        org.joda.time.Instant instant29 = instant26.plus(readableDuration28);
        long long30 = instant26.getMillis();
        java.lang.String str31 = instant26.toString();
        org.joda.time.Instant instant32 = instant26.toInstant();
        org.joda.time.ReadableDuration readableDuration33 = null;
        org.joda.time.Instant instant35 = instant26.withDurationAdded(readableDuration33, (int) 'x');
        org.joda.time.Instant instant36 = instant26.toInstant();
        int int37 = instant18.compareTo((org.joda.time.ReadableInstant) instant26);
        boolean boolean38 = instant10.isBefore((org.joda.time.ReadableInstant) instant26);
        java.util.TimeZone timeZone39 = null;
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.forTimeZone(timeZone39);
        org.joda.time.chrono.GJChronology gJChronology41 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone40);
        org.joda.time.DurationField durationField42 = gJChronology41.halfdays();
        long long46 = gJChronology41.add((long) 'a', (-1L), (int) (short) 0);
        org.joda.time.DateTimeField dateTimeField47 = gJChronology41.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField48 = gJChronology41.secondOfMinute();
        org.joda.time.Instant instant50 = new org.joda.time.Instant(52L);
        boolean boolean51 = instant50.isEqualNow();
        org.joda.time.ReadableDuration readableDuration52 = null;
        org.joda.time.Instant instant53 = instant50.plus(readableDuration52);
        boolean boolean54 = gJChronology41.equals((java.lang.Object) instant50);
        org.joda.time.DateTimeFieldType dateTimeFieldType55 = null;
        boolean boolean56 = instant50.isSupported(dateTimeFieldType55);
        org.joda.time.DateTimeFieldType dateTimeFieldType57 = null;
        boolean boolean58 = instant50.isSupported(dateTimeFieldType57);
        java.lang.String str59 = instant50.toString();
        boolean boolean60 = instant10.isAfter((org.joda.time.ReadableInstant) instant50);
        org.joda.time.MutableDateTime mutableDateTime61 = instant50.toMutableDateTimeISO();
        int int62 = instant7.compareTo((org.joda.time.ReadableInstant) mutableDateTime61);
        org.joda.time.Instant instant64 = new org.joda.time.Instant(52L);
        boolean boolean65 = instant64.isEqualNow();
        java.lang.String str66 = instant64.toString();
        java.lang.String str67 = instant64.toString();
        org.joda.time.Instant instant70 = instant64.withDurationAdded(115200000L, (int) (short) 1);
        org.joda.time.Instant instant71 = instant64.toInstant();
        org.joda.time.Instant instant73 = instant71.minus(4492800100L);
        org.joda.time.DateTimeZone dateTimeZone74 = instant73.getZone();
        boolean boolean75 = mutableDateTime61.isEqual((org.joda.time.ReadableInstant) instant73);
        org.joda.time.MutableDateTime mutableDateTime76 = instant73.toMutableDateTime();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and mutableDateTime61", (instant1.compareTo(mutableDateTime61) == 0) == instant1.equals(mutableDateTime61));
    }

    @Test
    public void test1936() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1936");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = gJChronology2.halfdays();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.millisOfDay();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.minuteOfDay();
        org.joda.time.DurationField durationField6 = gJChronology2.centuries();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology2.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField8 = gJChronology2.year();
        org.joda.time.Instant instant9 = gJChronology2.getGregorianCutover();
        java.util.TimeZone timeZone10 = null;
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forTimeZone(timeZone10);
        org.joda.time.chrono.GJChronology gJChronology12 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone11);
        org.joda.time.DurationField durationField13 = gJChronology12.halfdays();
        org.joda.time.DateTimeField dateTimeField14 = gJChronology12.millisOfDay();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology12.minuteOfDay();
        org.joda.time.DurationField durationField16 = gJChronology12.centuries();
        org.joda.time.DateTimeField dateTimeField17 = gJChronology12.dayOfYear();
        java.lang.String str18 = gJChronology12.toString();
        org.joda.time.DateTimeField dateTimeField19 = gJChronology12.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone20 = gJChronology12.getZone();
        org.joda.time.chrono.GJChronology gJChronology21 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone20);
        org.joda.time.Chronology chronology22 = gJChronology2.withZone(dateTimeZone20);
        org.joda.time.Instant instant24 = new org.joda.time.Instant(52L);
        boolean boolean25 = instant24.isEqualNow();
        java.lang.String str26 = instant24.toString();
        java.lang.String str27 = instant24.toString();
        org.joda.time.Instant instant29 = new org.joda.time.Instant(52L);
        boolean boolean30 = instant29.isEqualNow();
        org.joda.time.ReadableDuration readableDuration31 = null;
        org.joda.time.Instant instant32 = instant29.plus(readableDuration31);
        boolean boolean33 = instant24.isBefore((org.joda.time.ReadableInstant) instant32);
        org.joda.time.Instant instant35 = instant32.plus((long) (short) 100);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.MutableDateTime mutableDateTime37 = instant32.toMutableDateTime(chronology36);
        boolean boolean38 = mutableDateTime37.isEqualNow();
        org.joda.time.chrono.GJChronology gJChronology39 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone20, (org.joda.time.ReadableInstant) mutableDateTime37);
        boolean boolean40 = mutableDateTime37.isAfterNow();
        java.util.TimeZone timeZone41 = null;
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.forTimeZone(timeZone41);
        org.joda.time.chrono.GJChronology gJChronology43 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone42);
        org.joda.time.DurationField durationField44 = gJChronology43.halfdays();
        long long48 = gJChronology43.add((long) 'a', (-1L), (int) (short) 0);
        boolean boolean50 = gJChronology43.equals((java.lang.Object) 0);
        org.joda.time.DateTimeField dateTimeField51 = gJChronology43.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField52 = gJChronology43.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField53 = gJChronology43.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField54 = gJChronology43.clockhourOfHalfday();
        org.joda.time.DurationField durationField55 = gJChronology43.weekyears();
        org.joda.time.DurationField durationField56 = gJChronology43.seconds();
        org.joda.time.DurationField durationField57 = gJChronology43.years();
        org.joda.time.DateTime dateTime58 = mutableDateTime37.toDateTime((org.joda.time.Chronology) gJChronology43);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on durationField55 and durationField57", (durationField55.compareTo(durationField57) == 0) == durationField55.equals(durationField57));
    }

    @Test
    public void test1937() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1937");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = gJChronology2.halfdays();
        long long7 = gJChronology2.add((long) 'a', (-1L), (int) (short) 0);
        org.joda.time.DateTimeField dateTimeField8 = gJChronology2.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField9 = gJChronology2.centuryOfEra();
        long long13 = gJChronology2.add(4492800100L, 43201764L, 0);
        org.joda.time.Instant instant15 = new org.joda.time.Instant(52L);
        boolean boolean16 = instant15.isEqualNow();
        java.lang.String str17 = instant15.toString();
        java.lang.String str18 = instant15.toString();
        org.joda.time.Instant instant21 = instant15.withDurationAdded(115200000L, (int) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone22 = instant15.getZone();
        org.joda.time.Chronology chronology23 = gJChronology2.withZone(dateTimeZone22);
        org.joda.time.chrono.GJChronology gJChronology24 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone22);
        org.joda.time.Instant instant26 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone27 = null;
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forTimeZone(timeZone27);
        org.joda.time.chrono.GJChronology gJChronology29 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone28);
        org.joda.time.DateTimeField dateTimeField30 = gJChronology29.millisOfSecond();
        int int31 = instant26.get(dateTimeField30);
        org.joda.time.Instant instant33 = instant26.plus(0L);
        java.util.TimeZone timeZone34 = null;
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.forTimeZone(timeZone34);
        org.joda.time.chrono.GJChronology gJChronology36 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone35);
        org.joda.time.DurationField durationField37 = gJChronology36.halfdays();
        org.joda.time.Chronology chronology38 = gJChronology36.withUTC();
        java.lang.String str39 = gJChronology36.toString();
        org.joda.time.DateTimeField dateTimeField40 = gJChronology36.hourOfHalfday();
        int int41 = instant26.get(dateTimeField40);
        org.joda.time.Instant instant43 = new org.joda.time.Instant(52L);
        boolean boolean44 = instant43.isEqualNow();
        org.joda.time.ReadableDuration readableDuration45 = null;
        org.joda.time.Instant instant46 = instant43.plus(readableDuration45);
        org.joda.time.Instant instant48 = new org.joda.time.Instant(52L);
        org.joda.time.Instant instant50 = instant48.withMillis((long) 'u');
        boolean boolean51 = instant43.isBefore((org.joda.time.ReadableInstant) instant48);
        boolean boolean52 = instant26.isEqual((org.joda.time.ReadableInstant) instant48);
        org.joda.time.DateTime dateTime53 = instant26.toDateTime();
        int int54 = dateTimeZone22.getOffset((org.joda.time.ReadableInstant) instant26);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant15 and dateTime53", (instant15.compareTo(dateTime53) == 0) == instant15.equals(dateTime53));
    }

    @Test
    public void test1938() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1938");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField3 = gJChronology2.millisOfSecond();
        org.joda.time.DurationField durationField4 = gJChronology2.millis();
        org.joda.time.DurationField durationField5 = gJChronology2.weeks();
        org.joda.time.DurationField durationField6 = gJChronology2.months();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology2.year();
        org.joda.time.DurationField durationField8 = gJChronology2.minutes();
        org.joda.time.DateTimeField dateTimeField9 = gJChronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField10 = gJChronology2.clockhourOfHalfday();
        org.joda.time.DurationField durationField11 = gJChronology2.eras();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField11, durationField4, and durationField5", !(durationField11.compareTo(durationField4) == 0) || (Math.signum(durationField11.compareTo(durationField5)) == Math.signum(durationField4.compareTo(durationField5))));
    }

    @Test
    public void test1939() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1939");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((-32888799L));
        org.joda.time.Instant instant3 = new org.joda.time.Instant(52L);
        boolean boolean4 = instant3.isEqualNow();
        boolean boolean6 = instant3.isEqual(0L);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = null;
        boolean boolean8 = instant3.isSupported(dateTimeFieldType7);
        boolean boolean9 = instant3.isAfterNow();
        org.joda.time.Instant instant11 = new org.joda.time.Instant(52L);
        boolean boolean12 = instant11.isEqualNow();
        org.joda.time.ReadableDuration readableDuration13 = null;
        org.joda.time.Instant instant14 = instant11.plus(readableDuration13);
        long long15 = instant11.getMillis();
        java.lang.String str16 = instant11.toString();
        boolean boolean17 = instant3.isBefore((org.joda.time.ReadableInstant) instant11);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateTime dateTime19 = instant11.toDateTime(dateTimeZone18);
        boolean boolean20 = instant1.isEqual((org.joda.time.ReadableInstant) instant11);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant3 and dateTime19", (instant3.compareTo(dateTime19) == 0) == instant3.equals(dateTime19));
    }

    @Test
    public void test1940() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1940");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = gJChronology2.halfdays();
        long long7 = gJChronology2.add((long) 'a', (-1L), (int) (short) 0);
        org.joda.time.DateTimeField dateTimeField8 = gJChronology2.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField9 = gJChronology2.secondOfMinute();
        org.joda.time.Instant instant11 = new org.joda.time.Instant(52L);
        boolean boolean12 = instant11.isEqualNow();
        org.joda.time.ReadableDuration readableDuration13 = null;
        org.joda.time.Instant instant14 = instant11.plus(readableDuration13);
        boolean boolean15 = gJChronology2.equals((java.lang.Object) instant11);
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = null;
        boolean boolean17 = instant11.isSupported(dateTimeFieldType16);
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = null;
        boolean boolean19 = instant11.isSupported(dateTimeFieldType18);
        org.joda.time.DateTimeZone dateTimeZone20 = instant11.getZone();
        long long22 = dateTimeZone20.nextTransition(349200L);
        java.lang.String str23 = dateTimeZone20.toString();
        java.util.Locale locale25 = java.util.Locale.ITALIAN;
        java.lang.String str26 = locale25.getCountry();
        java.util.Locale locale27 = java.util.Locale.UK;
        java.lang.String str28 = locale27.getDisplayCountry();
        java.util.Set<java.lang.Character> charSet29 = locale27.getExtensionKeys();
        java.util.Locale locale30 = locale27.stripExtensions();
        java.lang.String str31 = locale25.getDisplayVariant(locale30);
        java.lang.String str33 = locale30.getUnicodeLocaleType("de");
        java.util.Locale locale35 = new java.util.Locale("hi!");
        java.lang.String str36 = locale35.getVariant();
        java.util.Locale locale38 = java.util.Locale.forLanguageTag("hi!");
        java.lang.String str39 = locale38.toLanguageTag();
        java.lang.String str40 = locale35.getDisplayName(locale38);
        java.util.Locale locale41 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale42 = java.util.Locale.ENGLISH;
        java.lang.String str43 = locale41.getDisplayLanguage(locale42);
        java.util.Locale locale44 = java.util.Locale.CANADA;
        java.lang.String str45 = locale44.getISO3Language();
        java.lang.String str46 = locale41.getDisplayVariant(locale44);
        java.lang.String str47 = locale38.getDisplayCountry(locale44);
        java.lang.String str48 = locale30.getDisplayCountry(locale38);
        java.util.Set<java.lang.Character> charSet49 = locale30.getExtensionKeys();
        java.lang.String str50 = dateTimeZone20.getName(0L, locale30);
        java.lang.String str52 = dateTimeZone20.getNameKey(747217518019309440L);
        org.joda.time.Instant instant54 = new org.joda.time.Instant(52L);
        org.joda.time.Instant instant56 = instant54.withMillis((long) 'u');
        java.util.TimeZone timeZone57 = null;
        org.joda.time.DateTimeZone dateTimeZone58 = org.joda.time.DateTimeZone.forTimeZone(timeZone57);
        org.joda.time.chrono.GJChronology gJChronology59 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone58);
        org.joda.time.DurationField durationField60 = gJChronology59.halfdays();
        long long64 = gJChronology59.add((long) 'a', (-1L), (int) (short) 0);
        boolean boolean66 = gJChronology59.equals((java.lang.Object) 0);
        org.joda.time.DateTimeField dateTimeField67 = gJChronology59.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField68 = gJChronology59.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField69 = gJChronology59.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField70 = gJChronology59.clockhourOfHalfday();
        org.joda.time.DateTime dateTime71 = instant54.toDateTime((org.joda.time.Chronology) gJChronology59);
        java.lang.String str72 = dateTime71.toString();
        long long73 = dateTime71.getMillis();
        long long74 = dateTime71.getMillis();
        org.joda.time.chrono.GJChronology gJChronology75 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone20, (org.joda.time.ReadableInstant) dateTime71);
        org.joda.time.Chronology chronology76 = gJChronology75.withUTC();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant11 and dateTime71", (instant11.compareTo(dateTime71) == 0) == instant11.equals(dateTime71));
    }

    @Test
    public void test1941() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1941");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        boolean boolean2 = instant1.isEqualNow();
        org.joda.time.ReadableDuration readableDuration3 = null;
        org.joda.time.Instant instant4 = instant1.plus(readableDuration3);
        org.joda.time.Instant instant6 = instant1.withMillis((long) 4);
        boolean boolean7 = instant6.isBeforeNow();
        boolean boolean9 = instant6.isBefore(5185792L);
        org.joda.time.MutableDateTime mutableDateTime10 = instant6.toMutableDateTime();
        org.joda.time.Instant instant11 = instant6.toInstant();
        org.joda.time.MutableDateTime mutableDateTime12 = instant6.toMutableDateTime();
        java.util.TimeZone timeZone13 = null;
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forTimeZone(timeZone13);
        org.joda.time.chrono.GJChronology gJChronology15 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone14);
        org.joda.time.DateTimeField dateTimeField16 = gJChronology15.era();
        org.joda.time.DateTimeField dateTimeField17 = gJChronology15.weekyear();
        org.joda.time.DateTimeField dateTimeField18 = gJChronology15.weekyearOfCentury();
        boolean boolean19 = instant6.equals((java.lang.Object) dateTimeField18);
        org.joda.time.Instant instant22 = instant6.withDurationAdded((long) 30, (-166));
        org.joda.time.Instant instant23 = instant22.toInstant();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant6 and mutableDateTime10", (instant6.compareTo(mutableDateTime10) == 0) == instant6.equals(mutableDateTime10));
    }

    @Test
    public void test1942() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1942");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = gJChronology2.halfdays();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.millisOfDay();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.minuteOfDay();
        org.joda.time.DurationField durationField6 = gJChronology2.centuries();
        int int7 = gJChronology2.getMinimumDaysInFirstWeek();
        org.joda.time.DateTimeField dateTimeField8 = gJChronology2.weekyear();
        org.joda.time.DateTimeField dateTimeField9 = gJChronology2.weekyearOfCentury();
        org.joda.time.DurationField durationField10 = gJChronology2.halfdays();
        org.joda.time.Instant instant11 = gJChronology2.getGregorianCutover();
        java.lang.String str12 = instant11.toString();
        org.joda.time.Instant instant14 = new org.joda.time.Instant(52L);
        boolean boolean15 = instant14.isEqualNow();
        boolean boolean17 = instant14.isEqual(0L);
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = null;
        boolean boolean19 = instant14.isSupported(dateTimeFieldType18);
        org.joda.time.Instant instant22 = instant14.withDurationAdded((-61827926399999L), (int) (short) -1);
        org.joda.time.MutableDateTime mutableDateTime23 = instant22.toMutableDateTime();
        org.joda.time.Instant instant24 = instant22.toInstant();
        int int25 = instant11.compareTo((org.joda.time.ReadableInstant) instant22);
        java.util.TimeZone timeZone26 = null;
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forTimeZone(timeZone26);
        org.joda.time.chrono.GJChronology gJChronology28 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone27);
        org.joda.time.DateTimeField dateTimeField29 = gJChronology28.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField30 = gJChronology28.weekyear();
        org.joda.time.DateTimeField dateTimeField31 = gJChronology28.halfdayOfDay();
        org.joda.time.DurationField durationField32 = gJChronology28.years();
        org.joda.time.DurationField durationField33 = gJChronology28.minutes();
        org.joda.time.ReadablePeriod readablePeriod34 = null;
        long long37 = gJChronology28.add(readablePeriod34, (-42L), (int) '4');
        org.joda.time.Chronology chronology38 = gJChronology28.withUTC();
        org.joda.time.DateTimeField dateTimeField39 = gJChronology28.millisOfSecond();
        int int40 = instant11.get(dateTimeField39);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant22 and mutableDateTime23", (instant22.compareTo(mutableDateTime23) == 0) == instant22.equals(mutableDateTime23));
    }

    @Test
    public void test1943() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1943");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forTimeZone(timeZone2);
        org.joda.time.chrono.GJChronology gJChronology4 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone3);
        org.joda.time.DateTimeField dateTimeField5 = gJChronology4.millisOfSecond();
        int int6 = instant1.get(dateTimeField5);
        boolean boolean7 = instant1.isEqualNow();
        org.joda.time.tz.NameProvider nameProvider8 = org.joda.time.DateTimeZone.getNameProvider();
        org.joda.time.DateTimeZone.setNameProvider(nameProvider8);
        org.joda.time.DateTimeZone.setNameProvider(nameProvider8);
        boolean boolean11 = instant1.equals((java.lang.Object) nameProvider8);
        org.joda.time.Instant instant13 = new org.joda.time.Instant(52L);
        boolean boolean14 = instant13.isEqualNow();
        java.lang.String str15 = instant13.toString();
        org.joda.time.DateTimeZone dateTimeZone16 = instant13.getZone();
        org.joda.time.DateTime dateTime17 = instant1.toDateTime(dateTimeZone16);
        java.lang.String str18 = instant1.toString();
        org.joda.time.ReadableDuration readableDuration19 = null;
        org.joda.time.Instant instant20 = instant1.plus(readableDuration19);
        org.joda.time.Instant instant22 = instant20.plus(43200152L);
        org.joda.time.Instant instant24 = instant22.plus(0L);
        java.util.TimeZone timeZone25 = null;
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forTimeZone(timeZone25);
        java.lang.String str28 = dateTimeZone26.getNameKey((long) 100);
        boolean boolean29 = dateTimeZone26.isFixed();
        org.joda.time.chrono.GJChronology gJChronology30 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone26);
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        long long33 = dateTimeZone26.getMillisKeepLocal(dateTimeZone31, (long) (byte) 0);
        int int35 = dateTimeZone26.getOffsetFromLocal(349200000L);
        java.lang.String str36 = dateTimeZone26.getID();
        org.joda.time.MutableDateTime mutableDateTime37 = instant22.toMutableDateTime(dateTimeZone26);
        java.util.TimeZone timeZone38 = null;
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.forTimeZone(timeZone38);
        org.joda.time.chrono.GJChronology gJChronology40 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone39);
        long long44 = dateTimeZone39.convertLocalToUTC((long) (byte) -1, true, 0L);
        boolean boolean46 = dateTimeZone39.equals((java.lang.Object) true);
        java.util.TimeZone timeZone47 = dateTimeZone39.toTimeZone();
        java.util.TimeZone timeZone48 = null;
        org.joda.time.DateTimeZone dateTimeZone49 = org.joda.time.DateTimeZone.forTimeZone(timeZone48);
        java.lang.String str51 = dateTimeZone49.getNameKey((long) 100);
        boolean boolean52 = dateTimeZone49.isFixed();
        org.joda.time.chrono.GJChronology gJChronology53 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone49);
        org.joda.time.DurationField durationField54 = gJChronology53.hours();
        org.joda.time.DateTimeField dateTimeField55 = gJChronology53.weekyear();
        org.joda.time.DateTimeField dateTimeField56 = gJChronology53.year();
        org.joda.time.DurationField durationField57 = gJChronology53.millis();
        org.joda.time.DateTimeField dateTimeField58 = gJChronology53.millisOfSecond();
        org.joda.time.DateTimeZone dateTimeZone59 = gJChronology53.getZone();
        long long61 = dateTimeZone39.getMillisKeepLocal(dateTimeZone59, (-1274105869258439L));
        long long63 = dateTimeZone26.getMillisKeepLocal(dateTimeZone59, 78796800000L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant22 and mutableDateTime37", (instant22.compareTo(mutableDateTime37) == 0) == instant22.equals(mutableDateTime37));
    }

    @Test
    public void test1944() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1944");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        boolean boolean2 = instant1.isEqualNow();
        java.lang.String str3 = instant1.toString();
        org.joda.time.Instant instant5 = new org.joda.time.Instant(52L);
        boolean boolean6 = instant5.isEqualNow();
        java.lang.String str7 = instant5.toString();
        java.lang.String str8 = instant5.toString();
        org.joda.time.Instant instant11 = instant5.withDurationAdded(115200000L, (int) (short) 1);
        int int12 = instant1.compareTo((org.joda.time.ReadableInstant) instant5);
        org.joda.time.Instant instant14 = new org.joda.time.Instant(52L);
        boolean boolean15 = instant14.isEqualNow();
        org.joda.time.ReadableDuration readableDuration16 = null;
        org.joda.time.Instant instant17 = instant14.plus(readableDuration16);
        boolean boolean19 = instant17.equals((java.lang.Object) ' ');
        boolean boolean20 = instant5.isAfter((org.joda.time.ReadableInstant) instant17);
        org.joda.time.ReadableDuration readableDuration21 = null;
        org.joda.time.Instant instant22 = instant17.plus(readableDuration21);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter23 = null;
        java.lang.String str24 = instant17.toString(dateTimeFormatter23);
        java.util.TimeZone timeZone25 = null;
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forTimeZone(timeZone25);
        org.joda.time.chrono.GJChronology gJChronology27 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone26);
        org.joda.time.DurationField durationField28 = gJChronology27.halfdays();
        long long32 = gJChronology27.add((long) 'a', (-1L), (int) (short) 0);
        org.joda.time.DateTimeField dateTimeField33 = gJChronology27.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField34 = gJChronology27.secondOfMinute();
        long long38 = gJChronology27.add(186641343849600000L, 12L, 55296000);
        org.joda.time.MutableDateTime mutableDateTime39 = instant17.toMutableDateTime((org.joda.time.Chronology) gJChronology27);
        org.joda.time.DateTimeZone dateTimeZone40 = instant17.getZone();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and mutableDateTime39", (instant1.compareTo(mutableDateTime39) == 0) == instant1.equals(mutableDateTime39));
    }

    @Test
    public void test1945() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1945");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forID("+00:01");
        org.joda.time.Instant instant3 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone4 = null;
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forTimeZone(timeZone4);
        org.joda.time.chrono.GJChronology gJChronology6 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone5);
        org.joda.time.DateTimeField dateTimeField7 = gJChronology6.millisOfSecond();
        int int8 = instant3.get(dateTimeField7);
        org.joda.time.Instant instant10 = instant3.plus(0L);
        java.util.TimeZone timeZone11 = null;
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forTimeZone(timeZone11);
        org.joda.time.chrono.GJChronology gJChronology13 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone12);
        org.joda.time.DurationField durationField14 = gJChronology13.halfdays();
        org.joda.time.Chronology chronology15 = gJChronology13.withUTC();
        java.lang.String str16 = gJChronology13.toString();
        org.joda.time.DateTimeField dateTimeField17 = gJChronology13.hourOfHalfday();
        int int18 = instant3.get(dateTimeField17);
        org.joda.time.Instant instant20 = new org.joda.time.Instant(52L);
        boolean boolean21 = instant20.isEqualNow();
        java.lang.String str22 = instant20.toString();
        org.joda.time.Instant instant24 = new org.joda.time.Instant(52L);
        boolean boolean25 = instant24.isEqualNow();
        java.lang.String str26 = instant24.toString();
        java.lang.String str27 = instant24.toString();
        org.joda.time.Instant instant30 = instant24.withDurationAdded(115200000L, (int) (short) 1);
        int int31 = instant20.compareTo((org.joda.time.ReadableInstant) instant24);
        org.joda.time.Instant instant33 = new org.joda.time.Instant(52L);
        boolean boolean34 = instant33.isEqualNow();
        org.joda.time.ReadableDuration readableDuration35 = null;
        org.joda.time.Instant instant36 = instant33.plus(readableDuration35);
        boolean boolean38 = instant36.equals((java.lang.Object) ' ');
        boolean boolean39 = instant24.isAfter((org.joda.time.ReadableInstant) instant36);
        int int40 = instant3.compareTo((org.joda.time.ReadableInstant) instant24);
        org.joda.time.Instant instant42 = instant24.minus(10699L);
        org.joda.time.chrono.GJChronology gJChronology43 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1, (org.joda.time.ReadableInstant) instant24);
        org.joda.time.Instant instant45 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone46 = null;
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.forTimeZone(timeZone46);
        org.joda.time.chrono.GJChronology gJChronology48 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone47);
        org.joda.time.DateTimeField dateTimeField49 = gJChronology48.millisOfSecond();
        int int50 = instant45.get(dateTimeField49);
        org.joda.time.Instant instant52 = instant45.plus(0L);
        org.joda.time.Instant instant53 = instant52.toInstant();
        java.lang.String str54 = instant53.toString();
        int int55 = dateTimeZone1.getOffset((org.joda.time.ReadableInstant) instant53);
        java.util.TimeZone timeZone56 = null;
        org.joda.time.DateTimeZone dateTimeZone57 = org.joda.time.DateTimeZone.forTimeZone(timeZone56);
        org.joda.time.chrono.GJChronology gJChronology58 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone57);
        java.util.Locale locale60 = new java.util.Locale("hi!");
        java.lang.String str61 = locale60.getCountry();
        java.util.Locale locale62 = java.util.Locale.getDefault();
        java.lang.String str63 = locale62.getDisplayName();
        java.lang.String str64 = locale60.getDisplayScript(locale62);
        boolean boolean65 = dateTimeZone57.equals((java.lang.Object) locale62);
        int int67 = dateTimeZone57.getOffsetFromLocal((long) (short) 10);
        java.util.TimeZone timeZone68 = null;
        org.joda.time.DateTimeZone dateTimeZone69 = org.joda.time.DateTimeZone.forTimeZone(timeZone68);
        org.joda.time.chrono.GJChronology gJChronology70 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone69);
        org.joda.time.DateTimeField dateTimeField71 = gJChronology70.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField72 = gJChronology70.weekyearOfCentury();
        org.joda.time.Instant instant73 = gJChronology70.getGregorianCutover();
        org.joda.time.Instant instant75 = instant73.withMillis(0L);
        org.joda.time.Instant instant77 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone78 = null;
        org.joda.time.DateTimeZone dateTimeZone79 = org.joda.time.DateTimeZone.forTimeZone(timeZone78);
        org.joda.time.chrono.GJChronology gJChronology80 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone79);
        org.joda.time.DateTimeField dateTimeField81 = gJChronology80.millisOfSecond();
        int int82 = instant77.get(dateTimeField81);
        org.joda.time.Instant instant84 = instant77.plus(0L);
        int int85 = instant75.compareTo((org.joda.time.ReadableInstant) instant84);
        org.joda.time.DateTimeFieldType dateTimeFieldType86 = null;
        boolean boolean87 = instant84.isSupported(dateTimeFieldType86);
        int int88 = dateTimeZone57.getOffset((org.joda.time.ReadableInstant) instant84);
        org.joda.time.DateTime dateTime89 = instant84.toDateTimeISO();
        int int90 = dateTimeZone1.getOffset((org.joda.time.ReadableInstant) dateTime89);
        org.joda.time.chrono.GJChronology gJChronology91 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        long long95 = dateTimeZone1.convertLocalToUTC((-301795200000L), true, (long) 336105);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant3 and dateTime89", (instant3.compareTo(dateTime89) == 0) == instant3.equals(dateTime89));
    }

    @Test
    public void test1946() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1946");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        boolean boolean2 = instant1.isEqualNow();
        java.lang.String str3 = instant1.toString();
        java.lang.String str4 = instant1.toString();
        org.joda.time.Instant instant6 = new org.joda.time.Instant(52L);
        boolean boolean7 = instant6.isEqualNow();
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.Instant instant9 = instant6.plus(readableDuration8);
        boolean boolean10 = instant1.isBefore((org.joda.time.ReadableInstant) instant9);
        org.joda.time.Instant instant12 = instant9.plus((long) (short) 100);
        org.joda.time.Instant instant14 = instant12.withMillis(14452100L);
        java.util.TimeZone timeZone15 = null;
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forTimeZone(timeZone15);
        org.joda.time.chrono.GJChronology gJChronology17 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone16);
        org.joda.time.DurationField durationField18 = gJChronology17.halfdays();
        org.joda.time.DateTimeField dateTimeField19 = gJChronology17.millisOfDay();
        org.joda.time.DateTimeField dateTimeField20 = gJChronology17.minuteOfDay();
        org.joda.time.DurationField durationField21 = gJChronology17.centuries();
        org.joda.time.DateTimeField dateTimeField22 = gJChronology17.millisOfSecond();
        org.joda.time.Chronology chronology23 = gJChronology17.withUTC();
        org.joda.time.DateTimeField dateTimeField24 = gJChronology17.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField25 = gJChronology17.weekyearOfCentury();
        org.joda.time.DurationField durationField26 = gJChronology17.centuries();
        org.joda.time.MutableDateTime mutableDateTime27 = instant12.toMutableDateTime((org.joda.time.Chronology) gJChronology17);
        org.joda.time.Chronology chronology28 = gJChronology17.withUTC();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant12 and mutableDateTime27", (instant12.compareTo(mutableDateTime27) == 0) == instant12.equals(mutableDateTime27));
    }

    @Test
    public void test1947() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1947");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        boolean boolean2 = instant1.isEqualNow();
        org.joda.time.ReadableDuration readableDuration3 = null;
        org.joda.time.Instant instant4 = instant1.plus(readableDuration3);
        boolean boolean6 = instant4.equals((java.lang.Object) ' ');
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(1, 10);
        java.util.TimeZone timeZone10 = null;
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forTimeZone(timeZone10);
        long long13 = dateTimeZone9.getMillisKeepLocal(dateTimeZone11, 4320000000L);
        boolean boolean14 = instant4.equals((java.lang.Object) 4320000000L);
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = null;
        boolean boolean16 = instant4.isSupported(dateTimeFieldType15);
        org.joda.time.DateTime dateTime17 = instant4.toDateTimeISO();
        org.joda.time.Instant instant19 = new org.joda.time.Instant(52L);
        org.joda.time.Instant instant21 = instant19.withMillis((long) 'u');
        java.util.TimeZone timeZone22 = null;
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        org.joda.time.chrono.GJChronology gJChronology24 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone23);
        org.joda.time.DurationField durationField25 = gJChronology24.halfdays();
        long long29 = gJChronology24.add((long) 'a', (-1L), (int) (short) 0);
        boolean boolean31 = gJChronology24.equals((java.lang.Object) 0);
        org.joda.time.DateTimeField dateTimeField32 = gJChronology24.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField33 = gJChronology24.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField34 = gJChronology24.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField35 = gJChronology24.clockhourOfHalfday();
        org.joda.time.DateTime dateTime36 = instant19.toDateTime((org.joda.time.Chronology) gJChronology24);
        java.lang.String str37 = dateTime36.toString();
        long long38 = dateTime36.getMillis();
        long long39 = dateTime36.getMillis();
        boolean boolean40 = dateTime17.isAfter((org.joda.time.ReadableInstant) dateTime36);
        long long41 = dateTime17.getMillis();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and dateTime36", (instant1.compareTo(dateTime36) == 0) == instant1.equals(dateTime36));
    }

    @Test
    public void test1948() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1948");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = gJChronology2.halfdays();
        long long7 = gJChronology2.add((long) 'a', (-1L), (int) (short) 0);
        boolean boolean9 = gJChronology2.equals((java.lang.Object) 0);
        org.joda.time.DateTimeField dateTimeField10 = gJChronology2.dayOfMonth();
        org.joda.time.DurationField durationField11 = gJChronology2.days();
        org.joda.time.DateTimeField dateTimeField12 = gJChronology2.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField13 = gJChronology2.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField14 = gJChronology2.hourOfDay();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology2.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField16 = gJChronology2.dayOfWeek();
        org.joda.time.DurationField durationField17 = gJChronology2.eras();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField17, durationField3, and durationField11", !(durationField17.compareTo(durationField3) == 0) || (Math.signum(durationField17.compareTo(durationField11)) == Math.signum(durationField3.compareTo(durationField11))));
    }

    @Test
    public void test1949() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1949");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField3 = gJChronology2.dayOfYear();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.minuteOfHour();
        org.joda.time.DurationField durationField5 = gJChronology2.eras();
        org.joda.time.DurationField durationField6 = gJChronology2.minutes();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField5, durationField6, and durationField5", !(durationField5.compareTo(durationField6) == 0) || (Math.signum(durationField5.compareTo(durationField5)) == Math.signum(durationField6.compareTo(durationField5))));
    }

    @Test
    public void test1950() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1950");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forTimeZone(timeZone2);
        org.joda.time.chrono.GJChronology gJChronology4 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone3);
        org.joda.time.DateTimeField dateTimeField5 = gJChronology4.millisOfSecond();
        int int6 = instant1.get(dateTimeField5);
        org.joda.time.Instant instant8 = instant1.plus(0L);
        org.joda.time.Instant instant9 = instant8.toInstant();
        org.joda.time.Instant instant11 = new org.joda.time.Instant(52L);
        boolean boolean12 = instant11.isEqualNow();
        java.lang.String str13 = instant11.toString();
        java.lang.String str14 = instant11.toString();
        org.joda.time.Instant instant16 = new org.joda.time.Instant(52L);
        boolean boolean17 = instant16.isEqualNow();
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.Instant instant19 = instant16.plus(readableDuration18);
        boolean boolean20 = instant11.isBefore((org.joda.time.ReadableInstant) instant19);
        org.joda.time.Instant instant22 = instant11.minus((long) 0);
        int int23 = instant8.compareTo((org.joda.time.ReadableInstant) instant11);
        org.joda.time.Instant instant26 = instant11.withDurationAdded((long) (short) 100, 70);
        org.joda.time.ReadableInstant readableInstant27 = null;
        boolean boolean28 = instant11.isBefore(readableInstant27);
        java.lang.String str29 = instant11.toString();
        org.joda.time.MutableDateTime mutableDateTime30 = instant11.toMutableDateTimeISO();
        java.util.TimeZone timeZone31 = null;
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.forTimeZone(timeZone31);
        org.joda.time.chrono.GJChronology gJChronology33 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone32);
        org.joda.time.DateTimeField dateTimeField34 = gJChronology33.millisOfSecond();
        org.joda.time.DurationField durationField35 = gJChronology33.weeks();
        org.joda.time.DurationField durationField36 = gJChronology33.months();
        org.joda.time.DurationField durationField37 = gJChronology33.days();
        org.joda.time.DateTimeField dateTimeField38 = gJChronology33.millisOfDay();
        org.joda.time.DateTime dateTime39 = instant11.toDateTime((org.joda.time.Chronology) gJChronology33);
        boolean boolean40 = instant11.isEqualNow();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and dateTime39", (instant1.compareTo(dateTime39) == 0) == instant1.equals(dateTime39));
    }

    @Test
    public void test1951() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1951");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField3 = gJChronology2.millisOfSecond();
        org.joda.time.DurationField durationField4 = gJChronology2.millis();
        org.joda.time.DurationField durationField5 = gJChronology2.weeks();
        org.joda.time.DurationField durationField6 = gJChronology2.days();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology2.yearOfCentury();
        org.joda.time.DurationField durationField8 = gJChronology2.weekyears();
        org.joda.time.DateTimeField dateTimeField9 = gJChronology2.yearOfCentury();
        org.joda.time.DurationField durationField10 = gJChronology2.weeks();
        org.joda.time.DateTimeField dateTimeField11 = gJChronology2.minuteOfDay();
        org.joda.time.DurationField durationField12 = gJChronology2.halfdays();
        org.joda.time.DurationField durationField13 = gJChronology2.years();
        org.joda.time.DateTimeField dateTimeField14 = gJChronology2.clockhourOfDay();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on durationField8 and durationField13", (durationField8.compareTo(durationField13) == 0) == durationField8.equals(durationField13));
    }

    @Test
    public void test1952() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1952");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = gJChronology2.halfdays();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.millisOfDay();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.minuteOfDay();
        org.joda.time.DurationField durationField6 = gJChronology2.centuries();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology2.halfdayOfDay();
        java.util.Locale locale8 = java.util.Locale.ITALIAN;
        java.util.Locale locale9 = locale8.stripExtensions();
        java.util.Locale locale10 = java.util.Locale.CANADA;
        java.lang.String str11 = locale8.getDisplayVariant(locale10);
        boolean boolean12 = gJChronology2.equals((java.lang.Object) locale10);
        org.joda.time.DateTimeField dateTimeField13 = gJChronology2.monthOfYear();
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        long long17 = gJChronology2.add(readablePeriod14, (-261273587716800000L), 2);
        org.joda.time.DateTimeField dateTimeField18 = gJChronology2.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField19 = gJChronology2.hourOfDay();
        org.joda.time.DurationField durationField20 = gJChronology2.eras();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField20, durationField3, and durationField6", !(durationField20.compareTo(durationField3) == 0) || (Math.signum(durationField20.compareTo(durationField6)) == Math.signum(durationField3.compareTo(durationField6))));
    }

    @Test
    public void test1953() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1953");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(4000L);
        org.joda.time.Instant instant3 = new org.joda.time.Instant(52L);
        boolean boolean4 = instant3.isEqualNow();
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.Instant instant6 = instant3.plus(readableDuration5);
        boolean boolean8 = instant6.equals((java.lang.Object) ' ');
        org.joda.time.Instant instant10 = instant6.plus(3600000L);
        boolean boolean11 = instant1.isEqual((org.joda.time.ReadableInstant) instant10);
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.Instant instant13 = instant10.plus(readableDuration12);
        boolean boolean15 = instant10.isBefore(149L);
        org.joda.time.MutableDateTime mutableDateTime16 = instant10.toMutableDateTime();
        org.joda.time.Instant instant18 = new org.joda.time.Instant(52L);
        org.joda.time.Instant instant20 = instant18.withMillis((long) 'u');
        java.util.TimeZone timeZone21 = null;
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forTimeZone(timeZone21);
        org.joda.time.chrono.GJChronology gJChronology23 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone22);
        org.joda.time.DurationField durationField24 = gJChronology23.halfdays();
        long long28 = gJChronology23.add((long) 'a', (-1L), (int) (short) 0);
        boolean boolean30 = gJChronology23.equals((java.lang.Object) 0);
        org.joda.time.DateTimeField dateTimeField31 = gJChronology23.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField32 = gJChronology23.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField33 = gJChronology23.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField34 = gJChronology23.clockhourOfHalfday();
        org.joda.time.DateTime dateTime35 = instant18.toDateTime((org.joda.time.Chronology) gJChronology23);
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.getDefault();
        int int38 = dateTimeZone36.getOffset((long) (byte) 1);
        long long41 = dateTimeZone36.adjustOffset((-1L), false);
        org.joda.time.MutableDateTime mutableDateTime42 = dateTime35.toMutableDateTime(dateTimeZone36);
        boolean boolean43 = instant10.isEqual((org.joda.time.ReadableInstant) dateTime35);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant3 and mutableDateTime42", (instant3.compareTo(mutableDateTime42) == 0) == instant3.equals(mutableDateTime42));
    }

    @Test
    public void test1954() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1954");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forTimeZone(timeZone2);
        org.joda.time.chrono.GJChronology gJChronology4 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone3);
        org.joda.time.DateTimeField dateTimeField5 = gJChronology4.millisOfSecond();
        int int6 = instant1.get(dateTimeField5);
        boolean boolean7 = instant1.isEqualNow();
        org.joda.time.tz.NameProvider nameProvider8 = org.joda.time.DateTimeZone.getNameProvider();
        org.joda.time.DateTimeZone.setNameProvider(nameProvider8);
        org.joda.time.DateTimeZone.setNameProvider(nameProvider8);
        boolean boolean11 = instant1.equals((java.lang.Object) nameProvider8);
        org.joda.time.Instant instant13 = instant1.minus(0L);
        org.joda.time.ReadableDuration readableDuration14 = null;
        org.joda.time.Instant instant15 = instant1.minus(readableDuration14);
        org.joda.time.ReadableDuration readableDuration16 = null;
        org.joda.time.Instant instant18 = instant1.withDurationAdded(readableDuration16, 1582);
        java.util.TimeZone timeZone19 = null;
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forTimeZone(timeZone19);
        org.joda.time.chrono.GJChronology gJChronology21 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone20);
        org.joda.time.DurationField durationField22 = gJChronology21.halfdays();
        long long26 = gJChronology21.add((long) 'a', (-1L), (int) (short) 0);
        long long30 = gJChronology21.add((long) (byte) 0, (long) '4', 100);
        org.joda.time.DateTimeField dateTimeField31 = gJChronology21.minuteOfHour();
        org.joda.time.DurationField durationField32 = gJChronology21.hours();
        org.joda.time.DateTimeField dateTimeField33 = gJChronology21.monthOfYear();
        org.joda.time.DateTimeField dateTimeField34 = gJChronology21.secondOfMinute();
        org.joda.time.Chronology chronology35 = gJChronology21.withUTC();
        org.joda.time.DateTimeField dateTimeField36 = chronology35.hourOfHalfday();
        org.joda.time.DateTime dateTime37 = instant1.toDateTime(chronology35);
        org.joda.time.DurationField durationField38 = chronology35.millis();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and dateTime37", (instant1.compareTo(dateTime37) == 0) == instant1.equals(dateTime37));
    }

    @Test
    public void test1955() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1955");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField3 = gJChronology2.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.weekyearOfCentury();
        org.joda.time.Instant instant5 = gJChronology2.getGregorianCutover();
        org.joda.time.Instant instant7 = instant5.withMillis(0L);
        org.joda.time.Chronology chronology8 = instant5.getChronology();
        org.joda.time.Instant instant9 = instant5.toInstant();
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.Instant instant11 = instant5.plus(readableDuration10);
        org.joda.time.Instant instant13 = new org.joda.time.Instant(52L);
        boolean boolean14 = instant13.isEqualNow();
        boolean boolean16 = instant13.isEqual(0L);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = null;
        boolean boolean18 = instant13.isSupported(dateTimeFieldType17);
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = null;
        boolean boolean20 = instant13.isSupported(dateTimeFieldType19);
        java.util.TimeZone timeZone21 = null;
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forTimeZone(timeZone21);
        org.joda.time.chrono.GJChronology gJChronology23 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone22);
        org.joda.time.DurationField durationField24 = gJChronology23.halfdays();
        org.joda.time.Chronology chronology25 = gJChronology23.withUTC();
        java.lang.String str26 = gJChronology23.toString();
        org.joda.time.DateTimeField dateTimeField27 = gJChronology23.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(1, 10);
        org.joda.time.Chronology chronology31 = gJChronology23.withZone(dateTimeZone30);
        org.joda.time.MutableDateTime mutableDateTime32 = instant13.toMutableDateTime(dateTimeZone30);
        boolean boolean33 = instant5.equals((java.lang.Object) dateTimeZone30);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant13 and mutableDateTime32", (instant13.compareTo(mutableDateTime32) == 0) == instant13.equals(mutableDateTime32));
    }

    @Test
    public void test1956() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1956");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField3 = gJChronology2.millisOfSecond();
        org.joda.time.DurationField durationField4 = gJChronology2.millis();
        org.joda.time.DurationField durationField5 = gJChronology2.weekyears();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology2.dayOfYear();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology2.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField8 = gJChronology2.minuteOfDay();
        org.joda.time.DurationField durationField9 = gJChronology2.eras();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField9, durationField4, and durationField5", !(durationField9.compareTo(durationField4) == 0) || (Math.signum(durationField9.compareTo(durationField5)) == Math.signum(durationField4.compareTo(durationField5))));
    }

    @Test
    public void test1957() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1957");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField3 = gJChronology2.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.weekyearOfCentury();
        org.joda.time.Instant instant5 = gJChronology2.getGregorianCutover();
        org.joda.time.Instant instant7 = instant5.withMillis(0L);
        org.joda.time.Chronology chronology8 = instant5.getChronology();
        org.joda.time.Instant instant9 = instant5.toInstant();
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.Instant instant11 = instant5.plus(readableDuration10);
        org.joda.time.Instant instant14 = instant5.withDurationAdded(28800104L, 42);
        org.joda.time.DateTime dateTime15 = instant5.toDateTimeISO();
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = null;
        boolean boolean17 = instant5.isSupported(dateTimeFieldType16);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant5 and dateTime15", (instant5.compareTo(dateTime15) == 0) == instant5.equals(dateTime15));
    }

    @Test
    public void test1958() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1958");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField3 = gJChronology2.millisOfSecond();
        org.joda.time.DurationField durationField4 = gJChronology2.millis();
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        long long8 = gJChronology2.add(readablePeriod5, (long) 'a', (int) '4');
        org.joda.time.DateTimeZone dateTimeZone9 = gJChronology2.getZone();
        org.joda.time.DurationField durationField10 = gJChronology2.eras();
        org.joda.time.DateTimeField dateTimeField11 = gJChronology2.secondOfDay();
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField4 and durationField10", Math.signum(durationField4.compareTo(durationField10)) == -Math.signum(durationField10.compareTo(durationField4)));
    }

    @Test
    public void test1959() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1959");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(4, 52);
        java.lang.String str3 = dateTimeZone2.getID();
        org.joda.time.Instant instant5 = new org.joda.time.Instant((-220870497598236L));
        org.joda.time.Chronology chronology6 = instant5.getChronology();
        org.joda.time.Instant instant8 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone9 = null;
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forTimeZone(timeZone9);
        org.joda.time.chrono.GJChronology gJChronology11 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone10);
        org.joda.time.DateTimeField dateTimeField12 = gJChronology11.millisOfSecond();
        int int13 = instant8.get(dateTimeField12);
        org.joda.time.Instant instant15 = instant8.plus(0L);
        org.joda.time.Instant instant16 = instant15.toInstant();
        org.joda.time.Instant instant18 = new org.joda.time.Instant(52L);
        boolean boolean19 = instant18.isEqualNow();
        java.lang.String str20 = instant18.toString();
        java.lang.String str21 = instant18.toString();
        org.joda.time.Instant instant23 = new org.joda.time.Instant(52L);
        boolean boolean24 = instant23.isEqualNow();
        org.joda.time.ReadableDuration readableDuration25 = null;
        org.joda.time.Instant instant26 = instant23.plus(readableDuration25);
        boolean boolean27 = instant18.isBefore((org.joda.time.ReadableInstant) instant26);
        org.joda.time.Instant instant29 = instant18.minus((long) 0);
        int int30 = instant15.compareTo((org.joda.time.ReadableInstant) instant18);
        org.joda.time.Instant instant33 = instant18.withDurationAdded((long) (short) 100, 70);
        org.joda.time.ReadableDuration readableDuration34 = null;
        org.joda.time.Instant instant35 = instant18.minus(readableDuration34);
        org.joda.time.Instant instant37 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone38 = null;
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.forTimeZone(timeZone38);
        org.joda.time.chrono.GJChronology gJChronology40 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone39);
        org.joda.time.DateTimeField dateTimeField41 = gJChronology40.millisOfSecond();
        int int42 = instant37.get(dateTimeField41);
        boolean boolean43 = instant37.isEqualNow();
        org.joda.time.tz.NameProvider nameProvider44 = org.joda.time.DateTimeZone.getNameProvider();
        org.joda.time.DateTimeZone.setNameProvider(nameProvider44);
        org.joda.time.DateTimeZone.setNameProvider(nameProvider44);
        boolean boolean47 = instant37.equals((java.lang.Object) nameProvider44);
        org.joda.time.Instant instant49 = instant37.minus(0L);
        int int50 = instant35.compareTo((org.joda.time.ReadableInstant) instant37);
        int int51 = instant5.compareTo((org.joda.time.ReadableInstant) instant35);
        org.joda.time.Instant instant54 = instant35.withDurationAdded(187200000L, (-876576));
        java.util.TimeZone timeZone55 = null;
        org.joda.time.DateTimeZone dateTimeZone56 = org.joda.time.DateTimeZone.forTimeZone(timeZone55);
        org.joda.time.chrono.GJChronology gJChronology57 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone56);
        org.joda.time.DateTimeField dateTimeField58 = gJChronology57.millisOfSecond();
        org.joda.time.DurationField durationField59 = gJChronology57.millis();
        org.joda.time.ReadablePeriod readablePeriod60 = null;
        long long63 = gJChronology57.add(readablePeriod60, (long) 'a', (int) '4');
        org.joda.time.DateTimeField dateTimeField64 = gJChronology57.clockhourOfDay();
        org.joda.time.DurationField durationField65 = gJChronology57.halfdays();
        org.joda.time.DateTimeField dateTimeField66 = gJChronology57.halfdayOfDay();
        int int67 = instant35.get(dateTimeField66);
        org.joda.time.Instant instant70 = instant35.withDurationAdded((-12219292800000L), 2059);
        org.joda.time.chrono.GJChronology gJChronology71 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone2, (org.joda.time.ReadableInstant) instant70);
        org.joda.time.Instant instant73 = new org.joda.time.Instant((-315566928000000L));
        org.joda.time.MutableDateTime mutableDateTime74 = instant73.toMutableDateTimeISO();
        boolean boolean75 = instant70.isAfter((org.joda.time.ReadableInstant) instant73);
        org.joda.time.DateTimeZone dateTimeZone76 = instant73.getZone();
        long long78 = dateTimeZone76.convertUTCToLocal((long) (byte) 100);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant73 and mutableDateTime74", (instant73.compareTo(mutableDateTime74) == 0) == instant73.equals(mutableDateTime74));
    }

    @Test
    public void test1960() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1960");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = gJChronology2.halfdays();
        long long7 = gJChronology2.add((long) 'a', (-1L), (int) (short) 0);
        org.joda.time.DateTimeField dateTimeField8 = gJChronology2.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField9 = gJChronology2.centuryOfEra();
        long long13 = gJChronology2.add(262974600000L, (long) (byte) 100, (int) '4');
        org.joda.time.DurationField durationField14 = gJChronology2.hours();
        java.util.TimeZone timeZone15 = null;
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forTimeZone(timeZone15);
        org.joda.time.Chronology chronology17 = gJChronology2.withZone(dateTimeZone16);
        org.joda.time.DurationField durationField18 = gJChronology2.centuries();
        org.joda.time.DateTimeField dateTimeField19 = gJChronology2.secondOfMinute();
        org.joda.time.DurationField durationField20 = gJChronology2.weekyears();
        org.joda.time.Instant instant22 = new org.joda.time.Instant(52L);
        boolean boolean23 = instant22.isEqualNow();
        org.joda.time.ReadableDuration readableDuration24 = null;
        org.joda.time.Instant instant25 = instant22.plus(readableDuration24);
        long long26 = instant22.getMillis();
        java.lang.String str27 = instant22.toString();
        org.joda.time.Instant instant28 = instant22.toInstant();
        org.joda.time.DateTime dateTime29 = instant22.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone30 = dateTime29.getZone();
        org.joda.time.Chronology chronology31 = gJChronology2.withZone(dateTimeZone30);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant22 and dateTime29", (instant22.compareTo(dateTime29) == 0) == instant22.equals(dateTime29));
    }

    @Test
    public void test1961() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1961");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forTimeZone(timeZone2);
        org.joda.time.chrono.GJChronology gJChronology4 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone3);
        org.joda.time.DateTimeField dateTimeField5 = gJChronology4.millisOfSecond();
        int int6 = instant1.get(dateTimeField5);
        org.joda.time.Instant instant8 = instant1.plus(0L);
        org.joda.time.MutableDateTime mutableDateTime9 = instant8.toMutableDateTimeISO();
        long long10 = instant8.getMillis();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant8 and mutableDateTime9", (instant8.compareTo(mutableDateTime9) == 0) == instant8.equals(mutableDateTime9));
    }

    @Test
    public void test1962() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1962");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        boolean boolean2 = instant1.isEqualNow();
        org.joda.time.ReadableDuration readableDuration3 = null;
        org.joda.time.Instant instant4 = instant1.plus(readableDuration3);
        long long5 = instant1.getMillis();
        org.joda.time.Instant instant8 = instant1.withDurationAdded((long) 'a', (int) (byte) 10);
        java.util.TimeZone timeZone9 = null;
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forTimeZone(timeZone9);
        org.joda.time.chrono.GJChronology gJChronology11 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone10);
        org.joda.time.DateTimeField dateTimeField12 = gJChronology11.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField13 = gJChronology11.weekyearOfCentury();
        org.joda.time.Instant instant14 = gJChronology11.getGregorianCutover();
        org.joda.time.Instant instant16 = instant14.withMillis(0L);
        org.joda.time.Instant instant18 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone19 = null;
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forTimeZone(timeZone19);
        org.joda.time.chrono.GJChronology gJChronology21 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone20);
        org.joda.time.DateTimeField dateTimeField22 = gJChronology21.millisOfSecond();
        int int23 = instant18.get(dateTimeField22);
        org.joda.time.Instant instant25 = instant18.plus(0L);
        int int26 = instant16.compareTo((org.joda.time.ReadableInstant) instant25);
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = null;
        boolean boolean28 = instant25.isSupported(dateTimeFieldType27);
        org.joda.time.Instant instant30 = new org.joda.time.Instant(52L);
        boolean boolean31 = instant30.isEqualNow();
        org.joda.time.ReadableDuration readableDuration32 = null;
        org.joda.time.Instant instant33 = instant30.plus(readableDuration32);
        int int34 = instant25.compareTo((org.joda.time.ReadableInstant) instant30);
        org.joda.time.Instant instant36 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone37 = null;
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forTimeZone(timeZone37);
        org.joda.time.chrono.GJChronology gJChronology39 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone38);
        org.joda.time.DateTimeField dateTimeField40 = gJChronology39.millisOfSecond();
        int int41 = instant36.get(dateTimeField40);
        boolean boolean42 = instant36.isEqualNow();
        org.joda.time.ReadableDuration readableDuration43 = null;
        org.joda.time.Instant instant45 = instant36.withDurationAdded(readableDuration43, (int) (short) 0);
        org.joda.time.ReadableDuration readableDuration46 = null;
        org.joda.time.Instant instant47 = instant36.plus(readableDuration46);
        boolean boolean48 = instant25.isEqual((org.joda.time.ReadableInstant) instant47);
        boolean boolean49 = instant8.isBefore((org.joda.time.ReadableInstant) instant47);
        org.joda.time.Instant instant50 = instant8.toInstant();
        org.joda.time.Instant instant52 = new org.joda.time.Instant(25925166840100L);
        org.joda.time.Chronology chronology53 = instant52.getChronology();
        org.joda.time.DateTimeFieldType dateTimeFieldType54 = null;
        boolean boolean55 = instant52.isSupported(dateTimeFieldType54);
        boolean boolean56 = instant8.isEqual((org.joda.time.ReadableInstant) instant52);
        java.util.TimeZone timeZone57 = null;
        org.joda.time.DateTimeZone dateTimeZone58 = org.joda.time.DateTimeZone.forTimeZone(timeZone57);
        java.lang.String str60 = dateTimeZone58.getNameKey((long) 100);
        long long63 = dateTimeZone58.convertLocalToUTC((-2246399965L), true);
        long long66 = dateTimeZone58.adjustOffset((long) '#', true);
        org.joda.time.ReadableInstant readableInstant67 = null;
        org.joda.time.chrono.GJChronology gJChronology68 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone58, readableInstant67);
        long long72 = dateTimeZone58.convertLocalToUTC((-1431201L), false, 0L);
        org.joda.time.MutableDateTime mutableDateTime73 = instant8.toMutableDateTime(dateTimeZone58);
        org.joda.time.Instant instant75 = new org.joda.time.Instant(52L);
        boolean boolean76 = instant75.isEqualNow();
        boolean boolean78 = instant75.isEqual(0L);
        org.joda.time.DateTimeFieldType dateTimeFieldType79 = null;
        boolean boolean80 = instant75.isSupported(dateTimeFieldType79);
        org.joda.time.Instant instant83 = instant75.withDurationAdded((-61827926399999L), (int) (short) -1);
        boolean boolean84 = instant8.isEqual((org.joda.time.ReadableInstant) instant75);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant8 and mutableDateTime73", (instant8.compareTo(mutableDateTime73) == 0) == instant8.equals(mutableDateTime73));
    }

    @Test
    public void test1963() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1963");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = gJChronology2.halfdays();
        long long7 = gJChronology2.add((long) 'a', (-1L), (int) (short) 0);
        boolean boolean9 = gJChronology2.equals((java.lang.Object) 0);
        org.joda.time.DateTimeField dateTimeField10 = gJChronology2.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField11 = gJChronology2.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField12 = gJChronology2.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField13 = gJChronology2.clockhourOfHalfday();
        org.joda.time.DurationField durationField14 = gJChronology2.weekyears();
        org.joda.time.DurationField durationField15 = gJChronology2.weekyears();
        org.joda.time.DateTimeField dateTimeField16 = gJChronology2.minuteOfDay();
        org.joda.time.DurationField durationField17 = gJChronology2.weekyears();
        org.joda.time.DurationField durationField18 = gJChronology2.seconds();
        org.joda.time.DurationField durationField19 = gJChronology2.millis();
        java.util.TimeZone timeZone20 = null;
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forTimeZone(timeZone20);
        org.joda.time.chrono.GJChronology gJChronology22 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone21);
        long long26 = dateTimeZone21.convertLocalToUTC((long) (byte) -1, true, 0L);
        boolean boolean28 = dateTimeZone21.equals((java.lang.Object) true);
        org.joda.time.chrono.GJChronology gJChronology29 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone21);
        org.joda.time.DateTimeField dateTimeField30 = gJChronology29.weekyear();
        org.joda.time.DateTimeField dateTimeField31 = gJChronology29.era();
        org.joda.time.DateTimeField dateTimeField32 = gJChronology29.centuryOfEra();
        org.joda.time.Chronology chronology33 = gJChronology29.withUTC();
        org.joda.time.DurationField durationField34 = gJChronology29.eras();
        org.joda.time.DateTimeField dateTimeField35 = gJChronology29.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField36 = gJChronology29.hourOfHalfday();
        boolean boolean37 = gJChronology2.equals((java.lang.Object) dateTimeField36);
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField3 and durationField34", Math.signum(durationField3.compareTo(durationField34)) == -Math.signum(durationField34.compareTo(durationField3)));
    }

    @Test
    public void test1964() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1964");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = gJChronology2.halfdays();
        long long7 = gJChronology2.add((long) 'a', (-1L), (int) (short) 0);
        boolean boolean9 = gJChronology2.equals((java.lang.Object) 0);
        org.joda.time.DateTimeField dateTimeField10 = gJChronology2.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField11 = gJChronology2.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField12 = gJChronology2.year();
        org.joda.time.DurationField durationField13 = gJChronology2.years();
        org.joda.time.DurationField durationField14 = gJChronology2.eras();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField14, durationField3, and durationField13", !(durationField14.compareTo(durationField3) == 0) || (Math.signum(durationField14.compareTo(durationField13)) == Math.signum(durationField3.compareTo(durationField13))));
    }

    @Test
    public void test1965() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1965");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField3 = gJChronology2.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.weekyearOfCentury();
        org.joda.time.Instant instant5 = gJChronology2.getGregorianCutover();
        org.joda.time.Instant instant7 = instant5.withMillis(0L);
        org.joda.time.Instant instant9 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone10 = null;
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forTimeZone(timeZone10);
        org.joda.time.chrono.GJChronology gJChronology12 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone11);
        org.joda.time.DateTimeField dateTimeField13 = gJChronology12.millisOfSecond();
        int int14 = instant9.get(dateTimeField13);
        org.joda.time.Instant instant16 = instant9.plus(0L);
        int int17 = instant7.compareTo((org.joda.time.ReadableInstant) instant16);
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = null;
        boolean boolean19 = instant16.isSupported(dateTimeFieldType18);
        org.joda.time.Instant instant21 = new org.joda.time.Instant(52L);
        boolean boolean22 = instant21.isEqualNow();
        org.joda.time.ReadableDuration readableDuration23 = null;
        org.joda.time.Instant instant24 = instant21.plus(readableDuration23);
        int int25 = instant16.compareTo((org.joda.time.ReadableInstant) instant21);
        org.joda.time.Instant instant27 = new org.joda.time.Instant(52L);
        boolean boolean28 = instant27.isEqualNow();
        int int29 = instant16.compareTo((org.joda.time.ReadableInstant) instant27);
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.getDefault();
        boolean boolean32 = dateTimeZone30.isStandardOffset(115200000L);
        org.joda.time.chrono.GJChronology gJChronology35 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone30, (long) 10, 4);
        org.joda.time.MutableDateTime mutableDateTime36 = instant16.toMutableDateTime(dateTimeZone30);
        java.util.TimeZone timeZone37 = null;
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forTimeZone(timeZone37);
        org.joda.time.chrono.GJChronology gJChronology39 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone38);
        org.joda.time.DurationField durationField40 = gJChronology39.halfdays();
        org.joda.time.DateTimeField dateTimeField41 = gJChronology39.millisOfDay();
        org.joda.time.DateTimeField dateTimeField42 = gJChronology39.minuteOfDay();
        org.joda.time.DurationField durationField43 = gJChronology39.centuries();
        org.joda.time.DateTimeField dateTimeField44 = gJChronology39.dayOfYear();
        java.lang.String str45 = gJChronology39.toString();
        org.joda.time.DateTimeField dateTimeField46 = gJChronology39.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone47 = gJChronology39.getZone();
        java.util.TimeZone timeZone48 = null;
        org.joda.time.DateTimeZone dateTimeZone49 = org.joda.time.DateTimeZone.forTimeZone(timeZone48);
        org.joda.time.chrono.GJChronology gJChronology50 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone49);
        java.util.Locale locale52 = new java.util.Locale("hi!");
        java.lang.String str53 = locale52.getCountry();
        java.util.Locale locale54 = java.util.Locale.getDefault();
        java.lang.String str55 = locale54.getDisplayName();
        java.lang.String str56 = locale52.getDisplayScript(locale54);
        boolean boolean57 = dateTimeZone49.equals((java.lang.Object) locale54);
        org.joda.time.Chronology chronology58 = gJChronology39.withZone(dateTimeZone49);
        org.joda.time.DateTimeField dateTimeField59 = gJChronology39.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone61 = org.joda.time.DateTimeZone.forOffsetMillis((int) '4');
        java.util.TimeZone timeZone62 = dateTimeZone61.toTimeZone();
        long long65 = dateTimeZone61.adjustOffset((long) 0, false);
        int int67 = dateTimeZone61.getOffsetFromLocal((-26438399999L));
        java.util.TimeZone timeZone68 = dateTimeZone61.toTimeZone();
        java.lang.String str70 = dateTimeZone61.getShortName((-53L));
        java.util.Locale locale72 = null;
        java.lang.String str73 = dateTimeZone61.getName((long) 1970, locale72);
        long long76 = dateTimeZone61.adjustOffset((-61352915L), false);
        boolean boolean78 = dateTimeZone61.isStandardOffset(4492800035L);
        org.joda.time.Chronology chronology79 = gJChronology39.withZone(dateTimeZone61);
        org.joda.time.DateTime dateTime80 = instant16.toDateTime(dateTimeZone61);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant16 and mutableDateTime36", (instant16.compareTo(mutableDateTime36) == 0) == instant16.equals(mutableDateTime36));
    }

    @Test
    public void test1966() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1966");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField3 = gJChronology2.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.weekyear();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.halfdayOfDay();
        org.joda.time.DurationField durationField6 = gJChronology2.years();
        org.joda.time.DurationField durationField7 = gJChronology2.minutes();
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        long long11 = gJChronology2.add(readablePeriod8, (-42L), (int) '4');
        org.joda.time.Chronology chronology12 = gJChronology2.withUTC();
        org.joda.time.DateTimeField dateTimeField13 = gJChronology2.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField14 = gJChronology2.monthOfYear();
        org.joda.time.DurationField durationField15 = gJChronology2.eras();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField15, durationField6, and durationField7", !(durationField15.compareTo(durationField6) == 0) || (Math.signum(durationField15.compareTo(durationField7)) == Math.signum(durationField6.compareTo(durationField7))));
    }

    @Test
    public void test1967() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1967");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        boolean boolean2 = instant1.isEqualNow();
        boolean boolean4 = instant1.isEqual(0L);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = null;
        boolean boolean6 = instant1.isSupported(dateTimeFieldType5);
        org.joda.time.Instant instant9 = instant1.withDurationAdded((-61827926399999L), (int) (short) -1);
        org.joda.time.MutableDateTime mutableDateTime10 = instant9.toMutableDateTime();
        boolean boolean11 = instant9.isAfterNow();
        java.util.TimeZone timeZone12 = null;
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forTimeZone(timeZone12);
        org.joda.time.chrono.GJChronology gJChronology14 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone13);
        org.joda.time.DurationField durationField15 = gJChronology14.halfdays();
        long long19 = gJChronology14.add((long) 'a', (-1L), (int) (short) 0);
        long long23 = gJChronology14.add((long) (byte) 0, (long) '4', 100);
        org.joda.time.DateTimeField dateTimeField24 = gJChronology14.minuteOfHour();
        org.joda.time.DurationField durationField25 = gJChronology14.hours();
        org.joda.time.DateTimeField dateTimeField26 = gJChronology14.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField27 = gJChronology14.millisOfSecond();
        org.joda.time.DurationField durationField28 = gJChronology14.seconds();
        java.lang.String str29 = gJChronology14.toString();
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        long long33 = gJChronology14.add(readablePeriod30, 349200000L, 0);
        org.joda.time.DurationField durationField34 = gJChronology14.millis();
        boolean boolean35 = instant9.equals((java.lang.Object) gJChronology14);
        java.util.TimeZone timeZone36 = null;
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.forTimeZone(timeZone36);
        org.joda.time.chrono.GJChronology gJChronology38 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone37);
        org.joda.time.DurationField durationField39 = gJChronology38.halfdays();
        long long43 = gJChronology38.add((long) 'a', (-1L), (int) (short) 0);
        boolean boolean45 = gJChronology38.equals((java.lang.Object) 0);
        org.joda.time.DateTimeField dateTimeField46 = gJChronology38.dayOfMonth();
        org.joda.time.DurationField durationField47 = gJChronology38.days();
        org.joda.time.DateTimeField dateTimeField48 = gJChronology38.millisOfSecond();
        org.joda.time.DurationField durationField49 = gJChronology38.millis();
        org.joda.time.ReadablePeriod readablePeriod50 = null;
        long long53 = gJChronology38.add(readablePeriod50, (-220870497598236L), (int) (byte) 100);
        org.joda.time.DateTimeField dateTimeField54 = gJChronology38.hourOfHalfday();
        org.joda.time.DateTime dateTime55 = instant9.toDateTime((org.joda.time.Chronology) gJChronology38);
        org.joda.time.DateTimeField dateTimeField56 = gJChronology38.secondOfMinute();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant9 and mutableDateTime10", (instant9.compareTo(mutableDateTime10) == 0) == instant9.equals(mutableDateTime10));
    }

    @Test
    public void test1968() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1968");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.util.TimeZone timeZone2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forTimeZone(timeZone2);
        org.joda.time.chrono.GJChronology gJChronology4 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone3);
        int int6 = dateTimeZone3.getOffsetFromLocal(1000L);
        long long8 = dateTimeZone1.getMillisKeepLocal(dateTimeZone3, (-61827926399999L));
        int int10 = dateTimeZone3.getOffset(5935258842600053L);
        java.util.TimeZone timeZone11 = null;
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forTimeZone(timeZone11);
        org.joda.time.chrono.GJChronology gJChronology13 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone12);
        org.joda.time.DateTimeField dateTimeField14 = gJChronology13.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology13.weekyearOfCentury();
        org.joda.time.Instant instant16 = gJChronology13.getGregorianCutover();
        org.joda.time.Instant instant18 = instant16.withMillis(0L);
        org.joda.time.Instant instant20 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone21 = null;
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forTimeZone(timeZone21);
        org.joda.time.chrono.GJChronology gJChronology23 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone22);
        org.joda.time.DateTimeField dateTimeField24 = gJChronology23.millisOfSecond();
        int int25 = instant20.get(dateTimeField24);
        org.joda.time.Instant instant27 = instant20.plus(0L);
        int int28 = instant18.compareTo((org.joda.time.ReadableInstant) instant27);
        java.util.TimeZone timeZone29 = null;
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forTimeZone(timeZone29);
        org.joda.time.chrono.GJChronology gJChronology31 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone30);
        org.joda.time.DurationField durationField32 = gJChronology31.halfdays();
        org.joda.time.DateTimeField dateTimeField33 = gJChronology31.millisOfDay();
        org.joda.time.DateTimeField dateTimeField34 = gJChronology31.minuteOfDay();
        org.joda.time.DurationField durationField35 = gJChronology31.centuries();
        org.joda.time.DateTimeField dateTimeField36 = gJChronology31.halfdayOfDay();
        java.util.Locale locale37 = java.util.Locale.ITALIAN;
        java.util.Locale locale38 = locale37.stripExtensions();
        java.util.Locale locale39 = java.util.Locale.CANADA;
        java.lang.String str40 = locale37.getDisplayVariant(locale39);
        boolean boolean41 = gJChronology31.equals((java.lang.Object) locale39);
        org.joda.time.DateTime dateTime42 = instant18.toDateTime((org.joda.time.Chronology) gJChronology31);
        org.joda.time.chrono.GJChronology gJChronology43 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone3, (org.joda.time.ReadableInstant) dateTime42);
        long long45 = dateTimeZone3.previousTransition((-2880598845L));
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant18 and dateTime42", (instant18.compareTo(dateTime42) == 0) == instant18.equals(dateTime42));
    }

    @Test
    public void test1969() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1969");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField3 = gJChronology2.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.weekyearOfCentury();
        org.joda.time.Instant instant5 = gJChronology2.getGregorianCutover();
        org.joda.time.Instant instant7 = instant5.withMillis(0L);
        org.joda.time.Instant instant9 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone10 = null;
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forTimeZone(timeZone10);
        org.joda.time.chrono.GJChronology gJChronology12 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone11);
        org.joda.time.DateTimeField dateTimeField13 = gJChronology12.millisOfSecond();
        int int14 = instant9.get(dateTimeField13);
        org.joda.time.Instant instant16 = instant9.plus(0L);
        int int17 = instant7.compareTo((org.joda.time.ReadableInstant) instant16);
        org.joda.time.Instant instant19 = new org.joda.time.Instant(52L);
        boolean boolean20 = instant19.isEqualNow();
        org.joda.time.ReadableDuration readableDuration21 = null;
        org.joda.time.Instant instant22 = instant19.plus(readableDuration21);
        boolean boolean24 = instant22.equals((java.lang.Object) ' ');
        boolean boolean25 = instant16.isEqual((org.joda.time.ReadableInstant) instant22);
        java.lang.String str26 = instant16.toString();
        org.joda.time.ReadableDuration readableDuration27 = null;
        org.joda.time.Instant instant29 = instant16.withDurationAdded(readableDuration27, 1431201);
        java.lang.Object obj30 = null;
        boolean boolean31 = instant16.equals(obj30);
        java.util.Date date32 = instant16.toDate();
        java.util.Date date33 = instant16.toDate();
        long long34 = instant16.getMillis();
        org.joda.time.Instant instant36 = instant16.withMillis((-2980259049600000L));
        org.joda.time.Instant instant38 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone39 = null;
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.forTimeZone(timeZone39);
        org.joda.time.chrono.GJChronology gJChronology41 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone40);
        org.joda.time.DateTimeField dateTimeField42 = gJChronology41.millisOfSecond();
        int int43 = instant38.get(dateTimeField42);
        org.joda.time.Instant instant45 = instant38.plus(0L);
        java.util.TimeZone timeZone46 = null;
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.forTimeZone(timeZone46);
        org.joda.time.chrono.GJChronology gJChronology48 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone47);
        org.joda.time.DurationField durationField49 = gJChronology48.halfdays();
        org.joda.time.Chronology chronology50 = gJChronology48.withUTC();
        java.lang.String str51 = gJChronology48.toString();
        org.joda.time.DateTimeField dateTimeField52 = gJChronology48.hourOfHalfday();
        int int53 = instant38.get(dateTimeField52);
        java.util.TimeZone timeZone54 = null;
        org.joda.time.DateTimeZone dateTimeZone55 = org.joda.time.DateTimeZone.forTimeZone(timeZone54);
        org.joda.time.chrono.GJChronology gJChronology56 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone55);
        org.joda.time.DurationField durationField57 = gJChronology56.halfdays();
        long long61 = gJChronology56.add((long) 'a', (-1L), (int) (short) 0);
        org.joda.time.DateTimeField dateTimeField62 = gJChronology56.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField63 = gJChronology56.secondOfMinute();
        org.joda.time.Instant instant65 = new org.joda.time.Instant(52L);
        boolean boolean66 = instant65.isEqualNow();
        org.joda.time.ReadableDuration readableDuration67 = null;
        org.joda.time.Instant instant68 = instant65.plus(readableDuration67);
        boolean boolean69 = gJChronology56.equals((java.lang.Object) instant65);
        org.joda.time.DateTimeFieldType dateTimeFieldType70 = null;
        boolean boolean71 = instant65.isSupported(dateTimeFieldType70);
        org.joda.time.DateTimeFieldType dateTimeFieldType72 = null;
        boolean boolean73 = instant65.isSupported(dateTimeFieldType72);
        org.joda.time.DateTimeZone dateTimeZone74 = instant65.getZone();
        boolean boolean75 = instant38.isAfter((org.joda.time.ReadableInstant) instant65);
        org.joda.time.Instant instant77 = instant38.minus((long) 70);
        org.joda.time.Instant instant79 = instant38.withMillis((-64983772799999L));
        boolean boolean80 = instant16.isBefore((org.joda.time.ReadableInstant) instant38);
        java.lang.String str81 = instant16.toString();
        org.joda.time.DateTime dateTime82 = instant16.toDateTimeISO();
        org.joda.time.Instant instant83 = instant16.toInstant();
        long long84 = instant16.getMillis();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant16 and dateTime82", (instant16.compareTo(dateTime82) == 0) == instant16.equals(dateTime82));
    }

    @Test
    public void test1970() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1970");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        java.util.Locale locale4 = new java.util.Locale("hi!");
        java.lang.String str5 = locale4.getCountry();
        java.util.Locale locale6 = java.util.Locale.getDefault();
        java.lang.String str7 = locale6.getDisplayName();
        java.lang.String str8 = locale4.getDisplayScript(locale6);
        boolean boolean9 = dateTimeZone1.equals((java.lang.Object) locale6);
        int int11 = dateTimeZone1.getOffsetFromLocal((long) (short) 10);
        java.util.TimeZone timeZone12 = null;
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forTimeZone(timeZone12);
        org.joda.time.chrono.GJChronology gJChronology14 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone13);
        org.joda.time.DateTimeField dateTimeField15 = gJChronology14.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField16 = gJChronology14.weekyearOfCentury();
        org.joda.time.Instant instant17 = gJChronology14.getGregorianCutover();
        org.joda.time.Instant instant19 = instant17.withMillis(0L);
        org.joda.time.Instant instant21 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone22 = null;
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        org.joda.time.chrono.GJChronology gJChronology24 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone23);
        org.joda.time.DateTimeField dateTimeField25 = gJChronology24.millisOfSecond();
        int int26 = instant21.get(dateTimeField25);
        org.joda.time.Instant instant28 = instant21.plus(0L);
        int int29 = instant19.compareTo((org.joda.time.ReadableInstant) instant28);
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = null;
        boolean boolean31 = instant28.isSupported(dateTimeFieldType30);
        int int32 = dateTimeZone1.getOffset((org.joda.time.ReadableInstant) instant28);
        org.joda.time.DateTime dateTime33 = instant28.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone34 = dateTime33.getZone();
        java.util.TimeZone timeZone35 = null;
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.forTimeZone(timeZone35);
        org.joda.time.chrono.GJChronology gJChronology37 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone36);
        org.joda.time.DateTimeField dateTimeField38 = gJChronology37.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField39 = gJChronology37.weekyearOfCentury();
        org.joda.time.Instant instant40 = gJChronology37.getGregorianCutover();
        org.joda.time.Instant instant42 = instant40.withMillis(0L);
        org.joda.time.Instant instant44 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone45 = null;
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.forTimeZone(timeZone45);
        org.joda.time.chrono.GJChronology gJChronology47 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone46);
        org.joda.time.DateTimeField dateTimeField48 = gJChronology47.millisOfSecond();
        int int49 = instant44.get(dateTimeField48);
        org.joda.time.Instant instant51 = instant44.plus(0L);
        int int52 = instant42.compareTo((org.joda.time.ReadableInstant) instant51);
        org.joda.time.Instant instant54 = new org.joda.time.Instant(52L);
        boolean boolean55 = instant54.isEqualNow();
        org.joda.time.ReadableDuration readableDuration56 = null;
        org.joda.time.Instant instant57 = instant54.plus(readableDuration56);
        boolean boolean59 = instant57.equals((java.lang.Object) ' ');
        boolean boolean60 = instant51.isEqual((org.joda.time.ReadableInstant) instant57);
        java.lang.String str61 = instant51.toString();
        org.joda.time.ReadableDuration readableDuration62 = null;
        org.joda.time.Instant instant64 = instant51.withDurationAdded(readableDuration62, 1431201);
        java.lang.Object obj65 = null;
        boolean boolean66 = instant51.equals(obj65);
        java.util.Date date67 = instant51.toDate();
        java.util.Date date68 = instant51.toDate();
        long long69 = instant51.getMillis();
        org.joda.time.Instant instant71 = instant51.withMillis((-2980259049600000L));
        java.util.TimeZone timeZone72 = null;
        org.joda.time.DateTimeZone dateTimeZone73 = org.joda.time.DateTimeZone.forTimeZone(timeZone72);
        int int75 = dateTimeZone73.getOffsetFromLocal((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone78 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(0, (int) (short) 10);
        long long80 = dateTimeZone73.getMillisKeepLocal(dateTimeZone78, (-61827926399999L));
        java.util.TimeZone timeZone81 = dateTimeZone78.toTimeZone();
        boolean boolean82 = instant51.equals((java.lang.Object) timeZone81);
        boolean boolean83 = dateTime33.isEqual((org.joda.time.ReadableInstant) instant51);
        org.joda.time.Instant instant85 = instant51.plus((-102626203721648970L));
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant21 and dateTime33", (instant21.compareTo(dateTime33) == 0) == instant21.equals(dateTime33));
    }

    @Test
    public void test1971() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1971");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = gJChronology2.halfdays();
        org.joda.time.Chronology chronology4 = gJChronology2.withUTC();
        java.lang.String str5 = gJChronology2.toString();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology2.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(1, 10);
        org.joda.time.Chronology chronology10 = gJChronology2.withZone(dateTimeZone9);
        long long12 = dateTimeZone9.convertUTCToLocal((-43829L));
        boolean boolean13 = dateTimeZone9.isFixed();
        long long15 = dateTimeZone9.previousTransition((long) 1869);
        org.joda.time.LocalDateTime localDateTime16 = null;
        boolean boolean17 = dateTimeZone9.isLocalDateTimeGap(localDateTime16);
        boolean boolean19 = dateTimeZone9.isStandardOffset(0L);
        org.joda.time.LocalDateTime localDateTime20 = null;
        boolean boolean21 = dateTimeZone9.isLocalDateTimeGap(localDateTime20);
        java.util.TimeZone timeZone22 = null;
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        org.joda.time.chrono.GJChronology gJChronology24 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone23);
        long long28 = dateTimeZone23.convertLocalToUTC((long) (byte) -1, true, 0L);
        java.lang.String str30 = dateTimeZone23.getNameKey((long) (short) 0);
        boolean boolean32 = dateTimeZone23.isStandardOffset((long) 0);
        org.joda.time.Instant instant33 = org.joda.time.Instant.now();
        java.util.TimeZone timeZone34 = null;
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.forTimeZone(timeZone34);
        org.joda.time.chrono.GJChronology gJChronology36 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone35);
        org.joda.time.DurationField durationField37 = gJChronology36.halfdays();
        org.joda.time.DateTimeField dateTimeField38 = gJChronology36.millisOfDay();
        org.joda.time.DateTimeField dateTimeField39 = gJChronology36.halfdayOfDay();
        int int40 = instant33.get(dateTimeField39);
        java.util.TimeZone timeZone41 = null;
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.forTimeZone(timeZone41);
        org.joda.time.chrono.GJChronology gJChronology43 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone42);
        long long47 = dateTimeZone42.convertLocalToUTC((long) (byte) -1, true, 0L);
        boolean boolean49 = dateTimeZone42.equals((java.lang.Object) true);
        org.joda.time.chrono.GJChronology gJChronology50 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone42);
        org.joda.time.DateTimeField dateTimeField51 = gJChronology50.weekyear();
        org.joda.time.DateTimeField dateTimeField52 = gJChronology50.clockhourOfHalfday();
        org.joda.time.MutableDateTime mutableDateTime53 = instant33.toMutableDateTime((org.joda.time.Chronology) gJChronology50);
        int int54 = dateTimeZone23.getOffset((org.joda.time.ReadableInstant) mutableDateTime53);
        org.joda.time.chrono.GJChronology gJChronology55 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone9, (org.joda.time.ReadableInstant) mutableDateTime53);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone9);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant33 and mutableDateTime53", (instant33.compareTo(mutableDateTime53) == 0) == instant33.equals(mutableDateTime53));
    }

    @Test
    public void test1972() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1972");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = gJChronology2.halfdays();
        long long7 = gJChronology2.add((long) 'a', (-1L), (int) (short) 0);
        long long11 = gJChronology2.add((long) (byte) 0, (long) '4', 100);
        org.joda.time.DateTimeField dateTimeField12 = gJChronology2.minuteOfHour();
        org.joda.time.DurationField durationField13 = gJChronology2.hours();
        org.joda.time.DateTimeField dateTimeField14 = gJChronology2.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology2.millisOfSecond();
        org.joda.time.DurationField durationField16 = gJChronology2.seconds();
        java.lang.String str17 = gJChronology2.toString();
        org.joda.time.DateTimeField dateTimeField18 = gJChronology2.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField19 = gJChronology2.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField20 = gJChronology2.secondOfMinute();
        org.joda.time.DurationField durationField21 = gJChronology2.hours();
        org.joda.time.DateTimeField dateTimeField22 = gJChronology2.weekyear();
        org.joda.time.DateTimeField dateTimeField23 = gJChronology2.monthOfYear();
        org.joda.time.DateTimeField dateTimeField24 = gJChronology2.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField25 = gJChronology2.dayOfYear();
        java.lang.String str26 = gJChronology2.toString();
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(0, (int) (short) 10);
        java.lang.String str31 = dateTimeZone29.getNameKey(5983L);
        long long34 = dateTimeZone29.adjustOffset(3155010L, false);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone29);
        org.joda.time.Instant instant37 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone38 = null;
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.forTimeZone(timeZone38);
        org.joda.time.chrono.GJChronology gJChronology40 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone39);
        org.joda.time.DateTimeField dateTimeField41 = gJChronology40.millisOfSecond();
        int int42 = instant37.get(dateTimeField41);
        org.joda.time.Instant instant44 = instant37.plus(0L);
        org.joda.time.Instant instant45 = instant44.toInstant();
        org.joda.time.Instant instant47 = new org.joda.time.Instant(52L);
        boolean boolean48 = instant47.isEqualNow();
        java.lang.String str49 = instant47.toString();
        java.lang.String str50 = instant47.toString();
        org.joda.time.Instant instant52 = new org.joda.time.Instant(52L);
        boolean boolean53 = instant52.isEqualNow();
        org.joda.time.ReadableDuration readableDuration54 = null;
        org.joda.time.Instant instant55 = instant52.plus(readableDuration54);
        boolean boolean56 = instant47.isBefore((org.joda.time.ReadableInstant) instant55);
        org.joda.time.Instant instant58 = instant47.minus((long) 0);
        int int59 = instant44.compareTo((org.joda.time.ReadableInstant) instant47);
        org.joda.time.Instant instant62 = instant47.withDurationAdded((long) (short) 100, 70);
        org.joda.time.ReadableInstant readableInstant63 = null;
        boolean boolean64 = instant47.isBefore(readableInstant63);
        org.joda.time.ReadableDuration readableDuration65 = null;
        org.joda.time.Instant instant67 = instant47.withDurationAdded(readableDuration65, 10);
        org.joda.time.DateTime dateTime68 = instant47.toDateTime();
        org.joda.time.chrono.GJChronology gJChronology69 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone29, (org.joda.time.ReadableInstant) dateTime68);
        org.joda.time.Chronology chronology70 = gJChronology2.withZone(dateTimeZone29);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant37 and dateTime68", (instant37.compareTo(dateTime68) == 0) == instant37.equals(dateTime68));
    }

    @Test
    public void test1973() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1973");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = gJChronology2.halfdays();
        org.joda.time.Chronology chronology4 = gJChronology2.withUTC();
        java.lang.String str5 = gJChronology2.toString();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology2.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(1, 10);
        org.joda.time.Chronology chronology10 = gJChronology2.withZone(dateTimeZone9);
        long long12 = dateTimeZone9.convertUTCToLocal((-43829L));
        boolean boolean13 = dateTimeZone9.isFixed();
        long long15 = dateTimeZone9.previousTransition((long) 1869);
        org.joda.time.LocalDateTime localDateTime16 = null;
        boolean boolean17 = dateTimeZone9.isLocalDateTimeGap(localDateTime16);
        boolean boolean19 = dateTimeZone9.isStandardOffset(0L);
        org.joda.time.LocalDateTime localDateTime20 = null;
        boolean boolean21 = dateTimeZone9.isLocalDateTimeGap(localDateTime20);
        java.util.TimeZone timeZone22 = null;
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        org.joda.time.chrono.GJChronology gJChronology24 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone23);
        long long28 = dateTimeZone23.convertLocalToUTC((long) (byte) -1, true, 0L);
        java.lang.String str30 = dateTimeZone23.getNameKey((long) (short) 0);
        boolean boolean32 = dateTimeZone23.isStandardOffset((long) 0);
        org.joda.time.Instant instant33 = org.joda.time.Instant.now();
        java.util.TimeZone timeZone34 = null;
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.forTimeZone(timeZone34);
        org.joda.time.chrono.GJChronology gJChronology36 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone35);
        org.joda.time.DurationField durationField37 = gJChronology36.halfdays();
        org.joda.time.DateTimeField dateTimeField38 = gJChronology36.millisOfDay();
        org.joda.time.DateTimeField dateTimeField39 = gJChronology36.halfdayOfDay();
        int int40 = instant33.get(dateTimeField39);
        java.util.TimeZone timeZone41 = null;
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.forTimeZone(timeZone41);
        org.joda.time.chrono.GJChronology gJChronology43 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone42);
        long long47 = dateTimeZone42.convertLocalToUTC((long) (byte) -1, true, 0L);
        boolean boolean49 = dateTimeZone42.equals((java.lang.Object) true);
        org.joda.time.chrono.GJChronology gJChronology50 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone42);
        org.joda.time.DateTimeField dateTimeField51 = gJChronology50.weekyear();
        org.joda.time.DateTimeField dateTimeField52 = gJChronology50.clockhourOfHalfday();
        org.joda.time.MutableDateTime mutableDateTime53 = instant33.toMutableDateTime((org.joda.time.Chronology) gJChronology50);
        int int54 = dateTimeZone23.getOffset((org.joda.time.ReadableInstant) mutableDateTime53);
        org.joda.time.chrono.GJChronology gJChronology55 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone9, (org.joda.time.ReadableInstant) mutableDateTime53);
        java.lang.String str57 = dateTimeZone9.getNameKey(3600000L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant33 and mutableDateTime53", (instant33.compareTo(mutableDateTime53) == 0) == instant33.equals(mutableDateTime53));
    }

    @Test
    public void test1974() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1974");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((-315566928000000L));
        java.util.TimeZone timeZone2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forTimeZone(timeZone2);
        org.joda.time.chrono.GJChronology gJChronology4 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone3);
        org.joda.time.DurationField durationField5 = gJChronology4.halfdays();
        long long9 = gJChronology4.add((long) 'a', (-1L), (int) (short) 0);
        org.joda.time.DateTimeField dateTimeField10 = gJChronology4.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField11 = gJChronology4.centuryOfEra();
        long long15 = gJChronology4.add(262974600000L, (long) (byte) 100, (int) '4');
        org.joda.time.DateTimeField dateTimeField16 = gJChronology4.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField17 = gJChronology4.weekOfWeekyear();
        org.joda.time.DateTime dateTime18 = instant1.toDateTime((org.joda.time.Chronology) gJChronology4);
        java.util.TimeZone timeZone19 = null;
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forTimeZone(timeZone19);
        org.joda.time.chrono.GJChronology gJChronology21 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone20);
        org.joda.time.DurationField durationField22 = gJChronology21.halfdays();
        long long26 = gJChronology21.add(0L, (long) (short) -1, (int) '4');
        java.util.TimeZone timeZone27 = null;
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forTimeZone(timeZone27);
        org.joda.time.chrono.GJChronology gJChronology29 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone28);
        org.joda.time.DurationField durationField30 = gJChronology29.halfdays();
        org.joda.time.DateTimeField dateTimeField31 = gJChronology29.millisOfDay();
        org.joda.time.DateTimeField dateTimeField32 = gJChronology29.minuteOfDay();
        org.joda.time.DurationField durationField33 = gJChronology29.centuries();
        org.joda.time.DateTimeField dateTimeField34 = gJChronology29.dayOfYear();
        java.lang.String str35 = gJChronology29.toString();
        org.joda.time.DurationField durationField36 = gJChronology29.years();
        org.joda.time.DateTimeField dateTimeField37 = gJChronology29.yearOfEra();
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(0, (int) (short) 10);
        org.joda.time.Chronology chronology41 = gJChronology29.withZone(dateTimeZone40);
        org.joda.time.Chronology chronology42 = gJChronology21.withZone(dateTimeZone40);
        org.joda.time.DurationField durationField43 = gJChronology21.halfdays();
        org.joda.time.Instant instant44 = gJChronology21.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration45 = null;
        org.joda.time.Instant instant46 = instant44.plus(readableDuration45);
        org.joda.time.DateTime dateTime47 = instant46.toDateTimeISO();
        boolean boolean48 = instant1.isBefore((org.joda.time.ReadableInstant) dateTime47);
        java.util.TimeZone timeZone49 = null;
        org.joda.time.DateTimeZone dateTimeZone50 = org.joda.time.DateTimeZone.forTimeZone(timeZone49);
        org.joda.time.chrono.GJChronology gJChronology51 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone50);
        org.joda.time.DurationField durationField52 = gJChronology51.years();
        java.util.TimeZone timeZone53 = null;
        org.joda.time.DateTimeZone dateTimeZone54 = org.joda.time.DateTimeZone.forTimeZone(timeZone53);
        org.joda.time.chrono.GJChronology gJChronology55 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone54);
        org.joda.time.DurationField durationField56 = gJChronology55.halfdays();
        org.joda.time.DateTimeField dateTimeField57 = gJChronology55.millisOfDay();
        org.joda.time.DateTimeField dateTimeField58 = gJChronology55.minuteOfDay();
        org.joda.time.DurationField durationField59 = gJChronology55.centuries();
        java.util.TimeZone timeZone60 = null;
        org.joda.time.DateTimeZone dateTimeZone61 = org.joda.time.DateTimeZone.forTimeZone(timeZone60);
        org.joda.time.chrono.GJChronology gJChronology62 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone61);
        org.joda.time.DurationField durationField63 = gJChronology62.halfdays();
        long long66 = durationField63.add((long) 100, 100L);
        boolean boolean67 = durationField63.isPrecise();
        int int68 = durationField59.compareTo(durationField63);
        boolean boolean69 = gJChronology51.equals((java.lang.Object) durationField59);
        org.joda.time.DateTimeField dateTimeField70 = gJChronology51.dayOfYear();
        org.joda.time.DateTimeField dateTimeField71 = gJChronology51.hourOfDay();
        org.joda.time.DateTimeField dateTimeField72 = gJChronology51.clockhourOfDay();
        int int73 = dateTime47.get(dateTimeField72);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and dateTime18", (instant1.compareTo(dateTime18) == 0) == instant1.equals(dateTime18));
    }

    @Test
    public void test1975() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1975");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        boolean boolean2 = instant1.isEqualNow();
        java.lang.String str3 = instant1.toString();
        java.util.TimeZone timeZone4 = null;
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forTimeZone(timeZone4);
        org.joda.time.chrono.GJChronology gJChronology6 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone5);
        java.util.Locale locale8 = new java.util.Locale("hi!");
        java.lang.String str9 = locale8.getCountry();
        java.util.Locale locale10 = java.util.Locale.getDefault();
        java.lang.String str11 = locale10.getDisplayName();
        java.lang.String str12 = locale8.getDisplayScript(locale10);
        boolean boolean13 = dateTimeZone5.equals((java.lang.Object) locale10);
        int int15 = dateTimeZone5.getOffsetFromLocal((long) (short) 10);
        java.util.TimeZone timeZone16 = null;
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forTimeZone(timeZone16);
        org.joda.time.chrono.GJChronology gJChronology18 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone17);
        org.joda.time.DateTimeField dateTimeField19 = gJChronology18.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField20 = gJChronology18.weekyearOfCentury();
        org.joda.time.Instant instant21 = gJChronology18.getGregorianCutover();
        org.joda.time.Instant instant23 = instant21.withMillis(0L);
        org.joda.time.Instant instant25 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone26 = null;
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forTimeZone(timeZone26);
        org.joda.time.chrono.GJChronology gJChronology28 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone27);
        org.joda.time.DateTimeField dateTimeField29 = gJChronology28.millisOfSecond();
        int int30 = instant25.get(dateTimeField29);
        org.joda.time.Instant instant32 = instant25.plus(0L);
        int int33 = instant23.compareTo((org.joda.time.ReadableInstant) instant32);
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = null;
        boolean boolean35 = instant32.isSupported(dateTimeFieldType34);
        int int36 = dateTimeZone5.getOffset((org.joda.time.ReadableInstant) instant32);
        boolean boolean37 = instant1.isAfter((org.joda.time.ReadableInstant) instant32);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter38 = null;
        java.lang.String str39 = instant1.toString(dateTimeFormatter38);
        boolean boolean41 = instant1.isAfter(45L);
        org.joda.time.Chronology chronology42 = instant1.getChronology();
        org.joda.time.MutableDateTime mutableDateTime43 = instant1.toMutableDateTimeISO();
        org.joda.time.Instant instant45 = instant1.minus(12877800000L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant25 and mutableDateTime43", (instant25.compareTo(mutableDateTime43) == 0) == instant25.equals(mutableDateTime43));
    }

    @Test
    public void test1976() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1976");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forTimeZone(timeZone2);
        org.joda.time.chrono.GJChronology gJChronology4 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone3);
        org.joda.time.DateTimeField dateTimeField5 = gJChronology4.millisOfSecond();
        int int6 = instant1.get(dateTimeField5);
        boolean boolean7 = instant1.isEqualNow();
        boolean boolean9 = instant1.isBefore(35L);
        java.util.TimeZone timeZone10 = null;
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forTimeZone(timeZone10);
        org.joda.time.chrono.GJChronology gJChronology12 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone11);
        org.joda.time.DateTimeField dateTimeField13 = gJChronology12.era();
        org.joda.time.DateTimeField dateTimeField14 = gJChronology12.centuryOfEra();
        org.joda.time.DurationField durationField15 = gJChronology12.hours();
        org.joda.time.DateTimeField dateTimeField16 = gJChronology12.monthOfYear();
        org.joda.time.DateTimeField dateTimeField17 = gJChronology12.dayOfWeek();
        org.joda.time.Chronology chronology18 = gJChronology12.withUTC();
        org.joda.time.DurationField durationField19 = gJChronology12.centuries();
        java.util.TimeZone timeZone20 = null;
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forTimeZone(timeZone20);
        java.lang.String str23 = dateTimeZone21.getNameKey((long) 100);
        boolean boolean24 = dateTimeZone21.isFixed();
        org.joda.time.chrono.GJChronology gJChronology25 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone21);
        int int26 = gJChronology25.getMinimumDaysInFirstWeek();
        java.lang.String str27 = gJChronology25.toString();
        org.joda.time.DateTimeField dateTimeField28 = gJChronology25.yearOfEra();
        org.joda.time.DateTimeField dateTimeField29 = gJChronology25.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField30 = gJChronology25.dayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology32 = gJChronology25.withZone(dateTimeZone31);
        org.joda.time.DateTimeField dateTimeField33 = chronology32.millisOfSecond();
        java.util.TimeZone timeZone34 = null;
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.forTimeZone(timeZone34);
        org.joda.time.chrono.GJChronology gJChronology36 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone35);
        int int38 = dateTimeZone35.getOffsetFromLocal((long) (-1));
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.forOffsetHours((int) '4');
        long long42 = dateTimeZone35.getMillisKeepLocal(dateTimeZone40, (-8380800000L));
        org.joda.time.Chronology chronology43 = chronology32.withZone(dateTimeZone35);
        java.util.TimeZone timeZone44 = null;
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.forTimeZone(timeZone44);
        org.joda.time.chrono.GJChronology gJChronology46 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone45);
        org.joda.time.DurationField durationField47 = gJChronology46.halfdays();
        java.util.TimeZone timeZone48 = null;
        org.joda.time.DateTimeZone dateTimeZone49 = org.joda.time.DateTimeZone.forTimeZone(timeZone48);
        org.joda.time.chrono.GJChronology gJChronology50 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone49);
        long long54 = dateTimeZone49.convertLocalToUTC((long) (byte) -1, true, 0L);
        boolean boolean56 = dateTimeZone49.equals((java.lang.Object) true);
        org.joda.time.Chronology chronology57 = gJChronology46.withZone(dateTimeZone49);
        org.joda.time.LocalDateTime localDateTime58 = null;
        boolean boolean59 = dateTimeZone49.isLocalDateTimeGap(localDateTime58);
        boolean boolean60 = dateTimeZone49.isFixed();
        long long62 = dateTimeZone35.getMillisKeepLocal(dateTimeZone49, (long) (short) -1);
        org.joda.time.Chronology chronology63 = gJChronology12.withZone(dateTimeZone49);
        org.joda.time.Instant instant65 = new org.joda.time.Instant(52L);
        boolean boolean66 = instant65.isEqualNow();
        java.lang.String str67 = instant65.toString();
        org.joda.time.Chronology chronology68 = null;
        org.joda.time.MutableDateTime mutableDateTime69 = instant65.toMutableDateTime(chronology68);
        org.joda.time.MutableDateTime mutableDateTime70 = instant65.toMutableDateTime();
        org.joda.time.MutableDateTime mutableDateTime71 = instant65.toMutableDateTime();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter72 = null;
        java.lang.String str73 = instant65.toString(dateTimeFormatter72);
        org.joda.time.chrono.GJChronology gJChronology74 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone49, (org.joda.time.ReadableInstant) instant65);
        int int75 = instant1.compareTo((org.joda.time.ReadableInstant) instant65);
        java.util.TimeZone timeZone76 = null;
        org.joda.time.DateTimeZone dateTimeZone77 = org.joda.time.DateTimeZone.forTimeZone(timeZone76);
        org.joda.time.chrono.GJChronology gJChronology78 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone77);
        org.joda.time.DateTimeField dateTimeField79 = gJChronology78.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField80 = gJChronology78.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField81 = gJChronology78.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField82 = gJChronology78.halfdayOfDay();
        org.joda.time.MutableDateTime mutableDateTime83 = instant1.toMutableDateTime((org.joda.time.Chronology) gJChronology78);
        org.joda.time.ReadablePeriod readablePeriod84 = null;
        long long87 = gJChronology78.add(readablePeriod84, 4200000L, 236785);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and mutableDateTime69", (instant1.compareTo(mutableDateTime69) == 0) == instant1.equals(mutableDateTime69));
    }

    @Test
    public void test1977() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1977");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forTimeZone(timeZone2);
        org.joda.time.chrono.GJChronology gJChronology4 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone3);
        org.joda.time.DateTimeField dateTimeField5 = gJChronology4.millisOfSecond();
        int int6 = instant1.get(dateTimeField5);
        boolean boolean7 = instant1.isEqualNow();
        org.joda.time.tz.NameProvider nameProvider8 = org.joda.time.DateTimeZone.getNameProvider();
        org.joda.time.DateTimeZone.setNameProvider(nameProvider8);
        org.joda.time.DateTimeZone.setNameProvider(nameProvider8);
        boolean boolean11 = instant1.equals((java.lang.Object) nameProvider8);
        org.joda.time.Instant instant13 = instant1.minus(0L);
        org.joda.time.MutableDateTime mutableDateTime14 = instant1.toMutableDateTimeISO();
        org.joda.time.Instant instant16 = new org.joda.time.Instant(52L);
        boolean boolean17 = instant16.isEqualNow();
        java.lang.String str18 = instant16.toString();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MutableDateTime mutableDateTime20 = instant16.toMutableDateTime(chronology19);
        java.util.List<java.util.Locale.LanguageRange> languageRangeList22 = java.util.Locale.LanguageRange.parse("halfdays");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap23 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList24 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList22, strMap23);
        java.util.Locale.LanguageRange[] languageRangeArray25 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList26 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList26, languageRangeArray25);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap28 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList29 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList26, strMap28);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap30 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList31 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList29, strMap30);
        java.util.List<java.util.Locale.LanguageRange> languageRangeList33 = java.util.Locale.LanguageRange.parse("halfdays");
        java.util.Locale locale34 = java.util.Locale.getDefault();
        java.lang.String str35 = locale34.getDisplayLanguage();
        java.util.Locale locale36 = java.util.Locale.CANADA;
        java.lang.String str37 = locale36.getDisplayVariant();
        java.util.Locale locale38 = java.util.Locale.JAPAN;
        java.lang.String str39 = locale38.getCountry();
        java.util.Locale locale40 = java.util.Locale.KOREA;
        java.util.Locale locale41 = java.util.Locale.GERMANY;
        java.util.Locale locale43 = java.util.Locale.forLanguageTag("hi!");
        java.lang.String str44 = locale43.toLanguageTag();
        java.util.Locale locale46 = new java.util.Locale("hi!");
        java.lang.String str47 = locale46.getCountry();
        java.lang.String str48 = locale46.getLanguage();
        java.util.Locale locale50 = java.util.Locale.forLanguageTag("halfdays");
        boolean boolean51 = locale50.hasExtensions();
        java.util.Locale locale52 = java.util.Locale.getDefault();
        java.lang.String str53 = locale52.getISO3Language();
        java.util.Locale locale55 = new java.util.Locale("hi!");
        java.lang.String str56 = locale55.getCountry();
        java.lang.String str57 = locale55.getCountry();
        java.util.Locale locale58 = java.util.Locale.getDefault();
        java.util.Locale locale59 = java.util.Locale.CHINA;
        java.util.Locale locale60 = java.util.Locale.getDefault();
        java.lang.String str61 = locale60.getDisplayName();
        java.lang.String str62 = locale60.getDisplayVariant();
        java.util.Locale locale63 = java.util.Locale.ROOT;
        java.lang.String str64 = locale63.getDisplayScript();
        java.util.Locale locale65 = java.util.Locale.getDefault();
        java.lang.String str66 = locale65.getDisplayName();
        java.util.Locale locale67 = java.util.Locale.CANADA;
        java.lang.String str68 = locale67.getISO3Language();
        java.util.Locale locale69 = java.util.Locale.getDefault();
        java.lang.String str70 = locale69.getDisplayLanguage();
        java.lang.String str71 = locale69.toLanguageTag();
        java.util.Locale locale73 = new java.util.Locale("hi!");
        java.lang.String str74 = locale73.getCountry();
        java.util.Locale locale75 = java.util.Locale.getDefault();
        java.lang.String str76 = locale75.getDisplayName();
        java.lang.String str77 = locale73.getDisplayScript(locale75);
        java.util.Locale locale78 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Locale locale79 = java.util.Locale.JAPAN;
        java.lang.String str80 = locale79.getCountry();
        java.util.Locale locale82 = new java.util.Locale("hi!");
        java.lang.String str83 = locale82.getCountry();
        java.lang.String str84 = locale82.getScript();
        java.util.Locale locale85 = java.util.Locale.CANADA;
        java.lang.String str86 = locale85.getISO3Language();
        java.util.Locale locale87 = java.util.Locale.getDefault();
        java.lang.String str88 = locale87.getDisplayName();
        java.lang.String str89 = locale87.getDisplayVariant();
        java.util.Locale[] localeArray90 = new java.util.Locale[] { locale34, locale36, locale38, locale40, locale41, locale43, locale46, locale50, locale52, locale55, locale58, locale59, locale60, locale63, locale65, locale67, locale69, locale73, locale78, locale79, locale82, locale85, locale87 };
        java.util.ArrayList<java.util.Locale> localeList91 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean92 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList91, localeArray90);
        java.util.Locale locale93 = java.util.Locale.lookup(languageRangeList33, (java.util.Collection<java.util.Locale>) localeList91);
        java.util.Locale locale94 = java.util.Locale.lookup(languageRangeList31, (java.util.Collection<java.util.Locale>) localeList91);
        java.util.Locale locale95 = java.util.Locale.lookup(languageRangeList22, (java.util.Collection<java.util.Locale>) localeList91);
        java.util.Set<java.lang.String> strSet96 = locale95.getUnicodeLocaleAttributes();
        boolean boolean97 = mutableDateTime20.equals((java.lang.Object) locale95);
        org.joda.time.Chronology chronology98 = mutableDateTime20.getChronology();
        boolean boolean99 = instant1.isBefore((org.joda.time.ReadableInstant) mutableDateTime20);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and mutableDateTime14", (instant1.compareTo(mutableDateTime14) == 0) == instant1.equals(mutableDateTime14));
    }

    @Test
    public void test1978() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1978");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = gJChronology2.halfdays();
        long long7 = gJChronology2.add((long) 'a', (-1L), (int) (short) 0);
        org.joda.time.DateTimeField dateTimeField8 = gJChronology2.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField9 = gJChronology2.secondOfMinute();
        org.joda.time.Instant instant11 = new org.joda.time.Instant(52L);
        boolean boolean12 = instant11.isEqualNow();
        org.joda.time.ReadableDuration readableDuration13 = null;
        org.joda.time.Instant instant14 = instant11.plus(readableDuration13);
        boolean boolean15 = gJChronology2.equals((java.lang.Object) instant11);
        java.util.Date date16 = instant11.toDate();
        org.joda.time.MutableDateTime mutableDateTime17 = instant11.toMutableDateTime();
        java.util.TimeZone timeZone18 = null;
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forTimeZone(timeZone18);
        java.lang.String str21 = dateTimeZone19.getNameKey((long) 100);
        boolean boolean22 = dateTimeZone19.isFixed();
        org.joda.time.chrono.GJChronology gJChronology23 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone19);
        int int24 = gJChronology23.getMinimumDaysInFirstWeek();
        org.joda.time.DateTimeField dateTimeField25 = gJChronology23.clockhourOfDay();
        org.joda.time.ReadablePeriod readablePeriod26 = null;
        long long29 = gJChronology23.add(readablePeriod26, (long) (short) -1, (int) (byte) 10);
        org.joda.time.DateTimeField dateTimeField30 = gJChronology23.secondOfMinute();
        org.joda.time.DurationField durationField31 = gJChronology23.months();
        org.joda.time.MutableDateTime mutableDateTime32 = instant11.toMutableDateTime((org.joda.time.Chronology) gJChronology23);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant11 and mutableDateTime17", (instant11.compareTo(mutableDateTime17) == 0) == instant11.equals(mutableDateTime17));
    }

    @Test
    public void test1979() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1979");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField3 = gJChronology2.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.weekyearOfCentury();
        org.joda.time.Instant instant5 = gJChronology2.getGregorianCutover();
        org.joda.time.Instant instant7 = instant5.withMillis(0L);
        org.joda.time.Instant instant9 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone10 = null;
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forTimeZone(timeZone10);
        org.joda.time.chrono.GJChronology gJChronology12 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone11);
        org.joda.time.DateTimeField dateTimeField13 = gJChronology12.millisOfSecond();
        int int14 = instant9.get(dateTimeField13);
        org.joda.time.Instant instant16 = instant9.plus(0L);
        int int17 = instant7.compareTo((org.joda.time.ReadableInstant) instant16);
        org.joda.time.Instant instant19 = new org.joda.time.Instant(52L);
        boolean boolean20 = instant19.isEqualNow();
        org.joda.time.ReadableDuration readableDuration21 = null;
        org.joda.time.Instant instant22 = instant19.plus(readableDuration21);
        boolean boolean24 = instant22.equals((java.lang.Object) ' ');
        boolean boolean25 = instant16.isEqual((org.joda.time.ReadableInstant) instant22);
        java.lang.String str26 = instant16.toString();
        org.joda.time.ReadableDuration readableDuration27 = null;
        org.joda.time.Instant instant29 = instant16.withDurationAdded(readableDuration27, 1431201);
        org.joda.time.Instant instant30 = instant16.toInstant();
        org.joda.time.Instant instant32 = instant30.minus((-5914428L));
        java.util.TimeZone timeZone33 = null;
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.forTimeZone(timeZone33);
        org.joda.time.chrono.GJChronology gJChronology35 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone34);
        org.joda.time.DurationField durationField36 = gJChronology35.years();
        java.util.TimeZone timeZone37 = null;
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forTimeZone(timeZone37);
        org.joda.time.chrono.GJChronology gJChronology39 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone38);
        org.joda.time.DurationField durationField40 = gJChronology39.halfdays();
        org.joda.time.DateTimeField dateTimeField41 = gJChronology39.millisOfDay();
        org.joda.time.DateTimeField dateTimeField42 = gJChronology39.minuteOfDay();
        org.joda.time.DurationField durationField43 = gJChronology39.centuries();
        java.util.TimeZone timeZone44 = null;
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.forTimeZone(timeZone44);
        org.joda.time.chrono.GJChronology gJChronology46 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone45);
        org.joda.time.DurationField durationField47 = gJChronology46.halfdays();
        long long50 = durationField47.add((long) 100, 100L);
        boolean boolean51 = durationField47.isPrecise();
        int int52 = durationField43.compareTo(durationField47);
        boolean boolean53 = gJChronology35.equals((java.lang.Object) durationField43);
        org.joda.time.DateTimeField dateTimeField54 = gJChronology35.dayOfYear();
        org.joda.time.DateTimeField dateTimeField55 = gJChronology35.era();
        org.joda.time.DateTimeZone dateTimeZone56 = gJChronology35.getZone();
        org.joda.time.Instant instant57 = gJChronology35.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration58 = null;
        org.joda.time.Instant instant59 = instant57.plus(readableDuration58);
        org.joda.time.Instant instant60 = org.joda.time.Instant.now();
        java.util.TimeZone timeZone61 = null;
        org.joda.time.DateTimeZone dateTimeZone62 = org.joda.time.DateTimeZone.forTimeZone(timeZone61);
        org.joda.time.chrono.GJChronology gJChronology63 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone62);
        org.joda.time.DurationField durationField64 = gJChronology63.halfdays();
        org.joda.time.DateTimeField dateTimeField65 = gJChronology63.millisOfDay();
        org.joda.time.DateTimeField dateTimeField66 = gJChronology63.halfdayOfDay();
        int int67 = instant60.get(dateTimeField66);
        java.util.TimeZone timeZone68 = null;
        org.joda.time.DateTimeZone dateTimeZone69 = org.joda.time.DateTimeZone.forTimeZone(timeZone68);
        org.joda.time.chrono.GJChronology gJChronology70 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone69);
        long long74 = dateTimeZone69.convertLocalToUTC((long) (byte) -1, true, 0L);
        boolean boolean76 = dateTimeZone69.equals((java.lang.Object) true);
        org.joda.time.chrono.GJChronology gJChronology77 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone69);
        org.joda.time.DateTimeField dateTimeField78 = gJChronology77.weekyear();
        org.joda.time.DateTimeField dateTimeField79 = gJChronology77.clockhourOfHalfday();
        org.joda.time.MutableDateTime mutableDateTime80 = instant60.toMutableDateTime((org.joda.time.Chronology) gJChronology77);
        boolean boolean81 = instant57.isAfter((org.joda.time.ReadableInstant) instant60);
        org.joda.time.Instant instant84 = instant60.withDurationAdded(3692163384000L, 70);
        boolean boolean85 = instant30.isEqual((org.joda.time.ReadableInstant) instant60);
        long long86 = instant30.getMillis();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant60 and mutableDateTime80", (instant60.compareTo(mutableDateTime80) == 0) == instant60.equals(mutableDateTime80));
    }

    @Test
    public void test1980() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1980");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forTimeZone(timeZone2);
        org.joda.time.chrono.GJChronology gJChronology4 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone3);
        org.joda.time.DateTimeField dateTimeField5 = gJChronology4.millisOfSecond();
        int int6 = instant1.get(dateTimeField5);
        boolean boolean7 = instant1.isEqualNow();
        org.joda.time.DateTime dateTime8 = instant1.toDateTime();
        java.util.TimeZone timeZone9 = null;
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forTimeZone(timeZone9);
        org.joda.time.chrono.GJChronology gJChronology11 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone10);
        org.joda.time.DurationField durationField12 = gJChronology11.halfdays();
        org.joda.time.DateTimeField dateTimeField13 = gJChronology11.millisOfDay();
        org.joda.time.DateTimeField dateTimeField14 = gJChronology11.minuteOfDay();
        org.joda.time.DurationField durationField15 = gJChronology11.centuries();
        org.joda.time.DateTimeField dateTimeField16 = gJChronology11.dayOfYear();
        java.lang.String str17 = gJChronology11.toString();
        org.joda.time.DurationField durationField18 = gJChronology11.years();
        org.joda.time.MutableDateTime mutableDateTime19 = dateTime8.toMutableDateTime((org.joda.time.Chronology) gJChronology11);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = null;
        boolean boolean21 = mutableDateTime19.isSupported(dateTimeFieldType20);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and dateTime8", (instant1.compareTo(dateTime8) == 0) == instant1.equals(dateTime8));
    }

    @Test
    public void test1981() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1981");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        boolean boolean2 = instant1.isEqualNow();
        org.joda.time.ReadableDuration readableDuration3 = null;
        org.joda.time.Instant instant4 = instant1.plus(readableDuration3);
        org.joda.time.Instant instant6 = instant1.withMillis((long) 4);
        boolean boolean7 = instant6.isBeforeNow();
        boolean boolean9 = instant6.isBefore(5185792L);
        org.joda.time.MutableDateTime mutableDateTime10 = instant6.toMutableDateTime();
        org.joda.time.Instant instant11 = instant6.toInstant();
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.Instant instant14 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone15 = null;
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forTimeZone(timeZone15);
        org.joda.time.chrono.GJChronology gJChronology17 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone16);
        org.joda.time.DateTimeField dateTimeField18 = gJChronology17.millisOfSecond();
        int int19 = instant14.get(dateTimeField18);
        org.joda.time.Instant instant21 = instant14.plus(0L);
        java.util.TimeZone timeZone22 = null;
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        org.joda.time.chrono.GJChronology gJChronology24 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone23);
        org.joda.time.DurationField durationField25 = gJChronology24.halfdays();
        org.joda.time.Chronology chronology26 = gJChronology24.withUTC();
        java.lang.String str27 = gJChronology24.toString();
        org.joda.time.DateTimeField dateTimeField28 = gJChronology24.hourOfHalfday();
        int int29 = instant14.get(dateTimeField28);
        org.joda.time.Instant instant31 = new org.joda.time.Instant(52L);
        boolean boolean32 = instant31.isEqualNow();
        org.joda.time.ReadableDuration readableDuration33 = null;
        org.joda.time.Instant instant34 = instant31.plus(readableDuration33);
        org.joda.time.Instant instant36 = new org.joda.time.Instant(52L);
        org.joda.time.Instant instant38 = instant36.withMillis((long) 'u');
        boolean boolean39 = instant31.isBefore((org.joda.time.ReadableInstant) instant36);
        boolean boolean40 = instant14.isEqual((org.joda.time.ReadableInstant) instant36);
        org.joda.time.ReadableDuration readableDuration41 = null;
        org.joda.time.Instant instant43 = instant14.withDurationAdded(readableDuration41, 0);
        java.lang.String str44 = instant43.toString();
        org.joda.time.chrono.GJChronology gJChronology45 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone12, (org.joda.time.ReadableInstant) instant43);
        boolean boolean46 = instant6.equals((java.lang.Object) instant43);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime10 and instant6", (mutableDateTime10.compareTo(instant6) == 0) == mutableDateTime10.equals(instant6));
    }

    @Test
    public void test1982() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1982");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forTimeZone(timeZone2);
        org.joda.time.chrono.GJChronology gJChronology4 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone3);
        org.joda.time.DateTimeField dateTimeField5 = gJChronology4.millisOfSecond();
        int int6 = instant1.get(dateTimeField5);
        org.joda.time.Instant instant8 = instant1.plus(0L);
        java.util.TimeZone timeZone9 = null;
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forTimeZone(timeZone9);
        org.joda.time.chrono.GJChronology gJChronology11 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone10);
        org.joda.time.DurationField durationField12 = gJChronology11.halfdays();
        org.joda.time.Chronology chronology13 = gJChronology11.withUTC();
        java.lang.String str14 = gJChronology11.toString();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology11.hourOfHalfday();
        int int16 = instant1.get(dateTimeField15);
        org.joda.time.Instant instant18 = new org.joda.time.Instant(52L);
        boolean boolean19 = instant18.isEqualNow();
        java.lang.String str20 = instant18.toString();
        org.joda.time.Instant instant22 = new org.joda.time.Instant(52L);
        boolean boolean23 = instant22.isEqualNow();
        java.lang.String str24 = instant22.toString();
        java.lang.String str25 = instant22.toString();
        org.joda.time.Instant instant28 = instant22.withDurationAdded(115200000L, (int) (short) 1);
        int int29 = instant18.compareTo((org.joda.time.ReadableInstant) instant22);
        org.joda.time.Instant instant31 = new org.joda.time.Instant(52L);
        boolean boolean32 = instant31.isEqualNow();
        org.joda.time.ReadableDuration readableDuration33 = null;
        org.joda.time.Instant instant34 = instant31.plus(readableDuration33);
        boolean boolean36 = instant34.equals((java.lang.Object) ' ');
        boolean boolean37 = instant22.isAfter((org.joda.time.ReadableInstant) instant34);
        int int38 = instant1.compareTo((org.joda.time.ReadableInstant) instant22);
        org.joda.time.Instant instant40 = instant22.minus(10699L);
        org.joda.time.DateTimeZone dateTimeZone41 = instant40.getZone();
        org.joda.time.Instant instant42 = instant40.toInstant();
        java.util.TimeZone timeZone43 = null;
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.forTimeZone(timeZone43);
        org.joda.time.chrono.GJChronology gJChronology45 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone44);
        org.joda.time.DurationField durationField46 = gJChronology45.halfdays();
        long long50 = gJChronology45.add((long) 'a', (-1L), (int) (short) 0);
        long long54 = gJChronology45.add((long) (byte) 0, (long) '4', 100);
        org.joda.time.DateTimeField dateTimeField55 = gJChronology45.minuteOfHour();
        org.joda.time.DurationField durationField56 = gJChronology45.hours();
        org.joda.time.DateTimeField dateTimeField57 = gJChronology45.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField58 = gJChronology45.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField59 = gJChronology45.centuryOfEra();
        java.util.TimeZone timeZone60 = null;
        org.joda.time.DateTimeZone dateTimeZone61 = org.joda.time.DateTimeZone.forTimeZone(timeZone60);
        org.joda.time.chrono.GJChronology gJChronology62 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone61);
        org.joda.time.DurationField durationField63 = gJChronology62.halfdays();
        long long67 = gJChronology62.add((long) 'a', (-1L), (int) (short) 0);
        long long71 = gJChronology62.add((long) (byte) 0, (long) '4', 100);
        org.joda.time.DateTimeField dateTimeField72 = gJChronology62.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField73 = gJChronology62.year();
        org.joda.time.DurationField durationField74 = gJChronology62.centuries();
        org.joda.time.DateTimeField dateTimeField75 = gJChronology62.dayOfMonth();
        boolean boolean76 = gJChronology45.equals((java.lang.Object) dateTimeField75);
        org.joda.time.DateTimeZone dateTimeZone77 = gJChronology45.getZone();
        org.joda.time.MutableDateTime mutableDateTime78 = instant40.toMutableDateTime(dateTimeZone77);
        java.util.TimeZone timeZone79 = null;
        org.joda.time.DateTimeZone dateTimeZone80 = org.joda.time.DateTimeZone.forTimeZone(timeZone79);
        org.joda.time.chrono.GJChronology gJChronology81 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone80);
        org.joda.time.DurationField durationField82 = gJChronology81.halfdays();
        long long86 = gJChronology81.add((long) 'a', (-1L), (int) (short) 0);
        org.joda.time.DateTimeField dateTimeField87 = gJChronology81.halfdayOfDay();
        org.joda.time.Chronology chronology88 = gJChronology81.withUTC();
        java.lang.String str89 = gJChronology81.toString();
        boolean boolean91 = gJChronology81.equals((java.lang.Object) "English");
        org.joda.time.MutableDateTime mutableDateTime92 = mutableDateTime78.toMutableDateTime((org.joda.time.Chronology) gJChronology81);
        org.joda.time.DateTimeField dateTimeField93 = gJChronology81.minuteOfHour();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant40 and mutableDateTime78", (instant40.compareTo(mutableDateTime78) == 0) == instant40.equals(mutableDateTime78));
    }

    @Test
    public void test1983() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1983");
        org.joda.time.Instant instant1 = org.joda.time.Instant.parse("3929-04-02T00:00:00.051Z");
        org.joda.time.DateTime dateTime2 = instant1.toDateTime();
        java.util.TimeZone timeZone3 = null;
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forTimeZone(timeZone3);
        org.joda.time.chrono.GJChronology gJChronology5 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone4);
        org.joda.time.DateTimeField dateTimeField6 = gJChronology5.era();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology5.year();
        org.joda.time.DateTimeField dateTimeField8 = gJChronology5.secondOfDay();
        org.joda.time.DurationField durationField9 = gJChronology5.years();
        boolean boolean10 = instant1.equals((java.lang.Object) gJChronology5);
        org.joda.time.DurationField durationField11 = gJChronology5.months();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and dateTime2", (instant1.compareTo(dateTime2) == 0) == instant1.equals(dateTime2));
    }

    @Test
    public void test1984() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1984");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forTimeZone(timeZone2);
        org.joda.time.chrono.GJChronology gJChronology4 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone3);
        org.joda.time.DateTimeField dateTimeField5 = gJChronology4.millisOfSecond();
        int int6 = instant1.get(dateTimeField5);
        boolean boolean7 = instant1.isEqualNow();
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.Instant instant10 = instant1.withDurationAdded(readableDuration8, (int) (short) 0);
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.Instant instant12 = instant1.plus(readableDuration11);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = null;
        java.lang.String str14 = instant1.toString(dateTimeFormatter13);
        org.joda.time.Instant instant17 = instant1.withDurationAdded((long) (byte) 1, 0);
        org.joda.time.Instant instant19 = instant17.plus((-43881L));
        org.joda.time.DateTimeZone dateTimeZone20 = instant17.getZone();
        org.joda.time.Instant instant22 = new org.joda.time.Instant(52L);
        boolean boolean23 = instant22.isEqualNow();
        org.joda.time.ReadableDuration readableDuration24 = null;
        org.joda.time.Instant instant25 = instant22.plus(readableDuration24);
        long long26 = instant22.getMillis();
        java.lang.String str27 = instant22.toString();
        org.joda.time.Instant instant28 = instant22.toInstant();
        org.joda.time.Instant instant30 = new org.joda.time.Instant(52L);
        boolean boolean31 = instant30.isEqualNow();
        org.joda.time.ReadableDuration readableDuration32 = null;
        org.joda.time.Instant instant33 = instant30.plus(readableDuration32);
        long long34 = instant30.getMillis();
        java.lang.String str35 = instant30.toString();
        org.joda.time.Instant instant36 = instant30.toInstant();
        org.joda.time.DateTime dateTime37 = instant30.toDateTime();
        boolean boolean38 = instant28.equals((java.lang.Object) dateTime37);
        org.joda.time.chrono.GJChronology gJChronology39 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone20, (org.joda.time.ReadableInstant) instant28);
        int int41 = dateTimeZone20.getOffset(864000000L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and dateTime37", (instant1.compareTo(dateTime37) == 0) == instant1.equals(dateTime37));
    }

    @Test
    public void test1985() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1985");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField3 = gJChronology2.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.weekyearOfCentury();
        org.joda.time.Instant instant5 = gJChronology2.getGregorianCutover();
        org.joda.time.Instant instant7 = instant5.withMillis(0L);
        boolean boolean9 = instant7.isBefore(3155760000000L);
        org.joda.time.MutableDateTime mutableDateTime10 = instant7.toMutableDateTimeISO();
        java.util.TimeZone timeZone11 = null;
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forTimeZone(timeZone11);
        java.lang.String str14 = dateTimeZone12.getNameKey((long) 100);
        boolean boolean15 = dateTimeZone12.isFixed();
        org.joda.time.chrono.GJChronology gJChronology16 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone12);
        int int17 = gJChronology16.getMinimumDaysInFirstWeek();
        org.joda.time.DateTimeField dateTimeField18 = gJChronology16.clockhourOfDay();
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        long long22 = gJChronology16.add(readablePeriod19, (long) (short) -1, (int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone23 = gJChronology16.getZone();
        int int25 = dateTimeZone23.getStandardOffset((-599850999L));
        org.joda.time.MutableDateTime mutableDateTime26 = mutableDateTime10.toMutableDateTime(dateTimeZone23);
        org.joda.time.DateTimeZone dateTimeZone27 = mutableDateTime10.getZone();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant7 and mutableDateTime26", (instant7.compareTo(mutableDateTime26) == 0) == instant7.equals(mutableDateTime26));
    }

    @Test
    public void test1986() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1986");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        boolean boolean2 = instant1.isEqualNow();
        java.lang.String str3 = instant1.toString();
        java.lang.String str4 = instant1.toString();
        org.joda.time.Instant instant7 = instant1.withDurationAdded(115200000L, (int) (short) 1);
        org.joda.time.Instant instant9 = instant1.plus((long) (short) 100);
        org.joda.time.Instant instant11 = new org.joda.time.Instant(52L);
        boolean boolean12 = instant11.isEqualNow();
        org.joda.time.ReadableDuration readableDuration13 = null;
        org.joda.time.Instant instant14 = instant11.plus(readableDuration13);
        boolean boolean16 = instant14.equals((java.lang.Object) ' ');
        org.joda.time.Instant instant18 = instant14.plus(3600000L);
        org.joda.time.Instant instant20 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone21 = null;
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forTimeZone(timeZone21);
        org.joda.time.chrono.GJChronology gJChronology23 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone22);
        org.joda.time.DateTimeField dateTimeField24 = gJChronology23.millisOfSecond();
        int int25 = instant20.get(dateTimeField24);
        org.joda.time.Instant instant27 = instant20.plus(0L);
        java.util.TimeZone timeZone28 = null;
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forTimeZone(timeZone28);
        org.joda.time.chrono.GJChronology gJChronology30 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone29);
        org.joda.time.DurationField durationField31 = gJChronology30.halfdays();
        org.joda.time.Chronology chronology32 = gJChronology30.withUTC();
        java.lang.String str33 = gJChronology30.toString();
        org.joda.time.DateTimeField dateTimeField34 = gJChronology30.hourOfHalfday();
        int int35 = instant20.get(dateTimeField34);
        java.util.TimeZone timeZone36 = null;
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.forTimeZone(timeZone36);
        org.joda.time.chrono.GJChronology gJChronology38 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone37);
        org.joda.time.DurationField durationField39 = gJChronology38.halfdays();
        long long43 = gJChronology38.add((long) 'a', (-1L), (int) (short) 0);
        org.joda.time.DateTimeField dateTimeField44 = gJChronology38.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField45 = gJChronology38.secondOfMinute();
        org.joda.time.Instant instant47 = new org.joda.time.Instant(52L);
        boolean boolean48 = instant47.isEqualNow();
        org.joda.time.ReadableDuration readableDuration49 = null;
        org.joda.time.Instant instant50 = instant47.plus(readableDuration49);
        boolean boolean51 = gJChronology38.equals((java.lang.Object) instant47);
        org.joda.time.DateTimeFieldType dateTimeFieldType52 = null;
        boolean boolean53 = instant47.isSupported(dateTimeFieldType52);
        org.joda.time.DateTimeFieldType dateTimeFieldType54 = null;
        boolean boolean55 = instant47.isSupported(dateTimeFieldType54);
        org.joda.time.DateTimeZone dateTimeZone56 = instant47.getZone();
        boolean boolean57 = instant20.isAfter((org.joda.time.ReadableInstant) instant47);
        org.joda.time.Instant instant59 = instant20.minus((long) 70);
        org.joda.time.Instant instant61 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone62 = null;
        org.joda.time.DateTimeZone dateTimeZone63 = org.joda.time.DateTimeZone.forTimeZone(timeZone62);
        org.joda.time.chrono.GJChronology gJChronology64 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone63);
        org.joda.time.DateTimeField dateTimeField65 = gJChronology64.millisOfSecond();
        int int66 = instant61.get(dateTimeField65);
        boolean boolean67 = instant61.isEqualNow();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter68 = null;
        java.lang.String str69 = instant61.toString(dateTimeFormatter68);
        boolean boolean70 = instant20.isAfter((org.joda.time.ReadableInstant) instant61);
        boolean boolean71 = instant18.isEqual((org.joda.time.ReadableInstant) instant20);
        org.joda.time.Instant instant72 = instant18.toInstant();
        org.joda.time.Instant instant74 = instant72.minus((-378658602152915L));
        org.joda.time.MutableDateTime mutableDateTime75 = instant74.toMutableDateTime();
        boolean boolean76 = instant9.isAfter((org.joda.time.ReadableInstant) mutableDateTime75);
        org.joda.time.Instant instant78 = new org.joda.time.Instant(52L);
        boolean boolean79 = instant78.isEqualNow();
        org.joda.time.ReadableDuration readableDuration80 = null;
        org.joda.time.Instant instant81 = instant78.plus(readableDuration80);
        org.joda.time.Instant instant83 = new org.joda.time.Instant(52L);
        org.joda.time.Instant instant85 = instant83.withMillis((long) 'u');
        boolean boolean86 = instant78.isBefore((org.joda.time.ReadableInstant) instant83);
        org.joda.time.DateTimeZone dateTimeZone87 = instant83.getZone();
        org.joda.time.MutableDateTime mutableDateTime88 = instant83.toMutableDateTime();
        java.util.Date date89 = instant83.toDate();
        org.joda.time.Instant instant91 = instant83.minus((-940L));
        boolean boolean92 = mutableDateTime75.isAfter((org.joda.time.ReadableInstant) instant91);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and mutableDateTime88", (instant1.compareTo(mutableDateTime88) == 0) == instant1.equals(mutableDateTime88));
    }

    @Test
    public void test1987() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1987");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField3 = gJChronology2.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.weekyear();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.dayOfMonth();
        org.joda.time.DurationField durationField6 = gJChronology2.hours();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology2.monthOfYear();
        java.util.TimeZone timeZone8 = null;
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forTimeZone(timeZone8);
        org.joda.time.chrono.GJChronology gJChronology10 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone9);
        java.util.Locale locale12 = new java.util.Locale("hi!");
        java.lang.String str13 = locale12.getCountry();
        java.util.Locale locale14 = java.util.Locale.getDefault();
        java.lang.String str15 = locale14.getDisplayName();
        java.lang.String str16 = locale12.getDisplayScript(locale14);
        boolean boolean17 = dateTimeZone9.equals((java.lang.Object) locale14);
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetMillis((int) '4');
        java.util.TimeZone timeZone20 = dateTimeZone19.toTimeZone();
        long long23 = dateTimeZone19.adjustOffset((long) 0, false);
        int int25 = dateTimeZone19.getOffsetFromLocal((-26438399999L));
        long long27 = dateTimeZone9.getMillisKeepLocal(dateTimeZone19, (long) (byte) 10);
        org.joda.time.Chronology chronology28 = gJChronology2.withZone(dateTimeZone19);
        org.joda.time.DateTimeField dateTimeField29 = gJChronology2.millisOfDay();
        org.joda.time.Instant instant30 = org.joda.time.Instant.now();
        org.joda.time.Instant instant33 = instant30.withDurationAdded(306102434400000L, (int) (short) 100);
        java.util.TimeZone timeZone34 = null;
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.forTimeZone(timeZone34);
        org.joda.time.chrono.GJChronology gJChronology36 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone35);
        long long40 = dateTimeZone35.convertLocalToUTC((long) (byte) -1, true, 0L);
        boolean boolean42 = dateTimeZone35.equals((java.lang.Object) true);
        long long44 = dateTimeZone35.nextTransition((long) '4');
        java.lang.String str46 = dateTimeZone35.getShortName(432000001L);
        java.util.TimeZone timeZone47 = dateTimeZone35.toTimeZone();
        org.joda.time.DateTime dateTime48 = instant30.toDateTime(dateTimeZone35);
        org.joda.time.DateTimeZone dateTimeZone49 = dateTime48.getZone();
        org.joda.time.Instant instant51 = new org.joda.time.Instant(52L);
        boolean boolean52 = instant51.isEqualNow();
        java.lang.String str53 = instant51.toString();
        java.lang.String str54 = instant51.toString();
        org.joda.time.Instant instant57 = instant51.withDurationAdded(115200000L, (int) (short) 1);
        org.joda.time.Instant instant58 = instant51.toInstant();
        org.joda.time.Instant instant61 = instant51.withDurationAdded(4156171L, (-19));
        org.joda.time.Instant instant62 = instant51.toInstant();
        boolean boolean63 = dateTimeZone49.equals((java.lang.Object) instant62);
        org.joda.time.Instant instant65 = new org.joda.time.Instant(52L);
        boolean boolean66 = instant65.isEqualNow();
        java.lang.String str67 = instant65.toString();
        java.lang.String str68 = instant65.toString();
        org.joda.time.Instant instant70 = new org.joda.time.Instant(52L);
        boolean boolean71 = instant70.isEqualNow();
        org.joda.time.ReadableDuration readableDuration72 = null;
        org.joda.time.Instant instant73 = instant70.plus(readableDuration72);
        boolean boolean74 = instant65.isBefore((org.joda.time.ReadableInstant) instant73);
        org.joda.time.DateTime dateTime75 = instant65.toDateTime();
        boolean boolean77 = dateTime75.equals((java.lang.Object) "zh_TW");
        org.joda.time.Instant instant78 = org.joda.time.Instant.now();
        org.joda.time.Instant instant81 = instant78.withDurationAdded(306102434400000L, (int) (short) 100);
        java.lang.String str82 = instant81.toString();
        org.joda.time.DateTime dateTime83 = instant81.toDateTime();
        boolean boolean84 = dateTime75.isEqual((org.joda.time.ReadableInstant) dateTime83);
        org.joda.time.chrono.GJChronology gJChronology85 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone49, (org.joda.time.ReadableInstant) dateTime83);
        org.joda.time.Chronology chronology86 = gJChronology2.withZone(dateTimeZone49);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant30 and dateTime48", (instant30.compareTo(dateTime48) == 0) == instant30.equals(dateTime48));
    }

    @Test
    public void test1988() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1988");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        boolean boolean2 = instant1.isEqualNow();
        org.joda.time.ReadableDuration readableDuration3 = null;
        org.joda.time.Instant instant4 = instant1.plus(readableDuration3);
        boolean boolean6 = instant4.equals((java.lang.Object) ' ');
        org.joda.time.Instant instant8 = new org.joda.time.Instant(52L);
        boolean boolean9 = instant8.isEqualNow();
        java.lang.String str10 = instant8.toString();
        java.lang.String str11 = instant8.toString();
        boolean boolean12 = instant4.isBefore((org.joda.time.ReadableInstant) instant8);
        java.util.TimeZone timeZone13 = null;
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forTimeZone(timeZone13);
        org.joda.time.chrono.GJChronology gJChronology15 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone14);
        org.joda.time.DurationField durationField16 = gJChronology15.halfdays();
        long long20 = gJChronology15.add((long) 'a', (-1L), (int) (short) 0);
        boolean boolean22 = gJChronology15.equals((java.lang.Object) 0);
        org.joda.time.DateTimeField dateTimeField23 = gJChronology15.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField24 = gJChronology15.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField25 = gJChronology15.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField26 = gJChronology15.clockhourOfHalfday();
        org.joda.time.DurationField durationField27 = gJChronology15.weekyears();
        org.joda.time.DurationField durationField28 = gJChronology15.hours();
        org.joda.time.DateTimeField dateTimeField29 = gJChronology15.clockhourOfHalfday();
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        long long33 = gJChronology15.add(readablePeriod30, 4324200000L, (int) '#');
        org.joda.time.DateTime dateTime34 = instant4.toDateTime((org.joda.time.Chronology) gJChronology15);
        org.joda.time.DateTimeField dateTimeField35 = gJChronology15.year();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and dateTime34", (instant1.compareTo(dateTime34) == 0) == instant1.equals(dateTime34));
    }

    @Test
    public void test1989() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1989");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str3 = dateTimeZone1.getNameKey((long) 100);
        boolean boolean4 = dateTimeZone1.isFixed();
        java.util.Locale locale8 = new java.util.Locale("DurationField[halfdays]", "\u82f1\u6587");
        java.lang.String str9 = dateTimeZone1.getName((long) (short) 10, locale8);
        org.joda.time.Instant instant11 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone12 = null;
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forTimeZone(timeZone12);
        org.joda.time.chrono.GJChronology gJChronology14 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone13);
        org.joda.time.DateTimeField dateTimeField15 = gJChronology14.millisOfSecond();
        int int16 = instant11.get(dateTimeField15);
        org.joda.time.Chronology chronology17 = instant11.getChronology();
        org.joda.time.chrono.GJChronology gJChronology18 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1, (org.joda.time.ReadableInstant) instant11);
        org.joda.time.DateTime dateTime19 = instant11.toDateTime();
        org.joda.time.ReadableDuration readableDuration20 = null;
        org.joda.time.Instant instant21 = instant11.minus(readableDuration20);
        org.joda.time.MutableDateTime mutableDateTime22 = instant21.toMutableDateTimeISO();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant21 and dateTime19", (instant21.compareTo(dateTime19) == 0) == instant21.equals(dateTime19));
    }

    @Test
    public void test1990() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1990");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField3 = gJChronology2.millisOfSecond();
        org.joda.time.DurationField durationField4 = gJChronology2.millis();
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        long long8 = gJChronology2.add(readablePeriod5, (long) 'a', (int) '4');
        org.joda.time.DurationField durationField9 = gJChronology2.years();
        org.joda.time.DateTimeField dateTimeField10 = gJChronology2.weekyearOfCentury();
        org.joda.time.DurationField durationField11 = gJChronology2.eras();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField11, durationField4, and durationField9", !(durationField11.compareTo(durationField4) == 0) || (Math.signum(durationField11.compareTo(durationField9)) == Math.signum(durationField4.compareTo(durationField9))));
    }

    @Test
    public void test1991() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1991");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        boolean boolean2 = instant1.isEqualNow();
        org.joda.time.ReadableDuration readableDuration3 = null;
        org.joda.time.Instant instant4 = instant1.plus(readableDuration3);
        long long5 = instant1.getMillis();
        java.lang.Object obj6 = null;
        boolean boolean7 = instant1.equals(obj6);
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.Instant instant10 = instant1.withDurationAdded(readableDuration8, 70);
        java.util.TimeZone timeZone11 = null;
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forTimeZone(timeZone11);
        org.joda.time.chrono.GJChronology gJChronology13 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone12);
        org.joda.time.DurationField durationField14 = gJChronology13.halfdays();
        long long18 = gJChronology13.add((long) 'a', (-1L), (int) (short) 0);
        boolean boolean20 = gJChronology13.equals((java.lang.Object) 0);
        org.joda.time.DateTimeField dateTimeField21 = gJChronology13.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField22 = gJChronology13.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField23 = gJChronology13.clockhourOfDay();
        long long28 = gJChronology13.getDateTimeMillis(10, (int) (short) 10, 4, (int) (byte) 1);
        org.joda.time.Instant instant29 = gJChronology13.getGregorianCutover();
        boolean boolean30 = instant1.isEqual((org.joda.time.ReadableInstant) instant29);
        org.joda.time.ReadableDuration readableDuration31 = null;
        org.joda.time.Instant instant32 = instant1.minus(readableDuration31);
        java.util.TimeZone timeZone33 = null;
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.forTimeZone(timeZone33);
        org.joda.time.chrono.GJChronology gJChronology35 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone34);
        org.joda.time.DurationField durationField36 = gJChronology35.halfdays();
        long long40 = gJChronology35.add((long) 'a', (-1L), (int) (short) 0);
        org.joda.time.DateTimeField dateTimeField41 = gJChronology35.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField42 = gJChronology35.secondOfMinute();
        org.joda.time.Instant instant44 = new org.joda.time.Instant(52L);
        boolean boolean45 = instant44.isEqualNow();
        org.joda.time.ReadableDuration readableDuration46 = null;
        org.joda.time.Instant instant47 = instant44.plus(readableDuration46);
        boolean boolean48 = gJChronology35.equals((java.lang.Object) instant44);
        org.joda.time.DateTimeFieldType dateTimeFieldType49 = null;
        boolean boolean50 = instant44.isSupported(dateTimeFieldType49);
        org.joda.time.DateTimeFieldType dateTimeFieldType51 = null;
        boolean boolean52 = instant44.isSupported(dateTimeFieldType51);
        org.joda.time.DateTimeZone dateTimeZone53 = instant44.getZone();
        long long54 = instant44.getMillis();
        org.joda.time.Instant instant55 = instant44.toInstant();
        org.joda.time.DateTimeZone dateTimeZone57 = org.joda.time.DateTimeZone.forID("+00:01:58.277");
        int int59 = dateTimeZone57.getStandardOffset((long) 1155627);
        org.joda.time.MutableDateTime mutableDateTime60 = instant55.toMutableDateTime(dateTimeZone57);
        boolean boolean61 = instant1.isEqual((org.joda.time.ReadableInstant) mutableDateTime60);
        org.joda.time.Instant instant62 = mutableDateTime60.toInstant();
        boolean boolean64 = instant62.isEqual((long) (short) -1);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and mutableDateTime60", (instant1.compareTo(mutableDateTime60) == 0) == instant1.equals(mutableDateTime60));
    }

    @Test
    public void test1992() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1992");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        java.util.Locale locale4 = new java.util.Locale("hi!");
        java.lang.String str5 = locale4.getCountry();
        java.util.Locale locale6 = java.util.Locale.getDefault();
        java.lang.String str7 = locale6.getDisplayName();
        java.lang.String str8 = locale4.getDisplayScript(locale6);
        boolean boolean9 = dateTimeZone1.equals((java.lang.Object) locale6);
        int int11 = dateTimeZone1.getOffsetFromLocal((long) (short) 10);
        java.util.TimeZone timeZone12 = null;
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forTimeZone(timeZone12);
        org.joda.time.chrono.GJChronology gJChronology14 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone13);
        org.joda.time.DateTimeField dateTimeField15 = gJChronology14.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField16 = gJChronology14.weekyearOfCentury();
        org.joda.time.Instant instant17 = gJChronology14.getGregorianCutover();
        org.joda.time.Instant instant19 = instant17.withMillis(0L);
        org.joda.time.Instant instant21 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone22 = null;
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        org.joda.time.chrono.GJChronology gJChronology24 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone23);
        org.joda.time.DateTimeField dateTimeField25 = gJChronology24.millisOfSecond();
        int int26 = instant21.get(dateTimeField25);
        org.joda.time.Instant instant28 = instant21.plus(0L);
        int int29 = instant19.compareTo((org.joda.time.ReadableInstant) instant28);
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = null;
        boolean boolean31 = instant28.isSupported(dateTimeFieldType30);
        int int32 = dateTimeZone1.getOffset((org.joda.time.ReadableInstant) instant28);
        boolean boolean34 = instant28.isAfter(1000L);
        org.joda.time.MutableDateTime mutableDateTime35 = instant28.toMutableDateTimeISO();
        java.util.TimeZone timeZone36 = null;
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.forTimeZone(timeZone36);
        org.joda.time.chrono.GJChronology gJChronology38 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone37);
        org.joda.time.DurationField durationField39 = gJChronology38.halfdays();
        long long43 = gJChronology38.add((long) 'a', (-1L), (int) (short) 0);
        boolean boolean45 = gJChronology38.equals((java.lang.Object) 0);
        org.joda.time.DateTimeField dateTimeField46 = gJChronology38.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField47 = gJChronology38.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField48 = gJChronology38.clockhourOfDay();
        long long53 = gJChronology38.getDateTimeMillis(10, (int) (short) 10, 4, (int) (byte) 1);
        org.joda.time.DateTimeField dateTimeField54 = gJChronology38.millisOfDay();
        java.lang.String str55 = gJChronology38.toString();
        org.joda.time.DateTimeField dateTimeField56 = gJChronology38.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField57 = gJChronology38.minuteOfDay();
        org.joda.time.DurationField durationField58 = gJChronology38.seconds();
        java.util.TimeZone timeZone59 = null;
        org.joda.time.DateTimeZone dateTimeZone60 = org.joda.time.DateTimeZone.forTimeZone(timeZone59);
        org.joda.time.chrono.GJChronology gJChronology61 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone60);
        org.joda.time.DateTimeField dateTimeField62 = gJChronology61.millisOfSecond();
        org.joda.time.DurationField durationField63 = gJChronology61.millis();
        org.joda.time.DateTimeZone dateTimeZone64 = gJChronology61.getZone();
        long long66 = dateTimeZone64.nextTransition(4320000000L);
        boolean boolean68 = dateTimeZone64.isStandardOffset(3155760001170L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone64);
        org.joda.time.Chronology chronology70 = gJChronology38.withZone(dateTimeZone64);
        org.joda.time.MutableDateTime mutableDateTime71 = instant28.toMutableDateTime(dateTimeZone64);
        long long75 = dateTimeZone64.convertLocalToUTC(1451606400000L, false, 26265600100L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant21 and mutableDateTime35", (instant21.compareTo(mutableDateTime35) == 0) == instant21.equals(mutableDateTime35));
    }

    @Test
    public void test1993() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1993");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField3 = gJChronology2.halfdays();
        long long7 = gJChronology2.add((long) 'a', (-1L), (int) (short) 0);
        boolean boolean9 = gJChronology2.equals((java.lang.Object) 0);
        org.joda.time.DateTimeField dateTimeField10 = gJChronology2.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField11 = gJChronology2.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField12 = gJChronology2.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField13 = gJChronology2.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField14 = gJChronology2.secondOfMinute();
        java.util.TimeZone timeZone15 = null;
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forTimeZone(timeZone15);
        java.lang.String str18 = dateTimeZone16.getNameKey((long) 100);
        boolean boolean19 = dateTimeZone16.isFixed();
        long long22 = dateTimeZone16.adjustOffset((long) (short) 10, true);
        int int24 = dateTimeZone16.getOffset(1L);
        org.joda.time.Chronology chronology25 = gJChronology2.withZone(dateTimeZone16);
        org.joda.time.Instant instant26 = gJChronology2.getGregorianCutover();
        java.util.TimeZone timeZone27 = null;
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forTimeZone(timeZone27);
        int int30 = dateTimeZone28.getOffsetFromLocal((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(0, (int) (short) 10);
        long long35 = dateTimeZone28.getMillisKeepLocal(dateTimeZone33, (-61827926399999L));
        boolean boolean36 = dateTimeZone28.isFixed();
        java.lang.String str38 = dateTimeZone28.getNameKey(10412712236785L);
        org.joda.time.DateTime dateTime39 = instant26.toDateTime(dateTimeZone28);
        org.joda.time.Instant instant40 = instant26.toInstant();
        org.joda.time.Instant instant41 = instant40.toInstant();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant41 and dateTime39", (instant41.compareTo(dateTime39) == 0) == instant41.equals(dateTime39));
    }

    @Test
    public void test1994() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1994");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        org.joda.time.Instant instant3 = instant1.withMillis((long) 'u');
        java.util.TimeZone timeZone4 = null;
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forTimeZone(timeZone4);
        org.joda.time.chrono.GJChronology gJChronology6 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone5);
        org.joda.time.DurationField durationField7 = gJChronology6.halfdays();
        long long11 = gJChronology6.add((long) 'a', (-1L), (int) (short) 0);
        boolean boolean13 = gJChronology6.equals((java.lang.Object) 0);
        org.joda.time.DateTimeField dateTimeField14 = gJChronology6.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology6.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField16 = gJChronology6.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField17 = gJChronology6.clockhourOfHalfday();
        org.joda.time.DateTime dateTime18 = instant1.toDateTime((org.joda.time.Chronology) gJChronology6);
        java.util.TimeZone timeZone19 = null;
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forTimeZone(timeZone19);
        org.joda.time.chrono.GJChronology gJChronology21 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone20);
        org.joda.time.DurationField durationField22 = gJChronology21.halfdays();
        java.util.TimeZone timeZone23 = null;
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forTimeZone(timeZone23);
        org.joda.time.chrono.GJChronology gJChronology25 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone24);
        long long29 = dateTimeZone24.convertLocalToUTC((long) (byte) -1, true, 0L);
        boolean boolean31 = dateTimeZone24.equals((java.lang.Object) true);
        org.joda.time.Chronology chronology32 = gJChronology21.withZone(dateTimeZone24);
        java.lang.String str33 = dateTimeZone24.toString();
        org.joda.time.Chronology chronology34 = gJChronology6.withZone(dateTimeZone24);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and dateTime18", (instant1.compareTo(dateTime18) == 0) == instant1.equals(dateTime18));
    }

    @Test
    public void test1995() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1995");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        boolean boolean2 = instant1.isEqualNow();
        org.joda.time.ReadableDuration readableDuration3 = null;
        org.joda.time.Instant instant4 = instant1.plus(readableDuration3);
        long long5 = instant1.getMillis();
        java.lang.String str6 = instant1.toString();
        org.joda.time.Instant instant7 = instant1.toInstant();
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.Instant instant10 = instant1.withDurationAdded(readableDuration8, (int) 'x');
        java.util.TimeZone timeZone11 = null;
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forTimeZone(timeZone11);
        java.lang.String str14 = dateTimeZone12.getNameKey((long) 100);
        boolean boolean15 = dateTimeZone12.isFixed();
        org.joda.time.chrono.GJChronology gJChronology16 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone12);
        java.lang.String str17 = dateTimeZone12.toString();
        org.joda.time.DateTime dateTime18 = instant10.toDateTime(dateTimeZone12);
        java.util.TimeZone timeZone19 = null;
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forTimeZone(timeZone19);
        java.lang.String str22 = dateTimeZone20.getNameKey((long) 100);
        boolean boolean23 = dateTimeZone20.isFixed();
        org.joda.time.chrono.GJChronology gJChronology24 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone20);
        int int25 = gJChronology24.getMinimumDaysInFirstWeek();
        java.lang.String str26 = gJChronology24.toString();
        org.joda.time.DateTimeField dateTimeField27 = gJChronology24.yearOfEra();
        org.joda.time.DateTimeField dateTimeField28 = gJChronology24.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField29 = gJChronology24.dayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology31 = gJChronology24.withZone(dateTimeZone30);
        org.joda.time.DateTimeField dateTimeField32 = chronology31.millisOfSecond();
        java.util.TimeZone timeZone33 = null;
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.forTimeZone(timeZone33);
        org.joda.time.chrono.GJChronology gJChronology35 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone34);
        int int37 = dateTimeZone34.getOffsetFromLocal((long) (-1));
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.forOffsetHours((int) '4');
        long long41 = dateTimeZone34.getMillisKeepLocal(dateTimeZone39, (-8380800000L));
        org.joda.time.Chronology chronology42 = chronology31.withZone(dateTimeZone34);
        boolean boolean44 = dateTimeZone34.isStandardOffset(3600000L);
        org.joda.time.Instant instant46 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone47 = null;
        org.joda.time.DateTimeZone dateTimeZone48 = org.joda.time.DateTimeZone.forTimeZone(timeZone47);
        org.joda.time.chrono.GJChronology gJChronology49 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone48);
        org.joda.time.DateTimeField dateTimeField50 = gJChronology49.millisOfSecond();
        int int51 = instant46.get(dateTimeField50);
        java.util.TimeZone timeZone52 = null;
        org.joda.time.DateTimeZone dateTimeZone53 = org.joda.time.DateTimeZone.forTimeZone(timeZone52);
        org.joda.time.chrono.GJChronology gJChronology54 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone53);
        org.joda.time.DurationField durationField55 = gJChronology54.halfdays();
        java.util.TimeZone timeZone56 = null;
        org.joda.time.DateTimeZone dateTimeZone57 = org.joda.time.DateTimeZone.forTimeZone(timeZone56);
        org.joda.time.chrono.GJChronology gJChronology58 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone57);
        long long62 = dateTimeZone57.convertLocalToUTC((long) (byte) -1, true, 0L);
        boolean boolean64 = dateTimeZone57.equals((java.lang.Object) true);
        org.joda.time.Chronology chronology65 = gJChronology54.withZone(dateTimeZone57);
        org.joda.time.MutableDateTime mutableDateTime66 = instant46.toMutableDateTime(dateTimeZone57);
        int int67 = dateTimeZone34.getOffset((org.joda.time.ReadableInstant) instant46);
        java.util.TimeZone timeZone68 = null;
        org.joda.time.DateTimeZone dateTimeZone69 = org.joda.time.DateTimeZone.forTimeZone(timeZone68);
        org.joda.time.chrono.GJChronology gJChronology70 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone69);
        long long74 = dateTimeZone69.convertLocalToUTC((long) (byte) -1, true, 0L);
        boolean boolean76 = dateTimeZone69.equals((java.lang.Object) true);
        java.util.TimeZone timeZone77 = dateTimeZone69.toTimeZone();
        org.joda.time.ReadableInstant readableInstant78 = null;
        int int79 = dateTimeZone69.getOffset(readableInstant78);
        org.joda.time.DateTime dateTime80 = instant46.toDateTime(dateTimeZone69);
        boolean boolean81 = instant10.equals((java.lang.Object) dateTime80);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant10 and dateTime18", (instant10.compareTo(dateTime18) == 0) == instant10.equals(dateTime18));
    }

    @Test
    public void test1996() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1996");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        boolean boolean2 = instant1.isEqualNow();
        org.joda.time.ReadableDuration readableDuration3 = null;
        org.joda.time.Instant instant4 = instant1.plus(readableDuration3);
        long long5 = instant1.getMillis();
        java.lang.String str6 = instant1.toString();
        org.joda.time.Instant instant7 = instant1.toInstant();
        org.joda.time.DateTime dateTime8 = instant1.toDateTime();
        org.joda.time.ReadableInstant readableInstant9 = null;
        boolean boolean10 = dateTime8.isBefore(readableInstant9);
        boolean boolean12 = dateTime8.isEqual(0L);
        org.joda.time.Instant instant13 = new org.joda.time.Instant();
        org.joda.time.Instant instant15 = new org.joda.time.Instant(52L);
        boolean boolean16 = instant15.isEqualNow();
        org.joda.time.ReadableDuration readableDuration17 = null;
        org.joda.time.Instant instant18 = instant15.plus(readableDuration17);
        long long19 = instant15.getMillis();
        java.lang.String str20 = instant15.toString();
        org.joda.time.Instant instant21 = instant15.toInstant();
        org.joda.time.ReadableDuration readableDuration22 = null;
        org.joda.time.Instant instant24 = instant15.withDurationAdded(readableDuration22, (int) 'x');
        org.joda.time.DateTimeZone dateTimeZone25 = instant15.getZone();
        org.joda.time.Instant instant27 = new org.joda.time.Instant(52L);
        boolean boolean28 = instant27.isEqualNow();
        java.lang.String str29 = instant27.toString();
        java.util.TimeZone timeZone30 = null;
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forTimeZone(timeZone30);
        org.joda.time.chrono.GJChronology gJChronology32 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone31);
        java.util.Locale locale34 = new java.util.Locale("hi!");
        java.lang.String str35 = locale34.getCountry();
        java.util.Locale locale36 = java.util.Locale.getDefault();
        java.lang.String str37 = locale36.getDisplayName();
        java.lang.String str38 = locale34.getDisplayScript(locale36);
        boolean boolean39 = dateTimeZone31.equals((java.lang.Object) locale36);
        int int41 = dateTimeZone31.getOffsetFromLocal((long) (short) 10);
        java.util.TimeZone timeZone42 = null;
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.forTimeZone(timeZone42);
        org.joda.time.chrono.GJChronology gJChronology44 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone43);
        org.joda.time.DateTimeField dateTimeField45 = gJChronology44.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField46 = gJChronology44.weekyearOfCentury();
        org.joda.time.Instant instant47 = gJChronology44.getGregorianCutover();
        org.joda.time.Instant instant49 = instant47.withMillis(0L);
        org.joda.time.Instant instant51 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone52 = null;
        org.joda.time.DateTimeZone dateTimeZone53 = org.joda.time.DateTimeZone.forTimeZone(timeZone52);
        org.joda.time.chrono.GJChronology gJChronology54 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone53);
        org.joda.time.DateTimeField dateTimeField55 = gJChronology54.millisOfSecond();
        int int56 = instant51.get(dateTimeField55);
        org.joda.time.Instant instant58 = instant51.plus(0L);
        int int59 = instant49.compareTo((org.joda.time.ReadableInstant) instant58);
        org.joda.time.DateTimeFieldType dateTimeFieldType60 = null;
        boolean boolean61 = instant58.isSupported(dateTimeFieldType60);
        int int62 = dateTimeZone31.getOffset((org.joda.time.ReadableInstant) instant58);
        boolean boolean63 = instant27.isAfter((org.joda.time.ReadableInstant) instant58);
        org.joda.time.Instant instant65 = instant58.withMillis((long) 10);
        boolean boolean66 = instant15.isEqual((org.joda.time.ReadableInstant) instant65);
        org.joda.time.Chronology chronology67 = instant15.getChronology();
        boolean boolean68 = instant13.isBefore((org.joda.time.ReadableInstant) instant15);
        java.lang.String str69 = instant13.toString();
        org.joda.time.MutableDateTime mutableDateTime70 = instant13.toMutableDateTimeISO();
        int int71 = dateTime8.compareTo((org.joda.time.ReadableInstant) mutableDateTime70);
        org.joda.time.Instant instant73 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone74 = null;
        org.joda.time.DateTimeZone dateTimeZone75 = org.joda.time.DateTimeZone.forTimeZone(timeZone74);
        org.joda.time.chrono.GJChronology gJChronology76 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone75);
        org.joda.time.DateTimeField dateTimeField77 = gJChronology76.millisOfSecond();
        int int78 = instant73.get(dateTimeField77);
        boolean boolean79 = instant73.isEqualNow();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter80 = null;
        java.lang.String str81 = instant73.toString(dateTimeFormatter80);
        boolean boolean82 = instant73.isAfterNow();
        org.joda.time.Instant instant83 = instant73.toInstant();
        org.joda.time.DateTimeFieldType dateTimeFieldType84 = null;
        boolean boolean85 = instant73.isSupported(dateTimeFieldType84);
        int int86 = mutableDateTime70.compareTo((org.joda.time.ReadableInstant) instant73);
        java.lang.Object obj87 = null;
        boolean boolean88 = instant73.equals(obj87);
        org.joda.time.ReadableDuration readableDuration89 = null;
        org.joda.time.Instant instant91 = instant73.withDurationAdded(readableDuration89, 1959);
        long long92 = instant91.getMillis();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and dateTime8", (instant1.compareTo(dateTime8) == 0) == instant1.equals(dateTime8));
    }

    @Test
    public void test1997() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1997");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        boolean boolean2 = instant1.isEqualNow();
        java.lang.String str3 = instant1.toString();
        org.joda.time.Instant instant5 = new org.joda.time.Instant(52L);
        boolean boolean6 = instant5.isEqualNow();
        java.lang.String str7 = instant5.toString();
        java.lang.String str8 = instant5.toString();
        org.joda.time.Instant instant11 = instant5.withDurationAdded(115200000L, (int) (short) 1);
        int int12 = instant1.compareTo((org.joda.time.ReadableInstant) instant5);
        org.joda.time.Instant instant14 = new org.joda.time.Instant(52L);
        boolean boolean15 = instant14.isEqualNow();
        org.joda.time.ReadableDuration readableDuration16 = null;
        org.joda.time.Instant instant17 = instant14.plus(readableDuration16);
        boolean boolean19 = instant17.equals((java.lang.Object) ' ');
        boolean boolean20 = instant5.isAfter((org.joda.time.ReadableInstant) instant17);
        org.joda.time.ReadableDuration readableDuration21 = null;
        org.joda.time.Instant instant22 = instant17.plus(readableDuration21);
        org.joda.time.Instant instant24 = new org.joda.time.Instant(52L);
        boolean boolean25 = instant24.isEqualNow();
        org.joda.time.ReadableDuration readableDuration26 = null;
        org.joda.time.Instant instant27 = instant24.plus(readableDuration26);
        long long28 = instant24.getMillis();
        java.lang.String str29 = instant24.toString();
        org.joda.time.Instant instant30 = instant24.toInstant();
        org.joda.time.Instant instant32 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone33 = null;
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.forTimeZone(timeZone33);
        org.joda.time.chrono.GJChronology gJChronology35 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone34);
        org.joda.time.DateTimeField dateTimeField36 = gJChronology35.millisOfSecond();
        int int37 = instant32.get(dateTimeField36);
        org.joda.time.Chronology chronology38 = instant32.getChronology();
        boolean boolean39 = instant24.isBefore((org.joda.time.ReadableInstant) instant32);
        boolean boolean40 = instant17.isAfter((org.joda.time.ReadableInstant) instant32);
        java.util.TimeZone timeZone41 = null;
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.forTimeZone(timeZone41);
        org.joda.time.chrono.GJChronology gJChronology43 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone42);
        org.joda.time.DateTimeField dateTimeField44 = gJChronology43.millisOfSecond();
        org.joda.time.DurationField durationField45 = gJChronology43.millis();
        org.joda.time.DurationField durationField46 = gJChronology43.weeks();
        org.joda.time.DurationField durationField47 = gJChronology43.days();
        org.joda.time.DateTimeField dateTimeField48 = gJChronology43.yearOfCentury();
        org.joda.time.DurationField durationField49 = gJChronology43.weekyears();
        org.joda.time.DateTimeField dateTimeField50 = gJChronology43.yearOfCentury();
        org.joda.time.Chronology chronology51 = gJChronology43.withUTC();
        org.joda.time.DateTime dateTime52 = instant32.toDateTime(chronology51);
        org.joda.time.Instant instant53 = instant32.toInstant();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and dateTime52", (instant1.compareTo(dateTime52) == 0) == instant1.equals(dateTime52));
    }

    @Test
    public void test1998() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1998");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forTimeZone(timeZone2);
        org.joda.time.chrono.GJChronology gJChronology4 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone3);
        org.joda.time.DateTimeField dateTimeField5 = gJChronology4.millisOfSecond();
        int int6 = instant1.get(dateTimeField5);
        boolean boolean7 = instant1.isEqualNow();
        org.joda.time.tz.NameProvider nameProvider8 = org.joda.time.DateTimeZone.getNameProvider();
        org.joda.time.DateTimeZone.setNameProvider(nameProvider8);
        org.joda.time.DateTimeZone.setNameProvider(nameProvider8);
        boolean boolean11 = instant1.equals((java.lang.Object) nameProvider8);
        org.joda.time.Instant instant13 = instant1.minus(0L);
        java.util.TimeZone timeZone14 = null;
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forTimeZone(timeZone14);
        org.joda.time.chrono.GJChronology gJChronology16 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone15);
        org.joda.time.DurationField durationField17 = gJChronology16.halfdays();
        org.joda.time.DateTimeField dateTimeField18 = gJChronology16.millisOfDay();
        org.joda.time.DateTimeField dateTimeField19 = gJChronology16.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField20 = gJChronology16.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField21 = gJChronology16.dayOfWeek();
        org.joda.time.Chronology chronology22 = gJChronology16.withUTC();
        java.util.TimeZone timeZone23 = null;
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forTimeZone(timeZone23);
        org.joda.time.chrono.GJChronology gJChronology25 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone24);
        org.joda.time.DurationField durationField26 = gJChronology25.halfdays();
        org.joda.time.Chronology chronology27 = gJChronology25.withUTC();
        java.lang.String str28 = gJChronology25.toString();
        org.joda.time.DateTimeField dateTimeField29 = gJChronology25.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(1, 10);
        org.joda.time.Chronology chronology33 = gJChronology25.withZone(dateTimeZone32);
        long long35 = dateTimeZone32.convertUTCToLocal((-43829L));
        boolean boolean36 = dateTimeZone32.isFixed();
        long long38 = dateTimeZone32.previousTransition((long) 1869);
        org.joda.time.Chronology chronology39 = chronology22.withZone(dateTimeZone32);
        org.joda.time.MutableDateTime mutableDateTime40 = instant13.toMutableDateTime(chronology39);
        boolean boolean41 = instant13.isBeforeNow();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant13 and mutableDateTime40", (instant13.compareTo(mutableDateTime40) == 0) == instant13.equals(mutableDateTime40));
    }

    @Test
    public void test1999() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test1999");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField3 = gJChronology2.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.weekyearOfCentury();
        org.joda.time.Instant instant5 = gJChronology2.getGregorianCutover();
        org.joda.time.Instant instant7 = instant5.withMillis(0L);
        org.joda.time.Chronology chronology8 = instant5.getChronology();
        org.joda.time.Instant instant9 = instant5.toInstant();
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.Instant instant11 = instant5.plus(readableDuration10);
        org.joda.time.Instant instant14 = instant5.withDurationAdded(28800104L, 42);
        org.joda.time.DateTime dateTime15 = instant5.toDateTimeISO();
        org.joda.time.Chronology chronology16 = instant5.getChronology();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant5 and dateTime15", (instant5.compareTo(dateTime15) == 0) == instant5.equals(dateTime15));
    }

    @Test
    public void test2000() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest3.test2000");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str3 = dateTimeZone1.getNameKey((long) 100);
        boolean boolean4 = dateTimeZone1.isFixed();
        java.util.Locale locale8 = new java.util.Locale("DurationField[halfdays]", "\u82f1\u6587");
        java.lang.String str9 = dateTimeZone1.getName((long) (short) 10, locale8);
        org.joda.time.Instant instant11 = new org.joda.time.Instant(52L);
        java.util.TimeZone timeZone12 = null;
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forTimeZone(timeZone12);
        org.joda.time.chrono.GJChronology gJChronology14 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone13);
        org.joda.time.DateTimeField dateTimeField15 = gJChronology14.millisOfSecond();
        int int16 = instant11.get(dateTimeField15);
        org.joda.time.Chronology chronology17 = instant11.getChronology();
        org.joda.time.chrono.GJChronology gJChronology18 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1, (org.joda.time.ReadableInstant) instant11);
        org.joda.time.DateTime dateTime19 = instant11.toDateTime();
        org.joda.time.ReadableDuration readableDuration20 = null;
        org.joda.time.Instant instant22 = instant11.withDurationAdded(readableDuration20, (int) (short) 10);
        org.joda.time.Instant instant24 = instant22.minus(600097L);
        long long25 = instant22.getMillis();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant22 and dateTime19", (instant22.compareTo(dateTime19) == 0) == instant22.equals(dateTime19));
    }
}


import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest15 {

    public static boolean debug = false;

    @Test
    public void test07501() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07501");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.add((long) 'a');
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime0.yearOfCentury();
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period6 = duration5.toPeriod();
        org.joda.time.Duration duration8 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration11 = duration8.withDurationAdded((long) (short) 100, (int) ' ');
        org.joda.time.Duration duration12 = duration5.minus((org.joda.time.ReadableDuration) duration11);
        mutableDateTime0.add((org.joda.time.ReadableDuration) duration5);
        org.joda.time.MutableDateTime.Property property14 = mutableDateTime0.centuryOfEra();
        mutableDateTime0.addHours((int) (byte) 10);
        mutableDateTime0.addWeeks(20);
        org.joda.time.DateTimeField dateTimeField19 = mutableDateTime0.getRoundingField();
        int int20 = mutableDateTime0.getWeekyear();
        int int21 = mutableDateTime0.getDayOfWeek();
        mutableDateTime0.setSecondOfDay(616);
        org.joda.time.LocalDate localDate24 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property25 = localDate24.monthOfYear();
        org.joda.time.LocalDate localDate26 = property25.roundFloorCopy();
        org.joda.time.DateTime dateTime27 = localDate26.toDateTimeAtMidnight();
        java.lang.String str28 = localDate26.toString();
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime((long) 1);
        org.joda.time.MutableDateTime mutableDateTime31 = org.joda.time.MutableDateTime.now();
        mutableDateTime31.add((long) 'a');
        org.joda.time.MutableDateTime.Property property34 = mutableDateTime31.yearOfCentury();
        org.joda.time.Duration duration36 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period37 = duration36.toPeriod();
        org.joda.time.Duration duration39 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration42 = duration39.withDurationAdded((long) (short) 100, (int) ' ');
        org.joda.time.Duration duration43 = duration36.minus((org.joda.time.ReadableDuration) duration42);
        mutableDateTime31.add((org.joda.time.ReadableDuration) duration36);
        org.joda.time.MutableDateTime.Property property45 = mutableDateTime31.centuryOfEra();
        mutableDateTime31.addYears(0);
        mutableDateTime31.setMinuteOfDay((int) (short) 0);
        org.joda.time.Instant instant50 = new org.joda.time.Instant();
        org.joda.time.Instant instant52 = instant50.withMillis(0L);
        org.joda.time.Duration duration54 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period55 = duration54.toPeriod();
        org.joda.time.Duration duration58 = duration54.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Instant instant59 = instant52.plus((org.joda.time.ReadableDuration) duration58);
        long long60 = instant59.getMillis();
        org.joda.time.Duration duration61 = new org.joda.time.Duration((org.joda.time.ReadableInstant) mutableDateTime31, (org.joda.time.ReadableInstant) instant59);
        org.joda.time.MutableDateTime mutableDateTime62 = instant59.toMutableDateTime();
        boolean boolean63 = dateTime30.equals((java.lang.Object) mutableDateTime62);
        org.joda.time.DateTime dateTime64 = localDate26.toDateTime((org.joda.time.ReadableInstant) mutableDateTime62);
        org.joda.time.DateTimeFieldType dateTimeFieldType65 = org.joda.time.DateTimeFieldType.dayOfYear();
        mutableDateTime62.set(dateTimeFieldType65, (int) (short) 10);
        boolean boolean68 = mutableDateTime0.isSupported(dateTimeFieldType65);
        org.joda.time.DateTime dateTime69 = mutableDateTime0.toDateTimeISO();
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNull(dateTimeField19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2022 + "'", int20 == 2022);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 3 + "'", int21 == 3);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "2022-02-01" + "'", str28, "2022-02-01");
        org.junit.Assert.assertNotNull(mutableDateTime31);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertNotNull(period37);
        org.junit.Assert.assertNotNull(duration39);
        org.junit.Assert.assertNotNull(duration42);
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(instant52);
        org.junit.Assert.assertNotNull(duration54);
        org.junit.Assert.assertNotNull(period55);
        org.junit.Assert.assertNotNull(duration58);
        org.junit.Assert.assertNotNull(instant59);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 86400000L + "'", long60 == 86400000L);
        org.junit.Assert.assertNotNull(mutableDateTime62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(dateTimeFieldType65);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(dateTime69);
    }

    @Test
    public void test07502() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07502");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property1 = mutableDateTime0.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime3 = property1.set(45);
        org.joda.time.MutableDateTime mutableDateTime4 = property1.roundFloor();
        org.joda.time.MutableDateTime mutableDateTime6 = property1.add(45);
        java.lang.String str7 = mutableDateTime6.toString();
        org.joda.time.MutableDateTime mutableDateTime8 = org.joda.time.MutableDateTime.now();
        mutableDateTime8.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime11 = mutableDateTime8.copy();
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.Period period14 = new org.joda.time.Period(readableDuration12, readableInstant13);
        org.joda.time.Period period16 = period14.withDays((int) (byte) 1);
        org.joda.time.Period period18 = period14.minusMillis(1424);
        mutableDateTime8.add((org.joda.time.ReadablePeriod) period14);
        mutableDateTime6.add((org.joda.time.ReadablePeriod) period14);
        org.joda.time.MutableDateTime.Property property21 = mutableDateTime6.year();
        org.joda.time.MutableDateTime mutableDateTime22 = property21.roundCeiling();
        boolean boolean24 = mutableDateTime22.equals((java.lang.Object) 1973);
        org.joda.time.MutableDateTime.Property property25 = mutableDateTime22.centuryOfEra();
        org.joda.time.MutableDateTime.Property property26 = mutableDateTime22.dayOfMonth();
        boolean boolean28 = mutableDateTime22.isEqual((long) 436);
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(mutableDateTime3);
        org.junit.Assert.assertNotNull(mutableDateTime4);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "9000-01-01T00:00:00.000Z" + "'", str7, "9000-01-01T00:00:00.000Z");
        org.junit.Assert.assertNotNull(mutableDateTime8);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(mutableDateTime22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test07503() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07503");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property1 = mutableDateTime0.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime2 = property1.getMutableDateTime();
        org.joda.time.DateTimeField dateTimeField3 = property1.getField();
        int int4 = property1.getLeapAmount();
        org.joda.time.MutableDateTime mutableDateTime6 = property1.add((int) (byte) 1);
        mutableDateTime6.addDays(22623598);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime6.setDayOfWeek(0);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 0 for dayOfWeek must be in the range [1,7]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(mutableDateTime2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(mutableDateTime6);
    }

    @Test
    public void test07504() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07504");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.dayOfMonth();
        boolean boolean2 = localDate0.isSupported(dateTimeFieldType1);
        org.joda.time.LocalDate.Property property3 = localDate0.yearOfEra();
        org.joda.time.Instant instant4 = new org.joda.time.Instant();
        org.joda.time.Instant instant6 = instant4.withMillis(0L);
        org.joda.time.Duration duration8 = org.joda.time.Duration.standardDays((long) (byte) 1);
        java.lang.String str9 = duration8.toString();
        org.joda.time.Instant instant10 = instant4.minus((org.joda.time.ReadableDuration) duration8);
        int int11 = property3.getDifference((org.joda.time.ReadableInstant) instant4);
        org.joda.time.Duration duration14 = new org.joda.time.Duration((long) (short) -1, (long) (-292275054));
        org.joda.time.Instant instant15 = instant4.plus((org.joda.time.ReadableDuration) duration14);
        org.joda.time.Duration duration17 = org.joda.time.Duration.standardDays((long) (byte) 1);
        java.lang.String str18 = duration17.toString();
        org.joda.time.Duration duration20 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Hours hours21 = duration20.toStandardHours();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime(chronology22);
        int int24 = dateTime23.getSecondOfMinute();
        org.joda.time.MutablePeriod mutablePeriod25 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration20, (org.joda.time.ReadableInstant) dateTime23);
        org.joda.time.Duration duration26 = duration17.plus((org.joda.time.ReadableDuration) duration20);
        org.joda.time.Duration duration28 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period29 = duration28.toPeriod();
        org.joda.time.Duration duration31 = duration28.minus((long) 292278993);
        org.joda.time.MutableDateTime mutableDateTime32 = org.joda.time.MutableDateTime.now();
        mutableDateTime32.add((long) 'a');
        org.joda.time.MutableDateTime.Property property35 = mutableDateTime32.yearOfCentury();
        org.joda.time.Duration duration37 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period38 = duration37.toPeriod();
        org.joda.time.Duration duration40 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration43 = duration40.withDurationAdded((long) (short) 100, (int) ' ');
        org.joda.time.Duration duration44 = duration37.minus((org.joda.time.ReadableDuration) duration43);
        mutableDateTime32.add((org.joda.time.ReadableDuration) duration37);
        boolean boolean46 = duration31.isShorterThan((org.joda.time.ReadableDuration) duration37);
        boolean boolean47 = duration20.isLongerThan((org.joda.time.ReadableDuration) duration31);
        org.joda.time.Instant instant48 = instant15.minus((org.joda.time.ReadableDuration) duration31);
        org.joda.time.DateTime dateTime49 = instant48.toDateTimeISO();
        boolean boolean51 = instant48.isBefore(1645514335364L);
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(instant6);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "PT86400S" + "'", str9, "PT86400S");
        org.junit.Assert.assertNotNull(instant10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(instant15);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "PT86400S" + "'", str18, "PT86400S");
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(hours21);
// flaky:         org.junit.Assert.assertTrue("'" + int24 + "' != '" + 44 + "'", int24 == 44);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertNotNull(mutableDateTime32);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertNotNull(period38);
        org.junit.Assert.assertNotNull(duration40);
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertNotNull(duration44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(instant48);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
    }

    @Test
    public void test07505() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07505");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.add((long) 'a');
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime0.yearOfCentury();
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period6 = duration5.toPeriod();
        org.joda.time.Duration duration8 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration11 = duration8.withDurationAdded((long) (short) 100, (int) ' ');
        org.joda.time.Duration duration12 = duration5.minus((org.joda.time.ReadableDuration) duration11);
        mutableDateTime0.add((org.joda.time.ReadableDuration) duration5);
        org.joda.time.MutableDateTime.Property property14 = mutableDateTime0.centuryOfEra();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime(chronology15);
        int int17 = dateTime16.getYearOfCentury();
        org.joda.time.DateTime dateTime19 = dateTime16.withSecondOfMinute(53);
        org.joda.time.Duration duration21 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period22 = duration21.toPeriod();
        org.joda.time.Duration duration24 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration27 = duration24.withDurationAdded((long) (short) 100, (int) ' ');
        org.joda.time.Duration duration28 = duration21.minus((org.joda.time.ReadableDuration) duration27);
        org.joda.time.ReadableInstant readableInstant29 = null;
        org.joda.time.ReadableInstant readableInstant30 = null;
        org.joda.time.PeriodType periodType31 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod32 = new org.joda.time.MutablePeriod(readableInstant29, readableInstant30, periodType31);
        org.joda.time.DurationFieldType durationFieldType34 = periodType31.getFieldType((int) (short) 0);
        java.lang.String str35 = periodType31.toString();
        org.joda.time.Period period36 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime16, (org.joda.time.ReadableDuration) duration21, periodType31);
        mutableDateTime0.add((org.joda.time.ReadableDuration) duration21);
        mutableDateTime0.addYears(26157);
        int int40 = mutableDateTime0.getMonthOfYear();
        org.joda.time.MutableDateTime.Property property41 = mutableDateTime0.dayOfWeek();
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 22 + "'", int17 == 22);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(periodType31);
        org.junit.Assert.assertNotNull(durationFieldType34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "PeriodType[YearDayTime]" + "'", str35, "PeriodType[YearDayTime]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 2 + "'", int40 == 2);
        org.junit.Assert.assertNotNull(property41);
    }

    @Test
    public void test07506() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07506");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property1 = mutableDateTime0.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime3 = property1.set(45);
        org.joda.time.MutableDateTime mutableDateTime4 = property1.roundFloor();
        org.joda.time.MutableDateTime mutableDateTime6 = property1.add(45);
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.UTC;
        java.util.TimeZone timeZone8 = dateTimeZone7.toTimeZone();
        long long10 = dateTimeZone7.previousTransition(100L);
        int int12 = dateTimeZone7.getStandardOffset(86403200L);
        org.joda.time.DateTime dateTime13 = mutableDateTime6.toDateTime(dateTimeZone7);
        org.joda.time.LocalDateTime localDateTime14 = org.joda.time.LocalDateTime.now(dateTimeZone7);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.plusYears(5);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.withYearOfEra(99);
        int int19 = localDateTime16.getEra();
        org.joda.time.LocalDateTime localDateTime20 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime22 = localDateTime20.withHourOfDay(10);
        org.joda.time.LocalDateTime.Property property23 = localDateTime20.hourOfDay();
        org.joda.time.LocalDateTime localDateTime25 = localDateTime20.plusMillis((int) (byte) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = org.joda.time.DateTimeFieldType.clockhourOfDay();
        java.lang.String str27 = dateTimeFieldType26.getName();
        int int28 = localDateTime20.indexOf(dateTimeFieldType26);
        java.lang.String str29 = dateTimeFieldType26.getName();
        java.lang.String str30 = dateTimeFieldType26.getName();
        boolean boolean31 = localDateTime16.isSupported(dateTimeFieldType26);
        int int32 = localDateTime16.getDayOfWeek();
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = null;
        boolean boolean34 = localDateTime16.isSupported(dateTimeFieldType33);
        int int35 = localDateTime16.getCenturyOfEra();
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(mutableDateTime3);
        org.junit.Assert.assertNotNull(mutableDateTime4);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(timeZone8);
// flaky:         org.junit.Assert.assertEquals(timeZone8.getDisplayName(), "\u5354\u8abf\u4e16\u754c\u6642\u9593");
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 100L + "'", long10 == 100L);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(dateTimeFieldType26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "clockhourOfDay" + "'", str27, "clockhourOfDay");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "clockhourOfDay" + "'", str29, "clockhourOfDay");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "clockhourOfDay" + "'", str30, "clockhourOfDay");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 20 + "'", int35 == 20);
    }

    @Test
    public void test07507() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07507");
        org.joda.time.PeriodType periodType1 = org.joda.time.PeriodType.weeks();
        java.util.Locale.LanguageRange[] languageRangeArray2 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList3 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList3, languageRangeArray2);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap5 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList6 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList3, strMap5);
        org.joda.time.Chronology chronology8 = null;
        java.util.Locale locale9 = java.util.Locale.GERMAN;
        java.util.Locale locale10 = java.util.Locale.CANADA;
        java.lang.String str11 = locale9.getDisplayVariant(locale10);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket12 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology8, locale10);
        java.util.Locale locale13 = java.util.Locale.GERMAN;
        java.util.Locale locale14 = java.util.Locale.CANADA;
        java.lang.String str15 = locale13.getDisplayVariant(locale14);
        java.util.Locale locale16 = java.util.Locale.GERMAN;
        java.util.Locale locale17 = java.util.Locale.CANADA;
        java.lang.String str18 = locale16.getDisplayVariant(locale17);
        java.lang.String str19 = locale16.getISO3Language();
        java.util.Locale locale20 = java.util.Locale.GERMAN;
        java.util.Locale locale21 = java.util.Locale.CANADA;
        java.lang.String str22 = locale20.getDisplayVariant(locale21);
        java.util.Locale locale23 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Locale locale24 = java.util.Locale.GERMAN;
        java.lang.String str25 = locale24.getDisplayName();
        java.util.Locale locale26 = java.util.Locale.CANADA;
        org.joda.time.Chronology chronology28 = null;
        java.util.Locale locale29 = java.util.Locale.GERMAN;
        java.util.Locale locale30 = java.util.Locale.CANADA;
        java.lang.String str31 = locale29.getDisplayVariant(locale30);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket33 = new org.joda.time.format.DateTimeParserBucket((long) (-1), chronology28, locale30, (java.lang.Integer) 10);
        java.util.Locale locale34 = java.util.Locale.GERMAN;
        java.lang.String str35 = locale34.getDisplayName();
        java.util.Locale locale36 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Locale locale37 = java.util.Locale.UK;
        java.util.Locale[] localeArray38 = new java.util.Locale[] { locale10, locale14, locale16, locale20, locale23, locale24, locale26, locale30, locale34, locale36, locale37 };
        java.util.ArrayList<java.util.Locale> localeList39 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList39, localeArray38);
        java.util.Locale.FilteringMode filteringMode41 = java.util.Locale.FilteringMode.AUTOSELECT_FILTERING;
        java.util.List<java.util.Locale> localeList42 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList3, (java.util.Collection<java.util.Locale>) localeList39, filteringMode41);
        java.lang.String[] strArray51 = new java.lang.String[] { "clockhourOfDay", "2022-02-22T10:15:45.103", "1970", "English", "2022-02-22T10:15:44.882", "DateTimeField[year]", "53", "deu" };
        java.util.ArrayList<java.lang.String> strList52 = new java.util.ArrayList<java.lang.String>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList52, strArray51);
        java.util.Locale.FilteringMode filteringMode54 = java.util.Locale.FilteringMode.EXTENDED_FILTERING;
        java.util.List<java.lang.String> strList55 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList3, (java.util.Collection<java.lang.String>) strList52, filteringMode54);
        boolean boolean56 = periodType1.equals((java.lang.Object) strList52);
        org.joda.time.PeriodType periodType57 = periodType1.withWeeksRemoved();
        org.joda.time.PeriodType periodType58 = periodType57.withWeeksRemoved();
        java.lang.String str59 = periodType58.getName();
        java.lang.String str60 = periodType58.getName();
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.DateTime dateTime62 = new org.joda.time.DateTime(chronology61);
        org.joda.time.DateTime dateTime64 = dateTime62.plusMinutes(15);
        org.joda.time.Chronology chronology65 = dateTime62.getChronology();
        org.joda.time.Instant instant66 = new org.joda.time.Instant();
        org.joda.time.Instant instant68 = instant66.withMillis(0L);
        org.joda.time.Chronology chronology69 = instant68.getChronology();
        org.joda.time.DurationField durationField70 = chronology69.eras();
        org.joda.time.LocalTime localTime71 = org.joda.time.LocalTime.now(chronology69);
        org.joda.time.DurationField durationField72 = chronology69.eras();
        org.joda.time.DateTimeField dateTimeField73 = chronology69.hourOfDay();
        org.joda.time.DateTime dateTime74 = dateTime62.withChronology(chronology69);
        org.joda.time.MutableDateTime mutableDateTime75 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property76 = mutableDateTime75.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime77 = property76.getMutableDateTime();
        boolean boolean78 = dateTime74.isBefore((org.joda.time.ReadableInstant) mutableDateTime77);
        org.joda.time.Instant instant79 = new org.joda.time.Instant();
        org.joda.time.Instant instant81 = instant79.withMillis(0L);
        org.joda.time.Chronology chronology82 = instant81.getChronology();
        org.joda.time.DurationField durationField83 = chronology82.eras();
        long long87 = chronology82.add(0L, (long) 2022, (int) '4');
        org.joda.time.DateTimeField dateTimeField88 = chronology82.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField89 = chronology82.minuteOfDay();
        mutableDateTime77.setChronology(chronology82);
        org.joda.time.MutablePeriod mutablePeriod91 = new org.joda.time.MutablePeriod((-51294L), periodType58, chronology82);
        org.joda.time.PeriodType periodType92 = periodType58.withDaysRemoved();
        org.junit.Assert.assertNotNull(periodType1);
        org.junit.Assert.assertNotNull(languageRangeArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(languageRangeList6);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "de");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "de");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "de");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "deu" + "'", str19, "deu");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "de");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "de");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "German" + "'", str25, "German");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "de");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "de");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "German" + "'", str35, "German");
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "en_GB");
        org.junit.Assert.assertNotNull(localeArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + filteringMode41 + "' != '" + java.util.Locale.FilteringMode.AUTOSELECT_FILTERING + "'", filteringMode41.equals(java.util.Locale.FilteringMode.AUTOSELECT_FILTERING));
        org.junit.Assert.assertNotNull(localeList42);
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + filteringMode54 + "' != '" + java.util.Locale.FilteringMode.EXTENDED_FILTERING + "'", filteringMode54.equals(java.util.Locale.FilteringMode.EXTENDED_FILTERING));
        org.junit.Assert.assertNotNull(strList55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(periodType57);
        org.junit.Assert.assertNotNull(periodType58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "WeeksNoWeeks" + "'", str59, "WeeksNoWeeks");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "WeeksNoWeeks" + "'", str60, "WeeksNoWeeks");
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(chronology65);
        org.junit.Assert.assertNotNull(instant68);
        org.junit.Assert.assertNotNull(chronology69);
        org.junit.Assert.assertNotNull(durationField70);
        org.junit.Assert.assertNotNull(localTime71);
        org.junit.Assert.assertNotNull(durationField72);
        org.junit.Assert.assertNotNull(dateTimeField73);
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertNotNull(mutableDateTime75);
        org.junit.Assert.assertNotNull(property76);
        org.junit.Assert.assertNotNull(mutableDateTime77);
// flaky:         org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(instant81);
        org.junit.Assert.assertNotNull(chronology82);
        org.junit.Assert.assertNotNull(durationField83);
        org.junit.Assert.assertTrue("'" + long87 + "' != '" + 105144L + "'", long87 == 105144L);
        org.junit.Assert.assertNotNull(dateTimeField88);
        org.junit.Assert.assertNotNull(dateTimeField89);
        org.junit.Assert.assertNotNull(periodType92);
    }

    @Test
    public void test07508() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07508");
        org.joda.time.Period period1 = org.joda.time.Period.years(19045);
        org.joda.time.DurationFieldType[] durationFieldTypeArray2 = period1.getFieldTypes();
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.PeriodType periodType5 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod6 = new org.joda.time.MutablePeriod(readableInstant3, readableInstant4, periodType5);
        mutablePeriod6.addDays((int) '4');
        org.joda.time.MutablePeriod mutablePeriod9 = mutablePeriod6.toMutablePeriod();
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property11 = localDate10.monthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.minuteOfDay();
        boolean boolean13 = localDate10.isSupported(dateTimeFieldType12);
        org.joda.time.DurationFieldType durationFieldType14 = dateTimeFieldType12.getRangeDurationType();
        int int15 = mutablePeriod6.indexOf(durationFieldType14);
        org.joda.time.Duration duration17 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period18 = duration17.toPeriod();
        org.joda.time.Duration duration20 = duration17.minus((long) 292278993);
        org.joda.time.MutableDateTime mutableDateTime21 = org.joda.time.MutableDateTime.now();
        mutableDateTime21.add((long) 'a');
        org.joda.time.MutableDateTime.Property property24 = mutableDateTime21.yearOfCentury();
        org.joda.time.Duration duration26 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period27 = duration26.toPeriod();
        org.joda.time.Duration duration29 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration32 = duration29.withDurationAdded((long) (short) 100, (int) ' ');
        org.joda.time.Duration duration33 = duration26.minus((org.joda.time.ReadableDuration) duration32);
        mutableDateTime21.add((org.joda.time.ReadableDuration) duration26);
        boolean boolean35 = duration20.isShorterThan((org.joda.time.ReadableDuration) duration26);
        org.joda.time.Duration duration37 = duration26.minus((long) (byte) 0);
        org.joda.time.MutableDateTime mutableDateTime38 = org.joda.time.MutableDateTime.now();
        mutableDateTime38.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime41 = mutableDateTime38.copy();
        mutableDateTime38.setDate((long) '#');
        org.joda.time.LocalDate localDate44 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property45 = localDate44.monthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType46 = org.joda.time.DateTimeFieldType.minuteOfDay();
        boolean boolean47 = localDate44.isSupported(dateTimeFieldType46);
        int int48 = localDate44.getDayOfYear();
        org.joda.time.DateTimeZone dateTimeZone49 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateMidnight dateMidnight50 = localDate44.toDateMidnight(dateTimeZone49);
        org.joda.time.DateTime dateTime51 = mutableDateTime38.toDateTime(dateTimeZone49);
        org.joda.time.MutablePeriod mutablePeriod52 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration37, (org.joda.time.ReadableInstant) mutableDateTime38);
        org.joda.time.MutablePeriod mutablePeriod53 = mutablePeriod52.copy();
        mutablePeriod53.clear();
        mutablePeriod53.setPeriod(21L, (long) '#');
        mutablePeriod6.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod53);
        org.joda.time.PeriodType periodType59 = mutablePeriod53.getPeriodType();
        org.joda.time.PeriodType periodType60 = periodType59.withMinutesRemoved();
        org.joda.time.Chronology chronology61 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutablePeriod mutablePeriod62 = new org.joda.time.MutablePeriod((java.lang.Object) durationFieldTypeArray2, periodType59, chronology61);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No period converter found for type: [Lorg.joda.time.DurationFieldType;");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(durationFieldTypeArray2);
        org.junit.Assert.assertNotNull(periodType5);
        org.junit.Assert.assertNotNull(mutablePeriod9);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(durationFieldType14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(mutableDateTime21);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertNotNull(mutableDateTime38);
        org.junit.Assert.assertNotNull(mutableDateTime41);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(dateTimeFieldType46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 53 + "'", int48 == 53);
        org.junit.Assert.assertNotNull(dateTimeZone49);
        org.junit.Assert.assertNotNull(dateMidnight50);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(mutablePeriod53);
        org.junit.Assert.assertNotNull(periodType59);
        org.junit.Assert.assertNotNull(periodType60);
    }

    @Test
    public void test07509() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07509");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime3 = mutableDateTime0.copy();
        org.joda.time.MutableDateTime.Property property4 = mutableDateTime0.weekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime5 = property4.roundHalfFloor();
        org.joda.time.MutableDateTime mutableDateTime7 = property4.add((long) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.UTC;
        java.util.TimeZone timeZone9 = dateTimeZone8.toTimeZone();
        org.joda.time.MutableDateTime mutableDateTime10 = mutableDateTime7.toMutableDateTime(dateTimeZone8);
        mutableDateTime10.add(51L);
        org.joda.time.MutableDateTime.Property property13 = mutableDateTime10.dayOfWeek();
        org.joda.time.MutableDateTime mutableDateTime15 = property13.add(4);
        org.joda.time.MutableDateTime mutableDateTime16 = property13.roundCeiling();
        org.joda.time.MutableDateTime mutableDateTime17 = property13.getMutableDateTime();
        org.joda.time.MutableDateTime mutableDateTime18 = property13.roundFloor();
        org.joda.time.MutableDateTime mutableDateTime19 = property13.roundFloor();
        org.joda.time.MutableDateTime mutableDateTime20 = org.joda.time.MutableDateTime.now();
        mutableDateTime20.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime23 = mutableDateTime20.copy();
        org.joda.time.MutableDateTime.Property property24 = mutableDateTime20.weekOfWeekyear();
        org.joda.time.MutableDateTime.Property property25 = mutableDateTime20.dayOfYear();
        java.lang.String str26 = property25.getAsText();
        org.joda.time.MutableDateTime mutableDateTime28 = property25.add((long) (short) 0);
        mutableDateTime28.setWeekOfWeekyear(15);
        mutableDateTime28.setTime(417L);
        mutableDateTime28.setSecondOfDay(0);
        org.joda.time.LocalDateTime localDateTime35 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        boolean boolean37 = localDateTime35.isSupported(dateTimeFieldType36);
        org.joda.time.DurationFieldType durationFieldType38 = dateTimeFieldType36.getRangeDurationType();
        boolean boolean39 = mutableDateTime28.isSupported(dateTimeFieldType36);
        mutableDateTime19.setTime((org.joda.time.ReadableInstant) mutableDateTime28);
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(mutableDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(mutableDateTime5);
        org.junit.Assert.assertNotNull(mutableDateTime7);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(timeZone9);
        org.junit.Assert.assertEquals(timeZone9.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(mutableDateTime10);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(mutableDateTime15);
        org.junit.Assert.assertNotNull(mutableDateTime16);
        org.junit.Assert.assertNotNull(mutableDateTime17);
        org.junit.Assert.assertNotNull(mutableDateTime18);
        org.junit.Assert.assertNotNull(mutableDateTime19);
        org.junit.Assert.assertNotNull(mutableDateTime20);
        org.junit.Assert.assertNotNull(mutableDateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "53" + "'", str26, "53");
        org.junit.Assert.assertNotNull(mutableDateTime28);
        org.junit.Assert.assertNotNull(dateTimeFieldType36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(durationFieldType38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
    }

    @Test
    public void test07510() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07510");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.monthOfYear();
        org.joda.time.DateTimeField dateTimeField2 = property1.getField();
        org.joda.time.LocalDate localDate3 = property1.roundCeilingCopy();
        org.joda.time.LocalDate localDate5 = localDate3.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDate localDate7 = localDate3.withWeekOfWeekyear(46);
        org.joda.time.ReadableDuration readableDuration9 = null;
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.Period period11 = new org.joda.time.Period(readableDuration9, readableInstant10);
        org.joda.time.PeriodType periodType14 = null;
        org.joda.time.Period period15 = new org.joda.time.Period((long) 100, 1L, periodType14);
        org.joda.time.Period period17 = period15.minusSeconds((-1));
        java.lang.String str18 = period15.toString();
        org.joda.time.Period period19 = period15.toPeriod();
        org.joda.time.PeriodType periodType20 = period15.getPeriodType();
        org.joda.time.Period period21 = period11.normalizedStandard(periodType20);
        org.joda.time.Instant instant22 = new org.joda.time.Instant();
        org.joda.time.Instant instant24 = instant22.withMillis(0L);
        org.joda.time.Chronology chronology25 = instant24.getChronology();
        org.joda.time.DurationField durationField26 = chronology25.eras();
        long long30 = chronology25.add(0L, (long) 2022, (int) '4');
        org.joda.time.DateTimeField dateTimeField31 = chronology25.secondOfMinute();
        org.joda.time.MutablePeriod mutablePeriod32 = new org.joda.time.MutablePeriod(44L, periodType20, chronology25);
        org.joda.time.LocalDate localDate34 = localDate7.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod32, (int) (byte) 1);
        int int35 = localDate7.getYearOfEra();
        org.joda.time.DateTime dateTime36 = localDate7.toDateTimeAtMidnight();
        org.joda.time.MutableDateTime mutableDateTime37 = dateTime36.toMutableDateTimeISO();
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime37.setWeekOfWeekyear(62181);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 62181 for weekOfWeekyear must be in the range [1,52]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "PT0.099S" + "'", str18, "PT0.099S");
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(periodType20);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertNotNull(instant24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 105144L + "'", long30 == 105144L);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(localDate34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 2022 + "'", int35 == 2022);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(mutableDateTime37);
    }

    @Test
    public void test07511() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07511");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.withHourOfDay(10);
        org.joda.time.DateTimeField dateTimeField6 = localDateTime4.getField((int) (byte) 0);
        long long8 = dateTimeField6.roundHalfEven((long) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = dateTimeField6.getType();
        org.joda.time.MutableDateTime mutableDateTime10 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property11 = mutableDateTime10.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime13 = property11.set(45);
        org.joda.time.MutableDateTime mutableDateTime14 = property11.roundFloor();
        org.joda.time.MutableDateTime mutableDateTime16 = property11.add(45);
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.UTC;
        java.util.TimeZone timeZone18 = dateTimeZone17.toTimeZone();
        long long20 = dateTimeZone17.previousTransition(100L);
        int int22 = dateTimeZone17.getStandardOffset(86403200L);
        org.joda.time.DateTime dateTime23 = mutableDateTime16.toDateTime(dateTimeZone17);
        org.joda.time.LocalDateTime localDateTime24 = org.joda.time.LocalDateTime.now(dateTimeZone17);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime24.plusYears(5);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime24.plusMinutes(58);
        int int29 = dateTimeField6.getMaximumValue((org.joda.time.ReadablePartial) localDateTime28);
        org.joda.time.LocalDateTime localDateTime30 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime32 = localDateTime30.withHourOfDay(10);
        org.joda.time.LocalDateTime.Property property33 = localDateTime30.hourOfDay();
        org.joda.time.LocalDateTime localDateTime35 = localDateTime30.plusMillis((int) (byte) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = org.joda.time.DateTimeFieldType.clockhourOfDay();
        java.lang.String str37 = dateTimeFieldType36.getName();
        int int38 = localDateTime30.indexOf(dateTimeFieldType36);
        java.lang.String str39 = dateTimeFieldType36.getName();
        java.lang.String str40 = dateTimeFieldType36.toString();
        int int41 = localDateTime28.indexOf(dateTimeFieldType36);
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(mutableDateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(mutableDateTime13);
        org.junit.Assert.assertNotNull(mutableDateTime14);
        org.junit.Assert.assertNotNull(mutableDateTime16);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(timeZone18);
        org.junit.Assert.assertEquals(timeZone18.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 100L + "'", long20 == 100L);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 292278993 + "'", int29 == 292278993);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(dateTimeFieldType36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "clockhourOfDay" + "'", str37, "clockhourOfDay");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "clockhourOfDay" + "'", str39, "clockhourOfDay");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "clockhourOfDay" + "'", str40, "clockhourOfDay");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
    }

    @Test
    public void test07512() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07512");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.Instant instant3 = new org.joda.time.Instant();
        org.joda.time.Instant instant5 = instant3.withMillis(0L);
        org.joda.time.Chronology chronology6 = instant5.getChronology();
        org.joda.time.DurationField durationField7 = chronology6.eras();
        long long11 = chronology6.add(0L, (long) 2022, (int) '4');
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = dateTimeFormatter2.withChronology(chronology6);
        java.lang.Object obj13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(obj13);
        org.joda.time.LocalDateTime localDateTime15 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.withHourOfDay(10);
        org.joda.time.DateTimeField dateTimeField21 = localDateTime19.getField((int) (byte) 0);
        long long23 = dateTimeField21.roundHalfEven((long) 1);
        int int24 = dateTime14.get(dateTimeField21);
        org.joda.time.LocalDateTime localDateTime25 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime27 = localDateTime25.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime27.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime29.withCenturyOfEra((int) 'a');
        java.util.Locale locale33 = java.util.Locale.GERMAN;
        java.lang.String str34 = locale33.getDisplayName();
        java.lang.String str35 = dateTimeField21.getAsText((org.joda.time.ReadablePartial) localDateTime29, 53, locale33);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter36 = dateTimeFormatter2.withLocale(locale33);
        boolean boolean37 = dateTimeFormatter2.isPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter38 = dateTimeFormatter2.withOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter39 = dateTimeFormatter38.withOffsetParsed();
        org.joda.time.MutableDateTime mutableDateTime41 = new org.joda.time.MutableDateTime((long) (short) -1);
        org.joda.time.Duration duration43 = org.joda.time.Duration.standardDays((long) (byte) 1);
        java.lang.String str44 = duration43.toString();
        mutableDateTime41.add((org.joda.time.ReadableDuration) duration43, 8);
        mutableDateTime41.setSecondOfMinute((int) (short) 0);
        org.joda.time.MutableDateTime.Property property49 = mutableDateTime41.weekyear();
        mutableDateTime41.addDays(0);
        org.joda.time.DateTimeZone dateTimeZone52 = mutableDateTime41.getZone();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter53 = dateTimeFormatter38.withZone(dateTimeZone52);
        boolean boolean54 = dateTimeFormatter53.isPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter56 = dateTimeFormatter53.withPivotYear((java.lang.Integer) 0);
        int int57 = dateTimeFormatter56.getDefaultYear();
        org.junit.Assert.assertNotNull(instant5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 105144L + "'", long11 == 105144L);
        org.junit.Assert.assertNotNull(dateTimeFormatter12);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2022 + "'", int24 == 2022);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "de");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "German" + "'", str34, "German");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "53" + "'", str35, "53");
        org.junit.Assert.assertNotNull(dateTimeFormatter36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter38);
        org.junit.Assert.assertNotNull(dateTimeFormatter39);
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "PT86400S" + "'", str44, "PT86400S");
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(dateTimeZone52);
        org.junit.Assert.assertNotNull(dateTimeFormatter53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 2000 + "'", int57 == 2000);
    }

    @Test
    public void test07513() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07513");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.add((long) 'a');
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime0.yearOfCentury();
        mutableDateTime0.addSeconds(0);
        org.joda.time.Duration duration7 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Hours hours8 = duration7.toStandardHours();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(chronology9);
        int int11 = dateTime10.getSecondOfMinute();
        org.joda.time.MutablePeriod mutablePeriod12 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration7, (org.joda.time.ReadableInstant) dateTime10);
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((long) 1);
        org.joda.time.Instant instant15 = new org.joda.time.Instant();
        org.joda.time.Instant instant17 = instant15.withMillis(0L);
        org.joda.time.DateTime dateTime18 = instant17.toDateTime();
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((long) 1);
        org.joda.time.PeriodType periodType21 = org.joda.time.PeriodType.months();
        org.joda.time.Period period22 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime18, (org.joda.time.ReadableInstant) dateTime20, periodType21);
        org.joda.time.Period period23 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration7, (org.joda.time.ReadableInstant) dateTime14, periodType21);
        org.joda.time.Duration duration24 = new org.joda.time.Duration((org.joda.time.ReadableInstant) mutableDateTime0, (org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime((long) 1);
        org.joda.time.Duration duration28 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period29 = duration28.toPeriod();
        org.joda.time.Duration duration32 = duration28.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Period period33 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime26, (org.joda.time.ReadableDuration) duration32);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime(chronology34);
        int int36 = dateTime35.getSecondOfMinute();
        org.joda.time.Interval interval37 = duration32.toIntervalTo((org.joda.time.ReadableInstant) dateTime35);
        org.joda.time.Duration duration38 = duration32.toDuration();
        org.joda.time.Period period39 = duration32.toPeriod();
        org.joda.time.Instant instant40 = new org.joda.time.Instant();
        org.joda.time.DateTime dateTime41 = instant40.toDateTime();
        org.joda.time.LocalDateTime localDateTime42 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime44 = localDateTime42.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime46 = localDateTime44.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime48 = localDateTime46.withCenturyOfEra((int) 'a');
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.DateTime dateTime50 = new org.joda.time.DateTime(chronology49);
        org.joda.time.DateTime dateTime52 = dateTime50.plusMinutes(15);
        org.joda.time.DateTime dateTime53 = localDateTime46.toDateTime((org.joda.time.ReadableInstant) dateTime50);
        org.joda.time.DateTimeZone dateTimeZone54 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime55 = localDateTime46.toDateTime(dateTimeZone54);
        org.joda.time.DateTime dateTime56 = dateTime41.withZoneRetainFields(dateTimeZone54);
        org.joda.time.MutableDateTime mutableDateTime57 = org.joda.time.MutableDateTime.now();
        mutableDateTime57.add((long) 'a');
        org.joda.time.MutableDateTime.Property property60 = mutableDateTime57.yearOfCentury();
        mutableDateTime57.addSeconds(0);
        org.joda.time.Duration duration64 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Hours hours65 = duration64.toStandardHours();
        org.joda.time.Chronology chronology66 = null;
        org.joda.time.DateTime dateTime67 = new org.joda.time.DateTime(chronology66);
        int int68 = dateTime67.getSecondOfMinute();
        org.joda.time.MutablePeriod mutablePeriod69 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration64, (org.joda.time.ReadableInstant) dateTime67);
        org.joda.time.DateTime dateTime71 = new org.joda.time.DateTime((long) 1);
        org.joda.time.Instant instant72 = new org.joda.time.Instant();
        org.joda.time.Instant instant74 = instant72.withMillis(0L);
        org.joda.time.DateTime dateTime75 = instant74.toDateTime();
        org.joda.time.DateTime dateTime77 = new org.joda.time.DateTime((long) 1);
        org.joda.time.PeriodType periodType78 = org.joda.time.PeriodType.months();
        org.joda.time.Period period79 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime75, (org.joda.time.ReadableInstant) dateTime77, periodType78);
        org.joda.time.Period period80 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration64, (org.joda.time.ReadableInstant) dateTime71, periodType78);
        org.joda.time.Duration duration81 = new org.joda.time.Duration((org.joda.time.ReadableInstant) mutableDateTime57, (org.joda.time.ReadableInstant) dateTime71);
        org.joda.time.DateTime dateTime82 = dateTime56.plus((org.joda.time.ReadableDuration) duration81);
        int int83 = dateTime82.getWeekyear();
        org.joda.time.Period period84 = duration32.toPeriodTo((org.joda.time.ReadableInstant) dateTime82);
        org.joda.time.Period period86 = period84.plusYears(52);
        org.joda.time.DateTime dateTime87 = dateTime14.minus((org.joda.time.ReadablePeriod) period84);
        org.joda.time.Period period89 = period84.plusHours((-292273084));
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(hours8);
// flaky:         org.junit.Assert.assertTrue("'" + int11 + "' != '" + 45 + "'", int11 == 45);
        org.junit.Assert.assertNotNull(instant17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(periodType21);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(duration32);
// flaky:         org.junit.Assert.assertTrue("'" + int36 + "' != '" + 45 + "'", int36 == 45);
        org.junit.Assert.assertNotNull(interval37);
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertNotNull(period39);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(dateTimeZone54);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(mutableDateTime57);
        org.junit.Assert.assertNotNull(property60);
        org.junit.Assert.assertNotNull(duration64);
        org.junit.Assert.assertNotNull(hours65);
// flaky:         org.junit.Assert.assertTrue("'" + int68 + "' != '" + 45 + "'", int68 == 45);
        org.junit.Assert.assertNotNull(instant74);
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertNotNull(periodType78);
        org.junit.Assert.assertNotNull(dateTime82);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 1970 + "'", int83 == 1970);
        org.junit.Assert.assertNotNull(period84);
        org.junit.Assert.assertNotNull(period86);
        org.junit.Assert.assertNotNull(dateTime87);
        org.junit.Assert.assertNotNull(period89);
    }

    @Test
    public void test07514() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07514");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 1, chronology1);
        int int3 = dateTime2.getMinuteOfDay();
        int int4 = dateTime2.getEra();
        int int5 = dateTime2.getWeekOfWeekyear();
        org.joda.time.Instant instant6 = dateTime2.toInstant();
        org.joda.time.DateTime.Property property7 = dateTime2.era();
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property9 = localDate8.monthOfYear();
        org.joda.time.DateTimeField dateTimeField10 = property9.getField();
        org.joda.time.LocalDate localDate11 = property9.roundCeilingCopy();
        org.joda.time.Chronology chronology12 = localDate11.getChronology();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(53, 0);
        org.joda.time.DateTime dateTime16 = localDate11.toDateTimeAtMidnight(dateTimeZone15);
        org.joda.time.DateTime dateTime17 = dateTime2.withZoneRetainFields(dateTimeZone15);
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate((java.lang.Object) dateTime2);
        org.joda.time.DateTime dateTime20 = dateTime2.plusYears(37057844);
        org.joda.time.Duration duration22 = org.joda.time.Duration.standardSeconds(990786L);
        org.joda.time.DateTime dateTime23 = dateTime2.minus((org.joda.time.ReadableDuration) duration22);
        org.joda.time.MutableDateTime mutableDateTime24 = org.joda.time.MutableDateTime.now();
        java.lang.Object obj25 = mutableDateTime24.clone();
        int int26 = mutableDateTime24.getYearOfEra();
        int int27 = mutableDateTime24.getRoundingMode();
        org.joda.time.MutablePeriod mutablePeriod32 = new org.joda.time.MutablePeriod((int) (byte) -1, (int) (byte) 1, 44, (int) ' ');
        mutablePeriod32.addDays((int) (byte) 10);
        mutablePeriod32.addMillis((int) '4');
        org.joda.time.Duration duration38 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period39 = duration38.toPeriod();
        org.joda.time.Duration duration41 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration43 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration46 = duration43.withDurationAdded((long) (short) 100, (int) ' ');
        boolean boolean47 = duration41.isLongerThan((org.joda.time.ReadableDuration) duration46);
        org.joda.time.Duration duration48 = duration38.minus((org.joda.time.ReadableDuration) duration41);
        mutablePeriod32.setPeriod((org.joda.time.ReadableDuration) duration48);
        mutablePeriod32.addMillis(21);
        mutableDateTime24.add((org.joda.time.ReadablePeriod) mutablePeriod32);
        org.joda.time.Period period53 = duration22.toPeriodTo((org.joda.time.ReadableInstant) mutableDateTime24);
        org.joda.time.MutableDateTime.Property property54 = mutableDateTime24.dayOfYear();
        int int55 = mutableDateTime24.getDayOfMonth();
        mutableDateTime24.setDate((-52L));
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime24.setDateTime(37263107, (-14296), 542, 26482271, 317, 26309196, 3495968);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26482271 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(instant6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(mutableDateTime24);
        org.junit.Assert.assertNotNull(obj25);
// flaky:         org.junit.Assert.assertEquals(obj25.toString(), "2022-02-22T07:23:45.499Z");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj25), "2022-02-22T07:23:45.499Z");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj25), "2022-02-22T07:23:45.499Z");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2022 + "'", int26 == 2022);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertNotNull(period39);
        org.junit.Assert.assertNotNull(duration41);
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertNotNull(duration46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(duration48);
        org.junit.Assert.assertNotNull(period53);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 23 + "'", int55 == 23);
    }

    @Test
    public void test07515() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07515");
        org.joda.time.Period period1 = org.joda.time.Period.days(26488);
        org.joda.time.Period period3 = period1.plusMillis(26575388);
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(period3);
    }

    @Test
    public void test07516() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07516");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period2 = duration1.toPeriod();
        org.joda.time.Duration duration5 = duration1.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime(chronology6);
        org.joda.time.DateTime dateTime9 = dateTime7.plusMinutes(15);
        org.joda.time.Interval interval10 = duration5.toIntervalTo((org.joda.time.ReadableInstant) dateTime9);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime(chronology11);
        int int13 = dateTime12.getYearOfCentury();
        int int14 = dateTime12.getWeekyear();
        org.joda.time.DateTime dateTime16 = dateTime12.plus((long) 15);
        org.joda.time.DateTime.Property property17 = dateTime12.year();
        org.joda.time.DateTime dateTime18 = property17.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime20 = property17.addToCopy((long) 61);
        org.joda.time.Duration duration22 = org.joda.time.Duration.standardHours((-229564796800L));
        org.joda.time.Period period23 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime20, (org.joda.time.ReadableDuration) duration22);
        org.joda.time.DateTime dateTime25 = dateTime20.withWeekyear(0);
        org.joda.time.LocalDate localDate26 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property27 = localDate26.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.UTC;
        java.util.TimeZone timeZone29 = dateTimeZone28.toTimeZone();
        org.joda.time.DateTime dateTime30 = localDate26.toDateTimeAtCurrentTime(dateTimeZone28);
        org.joda.time.MutableDateTime mutableDateTime31 = org.joda.time.MutableDateTime.now(dateTimeZone28);
        org.joda.time.DateTime dateTime32 = dateTime20.withZoneRetainFields(dateTimeZone28);
        org.joda.time.DateTime dateTime33 = dateTime9.withZone(dateTimeZone28);
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime(dateTimeZone28);
        org.joda.time.MutableDateTime mutableDateTime35 = org.joda.time.MutableDateTime.now(dateTimeZone28);
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(period2);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(interval10);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 22 + "'", int13 == 22);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2022 + "'", int14 == 2022);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(timeZone29);
        org.junit.Assert.assertEquals(timeZone29.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(mutableDateTime31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(mutableDateTime35);
    }

    @Test
    public void test07517() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07517");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime1 = instant0.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.weekyear();
        org.joda.time.MutableDateTime mutableDateTime3 = org.joda.time.MutableDateTime.now();
        mutableDateTime3.add((long) 'a');
        org.joda.time.MutableDateTime.Property property6 = mutableDateTime3.yearOfCentury();
        org.joda.time.Duration duration8 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period9 = duration8.toPeriod();
        org.joda.time.Duration duration11 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration14 = duration11.withDurationAdded((long) (short) 100, (int) ' ');
        org.joda.time.Duration duration15 = duration8.minus((org.joda.time.ReadableDuration) duration14);
        mutableDateTime3.add((org.joda.time.ReadableDuration) duration8);
        org.joda.time.MutableDateTime mutableDateTime18 = org.joda.time.MutableDateTime.now();
        mutableDateTime18.add((long) 'a');
        org.joda.time.MutableDateTime.Property property21 = mutableDateTime18.yearOfCentury();
        mutableDateTime18.addSeconds(0);
        org.joda.time.ReadableDuration readableDuration26 = null;
        org.joda.time.ReadableInstant readableInstant27 = null;
        org.joda.time.Period period28 = new org.joda.time.Period(readableDuration26, readableInstant27);
        org.joda.time.PeriodType periodType31 = null;
        org.joda.time.Period period32 = new org.joda.time.Period((long) 100, 1L, periodType31);
        org.joda.time.Period period34 = period32.minusSeconds((-1));
        java.lang.String str35 = period32.toString();
        org.joda.time.Period period36 = period32.toPeriod();
        org.joda.time.PeriodType periodType37 = period32.getPeriodType();
        org.joda.time.Period period38 = period28.normalizedStandard(periodType37);
        org.joda.time.DurationFieldType durationFieldType39 = null;
        int int40 = periodType37.indexOf(durationFieldType39);
        org.joda.time.Instant instant41 = new org.joda.time.Instant();
        org.joda.time.Instant instant43 = instant41.withMillis(0L);
        org.joda.time.Chronology chronology44 = instant43.getChronology();
        org.joda.time.DurationField durationField45 = chronology44.eras();
        org.joda.time.LocalTime localTime46 = org.joda.time.LocalTime.now(chronology44);
        org.joda.time.DurationField durationField47 = chronology44.eras();
        org.joda.time.DateTimeField dateTimeField48 = chronology44.hourOfDay();
        org.joda.time.MutablePeriod mutablePeriod49 = new org.joda.time.MutablePeriod((long) 12, (long) 292278993, periodType37, chronology44);
        org.joda.time.MutableDateTime mutableDateTime50 = mutableDateTime18.toMutableDateTime(chronology44);
        org.joda.time.DateTimeField dateTimeField51 = chronology44.clockhourOfHalfday();
        org.joda.time.DateTime dateTime52 = new org.joda.time.DateTime((long) (short) 0, chronology44);
        mutableDateTime3.setChronology(chronology44);
        org.joda.time.Duration duration56 = new org.joda.time.Duration(960000L, 3155760000000L);
        mutableDateTime3.add((org.joda.time.ReadableDuration) duration56, 0);
        int int59 = property2.compareTo((org.joda.time.ReadableInstant) mutableDateTime3);
        org.joda.time.DateTimeField dateTimeField60 = property2.getField();
        org.joda.time.DateTimeField dateTimeField61 = property2.getField();
        int int64 = dateTimeField61.getDifference(555588438L, 1301063L);
        long long66 = dateTimeField61.roundHalfEven(1175327L);
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(mutableDateTime3);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(mutableDateTime18);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(period34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "PT0.099S" + "'", str35, "PT0.099S");
        org.junit.Assert.assertNotNull(period36);
        org.junit.Assert.assertNotNull(periodType37);
        org.junit.Assert.assertNotNull(period38);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
        org.junit.Assert.assertNotNull(instant43);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(durationField45);
        org.junit.Assert.assertNotNull(localTime46);
        org.junit.Assert.assertNotNull(durationField47);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertNotNull(mutableDateTime50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertNotNull(dateTimeField60);
        org.junit.Assert.assertNotNull(dateTimeField61);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + (-259200000L) + "'", long66 == (-259200000L));
    }

    @Test
    public void test07518() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07518");
        java.lang.Object obj0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(obj0);
        boolean boolean3 = dateTime1.isBefore((long) 7);
        java.lang.String str4 = dateTime1.toString();
        org.joda.time.DateTime dateTime6 = dateTime1.minus((long) 7);
        org.joda.time.Instant instant7 = new org.joda.time.Instant();
        org.joda.time.Instant instant9 = instant7.withMillis(0L);
        org.joda.time.Chronology chronology10 = instant9.getChronology();
        org.joda.time.DateTime dateTime11 = dateTime1.toDateTime(chronology10);
        org.joda.time.DurationField durationField12 = chronology10.days();
        org.joda.time.DateTimeField dateTimeField13 = chronology10.weekyear();
        org.joda.time.DateTimeField dateTimeField14 = chronology10.secondOfMinute();
        org.joda.time.DurationField durationField15 = chronology10.hours();
        org.joda.time.DurationField durationField16 = chronology10.months();
        org.joda.time.MutableDateTime mutableDateTime17 = org.joda.time.MutableDateTime.now(chronology10);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "2022-02-22T07:23:45.604Z" + "'", str4, "2022-02-22T07:23:45.604Z");
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(instant9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(mutableDateTime17);
    }

    @Test
    public void test07519() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07519");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property1 = mutableDateTime0.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime2 = property1.getMutableDateTime();
        org.joda.time.MutableDateTime mutableDateTime3 = property1.getMutableDateTime();
        org.joda.time.MutableDateTime.Property property4 = mutableDateTime3.yearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime5 = org.joda.time.MutableDateTime.now();
        java.lang.Object obj6 = mutableDateTime5.clone();
        mutableDateTime5.setTime((long) 46);
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime5.dayOfWeek();
        org.joda.time.MutableDateTime mutableDateTime11 = property9.add(1L);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.UTC;
        java.util.TimeZone timeZone13 = dateTimeZone12.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.UTC;
        long long16 = dateTimeZone12.getMillisKeepLocal(dateTimeZone14, (long) 44);
        org.joda.time.DateTime dateTime17 = org.joda.time.DateTime.now(dateTimeZone12);
        mutableDateTime11.setZoneRetainFields(dateTimeZone12);
        org.joda.time.MutableDateTime mutableDateTime19 = org.joda.time.MutableDateTime.now(dateTimeZone12);
        org.joda.time.MutableDateTime.Property property20 = mutableDateTime19.weekyear();
        mutableDateTime3.setMillis((org.joda.time.ReadableInstant) mutableDateTime19);
        int int22 = mutableDateTime19.getSecondOfDay();
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(mutableDateTime2);
        org.junit.Assert.assertNotNull(mutableDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(mutableDateTime5);
        org.junit.Assert.assertNotNull(obj6);
// flaky:         org.junit.Assert.assertEquals(obj6.toString(), "2022-02-22T07:23:45.639Z");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj6), "2022-02-22T07:23:45.639Z");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj6), "2022-02-22T07:23:45.639Z");
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(timeZone13);
        org.junit.Assert.assertEquals(timeZone13.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 44L + "'", long16 == 44L);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(mutableDateTime19);
        org.junit.Assert.assertNotNull(property20);
// flaky:         org.junit.Assert.assertTrue("'" + int22 + "' != '" + 26625 + "'", int22 == 26625);
    }

    @Test
    public void test07520() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07520");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) 2037);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalTime localTime5 = new org.joda.time.LocalTime(chronology4);
        org.joda.time.LocalTime localTime7 = localTime5.plusMinutes(26);
        org.joda.time.Chronology chronology8 = localTime7.getChronology();
        org.joda.time.DateTimeField dateTimeField9 = chronology8.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField10 = chronology8.halfdayOfDay();
        org.joda.time.Period period11 = new org.joda.time.Period((long) 26244343, (long) 62188, chronology8);
        org.joda.time.Period period12 = period11.negated();
        mutableDateTime1.add((org.joda.time.ReadablePeriod) period12);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(period12);
    }

    @Test
    public void test07521() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07521");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property1 = mutableDateTime0.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime3 = property1.set(45);
        org.joda.time.MutableDateTime mutableDateTime4 = property1.roundFloor();
        org.joda.time.MutableDateTime mutableDateTime6 = property1.add(45);
        org.joda.time.MutableDateTime mutableDateTime7 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property8 = mutableDateTime7.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime10 = property8.set(45);
        org.joda.time.MutableDateTime mutableDateTime11 = property8.roundFloor();
        org.joda.time.MutableDateTime mutableDateTime13 = property8.add(45);
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.UTC;
        java.util.TimeZone timeZone15 = dateTimeZone14.toTimeZone();
        long long17 = dateTimeZone14.previousTransition(100L);
        int int19 = dateTimeZone14.getStandardOffset(86403200L);
        org.joda.time.DateTime dateTime20 = mutableDateTime13.toDateTime(dateTimeZone14);
        int int22 = dateTimeZone14.getOffset((-62135596800000L));
        mutableDateTime6.setZoneRetainFields(dateTimeZone14);
        mutableDateTime6.addMinutes(26448878);
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(mutableDateTime3);
        org.junit.Assert.assertNotNull(mutableDateTime4);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(mutableDateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(mutableDateTime10);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertNotNull(mutableDateTime13);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(timeZone15);
        org.junit.Assert.assertEquals(timeZone15.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 100L + "'", long17 == 100L);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
    }

    @Test
    public void test07522() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07522");
        java.lang.Object obj0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(obj0);
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardSeconds((long) 45);
        org.joda.time.Period period4 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime1, (org.joda.time.ReadableDuration) duration3);
        org.joda.time.LocalDate localDate5 = dateTime1.toLocalDate();
        org.joda.time.LocalDate.Property property6 = localDate5.dayOfMonth();
        java.util.Date date7 = localDate5.toDate();
        org.joda.time.LocalDate.Property property8 = localDate5.dayOfYear();
        org.joda.time.DateTimeField dateTimeField9 = property8.getField();
        java.lang.String str10 = property8.toString();
        org.joda.time.LocalDate localDate11 = property8.roundFloorCopy();
        org.joda.time.LocalDate localDate12 = property8.roundCeilingCopy();
        org.joda.time.MutableDateTime mutableDateTime14 = org.joda.time.MutableDateTime.now();
        mutableDateTime14.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime17 = mutableDateTime14.copy();
        org.joda.time.MutableDateTime.Property property18 = mutableDateTime14.yearOfEra();
        org.joda.time.MutableDateTime mutableDateTime19 = property18.roundHalfCeiling();
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.ReadableInstant readableInstant25 = null;
        org.joda.time.PeriodType periodType26 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod27 = new org.joda.time.MutablePeriod(readableInstant24, readableInstant25, periodType26);
        org.joda.time.DurationFieldType durationFieldType29 = periodType26.getFieldType((int) (short) 0);
        java.lang.String str30 = periodType26.toString();
        org.joda.time.Instant instant31 = new org.joda.time.Instant();
        org.joda.time.Instant instant33 = instant31.withMillis(0L);
        org.joda.time.Chronology chronology34 = instant33.getChronology();
        org.joda.time.Period period35 = new org.joda.time.Period((long) 53, (long) (-1), periodType26, chronology34);
        org.joda.time.DateTimeField dateTimeField36 = dateTimeFieldType21.getField(chronology34);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime(chronology37);
        org.joda.time.DateTime dateTime40 = dateTime38.plusMinutes(15);
        org.joda.time.Chronology chronology41 = dateTime38.getChronology();
        java.lang.String str42 = chronology41.toString();
        org.joda.time.DateTimeField dateTimeField43 = dateTimeFieldType21.getField(chronology41);
        org.joda.time.DateTimeField dateTimeField44 = chronology41.dayOfYear();
        java.util.Locale locale45 = java.util.Locale.CANADA;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket47 = new org.joda.time.format.DateTimeParserBucket((long) 19045, chronology41, locale45, (java.lang.Integer) 5);
        int int48 = property18.getMaximumShortTextLength(locale45);
        java.lang.String str49 = locale45.getDisplayVariant();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate50 = property8.setCopy("2022-02-22T07:18:35.738Z", locale45);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"2022-02-22T07:18:35.738Z\" for dayOfYear is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(date7);
// flaky:         org.junit.Assert.assertEquals(date7.toString(), "Tue Feb 22 00:00:00 GMT 2022");
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Property[dayOfYear]" + "'", str10, "Property[dayOfYear]");
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(mutableDateTime14);
        org.junit.Assert.assertNotNull(mutableDateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(mutableDateTime19);
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertNotNull(periodType26);
        org.junit.Assert.assertNotNull(durationFieldType29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "PeriodType[YearDayTime]" + "'", str30, "PeriodType[YearDayTime]");
        org.junit.Assert.assertNotNull(instant33);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(chronology41);
// flaky:         org.junit.Assert.assertEquals("'" + str42 + "' != '" + "ISOChronology[UTC]" + "'", str42, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "en_CA");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 9 + "'", int48 == 9);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
    }

    @Test
    public void test07523() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07523");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.Instant instant2 = instant0.withMillis(0L);
        org.joda.time.Duration duration4 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period5 = duration4.toPeriod();
        org.joda.time.Duration duration8 = duration4.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Instant instant9 = instant2.plus((org.joda.time.ReadableDuration) duration8);
        long long10 = instant9.getMillis();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime(chronology11);
        int int13 = dateTime12.getYearOfCentury();
        int int14 = dateTime12.getWeekyear();
        org.joda.time.DateTime dateTime15 = dateTime12.withEarlierOffsetAtOverlap();
        java.lang.String str16 = dateTime15.toString();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime(chronology17);
        int int19 = dateTime18.getYearOfCentury();
        int int20 = dateTime18.getWeekyear();
        org.joda.time.DateTime dateTime21 = dateTime18.withEarlierOffsetAtOverlap();
        java.lang.String str22 = dateTime21.toString();
        org.joda.time.MutableDateTime mutableDateTime23 = dateTime21.toMutableDateTime();
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.UTC;
        boolean boolean25 = dateTimeZone24.isFixed();
        mutableDateTime23.setZoneRetainFields(dateTimeZone24);
        org.joda.time.DateTime dateTime27 = dateTime15.toDateTime(dateTimeZone24);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone24);
        org.joda.time.LocalTime localTime29 = new org.joda.time.LocalTime((java.lang.Object) long10, dateTimeZone24);
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        org.joda.time.LocalTime localTime31 = localTime29.plus(readablePeriod30);
        org.junit.Assert.assertNotNull(instant2);
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(instant9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 86400000L + "'", long10 == 86400000L);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 22 + "'", int13 == 22);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2022 + "'", int14 == 2022);
        org.junit.Assert.assertNotNull(dateTime15);
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "2022-02-22T07:23:45.725Z" + "'", str16, "2022-02-22T07:23:45.725Z");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 22 + "'", int19 == 22);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2022 + "'", int20 == 2022);
        org.junit.Assert.assertNotNull(dateTime21);
// flaky:         org.junit.Assert.assertEquals("'" + str22 + "' != '" + "2022-02-22T07:23:45.725Z" + "'", str22, "2022-02-22T07:23:45.725Z");
        org.junit.Assert.assertNotNull(mutableDateTime23);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(localTime31);
    }

    @Test
    public void test07524() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07524");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) (-292275054));
        java.io.IOException iOException3 = new java.io.IOException("");
        java.io.IOException iOException4 = new java.io.IOException((java.lang.Throwable) iOException3);
        boolean boolean5 = mutableDateTime1.equals((java.lang.Object) iOException3);
        org.joda.time.Duration duration8 = new org.joda.time.Duration(0L, 946312L);
        mutableDateTime1.add((org.joda.time.ReadableDuration) duration8, 1424);
        org.joda.time.MutableDateTime mutableDateTime11 = org.joda.time.MutableDateTime.now();
        java.lang.Object obj12 = mutableDateTime11.clone();
        mutableDateTime11.setTime((long) 46);
        org.joda.time.MutableDateTime.Property property15 = mutableDateTime11.dayOfWeek();
        org.joda.time.MutableDateTime.Property property16 = mutableDateTime11.weekyear();
        int int17 = mutableDateTime11.getMinuteOfHour();
        mutableDateTime11.setMillisOfDay(26333);
        int int20 = mutableDateTime11.getYearOfCentury();
        java.lang.String str21 = mutableDateTime11.toString();
        org.joda.time.MutablePeriod mutablePeriod22 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration8, (org.joda.time.ReadableInstant) mutableDateTime11);
        int int23 = mutableDateTime11.getCenturyOfEra();
        org.joda.time.Chronology chronology25 = null;
        java.util.Locale locale26 = java.util.Locale.GERMAN;
        java.util.Locale locale27 = java.util.Locale.CANADA;
        java.lang.String str28 = locale26.getDisplayVariant(locale27);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket29 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology25, locale27);
        java.lang.Object obj30 = dateTimeParserBucket29.saveState();
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.LocalTime localTime33 = new org.joda.time.LocalTime((long) (short) 100, chronology32);
        org.joda.time.DurationFieldType durationFieldType34 = org.joda.time.DurationFieldType.weeks();
        java.lang.String str35 = durationFieldType34.getName();
        boolean boolean36 = localTime33.isSupported(durationFieldType34);
        boolean boolean37 = dateTimeParserBucket29.restoreState((java.lang.Object) boolean36);
        org.joda.time.Chronology chronology38 = dateTimeParserBucket29.getChronology();
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime42 = dateTime40.withZoneRetainFields(dateTimeZone41);
        dateTimeParserBucket29.setZone(dateTimeZone41);
        long long44 = dateTimeParserBucket29.computeMillis();
        org.joda.time.Chronology chronology45 = dateTimeParserBucket29.getChronology();
        dateTimeParserBucket29.setOffset((java.lang.Integer) 62170);
        org.joda.time.LocalTime localTime48 = org.joda.time.LocalTime.MIDNIGHT;
        org.joda.time.LocalTime localTime50 = localTime48.withMillisOfDay((int) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone51 = null;
        org.joda.time.LocalTime localTime52 = new org.joda.time.LocalTime(dateTimeZone51);
        org.joda.time.LocalTime localTime54 = localTime52.minusHours((int) (byte) 100);
        org.joda.time.LocalTime localTime56 = localTime54.withHourOfDay(0);
        org.joda.time.DateTimeFieldType dateTimeFieldType57 = org.joda.time.DateTimeFieldType.secondOfMinute();
        int int58 = localTime54.get(dateTimeFieldType57);
        boolean boolean59 = localTime50.isSupported(dateTimeFieldType57);
        org.joda.time.DurationFieldType durationFieldType60 = dateTimeFieldType57.getRangeDurationType();
        java.util.Locale.Category category62 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale63 = java.util.Locale.getDefault(category62);
        dateTimeParserBucket29.saveField(dateTimeFieldType57, "2022-02-22T10:17:08.431", locale63);
        org.joda.time.DurationFieldType durationFieldType65 = dateTimeFieldType57.getRangeDurationType();
        mutableDateTime11.set(dateTimeFieldType57, 24);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertNotNull(obj12);
// flaky:         org.junit.Assert.assertEquals(obj12.toString(), "2022-02-22T07:23:45.752Z");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj12), "2022-02-22T07:23:45.752Z");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj12), "2022-02-22T07:23:45.752Z");
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 22 + "'", int20 == 22);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "2022-02-22T00:00:26.333Z" + "'", str21, "2022-02-22T00:00:26.333Z");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 20 + "'", int23 == 20);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "de");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(obj30);
        org.junit.Assert.assertNotNull(durationFieldType34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "weeks" + "'", str35, "weeks");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 97L + "'", long44 == 97L);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(localTime48);
        org.junit.Assert.assertNotNull(localTime50);
        org.junit.Assert.assertNotNull(localTime54);
        org.junit.Assert.assertNotNull(localTime56);
        org.junit.Assert.assertNotNull(dateTimeFieldType57);
// flaky:         org.junit.Assert.assertTrue("'" + int58 + "' != '" + 45 + "'", int58 == 45);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(durationFieldType60);
        org.junit.Assert.assertTrue("'" + category62 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category62.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale63);
// flaky:         org.junit.Assert.assertEquals(locale63.toString(), "");
        org.junit.Assert.assertNotNull(durationFieldType65);
    }

    @Test
    public void test07525() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07525");
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 1, chronology8);
        int int10 = dateTime9.getMinuteOfDay();
        org.joda.time.Instant instant11 = dateTime9.toInstant();
        org.joda.time.MutableDateTime mutableDateTime12 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property13 = mutableDateTime12.centuryOfEra();
        org.joda.time.MutableDateTime.Property property14 = mutableDateTime12.dayOfWeek();
        org.joda.time.MutableDateTime.Property property15 = mutableDateTime12.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime16 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime20.withCenturyOfEra((int) 'a');
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime(chronology23);
        org.joda.time.DateTime dateTime26 = dateTime24.plusMinutes(15);
        org.joda.time.DateTime dateTime27 = localDateTime20.toDateTime((org.joda.time.ReadableInstant) dateTime24);
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime29 = localDateTime20.toDateTime(dateTimeZone28);
        org.joda.time.DateTime.Property property30 = dateTime29.minuteOfHour();
        org.joda.time.DateTime dateTime31 = property30.roundFloorCopy();
        org.joda.time.DateTime dateTime33 = dateTime31.withDayOfYear(46);
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.UTC;
        boolean boolean35 = dateTimeZone34.isFixed();
        org.joda.time.DateTime dateTime36 = dateTime31.withZone(dateTimeZone34);
        org.joda.time.MutableDateTime mutableDateTime37 = mutableDateTime12.toMutableDateTime(dateTimeZone34);
        java.lang.String str39 = dateTimeZone34.getName(0L);
        boolean boolean40 = dateTimeZone34.isFixed();
        org.joda.time.DateTime dateTime41 = dateTime9.toDateTime(dateTimeZone34);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime42 = new org.joda.time.DateTime(26484840, 1922, 26455312, 26556136, 26367, 0, 26357, dateTimeZone34);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26556136 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(instant11);
        org.junit.Assert.assertNotNull(mutableDateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(mutableDateTime37);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "+00:00" + "'", str39, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(dateTime41);
    }

    @Test
    public void test07526() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07526");
        org.joda.time.MutableDateTime mutableDateTime2 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime2.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime4 = property3.getMutableDateTime();
        org.joda.time.MutableDateTime mutableDateTime5 = property3.getMutableDateTime();
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate();
        int int7 = localDate6.getDayOfMonth();
        org.joda.time.Chronology chronology8 = localDate6.getChronology();
        mutableDateTime5.setChronology(chronology8);
        mutableDateTime5.setHourOfDay((int) (byte) 0);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((long) 1, chronology13);
        int int15 = dateTime14.getMinuteOfDay();
        org.joda.time.ReadableDuration readableDuration17 = null;
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.Period period19 = new org.joda.time.Period(readableDuration17, readableInstant18);
        org.joda.time.PeriodType periodType22 = null;
        org.joda.time.Period period23 = new org.joda.time.Period((long) 100, 1L, periodType22);
        org.joda.time.Period period25 = period23.minusSeconds((-1));
        java.lang.String str26 = period23.toString();
        org.joda.time.Period period27 = period23.toPeriod();
        org.joda.time.PeriodType periodType28 = period23.getPeriodType();
        org.joda.time.Period period29 = period19.normalizedStandard(periodType28);
        org.joda.time.Instant instant30 = new org.joda.time.Instant();
        org.joda.time.Instant instant32 = instant30.withMillis(0L);
        org.joda.time.Chronology chronology33 = instant32.getChronology();
        org.joda.time.DurationField durationField34 = chronology33.eras();
        long long38 = chronology33.add(0L, (long) 2022, (int) '4');
        org.joda.time.DateTimeField dateTimeField39 = chronology33.secondOfMinute();
        org.joda.time.MutablePeriod mutablePeriod40 = new org.joda.time.MutablePeriod(44L, periodType28, chronology33);
        org.joda.time.DateTimeField dateTimeField41 = chronology33.clockhourOfHalfday();
        org.joda.time.DateTime dateTime42 = dateTime14.toDateTime(chronology33);
        org.joda.time.LocalDate localDate45 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property46 = localDate45.monthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType47 = org.joda.time.DateTimeFieldType.minuteOfDay();
        boolean boolean48 = localDate45.isSupported(dateTimeFieldType47);
        org.joda.time.Chronology chronology49 = localDate45.getChronology();
        org.joda.time.MutablePeriod mutablePeriod50 = new org.joda.time.MutablePeriod((long) (byte) -1, 0L, chronology49);
        org.joda.time.MutableDateTime mutableDateTime51 = dateTime42.toMutableDateTime(chronology49);
        org.joda.time.DateTimeField dateTimeField52 = chronology49.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField53 = chronology49.millisOfDay();
        org.joda.time.MutableDateTime mutableDateTime54 = mutableDateTime5.toMutableDateTime(chronology49);
        org.joda.time.Period period55 = new org.joda.time.Period((long) 111, 1018688L, chronology49);
        org.junit.Assert.assertNotNull(mutableDateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(mutableDateTime4);
        org.junit.Assert.assertNotNull(mutableDateTime5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 22 + "'", int7 == 22);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "PT0.099S" + "'", str26, "PT0.099S");
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertNotNull(periodType28);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(instant32);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(durationField34);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 105144L + "'", long38 == 105144L);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(dateTimeFieldType47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertNotNull(mutableDateTime51);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertNotNull(mutableDateTime54);
    }

    @Test
    public void test07527() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07527");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) 26407425, chronology1);
    }

    @Test
    public void test07528() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07528");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        int int2 = dateTime1.getYearOfCentury();
        int int3 = dateTime1.getWeekyear();
        org.joda.time.DateTime dateTime4 = dateTime1.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime.Property property5 = dateTime1.yearOfEra();
        org.joda.time.DateTime dateTime6 = property5.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime7 = property5.roundHalfEvenCopy();
        org.joda.time.Duration duration9 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Hours hours10 = duration9.toStandardHours();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime(chronology11);
        int int13 = dateTime12.getSecondOfMinute();
        org.joda.time.MutablePeriod mutablePeriod14 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration9, (org.joda.time.ReadableInstant) dateTime12);
        mutablePeriod14.addSeconds(292278993);
        mutablePeriod14.setPeriod((long) 45, 946312L);
        org.joda.time.DateTime dateTime20 = dateTime7.minus((org.joda.time.ReadablePeriod) mutablePeriod14);
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property22 = localDate21.monthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = org.joda.time.DateTimeFieldType.minuteOfDay();
        boolean boolean24 = localDate21.isSupported(dateTimeFieldType23);
        int int25 = dateTime20.get(dateTimeFieldType23);
        org.joda.time.Period period27 = org.joda.time.Period.millis(62166);
        org.joda.time.DateTime dateTime28 = dateTime20.minus((org.joda.time.ReadablePeriod) period27);
        org.joda.time.MutableDateTime mutableDateTime29 = dateTime20.toMutableDateTimeISO();
        org.joda.time.MutableDateTime.Property property30 = mutableDateTime29.centuryOfEra();
        org.joda.time.MutableDateTime.Property property31 = mutableDateTime29.millisOfDay();
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime29.setWeekOfWeekyear(37033255);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 37033255 for weekOfWeekyear must be in the range [1,52]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 22 + "'", int2 == 22);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2022 + "'", int3 == 2022);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(hours10);
// flaky:         org.junit.Assert.assertTrue("'" + int13 + "' != '" + 45 + "'", int13 == 45);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1424 + "'", int25 == 1424);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(mutableDateTime29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(property31);
    }

    @Test
    public void test07529() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07529");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) (short) -1);
        mutableDateTime1.setSecondOfMinute(53);
        int int4 = mutableDateTime1.getEra();
        org.joda.time.DateTimeField dateTimeField5 = mutableDateTime1.getRoundingField();
        mutableDateTime1.addSeconds(22);
        int int8 = mutableDateTime1.getMonthOfYear();
        mutableDateTime1.addHours(26202);
        org.joda.time.MutableDateTime mutableDateTime11 = mutableDateTime1.copy();
        mutableDateTime11.addWeeks(26570);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNull(dateTimeField5);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(mutableDateTime11);
    }

    @Test
    public void test07530() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07530");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.Instant instant2 = instant0.withMillis(0L);
        org.joda.time.DateTime dateTime3 = instant2.toDateTime();
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) 1);
        org.joda.time.PeriodType periodType6 = org.joda.time.PeriodType.months();
        org.joda.time.Period period7 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime3, (org.joda.time.ReadableInstant) dateTime5, periodType6);
        org.joda.time.PeriodType periodType10 = null;
        org.joda.time.Period period11 = new org.joda.time.Period((long) 100, 1L, periodType10);
        org.joda.time.Period period13 = period11.minusSeconds((-1));
        java.lang.String str14 = period11.toString();
        org.joda.time.Period period15 = period11.toPeriod();
        org.joda.time.PeriodType periodType16 = period11.getPeriodType();
        org.joda.time.DateTime dateTime17 = dateTime5.plus((org.joda.time.ReadablePeriod) period11);
        org.joda.time.DateTime dateTime19 = dateTime17.withWeekyear(26148950);
        int int20 = dateTime17.getWeekyear();
        org.joda.time.MutableDateTime mutableDateTime21 = org.joda.time.MutableDateTime.now();
        mutableDateTime21.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime24 = mutableDateTime21.copy();
        org.joda.time.MutableDateTime.Property property25 = mutableDateTime21.weekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime26 = property25.roundHalfFloor();
        org.joda.time.MutableDateTime mutableDateTime28 = property25.add((long) (byte) 10);
        int int29 = mutableDateTime28.getCenturyOfEra();
        int int30 = dateTime17.compareTo((org.joda.time.ReadableInstant) mutableDateTime28);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime(chronology31);
        int int33 = dateTime32.getYearOfCentury();
        int int34 = dateTime32.getWeekyear();
        org.joda.time.DateTime dateTime35 = dateTime32.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime.Property property36 = dateTime32.yearOfEra();
        org.joda.time.DateTime dateTime37 = property36.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime38 = property36.roundHalfEvenCopy();
        org.joda.time.Duration duration40 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Hours hours41 = duration40.toStandardHours();
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime(chronology42);
        int int44 = dateTime43.getSecondOfMinute();
        org.joda.time.MutablePeriod mutablePeriod45 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration40, (org.joda.time.ReadableInstant) dateTime43);
        mutablePeriod45.addSeconds(292278993);
        mutablePeriod45.setPeriod((long) 45, 946312L);
        org.joda.time.DateTime dateTime51 = dateTime38.minus((org.joda.time.ReadablePeriod) mutablePeriod45);
        org.joda.time.DateTime dateTime54 = dateTime38.withDurationAdded((long) 1969, (int) (short) -1);
        org.joda.time.LocalDateTime localDateTime55 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime57 = localDateTime55.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime59 = localDateTime57.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime61 = localDateTime59.plusYears((int) (short) 100);
        org.joda.time.Duration duration63 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period64 = duration63.toPeriod();
        org.joda.time.Duration duration66 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration69 = duration66.withDurationAdded((long) (short) 100, (int) ' ');
        org.joda.time.Duration duration70 = duration63.minus((org.joda.time.ReadableDuration) duration69);
        org.joda.time.LocalDateTime localDateTime71 = localDateTime61.plus((org.joda.time.ReadableDuration) duration63);
        org.joda.time.DateTime dateTime72 = dateTime38.minus((org.joda.time.ReadableDuration) duration63);
        mutableDateTime28.add((org.joda.time.ReadableDuration) duration63, 26);
        org.joda.time.ReadableDuration readableDuration75 = null;
        boolean boolean76 = duration63.isEqual(readableDuration75);
        long long77 = duration63.getMillis();
        org.junit.Assert.assertNotNull(instant2);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(periodType6);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "PT0.099S" + "'", str14, "PT0.099S");
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(periodType16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1970 + "'", int20 == 1970);
        org.junit.Assert.assertNotNull(mutableDateTime21);
        org.junit.Assert.assertNotNull(mutableDateTime24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(mutableDateTime26);
        org.junit.Assert.assertNotNull(mutableDateTime28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 20 + "'", int29 == 20);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 22 + "'", int33 == 22);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 2022 + "'", int34 == 2022);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(duration40);
        org.junit.Assert.assertNotNull(hours41);
// flaky:         org.junit.Assert.assertTrue("'" + int44 + "' != '" + 45 + "'", int44 == 45);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertNotNull(localDateTime57);
        org.junit.Assert.assertNotNull(localDateTime59);
        org.junit.Assert.assertNotNull(localDateTime61);
        org.junit.Assert.assertNotNull(duration63);
        org.junit.Assert.assertNotNull(period64);
        org.junit.Assert.assertNotNull(duration66);
        org.junit.Assert.assertNotNull(duration69);
        org.junit.Assert.assertNotNull(duration70);
        org.junit.Assert.assertNotNull(localDateTime71);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + long77 + "' != '" + 86400000L + "'", long77 == 86400000L);
    }

    @Test
    public void test07531() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07531");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime3 = mutableDateTime0.copy();
        org.joda.time.Instant instant4 = new org.joda.time.Instant();
        org.joda.time.DateTime dateTime5 = instant4.toDateTime();
        org.joda.time.LocalDateTime localDateTime6 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.withCenturyOfEra((int) 'a');
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(chronology13);
        org.joda.time.DateTime dateTime16 = dateTime14.plusMinutes(15);
        org.joda.time.DateTime dateTime17 = localDateTime10.toDateTime((org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime19 = localDateTime10.toDateTime(dateTimeZone18);
        org.joda.time.DateTime dateTime20 = dateTime5.withZoneRetainFields(dateTimeZone18);
        java.lang.String str21 = dateTimeZone18.toString();
        java.lang.String str22 = dateTimeZone18.getID();
        org.joda.time.MutableDateTime mutableDateTime23 = new org.joda.time.MutableDateTime(dateTimeZone18);
        org.joda.time.MutableDateTime mutableDateTime24 = new org.joda.time.MutableDateTime(dateTimeZone18);
        org.joda.time.MutableDateTime mutableDateTime25 = org.joda.time.MutableDateTime.now();
        mutableDateTime25.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime28 = mutableDateTime25.copy();
        org.joda.time.MutableDateTime.Property property29 = mutableDateTime25.yearOfCentury();
        mutableDateTime25.setHourOfDay(9);
        int int32 = dateTimeZone18.getOffset((org.joda.time.ReadableInstant) mutableDateTime25);
        int int33 = mutableDateTime25.getSecondOfDay();
        mutableDateTime0.setDate((org.joda.time.ReadableInstant) mutableDateTime25);
        mutableDateTime25.addHours(26278);
        mutableDateTime25.setMinuteOfDay(435);
        mutableDateTime25.setMillisOfDay(37423908);
        org.joda.time.MutableDateTime.Property property41 = mutableDateTime25.era();
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(mutableDateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "UTC" + "'", str21, "UTC");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "UTC" + "'", str22, "UTC");
        org.junit.Assert.assertNotNull(mutableDateTime25);
        org.junit.Assert.assertNotNull(mutableDateTime28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + int33 + "' != '" + 33826 + "'", int33 == 33826);
        org.junit.Assert.assertNotNull(property41);
    }

    @Test
    public void test07532() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07532");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.Instant instant2 = instant0.withMillis(0L);
        org.joda.time.Duration duration4 = org.joda.time.Duration.standardDays((long) (byte) 1);
        java.lang.String str5 = duration4.toString();
        org.joda.time.Instant instant6 = instant0.minus((org.joda.time.ReadableDuration) duration4);
        org.joda.time.MutableDateTime mutableDateTime7 = instant0.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property8 = mutableDateTime7.centuryOfEra();
        mutableDateTime7.setMinuteOfDay((int) (short) 10);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime7.setDateTime(26449, 62528, 2026, 26377326, (-3024000), 62491, 3229);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26377326 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(instant2);
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "PT86400S" + "'", str5, "PT86400S");
        org.junit.Assert.assertNotNull(instant6);
        org.junit.Assert.assertNotNull(mutableDateTime7);
        org.junit.Assert.assertNotNull(property8);
    }

    @Test
    public void test07533() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07533");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime3 = mutableDateTime0.copy();
        org.joda.time.MutableDateTime.Property property4 = mutableDateTime0.weekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime5 = property4.roundHalfFloor();
        org.joda.time.MutableDateTime mutableDateTime6 = property4.roundHalfCeiling();
        org.joda.time.MutableDateTime mutableDateTime8 = property4.set(1);
        org.joda.time.MutableDateTime mutableDateTime9 = org.joda.time.MutableDateTime.now();
        mutableDateTime9.add((long) 'a');
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime9.yearOfCentury();
        org.joda.time.Duration duration14 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period15 = duration14.toPeriod();
        org.joda.time.Duration duration17 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration20 = duration17.withDurationAdded((long) (short) 100, (int) ' ');
        org.joda.time.Duration duration21 = duration14.minus((org.joda.time.ReadableDuration) duration20);
        mutableDateTime9.add((org.joda.time.ReadableDuration) duration14);
        org.joda.time.MutableDateTime.Property property23 = mutableDateTime9.centuryOfEra();
        mutableDateTime9.addYears(0);
        mutableDateTime9.setMinuteOfDay((int) (short) 0);
        org.joda.time.Instant instant28 = new org.joda.time.Instant();
        org.joda.time.Instant instant30 = instant28.withMillis(0L);
        org.joda.time.Duration duration32 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period33 = duration32.toPeriod();
        org.joda.time.Duration duration36 = duration32.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Instant instant37 = instant30.plus((org.joda.time.ReadableDuration) duration36);
        long long38 = instant37.getMillis();
        org.joda.time.Duration duration39 = new org.joda.time.Duration((org.joda.time.ReadableInstant) mutableDateTime9, (org.joda.time.ReadableInstant) instant37);
        mutableDateTime8.add((org.joda.time.ReadableDuration) duration39, 999);
        long long42 = duration39.getStandardMinutes();
        org.joda.time.Period period43 = duration39.toPeriod();
        org.joda.time.Period period45 = period43.plusMonths(26192);
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(mutableDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(mutableDateTime5);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(mutableDateTime8);
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(instant30);
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertNotNull(instant37);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 86400000L + "'", long38 == 86400000L);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + (-27424800L) + "'", long42 == (-27424800L));
        org.junit.Assert.assertNotNull(period43);
        org.junit.Assert.assertNotNull(period45);
    }

    @Test
    public void test07534() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07534");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) 1);
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period4 = duration3.toPeriod();
        org.joda.time.Duration duration7 = duration3.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Period period8 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime1, (org.joda.time.ReadableDuration) duration7);
        org.joda.time.Period period10 = period8.plusSeconds((int) (byte) 0);
        org.joda.time.MutableDateTime mutableDateTime11 = org.joda.time.MutableDateTime.now();
        mutableDateTime11.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime14 = mutableDateTime11.copy();
        org.joda.time.MutableDateTime.Property property15 = mutableDateTime11.weekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime16 = property15.roundHalfFloor();
        org.joda.time.MutableDateTime mutableDateTime17 = property15.roundHalfCeiling();
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.ReadableInstant readableInstant21 = null;
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.PeriodType periodType23 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod24 = new org.joda.time.MutablePeriod(readableInstant21, readableInstant22, periodType23);
        org.joda.time.DurationFieldType durationFieldType26 = periodType23.getFieldType((int) (short) 0);
        java.lang.String str27 = periodType23.toString();
        org.joda.time.Instant instant28 = new org.joda.time.Instant();
        org.joda.time.Instant instant30 = instant28.withMillis(0L);
        org.joda.time.Chronology chronology31 = instant30.getChronology();
        org.joda.time.Period period32 = new org.joda.time.Period((long) 53, (long) (-1), periodType23, chronology31);
        org.joda.time.DateTimeField dateTimeField33 = dateTimeFieldType18.getField(chronology31);
        java.util.Locale locale34 = java.util.Locale.UK;
        java.lang.String str35 = locale34.getDisplayLanguage();
        int int36 = dateTimeField33.getMaximumTextLength(locale34);
        mutableDateTime17.setRounding(dateTimeField33);
        org.joda.time.Duration duration38 = period8.toDurationFrom((org.joda.time.ReadableInstant) mutableDateTime17);
        org.joda.time.MutableDateTime.Property property39 = mutableDateTime17.centuryOfEra();
        mutableDateTime17.setYear(36);
        int int42 = mutableDateTime17.getMinuteOfHour();
        int int43 = mutableDateTime17.getMillisOfSecond();
        boolean boolean45 = mutableDateTime17.isEqual((long) (-19045));
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertNotNull(mutableDateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(mutableDateTime16);
        org.junit.Assert.assertNotNull(mutableDateTime17);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertNotNull(periodType23);
        org.junit.Assert.assertNotNull(durationFieldType26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "PeriodType[YearDayTime]" + "'", str27, "PeriodType[YearDayTime]");
        org.junit.Assert.assertNotNull(instant30);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "en_GB");
// flaky:         org.junit.Assert.assertEquals("'" + str35 + "' != '" + "\u82f1\u6587" + "'", str35, "\u82f1\u6587");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 4 + "'", int36 == 4);
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
    }

    @Test
    public void test07535() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07535");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.Instant instant2 = instant0.withMillis(0L);
        org.joda.time.Chronology chronology3 = instant2.getChronology();
        org.joda.time.DurationField durationField4 = chronology3.eras();
        org.joda.time.LocalTime localTime5 = org.joda.time.LocalTime.now(chronology3);
        org.joda.time.DurationField durationField6 = chronology3.eras();
        org.joda.time.DateTimeField dateTimeField7 = chronology3.hourOfDay();
        org.joda.time.DateTimeField dateTimeField8 = chronology3.clockhourOfHalfday();
        java.lang.Object obj9 = null;
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime(chronology10);
        int int12 = dateTime11.getSecondOfMinute();
        boolean boolean13 = dateTime11.isEqualNow();
        int int14 = dateTime11.getDayOfYear();
        org.joda.time.DateTime dateTime16 = dateTime11.plusDays((int) '#');
        org.joda.time.DateTime.Property property17 = dateTime11.centuryOfEra();
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.LocalTime localTime19 = new org.joda.time.LocalTime(dateTimeZone18);
        org.joda.time.LocalTime localTime21 = localTime19.minusHours((int) (byte) 100);
        org.joda.time.Chronology chronology22 = localTime21.getChronology();
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime(chronology23);
        int int25 = dateTime24.getYearOfCentury();
        int int26 = dateTime24.getWeekyear();
        org.joda.time.DateTime dateTime27 = dateTime24.withEarlierOffsetAtOverlap();
        java.lang.String str28 = dateTime27.toString();
        org.joda.time.MutableDateTime mutableDateTime29 = dateTime27.toMutableDateTime();
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.UTC;
        boolean boolean31 = dateTimeZone30.isFixed();
        mutableDateTime29.setZoneRetainFields(dateTimeZone30);
        org.joda.time.DateTime dateTime33 = localTime21.toDateTimeToday(dateTimeZone30);
        long long35 = dateTimeZone30.nextTransition((long) 161);
        org.joda.time.LocalTime localTime36 = new org.joda.time.LocalTime(dateTimeZone30);
        org.joda.time.DateTime dateTime37 = dateTime11.withZoneRetainFields(dateTimeZone30);
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime(obj9, dateTimeZone30);
        org.joda.time.Chronology chronology39 = chronology3.withZone(dateTimeZone30);
        org.junit.Assert.assertNotNull(instant2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + 46 + "'", int12 == 46);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 53 + "'", int14 == 53);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(localTime21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 22 + "'", int25 == 22);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2022 + "'", int26 == 2022);
        org.junit.Assert.assertNotNull(dateTime27);
// flaky:         org.junit.Assert.assertEquals("'" + str28 + "' != '" + "2022-02-22T07:23:46.214Z" + "'", str28, "2022-02-22T07:23:46.214Z");
        org.junit.Assert.assertNotNull(mutableDateTime29);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 161L + "'", long35 == 161L);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(chronology39);
    }

    @Test
    public void test07536() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07536");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = java.util.Locale.GERMAN;
        java.util.Locale locale3 = java.util.Locale.CANADA;
        java.lang.String str4 = locale2.getDisplayVariant(locale3);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology1, locale3);
        java.lang.Object obj6 = dateTimeParserBucket5.saveState();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.LocalTime localTime9 = new org.joda.time.LocalTime((long) (short) 100, chronology8);
        org.joda.time.DurationFieldType durationFieldType10 = org.joda.time.DurationFieldType.weeks();
        java.lang.String str11 = durationFieldType10.getName();
        boolean boolean12 = localTime9.isSupported(durationFieldType10);
        boolean boolean13 = dateTimeParserBucket5.restoreState((java.lang.Object) boolean12);
        org.joda.time.Chronology chronology14 = dateTimeParserBucket5.getChronology();
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime18 = dateTime16.withZoneRetainFields(dateTimeZone17);
        dateTimeParserBucket5.setZone(dateTimeZone17);
        long long20 = dateTimeParserBucket5.computeMillis();
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.dayOfWeek();
        dateTimeParserBucket5.saveField(dateTimeFieldType21, (int) (short) -1);
        org.joda.time.Chronology chronology24 = dateTimeParserBucket5.getChronology();
        java.lang.Object obj25 = dateTimeParserBucket5.saveState();
        org.joda.time.Chronology chronology26 = dateTimeParserBucket5.getChronology();
        org.joda.time.DurationField durationField27 = chronology26.eras();
        org.joda.time.ReadableInstant readableInstant28 = null;
        org.joda.time.MutableDateTime mutableDateTime29 = org.joda.time.MutableDateTime.now();
        mutableDateTime29.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime32 = mutableDateTime29.copy();
        org.joda.time.MutableDateTime.Property property33 = mutableDateTime29.weekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime34 = property33.roundHalfFloor();
        org.joda.time.MutableDateTime mutableDateTime35 = property33.roundHalfCeiling();
        org.joda.time.MutableDateTime mutableDateTime37 = property33.set(1);
        org.joda.time.MutableDateTime mutableDateTime38 = org.joda.time.MutableDateTime.now();
        mutableDateTime38.add((long) 'a');
        org.joda.time.MutableDateTime.Property property41 = mutableDateTime38.yearOfCentury();
        org.joda.time.Duration duration43 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period44 = duration43.toPeriod();
        org.joda.time.Duration duration46 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration49 = duration46.withDurationAdded((long) (short) 100, (int) ' ');
        org.joda.time.Duration duration50 = duration43.minus((org.joda.time.ReadableDuration) duration49);
        mutableDateTime38.add((org.joda.time.ReadableDuration) duration43);
        org.joda.time.MutableDateTime.Property property52 = mutableDateTime38.centuryOfEra();
        mutableDateTime38.addYears(0);
        mutableDateTime38.setMinuteOfDay((int) (short) 0);
        org.joda.time.Instant instant57 = new org.joda.time.Instant();
        org.joda.time.Instant instant59 = instant57.withMillis(0L);
        org.joda.time.Duration duration61 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period62 = duration61.toPeriod();
        org.joda.time.Duration duration65 = duration61.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Instant instant66 = instant59.plus((org.joda.time.ReadableDuration) duration65);
        long long67 = instant66.getMillis();
        org.joda.time.Duration duration68 = new org.joda.time.Duration((org.joda.time.ReadableInstant) mutableDateTime38, (org.joda.time.ReadableInstant) instant66);
        mutableDateTime37.add((org.joda.time.ReadableDuration) duration68, 999);
        org.joda.time.MutablePeriod mutablePeriod71 = new org.joda.time.MutablePeriod(readableInstant28, (org.joda.time.ReadableDuration) duration68);
        mutablePeriod71.setPeriod(776L);
        int[] intArray76 = chronology26.get((org.joda.time.ReadablePeriod) mutablePeriod71, 0L, 955L);
        org.joda.time.DateTimeField dateTimeField77 = chronology26.weekOfWeekyear();
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "de");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertNotNull(durationFieldType10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "weeks" + "'", str11, "weeks");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 97L + "'", long20 == 97L);
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(obj25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(mutableDateTime29);
        org.junit.Assert.assertNotNull(mutableDateTime32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(mutableDateTime34);
        org.junit.Assert.assertNotNull(mutableDateTime35);
        org.junit.Assert.assertNotNull(mutableDateTime37);
        org.junit.Assert.assertNotNull(mutableDateTime38);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertNotNull(period44);
        org.junit.Assert.assertNotNull(duration46);
        org.junit.Assert.assertNotNull(duration49);
        org.junit.Assert.assertNotNull(duration50);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertNotNull(instant59);
        org.junit.Assert.assertNotNull(duration61);
        org.junit.Assert.assertNotNull(period62);
        org.junit.Assert.assertNotNull(duration65);
        org.junit.Assert.assertNotNull(instant66);
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + 86400000L + "'", long67 == 86400000L);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[0, 0, 0, 0, 0, 0, 0, 955]");
        org.junit.Assert.assertNotNull(dateTimeField77);
    }

    @Test
    public void test07537() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07537");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        java.lang.Object obj1 = mutableDateTime0.clone();
        mutableDateTime0.setTime((long) 46);
        org.joda.time.MutableDateTime.Property property4 = mutableDateTime0.dayOfWeek();
        org.joda.time.MutableDateTime.Property property5 = mutableDateTime0.weekyear();
        int int6 = mutableDateTime0.getMinuteOfHour();
        mutableDateTime0.setMillisOfDay(26333);
        int int9 = mutableDateTime0.getMinuteOfHour();
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(obj1);
// flaky:         org.junit.Assert.assertEquals(obj1.toString(), "2022-02-22T07:23:46.290Z");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj1), "2022-02-22T07:23:46.290Z");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj1), "2022-02-22T07:23:46.290Z");
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
    }

    @Test
    public void test07538() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07538");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        int int2 = dateTime1.getYearOfCentury();
        int int3 = dateTime1.getWeekyear();
        org.joda.time.DateTime dateTime4 = dateTime1.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime.Property property5 = dateTime1.yearOfEra();
        org.joda.time.DateTime dateTime6 = property5.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime7 = property5.roundHalfEvenCopy();
        org.joda.time.DateTime dateTime8 = property5.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime9 = property5.roundHalfEvenCopy();
        org.joda.time.DateTime dateTime11 = dateTime9.minusMillis(383);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 22 + "'", int2 == 22);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2022 + "'", int3 == 2022);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
    }

    @Test
    public void test07539() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07539");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime3 = mutableDateTime0.copy();
        org.joda.time.MutableDateTime.Property property4 = mutableDateTime0.yearOfEra();
        org.joda.time.MutableDateTime mutableDateTime6 = property4.addWrapField(62151);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 1, chronology8);
        int int10 = dateTime9.getMinuteOfDay();
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.Period period14 = new org.joda.time.Period(readableDuration12, readableInstant13);
        org.joda.time.PeriodType periodType17 = null;
        org.joda.time.Period period18 = new org.joda.time.Period((long) 100, 1L, periodType17);
        org.joda.time.Period period20 = period18.minusSeconds((-1));
        java.lang.String str21 = period18.toString();
        org.joda.time.Period period22 = period18.toPeriod();
        org.joda.time.PeriodType periodType23 = period18.getPeriodType();
        org.joda.time.Period period24 = period14.normalizedStandard(periodType23);
        org.joda.time.Instant instant25 = new org.joda.time.Instant();
        org.joda.time.Instant instant27 = instant25.withMillis(0L);
        org.joda.time.Chronology chronology28 = instant27.getChronology();
        org.joda.time.DurationField durationField29 = chronology28.eras();
        long long33 = chronology28.add(0L, (long) 2022, (int) '4');
        org.joda.time.DateTimeField dateTimeField34 = chronology28.secondOfMinute();
        org.joda.time.MutablePeriod mutablePeriod35 = new org.joda.time.MutablePeriod(44L, periodType23, chronology28);
        org.joda.time.DateTimeField dateTimeField36 = chronology28.clockhourOfHalfday();
        org.joda.time.DateTime dateTime37 = dateTime9.toDateTime(chronology28);
        org.joda.time.LocalDate localDate40 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property41 = localDate40.monthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType42 = org.joda.time.DateTimeFieldType.minuteOfDay();
        boolean boolean43 = localDate40.isSupported(dateTimeFieldType42);
        org.joda.time.Chronology chronology44 = localDate40.getChronology();
        org.joda.time.MutablePeriod mutablePeriod45 = new org.joda.time.MutablePeriod((long) (byte) -1, 0L, chronology44);
        org.joda.time.MutableDateTime mutableDateTime46 = dateTime37.toMutableDateTime(chronology44);
        org.joda.time.DateTimeField dateTimeField47 = chronology44.clockhourOfHalfday();
        int int48 = mutableDateTime6.get(dateTimeField47);
        int int49 = mutableDateTime6.getMinuteOfDay();
        int int50 = mutableDateTime6.getMinuteOfHour();
        mutableDateTime6.addMinutes(37219474);
        mutableDateTime6.addMonths(2222);
        org.joda.time.MutableDateTime.Property property55 = mutableDateTime6.millisOfDay();
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(mutableDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "PT0.099S" + "'", str21, "PT0.099S");
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(periodType23);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertNotNull(instant27);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 105144L + "'", long33 == 105144L);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(dateTimeFieldType42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(mutableDateTime46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 7 + "'", int48 == 7);
// flaky:         org.junit.Assert.assertTrue("'" + int49 + "' != '" + 443 + "'", int49 == 443);
// flaky:         org.junit.Assert.assertTrue("'" + int50 + "' != '" + 23 + "'", int50 == 23);
        org.junit.Assert.assertNotNull(property55);
    }

    @Test
    public void test07540() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07540");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.Instant instant2 = instant0.withMillis(0L);
        org.joda.time.Chronology chronology3 = instant2.getChronology();
        org.joda.time.Instant instant4 = instant2.toInstant();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime(chronology5);
        org.joda.time.DateTime dateTime8 = dateTime6.plusMinutes(15);
        org.joda.time.Chronology chronology9 = dateTime6.getChronology();
        org.joda.time.DurationField durationField10 = chronology9.hours();
        org.joda.time.MutableDateTime mutableDateTime11 = instant4.toMutableDateTime(chronology9);
        java.lang.String str12 = instant4.toString();
        org.junit.Assert.assertNotNull(instant2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(instant4);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "1970-01-01T00:00:00.000Z" + "'", str12, "1970-01-01T00:00:00.000Z");
    }

    @Test
    public void test07541() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07541");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.dayOfMonth();
        org.joda.time.LocalTime localTime2 = org.joda.time.LocalTime.fromMillisOfDay((long) (byte) 1);
        org.joda.time.Chronology chronology3 = localTime2.getChronology();
        boolean boolean4 = dateTimeFieldType0.isSupported(chronology3);
        org.joda.time.MutableDateTime mutableDateTime5 = new org.joda.time.MutableDateTime(chronology3);
        mutableDateTime5.addSeconds(581);
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(localTime2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
    }

    @Test
    public void test07542() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07542");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property1 = mutableDateTime0.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime3 = property1.set(45);
        org.joda.time.MutableDateTime mutableDateTime4 = property1.roundFloor();
        org.joda.time.MutableDateTime mutableDateTime6 = property1.add(45);
        java.lang.String str7 = mutableDateTime6.toString();
        org.joda.time.MutableDateTime mutableDateTime8 = org.joda.time.MutableDateTime.now();
        mutableDateTime8.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime11 = mutableDateTime8.copy();
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.Period period14 = new org.joda.time.Period(readableDuration12, readableInstant13);
        org.joda.time.Period period16 = period14.withDays((int) (byte) 1);
        org.joda.time.Period period18 = period14.minusMillis(1424);
        mutableDateTime8.add((org.joda.time.ReadablePeriod) period14);
        mutableDateTime6.add((org.joda.time.ReadablePeriod) period14);
        org.joda.time.MutableDateTime.Property property21 = mutableDateTime6.year();
        org.joda.time.MutableDateTime mutableDateTime22 = property21.roundCeiling();
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.PeriodType periodType25 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod26 = new org.joda.time.MutablePeriod(readableInstant23, readableInstant24, periodType25);
        mutablePeriod26.setYears((int) '#');
        mutablePeriod26.setSeconds((int) 'a');
        mutablePeriod26.setPeriod((long) 0, (-1L));
        mutablePeriod26.addHours((-1));
        mutablePeriod26.clear();
        mutablePeriod26.addMillis(0);
        mutablePeriod26.addMillis((int) (byte) 10);
        int int41 = mutablePeriod26.getDays();
        mutablePeriod26.setDays(2723);
        mutableDateTime22.add((org.joda.time.ReadablePeriod) mutablePeriod26, 26333675);
        mutableDateTime22.addHours(73619);
        mutableDateTime22.addMonths(49);
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(mutableDateTime3);
        org.junit.Assert.assertNotNull(mutableDateTime4);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "9000-01-01T00:00:00.000Z" + "'", str7, "9000-01-01T00:00:00.000Z");
        org.junit.Assert.assertNotNull(mutableDateTime8);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(mutableDateTime22);
        org.junit.Assert.assertNotNull(periodType25);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
    }

    @Test
    public void test07543() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07543");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.withHourOfDay(10);
        org.joda.time.LocalDateTime.Property property5 = localDateTime4.dayOfMonth();
        org.joda.time.LocalDateTime.Property property6 = localDateTime4.weekyear();
        java.lang.String str7 = property6.getName();
        org.joda.time.LocalDateTime localDateTime8 = property6.getLocalDateTime();
        org.joda.time.LocalDateTime localDateTime10 = property6.setCopy("990");
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.withHourOfDay(10);
        org.joda.time.LocalDateTime.Property property14 = localDateTime11.hourOfDay();
        org.joda.time.DateTimeField dateTimeField15 = property14.getField();
        boolean boolean17 = property14.equals((java.lang.Object) 10L);
        long long18 = property14.remainder();
        java.lang.String str19 = property14.getAsText();
        org.joda.time.LocalDateTime localDateTime20 = property14.roundHalfCeilingCopy();
        org.joda.time.LocalDateTime localDateTime22 = localDateTime20.withMillisOfDay(62172);
        org.joda.time.Duration duration24 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration26 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration29 = duration26.withDurationAdded((long) (short) 100, (int) ' ');
        boolean boolean30 = duration24.isLongerThan((org.joda.time.ReadableDuration) duration29);
        org.joda.time.Duration duration32 = duration24.minus(966164L);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.Period period34 = duration32.toPeriod(chronology33);
        org.joda.time.MutableDateTime mutableDateTime35 = org.joda.time.MutableDateTime.now();
        mutableDateTime35.add((long) 'a');
        org.joda.time.MutableDateTime.Property property38 = mutableDateTime35.yearOfCentury();
        org.joda.time.Duration duration40 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period41 = duration40.toPeriod();
        org.joda.time.Duration duration43 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration46 = duration43.withDurationAdded((long) (short) 100, (int) ' ');
        org.joda.time.Duration duration47 = duration40.minus((org.joda.time.ReadableDuration) duration46);
        mutableDateTime35.add((org.joda.time.ReadableDuration) duration40);
        java.lang.String str49 = duration40.toString();
        org.joda.time.Duration duration50 = duration32.minus((org.joda.time.ReadableDuration) duration40);
        org.joda.time.LocalDateTime localDateTime51 = localDateTime20.plus((org.joda.time.ReadableDuration) duration40);
        org.joda.time.LocalDateTime localDateTime52 = localDateTime10.withFields((org.joda.time.ReadablePartial) localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "weekyear" + "'", str7, "weekyear");
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1426488L + "'", long18 == 1426488L);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "7" + "'", str19, "7");
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertNotNull(period34);
        org.junit.Assert.assertNotNull(mutableDateTime35);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(duration40);
        org.junit.Assert.assertNotNull(period41);
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertNotNull(duration46);
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "PT86400S" + "'", str49, "PT86400S");
        org.junit.Assert.assertNotNull(duration50);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertNotNull(localDateTime52);
    }

    @Test
    public void test07544() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07544");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.monthOfYear();
        org.joda.time.DateTimeField dateTimeField2 = property1.getField();
        org.joda.time.LocalDate localDate3 = property1.roundCeilingCopy();
        org.joda.time.LocalDate localDate5 = localDate3.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDate localDate7 = localDate3.withWeekOfWeekyear(46);
        org.joda.time.PeriodType periodType10 = null;
        org.joda.time.Period period11 = new org.joda.time.Period((long) 100, 1L, periodType10);
        org.joda.time.Period period13 = period11.minusSeconds((-1));
        java.lang.String str14 = period11.toString();
        org.joda.time.Period period15 = period11.toPeriod();
        org.joda.time.PeriodType periodType16 = period11.getPeriodType();
        org.joda.time.LocalDate localDate17 = localDate7.minus((org.joda.time.ReadablePeriod) period11);
        org.joda.time.LocalDate.Property property18 = localDate7.dayOfMonth();
        org.joda.time.MutableDateTime mutableDateTime19 = org.joda.time.MutableDateTime.now();
        java.lang.Object obj20 = mutableDateTime19.clone();
        mutableDateTime19.setTime((long) 46);
        org.joda.time.MutableDateTime.Property property23 = mutableDateTime19.dayOfWeek();
        org.joda.time.MutableDateTime mutableDateTime25 = property23.add(1L);
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.UTC;
        java.util.TimeZone timeZone27 = dateTimeZone26.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.UTC;
        long long30 = dateTimeZone26.getMillisKeepLocal(dateTimeZone28, (long) 44);
        org.joda.time.DateTime dateTime31 = org.joda.time.DateTime.now(dateTimeZone26);
        mutableDateTime25.setZoneRetainFields(dateTimeZone26);
        java.util.Locale.Builder builder34 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder35 = builder34.clear();
        java.util.Locale locale36 = builder35.build();
        java.lang.String str37 = dateTimeZone26.getName(555370422L, locale36);
        org.joda.time.DateTime dateTime38 = localDate7.toDateTimeAtCurrentTime(dateTimeZone26);
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.forOffsetHours(23);
        java.util.TimeZone timeZone41 = dateTimeZone40.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.forTimeZone(timeZone41);
        org.joda.time.Interval interval43 = localDate7.toInterval(dateTimeZone42);
        org.joda.time.LocalDate localDate44 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property45 = localDate44.monthOfYear();
        org.joda.time.DateTimeField dateTimeField46 = property45.getField();
        org.joda.time.LocalDate localDate47 = property45.roundCeilingCopy();
        org.joda.time.LocalDate localDate49 = localDate47.withCenturyOfEra((int) (short) 1);
        org.joda.time.DateTime dateTime50 = localDate47.toDateTimeAtStartOfDay();
        org.joda.time.DateTime dateTime51 = dateTime50.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime52 = dateTime50.toDateTime();
        java.util.GregorianCalendar gregorianCalendar53 = dateTime50.toGregorianCalendar();
        org.joda.time.LocalDate localDate54 = org.joda.time.LocalDate.fromCalendarFields((java.util.Calendar) gregorianCalendar53);
        org.joda.time.LocalDate localDate55 = org.joda.time.LocalDate.fromCalendarFields((java.util.Calendar) gregorianCalendar53);
        org.joda.time.LocalDate localDate56 = localDate7.withFields((org.joda.time.ReadablePartial) localDate55);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "PT0.099S" + "'", str14, "PT0.099S");
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(periodType16);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(mutableDateTime19);
        org.junit.Assert.assertNotNull(obj20);
// flaky:         org.junit.Assert.assertEquals(obj20.toString(), "2022-02-22T07:23:46.523Z");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj20), "2022-02-22T07:23:46.523Z");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj20), "2022-02-22T07:23:46.523Z");
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(mutableDateTime25);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertNotNull(timeZone27);
// flaky:         org.junit.Assert.assertEquals(timeZone27.getDisplayName(), "\u534f\u8c03\u4e16\u754c\u65f6\u95f4");
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 44L + "'", long30 == 44L);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "+00:00" + "'", str37, "+00:00");
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertNotNull(timeZone41);
        org.junit.Assert.assertEquals(timeZone41.getDisplayName(), "GMT+23:00");
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertNotNull(interval43);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(localDate47);
        org.junit.Assert.assertNotNull(localDate49);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(gregorianCalendar53);
        org.junit.Assert.assertNotNull(localDate54);
        org.junit.Assert.assertNotNull(localDate55);
        org.junit.Assert.assertNotNull(localDate56);
    }

    @Test
    public void test07545() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07545");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime2 = org.joda.time.MutableDateTime.parse("2022-02-22T07:17:57.517Z", dateTimeFormatter1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test07546() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07546");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime3 = mutableDateTime0.copy();
        org.joda.time.MutableDateTime.Property property4 = mutableDateTime0.weekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime5 = property4.roundHalfFloor();
        org.joda.time.MutableDateTime mutableDateTime7 = property4.add((long) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.UTC;
        java.util.TimeZone timeZone9 = dateTimeZone8.toTimeZone();
        org.joda.time.MutableDateTime mutableDateTime10 = mutableDateTime7.toMutableDateTime(dateTimeZone8);
        int int12 = dateTimeZone8.getStandardOffset(60000L);
        java.util.Locale.Builder builder14 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder15 = builder14.clear();
        java.util.Locale locale16 = java.util.Locale.GERMAN;
        java.lang.String str17 = locale16.getDisplayName();
        java.lang.String str18 = locale16.getISO3Language();
        java.util.Locale.Builder builder19 = builder15.setLocale(locale16);
        java.lang.String str20 = dateTimeZone8.getName(950707L, locale16);
        java.lang.String str21 = dateTimeZone8.toString();
        long long24 = dateTimeZone8.convertLocalToUTC(1289494L, true);
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(mutableDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(mutableDateTime5);
        org.junit.Assert.assertNotNull(mutableDateTime7);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(timeZone9);
// flaky:         org.junit.Assert.assertEquals(timeZone9.getDisplayName(), "\u534f\u8c03\u4e16\u754c\u65f6\u95f4");
        org.junit.Assert.assertNotNull(mutableDateTime10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "de");
// flaky:         org.junit.Assert.assertEquals("'" + str17 + "' != '" + "\u5fb7\u6587" + "'", str17, "\u5fb7\u6587");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "deu" + "'", str18, "deu");
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "+00:00" + "'", str20, "+00:00");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "UTC" + "'", str21, "UTC");
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 1289494L + "'", long24 == 1289494L);
    }

    @Test
    public void test07547() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07547");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.dayOfMonth();
        boolean boolean2 = localDate0.isSupported(dateTimeFieldType1);
        org.joda.time.LocalDate.Property property3 = localDate0.yearOfEra();
        org.joda.time.Instant instant4 = new org.joda.time.Instant();
        org.joda.time.Instant instant6 = instant4.withMillis(0L);
        org.joda.time.Duration duration8 = org.joda.time.Duration.standardDays((long) (byte) 1);
        java.lang.String str9 = duration8.toString();
        org.joda.time.Instant instant10 = instant4.minus((org.joda.time.ReadableDuration) duration8);
        int int11 = property3.getDifference((org.joda.time.ReadableInstant) instant4);
        org.joda.time.MutableDateTime mutableDateTime12 = instant4.toMutableDateTime();
        int int13 = mutableDateTime12.getHourOfDay();
        org.joda.time.Duration duration15 = org.joda.time.Duration.standardHours((long) 2723);
        org.joda.time.MutablePeriod mutablePeriod16 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) mutableDateTime12, (org.joda.time.ReadableDuration) duration15);
        int int17 = mutablePeriod16.getWeeks();
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property20 = localDate19.monthOfYear();
        org.joda.time.DateTimeField dateTimeField21 = property20.getField();
        org.joda.time.LocalDate localDate22 = property20.roundCeilingCopy();
        org.joda.time.Chronology chronology23 = localDate22.getChronology();
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(53, 0);
        org.joda.time.DateTime dateTime27 = localDate22.toDateTimeAtMidnight(dateTimeZone26);
        org.joda.time.DateTime.Property property28 = dateTime27.monthOfYear();
        org.joda.time.DateTime dateTime30 = dateTime27.minusMonths(53);
        org.joda.time.DateTime dateTime32 = dateTime27.minusMonths(60);
        org.joda.time.DateMidnight dateMidnight33 = dateTime32.toDateMidnight();
        int int34 = dateMidnight33.getYear();
        org.joda.time.PeriodType periodType35 = null;
        org.joda.time.MutablePeriod mutablePeriod36 = new org.joda.time.MutablePeriod(readableInstant18, (org.joda.time.ReadableInstant) dateMidnight33, periodType35);
        int int37 = dateMidnight33.getMonthOfYear();
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.UTC;
        java.util.TimeZone timeZone40 = dateTimeZone39.toTimeZone();
        long long42 = dateTimeZone39.previousTransition(100L);
        int int44 = dateTimeZone39.getStandardOffset(86403200L);
        org.joda.time.LocalDate localDate45 = new org.joda.time.LocalDate(dateTimeZone39);
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime((long) 37118622, dateTimeZone39);
        mutablePeriod16.setPeriod((org.joda.time.ReadableInstant) dateMidnight33, (org.joda.time.ReadableInstant) dateTime46);
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(instant6);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "PT86400S" + "'", str9, "PT86400S");
        org.junit.Assert.assertNotNull(instant10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(mutableDateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 7 + "'", int13 == 7);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 3 + "'", int17 == 3);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateMidnight33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 2017 + "'", int34 == 2017);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 3 + "'", int37 == 3);
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertNotNull(timeZone40);
// flaky:         org.junit.Assert.assertEquals(timeZone40.getDisplayName(), "\u534f\u8c03\u4e16\u754c\u65f6\u95f4");
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 100L + "'", long42 == 100L);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
    }

    @Test
    public void test07548() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07548");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property1 = mutableDateTime0.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime3 = property1.set(45);
        org.joda.time.MutableDateTime mutableDateTime4 = property1.roundFloor();
        org.joda.time.MutableDateTime mutableDateTime6 = property1.add(45);
        java.lang.String str7 = mutableDateTime6.toString();
        org.joda.time.MutableDateTime mutableDateTime8 = org.joda.time.MutableDateTime.now();
        mutableDateTime8.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime11 = mutableDateTime8.copy();
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.Period period14 = new org.joda.time.Period(readableDuration12, readableInstant13);
        org.joda.time.Period period16 = period14.withDays((int) (byte) 1);
        org.joda.time.Period period18 = period14.minusMillis(1424);
        mutableDateTime8.add((org.joda.time.ReadablePeriod) period14);
        mutableDateTime6.add((org.joda.time.ReadablePeriod) period14);
        org.joda.time.MutableDateTime.Property property21 = mutableDateTime6.year();
        org.joda.time.MutableDateTime mutableDateTime22 = property21.roundCeiling();
        org.joda.time.PeriodType periodType25 = null;
        org.joda.time.Period period26 = new org.joda.time.Period((long) 100, 1L, periodType25);
        org.joda.time.Period period28 = period26.minusSeconds((-1));
        java.lang.String str29 = period26.toString();
        org.joda.time.Period period30 = period26.toPeriod();
        org.joda.time.Period period32 = period30.withMillis(0);
        org.joda.time.Period period34 = period30.plusSeconds((int) '4');
        mutableDateTime22.add((org.joda.time.ReadablePeriod) period30);
        int int36 = period30.getYears();
        org.joda.time.Period period38 = period30.minusYears(62187);
        int[] intArray39 = period38.getValues();
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(mutableDateTime3);
        org.junit.Assert.assertNotNull(mutableDateTime4);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "9000-01-01T00:00:00.000Z" + "'", str7, "9000-01-01T00:00:00.000Z");
        org.junit.Assert.assertNotNull(mutableDateTime8);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(mutableDateTime22);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "PT0.099S" + "'", str29, "PT0.099S");
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertNotNull(period34);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(period38);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-62187, 0, 0, 0, 0, 0, 0, -99]");
    }

    @Test
    public void test07549() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07549");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime3 = mutableDateTime0.copy();
        org.joda.time.MutableDateTime.Property property4 = mutableDateTime0.yearOfEra();
        org.joda.time.MutableDateTime mutableDateTime6 = property4.addWrapField(62151);
        org.joda.time.MutableDateTime mutableDateTime7 = mutableDateTime6.toMutableDateTime();
        mutableDateTime6.addMonths(26254);
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(mutableDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(mutableDateTime7);
    }

    @Test
    public void test07550() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07550");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.Instant instant3 = new org.joda.time.Instant();
        org.joda.time.Instant instant5 = instant3.withMillis(0L);
        org.joda.time.Chronology chronology6 = instant5.getChronology();
        org.joda.time.DurationField durationField7 = chronology6.eras();
        long long11 = chronology6.add(0L, (long) 2022, (int) '4');
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = dateTimeFormatter2.withChronology(chronology6);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = dateTimeFormatter2.withZoneUTC();
        boolean boolean14 = dateTimeFormatter2.isPrinter();
        java.lang.Integer int15 = dateTimeFormatter2.getPivotYear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter16 = dateTimeFormatter2.withZoneUTC();
        org.joda.time.format.DateTimeParser dateTimeParser17 = dateTimeFormatter2.getParser();
        boolean boolean18 = dateTimeFormatter2.isOffsetParsed();
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime24 = dateTime22.withZoneRetainFields(dateTimeZone23);
        org.joda.time.LocalDate localDate25 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property26 = localDate25.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.UTC;
        java.util.TimeZone timeZone28 = dateTimeZone27.toTimeZone();
        org.joda.time.DateTime dateTime29 = localDate25.toDateTimeAtCurrentTime(dateTimeZone27);
        int int30 = dateTime24.compareTo((org.joda.time.ReadableInstant) dateTime29);
        org.joda.time.DateTime dateTime32 = dateTime29.minusWeeks(44);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime(chronology33);
        org.joda.time.DateTime dateTime36 = dateTime34.plusMinutes(15);
        org.joda.time.Chronology chronology37 = dateTime34.getChronology();
        java.lang.String str38 = chronology37.toString();
        org.joda.time.DateTimeField dateTimeField39 = chronology37.dayOfYear();
        org.joda.time.DateTime dateTime40 = dateTime29.withChronology(chronology37);
        org.joda.time.ReadableDuration readableDuration41 = null;
        org.joda.time.ReadableInstant readableInstant42 = null;
        org.joda.time.ReadableInstant readableInstant43 = null;
        org.joda.time.PeriodType periodType44 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod45 = new org.joda.time.MutablePeriod(readableInstant42, readableInstant43, periodType44);
        org.joda.time.DurationFieldType durationFieldType47 = periodType44.getFieldType((int) (short) 0);
        org.joda.time.PeriodType periodType48 = periodType44.withMillisRemoved();
        org.joda.time.Period period49 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime40, readableDuration41, periodType48);
        org.joda.time.Period period50 = new org.joda.time.Period(0L, periodType48);
        org.joda.time.format.DateTimePrinter dateTimePrinter51 = null;
        org.joda.time.format.DateTimeParser dateTimeParser52 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter53 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter51, dateTimeParser52);
        org.joda.time.Instant instant54 = new org.joda.time.Instant();
        org.joda.time.Instant instant56 = instant54.withMillis(0L);
        org.joda.time.Chronology chronology57 = instant56.getChronology();
        org.joda.time.DurationField durationField58 = chronology57.eras();
        long long62 = chronology57.add(0L, (long) 2022, (int) '4');
        org.joda.time.format.DateTimeFormatter dateTimeFormatter63 = dateTimeFormatter53.withChronology(chronology57);
        org.joda.time.MutablePeriod mutablePeriod64 = new org.joda.time.MutablePeriod(3600000L, periodType48, chronology57);
        org.joda.time.DateTimeZone dateTimeZone65 = chronology57.getZone();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter66 = dateTimeFormatter2.withZone(dateTimeZone65);
        org.joda.time.LocalDate localDate67 = new org.joda.time.LocalDate(dateTimeZone65);
        org.joda.time.LocalDate localDate68 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property69 = localDate68.monthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType70 = org.joda.time.DateTimeFieldType.minuteOfDay();
        boolean boolean71 = localDate68.isSupported(dateTimeFieldType70);
        int int72 = localDate68.getDayOfYear();
        org.joda.time.DateTimeZone dateTimeZone73 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateMidnight dateMidnight74 = localDate68.toDateMidnight(dateTimeZone73);
        org.joda.time.LocalDate.Property property75 = localDate68.year();
        org.joda.time.LocalDate localDate76 = property75.roundHalfEvenCopy();
        org.joda.time.LocalDate.Property property77 = localDate76.dayOfMonth();
        org.joda.time.LocalDate localDate78 = property77.withMaximumValue();
        int int79 = localDate78.getMonthOfYear();
        int int80 = localDate78.getWeekOfWeekyear();
        org.joda.time.DateTime dateTime81 = localDate78.toDateTimeAtMidnight();
        org.joda.time.LocalDate.Property property82 = localDate78.weekyear();
        org.joda.time.LocalDate localDate83 = localDate67.withFields((org.joda.time.ReadablePartial) localDate78);
        org.joda.time.DateTimeZone dateTimeZone85 = org.joda.time.DateTimeZone.forOffsetHours(23);
        java.util.TimeZone timeZone86 = dateTimeZone85.toTimeZone();
        java.util.TimeZone timeZone87 = dateTimeZone85.toTimeZone();
        org.joda.time.DateTime dateTime88 = localDate83.toDateTimeAtStartOfDay(dateTimeZone85);
        org.joda.time.MutableDateTime mutableDateTime89 = org.joda.time.MutableDateTime.now(dateTimeZone85);
        org.junit.Assert.assertNotNull(instant5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 105144L + "'", long11 == 105144L);
        org.junit.Assert.assertNotNull(dateTimeFormatter12);
        org.junit.Assert.assertNotNull(dateTimeFormatter13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(int15);
        org.junit.Assert.assertNotNull(dateTimeFormatter16);
        org.junit.Assert.assertNull(dateTimeParser17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertNotNull(timeZone28);
// flaky:         org.junit.Assert.assertEquals(timeZone28.getDisplayName(), "\u534f\u8c03\u4e16\u754c\u65f6\u95f4");
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "ISOChronology[UTC]" + "'", str38, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(periodType44);
        org.junit.Assert.assertNotNull(durationFieldType47);
        org.junit.Assert.assertNotNull(periodType48);
        org.junit.Assert.assertNotNull(instant56);
        org.junit.Assert.assertNotNull(chronology57);
        org.junit.Assert.assertNotNull(durationField58);
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 105144L + "'", long62 == 105144L);
        org.junit.Assert.assertNotNull(dateTimeFormatter63);
        org.junit.Assert.assertNotNull(dateTimeZone65);
        org.junit.Assert.assertNotNull(dateTimeFormatter66);
        org.junit.Assert.assertNotNull(property69);
        org.junit.Assert.assertNotNull(dateTimeFieldType70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 53 + "'", int72 == 53);
        org.junit.Assert.assertNotNull(dateTimeZone73);
        org.junit.Assert.assertNotNull(dateMidnight74);
        org.junit.Assert.assertNotNull(property75);
        org.junit.Assert.assertNotNull(localDate76);
        org.junit.Assert.assertNotNull(property77);
        org.junit.Assert.assertNotNull(localDate78);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 1 + "'", int79 == 1);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 5 + "'", int80 == 5);
        org.junit.Assert.assertNotNull(dateTime81);
        org.junit.Assert.assertNotNull(property82);
        org.junit.Assert.assertNotNull(localDate83);
        org.junit.Assert.assertNotNull(dateTimeZone85);
        org.junit.Assert.assertNotNull(timeZone86);
        org.junit.Assert.assertEquals(timeZone86.getDisplayName(), "GMT+23:00");
        org.junit.Assert.assertNotNull(timeZone87);
        org.junit.Assert.assertEquals(timeZone87.getDisplayName(), "GMT+23:00");
        org.junit.Assert.assertNotNull(dateTime88);
        org.junit.Assert.assertNotNull(mutableDateTime89);
    }

    @Test
    public void test07551() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07551");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) (short) -1);
        mutableDateTime1.setSecondOfMinute(53);
        int int4 = mutableDateTime1.getEra();
        org.joda.time.DateTimeField dateTimeField5 = mutableDateTime1.getRoundingField();
        org.joda.time.MutableDateTime.Property property6 = mutableDateTime1.yearOfCentury();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 1, chronology8);
        int int10 = dateTime9.getMinuteOfDay();
        int int11 = dateTime9.getEra();
        int int12 = dateTime9.getWeekOfWeekyear();
        org.joda.time.Instant instant13 = dateTime9.toInstant();
        org.joda.time.DateTime.Property property14 = dateTime9.era();
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property16 = localDate15.monthOfYear();
        org.joda.time.DateTimeField dateTimeField17 = property16.getField();
        org.joda.time.LocalDate localDate18 = property16.roundCeilingCopy();
        org.joda.time.Chronology chronology19 = localDate18.getChronology();
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(53, 0);
        org.joda.time.DateTime dateTime23 = localDate18.toDateTimeAtMidnight(dateTimeZone22);
        org.joda.time.DateTime dateTime24 = dateTime9.withZoneRetainFields(dateTimeZone22);
        mutableDateTime1.setMillis((org.joda.time.ReadableInstant) dateTime24);
        org.joda.time.Duration duration28 = new org.joda.time.Duration((long) (-1), 417L);
        mutableDateTime1.add((org.joda.time.ReadableDuration) duration28, 53);
        org.joda.time.MutableDateTime.Property property31 = mutableDateTime1.secondOfDay();
        mutableDateTime1.addDays(121);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNull(dateTimeField5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(instant13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(property31);
    }

    @Test
    public void test07552() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07552");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period2 = duration1.toPeriod();
        org.joda.time.MutableDateTime mutableDateTime3 = org.joda.time.MutableDateTime.now();
        mutableDateTime3.add((long) 'a');
        org.joda.time.MutableDateTime.Property property6 = mutableDateTime3.yearOfCentury();
        org.joda.time.Duration duration8 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period9 = duration8.toPeriod();
        org.joda.time.Duration duration11 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration14 = duration11.withDurationAdded((long) (short) 100, (int) ' ');
        org.joda.time.Duration duration15 = duration8.minus((org.joda.time.ReadableDuration) duration14);
        mutableDateTime3.add((org.joda.time.ReadableDuration) duration8);
        org.joda.time.MutableDateTime.Property property17 = mutableDateTime3.centuryOfEra();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime(chronology18);
        int int20 = dateTime19.getYearOfCentury();
        org.joda.time.DateTime dateTime22 = dateTime19.withSecondOfMinute(53);
        org.joda.time.Duration duration24 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period25 = duration24.toPeriod();
        org.joda.time.Duration duration27 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration30 = duration27.withDurationAdded((long) (short) 100, (int) ' ');
        org.joda.time.Duration duration31 = duration24.minus((org.joda.time.ReadableDuration) duration30);
        org.joda.time.ReadableInstant readableInstant32 = null;
        org.joda.time.ReadableInstant readableInstant33 = null;
        org.joda.time.PeriodType periodType34 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod35 = new org.joda.time.MutablePeriod(readableInstant32, readableInstant33, periodType34);
        org.joda.time.DurationFieldType durationFieldType37 = periodType34.getFieldType((int) (short) 0);
        java.lang.String str38 = periodType34.toString();
        org.joda.time.Period period39 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime19, (org.joda.time.ReadableDuration) duration24, periodType34);
        mutableDateTime3.add((org.joda.time.ReadableDuration) duration24);
        org.joda.time.Duration duration42 = duration1.withDurationAdded((org.joda.time.ReadableDuration) duration24, 0);
        org.joda.time.Duration duration44 = duration42.minus((long) 2045);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime(chronology45);
        int int47 = dateTime46.getYearOfCentury();
        int int48 = dateTime46.getWeekyear();
        org.joda.time.DateTime dateTime49 = dateTime46.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime.Property property50 = dateTime46.yearOfEra();
        org.joda.time.DateTime dateTime51 = property50.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime52 = property50.roundHalfEvenCopy();
        org.joda.time.Duration duration54 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Hours hours55 = duration54.toStandardHours();
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.DateTime dateTime57 = new org.joda.time.DateTime(chronology56);
        int int58 = dateTime57.getSecondOfMinute();
        org.joda.time.MutablePeriod mutablePeriod59 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration54, (org.joda.time.ReadableInstant) dateTime57);
        mutablePeriod59.addSeconds(292278993);
        mutablePeriod59.setPeriod((long) 45, 946312L);
        org.joda.time.DateTime dateTime65 = dateTime52.minus((org.joda.time.ReadablePeriod) mutablePeriod59);
        org.joda.time.DateTime dateTime68 = dateTime52.withDurationAdded((long) 1969, (int) (short) -1);
        org.joda.time.LocalDateTime localDateTime69 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime71 = localDateTime69.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime73 = localDateTime71.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime75 = localDateTime73.plusYears((int) (short) 100);
        org.joda.time.Duration duration77 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period78 = duration77.toPeriod();
        org.joda.time.Duration duration80 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration83 = duration80.withDurationAdded((long) (short) 100, (int) ' ');
        org.joda.time.Duration duration84 = duration77.minus((org.joda.time.ReadableDuration) duration83);
        org.joda.time.LocalDateTime localDateTime85 = localDateTime75.plus((org.joda.time.ReadableDuration) duration77);
        org.joda.time.DateTime dateTime86 = dateTime52.minus((org.joda.time.ReadableDuration) duration77);
        org.joda.time.Duration duration89 = new org.joda.time.Duration(947880L, (-229564796800L));
        boolean boolean90 = duration77.isEqual((org.joda.time.ReadableDuration) duration89);
        org.joda.time.Duration duration91 = duration44.plus((org.joda.time.ReadableDuration) duration89);
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(period2);
        org.junit.Assert.assertNotNull(mutableDateTime3);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 22 + "'", int20 == 22);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertNotNull(periodType34);
        org.junit.Assert.assertNotNull(durationFieldType37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "PeriodType[YearDayTime]" + "'", str38, "PeriodType[YearDayTime]");
        org.junit.Assert.assertNotNull(duration42);
        org.junit.Assert.assertNotNull(duration44);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 22 + "'", int47 == 22);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 2022 + "'", int48 == 2022);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(duration54);
        org.junit.Assert.assertNotNull(hours55);
// flaky:         org.junit.Assert.assertTrue("'" + int58 + "' != '" + 46 + "'", int58 == 46);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertNotNull(localDateTime69);
        org.junit.Assert.assertNotNull(localDateTime71);
        org.junit.Assert.assertNotNull(localDateTime73);
        org.junit.Assert.assertNotNull(localDateTime75);
        org.junit.Assert.assertNotNull(duration77);
        org.junit.Assert.assertNotNull(period78);
        org.junit.Assert.assertNotNull(duration80);
        org.junit.Assert.assertNotNull(duration83);
        org.junit.Assert.assertNotNull(duration84);
        org.junit.Assert.assertNotNull(localDateTime85);
        org.junit.Assert.assertNotNull(dateTime86);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNotNull(duration91);
    }

    @Test
    public void test07553() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07553");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime3 = mutableDateTime0.copy();
        org.joda.time.MutableDateTime.Property property4 = mutableDateTime0.weekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime5 = property4.roundHalfFloor();
        org.joda.time.MutableDateTime mutableDateTime6 = property4.roundHalfCeiling();
        org.joda.time.MutableDateTime mutableDateTime8 = property4.set(1);
        org.joda.time.MutableDateTime mutableDateTime9 = org.joda.time.MutableDateTime.now();
        mutableDateTime9.add((long) 'a');
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime9.yearOfCentury();
        org.joda.time.Duration duration14 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period15 = duration14.toPeriod();
        org.joda.time.Duration duration17 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration20 = duration17.withDurationAdded((long) (short) 100, (int) ' ');
        org.joda.time.Duration duration21 = duration14.minus((org.joda.time.ReadableDuration) duration20);
        mutableDateTime9.add((org.joda.time.ReadableDuration) duration14);
        org.joda.time.MutableDateTime.Property property23 = mutableDateTime9.centuryOfEra();
        mutableDateTime9.addYears(0);
        mutableDateTime9.setMinuteOfDay((int) (short) 0);
        org.joda.time.Instant instant28 = new org.joda.time.Instant();
        org.joda.time.Instant instant30 = instant28.withMillis(0L);
        org.joda.time.Duration duration32 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period33 = duration32.toPeriod();
        org.joda.time.Duration duration36 = duration32.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Instant instant37 = instant30.plus((org.joda.time.ReadableDuration) duration36);
        long long38 = instant37.getMillis();
        org.joda.time.Duration duration39 = new org.joda.time.Duration((org.joda.time.ReadableInstant) mutableDateTime9, (org.joda.time.ReadableInstant) instant37);
        mutableDateTime8.add((org.joda.time.ReadableDuration) duration39, 999);
        mutableDateTime8.setSecondOfMinute(24);
        java.lang.String str44 = mutableDateTime8.toString();
        org.joda.time.MutableDateTime.Property property45 = mutableDateTime8.secondOfMinute();
        org.joda.time.MutableDateTime mutableDateTime46 = property45.roundHalfCeiling();
        org.joda.time.MutableDateTime mutableDateTime47 = mutableDateTime46.toMutableDateTime();
        int int48 = mutableDateTime46.getHourOfDay();
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(mutableDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(mutableDateTime5);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(mutableDateTime8);
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(instant30);
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertNotNull(instant37);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 86400000L + "'", long38 == 86400000L);
// flaky:         org.junit.Assert.assertEquals("'" + str44 + "' != '" + "-50070-09-17T10:58:24.956Z" + "'", str44, "-50070-09-17T10:58:24.956Z");
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(mutableDateTime46);
        org.junit.Assert.assertNotNull(mutableDateTime47);
// flaky:         org.junit.Assert.assertTrue("'" + int48 + "' != '" + 10 + "'", int48 == 10);
    }

    @Test
    public void test07554() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07554");
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.parse("-50070-09-17T13:50:24.612Z");
        org.junit.Assert.assertNotNull(mutableDateTime1);
    }

    @Test
    public void test07555() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07555");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.add((long) 'a');
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime0.yearOfCentury();
        mutableDateTime0.addSeconds(0);
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.Period period10 = new org.joda.time.Period(readableDuration8, readableInstant9);
        org.joda.time.PeriodType periodType13 = null;
        org.joda.time.Period period14 = new org.joda.time.Period((long) 100, 1L, periodType13);
        org.joda.time.Period period16 = period14.minusSeconds((-1));
        java.lang.String str17 = period14.toString();
        org.joda.time.Period period18 = period14.toPeriod();
        org.joda.time.PeriodType periodType19 = period14.getPeriodType();
        org.joda.time.Period period20 = period10.normalizedStandard(periodType19);
        org.joda.time.DurationFieldType durationFieldType21 = null;
        int int22 = periodType19.indexOf(durationFieldType21);
        org.joda.time.Instant instant23 = new org.joda.time.Instant();
        org.joda.time.Instant instant25 = instant23.withMillis(0L);
        org.joda.time.Chronology chronology26 = instant25.getChronology();
        org.joda.time.DurationField durationField27 = chronology26.eras();
        org.joda.time.LocalTime localTime28 = org.joda.time.LocalTime.now(chronology26);
        org.joda.time.DurationField durationField29 = chronology26.eras();
        org.joda.time.DateTimeField dateTimeField30 = chronology26.hourOfDay();
        org.joda.time.MutablePeriod mutablePeriod31 = new org.joda.time.MutablePeriod((long) 12, (long) 292278993, periodType19, chronology26);
        org.joda.time.MutableDateTime mutableDateTime32 = mutableDateTime0.toMutableDateTime(chronology26);
        java.lang.Object obj33 = mutableDateTime0.clone();
        org.joda.time.MutableDateTime.Property property34 = mutableDateTime0.weekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime36 = property34.add(62215);
        org.joda.time.Instant instant37 = new org.joda.time.Instant();
        org.joda.time.Instant instant39 = instant37.withMillis(0L);
        org.joda.time.Chronology chronology40 = instant39.getChronology();
        org.joda.time.DurationField durationField41 = chronology40.eras();
        org.joda.time.LocalTime localTime42 = org.joda.time.LocalTime.now(chronology40);
        org.joda.time.DurationField durationField43 = chronology40.eras();
        org.joda.time.DateTimeField dateTimeField44 = chronology40.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField45 = chronology40.clockhourOfHalfday();
        mutableDateTime36.setRounding(dateTimeField45);
        long long48 = dateTimeField45.roundHalfCeiling((long) 2618423);
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "PT0.099S" + "'", str17, "PT0.099S");
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(periodType19);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(instant25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(localTime28);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(mutableDateTime32);
        org.junit.Assert.assertNotNull(obj33);
// flaky:         org.junit.Assert.assertEquals(obj33.toString(), "2022-02-22T07:23:47.009Z");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj33), "2022-02-22T07:23:47.009Z");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj33), "2022-02-22T07:23:47.009Z");
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(mutableDateTime36);
        org.junit.Assert.assertNotNull(instant39);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(durationField41);
        org.junit.Assert.assertNotNull(localTime42);
        org.junit.Assert.assertNotNull(durationField43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 3600000L + "'", long48 == 3600000L);
    }

    @Test
    public void test07556() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07556");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) 891);
    }

    @Test
    public void test07557() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07557");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime3 = mutableDateTime0.copy();
        org.joda.time.MutableDateTime.Property property4 = mutableDateTime0.yearOfCentury();
        mutableDateTime0.setHourOfDay(9);
        org.joda.time.MutableDateTime.Property property7 = mutableDateTime0.year();
        org.joda.time.Instant instant8 = new org.joda.time.Instant();
        org.joda.time.Instant instant10 = instant8.withMillis(0L);
        org.joda.time.Chronology chronology11 = instant10.getChronology();
        org.joda.time.DurationField durationField12 = chronology11.eras();
        long long16 = chronology11.add(0L, (long) 2022, (int) '4');
        org.joda.time.DateTimeField dateTimeField17 = chronology11.monthOfYear();
        org.joda.time.DateTimeField dateTimeField18 = chronology11.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField19 = chronology11.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField20 = chronology11.monthOfYear();
        org.joda.time.DateTimeField dateTimeField21 = chronology11.clockhourOfDay();
        org.joda.time.DateTime dateTime22 = mutableDateTime0.toDateTime(chronology11);
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(mutableDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(instant10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 105144L + "'", long16 == 105144L);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTime22);
    }

    @Test
    public void test07558() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07558");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        java.lang.Object obj1 = mutableDateTime0.clone();
        mutableDateTime0.setTime((long) 46);
        org.joda.time.MutableDateTime.Property property4 = mutableDateTime0.dayOfWeek();
        org.joda.time.MutableDateTime.Property property5 = mutableDateTime0.weekyear();
        int int6 = mutableDateTime0.getMinuteOfHour();
        mutableDateTime0.setMillisOfDay(26333);
        mutableDateTime0.addYears(157);
        mutableDateTime0.addHours(26446691);
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(obj1);
// flaky:         org.junit.Assert.assertEquals(obj1.toString(), "2022-02-22T07:23:46.957Z");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj1), "2022-02-22T07:23:46.957Z");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj1), "2022-02-22T07:23:46.957Z");
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
    }

    @Test
    public void test07559() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07559");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.Instant instant3 = new org.joda.time.Instant();
        org.joda.time.Instant instant5 = instant3.withMillis(0L);
        org.joda.time.Chronology chronology6 = instant5.getChronology();
        org.joda.time.DurationField durationField7 = chronology6.eras();
        long long11 = chronology6.add(0L, (long) 2022, (int) '4');
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = dateTimeFormatter2.withChronology(chronology6);
        java.lang.Object obj13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(obj13);
        org.joda.time.LocalDateTime localDateTime15 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.withHourOfDay(10);
        org.joda.time.DateTimeField dateTimeField21 = localDateTime19.getField((int) (byte) 0);
        long long23 = dateTimeField21.roundHalfEven((long) 1);
        int int24 = dateTime14.get(dateTimeField21);
        org.joda.time.LocalDateTime localDateTime25 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime27 = localDateTime25.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime27.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime29.withCenturyOfEra((int) 'a');
        java.util.Locale locale33 = java.util.Locale.GERMAN;
        java.lang.String str34 = locale33.getDisplayName();
        java.lang.String str35 = dateTimeField21.getAsText((org.joda.time.ReadablePartial) localDateTime29, 53, locale33);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter36 = dateTimeFormatter2.withLocale(locale33);
        boolean boolean37 = dateTimeFormatter2.isPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter38 = dateTimeFormatter2.withOffsetParsed();
        org.joda.time.format.DateTimePrinter dateTimePrinter39 = dateTimeFormatter2.getPrinter();
        org.joda.time.Instant instant41 = new org.joda.time.Instant();
        org.joda.time.Instant instant43 = instant41.withMillis(0L);
        org.joda.time.Chronology chronology44 = instant43.getChronology();
        org.joda.time.DurationField durationField45 = chronology44.eras();
        long long49 = chronology44.add(0L, (long) 2022, (int) '4');
        org.joda.time.DateTimeField dateTimeField50 = chronology44.monthOfYear();
        org.joda.time.DateTimeField dateTimeField51 = chronology44.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField52 = chronology44.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField53 = chronology44.hourOfDay();
        org.joda.time.DateTimeField dateTimeField54 = chronology44.yearOfCentury();
        java.util.Locale locale55 = java.util.Locale.FRENCH;
        java.lang.String str56 = locale55.getDisplayCountry();
        boolean boolean57 = locale55.hasExtensions();
        java.util.Set<java.lang.Character> charSet58 = locale55.getExtensionKeys();
        java.lang.String str59 = locale55.getDisplayVariant();
        java.lang.String str60 = locale55.getISO3Language();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket61 = new org.joda.time.format.DateTimeParserBucket((long) 96, chronology44, locale55);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter62 = dateTimeFormatter2.withChronology(chronology44);
        org.junit.Assert.assertNotNull(instant5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 105144L + "'", long11 == 105144L);
        org.junit.Assert.assertNotNull(dateTimeFormatter12);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2022 + "'", int24 == 2022);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "de");
// flaky:         org.junit.Assert.assertEquals("'" + str34 + "' != '" + "\u5fb7\u6587" + "'", str34, "\u5fb7\u6587");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "53" + "'", str35, "53");
        org.junit.Assert.assertNotNull(dateTimeFormatter36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter38);
        org.junit.Assert.assertNull(dateTimePrinter39);
        org.junit.Assert.assertNotNull(instant43);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(durationField45);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 105144L + "'", long49 == 105144L);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(charSet58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "fra" + "'", str60, "fra");
        org.junit.Assert.assertNotNull(dateTimeFormatter62);
    }

    @Test
    public void test07560() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07560");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.UTC;
        java.util.Locale locale3 = java.util.Locale.GERMAN;
        java.lang.String str4 = locale3.getDisplayName();
        java.lang.String str5 = dateTimeZone1.getName(100L, locale3);
        org.joda.time.MutableDateTime mutableDateTime6 = new org.joda.time.MutableDateTime(948227L, dateTimeZone1);
        org.joda.time.MutableDateTime.Property property7 = mutableDateTime6.year();
        mutableDateTime6.addWeeks(2121);
        org.joda.time.MutableDateTime.Property property10 = mutableDateTime6.monthOfYear();
        org.joda.time.MutableDateTime mutableDateTime11 = property10.roundHalfFloor();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "de");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u5fb7\u6587" + "'", str4, "\u5fb7\u6587");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "+00:00" + "'", str5, "+00:00");
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(mutableDateTime11);
    }

    @Test
    public void test07561() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07561");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.add((long) 'a');
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime0.yearOfCentury();
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period6 = duration5.toPeriod();
        org.joda.time.Duration duration8 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration11 = duration8.withDurationAdded((long) (short) 100, (int) ' ');
        org.joda.time.Duration duration12 = duration5.minus((org.joda.time.ReadableDuration) duration11);
        mutableDateTime0.add((org.joda.time.ReadableDuration) duration5);
        org.joda.time.MutableDateTime.Property property14 = mutableDateTime0.centuryOfEra();
        mutableDateTime0.addHours((int) (byte) 10);
        mutableDateTime0.addWeeks(20);
        org.joda.time.DateTimeField dateTimeField19 = mutableDateTime0.getRoundingField();
        org.joda.time.MutableDateTime mutableDateTime20 = org.joda.time.MutableDateTime.now();
        java.lang.Object obj21 = mutableDateTime20.clone();
        mutableDateTime20.setTime((long) 46);
        org.joda.time.MutableDateTime.Property property24 = mutableDateTime20.dayOfWeek();
        org.joda.time.MutableDateTime mutableDateTime26 = property24.add(1L);
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.UTC;
        java.util.TimeZone timeZone28 = dateTimeZone27.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.UTC;
        long long31 = dateTimeZone27.getMillisKeepLocal(dateTimeZone29, (long) 44);
        org.joda.time.DateTime dateTime32 = org.joda.time.DateTime.now(dateTimeZone27);
        mutableDateTime26.setZoneRetainFields(dateTimeZone27);
        mutableDateTime26.addSeconds((int) (short) 10);
        java.lang.Object obj36 = mutableDateTime26.clone();
        org.joda.time.MutableDateTime.Property property37 = mutableDateTime26.era();
        boolean boolean38 = mutableDateTime0.isAfter((org.joda.time.ReadableInstant) mutableDateTime26);
        mutableDateTime26.addMonths(62262);
        org.joda.time.MutableDateTime.Property property41 = mutableDateTime26.millisOfDay();
        org.joda.time.MutableDateTime.Property property42 = mutableDateTime26.monthOfYear();
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNull(dateTimeField19);
        org.junit.Assert.assertNotNull(mutableDateTime20);
        org.junit.Assert.assertNotNull(obj21);
// flaky:         org.junit.Assert.assertEquals(obj21.toString(), "2022-02-22T07:23:47.000Z");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj21), "2022-02-22T07:23:47.000Z");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj21), "2022-02-22T07:23:47.000Z");
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(mutableDateTime26);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertNotNull(timeZone28);
// flaky:         org.junit.Assert.assertEquals(timeZone28.getDisplayName(), "\u534f\u8c03\u4e16\u754c\u65f6\u95f4");
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 44L + "'", long31 == 44L);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(obj36);
        org.junit.Assert.assertEquals(obj36.toString(), "2022-02-23T00:00:10.046Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj36), "2022-02-23T00:00:10.046Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj36), "2022-02-23T00:00:10.046Z");
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(property42);
    }

    @Test
    public void test07562() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07562");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap1 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.Locale.LanguageRange> languageRangeList2 = java.util.Locale.LanguageRange.parse("2022-02-22T07:22:26.583Z", strMap1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=2022-02-22t07:22:26.583z");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test07563() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07563");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        org.joda.time.DateTime dateTime3 = dateTime1.plusMinutes(15);
        org.joda.time.MutableDateTime mutableDateTime4 = org.joda.time.MutableDateTime.now();
        mutableDateTime4.add((long) 'a');
        org.joda.time.MutableDateTime.Property property7 = mutableDateTime4.yearOfCentury();
        mutableDateTime4.addSeconds(0);
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.Period period14 = new org.joda.time.Period(readableDuration12, readableInstant13);
        org.joda.time.PeriodType periodType17 = null;
        org.joda.time.Period period18 = new org.joda.time.Period((long) 100, 1L, periodType17);
        org.joda.time.Period period20 = period18.minusSeconds((-1));
        java.lang.String str21 = period18.toString();
        org.joda.time.Period period22 = period18.toPeriod();
        org.joda.time.PeriodType periodType23 = period18.getPeriodType();
        org.joda.time.Period period24 = period14.normalizedStandard(periodType23);
        org.joda.time.DurationFieldType durationFieldType25 = null;
        int int26 = periodType23.indexOf(durationFieldType25);
        org.joda.time.Instant instant27 = new org.joda.time.Instant();
        org.joda.time.Instant instant29 = instant27.withMillis(0L);
        org.joda.time.Chronology chronology30 = instant29.getChronology();
        org.joda.time.DurationField durationField31 = chronology30.eras();
        org.joda.time.LocalTime localTime32 = org.joda.time.LocalTime.now(chronology30);
        org.joda.time.DurationField durationField33 = chronology30.eras();
        org.joda.time.DateTimeField dateTimeField34 = chronology30.hourOfDay();
        org.joda.time.MutablePeriod mutablePeriod35 = new org.joda.time.MutablePeriod((long) 12, (long) 292278993, periodType23, chronology30);
        org.joda.time.MutableDateTime mutableDateTime36 = mutableDateTime4.toMutableDateTime(chronology30);
        org.joda.time.Duration duration38 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Hours hours39 = duration38.toStandardHours();
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.DateTime dateTime41 = new org.joda.time.DateTime(chronology40);
        int int42 = dateTime41.getSecondOfMinute();
        org.joda.time.MutablePeriod mutablePeriod43 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration38, (org.joda.time.ReadableInstant) dateTime41);
        org.joda.time.DateTime dateTime45 = dateTime41.plus(0L);
        mutableDateTime36.setMillis((org.joda.time.ReadableInstant) dateTime41);
        boolean boolean47 = dateTime3.isAfter((org.joda.time.ReadableInstant) mutableDateTime36);
        org.joda.time.DateTime.Property property48 = dateTime3.yearOfCentury();
        org.joda.time.DateTime dateTime49 = property48.withMaximumValue();
        org.joda.time.DateTime dateTime50 = property48.getDateTime();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(mutableDateTime4);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "PT0.099S" + "'", str21, "PT0.099S");
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(periodType23);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertNotNull(instant29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertNotNull(localTime32);
        org.junit.Assert.assertNotNull(durationField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(mutableDateTime36);
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertNotNull(hours39);
// flaky:         org.junit.Assert.assertTrue("'" + int42 + "' != '" + 47 + "'", int42 == 47);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTime50);
    }

    @Test
    public void test07564() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07564");
        org.joda.time.Instant instant1 = new org.joda.time.Instant();
        org.joda.time.Instant instant3 = instant1.withMillis(0L);
        org.joda.time.Chronology chronology4 = instant3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.eras();
        long long9 = chronology4.add(0L, (long) 2022, (int) '4');
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime(0L, chronology4);
        org.joda.time.Instant instant11 = new org.joda.time.Instant();
        org.joda.time.DateTime dateTime12 = instant11.toDateTime();
        org.joda.time.LocalDateTime localDateTime13 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.withCenturyOfEra((int) 'a');
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime(chronology20);
        org.joda.time.DateTime dateTime23 = dateTime21.plusMinutes(15);
        org.joda.time.DateTime dateTime24 = localDateTime17.toDateTime((org.joda.time.ReadableInstant) dateTime21);
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime26 = localDateTime17.toDateTime(dateTimeZone25);
        org.joda.time.DateTime dateTime27 = dateTime12.withZoneRetainFields(dateTimeZone25);
        org.joda.time.DateTime dateTime29 = dateTime27.withYearOfCentury(54);
        org.joda.time.DateTime dateTime32 = dateTime27.withDurationAdded((long) 26150803, 7);
        org.joda.time.DateTime dateTime33 = dateTime27.withLaterOffsetAtOverlap();
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.UTC;
        java.util.Locale locale37 = java.util.Locale.GERMAN;
        java.lang.String str38 = locale37.getDisplayName();
        java.lang.String str39 = dateTimeZone35.getName(100L, locale37);
        org.joda.time.MutableDateTime mutableDateTime40 = new org.joda.time.MutableDateTime(948227L, dateTimeZone35);
        org.joda.time.MutableDateTime.Property property41 = mutableDateTime40.year();
        org.joda.time.ReadableInstant readableInstant42 = null;
        mutableDateTime40.setMillis(readableInstant42);
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.DateTime dateTime45 = new org.joda.time.DateTime(chronology44);
        int int46 = dateTime45.getYearOfCentury();
        int int47 = dateTime45.getWeekyear();
        org.joda.time.DateTime dateTime49 = dateTime45.plus((long) 15);
        org.joda.time.DateTime.Property property50 = dateTime45.year();
        org.joda.time.DateTime dateTime51 = property50.roundHalfFloorCopy();
        org.joda.time.format.DateTimePrinter dateTimePrinter52 = null;
        org.joda.time.format.DateTimeParser dateTimeParser53 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter54 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter52, dateTimeParser53);
        org.joda.time.Instant instant55 = new org.joda.time.Instant();
        org.joda.time.Instant instant57 = instant55.withMillis(0L);
        org.joda.time.Chronology chronology58 = instant57.getChronology();
        org.joda.time.DurationField durationField59 = chronology58.eras();
        long long63 = chronology58.add(0L, (long) 2022, (int) '4');
        org.joda.time.format.DateTimeFormatter dateTimeFormatter64 = dateTimeFormatter54.withChronology(chronology58);
        org.joda.time.LocalDateTime localDateTime65 = new org.joda.time.LocalDateTime(chronology58);
        org.joda.time.DateTimeField dateTimeField66 = chronology58.minuteOfHour();
        org.joda.time.DateTimeZone dateTimeZone67 = org.joda.time.DateTimeZone.UTC;
        java.util.TimeZone timeZone68 = dateTimeZone67.toTimeZone();
        long long70 = dateTimeZone67.previousTransition(100L);
        int int72 = dateTimeZone67.getStandardOffset(86403200L);
        org.joda.time.Chronology chronology73 = chronology58.withZone(dateTimeZone67);
        java.util.TimeZone timeZone74 = dateTimeZone67.toTimeZone();
        org.joda.time.DateTime dateTime75 = dateTime51.toDateTime(dateTimeZone67);
        mutableDateTime40.setZoneRetainFields(dateTimeZone67);
        org.joda.time.DateTime dateTime77 = dateTime33.toDateTime(dateTimeZone67);
        org.joda.time.DateTime dateTime78 = localDateTime10.toDateTime(dateTimeZone67);
        long long82 = dateTimeZone67.convertLocalToUTC((long) 62354, true, 53892L);
        long long85 = dateTimeZone67.convertLocalToUTC((long) 26275855, false);
        org.joda.time.DateTime dateTime86 = new org.joda.time.DateTime(dateTimeZone67);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime88 = dateTime86.withSecondOfMinute(1200);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 1200 for secondOfMinute must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(instant3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 105144L + "'", long9 == 105144L);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "de");
// flaky:         org.junit.Assert.assertEquals("'" + str38 + "' != '" + "\u5fb7\u6587" + "'", str38, "\u5fb7\u6587");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "+00:00" + "'", str39, "+00:00");
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 22 + "'", int46 == 22);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 2022 + "'", int47 == 2022);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(instant57);
        org.junit.Assert.assertNotNull(chronology58);
        org.junit.Assert.assertNotNull(durationField59);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 105144L + "'", long63 == 105144L);
        org.junit.Assert.assertNotNull(dateTimeFormatter64);
        org.junit.Assert.assertNotNull(dateTimeField66);
        org.junit.Assert.assertNotNull(dateTimeZone67);
        org.junit.Assert.assertNotNull(timeZone68);
// flaky:         org.junit.Assert.assertEquals(timeZone68.getDisplayName(), "\u534f\u8c03\u4e16\u754c\u65f6\u95f4");
        org.junit.Assert.assertTrue("'" + long70 + "' != '" + 100L + "'", long70 == 100L);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertNotNull(chronology73);
        org.junit.Assert.assertNotNull(timeZone74);
// flaky:         org.junit.Assert.assertEquals(timeZone74.getDisplayName(), "\u534f\u8c03\u4e16\u754c\u65f6\u95f4");
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertNotNull(dateTime77);
        org.junit.Assert.assertNotNull(dateTime78);
        org.junit.Assert.assertTrue("'" + long82 + "' != '" + 62354L + "'", long82 == 62354L);
        org.junit.Assert.assertTrue("'" + long85 + "' != '" + 26275855L + "'", long85 == 26275855L);
    }

    @Test
    public void test07565() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07565");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.monthOfYear();
        org.joda.time.DateTimeField dateTimeField2 = property1.getField();
        org.joda.time.LocalDate localDate3 = property1.roundCeilingCopy();
        org.joda.time.LocalDate localDate5 = localDate3.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDate localDate7 = localDate3.withWeekOfWeekyear(46);
        org.joda.time.PeriodType periodType10 = null;
        org.joda.time.Period period11 = new org.joda.time.Period((long) 100, 1L, periodType10);
        org.joda.time.Period period13 = period11.minusSeconds((-1));
        java.lang.String str14 = period11.toString();
        org.joda.time.Period period15 = period11.toPeriod();
        org.joda.time.PeriodType periodType16 = period11.getPeriodType();
        org.joda.time.LocalDate localDate17 = localDate7.minus((org.joda.time.ReadablePeriod) period11);
        org.joda.time.LocalDate.Property property18 = localDate7.dayOfMonth();
        org.joda.time.MutableDateTime mutableDateTime19 = org.joda.time.MutableDateTime.now();
        java.lang.Object obj20 = mutableDateTime19.clone();
        mutableDateTime19.setTime((long) 46);
        org.joda.time.MutableDateTime.Property property23 = mutableDateTime19.dayOfWeek();
        org.joda.time.MutableDateTime mutableDateTime25 = property23.add(1L);
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.UTC;
        java.util.TimeZone timeZone27 = dateTimeZone26.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.UTC;
        long long30 = dateTimeZone26.getMillisKeepLocal(dateTimeZone28, (long) 44);
        org.joda.time.DateTime dateTime31 = org.joda.time.DateTime.now(dateTimeZone26);
        mutableDateTime25.setZoneRetainFields(dateTimeZone26);
        java.util.Locale.Builder builder34 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder35 = builder34.clear();
        java.util.Locale locale36 = builder35.build();
        java.lang.String str37 = dateTimeZone26.getName(555370422L, locale36);
        org.joda.time.DateTime dateTime38 = localDate7.toDateTimeAtCurrentTime(dateTimeZone26);
        org.joda.time.Instant instant39 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime40 = instant39.toMutableDateTimeISO();
        org.joda.time.MutableDateTime mutableDateTime41 = instant39.toMutableDateTimeISO();
        int int42 = dateTime38.compareTo((org.joda.time.ReadableInstant) mutableDateTime41);
        mutableDateTime41.addWeeks(55570);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "PT0.099S" + "'", str14, "PT0.099S");
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(periodType16);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(mutableDateTime19);
        org.junit.Assert.assertNotNull(obj20);
// flaky:         org.junit.Assert.assertEquals(obj20.toString(), "2022-02-22T07:23:47.077Z");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj20), "2022-02-22T07:23:47.077Z");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj20), "2022-02-22T07:23:47.077Z");
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(mutableDateTime25);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertNotNull(timeZone27);
// flaky:         org.junit.Assert.assertEquals(timeZone27.getDisplayName(), "\u534f\u8c03\u4e16\u754c\u65f6\u95f4");
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 44L + "'", long30 == 44L);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "+00:00" + "'", str37, "+00:00");
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(mutableDateTime40);
        org.junit.Assert.assertNotNull(mutableDateTime41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
    }

    @Test
    public void test07566() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07566");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.add((long) 'a');
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime0.yearOfCentury();
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period6 = duration5.toPeriod();
        org.joda.time.Duration duration8 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration11 = duration8.withDurationAdded((long) (short) 100, (int) ' ');
        org.joda.time.Duration duration12 = duration5.minus((org.joda.time.ReadableDuration) duration11);
        mutableDateTime0.add((org.joda.time.ReadableDuration) duration5);
        org.joda.time.MutableDateTime.Property property14 = mutableDateTime0.centuryOfEra();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime(chronology15);
        int int17 = dateTime16.getYearOfCentury();
        org.joda.time.DateTime dateTime19 = dateTime16.withSecondOfMinute(53);
        org.joda.time.Duration duration21 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period22 = duration21.toPeriod();
        org.joda.time.Duration duration24 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration27 = duration24.withDurationAdded((long) (short) 100, (int) ' ');
        org.joda.time.Duration duration28 = duration21.minus((org.joda.time.ReadableDuration) duration27);
        org.joda.time.ReadableInstant readableInstant29 = null;
        org.joda.time.ReadableInstant readableInstant30 = null;
        org.joda.time.PeriodType periodType31 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod32 = new org.joda.time.MutablePeriod(readableInstant29, readableInstant30, periodType31);
        org.joda.time.DurationFieldType durationFieldType34 = periodType31.getFieldType((int) (short) 0);
        java.lang.String str35 = periodType31.toString();
        org.joda.time.Period period36 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime16, (org.joda.time.ReadableDuration) duration21, periodType31);
        mutableDateTime0.add((org.joda.time.ReadableDuration) duration21);
        mutableDateTime0.addWeekyears(21);
        org.joda.time.MutableDateTime.Property property40 = mutableDateTime0.weekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime42 = property40.set(44);
        org.joda.time.MutableDateTime mutableDateTime43 = property40.getMutableDateTime();
        int int44 = mutableDateTime43.getYearOfCentury();
        org.joda.time.MutableDateTime.Property property45 = mutableDateTime43.dayOfWeek();
        org.joda.time.MutableDateTime mutableDateTime46 = property45.roundHalfCeiling();
        org.joda.time.MutablePeriod mutablePeriod53 = new org.joda.time.MutablePeriod(999, (int) (short) -1, 0, (int) (short) -1);
        org.joda.time.Instant instant55 = new org.joda.time.Instant();
        org.joda.time.Instant instant57 = instant55.withMillis(0L);
        org.joda.time.Chronology chronology58 = instant57.getChronology();
        org.joda.time.DurationField durationField59 = chronology58.eras();
        org.joda.time.LocalTime localTime60 = org.joda.time.LocalTime.now(chronology58);
        org.joda.time.DurationField durationField61 = chronology58.eras();
        mutablePeriod53.setPeriod((long) 999, chronology58);
        org.joda.time.Chronology chronology63 = chronology58.withUTC();
        org.joda.time.Period period64 = new org.joda.time.Period((long) 62172, 3155760000000L, chronology58);
        org.joda.time.DateTimeField dateTimeField65 = chronology58.weekyear();
        mutableDateTime46.setChronology(chronology58);
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 22 + "'", int17 == 22);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(periodType31);
        org.junit.Assert.assertNotNull(durationFieldType34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "PeriodType[YearDayTime]" + "'", str35, "PeriodType[YearDayTime]");
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(mutableDateTime42);
        org.junit.Assert.assertNotNull(mutableDateTime43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 43 + "'", int44 == 43);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(mutableDateTime46);
        org.junit.Assert.assertNotNull(instant57);
        org.junit.Assert.assertNotNull(chronology58);
        org.junit.Assert.assertNotNull(durationField59);
        org.junit.Assert.assertNotNull(localTime60);
        org.junit.Assert.assertNotNull(durationField61);
        org.junit.Assert.assertNotNull(chronology63);
        org.junit.Assert.assertNotNull(dateTimeField65);
    }

    @Test
    public void test07567() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07567");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardDays((long) (byte) 1);
        java.lang.String str4 = duration3.toString();
        boolean boolean5 = duration1.isShorterThan((org.joda.time.ReadableDuration) duration3);
        org.joda.time.Duration duration7 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period8 = duration7.toPeriod();
        org.joda.time.Duration duration11 = duration7.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Duration duration13 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration16 = duration13.withDurationAdded((long) (short) 100, (int) ' ');
        boolean boolean17 = duration11.isLongerThan((org.joda.time.ReadableDuration) duration13);
        boolean boolean18 = duration3.isEqual((org.joda.time.ReadableDuration) duration13);
        org.joda.time.Duration duration20 = org.joda.time.Duration.standardDays((-9571L));
        org.joda.time.Duration duration22 = org.joda.time.Duration.standardMinutes(1L);
        org.joda.time.Period period23 = duration22.toPeriod();
        org.joda.time.Duration duration24 = duration20.minus((org.joda.time.ReadableDuration) duration22);
        org.joda.time.Duration duration25 = duration3.minus((org.joda.time.ReadableDuration) duration20);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.LocalTime localTime27 = new org.joda.time.LocalTime(dateTimeZone26);
        org.joda.time.LocalTime localTime29 = localTime27.minusHours((int) (byte) 100);
        int int30 = localTime29.getMinuteOfHour();
        java.lang.String str32 = localTime29.toString("1");
        org.joda.time.LocalTime localTime34 = localTime29.minusMinutes(15);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime(chronology35);
        int int37 = dateTime36.getYearOfCentury();
        int int38 = dateTime36.getWeekyear();
        org.joda.time.DateTime dateTime40 = dateTime36.plus((long) 15);
        org.joda.time.DateTime.Property property41 = dateTime36.year();
        org.joda.time.DateTime dateTime42 = property41.roundHalfFloorCopy();
        org.joda.time.DateTime.Property property43 = dateTime42.millisOfSecond();
        org.joda.time.MutableDateTime mutableDateTime44 = dateTime42.toMutableDateTime();
        org.joda.time.LocalTime localTime45 = dateTime42.toLocalTime();
        org.joda.time.LocalTime localTime46 = localTime29.withFields((org.joda.time.ReadablePartial) localTime45);
        boolean boolean47 = duration3.equals((java.lang.Object) localTime46);
        org.joda.time.LocalTime localTime49 = localTime46.withHourOfDay((int) (byte) 10);
        org.joda.time.Instant instant50 = new org.joda.time.Instant();
        org.joda.time.Instant instant52 = instant50.withMillis(0L);
        org.joda.time.DateTime dateTime53 = instant52.toDateTime();
        org.joda.time.DateTime dateTime55 = new org.joda.time.DateTime((long) 1);
        org.joda.time.PeriodType periodType56 = org.joda.time.PeriodType.months();
        org.joda.time.Period period57 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime53, (org.joda.time.ReadableInstant) dateTime55, periodType56);
        org.joda.time.DateTime.Property property58 = dateTime55.minuteOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType59 = property58.getFieldType();
        org.joda.time.LocalTime.Property property60 = localTime49.property(dateTimeFieldType59);
        org.joda.time.LocalTime localTime62 = property60.setCopy(126);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime64 = property60.setCopy(26398209);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26398209 for minuteOfDay must be in the range [0,1439]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "PT86400S" + "'", str4, "PT86400S");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertNotNull(localTime29);
// flaky:         org.junit.Assert.assertTrue("'" + int30 + "' != '" + 23 + "'", int30 == 23);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "1" + "'", str32, "1");
        org.junit.Assert.assertNotNull(localTime34);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 22 + "'", int37 == 22);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 2022 + "'", int38 == 2022);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(mutableDateTime44);
        org.junit.Assert.assertNotNull(localTime45);
        org.junit.Assert.assertNotNull(localTime46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(localTime49);
        org.junit.Assert.assertNotNull(instant52);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(periodType56);
        org.junit.Assert.assertNotNull(property58);
        org.junit.Assert.assertNotNull(dateTimeFieldType59);
        org.junit.Assert.assertNotNull(property60);
        org.junit.Assert.assertNotNull(localTime62);
    }

    @Test
    public void test07568() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07568");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime3 = mutableDateTime0.copy();
        org.joda.time.MutableDateTime.Property property4 = mutableDateTime0.yearOfCentury();
        mutableDateTime0.setHourOfDay(9);
        org.joda.time.DateTimeZone dateTimeZone7 = mutableDateTime0.getZone();
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(dateTimeZone7);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime10 = dateTime8.withMonthOfYear(26184076);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26184076 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(mutableDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTimeZone7);
    }

    @Test
    public void test07569() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07569");
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.parse("2022-02-22T07:18:13.845Z");
        org.junit.Assert.assertNotNull(mutableDateTime1);
    }

    @Test
    public void test07570() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07570");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.dayOfYear();
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.Period period5 = new org.joda.time.Period((long) 100, 1L, periodType4);
        org.joda.time.Period period7 = period5.minusSeconds((-1));
        java.lang.String str8 = period5.toString();
        org.joda.time.LocalDate localDate10 = localDate0.withPeriodAdded((org.joda.time.ReadablePeriod) period5, 3);
        int int11 = localDate0.getYear();
        org.joda.time.LocalDate localDate13 = localDate0.plusYears(15);
        org.joda.time.LocalDate localDate15 = localDate13.minusDays(36981644);
        org.joda.time.LocalDate.Property property16 = localDate15.yearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime17 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property18 = mutableDateTime17.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime20 = property18.set(45);
        org.joda.time.MutableDateTime mutableDateTime21 = property18.roundFloor();
        org.joda.time.MutableDateTime mutableDateTime23 = property18.add(45);
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.UTC;
        java.util.TimeZone timeZone25 = dateTimeZone24.toTimeZone();
        long long27 = dateTimeZone24.previousTransition(100L);
        int int29 = dateTimeZone24.getStandardOffset(86403200L);
        org.joda.time.DateTime dateTime30 = mutableDateTime23.toDateTime(dateTimeZone24);
        int int32 = dateTimeZone24.getOffset((-62135596800000L));
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime(chronology33);
        int int35 = dateTime34.getYearOfCentury();
        int int36 = dateTime34.getWeekyear();
        org.joda.time.DateTime dateTime38 = dateTime34.plus((long) 15);
        org.joda.time.DateTime.Property property39 = dateTime34.year();
        org.joda.time.DateTime dateTime40 = property39.roundHalfFloorCopy();
        org.joda.time.DateTime.Property property41 = dateTime40.millisOfSecond();
        org.joda.time.MutableDateTime mutableDateTime42 = dateTime40.toMutableDateTime();
        org.joda.time.DateTime dateTime44 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime46 = dateTime44.withZoneRetainFields(dateTimeZone45);
        org.joda.time.LocalDate localDate47 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property48 = localDate47.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone49 = org.joda.time.DateTimeZone.UTC;
        java.util.TimeZone timeZone50 = dateTimeZone49.toTimeZone();
        org.joda.time.DateTime dateTime51 = localDate47.toDateTimeAtCurrentTime(dateTimeZone49);
        int int52 = dateTime46.compareTo((org.joda.time.ReadableInstant) dateTime51);
        int int53 = dateTime51.getCenturyOfEra();
        org.joda.time.DateTime dateTime55 = dateTime51.withWeekyear(44);
        org.joda.time.ReadableInstant readableInstant58 = null;
        org.joda.time.ReadableInstant readableInstant59 = null;
        org.joda.time.PeriodType periodType60 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod61 = new org.joda.time.MutablePeriod(readableInstant58, readableInstant59, periodType60);
        org.joda.time.DurationFieldType durationFieldType63 = periodType60.getFieldType((int) (short) 0);
        java.lang.String str64 = periodType60.toString();
        org.joda.time.Instant instant65 = new org.joda.time.Instant();
        org.joda.time.Instant instant67 = instant65.withMillis(0L);
        org.joda.time.Chronology chronology68 = instant67.getChronology();
        org.joda.time.Period period69 = new org.joda.time.Period((long) 53, (long) (-1), periodType60, chronology68);
        org.joda.time.PeriodType periodType70 = periodType60.withMonthsRemoved();
        org.joda.time.Period period71 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime40, (org.joda.time.ReadableInstant) dateTime51, periodType60);
        org.joda.time.DateTime dateTime73 = dateTime51.withMillisOfDay(2000);
        int int74 = dateTime51.getEra();
        int int75 = dateTimeZone24.getOffset((org.joda.time.ReadableInstant) dateTime51);
        org.joda.time.LocalDate localDate76 = new org.joda.time.LocalDate((java.lang.Object) localDate15, dateTimeZone24);
        int int78 = dateTimeZone24.getOffset(190800052L);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "PT0.099S" + "'", str8, "PT0.099S");
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2022 + "'", int11 == 2022);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(mutableDateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(mutableDateTime20);
        org.junit.Assert.assertNotNull(mutableDateTime21);
        org.junit.Assert.assertNotNull(mutableDateTime23);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(timeZone25);
// flaky:         org.junit.Assert.assertEquals(timeZone25.getDisplayName(), "\u534f\u8c03\u4e16\u754c\u65f6\u95f4");
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 100L + "'", long27 == 100L);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 22 + "'", int35 == 22);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 2022 + "'", int36 == 2022);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(mutableDateTime42);
        org.junit.Assert.assertNotNull(dateTimeZone45);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(dateTimeZone49);
        org.junit.Assert.assertNotNull(timeZone50);
// flaky:         org.junit.Assert.assertEquals(timeZone50.getDisplayName(), "\u534f\u8c03\u4e16\u754c\u65f6\u95f4");
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1));
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 20 + "'", int53 == 20);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(periodType60);
        org.junit.Assert.assertNotNull(durationFieldType63);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "PeriodType[YearDayTime]" + "'", str64, "PeriodType[YearDayTime]");
        org.junit.Assert.assertNotNull(instant67);
        org.junit.Assert.assertNotNull(chronology68);
        org.junit.Assert.assertNotNull(periodType70);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 1 + "'", int74 == 1);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
    }

    @Test
    public void test07571() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07571");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.Instant instant2 = instant0.withMillis(0L);
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime((long) 1);
        org.joda.time.Duration duration6 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period7 = duration6.toPeriod();
        org.joda.time.Duration duration10 = duration6.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Period period11 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime4, (org.joda.time.ReadableDuration) duration10);
        org.joda.time.Instant instant12 = dateTime4.toInstant();
        org.joda.time.DateTime dateTime15 = dateTime4.withDurationAdded((long) 3, 4);
        org.joda.time.Instant instant16 = dateTime15.toInstant();
        boolean boolean17 = instant0.isBefore((org.joda.time.ReadableInstant) dateTime15);
        org.joda.time.DateTime dateTime18 = instant0.toDateTimeISO();
        org.joda.time.Instant instant21 = instant0.withDurationAdded((-3L), 26158);
        org.joda.time.Instant instant22 = new org.joda.time.Instant();
        org.joda.time.DateTime dateTime23 = instant22.toDateTime();
        org.joda.time.LocalDateTime localDateTime24 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime26 = localDateTime24.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime26.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime30 = localDateTime28.withCenturyOfEra((int) 'a');
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime(chronology31);
        org.joda.time.DateTime dateTime34 = dateTime32.plusMinutes(15);
        org.joda.time.DateTime dateTime35 = localDateTime28.toDateTime((org.joda.time.ReadableInstant) dateTime32);
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime37 = localDateTime28.toDateTime(dateTimeZone36);
        org.joda.time.DateTime dateTime38 = dateTime23.withZoneRetainFields(dateTimeZone36);
        org.joda.time.MutableDateTime mutableDateTime39 = org.joda.time.MutableDateTime.now();
        mutableDateTime39.add((long) 'a');
        org.joda.time.MutableDateTime.Property property42 = mutableDateTime39.yearOfCentury();
        mutableDateTime39.addSeconds(0);
        org.joda.time.Duration duration46 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Hours hours47 = duration46.toStandardHours();
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.DateTime dateTime49 = new org.joda.time.DateTime(chronology48);
        int int50 = dateTime49.getSecondOfMinute();
        org.joda.time.MutablePeriod mutablePeriod51 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration46, (org.joda.time.ReadableInstant) dateTime49);
        org.joda.time.DateTime dateTime53 = new org.joda.time.DateTime((long) 1);
        org.joda.time.Instant instant54 = new org.joda.time.Instant();
        org.joda.time.Instant instant56 = instant54.withMillis(0L);
        org.joda.time.DateTime dateTime57 = instant56.toDateTime();
        org.joda.time.DateTime dateTime59 = new org.joda.time.DateTime((long) 1);
        org.joda.time.PeriodType periodType60 = org.joda.time.PeriodType.months();
        org.joda.time.Period period61 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime57, (org.joda.time.ReadableInstant) dateTime59, periodType60);
        org.joda.time.Period period62 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration46, (org.joda.time.ReadableInstant) dateTime53, periodType60);
        org.joda.time.Duration duration63 = new org.joda.time.Duration((org.joda.time.ReadableInstant) mutableDateTime39, (org.joda.time.ReadableInstant) dateTime53);
        org.joda.time.DateTime dateTime64 = dateTime38.plus((org.joda.time.ReadableDuration) duration63);
        org.joda.time.DateTime dateTime66 = dateTime38.minusYears(29);
        org.joda.time.DateTime.Property property67 = dateTime38.minuteOfDay();
        org.joda.time.DateTime dateTime69 = property67.addWrapFieldToCopy(36985848);
        org.joda.time.DateTime.Property property70 = dateTime69.dayOfWeek();
        org.joda.time.DateTime dateTime72 = dateTime69.plusMillis(0);
        org.joda.time.Period period73 = new org.joda.time.Period((org.joda.time.ReadableInstant) instant0, (org.joda.time.ReadableInstant) dateTime72);
        org.joda.time.Instant instant74 = instant0.toInstant();
        org.joda.time.DateTime dateTime75 = instant0.toDateTimeISO();
        org.joda.time.DateTime dateTime77 = dateTime75.plusMonths(208);
        int int78 = dateTime77.getMillisOfSecond();
        org.junit.Assert.assertNotNull(instant2);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(instant12);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(instant16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(instant21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(mutableDateTime39);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(duration46);
        org.junit.Assert.assertNotNull(hours47);
// flaky:         org.junit.Assert.assertTrue("'" + int50 + "' != '" + 47 + "'", int50 == 47);
        org.junit.Assert.assertNotNull(instant56);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(periodType60);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(property67);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(property70);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertNotNull(instant74);
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertNotNull(dateTime77);
// flaky:         org.junit.Assert.assertTrue("'" + int78 + "' != '" + 244 + "'", int78 == 244);
    }

    @Test
    public void test07572() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07572");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.Instant instant2 = instant0.withMillis(0L);
        org.joda.time.Duration duration4 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period5 = duration4.toPeriod();
        org.joda.time.Duration duration8 = duration4.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Instant instant9 = instant2.plus((org.joda.time.ReadableDuration) duration8);
        long long10 = instant9.getMillis();
        org.joda.time.Chronology chronology11 = instant9.getChronology();
        org.joda.time.DurationField durationField12 = chronology11.months();
        org.joda.time.MutableDateTime mutableDateTime13 = org.joda.time.MutableDateTime.now(chronology11);
        org.joda.time.DateTimeField dateTimeField14 = chronology11.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField15 = chronology11.millisOfSecond();
        // The following exception was thrown during execution in test generation
        try {
            long long18 = dateTimeField15.set(0L, "2022-02-22T10:17:17.929");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"2022-02-22T10:17:17.929\" for millisOfSecond is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(instant2);
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(instant9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 86400000L + "'", long10 == 86400000L);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(mutableDateTime13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
    }

    @Test
    public void test07573() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07573");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.add((long) 'a');
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime0.yearOfCentury();
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period6 = duration5.toPeriod();
        org.joda.time.Duration duration8 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration11 = duration8.withDurationAdded((long) (short) 100, (int) ' ');
        org.joda.time.Duration duration12 = duration5.minus((org.joda.time.ReadableDuration) duration11);
        mutableDateTime0.add((org.joda.time.ReadableDuration) duration5);
        org.joda.time.MutableDateTime.Property property14 = mutableDateTime0.centuryOfEra();
        mutableDateTime0.addHours((int) (byte) 10);
        mutableDateTime0.addWeeks(20);
        org.joda.time.DateTimeField dateTimeField19 = mutableDateTime0.getRoundingField();
        org.joda.time.MutableDateTime mutableDateTime20 = org.joda.time.MutableDateTime.now();
        java.lang.Object obj21 = mutableDateTime20.clone();
        mutableDateTime20.setTime((long) 46);
        org.joda.time.MutableDateTime.Property property24 = mutableDateTime20.dayOfWeek();
        org.joda.time.MutableDateTime mutableDateTime26 = property24.add(1L);
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.UTC;
        java.util.TimeZone timeZone28 = dateTimeZone27.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.UTC;
        long long31 = dateTimeZone27.getMillisKeepLocal(dateTimeZone29, (long) 44);
        org.joda.time.DateTime dateTime32 = org.joda.time.DateTime.now(dateTimeZone27);
        mutableDateTime26.setZoneRetainFields(dateTimeZone27);
        mutableDateTime26.addSeconds((int) (short) 10);
        java.lang.Object obj36 = mutableDateTime26.clone();
        org.joda.time.MutableDateTime.Property property37 = mutableDateTime26.era();
        boolean boolean38 = mutableDateTime0.isAfter((org.joda.time.ReadableInstant) mutableDateTime26);
        int int39 = mutableDateTime26.getMinuteOfDay();
        org.joda.time.LocalDate localDate40 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property41 = localDate40.monthOfYear();
        java.util.Date date42 = localDate40.toDate();
        org.joda.time.PeriodType periodType45 = null;
        org.joda.time.Period period46 = new org.joda.time.Period((long) 100, 1L, periodType45);
        org.joda.time.Period period48 = period46.minusSeconds((-1));
        java.lang.String str49 = period46.toString();
        org.joda.time.Period period51 = period46.plusMillis(15);
        org.joda.time.LocalDate localDate52 = localDate40.plus((org.joda.time.ReadablePeriod) period51);
        mutableDateTime26.add((org.joda.time.ReadablePeriod) period51);
        mutableDateTime26.setMillis(2622452L);
        org.joda.time.Duration duration57 = org.joda.time.Duration.standardSeconds((long) 2121);
        mutableDateTime26.add((org.joda.time.ReadableDuration) duration57, 37115682);
        org.joda.time.MutableDateTime.Property property60 = mutableDateTime26.year();
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNull(dateTimeField19);
        org.junit.Assert.assertNotNull(mutableDateTime20);
        org.junit.Assert.assertNotNull(obj21);
// flaky:         org.junit.Assert.assertEquals(obj21.toString(), "2022-02-22T07:23:47.347Z");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj21), "2022-02-22T07:23:47.347Z");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj21), "2022-02-22T07:23:47.347Z");
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(mutableDateTime26);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertNotNull(timeZone28);
// flaky:         org.junit.Assert.assertEquals(timeZone28.getDisplayName(), "\u534f\u8c03\u4e16\u754c\u65f6\u95f4");
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 44L + "'", long31 == 44L);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(obj36);
        org.junit.Assert.assertEquals(obj36.toString(), "2022-02-23T00:00:10.046Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj36), "2022-02-23T00:00:10.046Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj36), "2022-02-23T00:00:10.046Z");
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(date42);
// flaky:         org.junit.Assert.assertEquals(date42.toString(), "Tue Feb 22 00:00:00 GMT 2022");
        org.junit.Assert.assertNotNull(period48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "PT0.099S" + "'", str49, "PT0.099S");
        org.junit.Assert.assertNotNull(period51);
        org.junit.Assert.assertNotNull(localDate52);
        org.junit.Assert.assertNotNull(duration57);
        org.junit.Assert.assertNotNull(property60);
    }

    @Test
    public void test07574() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07574");
        org.joda.time.Instant instant1 = org.joda.time.Instant.parse("2022-02-22T07:22:25.761Z");
        org.junit.Assert.assertNotNull(instant1);
    }

    @Test
    public void test07575() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07575");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime(dateTimeZone1);
        org.joda.time.LocalTime localTime4 = localTime2.minusHours((int) (byte) 100);
        org.joda.time.Chronology chronology5 = localTime4.getChronology();
        org.joda.time.MutableDateTime mutableDateTime6 = new org.joda.time.MutableDateTime((long) 62176, chronology5);
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(chronology5);
    }

    @Test
    public void test07576() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07576");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.withHourOfDay(10);
        org.joda.time.LocalDateTime.Property property5 = localDateTime4.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime6 = property5.roundHalfFloorCopy();
        java.lang.String str7 = property5.getAsShortText();
        org.joda.time.MutableDateTime mutableDateTime9 = new org.joda.time.MutableDateTime((long) (short) -1);
        org.joda.time.Duration duration11 = org.joda.time.Duration.standardDays((long) (byte) 1);
        java.lang.String str12 = duration11.toString();
        mutableDateTime9.add((org.joda.time.ReadableDuration) duration11, 8);
        mutableDateTime9.setSecondOfMinute((int) (short) 0);
        org.joda.time.MutableDateTime.Property property17 = mutableDateTime9.millisOfSecond();
        org.joda.time.MutableDateTime mutableDateTime18 = org.joda.time.MutableDateTime.now();
        mutableDateTime18.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime21 = mutableDateTime18.copy();
        org.joda.time.MutableDateTime.Property property22 = mutableDateTime18.weekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime23 = property22.roundHalfFloor();
        org.joda.time.MutableDateTime mutableDateTime24 = property22.roundHalfCeiling();
        org.joda.time.MutableDateTime mutableDateTime26 = property22.set(1);
        org.joda.time.MutableDateTime mutableDateTime27 = org.joda.time.MutableDateTime.now();
        mutableDateTime27.add((long) 'a');
        org.joda.time.MutableDateTime.Property property30 = mutableDateTime27.yearOfCentury();
        org.joda.time.Duration duration32 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period33 = duration32.toPeriod();
        org.joda.time.Duration duration35 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration38 = duration35.withDurationAdded((long) (short) 100, (int) ' ');
        org.joda.time.Duration duration39 = duration32.minus((org.joda.time.ReadableDuration) duration38);
        mutableDateTime27.add((org.joda.time.ReadableDuration) duration32);
        org.joda.time.MutableDateTime.Property property41 = mutableDateTime27.centuryOfEra();
        mutableDateTime27.addYears(0);
        mutableDateTime27.setMinuteOfDay((int) (short) 0);
        org.joda.time.Instant instant46 = new org.joda.time.Instant();
        org.joda.time.Instant instant48 = instant46.withMillis(0L);
        org.joda.time.Duration duration50 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period51 = duration50.toPeriod();
        org.joda.time.Duration duration54 = duration50.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Instant instant55 = instant48.plus((org.joda.time.ReadableDuration) duration54);
        long long56 = instant55.getMillis();
        org.joda.time.Duration duration57 = new org.joda.time.Duration((org.joda.time.ReadableInstant) mutableDateTime27, (org.joda.time.ReadableInstant) instant55);
        mutableDateTime26.add((org.joda.time.ReadableDuration) duration57, 999);
        mutableDateTime26.setSecondOfMinute(24);
        java.lang.String str62 = mutableDateTime26.toString();
        org.joda.time.Duration duration63 = new org.joda.time.Duration((org.joda.time.ReadableInstant) mutableDateTime9, (org.joda.time.ReadableInstant) mutableDateTime26);
        long long64 = property5.getDifferenceAsLong((org.joda.time.ReadableInstant) mutableDateTime9);
        org.joda.time.LocalDateTime localDateTime65 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime67 = localDateTime65.withHourOfDay(10);
        org.joda.time.LocalDateTime.Property property68 = localDateTime65.hourOfDay();
        org.joda.time.DateTimeField dateTimeField69 = property68.getField();
        int int70 = property68.get();
        org.joda.time.Chronology chronology72 = null;
        org.joda.time.DateTime dateTime73 = new org.joda.time.DateTime((long) 1, chronology72);
        int int74 = dateTime73.getHourOfDay();
        int int75 = property68.compareTo((org.joda.time.ReadableInstant) dateTime73);
        org.joda.time.DateTime dateTime76 = dateTime73.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime.Property property77 = dateTime73.monthOfYear();
        mutableDateTime9.setMillis((org.joda.time.ReadableInstant) dateTime73);
        org.joda.time.Duration duration80 = org.joda.time.Duration.standardDays((long) 2037);
        org.joda.time.Period period81 = duration80.toPeriod();
        org.joda.time.PeriodType periodType82 = org.joda.time.PeriodType.time();
        org.joda.time.PeriodType periodType83 = periodType82.withMinutesRemoved();
        org.joda.time.Period period84 = duration80.toPeriod(periodType83);
        mutableDateTime9.add((org.joda.time.ReadableDuration) duration80);
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "22" + "'", str7, "22");
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "PT86400S" + "'", str12, "PT86400S");
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(mutableDateTime18);
        org.junit.Assert.assertNotNull(mutableDateTime21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(mutableDateTime23);
        org.junit.Assert.assertNotNull(mutableDateTime24);
        org.junit.Assert.assertNotNull(mutableDateTime26);
        org.junit.Assert.assertNotNull(mutableDateTime27);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertNotNull(duration39);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(instant48);
        org.junit.Assert.assertNotNull(duration50);
        org.junit.Assert.assertNotNull(period51);
        org.junit.Assert.assertNotNull(duration54);
        org.junit.Assert.assertNotNull(instant55);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 86400000L + "'", long56 == 86400000L);
// flaky:         org.junit.Assert.assertEquals("'" + str62 + "' != '" + "-50070-09-17T10:49:24.495Z" + "'", str62, "-50070-09-17T10:49:24.495Z");
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 19037L + "'", long64 == 19037L);
        org.junit.Assert.assertNotNull(localDateTime65);
        org.junit.Assert.assertNotNull(localDateTime67);
        org.junit.Assert.assertNotNull(property68);
        org.junit.Assert.assertNotNull(dateTimeField69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 7 + "'", int70 == 7);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 1 + "'", int75 == 1);
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertNotNull(property77);
        org.junit.Assert.assertNotNull(duration80);
        org.junit.Assert.assertNotNull(period81);
        org.junit.Assert.assertNotNull(periodType82);
        org.junit.Assert.assertNotNull(periodType83);
        org.junit.Assert.assertNotNull(period84);
    }

    @Test
    public void test07577() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07577");
        org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod((long) (short) -1, 3155695200000L);
        org.joda.time.MutableDateTime mutableDateTime5 = org.joda.time.MutableDateTime.now();
        mutableDateTime5.add((long) 'a');
        org.joda.time.MutableDateTime.Property property8 = mutableDateTime5.yearOfCentury();
        mutableDateTime5.addSeconds(0);
        org.joda.time.ReadableDuration readableDuration13 = null;
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.Period period15 = new org.joda.time.Period(readableDuration13, readableInstant14);
        org.joda.time.PeriodType periodType18 = null;
        org.joda.time.Period period19 = new org.joda.time.Period((long) 100, 1L, periodType18);
        org.joda.time.Period period21 = period19.minusSeconds((-1));
        java.lang.String str22 = period19.toString();
        org.joda.time.Period period23 = period19.toPeriod();
        org.joda.time.PeriodType periodType24 = period19.getPeriodType();
        org.joda.time.Period period25 = period15.normalizedStandard(periodType24);
        org.joda.time.DurationFieldType durationFieldType26 = null;
        int int27 = periodType24.indexOf(durationFieldType26);
        org.joda.time.Instant instant28 = new org.joda.time.Instant();
        org.joda.time.Instant instant30 = instant28.withMillis(0L);
        org.joda.time.Chronology chronology31 = instant30.getChronology();
        org.joda.time.DurationField durationField32 = chronology31.eras();
        org.joda.time.LocalTime localTime33 = org.joda.time.LocalTime.now(chronology31);
        org.joda.time.DurationField durationField34 = chronology31.eras();
        org.joda.time.DateTimeField dateTimeField35 = chronology31.hourOfDay();
        org.joda.time.MutablePeriod mutablePeriod36 = new org.joda.time.MutablePeriod((long) 12, (long) 292278993, periodType24, chronology31);
        org.joda.time.MutableDateTime mutableDateTime37 = mutableDateTime5.toMutableDateTime(chronology31);
        mutablePeriod2.setPeriod((long) 36946953, 960000L, chronology31);
        org.joda.time.MutableDateTime mutableDateTime39 = org.joda.time.MutableDateTime.now();
        mutableDateTime39.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime42 = mutableDateTime39.copy();
        org.joda.time.ReadableDuration readableDuration43 = null;
        org.joda.time.ReadableInstant readableInstant44 = null;
        org.joda.time.Period period45 = new org.joda.time.Period(readableDuration43, readableInstant44);
        org.joda.time.PeriodType periodType48 = null;
        org.joda.time.Period period49 = new org.joda.time.Period((long) 100, 1L, periodType48);
        org.joda.time.Period period51 = period49.minusSeconds((-1));
        java.lang.String str52 = period49.toString();
        org.joda.time.Period period53 = period49.toPeriod();
        org.joda.time.PeriodType periodType54 = period49.getPeriodType();
        org.joda.time.Period period55 = period45.normalizedStandard(periodType54);
        int int56 = period55.getWeeks();
        mutableDateTime42.add((org.joda.time.ReadablePeriod) period55, 36946953);
        mutablePeriod2.setPeriod((org.joda.time.ReadablePeriod) period55);
        org.joda.time.MutablePeriod mutablePeriod60 = period55.toMutablePeriod();
        int int61 = period55.getWeeks();
        org.junit.Assert.assertNotNull(mutableDateTime5);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "PT0.099S" + "'", str22, "PT0.099S");
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertNotNull(periodType24);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertNotNull(instant30);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertNotNull(localTime33);
        org.junit.Assert.assertNotNull(durationField34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(mutableDateTime37);
        org.junit.Assert.assertNotNull(mutableDateTime39);
        org.junit.Assert.assertNotNull(mutableDateTime42);
        org.junit.Assert.assertNotNull(period51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "PT0.099S" + "'", str52, "PT0.099S");
        org.junit.Assert.assertNotNull(period53);
        org.junit.Assert.assertNotNull(periodType54);
        org.junit.Assert.assertNotNull(period55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(mutablePeriod60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
    }

    @Test
    public void test07578() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07578");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime3 = mutableDateTime0.copy();
        org.joda.time.MutableDateTime.Property property4 = mutableDateTime0.weekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime5 = property4.roundHalfFloor();
        org.joda.time.MutableDateTime mutableDateTime6 = property4.roundHalfCeiling();
        org.joda.time.MutableDateTime mutableDateTime8 = property4.set(1);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(chronology9);
        int int11 = dateTime10.getYearOfCentury();
        int int12 = dateTime10.getWeekyear();
        org.joda.time.DateTime dateTime13 = dateTime10.withEarlierOffsetAtOverlap();
        java.lang.String str14 = dateTime13.toString();
        org.joda.time.MutableDateTime mutableDateTime15 = dateTime13.toMutableDateTime();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.UTC;
        boolean boolean17 = dateTimeZone16.isFixed();
        mutableDateTime15.setZoneRetainFields(dateTimeZone16);
        org.joda.time.MutableDateTime mutableDateTime19 = mutableDateTime8.toMutableDateTime(dateTimeZone16);
        boolean boolean20 = mutableDateTime19.isEqualNow();
        org.joda.time.Duration duration22 = org.joda.time.Duration.standardDays((long) (byte) 1);
        java.lang.String str23 = duration22.toString();
        org.joda.time.Duration duration25 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Hours hours26 = duration25.toStandardHours();
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime(chronology27);
        int int29 = dateTime28.getSecondOfMinute();
        org.joda.time.MutablePeriod mutablePeriod30 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration25, (org.joda.time.ReadableInstant) dateTime28);
        org.joda.time.Duration duration31 = duration22.plus((org.joda.time.ReadableDuration) duration25);
        org.joda.time.Duration duration33 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period34 = duration33.toPeriod();
        org.joda.time.Duration duration36 = duration33.minus((long) 292278993);
        org.joda.time.MutableDateTime mutableDateTime37 = org.joda.time.MutableDateTime.now();
        mutableDateTime37.add((long) 'a');
        org.joda.time.MutableDateTime.Property property40 = mutableDateTime37.yearOfCentury();
        org.joda.time.Duration duration42 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period43 = duration42.toPeriod();
        org.joda.time.Duration duration45 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration48 = duration45.withDurationAdded((long) (short) 100, (int) ' ');
        org.joda.time.Duration duration49 = duration42.minus((org.joda.time.ReadableDuration) duration48);
        mutableDateTime37.add((org.joda.time.ReadableDuration) duration42);
        boolean boolean51 = duration36.isShorterThan((org.joda.time.ReadableDuration) duration42);
        boolean boolean52 = duration25.isLongerThan((org.joda.time.ReadableDuration) duration36);
        org.joda.time.DateTime dateTime54 = new org.joda.time.DateTime((long) 1);
        org.joda.time.Duration duration56 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period57 = duration56.toPeriod();
        org.joda.time.Duration duration60 = duration56.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Period period61 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime54, (org.joda.time.ReadableDuration) duration60);
        org.joda.time.Duration duration62 = duration36.plus((org.joda.time.ReadableDuration) duration60);
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.DateTime dateTime64 = new org.joda.time.DateTime(chronology63);
        int int65 = dateTime64.getYearOfCentury();
        int int66 = dateTime64.getWeekyear();
        org.joda.time.DateTime dateTime68 = dateTime64.plus((long) 15);
        org.joda.time.DateTime.Property property69 = dateTime64.year();
        org.joda.time.DateTime dateTime70 = property69.roundHalfFloorCopy();
        org.joda.time.ReadableDuration readableDuration71 = null;
        org.joda.time.ReadableInstant readableInstant72 = null;
        org.joda.time.Period period73 = new org.joda.time.Period(readableDuration71, readableInstant72);
        org.joda.time.PeriodType periodType76 = null;
        org.joda.time.Period period77 = new org.joda.time.Period((long) 100, 1L, periodType76);
        org.joda.time.Period period79 = period77.minusSeconds((-1));
        java.lang.String str80 = period77.toString();
        org.joda.time.Period period81 = period77.toPeriod();
        org.joda.time.PeriodType periodType82 = period77.getPeriodType();
        org.joda.time.Period period83 = period73.normalizedStandard(periodType82);
        java.lang.String str84 = periodType82.getName();
        org.joda.time.PeriodType periodType85 = periodType82.withYearsRemoved();
        org.joda.time.Period period86 = duration60.toPeriodTo((org.joda.time.ReadableInstant) dateTime70, periodType85);
        org.joda.time.MutablePeriod mutablePeriod87 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) mutableDateTime19, (org.joda.time.ReadableDuration) duration60);
        org.joda.time.Period period88 = mutablePeriod87.toPeriod();
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(mutableDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(mutableDateTime5);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(mutableDateTime8);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 22 + "'", int11 == 22);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2022 + "'", int12 == 2022);
        org.junit.Assert.assertNotNull(dateTime13);
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "2022-02-22T07:23:47.488Z" + "'", str14, "2022-02-22T07:23:47.488Z");
        org.junit.Assert.assertNotNull(mutableDateTime15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(mutableDateTime19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "PT86400S" + "'", str23, "PT86400S");
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertNotNull(hours26);
// flaky:         org.junit.Assert.assertTrue("'" + int29 + "' != '" + 47 + "'", int29 == 47);
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertNotNull(period34);
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertNotNull(mutableDateTime37);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(duration42);
        org.junit.Assert.assertNotNull(period43);
        org.junit.Assert.assertNotNull(duration45);
        org.junit.Assert.assertNotNull(duration48);
        org.junit.Assert.assertNotNull(duration49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(duration56);
        org.junit.Assert.assertNotNull(period57);
        org.junit.Assert.assertNotNull(duration60);
        org.junit.Assert.assertNotNull(duration62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 22 + "'", int65 == 22);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 2022 + "'", int66 == 2022);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertNotNull(property69);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertNotNull(period79);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "PT0.099S" + "'", str80, "PT0.099S");
        org.junit.Assert.assertNotNull(period81);
        org.junit.Assert.assertNotNull(periodType82);
        org.junit.Assert.assertNotNull(period83);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "Standard" + "'", str84, "Standard");
        org.junit.Assert.assertNotNull(periodType85);
        org.junit.Assert.assertNotNull(period86);
        org.junit.Assert.assertNotNull(period88);
    }

    @Test
    public void test07579() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07579");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate2 = localDate0.plusMonths(26158);
        org.joda.time.LocalDate localDate4 = localDate2.withMonthOfYear(3);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate6 = localDate2.withDayOfWeek(0);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 0 for dayOfWeek must be in the range [1,7]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(localDate4);
    }

    @Test
    public void test07580() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07580");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardDays((long) (byte) 1);
        java.lang.String str4 = duration3.toString();
        boolean boolean5 = duration1.isShorterThan((org.joda.time.ReadableDuration) duration3);
        org.joda.time.Duration duration7 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period8 = duration7.toPeriod();
        org.joda.time.Duration duration11 = duration7.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Duration duration13 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration16 = duration13.withDurationAdded((long) (short) 100, (int) ' ');
        boolean boolean17 = duration11.isLongerThan((org.joda.time.ReadableDuration) duration13);
        boolean boolean18 = duration3.isEqual((org.joda.time.ReadableDuration) duration13);
        org.joda.time.Duration duration20 = org.joda.time.Duration.standardDays((-9571L));
        org.joda.time.Duration duration22 = org.joda.time.Duration.standardMinutes(1L);
        org.joda.time.Period period23 = duration22.toPeriod();
        org.joda.time.Duration duration24 = duration20.minus((org.joda.time.ReadableDuration) duration22);
        org.joda.time.Duration duration25 = duration3.minus((org.joda.time.ReadableDuration) duration20);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.LocalTime localTime27 = new org.joda.time.LocalTime(dateTimeZone26);
        org.joda.time.LocalTime localTime29 = localTime27.minusHours((int) (byte) 100);
        int int30 = localTime29.getMinuteOfHour();
        java.lang.String str32 = localTime29.toString("1");
        org.joda.time.LocalTime localTime34 = localTime29.minusMinutes(15);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime(chronology35);
        int int37 = dateTime36.getYearOfCentury();
        int int38 = dateTime36.getWeekyear();
        org.joda.time.DateTime dateTime40 = dateTime36.plus((long) 15);
        org.joda.time.DateTime.Property property41 = dateTime36.year();
        org.joda.time.DateTime dateTime42 = property41.roundHalfFloorCopy();
        org.joda.time.DateTime.Property property43 = dateTime42.millisOfSecond();
        org.joda.time.MutableDateTime mutableDateTime44 = dateTime42.toMutableDateTime();
        org.joda.time.LocalTime localTime45 = dateTime42.toLocalTime();
        org.joda.time.LocalTime localTime46 = localTime29.withFields((org.joda.time.ReadablePartial) localTime45);
        boolean boolean47 = duration3.equals((java.lang.Object) localTime46);
        long long48 = duration3.getStandardHours();
        org.joda.time.Duration duration49 = duration3.toDuration();
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "PT86400S" + "'", str4, "PT86400S");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertNotNull(localTime29);
// flaky:         org.junit.Assert.assertTrue("'" + int30 + "' != '" + 23 + "'", int30 == 23);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "1" + "'", str32, "1");
        org.junit.Assert.assertNotNull(localTime34);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 22 + "'", int37 == 22);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 2022 + "'", int38 == 2022);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(mutableDateTime44);
        org.junit.Assert.assertNotNull(localTime45);
        org.junit.Assert.assertNotNull(localTime46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 24L + "'", long48 == 24L);
        org.junit.Assert.assertNotNull(duration49);
    }

    @Test
    public void test07581() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07581");
        org.joda.time.format.DateTimePrinter dateTimePrinter1 = null;
        org.joda.time.format.DateTimeParser dateTimeParser2 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter1, dateTimeParser2);
        org.joda.time.Instant instant4 = new org.joda.time.Instant();
        org.joda.time.Instant instant6 = instant4.withMillis(0L);
        org.joda.time.Chronology chronology7 = instant6.getChronology();
        org.joda.time.DurationField durationField8 = chronology7.eras();
        long long12 = chronology7.add(0L, (long) 2022, (int) '4');
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = dateTimeFormatter3.withChronology(chronology7);
        java.lang.Object obj14 = null;
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime(obj14);
        org.joda.time.LocalDateTime localDateTime16 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.withHourOfDay(10);
        org.joda.time.DateTimeField dateTimeField22 = localDateTime20.getField((int) (byte) 0);
        long long24 = dateTimeField22.roundHalfEven((long) 1);
        int int25 = dateTime15.get(dateTimeField22);
        org.joda.time.LocalDateTime localDateTime26 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime28 = localDateTime26.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime30 = localDateTime28.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime32 = localDateTime30.withCenturyOfEra((int) 'a');
        java.util.Locale locale34 = java.util.Locale.GERMAN;
        java.lang.String str35 = locale34.getDisplayName();
        java.lang.String str36 = dateTimeField22.getAsText((org.joda.time.ReadablePartial) localDateTime30, 53, locale34);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter37 = dateTimeFormatter3.withLocale(locale34);
        boolean boolean38 = dateTimeFormatter3.isPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter39 = dateTimeFormatter3.withOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter40 = dateTimeFormatter39.withOffsetParsed();
        org.joda.time.DateTimeZone dateTimeZone41 = dateTimeFormatter39.getZone();
        org.joda.time.format.DateTimeParser dateTimeParser42 = dateTimeFormatter39.getParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter43 = dateTimeFormatter39.withZoneUTC();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime44 = org.joda.time.MutableDateTime.parse("2022-02-22T10:21:56.159", dateTimeFormatter39);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(instant6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 105144L + "'", long12 == 105144L);
        org.junit.Assert.assertNotNull(dateTimeFormatter13);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2022 + "'", int25 == 2022);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "de");
// flaky:         org.junit.Assert.assertEquals("'" + str35 + "' != '" + "\u5fb7\u6587" + "'", str35, "\u5fb7\u6587");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "53" + "'", str36, "53");
        org.junit.Assert.assertNotNull(dateTimeFormatter37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter39);
        org.junit.Assert.assertNotNull(dateTimeFormatter40);
        org.junit.Assert.assertNull(dateTimeZone41);
        org.junit.Assert.assertNull(dateTimeParser42);
        org.junit.Assert.assertNotNull(dateTimeFormatter43);
    }

    @Test
    public void test07582() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07582");
        org.joda.time.ReadableDuration readableDuration1 = null;
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.Period period3 = new org.joda.time.Period(readableDuration1, readableInstant2);
        org.joda.time.PeriodType periodType6 = null;
        org.joda.time.Period period7 = new org.joda.time.Period((long) 100, 1L, periodType6);
        org.joda.time.Period period9 = period7.minusSeconds((-1));
        java.lang.String str10 = period7.toString();
        org.joda.time.Period period11 = period7.toPeriod();
        org.joda.time.PeriodType periodType12 = period7.getPeriodType();
        org.joda.time.Period period13 = period3.normalizedStandard(periodType12);
        org.joda.time.Instant instant14 = new org.joda.time.Instant();
        org.joda.time.Instant instant16 = instant14.withMillis(0L);
        org.joda.time.Chronology chronology17 = instant16.getChronology();
        org.joda.time.DurationField durationField18 = chronology17.eras();
        long long22 = chronology17.add(0L, (long) 2022, (int) '4');
        org.joda.time.DateTimeField dateTimeField23 = chronology17.secondOfMinute();
        org.joda.time.MutablePeriod mutablePeriod24 = new org.joda.time.MutablePeriod(44L, periodType12, chronology17);
        org.joda.time.DateTimeField dateTimeField25 = chronology17.clockhourOfHalfday();
        org.joda.time.LocalDate localDate26 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property27 = localDate26.monthOfYear();
        org.joda.time.DateTimeField dateTimeField28 = property27.getField();
        org.joda.time.LocalDate localDate29 = property27.withMaximumValue();
        long long31 = chronology17.set((org.joda.time.ReadablePartial) localDate29, (long) (byte) 0);
        org.joda.time.DateTime dateTime32 = localDate29.toDateTimeAtCurrentTime();
        org.joda.time.DateTime dateTime34 = dateTime32.withCenturyOfEra(100);
        org.joda.time.MutableDateTime mutableDateTime35 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property36 = mutableDateTime35.centuryOfEra();
        org.joda.time.MutableDateTime.Property property37 = mutableDateTime35.dayOfWeek();
        org.joda.time.DateTimeFieldType dateTimeFieldType38 = property37.getFieldType();
        org.joda.time.MutableDateTime mutableDateTime39 = property37.getMutableDateTime();
        org.joda.time.MutableDateTime.Property property40 = mutableDateTime39.hourOfDay();
        boolean boolean41 = dateTime32.isAfter((org.joda.time.ReadableInstant) mutableDateTime39);
        org.joda.time.MutableDateTime mutableDateTime42 = mutableDateTime39.toMutableDateTime();
        org.joda.time.PeriodType periodType45 = null;
        org.joda.time.Period period46 = new org.joda.time.Period((long) 100, 1L, periodType45);
        org.joda.time.Period period48 = period46.minusSeconds((-1));
        org.joda.time.Period period50 = period48.multipliedBy((int) '#');
        org.joda.time.DurationFieldType durationFieldType51 = org.joda.time.DurationFieldType.centuries();
        int int52 = period50.get(durationFieldType51);
        int int53 = period50.getMinutes();
        mutableDateTime39.add((org.joda.time.ReadablePeriod) period50);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime39.setDate(26318493, 37410419, 26501104);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 37410419 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "PT0.099S" + "'", str10, "PT0.099S");
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(periodType12);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(instant16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 105144L + "'", long22 == 105144L);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 1671667200000L + "'", long31 == 1671667200000L);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(mutableDateTime35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(dateTimeFieldType38);
        org.junit.Assert.assertNotNull(mutableDateTime39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(mutableDateTime42);
        org.junit.Assert.assertNotNull(period48);
        org.junit.Assert.assertNotNull(period50);
        org.junit.Assert.assertNotNull(durationFieldType51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
    }

    @Test
    public void test07583() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07583");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period2 = duration1.toPeriod();
        org.joda.time.Duration duration4 = duration1.minus((long) 292278993);
        org.joda.time.MutableDateTime mutableDateTime5 = org.joda.time.MutableDateTime.now();
        mutableDateTime5.add((long) 'a');
        org.joda.time.MutableDateTime.Property property8 = mutableDateTime5.yearOfCentury();
        org.joda.time.Duration duration10 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period11 = duration10.toPeriod();
        org.joda.time.Duration duration13 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration16 = duration13.withDurationAdded((long) (short) 100, (int) ' ');
        org.joda.time.Duration duration17 = duration10.minus((org.joda.time.ReadableDuration) duration16);
        mutableDateTime5.add((org.joda.time.ReadableDuration) duration10);
        boolean boolean19 = duration4.isShorterThan((org.joda.time.ReadableDuration) duration10);
        org.joda.time.Duration duration21 = duration10.minus((long) (byte) 0);
        org.joda.time.ReadableDuration readableDuration22 = null;
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.Period period24 = new org.joda.time.Period(readableDuration22, readableInstant23);
        org.joda.time.Period period26 = period24.withDays((int) (byte) 1);
        org.joda.time.Duration duration28 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Hours hours29 = duration28.toStandardHours();
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime(chronology30);
        int int32 = dateTime31.getSecondOfMinute();
        org.joda.time.MutablePeriod mutablePeriod33 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration28, (org.joda.time.ReadableInstant) dateTime31);
        org.joda.time.Duration duration34 = period24.toDurationFrom((org.joda.time.ReadableInstant) dateTime31);
        org.joda.time.DateTime dateTime36 = dateTime31.minusHours(16);
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime42 = dateTime40.withZoneRetainFields(dateTimeZone41);
        org.joda.time.LocalDate localDate43 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property44 = localDate43.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.UTC;
        java.util.TimeZone timeZone46 = dateTimeZone45.toTimeZone();
        org.joda.time.DateTime dateTime47 = localDate43.toDateTimeAtCurrentTime(dateTimeZone45);
        int int48 = dateTime42.compareTo((org.joda.time.ReadableInstant) dateTime47);
        org.joda.time.DateTime dateTime50 = dateTime47.minusWeeks(44);
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.DateTime dateTime52 = new org.joda.time.DateTime(chronology51);
        org.joda.time.DateTime dateTime54 = dateTime52.plusMinutes(15);
        org.joda.time.Chronology chronology55 = dateTime52.getChronology();
        java.lang.String str56 = chronology55.toString();
        org.joda.time.DateTimeField dateTimeField57 = chronology55.dayOfYear();
        org.joda.time.DateTime dateTime58 = dateTime47.withChronology(chronology55);
        org.joda.time.ReadableDuration readableDuration59 = null;
        org.joda.time.ReadableInstant readableInstant60 = null;
        org.joda.time.ReadableInstant readableInstant61 = null;
        org.joda.time.PeriodType periodType62 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod63 = new org.joda.time.MutablePeriod(readableInstant60, readableInstant61, periodType62);
        org.joda.time.DurationFieldType durationFieldType65 = periodType62.getFieldType((int) (short) 0);
        org.joda.time.PeriodType periodType66 = periodType62.withMillisRemoved();
        org.joda.time.Period period67 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime58, readableDuration59, periodType66);
        org.joda.time.Period period68 = new org.joda.time.Period(0L, periodType66);
        org.joda.time.format.DateTimePrinter dateTimePrinter69 = null;
        org.joda.time.format.DateTimeParser dateTimeParser70 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter71 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter69, dateTimeParser70);
        org.joda.time.Instant instant72 = new org.joda.time.Instant();
        org.joda.time.Instant instant74 = instant72.withMillis(0L);
        org.joda.time.Chronology chronology75 = instant74.getChronology();
        org.joda.time.DurationField durationField76 = chronology75.eras();
        long long80 = chronology75.add(0L, (long) 2022, (int) '4');
        org.joda.time.format.DateTimeFormatter dateTimeFormatter81 = dateTimeFormatter71.withChronology(chronology75);
        org.joda.time.MutablePeriod mutablePeriod82 = new org.joda.time.MutablePeriod(3600000L, periodType66, chronology75);
        org.joda.time.Period period83 = duration21.toPeriodFrom((org.joda.time.ReadableInstant) dateTime36, periodType66);
        java.lang.String str84 = dateTime36.toString();
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(period2);
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertNotNull(mutableDateTime5);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(hours29);
// flaky:         org.junit.Assert.assertTrue("'" + int32 + "' != '" + 47 + "'", int32 == 47);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(dateTimeZone45);
        org.junit.Assert.assertNotNull(timeZone46);
// flaky:         org.junit.Assert.assertEquals(timeZone46.getDisplayName(), "\u534f\u8c03\u4e16\u754c\u65f6\u95f4");
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(chronology55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "ISOChronology[UTC]" + "'", str56, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(periodType62);
        org.junit.Assert.assertNotNull(durationFieldType65);
        org.junit.Assert.assertNotNull(periodType66);
        org.junit.Assert.assertNotNull(instant74);
        org.junit.Assert.assertNotNull(chronology75);
        org.junit.Assert.assertNotNull(durationField76);
        org.junit.Assert.assertTrue("'" + long80 + "' != '" + 105144L + "'", long80 == 105144L);
        org.junit.Assert.assertNotNull(dateTimeFormatter81);
        org.junit.Assert.assertNotNull(period83);
// flaky:         org.junit.Assert.assertEquals("'" + str84 + "' != '" + "2022-02-21T15:23:47.672Z" + "'", str84, "2022-02-21T15:23:47.672Z");
    }

    @Test
    public void test07584() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07584");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime1 = instant0.toMutableDateTime();
        org.joda.time.Instant instant2 = instant0.toInstant();
        org.joda.time.Instant instant4 = instant0.withMillis((-60715529700000L));
        org.joda.time.Instant instant6 = instant0.plus((long) 26480);
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(instant2);
        org.junit.Assert.assertNotNull(instant4);
        org.junit.Assert.assertNotNull(instant6);
    }

    @Test
    public void test07585() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07585");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(4);
        org.joda.time.MutableDateTime mutableDateTime2 = org.joda.time.MutableDateTime.now(dateTimeZone1);
        mutableDateTime2.setMillis(1645514199781L);
        org.joda.time.DateTimeField dateTimeField5 = mutableDateTime2.getRoundingField();
        org.joda.time.MutableDateTime.Property property6 = mutableDateTime2.yearOfCentury();
        org.joda.time.MutableDateTime.Property property7 = mutableDateTime2.dayOfWeek();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(mutableDateTime2);
        org.junit.Assert.assertNull(dateTimeField5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(property7);
    }

    @Test
    public void test07586() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07586");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        int int2 = dateTime1.getYearOfCentury();
        int int3 = dateTime1.getWeekyear();
        org.joda.time.DateTime dateTime5 = dateTime1.plus((long) 15);
        org.joda.time.DateTime.Property property6 = dateTime1.year();
        org.joda.time.DateTime dateTime7 = property6.roundHalfFloorCopy();
        org.joda.time.DateTime.Property property8 = dateTime7.millisOfSecond();
        org.joda.time.MutableDateTime mutableDateTime9 = dateTime7.toMutableDateTime();
        int int10 = dateTime7.getWeekOfWeekyear();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime(chronology11);
        org.joda.time.DateTime dateTime14 = dateTime12.plusMinutes(15);
        org.joda.time.Chronology chronology15 = dateTime12.getChronology();
        org.joda.time.DateTime dateTime17 = dateTime12.plusHours(19045);
        org.joda.time.DateTimeZone dateTimeZone18 = dateTime17.getZone();
        org.joda.time.DateTime dateTime19 = dateTime7.toDateTime(dateTimeZone18);
        org.joda.time.DateTime dateTime21 = dateTime19.plusWeeks(1132);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 22 + "'", int2 == 22);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2022 + "'", int3 == 2022);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 52 + "'", int10 == 52);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
    }

    @Test
    public void test07587() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07587");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) (short) -1);
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardDays((long) (byte) 1);
        java.lang.String str4 = duration3.toString();
        mutableDateTime1.add((org.joda.time.ReadableDuration) duration3, 8);
        mutableDateTime1.setSecondOfMinute((int) (short) 0);
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime1.millisOfSecond();
        org.joda.time.MutableDateTime mutableDateTime10 = org.joda.time.MutableDateTime.now();
        mutableDateTime10.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime13 = mutableDateTime10.copy();
        org.joda.time.MutableDateTime.Property property14 = mutableDateTime10.weekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime15 = property14.roundHalfFloor();
        org.joda.time.MutableDateTime mutableDateTime16 = property14.roundHalfCeiling();
        org.joda.time.MutableDateTime mutableDateTime18 = property14.set(1);
        org.joda.time.MutableDateTime mutableDateTime19 = org.joda.time.MutableDateTime.now();
        mutableDateTime19.add((long) 'a');
        org.joda.time.MutableDateTime.Property property22 = mutableDateTime19.yearOfCentury();
        org.joda.time.Duration duration24 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period25 = duration24.toPeriod();
        org.joda.time.Duration duration27 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration30 = duration27.withDurationAdded((long) (short) 100, (int) ' ');
        org.joda.time.Duration duration31 = duration24.minus((org.joda.time.ReadableDuration) duration30);
        mutableDateTime19.add((org.joda.time.ReadableDuration) duration24);
        org.joda.time.MutableDateTime.Property property33 = mutableDateTime19.centuryOfEra();
        mutableDateTime19.addYears(0);
        mutableDateTime19.setMinuteOfDay((int) (short) 0);
        org.joda.time.Instant instant38 = new org.joda.time.Instant();
        org.joda.time.Instant instant40 = instant38.withMillis(0L);
        org.joda.time.Duration duration42 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period43 = duration42.toPeriod();
        org.joda.time.Duration duration46 = duration42.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Instant instant47 = instant40.plus((org.joda.time.ReadableDuration) duration46);
        long long48 = instant47.getMillis();
        org.joda.time.Duration duration49 = new org.joda.time.Duration((org.joda.time.ReadableInstant) mutableDateTime19, (org.joda.time.ReadableInstant) instant47);
        mutableDateTime18.add((org.joda.time.ReadableDuration) duration49, 999);
        mutableDateTime18.setSecondOfMinute(24);
        java.lang.String str54 = mutableDateTime18.toString();
        org.joda.time.Duration duration55 = new org.joda.time.Duration((org.joda.time.ReadableInstant) mutableDateTime1, (org.joda.time.ReadableInstant) mutableDateTime18);
        mutableDateTime18.setDate(1399582L);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "PT86400S" + "'", str4, "PT86400S");
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(mutableDateTime10);
        org.junit.Assert.assertNotNull(mutableDateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(mutableDateTime15);
        org.junit.Assert.assertNotNull(mutableDateTime16);
        org.junit.Assert.assertNotNull(mutableDateTime18);
        org.junit.Assert.assertNotNull(mutableDateTime19);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(instant40);
        org.junit.Assert.assertNotNull(duration42);
        org.junit.Assert.assertNotNull(period43);
        org.junit.Assert.assertNotNull(duration46);
        org.junit.Assert.assertNotNull(instant47);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 86400000L + "'", long48 == 86400000L);
// flaky:         org.junit.Assert.assertEquals("'" + str54 + "' != '" + "-50070-09-17T10:42:24.897Z" + "'", str54, "-50070-09-17T10:42:24.897Z");
    }

    @Test
    public void test07588() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07588");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) 2045);
    }

    @Test
    public void test07589() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07589");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        int int2 = dateTime1.getYearOfCentury();
        int int3 = dateTime1.getWeekyear();
        org.joda.time.DateTime dateTime4 = dateTime1.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime.Property property5 = dateTime1.yearOfEra();
        org.joda.time.DateTime dateTime7 = property5.addToCopy((long) 999);
        org.joda.time.DateTime dateTime8 = property5.roundHalfEvenCopy();
        int int9 = property5.getMaximumValue();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime(chronology10);
        org.joda.time.DateTime dateTime13 = dateTime11.plusMinutes(15);
        org.joda.time.DateTime dateTime15 = dateTime11.withYear(70);
        int int16 = property5.compareTo((org.joda.time.ReadableInstant) dateTime15);
        org.joda.time.DateTime dateTime18 = dateTime15.minus(1964798945424000L);
        org.joda.time.DateTime.Property property19 = dateTime18.millisOfDay();
        org.joda.time.MutableDateTime mutableDateTime20 = dateTime18.toMutableDateTime();
        java.util.Locale locale22 = java.util.Locale.SIMPLIFIED_CHINESE;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str23 = dateTime18.toString("2022-02-22T10:20:46.196", locale22);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: T");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 22 + "'", int2 == 22);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2022 + "'", int3 == 2022);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 292278993 + "'", int9 == 292278993);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(mutableDateTime20);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "zh_CN");
    }

    @Test
    public void test07590() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07590");
        org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod((long) (short) -1, 3155695200000L);
        mutablePeriod2.clear();
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period6 = duration5.toPeriod();
        org.joda.time.Duration duration9 = duration5.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime(chronology10);
        org.joda.time.DateTime dateTime13 = dateTime11.plusMinutes(15);
        org.joda.time.Interval interval14 = duration9.toIntervalTo((org.joda.time.ReadableInstant) dateTime13);
        mutablePeriod2.setPeriod((org.joda.time.ReadableInterval) interval14);
        mutablePeriod2.setYears(0);
        int int18 = mutablePeriod2.getYears();
        org.joda.time.LocalDateTime localDateTime19 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.withHourOfDay(10);
        org.joda.time.DateTimeField dateTimeField25 = localDateTime23.getField((int) (byte) 0);
        java.lang.String str26 = dateTimeField25.toString();
        org.joda.time.DurationField durationField27 = dateTimeField25.getDurationField();
        boolean boolean28 = durationField27.isPrecise();
        java.lang.String str29 = durationField27.getName();
        org.joda.time.DurationFieldType durationFieldType30 = durationField27.getType();
        int int31 = mutablePeriod2.indexOf(durationFieldType30);
        org.joda.time.Duration duration33 = org.joda.time.Duration.standardSeconds(4801284961717L);
        org.joda.time.MutablePeriod mutablePeriod38 = new org.joda.time.MutablePeriod(10, 1, 53, 15);
        boolean boolean39 = duration33.equals((java.lang.Object) 53);
        org.joda.time.MutableDateTime mutableDateTime40 = org.joda.time.MutableDateTime.now();
        java.lang.Object obj41 = mutableDateTime40.clone();
        mutableDateTime40.setTime((long) 46);
        org.joda.time.MutableDateTime.Property property44 = mutableDateTime40.dayOfWeek();
        org.joda.time.MutableDateTime mutableDateTime46 = property44.add(1L);
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.UTC;
        java.util.TimeZone timeZone48 = dateTimeZone47.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone49 = org.joda.time.DateTimeZone.UTC;
        long long51 = dateTimeZone47.getMillisKeepLocal(dateTimeZone49, (long) 44);
        org.joda.time.DateTime dateTime52 = org.joda.time.DateTime.now(dateTimeZone47);
        mutableDateTime46.setZoneRetainFields(dateTimeZone47);
        mutableDateTime46.addSeconds((int) (short) 10);
        org.joda.time.Interval interval56 = duration33.toIntervalTo((org.joda.time.ReadableInstant) mutableDateTime46);
        mutablePeriod2.setPeriod((org.joda.time.ReadableInterval) interval56);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "DateTimeField[year]" + "'", str26, "DateTimeField[year]");
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "years" + "'", str29, "years");
        org.junit.Assert.assertNotNull(durationFieldType30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(mutableDateTime40);
        org.junit.Assert.assertNotNull(obj41);
// flaky:         org.junit.Assert.assertEquals(obj41.toString(), "2022-02-22T07:23:47.886Z");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj41), "2022-02-22T07:23:47.886Z");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj41), "2022-02-22T07:23:47.886Z");
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(mutableDateTime46);
        org.junit.Assert.assertNotNull(dateTimeZone47);
        org.junit.Assert.assertNotNull(timeZone48);
// flaky:         org.junit.Assert.assertEquals(timeZone48.getDisplayName(), "\u534f\u8c03\u4e16\u754c\u65f6\u95f4");
        org.junit.Assert.assertNotNull(dateTimeZone49);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 44L + "'", long51 == 44L);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(interval56);
    }

    @Test
    public void test07591() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07591");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withHourOfDay(10);
        org.joda.time.LocalDateTime.Property property3 = localDateTime0.hourOfDay();
        org.joda.time.DateTimeField dateTimeField4 = property3.getField();
        int int5 = property3.get();
        org.joda.time.LocalDateTime localDateTime6 = property3.roundCeilingCopy();
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.minuteOfHour();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 7 + "'", int5 == 7);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
    }

    @Test
    public void test07592() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07592");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(chronology1);
        int int3 = dateTime2.getYearOfCentury();
        int int4 = dateTime2.getWeekyear();
        org.joda.time.DateTime dateTime5 = dateTime2.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime.Property property6 = dateTime2.yearOfEra();
        org.joda.time.DateTime dateTime7 = property6.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime8 = property6.roundHalfEvenCopy();
        org.joda.time.Duration duration10 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Hours hours11 = duration10.toStandardHours();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime(chronology12);
        int int14 = dateTime13.getSecondOfMinute();
        org.joda.time.MutablePeriod mutablePeriod15 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration10, (org.joda.time.ReadableInstant) dateTime13);
        mutablePeriod15.addSeconds(292278993);
        mutablePeriod15.setPeriod((long) 45, 946312L);
        org.joda.time.DateTime dateTime21 = dateTime8.minus((org.joda.time.ReadablePeriod) mutablePeriod15);
        org.joda.time.DateTime dateTime24 = dateTime8.withDurationAdded((long) 1969, (int) (short) -1);
        org.joda.time.MutableDateTime mutableDateTime25 = org.joda.time.MutableDateTime.now();
        mutableDateTime25.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime28 = mutableDateTime25.copy();
        org.joda.time.MutableDateTime.Property property29 = mutableDateTime25.weekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime30 = property29.roundHalfFloor();
        org.joda.time.MutableDateTime mutableDateTime32 = property29.add((long) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.UTC;
        java.util.TimeZone timeZone34 = dateTimeZone33.toTimeZone();
        org.joda.time.MutableDateTime mutableDateTime35 = mutableDateTime32.toMutableDateTime(dateTimeZone33);
        mutableDateTime35.add(51L);
        int int38 = mutableDateTime35.getHourOfDay();
        boolean boolean39 = dateTime24.isAfter((org.joda.time.ReadableInstant) mutableDateTime35);
        org.joda.time.DateTimeZone dateTimeZone40 = mutableDateTime35.getZone();
        org.joda.time.LocalDateTime localDateTime41 = new org.joda.time.LocalDateTime(966164L, dateTimeZone40);
        org.joda.time.LocalDateTime localDateTime43 = localDateTime41.withYear(1439);
        int int44 = localDateTime43.getYear();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 22 + "'", int3 == 22);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2022 + "'", int4 == 2022);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(hours11);
// flaky:         org.junit.Assert.assertTrue("'" + int14 + "' != '" + 47 + "'", int14 == 47);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(mutableDateTime25);
        org.junit.Assert.assertNotNull(mutableDateTime28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(mutableDateTime30);
        org.junit.Assert.assertNotNull(mutableDateTime32);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertNotNull(timeZone34);
// flaky:         org.junit.Assert.assertEquals(timeZone34.getDisplayName(), "\u534f\u8c03\u4e16\u754c\u65f6\u95f4");
        org.junit.Assert.assertNotNull(mutableDateTime35);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1439 + "'", int44 == 1439);
    }

    @Test
    public void test07593() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07593");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(chronology1);
        int int3 = dateTime2.getYearOfCentury();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = null;
        java.lang.String str5 = dateTime2.toString(dateTimeFormatter4);
        org.joda.time.MutableDateTime mutableDateTime7 = org.joda.time.MutableDateTime.now();
        mutableDateTime7.add((long) 'a');
        org.joda.time.MutableDateTime.Property property10 = mutableDateTime7.yearOfCentury();
        mutableDateTime7.addSeconds(0);
        mutableDateTime7.add((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone15 = mutableDateTime7.getZone();
        org.joda.time.LocalTime localTime16 = new org.joda.time.LocalTime((long) 1973, dateTimeZone15);
        org.joda.time.DateTime dateTime17 = dateTime2.withZone(dateTimeZone15);
        int int19 = dateTimeZone15.getStandardOffset(82800000L);
        org.joda.time.LocalTime localTime20 = new org.joda.time.LocalTime(0L, dateTimeZone15);
        long long24 = dateTimeZone15.convertLocalToUTC((long) 37217338, false, 1000L);
        long long26 = dateTimeZone15.previousTransition((long) 26471738);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 22 + "'", int3 == 22);
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "2022-02-22T07:23:47.995Z" + "'", str5, "2022-02-22T07:23:47.995Z");
        org.junit.Assert.assertNotNull(mutableDateTime7);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 37217338L + "'", long24 == 37217338L);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 26471738L + "'", long26 == 26471738L);
    }

    @Test
    public void test07594() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07594");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clear();
        java.util.Locale locale2 = java.util.Locale.GERMAN;
        java.lang.String str3 = locale2.getDisplayName();
        java.lang.String str4 = locale2.getISO3Language();
        java.util.Locale.Builder builder5 = builder1.setLocale(locale2);
        java.util.Locale.Builder builder6 = builder1.clearExtensions();
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.ReadableInstant readableInstant11 = null;
        org.joda.time.PeriodType periodType12 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod13 = new org.joda.time.MutablePeriod(readableInstant10, readableInstant11, periodType12);
        org.joda.time.DurationFieldType durationFieldType15 = periodType12.getFieldType((int) (short) 0);
        java.lang.String str16 = periodType12.toString();
        org.joda.time.Instant instant17 = new org.joda.time.Instant();
        org.joda.time.Instant instant19 = instant17.withMillis(0L);
        org.joda.time.Chronology chronology20 = instant19.getChronology();
        org.joda.time.Period period21 = new org.joda.time.Period((long) 53, (long) (-1), periodType12, chronology20);
        org.joda.time.DateTimeField dateTimeField22 = dateTimeFieldType7.getField(chronology20);
        java.util.Locale locale23 = java.util.Locale.UK;
        java.lang.String str24 = locale23.getDisplayLanguage();
        int int25 = dateTimeField22.getMaximumTextLength(locale23);
        java.lang.String str26 = locale23.getScript();
        java.util.Locale.Builder builder27 = builder1.setLocale(locale23);
        org.joda.time.LocalDate localDate28 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property29 = localDate28.monthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = org.joda.time.DateTimeFieldType.minuteOfDay();
        boolean boolean31 = localDate28.isSupported(dateTimeFieldType30);
        org.joda.time.LocalDate.Property property32 = localDate28.dayOfWeek();
        org.joda.time.MutableDateTime mutableDateTime33 = org.joda.time.MutableDateTime.now();
        mutableDateTime33.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime36 = mutableDateTime33.copy();
        org.joda.time.MutableDateTime.Property property37 = mutableDateTime33.weekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime38 = property37.roundHalfFloor();
        org.joda.time.MutableDateTime mutableDateTime39 = property37.roundHalfCeiling();
        org.joda.time.MutableDateTime mutableDateTime41 = property37.set(1);
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime(chronology42);
        int int44 = dateTime43.getYearOfCentury();
        int int45 = dateTime43.getWeekyear();
        org.joda.time.DateTime dateTime46 = dateTime43.withEarlierOffsetAtOverlap();
        java.lang.String str47 = dateTime46.toString();
        org.joda.time.MutableDateTime mutableDateTime48 = dateTime46.toMutableDateTime();
        org.joda.time.DateTimeZone dateTimeZone49 = org.joda.time.DateTimeZone.UTC;
        boolean boolean50 = dateTimeZone49.isFixed();
        mutableDateTime48.setZoneRetainFields(dateTimeZone49);
        org.joda.time.MutableDateTime mutableDateTime52 = mutableDateTime41.toMutableDateTime(dateTimeZone49);
        org.joda.time.LocalDate localDate53 = org.joda.time.LocalDate.now(dateTimeZone49);
        java.lang.Object obj55 = null;
        org.joda.time.DateTime dateTime56 = new org.joda.time.DateTime(obj55);
        org.joda.time.Duration duration58 = org.joda.time.Duration.standardSeconds((long) 45);
        org.joda.time.Period period59 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime56, (org.joda.time.ReadableDuration) duration58);
        org.joda.time.LocalDate localDate60 = dateTime56.toLocalDate();
        org.joda.time.LocalDate.Property property61 = localDate60.dayOfMonth();
        java.util.Date date62 = localDate60.toDate();
        org.joda.time.LocalDate.Property property63 = localDate60.dayOfYear();
        java.util.Locale locale64 = java.util.Locale.GERMAN;
        java.lang.String str65 = property63.getAsText(locale64);
        java.lang.String str66 = dateTimeZone49.getShortName(360000000L, locale64);
        java.lang.String str67 = property32.getAsText(locale64);
        java.util.Set<java.lang.String> strSet68 = locale64.getUnicodeLocaleKeys();
        java.util.Locale.Builder builder69 = builder1.setLocale(locale64);
        java.util.Locale.Builder builder72 = builder1.setExtension('a', "6216720-04-22");
        java.util.Locale.Builder builder73 = builder1.clear();
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "de");
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "\u5fb7\u6587" + "'", str3, "\u5fb7\u6587");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "deu" + "'", str4, "deu");
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertNotNull(periodType12);
        org.junit.Assert.assertNotNull(durationFieldType15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "PeriodType[YearDayTime]" + "'", str16, "PeriodType[YearDayTime]");
        org.junit.Assert.assertNotNull(instant19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "en_GB");
// flaky:         org.junit.Assert.assertEquals("'" + str24 + "' != '" + "\u82f1\u6587" + "'", str24, "\u82f1\u6587");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 4 + "'", int25 == 4);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(dateTimeFieldType30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(mutableDateTime33);
        org.junit.Assert.assertNotNull(mutableDateTime36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(mutableDateTime38);
        org.junit.Assert.assertNotNull(mutableDateTime39);
        org.junit.Assert.assertNotNull(mutableDateTime41);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 22 + "'", int44 == 22);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 2022 + "'", int45 == 2022);
        org.junit.Assert.assertNotNull(dateTime46);
// flaky:         org.junit.Assert.assertEquals("'" + str47 + "' != '" + "2022-02-22T07:23:48.015Z" + "'", str47, "2022-02-22T07:23:48.015Z");
        org.junit.Assert.assertNotNull(mutableDateTime48);
        org.junit.Assert.assertNotNull(dateTimeZone49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(mutableDateTime52);
        org.junit.Assert.assertNotNull(localDate53);
        org.junit.Assert.assertNotNull(duration58);
        org.junit.Assert.assertNotNull(localDate60);
        org.junit.Assert.assertNotNull(property61);
        org.junit.Assert.assertNotNull(date62);
// flaky:         org.junit.Assert.assertEquals(date62.toString(), "Tue Feb 22 00:00:00 GMT 2022");
        org.junit.Assert.assertNotNull(property63);
        org.junit.Assert.assertNotNull(locale64);
        org.junit.Assert.assertEquals(locale64.toString(), "de");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "53" + "'", str65, "53");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "+00:00" + "'", str66, "+00:00");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "Dienstag" + "'", str67, "Dienstag");
        org.junit.Assert.assertNotNull(strSet68);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(builder73);
    }

    @Test
    public void test07595() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07595");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property1 = mutableDateTime0.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime3 = property1.set(45);
        org.joda.time.MutableDateTime mutableDateTime4 = property1.roundFloor();
        org.joda.time.MutableDateTime mutableDateTime6 = property1.add(45);
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.UTC;
        java.util.TimeZone timeZone8 = dateTimeZone7.toTimeZone();
        long long10 = dateTimeZone7.previousTransition(100L);
        int int12 = dateTimeZone7.getStandardOffset(86403200L);
        org.joda.time.DateTime dateTime13 = mutableDateTime6.toDateTime(dateTimeZone7);
        int int15 = dateTimeZone7.getOffset((-62135596800000L));
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime(chronology16);
        int int18 = dateTime17.getYearOfCentury();
        int int19 = dateTime17.getWeekyear();
        org.joda.time.DateTime dateTime21 = dateTime17.plus((long) 15);
        org.joda.time.DateTime.Property property22 = dateTime17.year();
        org.joda.time.DateTime dateTime23 = property22.roundHalfFloorCopy();
        org.joda.time.DateTime.Property property24 = dateTime23.millisOfSecond();
        org.joda.time.MutableDateTime mutableDateTime25 = dateTime23.toMutableDateTime();
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime29 = dateTime27.withZoneRetainFields(dateTimeZone28);
        org.joda.time.LocalDate localDate30 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property31 = localDate30.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.UTC;
        java.util.TimeZone timeZone33 = dateTimeZone32.toTimeZone();
        org.joda.time.DateTime dateTime34 = localDate30.toDateTimeAtCurrentTime(dateTimeZone32);
        int int35 = dateTime29.compareTo((org.joda.time.ReadableInstant) dateTime34);
        int int36 = dateTime34.getCenturyOfEra();
        org.joda.time.DateTime dateTime38 = dateTime34.withWeekyear(44);
        org.joda.time.ReadableInstant readableInstant41 = null;
        org.joda.time.ReadableInstant readableInstant42 = null;
        org.joda.time.PeriodType periodType43 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod44 = new org.joda.time.MutablePeriod(readableInstant41, readableInstant42, periodType43);
        org.joda.time.DurationFieldType durationFieldType46 = periodType43.getFieldType((int) (short) 0);
        java.lang.String str47 = periodType43.toString();
        org.joda.time.Instant instant48 = new org.joda.time.Instant();
        org.joda.time.Instant instant50 = instant48.withMillis(0L);
        org.joda.time.Chronology chronology51 = instant50.getChronology();
        org.joda.time.Period period52 = new org.joda.time.Period((long) 53, (long) (-1), periodType43, chronology51);
        org.joda.time.PeriodType periodType53 = periodType43.withMonthsRemoved();
        org.joda.time.Period period54 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime23, (org.joda.time.ReadableInstant) dateTime34, periodType43);
        org.joda.time.DateTime dateTime56 = dateTime34.withMillisOfDay(2000);
        int int57 = dateTime34.getEra();
        int int58 = dateTimeZone7.getOffset((org.joda.time.ReadableInstant) dateTime34);
        org.joda.time.DateTime dateTime59 = dateTime34.withTimeAtStartOfDay();
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(mutableDateTime3);
        org.junit.Assert.assertNotNull(mutableDateTime4);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(timeZone8);
// flaky:         org.junit.Assert.assertEquals(timeZone8.getDisplayName(), "\u534f\u8c03\u4e16\u754c\u65f6\u95f4");
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 100L + "'", long10 == 100L);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 22 + "'", int18 == 22);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2022 + "'", int19 == 2022);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(mutableDateTime25);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertNotNull(timeZone33);
// flaky:         org.junit.Assert.assertEquals(timeZone33.getDisplayName(), "\u534f\u8c03\u4e16\u754c\u65f6\u95f4");
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 20 + "'", int36 == 20);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(periodType43);
        org.junit.Assert.assertNotNull(durationFieldType46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "PeriodType[YearDayTime]" + "'", str47, "PeriodType[YearDayTime]");
        org.junit.Assert.assertNotNull(instant50);
        org.junit.Assert.assertNotNull(chronology51);
        org.junit.Assert.assertNotNull(periodType53);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(dateTime59);
    }

    @Test
    public void test07596() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07596");
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod((int) (byte) -1, (int) (byte) 1, 44, (int) ' ');
        mutablePeriod4.addDays((int) (byte) 10);
        mutablePeriod4.addMillis((int) '4');
        mutablePeriod4.addYears((int) (short) 1);
        mutablePeriod4.addHours(443);
        org.joda.time.Instant instant13 = new org.joda.time.Instant();
        org.joda.time.Instant instant15 = instant13.withMillis(0L);
        org.joda.time.Duration duration17 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period18 = duration17.toPeriod();
        org.joda.time.Duration duration21 = duration17.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Instant instant22 = instant15.plus((org.joda.time.ReadableDuration) duration21);
        long long23 = instant22.getMillis();
        org.joda.time.Chronology chronology24 = instant22.getChronology();
        org.joda.time.Instant instant25 = new org.joda.time.Instant();
        org.joda.time.Instant instant27 = instant25.withMillis(0L);
        org.joda.time.DateTime dateTime28 = instant27.toDateTime();
        org.joda.time.Instant instant29 = new org.joda.time.Instant();
        org.joda.time.Instant instant31 = instant29.withMillis(0L);
        org.joda.time.DateTime dateTime32 = instant31.toDateTime();
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime((long) 1);
        org.joda.time.PeriodType periodType35 = org.joda.time.PeriodType.months();
        org.joda.time.Period period36 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime32, (org.joda.time.ReadableInstant) dateTime34, periodType35);
        boolean boolean37 = dateTime28.isBefore((org.joda.time.ReadableInstant) dateTime32);
        org.joda.time.Period period38 = new org.joda.time.Period((org.joda.time.ReadableInstant) instant22, (org.joda.time.ReadableInstant) dateTime32);
        org.joda.time.Duration duration40 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period41 = duration40.toPeriod();
        org.joda.time.Duration duration44 = duration40.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime(chronology45);
        org.joda.time.DateTime dateTime48 = dateTime46.plusMinutes(15);
        org.joda.time.Interval interval49 = duration44.toIntervalTo((org.joda.time.ReadableInstant) dateTime48);
        org.joda.time.Instant instant50 = instant22.minus((org.joda.time.ReadableDuration) duration44);
        org.joda.time.Duration duration52 = org.joda.time.Duration.standardSeconds(0L);
        int int53 = duration44.compareTo((org.joda.time.ReadableDuration) duration52);
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.DateTime dateTime56 = new org.joda.time.DateTime(chronology55);
        org.joda.time.DateTime dateTime58 = dateTime56.plusMinutes(15);
        org.joda.time.Chronology chronology59 = dateTime56.getChronology();
        java.lang.String str60 = chronology59.toString();
        org.joda.time.DateTimeFieldType dateTimeFieldType61 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.ReadableInstant readableInstant64 = null;
        org.joda.time.ReadableInstant readableInstant65 = null;
        org.joda.time.PeriodType periodType66 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod67 = new org.joda.time.MutablePeriod(readableInstant64, readableInstant65, periodType66);
        org.joda.time.DurationFieldType durationFieldType69 = periodType66.getFieldType((int) (short) 0);
        java.lang.String str70 = periodType66.toString();
        org.joda.time.Instant instant71 = new org.joda.time.Instant();
        org.joda.time.Instant instant73 = instant71.withMillis(0L);
        org.joda.time.Chronology chronology74 = instant73.getChronology();
        org.joda.time.Period period75 = new org.joda.time.Period((long) 53, (long) (-1), periodType66, chronology74);
        org.joda.time.DateTimeField dateTimeField76 = dateTimeFieldType61.getField(chronology74);
        java.util.Locale locale77 = java.util.Locale.UK;
        java.lang.String str78 = locale77.getDisplayLanguage();
        int int79 = dateTimeField76.getMaximumTextLength(locale77);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket80 = new org.joda.time.format.DateTimeParserBucket(3155695200000L, chronology59, locale77);
        mutablePeriod4.setPeriod((org.joda.time.ReadableDuration) duration52, chronology59);
        org.joda.time.DurationField durationField82 = chronology59.days();
        org.joda.time.MutableDateTime mutableDateTime83 = new org.joda.time.MutableDateTime(chronology59);
        org.junit.Assert.assertNotNull(instant15);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(instant22);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 86400000L + "'", long23 == 86400000L);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(instant27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(instant31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(periodType35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(duration40);
        org.junit.Assert.assertNotNull(period41);
        org.junit.Assert.assertNotNull(duration44);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(interval49);
        org.junit.Assert.assertNotNull(instant50);
        org.junit.Assert.assertNotNull(duration52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(chronology59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "ISOChronology[UTC]" + "'", str60, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeFieldType61);
        org.junit.Assert.assertNotNull(periodType66);
        org.junit.Assert.assertNotNull(durationFieldType69);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "PeriodType[YearDayTime]" + "'", str70, "PeriodType[YearDayTime]");
        org.junit.Assert.assertNotNull(instant73);
        org.junit.Assert.assertNotNull(chronology74);
        org.junit.Assert.assertNotNull(dateTimeField76);
        org.junit.Assert.assertNotNull(locale77);
        org.junit.Assert.assertEquals(locale77.toString(), "en_GB");
// flaky:         org.junit.Assert.assertEquals("'" + str78 + "' != '" + "\u82f1\u6587" + "'", str78, "\u82f1\u6587");
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 4 + "'", int79 == 4);
        org.junit.Assert.assertNotNull(durationField82);
    }

    @Test
    public void test07597() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07597");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.Instant instant2 = instant0.withMillis(0L);
        org.joda.time.Duration duration4 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period5 = duration4.toPeriod();
        org.joda.time.Duration duration8 = duration4.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Instant instant9 = instant2.plus((org.joda.time.ReadableDuration) duration8);
        long long10 = instant9.getMillis();
        org.joda.time.Chronology chronology11 = instant9.getChronology();
        org.joda.time.DurationField durationField12 = chronology11.months();
        org.joda.time.MutableDateTime mutableDateTime13 = org.joda.time.MutableDateTime.now(chronology11);
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate(chronology11);
        java.lang.String str15 = localDate14.toString();
        org.junit.Assert.assertNotNull(instant2);
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(instant9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 86400000L + "'", long10 == 86400000L);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(mutableDateTime13);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "2022-02-22" + "'", str15, "2022-02-22");
    }

    @Test
    public void test07598() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07598");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.add((long) 'a');
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime0.yearOfCentury();
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period6 = duration5.toPeriod();
        org.joda.time.Duration duration8 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration11 = duration8.withDurationAdded((long) (short) 100, (int) ' ');
        org.joda.time.Duration duration12 = duration5.minus((org.joda.time.ReadableDuration) duration11);
        mutableDateTime0.add((org.joda.time.ReadableDuration) duration5);
        org.joda.time.MutableDateTime.Property property14 = mutableDateTime0.centuryOfEra();
        mutableDateTime0.addHours((int) (byte) 10);
        mutableDateTime0.addWeeks(20);
        int int19 = mutableDateTime0.getYearOfCentury();
        org.joda.time.MutableDateTime.Property property20 = mutableDateTime0.dayOfYear();
        mutableDateTime0.add(995819L);
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.DurationFieldType durationFieldType24 = dateTimeFieldType23.getDurationType();
        org.joda.time.Instant instant25 = new org.joda.time.Instant();
        org.joda.time.Instant instant27 = instant25.withMillis(0L);
        org.joda.time.Duration duration29 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period30 = duration29.toPeriod();
        org.joda.time.Duration duration33 = duration29.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Instant instant34 = instant27.plus((org.joda.time.ReadableDuration) duration33);
        long long35 = instant34.getMillis();
        org.joda.time.Chronology chronology36 = instant34.getChronology();
        org.joda.time.DurationField durationField37 = chronology36.months();
        org.joda.time.DateTimeField dateTimeField38 = dateTimeFieldType23.getField(chronology36);
        mutableDateTime0.setChronology(chronology36);
        org.joda.time.LocalTime localTime40 = new org.joda.time.LocalTime(chronology36);
        int int41 = localTime40.getMillisOfSecond();
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 22 + "'", int19 == 22);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertNotNull(durationFieldType24);
        org.junit.Assert.assertNotNull(instant27);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertNotNull(instant34);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 86400000L + "'", long35 == 86400000L);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(durationField37);
        org.junit.Assert.assertNotNull(dateTimeField38);
// flaky:         org.junit.Assert.assertTrue("'" + int41 + "' != '" + 178 + "'", int41 == 178);
    }

    @Test
    public void test07599() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07599");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.monthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.minuteOfDay();
        boolean boolean3 = localDate0.isSupported(dateTimeFieldType2);
        org.joda.time.LocalDate.Property property4 = localDate0.dayOfWeek();
        org.joda.time.MutableDateTime mutableDateTime5 = org.joda.time.MutableDateTime.now();
        mutableDateTime5.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime8 = mutableDateTime5.copy();
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime5.weekOfWeekyear();
        org.joda.time.MutableDateTime.Property property10 = mutableDateTime5.dayOfYear();
        org.joda.time.MutableDateTime mutableDateTime11 = org.joda.time.MutableDateTime.now();
        mutableDateTime11.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime14 = mutableDateTime11.copy();
        mutableDateTime11.setDate((long) '#');
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property18 = localDate17.monthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = org.joda.time.DateTimeFieldType.minuteOfDay();
        boolean boolean20 = localDate17.isSupported(dateTimeFieldType19);
        int int21 = localDate17.getDayOfYear();
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateMidnight dateMidnight23 = localDate17.toDateMidnight(dateTimeZone22);
        org.joda.time.DateTime dateTime24 = mutableDateTime11.toDateTime(dateTimeZone22);
        org.joda.time.LocalDate localDate25 = org.joda.time.LocalDate.now(dateTimeZone22);
        org.joda.time.PeriodType periodType28 = null;
        org.joda.time.Period period29 = new org.joda.time.Period((long) 100, 1L, periodType28);
        org.joda.time.PeriodType periodType30 = period29.getPeriodType();
        boolean boolean31 = dateTimeZone22.equals((java.lang.Object) periodType30);
        mutableDateTime5.setZoneRetainFields(dateTimeZone22);
        org.joda.time.LocalDate localDate33 = new org.joda.time.LocalDate(dateTimeZone22);
        org.joda.time.DateTime dateTime34 = localDate0.toDateTimeAtStartOfDay(dateTimeZone22);
        org.joda.time.DateMidnight dateMidnight35 = localDate0.toDateMidnight();
        int int36 = dateMidnight35.getYear();
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(mutableDateTime5);
        org.junit.Assert.assertNotNull(mutableDateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertNotNull(mutableDateTime14);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 53 + "'", int21 == 53);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(dateMidnight23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertNotNull(periodType30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateMidnight35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 2022 + "'", int36 == 2022);
    }

    @Test
    public void test07600() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07600");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(53, 0);
        org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime(dateTimeZone2);
        org.joda.time.LocalTime localTime5 = localTime3.withMillisOfSecond(20);
        org.joda.time.LocalTime localTime7 = localTime3.minusMinutes(22623598);
        org.joda.time.MutableDateTime mutableDateTime8 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime8.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime10 = property9.getMutableDateTime();
        org.joda.time.DateTimeField dateTimeField11 = property9.getField();
        int int12 = property9.getLeapAmount();
        org.joda.time.MutableDateTime mutableDateTime14 = property9.add((int) (byte) 1);
        org.joda.time.MutableDateTime mutableDateTime16 = property9.add((int) (short) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.ReadableInstant readableInstant21 = null;
        org.joda.time.PeriodType periodType22 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod23 = new org.joda.time.MutablePeriod(readableInstant20, readableInstant21, periodType22);
        org.joda.time.DurationFieldType durationFieldType25 = periodType22.getFieldType((int) (short) 0);
        java.lang.String str26 = periodType22.toString();
        org.joda.time.Instant instant27 = new org.joda.time.Instant();
        org.joda.time.Instant instant29 = instant27.withMillis(0L);
        org.joda.time.Chronology chronology30 = instant29.getChronology();
        org.joda.time.Period period31 = new org.joda.time.Period((long) 53, (long) (-1), periodType22, chronology30);
        org.joda.time.DateTimeField dateTimeField32 = dateTimeFieldType17.getField(chronology30);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime(chronology33);
        org.joda.time.DateTime dateTime36 = dateTime34.plusMinutes(15);
        org.joda.time.Chronology chronology37 = dateTime34.getChronology();
        java.lang.String str38 = chronology37.toString();
        org.joda.time.DateTimeField dateTimeField39 = dateTimeFieldType17.getField(chronology37);
        java.lang.String str40 = dateTimeFieldType17.toString();
        boolean boolean41 = mutableDateTime16.isSupported(dateTimeFieldType17);
        org.joda.time.LocalTime localTime43 = localTime7.withField(dateTimeFieldType17, 1260);
        org.joda.time.LocalTime.Property property44 = localTime43.millisOfDay();
        org.joda.time.LocalTime localTime46 = localTime43.minusMinutes(62452);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(mutableDateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(mutableDateTime10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(mutableDateTime14);
        org.junit.Assert.assertNotNull(mutableDateTime16);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(periodType22);
        org.junit.Assert.assertNotNull(durationFieldType25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "PeriodType[YearDayTime]" + "'", str26, "PeriodType[YearDayTime]");
        org.junit.Assert.assertNotNull(instant29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "ISOChronology[UTC]" + "'", str38, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "minuteOfDay" + "'", str40, "minuteOfDay");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(localTime43);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(localTime46);
    }

    @Test
    public void test07601() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07601");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        int int2 = dateTime1.getSecondOfMinute();
        boolean boolean3 = dateTime1.isEqualNow();
        int int4 = dateTime1.getDayOfYear();
        org.joda.time.DateTime dateTime6 = dateTime1.plusDays((int) '#');
        org.joda.time.DateTime.Property property7 = dateTime1.centuryOfEra();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.LocalTime localTime9 = new org.joda.time.LocalTime(dateTimeZone8);
        org.joda.time.LocalTime localTime11 = localTime9.minusHours((int) (byte) 100);
        org.joda.time.Chronology chronology12 = localTime11.getChronology();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(chronology13);
        int int15 = dateTime14.getYearOfCentury();
        int int16 = dateTime14.getWeekyear();
        org.joda.time.DateTime dateTime17 = dateTime14.withEarlierOffsetAtOverlap();
        java.lang.String str18 = dateTime17.toString();
        org.joda.time.MutableDateTime mutableDateTime19 = dateTime17.toMutableDateTime();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.UTC;
        boolean boolean21 = dateTimeZone20.isFixed();
        mutableDateTime19.setZoneRetainFields(dateTimeZone20);
        org.joda.time.DateTime dateTime23 = localTime11.toDateTimeToday(dateTimeZone20);
        long long25 = dateTimeZone20.nextTransition((long) 161);
        org.joda.time.LocalTime localTime26 = new org.joda.time.LocalTime(dateTimeZone20);
        org.joda.time.DateTime dateTime27 = dateTime1.withZoneRetainFields(dateTimeZone20);
        java.lang.String str28 = dateTimeZone20.toString();
// flaky:         org.junit.Assert.assertTrue("'" + int2 + "' != '" + 48 + "'", int2 == 48);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 53 + "'", int4 == 53);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 22 + "'", int15 == 22);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2022 + "'", int16 == 2022);
        org.junit.Assert.assertNotNull(dateTime17);
// flaky:         org.junit.Assert.assertEquals("'" + str18 + "' != '" + "2022-02-22T07:23:48.237Z" + "'", str18, "2022-02-22T07:23:48.237Z");
        org.junit.Assert.assertNotNull(mutableDateTime19);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 161L + "'", long25 == 161L);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "UTC" + "'", str28, "UTC");
    }

    @Test
    public void test07602() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07602");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.add((long) 'a');
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime0.yearOfCentury();
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period6 = duration5.toPeriod();
        org.joda.time.Duration duration8 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration11 = duration8.withDurationAdded((long) (short) 100, (int) ' ');
        org.joda.time.Duration duration12 = duration5.minus((org.joda.time.ReadableDuration) duration11);
        mutableDateTime0.add((org.joda.time.ReadableDuration) duration5);
        org.joda.time.MutableDateTime.Property property14 = mutableDateTime0.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime15 = property14.roundFloor();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime(chronology16);
        int int18 = dateTime17.getYearOfCentury();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter19 = null;
        java.lang.String str20 = dateTime17.toString(dateTimeFormatter19);
        mutableDateTime15.setMillis((org.joda.time.ReadableInstant) dateTime17);
        mutableDateTime15.addDays(22);
        org.joda.time.MutableDateTime.Property property24 = mutableDateTime15.weekOfWeekyear();
        org.joda.time.MutablePeriod mutablePeriod27 = new org.joda.time.MutablePeriod((long) (short) -1, 3155695200000L);
        mutablePeriod27.clear();
        org.joda.time.Duration duration30 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period31 = duration30.toPeriod();
        org.joda.time.Duration duration34 = duration30.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime(chronology35);
        org.joda.time.DateTime dateTime38 = dateTime36.plusMinutes(15);
        org.joda.time.Interval interval39 = duration34.toIntervalTo((org.joda.time.ReadableInstant) dateTime38);
        mutablePeriod27.setPeriod((org.joda.time.ReadableInterval) interval39);
        mutablePeriod27.setYears(0);
        mutableDateTime15.add((org.joda.time.ReadablePeriod) mutablePeriod27, 26212);
        mutableDateTime15.addMillis(26268751);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str48 = mutableDateTime15.toString("2022-02-22T07:16:37.186Z");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: T");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(mutableDateTime15);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 22 + "'", int18 == 22);
// flaky:         org.junit.Assert.assertEquals("'" + str20 + "' != '" + "2022-02-22T07:23:48.255Z" + "'", str20, "2022-02-22T07:23:48.255Z");
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(interval39);
    }

    @Test
    public void test07603() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07603");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) (byte) -1);
        int int2 = localDate1.getYearOfEra();
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.UTC;
        java.util.TimeZone timeZone4 = dateTimeZone3.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.UTC;
        long long7 = dateTimeZone3.getMillisKeepLocal(dateTimeZone5, (long) 44);
        org.joda.time.DateTime dateTime8 = localDate1.toDateTimeAtMidnight(dateTimeZone3);
        java.util.Locale locale10 = null;
        java.lang.String str11 = dateTimeZone3.getName(946000L, locale10);
        org.joda.time.MutableDateTime mutableDateTime12 = new org.joda.time.MutableDateTime(dateTimeZone3);
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime(dateTimeZone3);
        org.joda.time.DateTime dateTime14 = dateTime13.toDateTime();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1969 + "'", int2 == 1969);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(timeZone4);
        org.junit.Assert.assertEquals(timeZone4.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 44L + "'", long7 == 44L);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+00:00" + "'", str11, "+00:00");
        org.junit.Assert.assertNotNull(dateTime14);
    }

    @Test
    public void test07604() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07604");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        int int2 = dateTime1.getYearOfCentury();
        int int3 = dateTime1.getWeekyear();
        org.joda.time.DateTime dateTime5 = dateTime1.plus((long) 15);
        org.joda.time.DateTime.Property property6 = dateTime5.millisOfSecond();
        int int7 = dateTime5.getWeekOfWeekyear();
        java.lang.String str8 = dateTime5.toString();
        org.joda.time.DateTime dateTime10 = dateTime5.withWeekyear((int) (byte) 0);
        org.joda.time.Duration duration12 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period13 = duration12.toPeriod();
        org.joda.time.Duration duration15 = duration12.minus((long) 292278993);
        org.joda.time.MutableDateTime mutableDateTime16 = org.joda.time.MutableDateTime.now();
        mutableDateTime16.add((long) 'a');
        org.joda.time.MutableDateTime.Property property19 = mutableDateTime16.yearOfCentury();
        org.joda.time.Duration duration21 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period22 = duration21.toPeriod();
        org.joda.time.Duration duration24 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration27 = duration24.withDurationAdded((long) (short) 100, (int) ' ');
        org.joda.time.Duration duration28 = duration21.minus((org.joda.time.ReadableDuration) duration27);
        mutableDateTime16.add((org.joda.time.ReadableDuration) duration21);
        boolean boolean30 = duration15.isShorterThan((org.joda.time.ReadableDuration) duration21);
        org.joda.time.Duration duration32 = duration21.minus((long) (byte) 0);
        org.joda.time.MutableDateTime mutableDateTime33 = org.joda.time.MutableDateTime.now();
        mutableDateTime33.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime36 = mutableDateTime33.copy();
        mutableDateTime33.setDate((long) '#');
        org.joda.time.LocalDate localDate39 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property40 = localDate39.monthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType41 = org.joda.time.DateTimeFieldType.minuteOfDay();
        boolean boolean42 = localDate39.isSupported(dateTimeFieldType41);
        int int43 = localDate39.getDayOfYear();
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateMidnight dateMidnight45 = localDate39.toDateMidnight(dateTimeZone44);
        org.joda.time.DateTime dateTime46 = mutableDateTime33.toDateTime(dateTimeZone44);
        org.joda.time.MutablePeriod mutablePeriod47 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration32, (org.joda.time.ReadableInstant) mutableDateTime33);
        org.joda.time.MutablePeriod mutablePeriod48 = mutablePeriod47.copy();
        mutablePeriod47.setMinutes(14);
        org.joda.time.LocalDate localDate51 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property52 = localDate51.monthOfYear();
        org.joda.time.DateTimeField dateTimeField53 = property52.getField();
        org.joda.time.LocalDate localDate54 = property52.withMaximumValue();
        java.util.Date date55 = localDate54.toDate();
        org.joda.time.LocalDate localDate57 = localDate54.minusMonths((int) ' ');
        org.joda.time.Interval interval58 = localDate54.toInterval();
        mutablePeriod47.setPeriod((org.joda.time.ReadableInterval) interval58);
        org.joda.time.DateTime dateTime61 = dateTime5.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod47, 15559679);
        int int62 = mutablePeriod47.getWeeks();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 22 + "'", int2 == 22);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2022 + "'", int3 == 2022);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 8 + "'", int7 == 8);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "2022-02-22T07:23:48.336Z" + "'", str8, "2022-02-22T07:23:48.336Z");
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(mutableDateTime16);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertNotNull(mutableDateTime33);
        org.junit.Assert.assertNotNull(mutableDateTime36);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(dateTimeFieldType41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 53 + "'", int43 == 53);
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertNotNull(dateMidnight45);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(mutablePeriod48);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertNotNull(localDate54);
        org.junit.Assert.assertNotNull(date55);
// flaky:         org.junit.Assert.assertEquals(date55.toString(), "Thu Dec 22 00:00:00 GMT 2022");
        org.junit.Assert.assertNotNull(localDate57);
        org.junit.Assert.assertNotNull(interval58);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
    }

    @Test
    public void test07605() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07605");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.add((long) 'a');
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime0.yearOfCentury();
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period6 = duration5.toPeriod();
        org.joda.time.Duration duration8 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration11 = duration8.withDurationAdded((long) (short) 100, (int) ' ');
        org.joda.time.Duration duration12 = duration5.minus((org.joda.time.ReadableDuration) duration11);
        mutableDateTime0.add((org.joda.time.ReadableDuration) duration5);
        org.joda.time.MutableDateTime.Property property14 = mutableDateTime0.centuryOfEra();
        mutableDateTime0.addHours((int) (byte) 10);
        mutableDateTime0.addWeeks(20);
        org.joda.time.DateTimeField dateTimeField19 = mutableDateTime0.getRoundingField();
        int int20 = mutableDateTime0.getWeekyear();
        int int21 = mutableDateTime0.getDayOfWeek();
        int int22 = mutableDateTime0.getWeekyear();
        org.joda.time.MutableDateTime.Property property23 = mutableDateTime0.millisOfDay();
        org.joda.time.MutableDateTime.Property property24 = mutableDateTime0.yearOfEra();
        org.joda.time.MutableDateTime mutableDateTime25 = property24.roundHalfCeiling();
        org.joda.time.MutableDateTime mutableDateTime26 = property24.roundHalfEven();
        int int27 = mutableDateTime26.getRoundingMode();
        org.joda.time.MutableDateTime.Property property28 = mutableDateTime26.era();
        mutableDateTime26.addMinutes(26622);
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNull(dateTimeField19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2022 + "'", int20 == 2022);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 3 + "'", int21 == 3);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2022 + "'", int22 == 2022);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(mutableDateTime25);
        org.junit.Assert.assertNotNull(mutableDateTime26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(property28);
    }

    @Test
    public void test07606() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07606");
        org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod((long) (short) -1, 3155695200000L);
        mutablePeriod2.setHours(26148);
        org.joda.time.Period period5 = mutablePeriod2.toPeriod();
        org.joda.time.Period period8 = new org.joda.time.Period((long) 26164766, 950707L);
        org.joda.time.Period period10 = period8.plusWeeks(62176);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.UTC;
        java.util.Locale locale14 = java.util.Locale.GERMAN;
        java.lang.String str15 = locale14.getDisplayName();
        java.lang.String str16 = dateTimeZone12.getName(100L, locale14);
        java.lang.String str17 = dateTimeZone12.toString();
        org.joda.time.MutableDateTime mutableDateTime18 = new org.joda.time.MutableDateTime((long) 1970, dateTimeZone12);
        org.joda.time.MutableDateTime.Property property19 = mutableDateTime18.yearOfCentury();
        boolean boolean20 = period10.equals((java.lang.Object) mutableDateTime18);
        org.joda.time.Duration duration21 = mutablePeriod2.toDurationFrom((org.joda.time.ReadableInstant) mutableDateTime18);
        org.joda.time.Instant instant22 = new org.joda.time.Instant();
        org.joda.time.Instant instant24 = instant22.withMillis(0L);
        org.joda.time.DateTime dateTime25 = instant24.toDateTime();
        org.joda.time.Duration duration27 = org.joda.time.Duration.standardMinutes((long) (byte) -1);
        org.joda.time.Instant instant29 = instant24.withDurationAdded((org.joda.time.ReadableDuration) duration27, 0);
        org.joda.time.Instant instant32 = instant29.withDurationAdded(25L, 26158);
        org.joda.time.MutableDateTime mutableDateTime33 = instant32.toMutableDateTime();
        org.joda.time.LocalDate localDate34 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property35 = localDate34.monthOfYear();
        org.joda.time.DateTimeField dateTimeField36 = property35.getField();
        org.joda.time.LocalDate localDate37 = property35.roundCeilingCopy();
        org.joda.time.Chronology chronology38 = localDate37.getChronology();
        org.joda.time.DurationField durationField39 = chronology38.eras();
        org.joda.time.DateTimeField dateTimeField40 = chronology38.clockhourOfDay();
        mutableDateTime33.setRounding(dateTimeField40);
        org.joda.time.MutablePeriod mutablePeriod44 = new org.joda.time.MutablePeriod((long) (short) -1, 3155695200000L);
        mutablePeriod44.clear();
        org.joda.time.Duration duration47 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period48 = duration47.toPeriod();
        org.joda.time.Duration duration51 = duration47.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.DateTime dateTime53 = new org.joda.time.DateTime(chronology52);
        org.joda.time.DateTime dateTime55 = dateTime53.plusMinutes(15);
        org.joda.time.Interval interval56 = duration51.toIntervalTo((org.joda.time.ReadableInstant) dateTime55);
        mutablePeriod44.setPeriod((org.joda.time.ReadableInterval) interval56);
        org.joda.time.ReadableInstant readableInstant58 = null;
        org.joda.time.ReadableInstant readableInstant59 = null;
        org.joda.time.PeriodType periodType60 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod61 = new org.joda.time.MutablePeriod(readableInstant58, readableInstant59, periodType60);
        org.joda.time.DurationFieldType durationFieldType63 = periodType60.getFieldType((int) (short) 0);
        int int64 = mutablePeriod44.get(durationFieldType63);
        mutableDateTime33.add(durationFieldType63, 26311);
        int int67 = mutableDateTime18.compareTo((org.joda.time.ReadableInstant) mutableDateTime33);
        mutableDateTime18.addWeeks(26467);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "de");
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "\u5fb7\u6587" + "'", str15, "\u5fb7\u6587");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "+00:00" + "'", str16, "+00:00");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "UTC" + "'", str17, "UTC");
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(instant24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertNotNull(instant29);
        org.junit.Assert.assertNotNull(instant32);
        org.junit.Assert.assertNotNull(mutableDateTime33);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(localDate37);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(durationField39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertNotNull(period48);
        org.junit.Assert.assertNotNull(duration51);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(interval56);
        org.junit.Assert.assertNotNull(periodType60);
        org.junit.Assert.assertNotNull(durationFieldType63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + (-1) + "'", int67 == (-1));
    }

    @Test
    public void test07607() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07607");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime3 = dateTime1.withZoneRetainFields(dateTimeZone2);
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property5 = localDate4.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.UTC;
        java.util.TimeZone timeZone7 = dateTimeZone6.toTimeZone();
        org.joda.time.DateTime dateTime8 = localDate4.toDateTimeAtCurrentTime(dateTimeZone6);
        int int9 = dateTime3.compareTo((org.joda.time.ReadableInstant) dateTime8);
        org.joda.time.DateTime dateTime11 = dateTime3.withYear(5);
        org.joda.time.DateTime dateTime12 = dateTime3.withTimeAtStartOfDay();
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property14 = localDate13.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.UTC;
        java.util.TimeZone timeZone16 = dateTimeZone15.toTimeZone();
        org.joda.time.DateTime dateTime17 = localDate13.toDateTimeAtCurrentTime(dateTimeZone15);
        org.joda.time.DateTime dateTime18 = dateTime12.withZone(dateTimeZone15);
        int int20 = dateTimeZone15.getOffsetFromLocal(1031695L);
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate(dateTimeZone15);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.LocalTime localTime24 = new org.joda.time.LocalTime((long) (short) 100, chronology23);
        int int25 = localTime24.getMillisOfDay();
        org.joda.time.LocalTime.Property property26 = localTime24.millisOfSecond();
        org.joda.time.DurationField durationField27 = property26.getLeapDurationField();
        org.joda.time.LocalTime localTime28 = property26.roundHalfEvenCopy();
        org.joda.time.Instant instant29 = new org.joda.time.Instant();
        org.joda.time.Instant instant31 = instant29.withMillis(0L);
        org.joda.time.Duration duration33 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period34 = duration33.toPeriod();
        org.joda.time.Duration duration37 = duration33.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Instant instant38 = instant31.plus((org.joda.time.ReadableDuration) duration37);
        long long39 = instant38.getMillis();
        org.joda.time.Chronology chronology40 = instant38.getChronology();
        org.joda.time.MutableDateTime mutableDateTime41 = org.joda.time.MutableDateTime.now();
        mutableDateTime41.add((long) 'a');
        org.joda.time.Duration duration45 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration47 = org.joda.time.Duration.standardDays((long) (byte) 1);
        java.lang.String str48 = duration47.toString();
        boolean boolean49 = duration45.isShorterThan((org.joda.time.ReadableDuration) duration47);
        org.joda.time.Hours hours50 = duration45.toStandardHours();
        mutableDateTime41.add((org.joda.time.ReadableDuration) duration45, 20);
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.DateTime dateTime54 = new org.joda.time.DateTime(chronology53);
        int int55 = dateTime54.getYearOfCentury();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter56 = null;
        java.lang.String str57 = dateTime54.toString(dateTimeFormatter56);
        org.joda.time.DateTime dateTime59 = dateTime54.minusMonths(22);
        org.joda.time.Instant instant60 = new org.joda.time.Instant();
        org.joda.time.Instant instant62 = instant60.withMillis(0L);
        org.joda.time.Chronology chronology63 = instant62.getChronology();
        org.joda.time.DurationField durationField64 = chronology63.eras();
        org.joda.time.DateTime dateTime65 = dateTime54.withChronology(chronology63);
        org.joda.time.Period period66 = duration45.toPeriod(chronology63);
        org.joda.time.Instant instant68 = instant38.withDurationAdded((org.joda.time.ReadableDuration) duration45, 16);
        boolean boolean69 = localTime28.equals((java.lang.Object) instant38);
        org.joda.time.Instant instant72 = instant38.withDurationAdded(3155695200000L, 44);
        org.joda.time.DateTimeZone dateTimeZone73 = instant38.getZone();
        org.joda.time.MutableDateTime mutableDateTime74 = new org.joda.time.MutableDateTime(dateTimeZone73);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate75 = new org.joda.time.LocalDate((java.lang.Object) dateTimeZone15, dateTimeZone73);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: org.joda.time.tz.FixedDateTimeZone");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(timeZone7);
// flaky:         org.junit.Assert.assertEquals(timeZone7.getDisplayName(), "\u5354\u8abf\u4e16\u754c\u6642\u9593");
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(timeZone16);
// flaky:         org.junit.Assert.assertEquals(timeZone16.getDisplayName(), "\u5354\u8abf\u4e16\u754c\u6642\u9593");
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 100 + "'", int25 == 100);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNull(durationField27);
        org.junit.Assert.assertNotNull(localTime28);
        org.junit.Assert.assertNotNull(instant31);
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertNotNull(period34);
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertNotNull(instant38);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 86400000L + "'", long39 == 86400000L);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(mutableDateTime41);
        org.junit.Assert.assertNotNull(duration45);
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "PT86400S" + "'", str48, "PT86400S");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(hours50);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 22 + "'", int55 == 22);
// flaky:         org.junit.Assert.assertEquals("'" + str57 + "' != '" + "2022-02-22T07:23:48.411Z" + "'", str57, "2022-02-22T07:23:48.411Z");
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(instant62);
        org.junit.Assert.assertNotNull(chronology63);
        org.junit.Assert.assertNotNull(durationField64);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(period66);
        org.junit.Assert.assertNotNull(instant68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(instant72);
        org.junit.Assert.assertNotNull(dateTimeZone73);
    }

    @Test
    public void test07608() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07608");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime3 = mutableDateTime0.copy();
        org.joda.time.MutableDateTime.Property property4 = mutableDateTime0.weekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime5 = property4.roundHalfFloor();
        org.joda.time.MutableDateTime mutableDateTime7 = property4.add((long) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.UTC;
        java.util.TimeZone timeZone9 = dateTimeZone8.toTimeZone();
        org.joda.time.MutableDateTime mutableDateTime10 = mutableDateTime7.toMutableDateTime(dateTimeZone8);
        mutableDateTime10.add(51L);
        org.joda.time.MutableDateTime.Property property13 = mutableDateTime10.dayOfWeek();
        org.joda.time.MutableDateTime mutableDateTime15 = property13.add(4);
        org.joda.time.MutableDateTime.Property property16 = mutableDateTime15.hourOfDay();
        int int17 = mutableDateTime15.getEra();
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(mutableDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(mutableDateTime5);
        org.junit.Assert.assertNotNull(mutableDateTime7);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(timeZone9);
// flaky:         org.junit.Assert.assertEquals(timeZone9.getDisplayName(), "\u534f\u8c03\u4e16\u754c\u65f6\u95f4");
        org.junit.Assert.assertNotNull(mutableDateTime10);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(mutableDateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
    }

    @Test
    public void test07609() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07609");
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.parse("2022-02-22T07:17:41.053Z");
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.dayOfWeek();
        org.joda.time.MutableDateTime mutableDateTime3 = org.joda.time.MutableDateTime.now();
        mutableDateTime3.add((long) 'a');
        org.joda.time.MutableDateTime.Property property6 = mutableDateTime3.yearOfCentury();
        mutableDateTime3.addSeconds(0);
        mutableDateTime3.setWeekyear((int) 'u');
        java.lang.Object obj11 = null;
        org.joda.time.MutableDateTime mutableDateTime12 = org.joda.time.MutableDateTime.now();
        mutableDateTime12.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime15 = mutableDateTime12.copy();
        mutableDateTime12.setDate((long) '#');
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property19 = localDate18.monthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = org.joda.time.DateTimeFieldType.minuteOfDay();
        boolean boolean21 = localDate18.isSupported(dateTimeFieldType20);
        int int22 = localDate18.getDayOfYear();
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateMidnight dateMidnight24 = localDate18.toDateMidnight(dateTimeZone23);
        org.joda.time.DateTime dateTime25 = mutableDateTime12.toDateTime(dateTimeZone23);
        org.joda.time.LocalDate localDate26 = org.joda.time.LocalDate.now(dateTimeZone23);
        org.joda.time.MutableDateTime mutableDateTime27 = new org.joda.time.MutableDateTime(obj11, dateTimeZone23);
        java.lang.String str29 = dateTimeZone23.getName(105144L);
        long long31 = dateTimeZone23.nextTransition(3155760000000L);
        mutableDateTime3.setZone(dateTimeZone23);
        org.joda.time.DateTimeZone dateTimeZone33 = mutableDateTime3.getZone();
        int int34 = property2.getDifference((org.joda.time.ReadableInstant) mutableDateTime3);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime3.setDateTime(26546, 26212472, 26514297, 26608, 15713543, 64173, 177);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26608 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(mutableDateTime3);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(mutableDateTime12);
        org.junit.Assert.assertNotNull(mutableDateTime15);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 53 + "'", int22 == 53);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(dateMidnight24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "+00:00" + "'", str29, "+00:00");
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 3155760000000L + "'", long31 == 3155760000000L);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 695785 + "'", int34 == 695785);
    }

    @Test
    public void test07610() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07610");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.Instant instant2 = new org.joda.time.Instant();
        org.joda.time.Instant instant4 = instant2.withMillis(0L);
        org.joda.time.Chronology chronology5 = instant4.getChronology();
        org.joda.time.DurationField durationField6 = chronology5.eras();
        org.joda.time.LocalTime localTime7 = org.joda.time.LocalTime.now(chronology5);
        org.joda.time.DurationField durationField8 = chronology5.eras();
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 44, chronology5);
        org.joda.time.DateTimeField dateTimeField10 = dateTimeFieldType0.getField(chronology5);
        org.joda.time.PeriodType periodType13 = null;
        org.joda.time.Period period14 = new org.joda.time.Period((long) 100, 1L, periodType13);
        org.joda.time.Period period16 = period14.minusSeconds((-1));
        java.lang.String str17 = period14.toString();
        long long20 = chronology5.add((org.joda.time.ReadablePeriod) period14, (long) ' ', (int) 'a');
        org.joda.time.LocalTime localTime21 = new org.joda.time.LocalTime(chronology5);
        org.joda.time.Instant instant22 = new org.joda.time.Instant();
        org.joda.time.Instant instant24 = instant22.withMillis(0L);
        org.joda.time.Duration duration26 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period27 = duration26.toPeriod();
        org.joda.time.Duration duration30 = duration26.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Instant instant31 = instant24.plus((org.joda.time.ReadableDuration) duration30);
        long long32 = instant31.getMillis();
        long long33 = instant31.getMillis();
        org.joda.time.DateTime dateTime34 = localTime21.toDateTime((org.joda.time.ReadableInstant) instant31);
        org.joda.time.Duration duration36 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period37 = duration36.toPeriod();
        org.joda.time.Duration duration39 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration41 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration44 = duration41.withDurationAdded((long) (short) 100, (int) ' ');
        boolean boolean45 = duration39.isLongerThan((org.joda.time.ReadableDuration) duration44);
        org.joda.time.Duration duration46 = duration36.minus((org.joda.time.ReadableDuration) duration39);
        org.joda.time.ReadableInstant readableInstant49 = null;
        org.joda.time.ReadableInstant readableInstant50 = null;
        org.joda.time.PeriodType periodType51 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod52 = new org.joda.time.MutablePeriod(readableInstant49, readableInstant50, periodType51);
        org.joda.time.DurationFieldType durationFieldType54 = periodType51.getFieldType((int) (short) 0);
        java.lang.String str55 = periodType51.toString();
        org.joda.time.Instant instant56 = new org.joda.time.Instant();
        org.joda.time.Instant instant58 = instant56.withMillis(0L);
        org.joda.time.Chronology chronology59 = instant58.getChronology();
        org.joda.time.Period period60 = new org.joda.time.Period((long) 53, (long) (-1), periodType51, chronology59);
        org.joda.time.PeriodType periodType61 = periodType51.withHoursRemoved();
        org.joda.time.MutablePeriod mutablePeriod62 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) instant31, (org.joda.time.ReadableDuration) duration46, periodType51);
        org.joda.time.Duration duration64 = duration46.minus(0L);
        org.joda.time.MutableDateTime mutableDateTime66 = new org.joda.time.MutableDateTime((long) (short) -1);
        mutableDateTime66.addYears(44);
        org.joda.time.Duration duration70 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration72 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration75 = duration72.withDurationAdded((long) (short) 100, (int) ' ');
        boolean boolean76 = duration70.isLongerThan((org.joda.time.ReadableDuration) duration75);
        org.joda.time.Duration duration78 = duration70.minus(966164L);
        org.joda.time.PeriodType periodType79 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period80 = duration70.toPeriod(periodType79);
        org.joda.time.PeriodType periodType81 = periodType79.withHoursRemoved();
        org.joda.time.MutablePeriod mutablePeriod82 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration64, (org.joda.time.ReadableInstant) mutableDateTime66, periodType81);
        org.joda.time.Duration duration85 = duration64.withDurationAdded((long) 26281, 1439);
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(instant4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "PT0.099S" + "'", str17, "PT0.099S");
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + (-9571L) + "'", long20 == (-9571L));
        org.junit.Assert.assertNotNull(instant24);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertNotNull(instant31);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 86400000L + "'", long32 == 86400000L);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 86400000L + "'", long33 == 86400000L);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertNotNull(period37);
        org.junit.Assert.assertNotNull(duration39);
        org.junit.Assert.assertNotNull(duration41);
        org.junit.Assert.assertNotNull(duration44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(duration46);
        org.junit.Assert.assertNotNull(periodType51);
        org.junit.Assert.assertNotNull(durationFieldType54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "PeriodType[YearDayTime]" + "'", str55, "PeriodType[YearDayTime]");
        org.junit.Assert.assertNotNull(instant58);
        org.junit.Assert.assertNotNull(chronology59);
        org.junit.Assert.assertNotNull(periodType61);
        org.junit.Assert.assertNotNull(duration64);
        org.junit.Assert.assertNotNull(duration70);
        org.junit.Assert.assertNotNull(duration72);
        org.junit.Assert.assertNotNull(duration75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(duration78);
        org.junit.Assert.assertNotNull(periodType79);
        org.junit.Assert.assertNotNull(period80);
        org.junit.Assert.assertNotNull(periodType81);
        org.junit.Assert.assertNotNull(duration85);
    }

    @Test
    public void test07611() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07611");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.add((long) 'a');
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime0.yearOfCentury();
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period6 = duration5.toPeriod();
        org.joda.time.Duration duration8 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration11 = duration8.withDurationAdded((long) (short) 100, (int) ' ');
        org.joda.time.Duration duration12 = duration5.minus((org.joda.time.ReadableDuration) duration11);
        mutableDateTime0.add((org.joda.time.ReadableDuration) duration5);
        org.joda.time.MutableDateTime.Property property14 = mutableDateTime0.centuryOfEra();
        mutableDateTime0.addYears(0);
        mutableDateTime0.setMinuteOfDay((int) (short) 0);
        mutableDateTime0.setMillisOfDay(2);
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = org.joda.time.DateTimeFieldType.dayOfMonth();
        boolean boolean23 = localDate21.isSupported(dateTimeFieldType22);
        org.joda.time.LocalDate.Property property24 = localDate21.yearOfEra();
        org.joda.time.Instant instant25 = new org.joda.time.Instant();
        org.joda.time.Instant instant27 = instant25.withMillis(0L);
        org.joda.time.Duration duration29 = org.joda.time.Duration.standardDays((long) (byte) 1);
        java.lang.String str30 = duration29.toString();
        org.joda.time.Instant instant31 = instant25.minus((org.joda.time.ReadableDuration) duration29);
        int int32 = property24.getDifference((org.joda.time.ReadableInstant) instant25);
        org.joda.time.MutableDateTime mutableDateTime33 = instant25.toMutableDateTime();
        int int34 = mutableDateTime33.getHourOfDay();
        org.joda.time.Duration duration36 = org.joda.time.Duration.standardHours((long) 2723);
        org.joda.time.MutablePeriod mutablePeriod37 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) mutableDateTime33, (org.joda.time.ReadableDuration) duration36);
        org.joda.time.MutablePeriod mutablePeriod38 = mutablePeriod37.copy();
        mutablePeriod37.setMillis(33489);
        mutableDateTime0.add((org.joda.time.ReadablePeriod) mutablePeriod37, 105195495);
        org.joda.time.MutablePeriod mutablePeriod43 = mutablePeriod37.copy();
        mutablePeriod37.addHours(7);
        int int46 = mutablePeriod37.getHours();
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(instant27);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "PT86400S" + "'", str30, "PT86400S");
        org.junit.Assert.assertNotNull(instant31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(mutableDateTime33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 7 + "'", int34 == 7);
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertNotNull(mutablePeriod38);
        org.junit.Assert.assertNotNull(mutablePeriod43);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 18 + "'", int46 == 18);
    }

    @Test
    public void test07612() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07612");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.Instant instant2 = instant0.withMillis(0L);
        org.joda.time.Duration duration4 = org.joda.time.Duration.standardDays((long) (byte) 1);
        java.lang.String str5 = duration4.toString();
        org.joda.time.Instant instant6 = instant0.minus((org.joda.time.ReadableDuration) duration4);
        org.joda.time.Duration duration8 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period9 = duration8.toPeriod();
        org.joda.time.Duration duration11 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration13 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration16 = duration13.withDurationAdded((long) (short) 100, (int) ' ');
        boolean boolean17 = duration11.isLongerThan((org.joda.time.ReadableDuration) duration16);
        org.joda.time.Duration duration18 = duration8.minus((org.joda.time.ReadableDuration) duration11);
        org.joda.time.Duration duration20 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration23 = duration20.withDurationAdded((long) (short) 100, (int) ' ');
        boolean boolean24 = duration11.equals((java.lang.Object) duration20);
        org.joda.time.Instant instant26 = instant6.withDurationAdded((org.joda.time.ReadableDuration) duration11, 26150565);
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime((long) 1);
        org.joda.time.Duration duration30 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period31 = duration30.toPeriod();
        org.joda.time.Duration duration34 = duration30.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Period period35 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime28, (org.joda.time.ReadableDuration) duration34);
        long long36 = duration34.getMillis();
        boolean boolean37 = duration11.isShorterThan((org.joda.time.ReadableDuration) duration34);
        org.joda.time.Period period38 = duration34.toPeriod();
        org.joda.time.Period period40 = period38.minusHours(62194);
        org.joda.time.MutableDateTime mutableDateTime42 = new org.joda.time.MutableDateTime((long) (short) -1);
        mutableDateTime42.setSecondOfMinute(53);
        int int45 = mutableDateTime42.getEra();
        mutableDateTime42.setHourOfDay((int) (byte) 1);
        org.joda.time.MutableDateTime.Property property48 = mutableDateTime42.secondOfDay();
        org.joda.time.MutableDateTime mutableDateTime49 = mutableDateTime42.copy();
        org.joda.time.Duration duration50 = period40.toDurationTo((org.joda.time.ReadableInstant) mutableDateTime49);
        int int51 = period40.getDays();
        org.junit.Assert.assertNotNull(instant2);
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "PT86400S" + "'", str5, "PT86400S");
        org.junit.Assert.assertNotNull(instant6);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(instant26);
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 86400000L + "'", long36 == 86400000L);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(period38);
        org.junit.Assert.assertNotNull(period40);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(mutableDateTime49);
        org.junit.Assert.assertNotNull(duration50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
    }

    @Test
    public void test07613() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07613");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.add((long) 'a');
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime0.secondOfDay();
        int int4 = mutableDateTime0.getDayOfWeek();
        org.joda.time.Duration duration6 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period7 = duration6.toPeriod();
        org.joda.time.Duration duration9 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration12 = duration9.withDurationAdded((long) (short) 100, (int) ' ');
        org.joda.time.Duration duration13 = duration6.minus((org.joda.time.ReadableDuration) duration12);
        mutableDateTime0.add((org.joda.time.ReadableDuration) duration6, 19045);
        org.joda.time.Duration duration18 = duration6.withDurationAdded((long) 62213, 58);
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.UTC;
        java.util.Locale locale22 = java.util.Locale.GERMAN;
        java.lang.String str23 = locale22.getDisplayName();
        java.lang.String str24 = dateTimeZone20.getName(100L, locale22);
        org.joda.time.MutableDateTime mutableDateTime25 = new org.joda.time.MutableDateTime(948227L, dateTimeZone20);
        long long26 = mutableDateTime25.getMillis();
        mutableDateTime25.setWeekyear(1439);
        org.joda.time.DateTime dateTime29 = mutableDateTime25.toDateTime();
        org.joda.time.Interval interval30 = duration18.toIntervalFrom((org.joda.time.ReadableInstant) dateTime29);
        org.joda.time.DateTime.Property property31 = dateTime29.monthOfYear();
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2 + "'", int4 == 2);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "de");
// flaky:         org.junit.Assert.assertEquals("'" + str23 + "' != '" + "\u5fb7\u6587" + "'", str23, "\u5fb7\u6587");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "+00:00" + "'", str24, "+00:00");
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 948227L + "'", long26 == 948227L);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(interval30);
        org.junit.Assert.assertNotNull(property31);
    }

    @Test
    public void test07614() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07614");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        java.lang.Object obj1 = mutableDateTime0.clone();
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime0.millisOfDay();
        org.joda.time.DateTime dateTime3 = mutableDateTime0.toDateTime();
        java.lang.String str4 = mutableDateTime0.toString();
        org.joda.time.MutableDateTime.Property property5 = mutableDateTime0.secondOfMinute();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime6 = new org.joda.time.LocalTime((java.lang.Object) property5);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: org.joda.time.MutableDateTime$Property");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(obj1);
// flaky:         org.junit.Assert.assertEquals(obj1.toString(), "2022-02-22T07:23:48.699Z");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj1), "2022-02-22T07:23:48.699Z");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj1), "2022-02-22T07:23:48.699Z");
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateTime3);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "2022-02-22T07:23:48.699Z" + "'", str4, "2022-02-22T07:23:48.699Z");
        org.junit.Assert.assertNotNull(property5);
    }

    @Test
    public void test07615() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07615");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.monthOfYear();
        org.joda.time.DateTimeField dateTimeField2 = property1.getField();
        org.joda.time.LocalDate localDate3 = property1.roundCeilingCopy();
        org.joda.time.Chronology chronology4 = localDate3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.eras();
        // The following exception was thrown during execution in test generation
        try {
            long long8 = durationField5.getMillis(555544875L, (long) 33613);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: eras field is unsupported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
    }

    @Test
    public void test07616() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07616");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 1, chronology1);
        int int3 = dateTime2.getMinuteOfDay();
        int int4 = dateTime2.getEra();
        int int5 = dateTime2.getWeekOfWeekyear();
        org.joda.time.Instant instant6 = dateTime2.toInstant();
        org.joda.time.Duration duration8 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period9 = duration8.toPeriod();
        org.joda.time.Duration duration11 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration13 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration16 = duration13.withDurationAdded((long) (short) 100, (int) ' ');
        boolean boolean17 = duration11.isLongerThan((org.joda.time.ReadableDuration) duration16);
        org.joda.time.Duration duration18 = duration8.minus((org.joda.time.ReadableDuration) duration11);
        org.joda.time.Duration duration20 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration23 = duration20.withDurationAdded((long) (short) 100, (int) ' ');
        boolean boolean24 = duration11.equals((java.lang.Object) duration20);
        long long25 = duration20.getStandardSeconds();
        org.joda.time.Duration duration27 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration29 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration32 = duration29.withDurationAdded((long) (short) 100, (int) ' ');
        boolean boolean33 = duration27.isLongerThan((org.joda.time.ReadableDuration) duration32);
        org.joda.time.Minutes minutes34 = duration27.toStandardMinutes();
        org.joda.time.Duration duration35 = duration20.minus((org.joda.time.ReadableDuration) duration27);
        org.joda.time.Duration duration36 = duration27.toDuration();
        org.joda.time.Instant instant38 = instant6.withDurationAdded((org.joda.time.ReadableDuration) duration36, 26318493);
        org.joda.time.MutableDateTime mutableDateTime39 = instant38.toMutableDateTime();
        org.joda.time.MutableDateTime mutableDateTime40 = instant38.toMutableDateTime();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(instant6);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 86400L + "'", long25 == 86400L);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(minutes34);
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertNotNull(instant38);
        org.junit.Assert.assertNotNull(mutableDateTime39);
        org.junit.Assert.assertNotNull(mutableDateTime40);
    }

    @Test
    public void test07617() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07617");
        org.joda.time.ReadableDuration readableDuration3 = null;
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.Period period5 = new org.joda.time.Period(readableDuration3, readableInstant4);
        org.joda.time.PeriodType periodType8 = null;
        org.joda.time.Period period9 = new org.joda.time.Period((long) 100, 1L, periodType8);
        org.joda.time.Period period11 = period9.minusSeconds((-1));
        java.lang.String str12 = period9.toString();
        org.joda.time.Period period13 = period9.toPeriod();
        org.joda.time.PeriodType periodType14 = period9.getPeriodType();
        org.joda.time.Period period15 = period5.normalizedStandard(periodType14);
        org.joda.time.Instant instant16 = new org.joda.time.Instant();
        org.joda.time.Instant instant18 = instant16.withMillis(0L);
        org.joda.time.Chronology chronology19 = instant18.getChronology();
        org.joda.time.DurationField durationField20 = chronology19.eras();
        long long24 = chronology19.add(0L, (long) 2022, (int) '4');
        org.joda.time.DateTimeField dateTimeField25 = chronology19.secondOfMinute();
        org.joda.time.MutablePeriod mutablePeriod26 = new org.joda.time.MutablePeriod(44L, periodType14, chronology19);
        org.joda.time.MutablePeriod mutablePeriod27 = new org.joda.time.MutablePeriod(950105L, 949680L, periodType14);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime(chronology30);
        org.joda.time.DateTime dateTime33 = dateTime31.plusMinutes(15);
        org.joda.time.Chronology chronology34 = dateTime31.getChronology();
        org.joda.time.Instant instant35 = new org.joda.time.Instant();
        org.joda.time.Instant instant37 = instant35.withMillis(0L);
        org.joda.time.Chronology chronology38 = instant37.getChronology();
        org.joda.time.DurationField durationField39 = chronology38.eras();
        org.joda.time.LocalTime localTime40 = org.joda.time.LocalTime.now(chronology38);
        org.joda.time.DurationField durationField41 = chronology38.eras();
        org.joda.time.DateTimeField dateTimeField42 = chronology38.hourOfDay();
        org.joda.time.DateTime dateTime43 = dateTime31.withChronology(chronology38);
        org.joda.time.MutableDateTime mutableDateTime44 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property45 = mutableDateTime44.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime46 = property45.getMutableDateTime();
        boolean boolean47 = dateTime43.isBefore((org.joda.time.ReadableInstant) mutableDateTime46);
        org.joda.time.Instant instant48 = new org.joda.time.Instant();
        org.joda.time.Instant instant50 = instant48.withMillis(0L);
        org.joda.time.Chronology chronology51 = instant50.getChronology();
        org.joda.time.DurationField durationField52 = chronology51.eras();
        long long56 = chronology51.add(0L, (long) 2022, (int) '4');
        org.joda.time.DateTimeField dateTimeField57 = chronology51.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField58 = chronology51.minuteOfDay();
        mutableDateTime46.setChronology(chronology51);
        org.joda.time.DateTime dateTime60 = org.joda.time.DateTime.now(chronology51);
        mutablePeriod27.setPeriod(1645516800000L, (long) 489, chronology51);
        org.joda.time.DateTimeField dateTimeField62 = chronology51.halfdayOfDay();
        int int64 = dateTimeField62.getLeapAmount((-420198L));
        boolean boolean65 = dateTimeField62.isLenient();
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "PT0.099S" + "'", str12, "PT0.099S");
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(periodType14);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(instant18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 105144L + "'", long24 == 105144L);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(instant37);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(durationField39);
        org.junit.Assert.assertNotNull(localTime40);
        org.junit.Assert.assertNotNull(durationField41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(mutableDateTime44);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(mutableDateTime46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(instant50);
        org.junit.Assert.assertNotNull(chronology51);
        org.junit.Assert.assertNotNull(durationField52);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 105144L + "'", long56 == 105144L);
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(dateTimeField62);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
    }

    @Test
    public void test07618() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07618");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) 406, chronology1);
    }

    @Test
    public void test07619() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07619");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.DateTime dateTime1 = instant0.toDateTime();
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.withCenturyOfEra((int) 'a');
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(chronology9);
        org.joda.time.DateTime dateTime12 = dateTime10.plusMinutes(15);
        org.joda.time.DateTime dateTime13 = localDateTime6.toDateTime((org.joda.time.ReadableInstant) dateTime10);
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime15 = localDateTime6.toDateTime(dateTimeZone14);
        org.joda.time.DateTime dateTime16 = dateTime1.withZoneRetainFields(dateTimeZone14);
        org.joda.time.MutableDateTime mutableDateTime17 = org.joda.time.MutableDateTime.now();
        mutableDateTime17.add((long) 'a');
        org.joda.time.MutableDateTime.Property property20 = mutableDateTime17.yearOfCentury();
        mutableDateTime17.addSeconds(0);
        org.joda.time.Duration duration24 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Hours hours25 = duration24.toStandardHours();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime(chronology26);
        int int28 = dateTime27.getSecondOfMinute();
        org.joda.time.MutablePeriod mutablePeriod29 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration24, (org.joda.time.ReadableInstant) dateTime27);
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime((long) 1);
        org.joda.time.Instant instant32 = new org.joda.time.Instant();
        org.joda.time.Instant instant34 = instant32.withMillis(0L);
        org.joda.time.DateTime dateTime35 = instant34.toDateTime();
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime((long) 1);
        org.joda.time.PeriodType periodType38 = org.joda.time.PeriodType.months();
        org.joda.time.Period period39 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime35, (org.joda.time.ReadableInstant) dateTime37, periodType38);
        org.joda.time.Period period40 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration24, (org.joda.time.ReadableInstant) dateTime31, periodType38);
        org.joda.time.Duration duration41 = new org.joda.time.Duration((org.joda.time.ReadableInstant) mutableDateTime17, (org.joda.time.ReadableInstant) dateTime31);
        org.joda.time.DateTime dateTime42 = dateTime16.plus((org.joda.time.ReadableDuration) duration41);
        org.joda.time.DateTime dateTime44 = dateTime16.minusYears(29);
        org.joda.time.MutableDateTime mutableDateTime45 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property46 = mutableDateTime45.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime48 = property46.set(45);
        org.joda.time.MutableDateTime mutableDateTime49 = property46.roundFloor();
        org.joda.time.LocalDateTime localDateTime50 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime52 = localDateTime50.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime54 = localDateTime52.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime56 = localDateTime54.withCenturyOfEra((int) 'a');
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.DateTime dateTime58 = new org.joda.time.DateTime(chronology57);
        org.joda.time.DateTime dateTime60 = dateTime58.plusMinutes(15);
        org.joda.time.DateTime dateTime61 = localDateTime54.toDateTime((org.joda.time.ReadableInstant) dateTime58);
        org.joda.time.DateTimeZone dateTimeZone62 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime63 = localDateTime54.toDateTime(dateTimeZone62);
        org.joda.time.DateTime.Property property64 = dateTime63.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField65 = property64.getField();
        mutableDateTime49.setRounding(dateTimeField65);
        boolean boolean67 = dateTime44.isBefore((org.joda.time.ReadableInstant) mutableDateTime49);
        mutableDateTime49.setMonthOfYear(8);
        org.joda.time.Duration duration71 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period72 = duration71.toPeriod();
        org.joda.time.Duration duration75 = duration71.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Chronology chronology76 = null;
        org.joda.time.DateTime dateTime77 = new org.joda.time.DateTime(chronology76);
        org.joda.time.DateTime dateTime79 = dateTime77.plusMinutes(15);
        org.joda.time.Interval interval80 = duration75.toIntervalTo((org.joda.time.ReadableInstant) dateTime79);
        org.joda.time.DateTime dateTime81 = dateTime79.withLaterOffsetAtOverlap();
        mutableDateTime49.setDate((org.joda.time.ReadableInstant) dateTime79);
        org.joda.time.MutableDateTime.Property property83 = mutableDateTime49.dayOfWeek();
        org.joda.time.MutableDateTime mutableDateTime84 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property85 = mutableDateTime84.centuryOfEra();
        org.joda.time.MutableDateTime.Property property86 = mutableDateTime84.dayOfWeek();
        org.joda.time.DateTimeFieldType dateTimeFieldType87 = property86.getFieldType();
        org.joda.time.MutableDateTime mutableDateTime88 = property86.getMutableDateTime();
        org.joda.time.MutableDateTime.Property property89 = mutableDateTime88.yearOfCentury();
        java.lang.String str90 = property89.getAsString();
        org.joda.time.DurationField durationField91 = property89.getLeapDurationField();
        org.joda.time.MutableDateTime mutableDateTime93 = property89.add(78580320L);
        boolean boolean94 = mutableDateTime49.isBefore((org.joda.time.ReadableInstant) mutableDateTime93);
        org.joda.time.DateTimeFieldType dateTimeFieldType95 = null;
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime93.set(dateTimeFieldType95, 62324);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(mutableDateTime17);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertNotNull(hours25);
// flaky:         org.junit.Assert.assertTrue("'" + int28 + "' != '" + 48 + "'", int28 == 48);
        org.junit.Assert.assertNotNull(instant34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(periodType38);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(mutableDateTime45);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(mutableDateTime48);
        org.junit.Assert.assertNotNull(mutableDateTime49);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(dateTimeZone62);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(property64);
        org.junit.Assert.assertNotNull(dateTimeField65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(duration71);
        org.junit.Assert.assertNotNull(period72);
        org.junit.Assert.assertNotNull(duration75);
        org.junit.Assert.assertNotNull(dateTime79);
        org.junit.Assert.assertNotNull(interval80);
        org.junit.Assert.assertNotNull(dateTime81);
        org.junit.Assert.assertNotNull(property83);
        org.junit.Assert.assertNotNull(mutableDateTime84);
        org.junit.Assert.assertNotNull(property85);
        org.junit.Assert.assertNotNull(property86);
        org.junit.Assert.assertNotNull(dateTimeFieldType87);
        org.junit.Assert.assertNotNull(mutableDateTime88);
        org.junit.Assert.assertNotNull(property89);
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "22" + "'", str90, "22");
        org.junit.Assert.assertNull(durationField91);
        org.junit.Assert.assertNotNull(mutableDateTime93);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + true + "'", boolean94 == true);
    }

    @Test
    public void test07620() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07620");
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration6 = duration3.withDurationAdded((long) (short) 100, (int) ' ');
        long long7 = duration6.getMillis();
        org.joda.time.Instant instant8 = new org.joda.time.Instant();
        org.joda.time.Instant instant10 = instant8.withMillis(0L);
        org.joda.time.DateTime dateTime11 = instant10.toDateTime();
        org.joda.time.Instant instant12 = new org.joda.time.Instant();
        org.joda.time.Instant instant14 = instant12.withMillis(0L);
        org.joda.time.DateTime dateTime15 = instant14.toDateTime();
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((long) 1);
        org.joda.time.PeriodType periodType18 = org.joda.time.PeriodType.months();
        org.joda.time.Period period19 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime15, (org.joda.time.ReadableInstant) dateTime17, periodType18);
        boolean boolean20 = dateTime11.isBefore((org.joda.time.ReadableInstant) dateTime15);
        int int21 = dateTime15.getDayOfMonth();
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.PeriodType periodType24 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod25 = new org.joda.time.MutablePeriod(readableInstant22, readableInstant23, periodType24);
        org.joda.time.PeriodType periodType26 = periodType24.withHoursRemoved();
        org.joda.time.MutablePeriod mutablePeriod27 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration6, (org.joda.time.ReadableInstant) dateTime15, periodType24);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime(chronology28);
        org.joda.time.DateTime dateTime31 = dateTime29.plusMinutes(15);
        org.joda.time.Chronology chronology32 = dateTime29.getChronology();
        org.joda.time.Instant instant33 = new org.joda.time.Instant();
        org.joda.time.Instant instant35 = instant33.withMillis(0L);
        org.joda.time.Chronology chronology36 = instant35.getChronology();
        org.joda.time.DurationField durationField37 = chronology36.eras();
        org.joda.time.LocalTime localTime38 = org.joda.time.LocalTime.now(chronology36);
        org.joda.time.DurationField durationField39 = chronology36.eras();
        org.joda.time.DateTimeField dateTimeField40 = chronology36.hourOfDay();
        org.joda.time.DateTime dateTime41 = dateTime29.withChronology(chronology36);
        org.joda.time.MutableDateTime mutableDateTime42 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property43 = mutableDateTime42.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime44 = property43.getMutableDateTime();
        boolean boolean45 = dateTime41.isBefore((org.joda.time.ReadableInstant) mutableDateTime44);
        org.joda.time.Instant instant46 = new org.joda.time.Instant();
        org.joda.time.Instant instant48 = instant46.withMillis(0L);
        org.joda.time.Chronology chronology49 = instant48.getChronology();
        org.joda.time.DurationField durationField50 = chronology49.eras();
        long long54 = chronology49.add(0L, (long) 2022, (int) '4');
        org.joda.time.DateTimeField dateTimeField55 = chronology49.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField56 = chronology49.minuteOfDay();
        mutableDateTime44.setChronology(chronology49);
        org.joda.time.DateTime dateTime58 = dateTime15.toDateTime(chronology49);
        org.joda.time.LocalTime localTime59 = new org.joda.time.LocalTime((long) 99, chronology49);
        org.joda.time.MutableDateTime mutableDateTime60 = new org.joda.time.MutableDateTime((long) 62166, chronology49);
        org.joda.time.PeriodType periodType63 = null;
        org.joda.time.Period period64 = new org.joda.time.Period((long) 100, 1L, periodType63);
        org.joda.time.Period period66 = period64.minusSeconds((-1));
        java.lang.String str67 = period64.toString();
        org.joda.time.Period period68 = period64.toPeriod();
        int int69 = period68.size();
        org.joda.time.Period period71 = period68.plusSeconds(62151);
        org.joda.time.ReadableInstant readableInstant73 = null;
        org.joda.time.ReadableInstant readableInstant74 = null;
        org.joda.time.PeriodType periodType75 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod76 = new org.joda.time.MutablePeriod(readableInstant73, readableInstant74, periodType75);
        org.joda.time.PeriodType periodType77 = periodType75.withHoursRemoved();
        org.joda.time.DateTimeFieldType dateTimeFieldType78 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.Instant instant80 = new org.joda.time.Instant();
        org.joda.time.Instant instant82 = instant80.withMillis(0L);
        org.joda.time.Chronology chronology83 = instant82.getChronology();
        org.joda.time.DurationField durationField84 = chronology83.eras();
        org.joda.time.LocalTime localTime85 = org.joda.time.LocalTime.now(chronology83);
        org.joda.time.DurationField durationField86 = chronology83.eras();
        org.joda.time.DateTime dateTime87 = new org.joda.time.DateTime((long) 44, chronology83);
        org.joda.time.DateTimeField dateTimeField88 = dateTimeFieldType78.getField(chronology83);
        org.joda.time.DateTimeField dateTimeField89 = chronology83.weekOfWeekyear();
        org.joda.time.MutablePeriod mutablePeriod90 = new org.joda.time.MutablePeriod((long) (-292275054), periodType75, chronology83);
        org.joda.time.Period period91 = period71.minus((org.joda.time.ReadablePeriod) mutablePeriod90);
        mutableDateTime60.add((org.joda.time.ReadablePeriod) mutablePeriod90, (int) (byte) 1);
        mutablePeriod90.setPeriod(31556952000L, (long) 26272);
        int int97 = mutablePeriod90.getSeconds();
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 86403200L + "'", long7 == 86403200L);
        org.junit.Assert.assertNotNull(instant10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(instant14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(periodType18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(periodType24);
        org.junit.Assert.assertNotNull(periodType26);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(instant35);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(durationField37);
        org.junit.Assert.assertNotNull(localTime38);
        org.junit.Assert.assertNotNull(durationField39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(mutableDateTime42);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(mutableDateTime44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(instant48);
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertNotNull(durationField50);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 105144L + "'", long54 == 105144L);
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(period66);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "PT0.099S" + "'", str67, "PT0.099S");
        org.junit.Assert.assertNotNull(period68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 8 + "'", int69 == 8);
        org.junit.Assert.assertNotNull(period71);
        org.junit.Assert.assertNotNull(periodType75);
        org.junit.Assert.assertNotNull(periodType77);
        org.junit.Assert.assertNotNull(dateTimeFieldType78);
        org.junit.Assert.assertNotNull(instant82);
        org.junit.Assert.assertNotNull(chronology83);
        org.junit.Assert.assertNotNull(durationField84);
        org.junit.Assert.assertNotNull(localTime85);
        org.junit.Assert.assertNotNull(durationField86);
        org.junit.Assert.assertNotNull(dateTimeField88);
        org.junit.Assert.assertNotNull(dateTimeField89);
        org.junit.Assert.assertNotNull(period91);
        org.junit.Assert.assertTrue("'" + int97 + "' != '" + (-45) + "'", int97 == (-45));
    }

    @Test
    public void test07621() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07621");
        org.joda.time.MutablePeriod mutablePeriod1 = new org.joda.time.MutablePeriod((long) 20);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime(dateTimeZone2);
        org.joda.time.LocalTime localTime5 = localTime3.minusHours((int) (byte) 100);
        org.joda.time.Chronology chronology6 = localTime5.getChronology();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(chronology7);
        int int9 = dateTime8.getYearOfCentury();
        int int10 = dateTime8.getWeekyear();
        org.joda.time.DateTime dateTime11 = dateTime8.withEarlierOffsetAtOverlap();
        java.lang.String str12 = dateTime11.toString();
        org.joda.time.MutableDateTime mutableDateTime13 = dateTime11.toMutableDateTime();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.UTC;
        boolean boolean15 = dateTimeZone14.isFixed();
        mutableDateTime13.setZoneRetainFields(dateTimeZone14);
        org.joda.time.DateTime dateTime17 = localTime5.toDateTimeToday(dateTimeZone14);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.LocalTime localTime20 = new org.joda.time.LocalTime((long) (short) 100, chronology19);
        int int21 = localTime20.getMillisOfDay();
        org.joda.time.LocalTime.Property property22 = localTime20.millisOfSecond();
        org.joda.time.DurationField durationField23 = property22.getLeapDurationField();
        org.joda.time.LocalTime localTime24 = property22.roundHalfEvenCopy();
        org.joda.time.Instant instant25 = new org.joda.time.Instant();
        org.joda.time.Instant instant27 = instant25.withMillis(0L);
        org.joda.time.Duration duration29 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period30 = duration29.toPeriod();
        org.joda.time.Duration duration33 = duration29.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Instant instant34 = instant27.plus((org.joda.time.ReadableDuration) duration33);
        long long35 = instant34.getMillis();
        org.joda.time.Chronology chronology36 = instant34.getChronology();
        org.joda.time.MutableDateTime mutableDateTime37 = org.joda.time.MutableDateTime.now();
        mutableDateTime37.add((long) 'a');
        org.joda.time.Duration duration41 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration43 = org.joda.time.Duration.standardDays((long) (byte) 1);
        java.lang.String str44 = duration43.toString();
        boolean boolean45 = duration41.isShorterThan((org.joda.time.ReadableDuration) duration43);
        org.joda.time.Hours hours46 = duration41.toStandardHours();
        mutableDateTime37.add((org.joda.time.ReadableDuration) duration41, 20);
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.DateTime dateTime50 = new org.joda.time.DateTime(chronology49);
        int int51 = dateTime50.getYearOfCentury();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter52 = null;
        java.lang.String str53 = dateTime50.toString(dateTimeFormatter52);
        org.joda.time.DateTime dateTime55 = dateTime50.minusMonths(22);
        org.joda.time.Instant instant56 = new org.joda.time.Instant();
        org.joda.time.Instant instant58 = instant56.withMillis(0L);
        org.joda.time.Chronology chronology59 = instant58.getChronology();
        org.joda.time.DurationField durationField60 = chronology59.eras();
        org.joda.time.DateTime dateTime61 = dateTime50.withChronology(chronology59);
        org.joda.time.Period period62 = duration41.toPeriod(chronology59);
        org.joda.time.Instant instant64 = instant34.withDurationAdded((org.joda.time.ReadableDuration) duration41, 16);
        boolean boolean65 = localTime24.equals((java.lang.Object) instant34);
        org.joda.time.Instant instant68 = instant34.withDurationAdded(3155695200000L, 44);
        org.joda.time.DateTime dateTime69 = instant68.toDateTimeISO();
        org.joda.time.Period period71 = org.joda.time.Period.years((-99));
        org.joda.time.ReadableInstant readableInstant72 = null;
        org.joda.time.ReadableInstant readableInstant73 = null;
        org.joda.time.PeriodType periodType74 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod75 = new org.joda.time.MutablePeriod(readableInstant72, readableInstant73, periodType74);
        org.joda.time.PeriodType periodType76 = periodType74.withHoursRemoved();
        org.joda.time.PeriodType periodType77 = periodType76.withWeeksRemoved();
        org.joda.time.PeriodType periodType78 = periodType76.withMonthsRemoved();
        org.joda.time.Period period79 = period71.normalizedStandard(periodType78);
        org.joda.time.MutablePeriod mutablePeriod80 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime17, (org.joda.time.ReadableInstant) dateTime69, periodType78);
        org.joda.time.DateTime dateTime81 = dateTime69.withLaterOffsetAtOverlap();
        org.joda.time.Duration duration82 = mutablePeriod1.toDurationTo((org.joda.time.ReadableInstant) dateTime69);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 22 + "'", int9 == 22);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2022 + "'", int10 == 2022);
        org.junit.Assert.assertNotNull(dateTime11);
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "2022-02-22T07:23:48.905Z" + "'", str12, "2022-02-22T07:23:48.905Z");
        org.junit.Assert.assertNotNull(mutableDateTime13);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 100 + "'", int21 == 100);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNull(durationField23);
        org.junit.Assert.assertNotNull(localTime24);
        org.junit.Assert.assertNotNull(instant27);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertNotNull(instant34);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 86400000L + "'", long35 == 86400000L);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(mutableDateTime37);
        org.junit.Assert.assertNotNull(duration41);
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "PT86400S" + "'", str44, "PT86400S");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(hours46);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 22 + "'", int51 == 22);
// flaky:         org.junit.Assert.assertEquals("'" + str53 + "' != '" + "2022-02-22T07:23:48.905Z" + "'", str53, "2022-02-22T07:23:48.905Z");
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(instant58);
        org.junit.Assert.assertNotNull(chronology59);
        org.junit.Assert.assertNotNull(durationField60);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(period62);
        org.junit.Assert.assertNotNull(instant64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(instant68);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(period71);
        org.junit.Assert.assertNotNull(periodType74);
        org.junit.Assert.assertNotNull(periodType76);
        org.junit.Assert.assertNotNull(periodType77);
        org.junit.Assert.assertNotNull(periodType78);
        org.junit.Assert.assertNotNull(period79);
        org.junit.Assert.assertNotNull(dateTime81);
        org.junit.Assert.assertNotNull(duration82);
    }

    @Test
    public void test07622() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07622");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) (short) -1);
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardDays((long) (byte) 1);
        java.lang.String str4 = duration3.toString();
        mutableDateTime1.add((org.joda.time.ReadableDuration) duration3, 8);
        mutableDateTime1.setSecondOfMinute((int) (short) 0);
        org.joda.time.MutableDateTime mutableDateTime9 = mutableDateTime1.copy();
        org.joda.time.MutableDateTime.Property property10 = mutableDateTime9.weekyear();
        mutableDateTime9.addHours(100);
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime16 = dateTime14.withZoneRetainFields(dateTimeZone15);
        boolean boolean18 = dateTime16.equals((java.lang.Object) (-1L));
        java.util.GregorianCalendar gregorianCalendar19 = dateTime16.toGregorianCalendar();
        org.joda.time.LocalDateTime localDateTime20 = org.joda.time.LocalDateTime.fromCalendarFields((java.util.Calendar) gregorianCalendar19);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime20.plusWeeks((int) (short) -1);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime22.withYearOfCentury((int) (byte) 10);
        org.joda.time.Duration duration26 = org.joda.time.Duration.standardDays((long) 26148);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime22.minus((org.joda.time.ReadableDuration) duration26);
        java.lang.String str28 = duration26.toString();
        mutableDateTime9.add((org.joda.time.ReadableDuration) duration26, 26436);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "PT86400S" + "'", str4, "PT86400S");
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(gregorianCalendar19);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "PT2259187200S" + "'", str28, "PT2259187200S");
    }

    @Test
    public void test07623() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07623");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardHours((long) 26186255);
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardDays((long) (byte) 1);
        java.lang.String str6 = duration5.toString();
        boolean boolean7 = duration3.isShorterThan((org.joda.time.ReadableDuration) duration5);
        org.joda.time.Duration duration9 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period10 = duration9.toPeriod();
        org.joda.time.Duration duration13 = duration9.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Duration duration15 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration18 = duration15.withDurationAdded((long) (short) 100, (int) ' ');
        boolean boolean19 = duration13.isLongerThan((org.joda.time.ReadableDuration) duration15);
        boolean boolean20 = duration5.isEqual((org.joda.time.ReadableDuration) duration15);
        org.joda.time.Duration duration22 = org.joda.time.Duration.standardMinutes(1L);
        org.joda.time.Period period23 = duration22.toPeriod();
        boolean boolean24 = duration15.isEqual((org.joda.time.ReadableDuration) duration22);
        int int25 = duration1.compareTo((org.joda.time.ReadableDuration) duration22);
        org.joda.time.MutableDateTime mutableDateTime26 = org.joda.time.MutableDateTime.now();
        java.lang.Object obj27 = mutableDateTime26.clone();
        mutableDateTime26.add((long) (byte) -1);
        org.joda.time.Period period30 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration1, (org.joda.time.ReadableInstant) mutableDateTime26);
        mutableDateTime26.addYears(26289052);
        mutableDateTime26.addWeekyears(26236);
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "PT86400S" + "'", str6, "PT86400S");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(mutableDateTime26);
        org.junit.Assert.assertNotNull(obj27);
// flaky:         org.junit.Assert.assertEquals(obj27.toString(), "2022-02-22T07:23:49.018Z");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj27), "2022-02-22T07:23:49.018Z");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj27), "2022-02-22T07:23:49.018Z");
    }

    @Test
    public void test07624() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07624");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        int int2 = dateTime1.getYearOfCentury();
        int int3 = dateTime1.getWeekyear();
        org.joda.time.DateTime.Property property4 = dateTime1.dayOfYear();
        org.joda.time.Period period6 = org.joda.time.Period.weeks((int) (byte) 0);
        org.joda.time.Period period8 = period6.withDays(2022);
        org.joda.time.DateTime dateTime10 = dateTime1.withPeriodAdded((org.joda.time.ReadablePeriod) period8, (int) (short) 100);
        org.joda.time.Duration duration11 = period8.toStandardDuration();
        int int13 = period8.getValue(0);
        org.joda.time.Period period15 = period8.minusMinutes(55);
        int[] intArray16 = period15.getValues();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 22 + "'", int2 == 22);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2022 + "'", int3 == 2022);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[0, 0, 0, 2022, 0, -55, 0, 0]");
    }

    @Test
    public void test07625() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07625");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.monthOfYear();
        org.joda.time.DateTimeField dateTimeField2 = property1.getField();
        org.joda.time.LocalDate localDate3 = property1.roundCeilingCopy();
        org.joda.time.LocalDate localDate5 = localDate3.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDate localDate7 = localDate3.withWeekOfWeekyear(46);
        org.joda.time.ReadableDuration readableDuration9 = null;
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.Period period11 = new org.joda.time.Period(readableDuration9, readableInstant10);
        org.joda.time.PeriodType periodType14 = null;
        org.joda.time.Period period15 = new org.joda.time.Period((long) 100, 1L, periodType14);
        org.joda.time.Period period17 = period15.minusSeconds((-1));
        java.lang.String str18 = period15.toString();
        org.joda.time.Period period19 = period15.toPeriod();
        org.joda.time.PeriodType periodType20 = period15.getPeriodType();
        org.joda.time.Period period21 = period11.normalizedStandard(periodType20);
        org.joda.time.Instant instant22 = new org.joda.time.Instant();
        org.joda.time.Instant instant24 = instant22.withMillis(0L);
        org.joda.time.Chronology chronology25 = instant24.getChronology();
        org.joda.time.DurationField durationField26 = chronology25.eras();
        long long30 = chronology25.add(0L, (long) 2022, (int) '4');
        org.joda.time.DateTimeField dateTimeField31 = chronology25.secondOfMinute();
        org.joda.time.MutablePeriod mutablePeriod32 = new org.joda.time.MutablePeriod(44L, periodType20, chronology25);
        org.joda.time.LocalDate localDate34 = localDate7.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod32, (int) (byte) 1);
        int int35 = localDate7.getYearOfEra();
        org.joda.time.DateTime dateTime36 = localDate7.toDateTimeAtMidnight();
        org.joda.time.MutableDateTime mutableDateTime37 = dateTime36.toMutableDateTimeISO();
        org.joda.time.DateTime dateTime39 = dateTime36.withYearOfEra(62317);
        org.joda.time.DateTime dateTime40 = dateTime39.withLaterOffsetAtOverlap();
        org.joda.time.DateTime dateTime42 = dateTime40.minusMinutes(0);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "PT0.099S" + "'", str18, "PT0.099S");
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(periodType20);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertNotNull(instant24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 105144L + "'", long30 == 105144L);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(localDate34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 2022 + "'", int35 == 2022);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(mutableDateTime37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime42);
    }

    @Test
    public void test07626() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07626");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        java.util.TimeZone timeZone1 = dateTimeZone0.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.UTC;
        long long4 = dateTimeZone0.getMillisKeepLocal(dateTimeZone2, (long) 44);
        boolean boolean6 = dateTimeZone2.isStandardOffset((long) (-1));
        org.joda.time.LocalDateTime localDateTime7 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.withHourOfDay(10);
        org.joda.time.LocalDateTime.Property property10 = localDateTime7.hourOfDay();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime7.plusMillis((int) (byte) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.clockhourOfDay();
        java.lang.String str14 = dateTimeFieldType13.getName();
        int int15 = localDateTime7.indexOf(dateTimeFieldType13);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime7.minusSeconds((int) (short) 0);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime(chronology18);
        int int20 = dateTime19.getYearOfCentury();
        int int21 = dateTime19.getWeekyear();
        org.joda.time.DateTime dateTime23 = dateTime19.plus((long) 15);
        org.joda.time.DateTime.Property property24 = dateTime19.year();
        org.joda.time.DateTime dateTime25 = property24.roundHalfFloorCopy();
        org.joda.time.DateTime.Property property26 = dateTime25.millisOfSecond();
        org.joda.time.DateTime dateTime27 = localDateTime17.toDateTime((org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.DateTime dateTime29 = dateTime25.minusMinutes(55);
        int int30 = dateTimeZone2.getOffset((org.joda.time.ReadableInstant) dateTime29);
        org.joda.time.LocalDateTime localDateTime31 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime33 = localDateTime31.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime35 = localDateTime33.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime37 = localDateTime35.plusYears((int) (short) 100);
        int int38 = localDateTime37.getEra();
        org.joda.time.LocalDateTime localDateTime40 = localDateTime37.minusHours(45);
        org.joda.time.LocalDateTime localDateTime42 = localDateTime40.minusYears((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime44 = localDateTime40.plusHours(435);
        org.joda.time.LocalDateTime localDateTime46 = localDateTime40.plusHours(51);
        boolean boolean47 = dateTimeZone2.isLocalDateTimeGap(localDateTime40);
        org.joda.time.MutableDateTime mutableDateTime48 = org.joda.time.MutableDateTime.now();
        mutableDateTime48.add((long) 'a');
        org.joda.time.MutableDateTime.Property property51 = mutableDateTime48.yearOfCentury();
        org.joda.time.Duration duration53 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period54 = duration53.toPeriod();
        org.joda.time.Duration duration56 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration59 = duration56.withDurationAdded((long) (short) 100, (int) ' ');
        org.joda.time.Duration duration60 = duration53.minus((org.joda.time.ReadableDuration) duration59);
        mutableDateTime48.add((org.joda.time.ReadableDuration) duration53);
        org.joda.time.DateTime dateTime62 = localDateTime40.toDateTime((org.joda.time.ReadableInstant) mutableDateTime48);
        org.joda.time.LocalDateTime localDateTime64 = localDateTime40.plusDays(26184076);
        org.joda.time.LocalDateTime localDateTime66 = localDateTime40.minusMonths(38219999);
        // The following exception was thrown during execution in test generation
        try {
            int int68 = localDateTime66.getValue(26465);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 26465");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 44L + "'", long4 == 44L);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "clockhourOfDay" + "'", str14, "clockhourOfDay");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 22 + "'", int20 == 22);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2022 + "'", int21 == 2022);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(mutableDateTime48);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(duration53);
        org.junit.Assert.assertNotNull(period54);
        org.junit.Assert.assertNotNull(duration56);
        org.junit.Assert.assertNotNull(duration59);
        org.junit.Assert.assertNotNull(duration60);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(localDateTime64);
        org.junit.Assert.assertNotNull(localDateTime66);
    }

    @Test
    public void test07627() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07627");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.plusYears((int) (short) 100);
        int int7 = localDateTime6.getEra();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime6.minusHours(45);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.minusYears((int) (short) 100);
        org.joda.time.DateTime dateTime12 = localDateTime9.toDateTime();
        org.joda.time.DateTime dateTime14 = dateTime12.plusMonths(36981644);
        org.joda.time.MutableDateTime mutableDateTime15 = dateTime12.toMutableDateTimeISO();
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((long) 1);
        org.joda.time.Duration duration19 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period20 = duration19.toPeriod();
        org.joda.time.Duration duration23 = duration19.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Period period24 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime17, (org.joda.time.ReadableDuration) duration23);
        org.joda.time.Duration duration26 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration28 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration31 = duration28.withDurationAdded((long) (short) 100, (int) ' ');
        boolean boolean32 = duration26.isLongerThan((org.joda.time.ReadableDuration) duration31);
        org.joda.time.Minutes minutes33 = duration26.toStandardMinutes();
        org.joda.time.Period period34 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime17, (org.joda.time.ReadableDuration) duration26);
        long long35 = duration26.getStandardDays();
        org.joda.time.DateTime dateTime37 = dateTime12.withDurationAdded((org.joda.time.ReadableDuration) duration26, 26238);
        java.util.Date date38 = dateTime37.toDate();
        org.joda.time.DateTime.Property property39 = dateTime37.yearOfEra();
        org.joda.time.DateTime dateTime40 = property39.roundCeilingCopy();
        org.joda.time.DateTime dateTime42 = property39.addToCopy(26566267);
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(mutableDateTime15);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(minutes33);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(date38);
// flaky:         org.junit.Assert.assertEquals(date38.toString(), "Sun Mar 22 22:13:49 UTC 2122");
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime42);
    }

    @Test
    public void test07628() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07628");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.add((long) 'a');
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime0.yearOfCentury();
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period6 = duration5.toPeriod();
        org.joda.time.Duration duration8 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration11 = duration8.withDurationAdded((long) (short) 100, (int) ' ');
        org.joda.time.Duration duration12 = duration5.minus((org.joda.time.ReadableDuration) duration11);
        mutableDateTime0.add((org.joda.time.ReadableDuration) duration5);
        org.joda.time.MutableDateTime.Property property14 = mutableDateTime0.centuryOfEra();
        mutableDateTime0.addHours((int) (byte) 10);
        mutableDateTime0.addWeeks(20);
        org.joda.time.DateTimeField dateTimeField19 = mutableDateTime0.getRoundingField();
        org.joda.time.MutableDateTime mutableDateTime20 = org.joda.time.MutableDateTime.now();
        java.lang.Object obj21 = mutableDateTime20.clone();
        mutableDateTime20.setTime((long) 46);
        org.joda.time.MutableDateTime.Property property24 = mutableDateTime20.dayOfWeek();
        org.joda.time.MutableDateTime mutableDateTime26 = property24.add(1L);
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.UTC;
        java.util.TimeZone timeZone28 = dateTimeZone27.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.UTC;
        long long31 = dateTimeZone27.getMillisKeepLocal(dateTimeZone29, (long) 44);
        org.joda.time.DateTime dateTime32 = org.joda.time.DateTime.now(dateTimeZone27);
        mutableDateTime26.setZoneRetainFields(dateTimeZone27);
        mutableDateTime26.addSeconds((int) (short) 10);
        java.lang.Object obj36 = mutableDateTime26.clone();
        org.joda.time.MutableDateTime.Property property37 = mutableDateTime26.era();
        boolean boolean38 = mutableDateTime0.isAfter((org.joda.time.ReadableInstant) mutableDateTime26);
        mutableDateTime26.setYear(2);
        mutableDateTime26.setMillisOfDay(62170);
        int int43 = mutableDateTime26.getCenturyOfEra();
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime26.setSecondOfMinute(269);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 269 for secondOfMinute must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNull(dateTimeField19);
        org.junit.Assert.assertNotNull(mutableDateTime20);
        org.junit.Assert.assertNotNull(obj21);
// flaky:         org.junit.Assert.assertEquals(obj21.toString(), "2022-02-22T07:23:49.184Z");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj21), "2022-02-22T07:23:49.184Z");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj21), "2022-02-22T07:23:49.184Z");
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(mutableDateTime26);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertNotNull(timeZone28);
        org.junit.Assert.assertEquals(timeZone28.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 44L + "'", long31 == 44L);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(obj36);
        org.junit.Assert.assertEquals(obj36.toString(), "2022-02-23T00:00:10.046Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj36), "2022-02-23T00:00:10.046Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj36), "2022-02-23T00:00:10.046Z");
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
    }

    @Test
    public void test07629() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07629");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property1 = mutableDateTime0.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime2 = property1.getMutableDateTime();
        org.joda.time.DateTimeField dateTimeField3 = property1.getField();
        java.lang.String str5 = dateTimeField3.getAsText((long) 28);
        org.joda.time.Chronology chronology8 = null;
        java.util.Locale locale9 = java.util.Locale.GERMAN;
        java.util.Locale locale10 = java.util.Locale.CANADA;
        java.lang.String str11 = locale9.getDisplayVariant(locale10);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket12 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology8, locale10);
        java.lang.Object obj13 = dateTimeParserBucket12.saveState();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.LocalTime localTime16 = new org.joda.time.LocalTime((long) (short) 100, chronology15);
        org.joda.time.DurationFieldType durationFieldType17 = org.joda.time.DurationFieldType.weeks();
        java.lang.String str18 = durationFieldType17.getName();
        boolean boolean19 = localTime16.isSupported(durationFieldType17);
        boolean boolean20 = dateTimeParserBucket12.restoreState((java.lang.Object) boolean19);
        org.joda.time.Chronology chronology21 = dateTimeParserBucket12.getChronology();
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime25 = dateTime23.withZoneRetainFields(dateTimeZone24);
        dateTimeParserBucket12.setZone(dateTimeZone24);
        org.joda.time.LocalTime localTime27 = new org.joda.time.LocalTime((long) 435, dateTimeZone24);
        int int28 = localTime27.getMillisOfSecond();
        java.util.Locale.Builder builder30 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder31 = builder30.clear();
        java.util.Locale locale32 = java.util.Locale.GERMAN;
        java.lang.String str33 = locale32.getDisplayName();
        java.lang.String str34 = locale32.getISO3Language();
        java.lang.String str35 = locale32.getISO3Country();
        java.util.Locale.Builder builder36 = builder31.setLocale(locale32);
        java.util.Locale locale37 = java.util.Locale.GERMAN;
        java.util.Locale locale38 = java.util.Locale.CANADA;
        java.lang.String str39 = locale37.getDisplayVariant(locale38);
        java.util.Locale.Builder builder40 = builder36.setLocale(locale38);
        java.lang.String str41 = dateTimeField3.getAsText((org.joda.time.ReadablePartial) localTime27, (-16), locale38);
        int int42 = localTime27.getSecondOfMinute();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime44 = localTime27.withSecondOfMinute(26616867);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26616867 for secondOfMinute must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(mutableDateTime2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "19" + "'", str5, "19");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "de");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertNotNull(durationFieldType17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "weeks" + "'", str18, "weeks");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 435 + "'", int28 == 435);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "de");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "German" + "'", str33, "German");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "deu" + "'", str34, "deu");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "de");
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "-16" + "'", str41, "-16");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
    }

    @Test
    public void test07630() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07630");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) 1);
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period4 = duration3.toPeriod();
        org.joda.time.Duration duration7 = duration3.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Period period8 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime1, (org.joda.time.ReadableDuration) duration7);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(chronology9);
        int int11 = dateTime10.getSecondOfMinute();
        org.joda.time.Interval interval12 = duration7.toIntervalTo((org.joda.time.ReadableInstant) dateTime10);
        org.joda.time.Duration duration13 = duration7.toDuration();
        org.joda.time.Period period14 = duration7.toPeriod();
        org.joda.time.Instant instant15 = new org.joda.time.Instant();
        org.joda.time.DateTime dateTime16 = instant15.toDateTime();
        org.joda.time.LocalDateTime localDateTime17 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.withCenturyOfEra((int) 'a');
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime(chronology24);
        org.joda.time.DateTime dateTime27 = dateTime25.plusMinutes(15);
        org.joda.time.DateTime dateTime28 = localDateTime21.toDateTime((org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime30 = localDateTime21.toDateTime(dateTimeZone29);
        org.joda.time.DateTime dateTime31 = dateTime16.withZoneRetainFields(dateTimeZone29);
        org.joda.time.MutableDateTime mutableDateTime32 = org.joda.time.MutableDateTime.now();
        mutableDateTime32.add((long) 'a');
        org.joda.time.MutableDateTime.Property property35 = mutableDateTime32.yearOfCentury();
        mutableDateTime32.addSeconds(0);
        org.joda.time.Duration duration39 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Hours hours40 = duration39.toStandardHours();
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.DateTime dateTime42 = new org.joda.time.DateTime(chronology41);
        int int43 = dateTime42.getSecondOfMinute();
        org.joda.time.MutablePeriod mutablePeriod44 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration39, (org.joda.time.ReadableInstant) dateTime42);
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime((long) 1);
        org.joda.time.Instant instant47 = new org.joda.time.Instant();
        org.joda.time.Instant instant49 = instant47.withMillis(0L);
        org.joda.time.DateTime dateTime50 = instant49.toDateTime();
        org.joda.time.DateTime dateTime52 = new org.joda.time.DateTime((long) 1);
        org.joda.time.PeriodType periodType53 = org.joda.time.PeriodType.months();
        org.joda.time.Period period54 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime50, (org.joda.time.ReadableInstant) dateTime52, periodType53);
        org.joda.time.Period period55 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration39, (org.joda.time.ReadableInstant) dateTime46, periodType53);
        org.joda.time.Duration duration56 = new org.joda.time.Duration((org.joda.time.ReadableInstant) mutableDateTime32, (org.joda.time.ReadableInstant) dateTime46);
        org.joda.time.DateTime dateTime57 = dateTime31.plus((org.joda.time.ReadableDuration) duration56);
        int int58 = dateTime57.getWeekyear();
        org.joda.time.Period period59 = duration7.toPeriodTo((org.joda.time.ReadableInstant) dateTime57);
        org.joda.time.Period period61 = period59.plusYears(52);
        org.joda.time.PeriodType periodType62 = period61.getPeriodType();
        org.joda.time.Period period63 = period61.normalizedStandard();
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(duration7);
// flaky:         org.junit.Assert.assertTrue("'" + int11 + "' != '" + 49 + "'", int11 == 49);
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(mutableDateTime32);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(duration39);
        org.junit.Assert.assertNotNull(hours40);
// flaky:         org.junit.Assert.assertTrue("'" + int43 + "' != '" + 49 + "'", int43 == 49);
        org.junit.Assert.assertNotNull(instant49);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(periodType53);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 1970 + "'", int58 == 1970);
        org.junit.Assert.assertNotNull(period59);
        org.junit.Assert.assertNotNull(period61);
        org.junit.Assert.assertNotNull(periodType62);
        org.junit.Assert.assertNotNull(period63);
    }

    @Test
    public void test07631() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07631");
        java.lang.Object obj0 = null;
        org.joda.time.MutablePeriod mutablePeriod1 = new org.joda.time.MutablePeriod(obj0);
        mutablePeriod1.addWeeks(26331);
        org.joda.time.Duration duration5 = org.joda.time.Duration.millis(725810096000L);
        org.joda.time.Duration duration8 = duration5.withDurationAdded((long) 50, 0);
        org.joda.time.MutableDateTime mutableDateTime9 = org.joda.time.MutableDateTime.now();
        mutableDateTime9.add((long) 'a');
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime9.yearOfCentury();
        org.joda.time.Duration duration14 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period15 = duration14.toPeriod();
        org.joda.time.Duration duration17 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration20 = duration17.withDurationAdded((long) (short) 100, (int) ' ');
        org.joda.time.Duration duration21 = duration14.minus((org.joda.time.ReadableDuration) duration20);
        mutableDateTime9.add((org.joda.time.ReadableDuration) duration14);
        org.joda.time.MutableDateTime.Property property23 = mutableDateTime9.centuryOfEra();
        mutableDateTime9.addHours((int) (byte) 10);
        mutableDateTime9.addWeeks(20);
        org.joda.time.DateTimeField dateTimeField28 = mutableDateTime9.getRoundingField();
        int int29 = mutableDateTime9.getWeekyear();
        int int30 = mutableDateTime9.getDayOfWeek();
        int int31 = mutableDateTime9.getWeekyear();
        org.joda.time.MutableDateTime.Property property32 = mutableDateTime9.millisOfDay();
        org.joda.time.MutableDateTime mutableDateTime33 = org.joda.time.MutableDateTime.now();
        mutableDateTime33.add((long) 'a');
        org.joda.time.MutableDateTime.Property property36 = mutableDateTime33.yearOfCentury();
        org.joda.time.Duration duration38 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period39 = duration38.toPeriod();
        org.joda.time.Duration duration41 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration44 = duration41.withDurationAdded((long) (short) 100, (int) ' ');
        org.joda.time.Duration duration45 = duration38.minus((org.joda.time.ReadableDuration) duration44);
        mutableDateTime33.add((org.joda.time.ReadableDuration) duration38);
        org.joda.time.MutableDateTime.Property property47 = mutableDateTime33.centuryOfEra();
        mutableDateTime33.addYears(0);
        mutableDateTime33.setMinuteOfDay((int) (short) 0);
        org.joda.time.Instant instant52 = new org.joda.time.Instant();
        org.joda.time.Instant instant54 = instant52.withMillis(0L);
        org.joda.time.Duration duration56 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period57 = duration56.toPeriod();
        org.joda.time.Duration duration60 = duration56.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Instant instant61 = instant54.plus((org.joda.time.ReadableDuration) duration60);
        long long62 = instant61.getMillis();
        org.joda.time.Duration duration63 = new org.joda.time.Duration((org.joda.time.ReadableInstant) mutableDateTime33, (org.joda.time.ReadableInstant) instant61);
        org.joda.time.MutableDateTime.Property property64 = mutableDateTime33.millisOfSecond();
        org.joda.time.Instant instant65 = new org.joda.time.Instant((java.lang.Object) mutableDateTime33);
        boolean boolean66 = mutableDateTime9.isAfter((org.joda.time.ReadableInstant) mutableDateTime33);
        org.joda.time.DateTime dateTime67 = mutableDateTime33.toDateTime();
        org.joda.time.Interval interval68 = duration8.toIntervalFrom((org.joda.time.ReadableInstant) mutableDateTime33);
        mutablePeriod1.setPeriod((org.joda.time.ReadableInterval) interval68);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNull(dateTimeField28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2022 + "'", int29 == 2022);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 3 + "'", int30 == 3);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 2022 + "'", int31 == 2022);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(mutableDateTime33);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertNotNull(period39);
        org.junit.Assert.assertNotNull(duration41);
        org.junit.Assert.assertNotNull(duration44);
        org.junit.Assert.assertNotNull(duration45);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertNotNull(instant54);
        org.junit.Assert.assertNotNull(duration56);
        org.junit.Assert.assertNotNull(period57);
        org.junit.Assert.assertNotNull(duration60);
        org.junit.Assert.assertNotNull(instant61);
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 86400000L + "'", long62 == 86400000L);
        org.junit.Assert.assertNotNull(property64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertNotNull(interval68);
    }

    @Test
    public void test07632() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07632");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration4 = duration1.withDurationAdded((long) (short) 100, (int) ' ');
        long long5 = duration4.getMillis();
        org.joda.time.Instant instant6 = new org.joda.time.Instant();
        org.joda.time.Instant instant8 = instant6.withMillis(0L);
        org.joda.time.DateTime dateTime9 = instant8.toDateTime();
        org.joda.time.Instant instant10 = new org.joda.time.Instant();
        org.joda.time.Instant instant12 = instant10.withMillis(0L);
        org.joda.time.DateTime dateTime13 = instant12.toDateTime();
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((long) 1);
        org.joda.time.PeriodType periodType16 = org.joda.time.PeriodType.months();
        org.joda.time.Period period17 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime13, (org.joda.time.ReadableInstant) dateTime15, periodType16);
        boolean boolean18 = dateTime9.isBefore((org.joda.time.ReadableInstant) dateTime13);
        int int19 = dateTime13.getDayOfMonth();
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.ReadableInstant readableInstant21 = null;
        org.joda.time.PeriodType periodType22 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod23 = new org.joda.time.MutablePeriod(readableInstant20, readableInstant21, periodType22);
        org.joda.time.PeriodType periodType24 = periodType22.withHoursRemoved();
        org.joda.time.MutablePeriod mutablePeriod25 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration4, (org.joda.time.ReadableInstant) dateTime13, periodType22);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime(chronology26);
        org.joda.time.DateTime dateTime29 = dateTime27.plusMinutes(15);
        org.joda.time.Chronology chronology30 = dateTime27.getChronology();
        org.joda.time.Instant instant31 = new org.joda.time.Instant();
        org.joda.time.Instant instant33 = instant31.withMillis(0L);
        org.joda.time.Chronology chronology34 = instant33.getChronology();
        org.joda.time.DurationField durationField35 = chronology34.eras();
        org.joda.time.LocalTime localTime36 = org.joda.time.LocalTime.now(chronology34);
        org.joda.time.DurationField durationField37 = chronology34.eras();
        org.joda.time.DateTimeField dateTimeField38 = chronology34.hourOfDay();
        org.joda.time.DateTime dateTime39 = dateTime27.withChronology(chronology34);
        org.joda.time.MutableDateTime mutableDateTime40 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property41 = mutableDateTime40.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime42 = property41.getMutableDateTime();
        boolean boolean43 = dateTime39.isBefore((org.joda.time.ReadableInstant) mutableDateTime42);
        org.joda.time.Instant instant44 = new org.joda.time.Instant();
        org.joda.time.Instant instant46 = instant44.withMillis(0L);
        org.joda.time.Chronology chronology47 = instant46.getChronology();
        org.joda.time.DurationField durationField48 = chronology47.eras();
        long long52 = chronology47.add(0L, (long) 2022, (int) '4');
        org.joda.time.DateTimeField dateTimeField53 = chronology47.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField54 = chronology47.minuteOfDay();
        mutableDateTime42.setChronology(chronology47);
        org.joda.time.DateTime dateTime56 = dateTime13.toDateTime(chronology47);
        org.joda.time.DateTimeZone dateTimeZone57 = null;
        org.joda.time.LocalTime localTime58 = new org.joda.time.LocalTime(dateTimeZone57);
        org.joda.time.LocalTime localTime60 = localTime58.minusHours((int) (byte) 100);
        int int61 = localTime60.getMinuteOfHour();
        java.lang.String str63 = localTime60.toString("1");
        org.joda.time.LocalTime localTime65 = localTime60.minusMinutes(15);
        org.joda.time.Chronology chronology66 = null;
        org.joda.time.DateTime dateTime67 = new org.joda.time.DateTime(chronology66);
        int int68 = dateTime67.getYearOfCentury();
        int int69 = dateTime67.getWeekyear();
        org.joda.time.DateTime dateTime71 = dateTime67.plus((long) 15);
        org.joda.time.DateTime.Property property72 = dateTime67.year();
        org.joda.time.DateTime dateTime73 = property72.roundHalfFloorCopy();
        org.joda.time.DateTime.Property property74 = dateTime73.millisOfSecond();
        org.joda.time.MutableDateTime mutableDateTime75 = dateTime73.toMutableDateTime();
        org.joda.time.LocalTime localTime76 = dateTime73.toLocalTime();
        org.joda.time.LocalTime localTime77 = localTime60.withFields((org.joda.time.ReadablePartial) localTime76);
        org.joda.time.ReadablePeriod readablePeriod78 = null;
        org.joda.time.LocalTime localTime79 = localTime76.minus(readablePeriod78);
        org.joda.time.DateTimeFieldType dateTimeFieldType80 = org.joda.time.DateTimeFieldType.clockhourOfDay();
        java.lang.String str81 = dateTimeFieldType80.getName();
        int int82 = localTime79.get(dateTimeFieldType80);
        int int83 = dateTime56.get(dateTimeFieldType80);
        org.joda.time.DateTime dateTime85 = dateTime56.minus(82546675084800000L);
        org.joda.time.DateTime dateTime86 = dateTime85.withTimeAtStartOfDay();
        int int87 = dateTime85.getDayOfMonth();
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 86403200L + "'", long5 == 86403200L);
        org.junit.Assert.assertNotNull(instant8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(instant12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(periodType16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(periodType22);
        org.junit.Assert.assertNotNull(periodType24);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(instant33);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(durationField35);
        org.junit.Assert.assertNotNull(localTime36);
        org.junit.Assert.assertNotNull(durationField37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(mutableDateTime40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(mutableDateTime42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(instant46);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertNotNull(durationField48);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 105144L + "'", long52 == 105144L);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(localTime60);
// flaky:         org.junit.Assert.assertTrue("'" + int61 + "' != '" + 23 + "'", int61 == 23);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "1" + "'", str63, "1");
        org.junit.Assert.assertNotNull(localTime65);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 22 + "'", int68 == 22);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 2022 + "'", int69 == 2022);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertNotNull(property72);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertNotNull(property74);
        org.junit.Assert.assertNotNull(mutableDateTime75);
        org.junit.Assert.assertNotNull(localTime76);
        org.junit.Assert.assertNotNull(localTime77);
        org.junit.Assert.assertNotNull(localTime79);
        org.junit.Assert.assertNotNull(dateTimeFieldType80);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "clockhourOfDay" + "'", str81, "clockhourOfDay");
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 24 + "'", int82 == 24);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 24 + "'", int83 == 24);
        org.junit.Assert.assertNotNull(dateTime85);
        org.junit.Assert.assertNotNull(dateTime86);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 31 + "'", int87 == 31);
    }

    @Test
    public void test07633() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07633");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.Instant instant3 = new org.joda.time.Instant();
        org.joda.time.Instant instant5 = instant3.withMillis(0L);
        org.joda.time.Chronology chronology6 = instant5.getChronology();
        org.joda.time.DurationField durationField7 = chronology6.eras();
        long long11 = chronology6.add(0L, (long) 2022, (int) '4');
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = dateTimeFormatter2.withChronology(chronology6);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = dateTimeFormatter2.withZoneUTC();
        boolean boolean14 = dateTimeFormatter2.isPrinter();
        org.joda.time.MutableDateTime mutableDateTime15 = org.joda.time.MutableDateTime.now();
        mutableDateTime15.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime18 = mutableDateTime15.copy();
        org.joda.time.MutableDateTime.Property property19 = mutableDateTime15.weekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime20 = property19.roundHalfFloor();
        org.joda.time.MutableDateTime mutableDateTime21 = property19.roundHalfCeiling();
        org.joda.time.MutableDateTime mutableDateTime23 = property19.set(1);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime(chronology24);
        int int26 = dateTime25.getYearOfCentury();
        int int27 = dateTime25.getWeekyear();
        org.joda.time.DateTime dateTime28 = dateTime25.withEarlierOffsetAtOverlap();
        java.lang.String str29 = dateTime28.toString();
        org.joda.time.MutableDateTime mutableDateTime30 = dateTime28.toMutableDateTime();
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.UTC;
        boolean boolean32 = dateTimeZone31.isFixed();
        mutableDateTime30.setZoneRetainFields(dateTimeZone31);
        org.joda.time.MutableDateTime mutableDateTime34 = mutableDateTime23.toMutableDateTime(dateTimeZone31);
        org.joda.time.LocalDate localDate35 = org.joda.time.LocalDate.now(dateTimeZone31);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter36 = dateTimeFormatter2.withZone(dateTimeZone31);
        int int37 = dateTimeFormatter2.getDefaultYear();
        java.lang.Integer int38 = dateTimeFormatter2.getPivotYear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter40 = dateTimeFormatter2.withDefaultYear(26357);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str42 = dateTimeFormatter40.print(1399597L);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(instant5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 105144L + "'", long11 == 105144L);
        org.junit.Assert.assertNotNull(dateTimeFormatter12);
        org.junit.Assert.assertNotNull(dateTimeFormatter13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(mutableDateTime15);
        org.junit.Assert.assertNotNull(mutableDateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(mutableDateTime20);
        org.junit.Assert.assertNotNull(mutableDateTime21);
        org.junit.Assert.assertNotNull(mutableDateTime23);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 22 + "'", int26 == 22);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2022 + "'", int27 == 2022);
        org.junit.Assert.assertNotNull(dateTime28);
// flaky:         org.junit.Assert.assertEquals("'" + str29 + "' != '" + "2022-02-22T07:23:49.395Z" + "'", str29, "2022-02-22T07:23:49.395Z");
        org.junit.Assert.assertNotNull(mutableDateTime30);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(mutableDateTime34);
        org.junit.Assert.assertNotNull(localDate35);
        org.junit.Assert.assertNotNull(dateTimeFormatter36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 2000 + "'", int37 == 2000);
        org.junit.Assert.assertNull(int38);
        org.junit.Assert.assertNotNull(dateTimeFormatter40);
    }

    @Test
    public void test07634() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07634");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period2 = duration1.toPeriod();
        org.joda.time.Duration duration4 = duration1.minus((long) 292278993);
        org.joda.time.MutableDateTime mutableDateTime5 = org.joda.time.MutableDateTime.now();
        mutableDateTime5.add((long) 'a');
        org.joda.time.MutableDateTime.Property property8 = mutableDateTime5.yearOfCentury();
        org.joda.time.Duration duration10 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period11 = duration10.toPeriod();
        org.joda.time.Duration duration13 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration16 = duration13.withDurationAdded((long) (short) 100, (int) ' ');
        org.joda.time.Duration duration17 = duration10.minus((org.joda.time.ReadableDuration) duration16);
        mutableDateTime5.add((org.joda.time.ReadableDuration) duration10);
        boolean boolean19 = duration4.isShorterThan((org.joda.time.ReadableDuration) duration10);
        org.joda.time.Duration duration21 = duration10.minus((long) (byte) 0);
        org.joda.time.ReadableDuration readableDuration22 = null;
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.Period period24 = new org.joda.time.Period(readableDuration22, readableInstant23);
        org.joda.time.Period period26 = period24.withDays((int) (byte) 1);
        org.joda.time.Duration duration28 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Hours hours29 = duration28.toStandardHours();
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime(chronology30);
        int int32 = dateTime31.getSecondOfMinute();
        org.joda.time.MutablePeriod mutablePeriod33 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration28, (org.joda.time.ReadableInstant) dateTime31);
        org.joda.time.Duration duration34 = period24.toDurationFrom((org.joda.time.ReadableInstant) dateTime31);
        org.joda.time.DateTime dateTime36 = dateTime31.minusHours(16);
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime42 = dateTime40.withZoneRetainFields(dateTimeZone41);
        org.joda.time.LocalDate localDate43 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property44 = localDate43.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.UTC;
        java.util.TimeZone timeZone46 = dateTimeZone45.toTimeZone();
        org.joda.time.DateTime dateTime47 = localDate43.toDateTimeAtCurrentTime(dateTimeZone45);
        int int48 = dateTime42.compareTo((org.joda.time.ReadableInstant) dateTime47);
        org.joda.time.DateTime dateTime50 = dateTime47.minusWeeks(44);
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.DateTime dateTime52 = new org.joda.time.DateTime(chronology51);
        org.joda.time.DateTime dateTime54 = dateTime52.plusMinutes(15);
        org.joda.time.Chronology chronology55 = dateTime52.getChronology();
        java.lang.String str56 = chronology55.toString();
        org.joda.time.DateTimeField dateTimeField57 = chronology55.dayOfYear();
        org.joda.time.DateTime dateTime58 = dateTime47.withChronology(chronology55);
        org.joda.time.ReadableDuration readableDuration59 = null;
        org.joda.time.ReadableInstant readableInstant60 = null;
        org.joda.time.ReadableInstant readableInstant61 = null;
        org.joda.time.PeriodType periodType62 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod63 = new org.joda.time.MutablePeriod(readableInstant60, readableInstant61, periodType62);
        org.joda.time.DurationFieldType durationFieldType65 = periodType62.getFieldType((int) (short) 0);
        org.joda.time.PeriodType periodType66 = periodType62.withMillisRemoved();
        org.joda.time.Period period67 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime58, readableDuration59, periodType66);
        org.joda.time.Period period68 = new org.joda.time.Period(0L, periodType66);
        org.joda.time.format.DateTimePrinter dateTimePrinter69 = null;
        org.joda.time.format.DateTimeParser dateTimeParser70 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter71 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter69, dateTimeParser70);
        org.joda.time.Instant instant72 = new org.joda.time.Instant();
        org.joda.time.Instant instant74 = instant72.withMillis(0L);
        org.joda.time.Chronology chronology75 = instant74.getChronology();
        org.joda.time.DurationField durationField76 = chronology75.eras();
        long long80 = chronology75.add(0L, (long) 2022, (int) '4');
        org.joda.time.format.DateTimeFormatter dateTimeFormatter81 = dateTimeFormatter71.withChronology(chronology75);
        org.joda.time.MutablePeriod mutablePeriod82 = new org.joda.time.MutablePeriod(3600000L, periodType66, chronology75);
        org.joda.time.Period period83 = duration21.toPeriodFrom((org.joda.time.ReadableInstant) dateTime36, periodType66);
        org.joda.time.PeriodType periodType84 = periodType66.withHoursRemoved();
        org.joda.time.PeriodType periodType85 = periodType66.withYearsRemoved();
        org.joda.time.PeriodType periodType86 = periodType66.withMinutesRemoved();
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(period2);
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertNotNull(mutableDateTime5);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(hours29);
// flaky:         org.junit.Assert.assertTrue("'" + int32 + "' != '" + 49 + "'", int32 == 49);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(dateTimeZone45);
        org.junit.Assert.assertNotNull(timeZone46);
// flaky:         org.junit.Assert.assertEquals(timeZone46.getDisplayName(), "\u534f\u8c03\u4e16\u754c\u65f6\u95f4");
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(chronology55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "ISOChronology[UTC]" + "'", str56, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(periodType62);
        org.junit.Assert.assertNotNull(durationFieldType65);
        org.junit.Assert.assertNotNull(periodType66);
        org.junit.Assert.assertNotNull(instant74);
        org.junit.Assert.assertNotNull(chronology75);
        org.junit.Assert.assertNotNull(durationField76);
        org.junit.Assert.assertTrue("'" + long80 + "' != '" + 105144L + "'", long80 == 105144L);
        org.junit.Assert.assertNotNull(dateTimeFormatter81);
        org.junit.Assert.assertNotNull(period83);
        org.junit.Assert.assertNotNull(periodType84);
        org.junit.Assert.assertNotNull(periodType85);
        org.junit.Assert.assertNotNull(periodType86);
    }

    @Test
    public void test07635() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07635");
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.dayOfMonth();
        org.joda.time.LocalTime localTime3 = org.joda.time.LocalTime.fromMillisOfDay((long) (byte) 1);
        org.joda.time.Chronology chronology4 = localTime3.getChronology();
        boolean boolean5 = dateTimeFieldType1.isSupported(chronology4);
        org.joda.time.MutableDateTime mutableDateTime6 = new org.joda.time.MutableDateTime(chronology4);
        org.joda.time.DurationField durationField7 = chronology4.minutes();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime(chronology8);
        int int10 = dateTime9.getYearOfCentury();
        int int11 = dateTime9.getWeekyear();
        org.joda.time.DateTime dateTime12 = dateTime9.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime.Property property13 = dateTime9.yearOfEra();
        org.joda.time.DateTimeField dateTimeField14 = property13.getField();
        org.joda.time.DateTimeField dateTimeField15 = property13.getField();
        long long17 = dateTimeField15.roundHalfCeiling(19115568000000L);
        java.util.Locale.Builder builder19 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder20 = builder19.clear();
        java.util.Locale locale21 = java.util.Locale.GERMAN;
        java.lang.String str22 = locale21.getDisplayName();
        java.lang.String str23 = locale21.getISO3Language();
        java.util.Locale.Builder builder24 = builder20.setLocale(locale21);
        java.util.Locale locale25 = builder24.build();
        java.lang.String str26 = dateTimeField15.getAsShortText((long) 26396, locale25);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket27 = new org.joda.time.format.DateTimeParserBucket(1618866270310L, chronology4, locale25);
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 22 + "'", int10 == 22);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2022 + "'", int11 == 2022);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 19123516800000L + "'", long17 == 19123516800000L);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "de");
// flaky:         org.junit.Assert.assertEquals("'" + str22 + "' != '" + "\u5fb7\u6587" + "'", str22, "\u5fb7\u6587");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "deu" + "'", str23, "deu");
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "de");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "1970" + "'", str26, "1970");
    }

    @Test
    public void test07636() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07636");
        org.joda.time.ReadableDuration readableDuration3 = null;
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.Period period5 = new org.joda.time.Period(readableDuration3, readableInstant4);
        org.joda.time.PeriodType periodType8 = null;
        org.joda.time.Period period9 = new org.joda.time.Period((long) 100, 1L, periodType8);
        org.joda.time.Period period11 = period9.minusSeconds((-1));
        java.lang.String str12 = period9.toString();
        org.joda.time.Period period13 = period9.toPeriod();
        org.joda.time.PeriodType periodType14 = period9.getPeriodType();
        org.joda.time.Period period15 = period5.normalizedStandard(periodType14);
        org.joda.time.DurationFieldType durationFieldType16 = null;
        int int17 = periodType14.indexOf(durationFieldType16);
        org.joda.time.Instant instant18 = new org.joda.time.Instant();
        org.joda.time.Instant instant20 = instant18.withMillis(0L);
        org.joda.time.Chronology chronology21 = instant20.getChronology();
        org.joda.time.DurationField durationField22 = chronology21.eras();
        org.joda.time.LocalTime localTime23 = org.joda.time.LocalTime.now(chronology21);
        org.joda.time.DurationField durationField24 = chronology21.eras();
        org.joda.time.DateTimeField dateTimeField25 = chronology21.hourOfDay();
        org.joda.time.MutablePeriod mutablePeriod26 = new org.joda.time.MutablePeriod((long) 12, (long) 292278993, periodType14, chronology21);
        org.joda.time.DateTimeField dateTimeField27 = chronology21.hourOfDay();
        org.joda.time.MutableDateTime mutableDateTime28 = new org.joda.time.MutableDateTime(1645514358483L, chronology21);
        org.joda.time.LocalTime localTime29 = org.joda.time.LocalTime.now(chronology21);
        org.joda.time.ReadableDuration readableDuration30 = null;
        org.joda.time.ReadableInstant readableInstant31 = null;
        org.joda.time.Period period32 = new org.joda.time.Period(readableDuration30, readableInstant31);
        org.joda.time.PeriodType periodType35 = null;
        org.joda.time.Period period36 = new org.joda.time.Period((long) 100, 1L, periodType35);
        org.joda.time.Period period38 = period36.minusSeconds((-1));
        java.lang.String str39 = period36.toString();
        org.joda.time.Period period40 = period36.toPeriod();
        org.joda.time.PeriodType periodType41 = period36.getPeriodType();
        org.joda.time.Period period42 = period32.normalizedStandard(periodType41);
        org.joda.time.Period period44 = period42.withSeconds(10);
        org.joda.time.Minutes minutes45 = period42.toStandardMinutes();
        org.joda.time.Period period47 = period42.withSeconds((int) (short) -1);
        org.joda.time.Period period49 = period47.minusHours(1970);
        long long52 = chronology21.add((org.joda.time.ReadablePeriod) period47, (long) (short) 100, 37217338);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "PT0.099S" + "'", str12, "PT0.099S");
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(periodType14);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(instant20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(localTime23);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(localTime29);
        org.junit.Assert.assertNotNull(period38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "PT0.099S" + "'", str39, "PT0.099S");
        org.junit.Assert.assertNotNull(period40);
        org.junit.Assert.assertNotNull(periodType41);
        org.junit.Assert.assertNotNull(period42);
        org.junit.Assert.assertNotNull(period44);
        org.junit.Assert.assertNotNull(minutes45);
        org.junit.Assert.assertNotNull(period47);
        org.junit.Assert.assertNotNull(period49);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + (-37217337900L) + "'", long52 == (-37217337900L));
    }

    @Test
    public void test07637() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07637");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 1, chronology1);
        int int3 = dateTime2.getMinuteOfDay();
        org.joda.time.Instant instant4 = dateTime2.toInstant();
        org.joda.time.Instant instant6 = instant4.minus((long) (byte) -1);
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(chronology7);
        int int9 = dateTime8.getYearOfCentury();
        int int10 = dateTime8.getWeekyear();
        org.joda.time.DateTime.Property property11 = dateTime8.dayOfYear();
        org.joda.time.Period period13 = org.joda.time.Period.weeks((int) (byte) 0);
        org.joda.time.Period period15 = period13.withDays(2022);
        org.joda.time.DateTime dateTime17 = dateTime8.withPeriodAdded((org.joda.time.ReadablePeriod) period15, (int) (short) 100);
        org.joda.time.LocalDateTime localDateTime18 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime20.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime22.plusYears((int) (short) 100);
        int int25 = localDateTime24.getEra();
        org.joda.time.LocalDateTime localDateTime27 = localDateTime24.minusHours(45);
        org.joda.time.DateTime dateTime28 = dateTime17.withFields((org.joda.time.ReadablePartial) localDateTime24);
        boolean boolean29 = instant4.isEqual((org.joda.time.ReadableInstant) dateTime28);
        org.joda.time.DateTime.Property property30 = dateTime28.weekyear();
        org.joda.time.DateTime dateTime32 = property30.setCopy(0);
        org.joda.time.DateTime dateTime33 = property30.withMaximumValue();
        org.joda.time.MutableDateTime mutableDateTime34 = dateTime33.toMutableDateTime();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(instant4);
        org.junit.Assert.assertNotNull(instant6);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 22 + "'", int9 == 22);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2022 + "'", int10 == 2022);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(mutableDateTime34);
    }

    @Test
    public void test07638() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07638");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.Instant instant2 = instant0.withMillis(0L);
        org.joda.time.Chronology chronology3 = instant2.getChronology();
        org.joda.time.DurationField durationField4 = chronology3.eras();
        long long8 = chronology3.add(0L, (long) 2022, (int) '4');
        org.joda.time.DateTimeField dateTimeField9 = chronology3.secondOfMinute();
        boolean boolean10 = dateTimeField9.isSupported();
        org.joda.time.LocalDate localDate11 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property12 = localDate11.monthOfYear();
        int int13 = dateTimeField9.getMinimumValue((org.joda.time.ReadablePartial) localDate11);
        org.joda.time.LocalDate localDate15 = localDate11.withYearOfCentury(46);
        org.joda.time.LocalDate.Property property16 = localDate11.dayOfMonth();
        org.joda.time.Chronology chronology17 = localDate11.getChronology();
        org.joda.time.DateTimeZone dateTimeZone18 = chronology17.getZone();
        org.joda.time.MutableDateTime mutableDateTime19 = new org.joda.time.MutableDateTime(dateTimeZone18);
        int int21 = dateTimeZone18.getStandardOffset((long) 26237290);
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime(dateTimeZone18);
        int int23 = dateTime22.getYearOfCentury();
        org.junit.Assert.assertNotNull(instant2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 105144L + "'", long8 == 105144L);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 22 + "'", int23 == 22);
    }

    @Test
    public void test07639() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07639");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.monthOfYear();
        org.joda.time.DateTimeField dateTimeField2 = property1.getField();
        org.joda.time.LocalDate localDate3 = property1.withMaximumValue();
        java.util.Date date4 = localDate3.toDate();
        org.joda.time.LocalDate localDate6 = localDate3.minusMonths((int) ' ');
        org.joda.time.LocalDate localDate8 = localDate6.withYear(1973);
        org.joda.time.Duration duration10 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period11 = duration10.toPeriod();
        org.joda.time.Duration duration13 = duration10.minus((long) 292278993);
        org.joda.time.Period period14 = new org.joda.time.Period((java.lang.Object) duration13);
        org.joda.time.Duration duration15 = duration13.toDuration();
        boolean boolean16 = localDate6.equals((java.lang.Object) duration13);
        org.joda.time.Duration duration19 = duration13.withDurationAdded(617L, (-52));
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime(chronology20);
        int int22 = dateTime21.getYearOfCentury();
        int int23 = dateTime21.getYearOfEra();
        org.joda.time.MutableDateTime mutableDateTime24 = dateTime21.toMutableDateTime();
        org.joda.time.Duration duration26 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period27 = duration26.toPeriod();
        org.joda.time.Duration duration29 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration31 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration34 = duration31.withDurationAdded((long) (short) 100, (int) ' ');
        boolean boolean35 = duration29.isLongerThan((org.joda.time.ReadableDuration) duration34);
        org.joda.time.Duration duration36 = duration26.minus((org.joda.time.ReadableDuration) duration29);
        mutableDateTime24.add((org.joda.time.ReadableDuration) duration29);
        long long38 = duration29.getStandardMinutes();
        boolean boolean39 = duration19.isEqual((org.joda.time.ReadableDuration) duration29);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(date4);
        org.junit.Assert.assertEquals(date4.toString(), "Thu Dec 22 00:00:00 UTC 2022");
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 22 + "'", int22 == 22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 2022 + "'", int23 == 2022);
        org.junit.Assert.assertNotNull(mutableDateTime24);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 1L + "'", long38 == 1L);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
    }

    @Test
    public void test07640() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07640");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration4 = duration1.withDurationAdded((long) (short) 100, (int) ' ');
        long long5 = duration4.getMillis();
        org.joda.time.Instant instant6 = new org.joda.time.Instant();
        org.joda.time.Instant instant8 = instant6.withMillis(0L);
        org.joda.time.DateTime dateTime9 = instant8.toDateTime();
        org.joda.time.Instant instant10 = new org.joda.time.Instant();
        org.joda.time.Instant instant12 = instant10.withMillis(0L);
        org.joda.time.DateTime dateTime13 = instant12.toDateTime();
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((long) 1);
        org.joda.time.PeriodType periodType16 = org.joda.time.PeriodType.months();
        org.joda.time.Period period17 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime13, (org.joda.time.ReadableInstant) dateTime15, periodType16);
        boolean boolean18 = dateTime9.isBefore((org.joda.time.ReadableInstant) dateTime13);
        int int19 = dateTime13.getDayOfMonth();
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.ReadableInstant readableInstant21 = null;
        org.joda.time.PeriodType periodType22 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod23 = new org.joda.time.MutablePeriod(readableInstant20, readableInstant21, periodType22);
        org.joda.time.PeriodType periodType24 = periodType22.withHoursRemoved();
        org.joda.time.MutablePeriod mutablePeriod25 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration4, (org.joda.time.ReadableInstant) dateTime13, periodType22);
        org.joda.time.LocalDate localDate26 = new org.joda.time.LocalDate();
        int int27 = localDate26.getDayOfMonth();
        org.joda.time.DateTime dateTime28 = localDate26.toDateTimeAtMidnight();
        org.joda.time.LocalDate.Property property29 = localDate26.weekOfWeekyear();
        boolean boolean30 = duration4.equals((java.lang.Object) property29);
        org.joda.time.LocalDate localDate31 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property32 = localDate31.monthOfYear();
        org.joda.time.DateTimeField dateTimeField33 = property32.getField();
        org.joda.time.LocalDate localDate34 = property32.roundCeilingCopy();
        org.joda.time.Chronology chronology35 = localDate34.getChronology();
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(53, 0);
        org.joda.time.DateTime dateTime39 = localDate34.toDateTimeAtCurrentTime(dateTimeZone38);
        boolean boolean40 = dateTime39.isEqualNow();
        org.joda.time.Interval interval41 = duration4.toIntervalTo((org.joda.time.ReadableInstant) dateTime39);
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime(chronology42);
        int int44 = dateTime43.getYearOfCentury();
        int int45 = dateTime43.getWeekyear();
        org.joda.time.DateTime.Property property46 = dateTime43.dayOfYear();
        org.joda.time.DateTime.Property property47 = dateTime43.weekyear();
        org.joda.time.Duration duration49 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration51 = org.joda.time.Duration.standardDays((long) (byte) 1);
        java.lang.String str52 = duration51.toString();
        boolean boolean53 = duration49.isShorterThan((org.joda.time.ReadableDuration) duration51);
        org.joda.time.Hours hours54 = duration49.toStandardHours();
        org.joda.time.Duration duration56 = org.joda.time.Duration.standardSeconds(100L);
        int int57 = duration49.compareTo((org.joda.time.ReadableDuration) duration56);
        long long58 = duration56.getStandardSeconds();
        org.joda.time.MutableDateTime mutableDateTime60 = new org.joda.time.MutableDateTime((long) (-292275054));
        java.io.IOException iOException62 = new java.io.IOException("");
        java.io.IOException iOException63 = new java.io.IOException((java.lang.Throwable) iOException62);
        boolean boolean64 = mutableDateTime60.equals((java.lang.Object) iOException62);
        org.joda.time.Duration duration67 = new org.joda.time.Duration(0L, 946312L);
        mutableDateTime60.add((org.joda.time.ReadableDuration) duration67, 1424);
        boolean boolean71 = duration67.equals((java.lang.Object) "2022-02-22T07:16:00.803Z");
        org.joda.time.Duration duration72 = duration56.minus((org.joda.time.ReadableDuration) duration67);
        org.joda.time.DateTime dateTime73 = dateTime43.minus((org.joda.time.ReadableDuration) duration56);
        org.joda.time.Duration duration75 = org.joda.time.Duration.standardSeconds((long) 26176);
        org.joda.time.MutablePeriod mutablePeriod76 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime73, (org.joda.time.ReadableDuration) duration75);
        boolean boolean77 = duration4.isLongerThan((org.joda.time.ReadableDuration) duration75);
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 86403200L + "'", long5 == 86403200L);
        org.junit.Assert.assertNotNull(instant8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(instant12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(periodType16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(periodType22);
        org.junit.Assert.assertNotNull(periodType24);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 22 + "'", int27 == 22);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(localDate34);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(interval41);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 22 + "'", int44 == 22);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 2022 + "'", int45 == 2022);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertNotNull(duration49);
        org.junit.Assert.assertNotNull(duration51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "PT86400S" + "'", str52, "PT86400S");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(hours54);
        org.junit.Assert.assertNotNull(duration56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 100L + "'", long58 == 100L);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(duration72);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertNotNull(duration75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
    }

    @Test
    public void test07641() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07641");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.UTC;
        java.util.Locale locale3 = java.util.Locale.GERMAN;
        java.lang.String str4 = locale3.getDisplayName();
        java.lang.String str5 = dateTimeZone1.getName(100L, locale3);
        org.joda.time.MutableDateTime mutableDateTime6 = new org.joda.time.MutableDateTime(948227L, dateTimeZone1);
        org.joda.time.MutableDateTime.Property property7 = mutableDateTime6.year();
        mutableDateTime6.addHours(16);
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.UTC;
        java.util.TimeZone timeZone11 = dateTimeZone10.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.UTC;
        long long14 = dateTimeZone10.getMillisKeepLocal(dateTimeZone12, (long) 44);
        org.joda.time.MutableDateTime mutableDateTime15 = new org.joda.time.MutableDateTime(dateTimeZone10);
        mutableDateTime6.setZoneRetainFields(dateTimeZone10);
        org.joda.time.MutableDateTime mutableDateTime17 = new org.joda.time.MutableDateTime(dateTimeZone10);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime(chronology18);
        int int20 = dateTime19.getYearOfCentury();
        int int21 = dateTime19.getWeekyear();
        org.joda.time.DateTime dateTime22 = dateTime19.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime.Property property23 = dateTime19.yearOfEra();
        int int24 = dateTime19.getWeekOfWeekyear();
        org.joda.time.DateTime dateTime26 = dateTime19.minusMonths(37020985);
        org.joda.time.Chronology chronology27 = dateTime19.getChronology();
        mutableDateTime17.setChronology(chronology27);
        org.joda.time.LocalDateTime localDateTime29 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime31 = localDateTime29.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime33 = localDateTime31.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime35 = localDateTime33.plusYears((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime37 = localDateTime35.minusSeconds((int) (byte) 10);
        int int38 = localDateTime35.getMonthOfYear();
        org.joda.time.LocalDateTime localDateTime40 = localDateTime35.minusYears(36988464);
        org.joda.time.LocalDateTime.Property property41 = localDateTime40.dayOfYear();
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime45 = dateTime43.withZoneRetainFields(dateTimeZone44);
        boolean boolean47 = dateTime45.equals((java.lang.Object) (-1L));
        java.util.GregorianCalendar gregorianCalendar48 = dateTime45.toGregorianCalendar();
        org.joda.time.DateTimeFieldType dateTimeFieldType49 = org.joda.time.DateTimeFieldType.secondOfDay();
        org.joda.time.DateTime dateTime51 = dateTime45.withField(dateTimeFieldType49, 22);
        org.joda.time.Duration duration53 = org.joda.time.Duration.standardDays((long) (byte) 1);
        java.lang.String str54 = duration53.toString();
        org.joda.time.Duration duration56 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Hours hours57 = duration56.toStandardHours();
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.DateTime dateTime59 = new org.joda.time.DateTime(chronology58);
        int int60 = dateTime59.getSecondOfMinute();
        org.joda.time.MutablePeriod mutablePeriod61 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration56, (org.joda.time.ReadableInstant) dateTime59);
        org.joda.time.Duration duration62 = duration53.plus((org.joda.time.ReadableDuration) duration56);
        org.joda.time.MutablePeriod mutablePeriod63 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime51, (org.joda.time.ReadableDuration) duration62);
        org.joda.time.LocalDateTime localDateTime64 = localDateTime40.minus((org.joda.time.ReadableDuration) duration62);
        mutableDateTime17.add((org.joda.time.ReadableDuration) duration62, 972);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime17.setTime(26623996, 553, 465, 316);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26623996 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "de");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u5fb7\u6587" + "'", str4, "\u5fb7\u6587");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "+00:00" + "'", str5, "+00:00");
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(timeZone11);
// flaky:         org.junit.Assert.assertEquals(timeZone11.getDisplayName(), "\u534f\u8c03\u4e16\u754c\u65f6\u95f4");
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 44L + "'", long14 == 44L);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 22 + "'", int20 == 22);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2022 + "'", int21 == 2022);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 8 + "'", int24 == 8);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 2 + "'", int38 == 2);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(gregorianCalendar48);
        org.junit.Assert.assertNotNull(dateTimeFieldType49);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(duration53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "PT86400S" + "'", str54, "PT86400S");
        org.junit.Assert.assertNotNull(duration56);
        org.junit.Assert.assertNotNull(hours57);
// flaky:         org.junit.Assert.assertTrue("'" + int60 + "' != '" + 49 + "'", int60 == 49);
        org.junit.Assert.assertNotNull(duration62);
        org.junit.Assert.assertNotNull(localDateTime64);
    }

    @Test
    public void test07642() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07642");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) 1);
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period4 = duration3.toPeriod();
        org.joda.time.Duration duration7 = duration3.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Period period8 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime1, (org.joda.time.ReadableDuration) duration7);
        org.joda.time.Period period10 = period8.plusSeconds((int) (byte) 0);
        org.joda.time.MutableDateTime mutableDateTime11 = org.joda.time.MutableDateTime.now();
        mutableDateTime11.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime14 = mutableDateTime11.copy();
        org.joda.time.MutableDateTime.Property property15 = mutableDateTime11.weekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime16 = property15.roundHalfFloor();
        org.joda.time.MutableDateTime mutableDateTime17 = property15.roundHalfCeiling();
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.ReadableInstant readableInstant21 = null;
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.PeriodType periodType23 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod24 = new org.joda.time.MutablePeriod(readableInstant21, readableInstant22, periodType23);
        org.joda.time.DurationFieldType durationFieldType26 = periodType23.getFieldType((int) (short) 0);
        java.lang.String str27 = periodType23.toString();
        org.joda.time.Instant instant28 = new org.joda.time.Instant();
        org.joda.time.Instant instant30 = instant28.withMillis(0L);
        org.joda.time.Chronology chronology31 = instant30.getChronology();
        org.joda.time.Period period32 = new org.joda.time.Period((long) 53, (long) (-1), periodType23, chronology31);
        org.joda.time.DateTimeField dateTimeField33 = dateTimeFieldType18.getField(chronology31);
        java.util.Locale locale34 = java.util.Locale.UK;
        java.lang.String str35 = locale34.getDisplayLanguage();
        int int36 = dateTimeField33.getMaximumTextLength(locale34);
        mutableDateTime17.setRounding(dateTimeField33);
        org.joda.time.Duration duration38 = period8.toDurationFrom((org.joda.time.ReadableInstant) mutableDateTime17);
        org.joda.time.MutableDateTime mutableDateTime39 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property40 = mutableDateTime39.centuryOfEra();
        org.joda.time.MutableDateTime.Property property41 = mutableDateTime39.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime42 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime44 = localDateTime42.withHourOfDay(10);
        org.joda.time.LocalDateTime.Property property45 = localDateTime42.hourOfDay();
        org.joda.time.LocalDateTime localDateTime47 = localDateTime42.plusMillis((int) (byte) 0);
        org.joda.time.PeriodType periodType50 = null;
        org.joda.time.Period period51 = new org.joda.time.Period((long) 100, 1L, periodType50);
        org.joda.time.Period period53 = period51.minusSeconds((-1));
        org.joda.time.LocalDateTime localDateTime54 = localDateTime47.minus((org.joda.time.ReadablePeriod) period51);
        mutableDateTime39.add((org.joda.time.ReadablePeriod) period51, 0);
        org.joda.time.PeriodType periodType57 = period51.getPeriodType();
        org.joda.time.ReadableInstant readableInstant61 = null;
        org.joda.time.ReadableInstant readableInstant62 = null;
        org.joda.time.PeriodType periodType63 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod64 = new org.joda.time.MutablePeriod(readableInstant61, readableInstant62, periodType63);
        org.joda.time.DurationFieldType durationFieldType66 = periodType63.getFieldType((int) (short) 0);
        java.lang.String str67 = periodType63.toString();
        org.joda.time.Instant instant68 = new org.joda.time.Instant();
        org.joda.time.Instant instant70 = instant68.withMillis(0L);
        org.joda.time.Chronology chronology71 = instant70.getChronology();
        org.joda.time.Period period72 = new org.joda.time.Period((long) 53, (long) (-1), periodType63, chronology71);
        org.joda.time.ReadableInstant readableInstant75 = null;
        org.joda.time.ReadableInstant readableInstant76 = null;
        org.joda.time.PeriodType periodType77 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod78 = new org.joda.time.MutablePeriod(readableInstant75, readableInstant76, periodType77);
        org.joda.time.DurationFieldType durationFieldType80 = periodType77.getFieldType((int) (short) 0);
        java.lang.String str81 = periodType77.toString();
        org.joda.time.Instant instant82 = new org.joda.time.Instant();
        org.joda.time.Instant instant84 = instant82.withMillis(0L);
        org.joda.time.Chronology chronology85 = instant84.getChronology();
        org.joda.time.Period period86 = new org.joda.time.Period((long) 53, (long) (-1), periodType77, chronology85);
        org.joda.time.MutablePeriod mutablePeriod87 = new org.joda.time.MutablePeriod((long) (short) 10, periodType63, chronology85);
        org.joda.time.DateTimeField dateTimeField88 = chronology85.weekOfWeekyear();
        org.joda.time.Period period89 = duration38.toPeriod(periodType57, chronology85);
        org.joda.time.Period period90 = period89.negated();
        org.joda.time.Period period92 = period89.minusWeeks(9);
        org.joda.time.Period period94 = period92.plusMinutes(356);
        org.joda.time.Period period96 = period94.plusMonths(82);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Duration duration97 = period96.toStandardDuration();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Cannot convert to Duration as this period contains months and months vary in length");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertNotNull(mutableDateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(mutableDateTime16);
        org.junit.Assert.assertNotNull(mutableDateTime17);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertNotNull(periodType23);
        org.junit.Assert.assertNotNull(durationFieldType26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "PeriodType[YearDayTime]" + "'", str27, "PeriodType[YearDayTime]");
        org.junit.Assert.assertNotNull(instant30);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "en_GB");
// flaky:         org.junit.Assert.assertEquals("'" + str35 + "' != '" + "\u82f1\u6587" + "'", str35, "\u82f1\u6587");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 4 + "'", int36 == 4);
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertNotNull(mutableDateTime39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(period53);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertNotNull(periodType57);
        org.junit.Assert.assertNotNull(periodType63);
        org.junit.Assert.assertNotNull(durationFieldType66);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "PeriodType[YearDayTime]" + "'", str67, "PeriodType[YearDayTime]");
        org.junit.Assert.assertNotNull(instant70);
        org.junit.Assert.assertNotNull(chronology71);
        org.junit.Assert.assertNotNull(periodType77);
        org.junit.Assert.assertNotNull(durationFieldType80);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "PeriodType[YearDayTime]" + "'", str81, "PeriodType[YearDayTime]");
        org.junit.Assert.assertNotNull(instant84);
        org.junit.Assert.assertNotNull(chronology85);
        org.junit.Assert.assertNotNull(dateTimeField88);
        org.junit.Assert.assertNotNull(period89);
        org.junit.Assert.assertNotNull(period90);
        org.junit.Assert.assertNotNull(period92);
        org.junit.Assert.assertNotNull(period94);
        org.junit.Assert.assertNotNull(period96);
    }

    @Test
    public void test07643() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07643");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.add((long) 'a');
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime0.yearOfCentury();
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period6 = duration5.toPeriod();
        org.joda.time.Duration duration8 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration11 = duration8.withDurationAdded((long) (short) 100, (int) ' ');
        org.joda.time.Duration duration12 = duration5.minus((org.joda.time.ReadableDuration) duration11);
        mutableDateTime0.add((org.joda.time.ReadableDuration) duration5);
        org.joda.time.MutableDateTime.Property property14 = mutableDateTime0.centuryOfEra();
        mutableDateTime0.addHours((int) (byte) 10);
        mutableDateTime0.addWeeks(20);
        int int19 = mutableDateTime0.getYearOfCentury();
        org.joda.time.MutableDateTime.Property property20 = mutableDateTime0.dayOfYear();
        mutableDateTime0.add(995819L);
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.DurationFieldType durationFieldType24 = dateTimeFieldType23.getDurationType();
        org.joda.time.Instant instant25 = new org.joda.time.Instant();
        org.joda.time.Instant instant27 = instant25.withMillis(0L);
        org.joda.time.Duration duration29 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period30 = duration29.toPeriod();
        org.joda.time.Duration duration33 = duration29.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Instant instant34 = instant27.plus((org.joda.time.ReadableDuration) duration33);
        long long35 = instant34.getMillis();
        org.joda.time.Chronology chronology36 = instant34.getChronology();
        org.joda.time.DurationField durationField37 = chronology36.months();
        org.joda.time.DateTimeField dateTimeField38 = dateTimeFieldType23.getField(chronology36);
        mutableDateTime0.setChronology(chronology36);
        org.joda.time.LocalDate localDate40 = new org.joda.time.LocalDate();
        int int41 = localDate40.getDayOfMonth();
        org.joda.time.DateTime dateTime42 = localDate40.toDateTimeAtMidnight();
        org.joda.time.LocalDate localDate44 = localDate40.plusYears((int) (byte) 0);
        org.joda.time.LocalDate localDate46 = localDate40.withWeekOfWeekyear(51);
        org.joda.time.Chronology chronology47 = localDate40.getChronology();
        org.joda.time.DateTimeField dateTimeField48 = chronology47.yearOfCentury();
        mutableDateTime0.setRounding(dateTimeField48);
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 22 + "'", int19 == 22);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertNotNull(durationFieldType24);
        org.junit.Assert.assertNotNull(instant27);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertNotNull(instant34);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 86400000L + "'", long35 == 86400000L);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(durationField37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 22 + "'", int41 == 22);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(localDate44);
        org.junit.Assert.assertNotNull(localDate46);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertNotNull(dateTimeField48);
    }

    @Test
    public void test07644() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07644");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.monthOfYear();
        org.joda.time.DateTimeField dateTimeField2 = property1.getField();
        org.joda.time.LocalDate localDate3 = property1.withMaximumValue();
        java.util.Date date4 = localDate3.toDate();
        org.joda.time.LocalDate.Property property5 = localDate3.dayOfMonth();
        org.joda.time.LocalDate localDate7 = localDate3.withEra(0);
        org.joda.time.LocalDate localDate9 = localDate3.withCenturyOfEra(36);
        org.joda.time.Instant instant10 = new org.joda.time.Instant();
        org.joda.time.DateTime dateTime11 = instant10.toDateTime();
        org.joda.time.Instant instant12 = instant10.toInstant();
        org.joda.time.MutableDateTime mutableDateTime13 = instant10.toMutableDateTime();
        org.joda.time.Instant instant14 = new org.joda.time.Instant();
        org.joda.time.DateTime dateTime15 = instant14.toDateTime();
        org.joda.time.Instant instant16 = instant14.toInstant();
        long long17 = instant16.getMillis();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime(chronology18);
        int int20 = dateTime19.getSecondOfMinute();
        boolean boolean21 = dateTime19.isEqualNow();
        int int22 = dateTime19.getDayOfYear();
        org.joda.time.DateTime dateTime24 = dateTime19.plusDays((int) '#');
        boolean boolean25 = instant16.isBefore((org.joda.time.ReadableInstant) dateTime19);
        boolean boolean26 = instant10.isAfter((org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.DateTime dateTime27 = localDate3.toDateTime((org.joda.time.ReadableInstant) instant10);
        org.joda.time.Instant instant28 = new org.joda.time.Instant();
        org.joda.time.Instant instant30 = instant28.withMillis(0L);
        org.joda.time.DateTime dateTime31 = instant30.toDateTime();
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime((long) 1);
        org.joda.time.PeriodType periodType34 = org.joda.time.PeriodType.months();
        org.joda.time.Period period35 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime31, (org.joda.time.ReadableInstant) dateTime33, periodType34);
        org.joda.time.Period period36 = period35.toPeriod();
        org.joda.time.LocalDate localDate37 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property38 = localDate37.monthOfYear();
        org.joda.time.DateTimeField dateTimeField39 = property38.getField();
        org.joda.time.LocalDate localDate40 = property38.roundCeilingCopy();
        org.joda.time.LocalDate localDate42 = localDate40.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDate localDate44 = localDate40.withWeekOfWeekyear(46);
        org.joda.time.LocalDate localDate46 = localDate44.plusWeeks((int) (byte) 10);
        org.joda.time.MutableDateTime mutableDateTime47 = org.joda.time.MutableDateTime.now();
        mutableDateTime47.add((long) 'a');
        org.joda.time.MutableDateTime.Property property50 = mutableDateTime47.yearOfCentury();
        org.joda.time.Duration duration52 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period53 = duration52.toPeriod();
        org.joda.time.Duration duration55 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration58 = duration55.withDurationAdded((long) (short) 100, (int) ' ');
        org.joda.time.Duration duration59 = duration52.minus((org.joda.time.ReadableDuration) duration58);
        mutableDateTime47.add((org.joda.time.ReadableDuration) duration52);
        org.joda.time.MutableDateTime.Property property61 = mutableDateTime47.centuryOfEra();
        mutableDateTime47.addHours((int) (byte) 10);
        int int64 = mutableDateTime47.getSecondOfDay();
        org.joda.time.LocalDate localDate65 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property66 = localDate65.monthOfYear();
        org.joda.time.LocalDate.Property property67 = localDate65.dayOfMonth();
        org.joda.time.ReadableInstant readableInstant68 = null;
        org.joda.time.ReadableInstant readableInstant69 = null;
        org.joda.time.PeriodType periodType70 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod71 = new org.joda.time.MutablePeriod(readableInstant68, readableInstant69, periodType70);
        org.joda.time.DurationFieldType durationFieldType73 = periodType70.getFieldType((int) (short) 0);
        boolean boolean74 = localDate65.isSupported(durationFieldType73);
        mutableDateTime47.add(durationFieldType73, (-292275054));
        org.joda.time.LocalDate localDate78 = localDate44.withFieldAdded(durationFieldType73, 53);
        int int79 = period35.get(durationFieldType73);
        org.joda.time.LocalDate localDate81 = localDate3.withFieldAdded(durationFieldType73, 22);
        org.joda.time.LocalDate.Property property82 = localDate3.weekOfWeekyear();
        java.util.Date date83 = localDate3.toDate();
        org.joda.time.Interval interval84 = localDate3.toInterval();
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(date4);
        org.junit.Assert.assertEquals(date4.toString(), "Thu Dec 22 00:00:00 UTC 2022");
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(instant12);
        org.junit.Assert.assertNotNull(mutableDateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(instant16);
// flaky:         org.junit.Assert.assertTrue("'" + long17 + "' != '" + 1645514629813L + "'", long17 == 1645514629813L);
// flaky:         org.junit.Assert.assertTrue("'" + int20 + "' != '" + 49 + "'", int20 == 49);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 53 + "'", int22 == 53);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(instant30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(periodType34);
        org.junit.Assert.assertNotNull(period36);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(localDate40);
        org.junit.Assert.assertNotNull(localDate42);
        org.junit.Assert.assertNotNull(localDate44);
        org.junit.Assert.assertNotNull(localDate46);
        org.junit.Assert.assertNotNull(mutableDateTime47);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertNotNull(duration52);
        org.junit.Assert.assertNotNull(period53);
        org.junit.Assert.assertNotNull(duration55);
        org.junit.Assert.assertNotNull(duration58);
        org.junit.Assert.assertNotNull(duration59);
        org.junit.Assert.assertNotNull(property61);
// flaky:         org.junit.Assert.assertTrue("'" + int64 + "' != '" + 62629 + "'", int64 == 62629);
        org.junit.Assert.assertNotNull(property66);
        org.junit.Assert.assertNotNull(property67);
        org.junit.Assert.assertNotNull(periodType70);
        org.junit.Assert.assertNotNull(durationFieldType73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(localDate78);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertNotNull(localDate81);
        org.junit.Assert.assertNotNull(property82);
        org.junit.Assert.assertNotNull(date83);
        org.junit.Assert.assertEquals(date83.toString(), "Thu Dec 22 00:00:00 UTC 2022");
        org.junit.Assert.assertNotNull(interval84);
    }

    @Test
    public void test07645() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07645");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        java.lang.Object obj1 = mutableDateTime0.clone();
        mutableDateTime0.setTime((long) 46);
        org.joda.time.MutableDateTime.Property property4 = mutableDateTime0.dayOfWeek();
        int int5 = mutableDateTime0.getMinuteOfDay();
        java.lang.String str6 = mutableDateTime0.toString();
        org.joda.time.MutableDateTime.Property property7 = mutableDateTime0.year();
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property10 = localDate9.monthOfYear();
        org.joda.time.LocalDate.Property property11 = localDate9.dayOfMonth();
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.PeriodType periodType14 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod15 = new org.joda.time.MutablePeriod(readableInstant12, readableInstant13, periodType14);
        mutablePeriod15.setYears((int) '#');
        mutablePeriod15.setSeconds((int) 'a');
        mutablePeriod15.setPeriod((long) 12, 1L);
        org.joda.time.LocalDate localDate23 = localDate9.plus((org.joda.time.ReadablePeriod) mutablePeriod15);
        org.joda.time.LocalDate localDate25 = localDate23.minusWeeks(16);
        org.joda.time.Chronology chronology26 = localDate23.getChronology();
        java.util.Locale locale27 = java.util.Locale.FRENCH;
        java.lang.String str28 = locale27.getDisplayCountry();
        boolean boolean29 = locale27.hasExtensions();
        java.util.Set<java.lang.Character> charSet30 = locale27.getExtensionKeys();
        java.lang.String str31 = locale27.getDisplayVariant();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket34 = new org.joda.time.format.DateTimeParserBucket(86400000L, chronology26, locale27, (java.lang.Integer) 62213, 38170023);
        java.lang.String str35 = property7.getAsShortText(locale27);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str37 = locale27.getUnicodeLocaleType("2022-02-22T07:17:27.134Z");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Ill-formed Unicode locale key: 2022-02-22T07:17:27.134Z");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(obj1);
// flaky:         org.junit.Assert.assertEquals(obj1.toString(), "2022-02-22T07:23:49.892Z");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj1), "2022-02-22T07:23:49.892Z");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj1), "2022-02-22T07:23:49.892Z");
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "2022-02-22T00:00:00.046Z" + "'", str6, "2022-02-22T00:00:00.046Z");
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(periodType14);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(charSet30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "2022" + "'", str35, "2022");
    }

    @Test
    public void test07646() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07646");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(chronology1);
        org.joda.time.DateTime dateTime4 = dateTime2.plusMinutes(15);
        org.joda.time.Chronology chronology5 = dateTime2.getChronology();
        java.lang.String str6 = chronology5.toString();
        org.joda.time.DateTimeField dateTimeField7 = chronology5.dayOfYear();
        org.joda.time.DateTimeField dateTimeField8 = chronology5.era();
        java.lang.Object obj9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(obj9);
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withHourOfDay(10);
        org.joda.time.DateTimeField dateTimeField17 = localDateTime15.getField((int) (byte) 0);
        long long19 = dateTimeField17.roundHalfEven((long) 1);
        int int20 = dateTime10.get(dateTimeField17);
        org.joda.time.LocalDateTime localDateTime21 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime23.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime25.withCenturyOfEra((int) 'a');
        java.util.Locale locale29 = java.util.Locale.GERMAN;
        java.lang.String str30 = locale29.getDisplayName();
        java.lang.String str31 = dateTimeField17.getAsText((org.joda.time.ReadablePartial) localDateTime25, 53, locale29);
        java.lang.String str33 = dateTimeField17.getAsShortText((long) (byte) 100);
        long long35 = dateTimeField17.roundHalfEven((long) '4');
        java.util.Locale locale37 = java.util.Locale.getDefault();
        org.joda.time.LocalDateTime localDateTime38 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime40 = localDateTime38.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime42 = localDateTime40.withHourOfDay(10);
        org.joda.time.DateTimeField dateTimeField44 = localDateTime42.getField((int) (byte) 0);
        java.util.Locale locale46 = java.util.Locale.CANADA;
        java.lang.String str47 = dateTimeField44.getAsShortText((long) '4', locale46);
        java.lang.String str48 = locale46.getVariant();
        java.lang.String str49 = locale37.getDisplayScript(locale46);
        java.lang.String str50 = dateTimeField17.getAsShortText((int) (short) 1, locale37);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket52 = new org.joda.time.format.DateTimeParserBucket((long) 2100, chronology5, locale37, (java.lang.Integer) 26158);
        org.joda.time.DateTimeField dateTimeField53 = chronology5.clockhourOfHalfday();
        long long55 = dateTimeField53.roundCeiling(22097L);
        org.joda.time.LocalDateTime localDateTime56 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime58 = localDateTime56.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime60 = localDateTime58.withHourOfDay(10);
        org.joda.time.LocalDateTime.Property property61 = localDateTime60.dayOfMonth();
        org.joda.time.LocalDateTime.Property property62 = localDateTime60.weekyear();
        org.joda.time.LocalDateTime localDateTime63 = property62.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime64 = property62.roundCeilingCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType65 = org.joda.time.DateTimeFieldType.millisOfSecond();
        java.lang.String str66 = dateTimeFieldType65.getName();
        int int67 = localDateTime64.get(dateTimeFieldType65);
        java.util.Locale.Category category69 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale70 = java.util.Locale.getDefault(category69);
        java.util.Locale locale71 = java.util.Locale.getDefault(category69);
        java.util.Locale.Builder builder72 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder73 = builder72.clear();
        java.util.Locale locale74 = builder73.build();
        java.util.Locale locale75 = builder73.build();
        java.lang.String str76 = locale75.getISO3Country();
        java.util.Locale.setDefault(category69, locale75);
        org.joda.time.MutableDateTime mutableDateTime78 = org.joda.time.MutableDateTime.now();
        mutableDateTime78.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime81 = mutableDateTime78.copy();
        org.joda.time.MutableDateTime.Property property82 = mutableDateTime78.weekOfWeekyear();
        org.joda.time.MutableDateTime.Property property83 = mutableDateTime78.dayOfYear();
        java.util.Locale locale84 = java.util.Locale.KOREA;
        int int85 = property83.getMaximumTextLength(locale84);
        java.util.Set<java.lang.Character> charSet86 = locale84.getExtensionKeys();
        java.lang.String str87 = locale84.getDisplayCountry();
        java.util.Locale.setDefault(category69, locale84);
        java.util.Locale.setDefault(locale84);
        java.lang.String str90 = dateTimeField53.getAsText((org.joda.time.ReadablePartial) localDateTime64, 26380413, locale84);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "ISOChronology[UTC]" + "'", str6, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2022 + "'", int20 == 2022);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "de");
// flaky:         org.junit.Assert.assertEquals("'" + str30 + "' != '" + "\u5fb7\u6587" + "'", str30, "\u5fb7\u6587");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "53" + "'", str31, "53");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "1970" + "'", str33, "1970");
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L);
        org.junit.Assert.assertNotNull(locale37);
// flaky:         org.junit.Assert.assertEquals(locale37.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "1970" + "'", str47, "1970");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "1" + "'", str50, "1");
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 3600000L + "'", long55 == 3600000L);
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertNotNull(localDateTime60);
        org.junit.Assert.assertNotNull(property61);
        org.junit.Assert.assertNotNull(property62);
        org.junit.Assert.assertNotNull(localDateTime63);
        org.junit.Assert.assertNotNull(localDateTime64);
        org.junit.Assert.assertNotNull(dateTimeFieldType65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "millisOfSecond" + "'", str66, "millisOfSecond");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertTrue("'" + category69 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category69.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale70);
// flaky:         org.junit.Assert.assertEquals(locale70.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale71);
// flaky:         org.junit.Assert.assertEquals(locale71.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(locale74);
        org.junit.Assert.assertEquals(locale74.toString(), "");
        org.junit.Assert.assertNotNull(locale75);
        org.junit.Assert.assertEquals(locale75.toString(), "");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "" + "'", str76, "");
        org.junit.Assert.assertNotNull(mutableDateTime78);
        org.junit.Assert.assertNotNull(mutableDateTime81);
        org.junit.Assert.assertNotNull(property82);
        org.junit.Assert.assertNotNull(property83);
        org.junit.Assert.assertNotNull(locale84);
        org.junit.Assert.assertEquals(locale84.toString(), "ko_KR");
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 3 + "'", int85 == 3);
        org.junit.Assert.assertNotNull(charSet86);
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "South Korea" + "'", str87, "South Korea");
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "26380413" + "'", str90, "26380413");
    }

    @Test
    public void test07647() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07647");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) (short) -1);
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardDays((long) (byte) 1);
        java.lang.String str4 = duration3.toString();
        mutableDateTime1.add((org.joda.time.ReadableDuration) duration3, 8);
        mutableDateTime1.setSecondOfMinute((int) (short) 0);
        org.joda.time.MutableDateTime mutableDateTime9 = mutableDateTime1.copy();
        mutableDateTime1.addYears((-292275054));
        mutableDateTime1.addWeekyears((int) (short) 1);
        mutableDateTime1.addWeeks(62308);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "PT86400S" + "'", str4, "PT86400S");
        org.junit.Assert.assertNotNull(mutableDateTime9);
    }

    @Test
    public void test07648() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07648");
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property5 = localDate4.monthOfYear();
        org.joda.time.DateTimeField dateTimeField6 = property5.getField();
        org.joda.time.LocalDate localDate7 = property5.roundCeilingCopy();
        org.joda.time.LocalDate localDate9 = localDate7.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDate localDate11 = localDate7.withWeekOfWeekyear(46);
        org.joda.time.ReadableDuration readableDuration13 = null;
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.Period period15 = new org.joda.time.Period(readableDuration13, readableInstant14);
        org.joda.time.PeriodType periodType18 = null;
        org.joda.time.Period period19 = new org.joda.time.Period((long) 100, 1L, periodType18);
        org.joda.time.Period period21 = period19.minusSeconds((-1));
        java.lang.String str22 = period19.toString();
        org.joda.time.Period period23 = period19.toPeriod();
        org.joda.time.PeriodType periodType24 = period19.getPeriodType();
        org.joda.time.Period period25 = period15.normalizedStandard(periodType24);
        org.joda.time.Instant instant26 = new org.joda.time.Instant();
        org.joda.time.Instant instant28 = instant26.withMillis(0L);
        org.joda.time.Chronology chronology29 = instant28.getChronology();
        org.joda.time.DurationField durationField30 = chronology29.eras();
        long long34 = chronology29.add(0L, (long) 2022, (int) '4');
        org.joda.time.DateTimeField dateTimeField35 = chronology29.secondOfMinute();
        org.joda.time.MutablePeriod mutablePeriod36 = new org.joda.time.MutablePeriod(44L, periodType24, chronology29);
        org.joda.time.LocalDate localDate38 = localDate11.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod36, (int) (byte) 1);
        org.joda.time.Chronology chronology39 = localDate38.getChronology();
        org.joda.time.Period period40 = new org.joda.time.Period(0L, chronology39);
        org.joda.time.MutableDateTime mutableDateTime41 = org.joda.time.MutableDateTime.now();
        mutableDateTime41.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime44 = mutableDateTime41.copy();
        mutableDateTime41.setDate((long) '#');
        org.joda.time.LocalDate localDate47 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property48 = localDate47.monthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType49 = org.joda.time.DateTimeFieldType.minuteOfDay();
        boolean boolean50 = localDate47.isSupported(dateTimeFieldType49);
        int int51 = localDate47.getDayOfYear();
        org.joda.time.DateTimeZone dateTimeZone52 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateMidnight dateMidnight53 = localDate47.toDateMidnight(dateTimeZone52);
        org.joda.time.DateTime dateTime54 = mutableDateTime41.toDateTime(dateTimeZone52);
        org.joda.time.DateTime dateTime55 = new org.joda.time.DateTime(dateTimeZone52);
        org.joda.time.LocalDate localDate56 = org.joda.time.LocalDate.now(dateTimeZone52);
        org.joda.time.MutableDateTime mutableDateTime57 = org.joda.time.MutableDateTime.now();
        mutableDateTime57.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime60 = mutableDateTime57.copy();
        org.joda.time.MutableDateTime.Property property61 = mutableDateTime57.weekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime62 = property61.roundHalfFloor();
        org.joda.time.MutableDateTime mutableDateTime63 = property61.roundHalfCeiling();
        org.joda.time.MutableDateTime mutableDateTime65 = property61.set(1);
        org.joda.time.Chronology chronology66 = null;
        org.joda.time.DateTime dateTime67 = new org.joda.time.DateTime(chronology66);
        int int68 = dateTime67.getYearOfCentury();
        int int69 = dateTime67.getWeekyear();
        org.joda.time.DateTime dateTime70 = dateTime67.withEarlierOffsetAtOverlap();
        java.lang.String str71 = dateTime70.toString();
        org.joda.time.MutableDateTime mutableDateTime72 = dateTime70.toMutableDateTime();
        org.joda.time.DateTimeZone dateTimeZone73 = org.joda.time.DateTimeZone.UTC;
        boolean boolean74 = dateTimeZone73.isFixed();
        mutableDateTime72.setZoneRetainFields(dateTimeZone73);
        org.joda.time.MutableDateTime mutableDateTime76 = mutableDateTime65.toMutableDateTime(dateTimeZone73);
        org.joda.time.Interval interval77 = localDate56.toInterval(dateTimeZone73);
        org.joda.time.LocalDate.Property property78 = localDate56.monthOfYear();
        org.joda.time.LocalDate localDate79 = property78.roundCeilingCopy();
        org.joda.time.LocalDate localDate81 = property78.addToCopy(26275);
        long long83 = chronology39.set((org.joda.time.ReadablePartial) localDate81, (long) 41);
        org.joda.time.LocalDate localDate84 = new org.joda.time.LocalDate(26224942L, chronology39);
        org.joda.time.MutablePeriod mutablePeriod85 = new org.joda.time.MutablePeriod((long) 26577011, 1061982L, chronology39);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "PT0.099S" + "'", str22, "PT0.099S");
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertNotNull(periodType24);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(instant28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 105144L + "'", long34 == 105144L);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(localDate38);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(mutableDateTime41);
        org.junit.Assert.assertNotNull(mutableDateTime44);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(dateTimeFieldType49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 53 + "'", int51 == 53);
        org.junit.Assert.assertNotNull(dateTimeZone52);
        org.junit.Assert.assertNotNull(dateMidnight53);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(localDate56);
        org.junit.Assert.assertNotNull(mutableDateTime57);
        org.junit.Assert.assertNotNull(mutableDateTime60);
        org.junit.Assert.assertNotNull(property61);
        org.junit.Assert.assertNotNull(mutableDateTime62);
        org.junit.Assert.assertNotNull(mutableDateTime63);
        org.junit.Assert.assertNotNull(mutableDateTime65);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 22 + "'", int68 == 22);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 2022 + "'", int69 == 2022);
        org.junit.Assert.assertNotNull(dateTime70);
// flaky:         org.junit.Assert.assertEquals("'" + str71 + "' != '" + "2022-02-22T07:23:50.001Z" + "'", str71, "2022-02-22T07:23:50.001Z");
        org.junit.Assert.assertNotNull(mutableDateTime72);
        org.junit.Assert.assertNotNull(dateTimeZone73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(mutableDateTime76);
        org.junit.Assert.assertNotNull(interval77);
        org.junit.Assert.assertNotNull(property78);
        org.junit.Assert.assertNotNull(localDate79);
        org.junit.Assert.assertNotNull(localDate81);
        org.junit.Assert.assertTrue("'" + long83 + "' != '" + 70741900800041L + "'", long83 == 70741900800041L);
    }

    @Test
    public void test07649() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07649");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.withCenturyOfEra((int) 'a');
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(chronology7);
        org.joda.time.DateTime dateTime10 = dateTime8.plusMinutes(15);
        org.joda.time.DateTime dateTime11 = localDateTime4.toDateTime((org.joda.time.ReadableInstant) dateTime8);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime13 = localDateTime4.toDateTime(dateTimeZone12);
        java.lang.String str14 = dateTimeZone12.toString();
        org.joda.time.MutableDateTime mutableDateTime15 = org.joda.time.MutableDateTime.now(dateTimeZone12);
        org.joda.time.Duration duration17 = org.joda.time.Duration.standardSeconds((long) 22);
        long long18 = duration17.getStandardMinutes();
        org.joda.time.ReadableInstant readableInstant21 = null;
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.PeriodType periodType23 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod24 = new org.joda.time.MutablePeriod(readableInstant21, readableInstant22, periodType23);
        org.joda.time.DurationFieldType durationFieldType26 = periodType23.getFieldType((int) (short) 0);
        java.lang.String str27 = periodType23.toString();
        org.joda.time.Instant instant28 = new org.joda.time.Instant();
        org.joda.time.Instant instant30 = instant28.withMillis(0L);
        org.joda.time.Chronology chronology31 = instant30.getChronology();
        org.joda.time.Period period32 = new org.joda.time.Period((long) 53, (long) (-1), periodType23, chronology31);
        org.joda.time.MutablePeriod mutablePeriod33 = new org.joda.time.MutablePeriod(periodType23);
        org.joda.time.MutableDateTime mutableDateTime34 = org.joda.time.MutableDateTime.now();
        mutableDateTime34.add((long) 'a');
        org.joda.time.MutableDateTime.Property property37 = mutableDateTime34.yearOfCentury();
        org.joda.time.Duration duration39 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period40 = duration39.toPeriod();
        org.joda.time.Duration duration42 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration45 = duration42.withDurationAdded((long) (short) 100, (int) ' ');
        org.joda.time.Duration duration46 = duration39.minus((org.joda.time.ReadableDuration) duration45);
        mutableDateTime34.add((org.joda.time.ReadableDuration) duration39);
        org.joda.time.MutableDateTime.Property property48 = mutableDateTime34.centuryOfEra();
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.DateTime dateTime50 = new org.joda.time.DateTime(chronology49);
        int int51 = dateTime50.getYearOfCentury();
        org.joda.time.DateTime dateTime53 = dateTime50.withSecondOfMinute(53);
        org.joda.time.Duration duration55 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period56 = duration55.toPeriod();
        org.joda.time.Duration duration58 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration61 = duration58.withDurationAdded((long) (short) 100, (int) ' ');
        org.joda.time.Duration duration62 = duration55.minus((org.joda.time.ReadableDuration) duration61);
        org.joda.time.ReadableInstant readableInstant63 = null;
        org.joda.time.ReadableInstant readableInstant64 = null;
        org.joda.time.PeriodType periodType65 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod66 = new org.joda.time.MutablePeriod(readableInstant63, readableInstant64, periodType65);
        org.joda.time.DurationFieldType durationFieldType68 = periodType65.getFieldType((int) (short) 0);
        java.lang.String str69 = periodType65.toString();
        org.joda.time.Period period70 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime50, (org.joda.time.ReadableDuration) duration55, periodType65);
        mutableDateTime34.add((org.joda.time.ReadableDuration) duration55);
        mutableDateTime34.addWeekyears(21);
        org.joda.time.MutableDateTime.Property property74 = mutableDateTime34.weekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime76 = property74.set(44);
        org.joda.time.MutableDateTime mutableDateTime78 = property74.addWrapField(1969);
        mutableDateTime78.addYears(26192);
        org.joda.time.Chronology chronology81 = mutableDateTime78.getChronology();
        org.joda.time.Period period82 = duration17.toPeriod(periodType23, chronology81);
        mutableDateTime15.setChronology(chronology81);
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "UTC" + "'", str14, "UTC");
        org.junit.Assert.assertNotNull(mutableDateTime15);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertNotNull(periodType23);
        org.junit.Assert.assertNotNull(durationFieldType26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "PeriodType[YearDayTime]" + "'", str27, "PeriodType[YearDayTime]");
        org.junit.Assert.assertNotNull(instant30);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(mutableDateTime34);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(duration39);
        org.junit.Assert.assertNotNull(period40);
        org.junit.Assert.assertNotNull(duration42);
        org.junit.Assert.assertNotNull(duration45);
        org.junit.Assert.assertNotNull(duration46);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 22 + "'", int51 == 22);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(duration55);
        org.junit.Assert.assertNotNull(period56);
        org.junit.Assert.assertNotNull(duration58);
        org.junit.Assert.assertNotNull(duration61);
        org.junit.Assert.assertNotNull(duration62);
        org.junit.Assert.assertNotNull(periodType65);
        org.junit.Assert.assertNotNull(durationFieldType68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "PeriodType[YearDayTime]" + "'", str69, "PeriodType[YearDayTime]");
        org.junit.Assert.assertNotNull(property74);
        org.junit.Assert.assertNotNull(mutableDateTime76);
        org.junit.Assert.assertNotNull(mutableDateTime78);
        org.junit.Assert.assertNotNull(chronology81);
        org.junit.Assert.assertNotNull(period82);
    }

    @Test
    public void test07650() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07650");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) (short) -1);
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardDays((long) (byte) 1);
        java.lang.String str4 = duration3.toString();
        mutableDateTime1.add((org.joda.time.ReadableDuration) duration3, 8);
        mutableDateTime1.addMinutes(1424);
        mutableDateTime1.setSecondOfDay(24);
        org.joda.time.ReadableDuration readableDuration21 = null;
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.Period period23 = new org.joda.time.Period(readableDuration21, readableInstant22);
        org.joda.time.PeriodType periodType26 = null;
        org.joda.time.Period period27 = new org.joda.time.Period((long) 100, 1L, periodType26);
        org.joda.time.Period period29 = period27.minusSeconds((-1));
        java.lang.String str30 = period27.toString();
        org.joda.time.Period period31 = period27.toPeriod();
        org.joda.time.PeriodType periodType32 = period27.getPeriodType();
        org.joda.time.Period period33 = period23.normalizedStandard(periodType32);
        java.lang.String str34 = periodType32.getName();
        java.lang.String str35 = periodType32.toString();
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime(chronology37);
        org.joda.time.DateTime dateTime40 = dateTime38.plusMinutes(15);
        org.joda.time.Chronology chronology41 = dateTime38.getChronology();
        java.lang.String str42 = chronology41.toString();
        org.joda.time.DateTimeFieldType dateTimeFieldType43 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.ReadableInstant readableInstant46 = null;
        org.joda.time.ReadableInstant readableInstant47 = null;
        org.joda.time.PeriodType periodType48 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod49 = new org.joda.time.MutablePeriod(readableInstant46, readableInstant47, periodType48);
        org.joda.time.DurationFieldType durationFieldType51 = periodType48.getFieldType((int) (short) 0);
        java.lang.String str52 = periodType48.toString();
        org.joda.time.Instant instant53 = new org.joda.time.Instant();
        org.joda.time.Instant instant55 = instant53.withMillis(0L);
        org.joda.time.Chronology chronology56 = instant55.getChronology();
        org.joda.time.Period period57 = new org.joda.time.Period((long) 53, (long) (-1), periodType48, chronology56);
        org.joda.time.DateTimeField dateTimeField58 = dateTimeFieldType43.getField(chronology56);
        java.util.Locale locale59 = java.util.Locale.UK;
        java.lang.String str60 = locale59.getDisplayLanguage();
        int int61 = dateTimeField58.getMaximumTextLength(locale59);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket62 = new org.joda.time.format.DateTimeParserBucket(3155695200000L, chronology41, locale59);
        org.joda.time.LocalDate localDate63 = new org.joda.time.LocalDate(chronology41);
        org.joda.time.MutablePeriod mutablePeriod64 = new org.joda.time.MutablePeriod((long) 52, 946312L, periodType32, chronology41);
        org.joda.time.MutablePeriod mutablePeriod65 = new org.joda.time.MutablePeriod(57, (int) '4', (-99), (int) ' ', 57, 44, (int) (short) 0, (int) (short) -1, periodType32);
        org.joda.time.MutableDateTime mutableDateTime66 = org.joda.time.MutableDateTime.now();
        mutableDateTime66.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime69 = mutableDateTime66.copy();
        org.joda.time.MutableDateTime.Property property70 = mutableDateTime66.yearOfEra();
        org.joda.time.MutableDateTime mutableDateTime71 = property70.getMutableDateTime();
        org.joda.time.Chronology chronology72 = null;
        org.joda.time.DateTime dateTime73 = new org.joda.time.DateTime(chronology72);
        org.joda.time.DateTime dateTime75 = dateTime73.plusMinutes(15);
        mutablePeriod65.setPeriod((org.joda.time.ReadableInstant) mutableDateTime71, (org.joda.time.ReadableInstant) dateTime73);
        mutableDateTime1.add((org.joda.time.ReadablePeriod) mutablePeriod65);
        int int78 = mutablePeriod65.getYears();
        mutablePeriod65.setMillis(26228);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "PT86400S" + "'", str4, "PT86400S");
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "PT0.099S" + "'", str30, "PT0.099S");
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertNotNull(periodType32);
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "Standard" + "'", str34, "Standard");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "PeriodType[Standard]" + "'", str35, "PeriodType[Standard]");
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "ISOChronology[UTC]" + "'", str42, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeFieldType43);
        org.junit.Assert.assertNotNull(periodType48);
        org.junit.Assert.assertNotNull(durationFieldType51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "PeriodType[YearDayTime]" + "'", str52, "PeriodType[YearDayTime]");
        org.junit.Assert.assertNotNull(instant55);
        org.junit.Assert.assertNotNull(chronology56);
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "\uc601\uc5b4" + "'", str60, "\uc601\uc5b4");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 4 + "'", int61 == 4);
        org.junit.Assert.assertNotNull(mutableDateTime66);
        org.junit.Assert.assertNotNull(mutableDateTime69);
        org.junit.Assert.assertNotNull(property70);
        org.junit.Assert.assertNotNull(mutableDateTime71);
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
    }

    @Test
    public void test07651() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07651");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property1 = mutableDateTime0.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime2 = property1.roundHalfEven();
        org.joda.time.MutableDateTime mutableDateTime3 = org.joda.time.MutableDateTime.now();
        mutableDateTime3.add((long) 'a');
        org.joda.time.MutableDateTime.Property property6 = mutableDateTime3.yearOfCentury();
        mutableDateTime3.addSeconds(0);
        org.joda.time.Duration duration10 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Hours hours11 = duration10.toStandardHours();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime(chronology12);
        int int14 = dateTime13.getSecondOfMinute();
        org.joda.time.MutablePeriod mutablePeriod15 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration10, (org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((long) 1);
        org.joda.time.Instant instant18 = new org.joda.time.Instant();
        org.joda.time.Instant instant20 = instant18.withMillis(0L);
        org.joda.time.DateTime dateTime21 = instant20.toDateTime();
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime((long) 1);
        org.joda.time.PeriodType periodType24 = org.joda.time.PeriodType.months();
        org.joda.time.Period period25 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime21, (org.joda.time.ReadableInstant) dateTime23, periodType24);
        org.joda.time.Period period26 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration10, (org.joda.time.ReadableInstant) dateTime17, periodType24);
        org.joda.time.Duration duration27 = new org.joda.time.Duration((org.joda.time.ReadableInstant) mutableDateTime3, (org.joda.time.ReadableInstant) dateTime17);
        int int28 = property1.getDifference((org.joda.time.ReadableInstant) mutableDateTime3);
        mutableDateTime3.addSeconds(245);
        mutableDateTime3.add((long) 37112100);
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(mutableDateTime2);
        org.junit.Assert.assertNotNull(mutableDateTime3);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(hours11);
// flaky:         org.junit.Assert.assertTrue("'" + int14 + "' != '" + 50 + "'", int14 == 50);
        org.junit.Assert.assertNotNull(instant20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(periodType24);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
    }

    @Test
    public void test07652() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07652");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardDays((long) (byte) 1);
        java.lang.String str4 = duration3.toString();
        boolean boolean5 = duration1.isShorterThan((org.joda.time.ReadableDuration) duration3);
        org.joda.time.Duration duration7 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period8 = duration7.toPeriod();
        org.joda.time.Duration duration11 = duration7.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Duration duration13 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration16 = duration13.withDurationAdded((long) (short) 100, (int) ' ');
        boolean boolean17 = duration11.isLongerThan((org.joda.time.ReadableDuration) duration13);
        boolean boolean18 = duration3.isEqual((org.joda.time.ReadableDuration) duration13);
        org.joda.time.Duration duration20 = org.joda.time.Duration.standardDays((-9571L));
        org.joda.time.Duration duration22 = org.joda.time.Duration.standardMinutes(1L);
        org.joda.time.Period period23 = duration22.toPeriod();
        org.joda.time.Duration duration24 = duration20.minus((org.joda.time.ReadableDuration) duration22);
        org.joda.time.Duration duration25 = duration3.minus((org.joda.time.ReadableDuration) duration20);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.LocalTime localTime27 = new org.joda.time.LocalTime(dateTimeZone26);
        org.joda.time.LocalTime localTime29 = localTime27.minusHours((int) (byte) 100);
        int int30 = localTime29.getMinuteOfHour();
        java.lang.String str32 = localTime29.toString("1");
        org.joda.time.LocalTime localTime34 = localTime29.minusMinutes(15);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime(chronology35);
        int int37 = dateTime36.getYearOfCentury();
        int int38 = dateTime36.getWeekyear();
        org.joda.time.DateTime dateTime40 = dateTime36.plus((long) 15);
        org.joda.time.DateTime.Property property41 = dateTime36.year();
        org.joda.time.DateTime dateTime42 = property41.roundHalfFloorCopy();
        org.joda.time.DateTime.Property property43 = dateTime42.millisOfSecond();
        org.joda.time.MutableDateTime mutableDateTime44 = dateTime42.toMutableDateTime();
        org.joda.time.LocalTime localTime45 = dateTime42.toLocalTime();
        org.joda.time.LocalTime localTime46 = localTime29.withFields((org.joda.time.ReadablePartial) localTime45);
        boolean boolean47 = duration3.equals((java.lang.Object) localTime46);
        org.joda.time.LocalTime localTime49 = localTime46.withHourOfDay((int) (byte) 10);
        org.joda.time.Instant instant50 = new org.joda.time.Instant();
        org.joda.time.Instant instant52 = instant50.withMillis(0L);
        org.joda.time.DateTime dateTime53 = instant52.toDateTime();
        org.joda.time.DateTime dateTime55 = new org.joda.time.DateTime((long) 1);
        org.joda.time.PeriodType periodType56 = org.joda.time.PeriodType.months();
        org.joda.time.Period period57 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime53, (org.joda.time.ReadableInstant) dateTime55, periodType56);
        org.joda.time.DateTime.Property property58 = dateTime55.minuteOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType59 = property58.getFieldType();
        org.joda.time.LocalTime.Property property60 = localTime49.property(dateTimeFieldType59);
        org.joda.time.LocalTime localTime62 = property60.setCopy(18);
        org.joda.time.LocalTime localTime64 = localTime62.withMinuteOfHour(0);
        org.joda.time.ReadableDuration readableDuration67 = null;
        org.joda.time.ReadableInstant readableInstant68 = null;
        org.joda.time.Period period69 = new org.joda.time.Period(readableDuration67, readableInstant68);
        org.joda.time.PeriodType periodType72 = null;
        org.joda.time.Period period73 = new org.joda.time.Period((long) 100, 1L, periodType72);
        org.joda.time.Period period75 = period73.minusSeconds((-1));
        java.lang.String str76 = period73.toString();
        org.joda.time.Period period77 = period73.toPeriod();
        org.joda.time.PeriodType periodType78 = period73.getPeriodType();
        org.joda.time.Period period79 = period69.normalizedStandard(periodType78);
        org.joda.time.DurationFieldType durationFieldType80 = null;
        int int81 = periodType78.indexOf(durationFieldType80);
        org.joda.time.Instant instant82 = new org.joda.time.Instant();
        org.joda.time.Instant instant84 = instant82.withMillis(0L);
        org.joda.time.Chronology chronology85 = instant84.getChronology();
        org.joda.time.DurationField durationField86 = chronology85.eras();
        org.joda.time.LocalTime localTime87 = org.joda.time.LocalTime.now(chronology85);
        org.joda.time.DurationField durationField88 = chronology85.eras();
        org.joda.time.DateTimeField dateTimeField89 = chronology85.hourOfDay();
        org.joda.time.MutablePeriod mutablePeriod90 = new org.joda.time.MutablePeriod((long) 12, (long) 292278993, periodType78, chronology85);
        mutablePeriod90.setHours(26252175);
        org.joda.time.LocalTime localTime93 = localTime62.minus((org.joda.time.ReadablePeriod) mutablePeriod90);
        org.joda.time.LocalTime localTime95 = localTime62.plusMinutes(0);
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "PT86400S" + "'", str4, "PT86400S");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertNotNull(localTime29);
// flaky:         org.junit.Assert.assertTrue("'" + int30 + "' != '" + 23 + "'", int30 == 23);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "1" + "'", str32, "1");
        org.junit.Assert.assertNotNull(localTime34);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 22 + "'", int37 == 22);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 2022 + "'", int38 == 2022);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(mutableDateTime44);
        org.junit.Assert.assertNotNull(localTime45);
        org.junit.Assert.assertNotNull(localTime46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(localTime49);
        org.junit.Assert.assertNotNull(instant52);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(periodType56);
        org.junit.Assert.assertNotNull(property58);
        org.junit.Assert.assertNotNull(dateTimeFieldType59);
        org.junit.Assert.assertNotNull(property60);
        org.junit.Assert.assertNotNull(localTime62);
        org.junit.Assert.assertNotNull(localTime64);
        org.junit.Assert.assertNotNull(period75);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "PT0.099S" + "'", str76, "PT0.099S");
        org.junit.Assert.assertNotNull(period77);
        org.junit.Assert.assertNotNull(periodType78);
        org.junit.Assert.assertNotNull(period79);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + (-1) + "'", int81 == (-1));
        org.junit.Assert.assertNotNull(instant84);
        org.junit.Assert.assertNotNull(chronology85);
        org.junit.Assert.assertNotNull(durationField86);
        org.junit.Assert.assertNotNull(localTime87);
        org.junit.Assert.assertNotNull(durationField88);
        org.junit.Assert.assertNotNull(dateTimeField89);
        org.junit.Assert.assertNotNull(localTime93);
        org.junit.Assert.assertNotNull(localTime95);
    }

    @Test
    public void test07653() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07653");
        org.joda.time.PeriodType periodType2 = null;
        org.joda.time.Period period3 = new org.joda.time.Period((long) 100, 1L, periodType2);
        org.joda.time.Period period5 = period3.minusSeconds((-1));
        org.joda.time.Period period7 = period3.withWeeks((int) (byte) 0);
        org.joda.time.Period period9 = period7.withHours(2000);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.UTC;
        java.util.Locale locale13 = java.util.Locale.GERMAN;
        java.lang.String str14 = locale13.getDisplayName();
        java.lang.String str15 = dateTimeZone11.getName(100L, locale13);
        org.joda.time.MutableDateTime mutableDateTime16 = new org.joda.time.MutableDateTime(948227L, dateTimeZone11);
        org.joda.time.MutableDateTime.Property property17 = mutableDateTime16.year();
        org.joda.time.ReadableInstant readableInstant18 = null;
        mutableDateTime16.setMillis(readableInstant18);
        mutableDateTime16.addYears(36985848);
        org.joda.time.MutableDateTime.Property property22 = mutableDateTime16.era();
        mutableDateTime16.addMonths(26);
        org.joda.time.MutablePeriod mutablePeriod29 = new org.joda.time.MutablePeriod(999, (int) (short) -1, 0, (int) (short) -1);
        org.joda.time.Instant instant31 = new org.joda.time.Instant();
        org.joda.time.Instant instant33 = instant31.withMillis(0L);
        org.joda.time.Chronology chronology34 = instant33.getChronology();
        org.joda.time.DurationField durationField35 = chronology34.eras();
        org.joda.time.LocalTime localTime36 = org.joda.time.LocalTime.now(chronology34);
        org.joda.time.DurationField durationField37 = chronology34.eras();
        mutablePeriod29.setPeriod((long) 999, chronology34);
        org.joda.time.MutablePeriod mutablePeriod43 = new org.joda.time.MutablePeriod((int) (byte) -1, (int) (byte) 1, 44, (int) ' ');
        mutablePeriod43.addDays((int) (byte) 10);
        mutablePeriod43.addMillis((int) '4');
        mutablePeriod43.setSeconds((int) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone50 = null;
        org.joda.time.LocalTime localTime51 = new org.joda.time.LocalTime(dateTimeZone50);
        org.joda.time.ReadablePeriod readablePeriod52 = null;
        org.joda.time.LocalTime localTime53 = localTime51.plus(readablePeriod52);
        org.joda.time.ReadableInstant readableInstant54 = null;
        org.joda.time.ReadableInstant readableInstant55 = null;
        org.joda.time.PeriodType periodType56 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod57 = new org.joda.time.MutablePeriod(readableInstant54, readableInstant55, periodType56);
        org.joda.time.DurationFieldType durationFieldType59 = periodType56.getFieldType((int) (short) 0);
        boolean boolean60 = localTime51.isSupported(durationFieldType59);
        mutablePeriod43.add(durationFieldType59, 8);
        boolean boolean63 = mutablePeriod29.isSupported(durationFieldType59);
        org.joda.time.DateTimeFieldType dateTimeFieldType64 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.DurationFieldType durationFieldType65 = dateTimeFieldType64.getDurationType();
        int int66 = mutablePeriod29.get(durationFieldType65);
        mutableDateTime16.add(durationFieldType65, 2227);
        int int69 = period7.get(durationFieldType65);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "de");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "\ub3c5\uc77c\uc5b4" + "'", str14, "\ub3c5\uc77c\uc5b4");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "+00:00" + "'", str15, "+00:00");
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(instant33);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(durationField35);
        org.junit.Assert.assertNotNull(localTime36);
        org.junit.Assert.assertNotNull(durationField37);
        org.junit.Assert.assertNotNull(localTime53);
        org.junit.Assert.assertNotNull(periodType56);
        org.junit.Assert.assertNotNull(durationFieldType59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldType64);
        org.junit.Assert.assertNotNull(durationFieldType65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
    }

    @Test
    public void test07654() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07654");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property1 = mutableDateTime0.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime3 = property1.set(45);
        org.joda.time.MutableDateTime mutableDateTime4 = property1.roundFloor();
        org.joda.time.MutableDateTime.Property property5 = mutableDateTime4.hourOfDay();
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(mutableDateTime3);
        org.junit.Assert.assertNotNull(mutableDateTime4);
        org.junit.Assert.assertNotNull(property5);
    }

    @Test
    public void test07655() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07655");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.dayOfMonth();
        org.joda.time.LocalTime localTime2 = org.joda.time.LocalTime.fromMillisOfDay((long) (byte) 1);
        org.joda.time.Chronology chronology3 = localTime2.getChronology();
        boolean boolean4 = dateTimeFieldType0.isSupported(chronology3);
        org.joda.time.DurationField durationField5 = chronology3.weekyears();
        org.joda.time.MutableDateTime mutableDateTime6 = new org.joda.time.MutableDateTime(chronology3);
        int int7 = mutableDateTime6.getSecondOfMinute();
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime6.setSecondOfMinute(26573);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26573 for secondOfMinute must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(localTime2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(durationField5);
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 50 + "'", int7 == 50);
    }

    @Test
    public void test07656() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07656");
        java.lang.Object obj0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.UTC;
        java.util.Locale locale3 = java.util.Locale.GERMAN;
        java.lang.String str4 = locale3.getDisplayName();
        java.lang.String str5 = dateTimeZone1.getName(100L, locale3);
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime(obj0, dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime7 = org.joda.time.LocalDateTime.now(dateTimeZone1);
        org.joda.time.MutableDateTime mutableDateTime8 = org.joda.time.MutableDateTime.now();
        mutableDateTime8.add((long) 'a');
        org.joda.time.Duration duration12 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration14 = org.joda.time.Duration.standardDays((long) (byte) 1);
        java.lang.String str15 = duration14.toString();
        boolean boolean16 = duration12.isShorterThan((org.joda.time.ReadableDuration) duration14);
        org.joda.time.Hours hours17 = duration12.toStandardHours();
        mutableDateTime8.add((org.joda.time.ReadableDuration) duration12, 20);
        mutableDateTime8.setMillisOfDay(36946953);
        org.joda.time.DateTimeField dateTimeField22 = mutableDateTime8.getRoundingField();
        org.joda.time.Duration duration24 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period25 = duration24.toPeriod();
        org.joda.time.Duration duration28 = duration24.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Duration duration30 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration33 = duration30.withDurationAdded((long) (short) 100, (int) ' ');
        boolean boolean34 = duration28.isLongerThan((org.joda.time.ReadableDuration) duration30);
        org.joda.time.Period period35 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime8, (org.joda.time.ReadableDuration) duration30);
        org.joda.time.LocalDateTime localDateTime36 = localDateTime7.plus((org.joda.time.ReadableDuration) duration30);
        org.joda.time.LocalDateTime.Property property37 = localDateTime7.weekOfWeekyear();
        org.joda.time.Duration duration39 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period40 = duration39.toPeriod();
        org.joda.time.Period period42 = period40.minusYears((-1));
        org.joda.time.Period period44 = period40.withMillis(100);
        org.joda.time.LocalDateTime localDateTime45 = localDateTime7.minus((org.joda.time.ReadablePeriod) period44);
        org.joda.time.Period period47 = period44.plusWeeks(4448);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Seconds seconds48 = period47.toStandardSeconds();
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Value cannot fit in an int: 2690236800");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "de");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\ub3c5\uc77c\uc5b4" + "'", str4, "\ub3c5\uc77c\uc5b4");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "+00:00" + "'", str5, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(mutableDateTime8);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "PT86400S" + "'", str15, "PT86400S");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(hours17);
        org.junit.Assert.assertNull(dateTimeField22);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(duration39);
        org.junit.Assert.assertNotNull(period40);
        org.junit.Assert.assertNotNull(period42);
        org.junit.Assert.assertNotNull(period44);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(period47);
    }

    @Test
    public void test07657() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07657");
        org.joda.time.LocalDateTime localDateTime7 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.withCenturyOfEra((int) 'a');
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime(chronology14);
        org.joda.time.DateTime dateTime17 = dateTime15.plusMinutes(15);
        org.joda.time.DateTime dateTime18 = localDateTime11.toDateTime((org.joda.time.ReadableInstant) dateTime15);
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime20 = localDateTime11.toDateTime(dateTimeZone19);
        java.lang.String str21 = dateTimeZone19.toString();
        org.joda.time.MutableDateTime mutableDateTime22 = org.joda.time.MutableDateTime.now(dateTimeZone19);
        org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime(dateTimeZone19);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime24 = new org.joda.time.MutableDateTime(36981644, 0, 26383, 26209742, 38219999, 26354073, 643, dateTimeZone19);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26209742 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "UTC" + "'", str21, "UTC");
        org.junit.Assert.assertNotNull(mutableDateTime22);
    }

    @Test
    public void test07658() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07658");
        java.lang.Object obj0 = null;
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(chronology1);
        int int3 = dateTime2.getYearOfCentury();
        int int4 = dateTime2.getWeekyear();
        org.joda.time.DateTime dateTime5 = dateTime2.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime.Property property6 = dateTime2.yearOfEra();
        org.joda.time.DateTime dateTime7 = property6.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime8 = property6.roundHalfEvenCopy();
        org.joda.time.Duration duration10 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Hours hours11 = duration10.toStandardHours();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime(chronology12);
        int int14 = dateTime13.getSecondOfMinute();
        org.joda.time.MutablePeriod mutablePeriod15 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration10, (org.joda.time.ReadableInstant) dateTime13);
        mutablePeriod15.addSeconds(292278993);
        mutablePeriod15.setPeriod((long) 45, 946312L);
        org.joda.time.DateTime dateTime21 = dateTime8.minus((org.joda.time.ReadablePeriod) mutablePeriod15);
        org.joda.time.DateTime dateTime24 = dateTime8.withDurationAdded((long) 1969, (int) (short) -1);
        org.joda.time.MutableDateTime mutableDateTime25 = org.joda.time.MutableDateTime.now();
        mutableDateTime25.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime28 = mutableDateTime25.copy();
        org.joda.time.MutableDateTime.Property property29 = mutableDateTime25.weekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime30 = property29.roundHalfFloor();
        org.joda.time.MutableDateTime mutableDateTime32 = property29.add((long) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.UTC;
        java.util.TimeZone timeZone34 = dateTimeZone33.toTimeZone();
        org.joda.time.MutableDateTime mutableDateTime35 = mutableDateTime32.toMutableDateTime(dateTimeZone33);
        mutableDateTime35.add(51L);
        int int38 = mutableDateTime35.getHourOfDay();
        boolean boolean39 = dateTime24.isAfter((org.joda.time.ReadableInstant) mutableDateTime35);
        org.joda.time.DateTimeZone dateTimeZone40 = mutableDateTime35.getZone();
        org.joda.time.MutableDateTime.Property property41 = mutableDateTime35.dayOfMonth();
        org.joda.time.DateTimeFieldType dateTimeFieldType44 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.ReadableInstant readableInstant47 = null;
        org.joda.time.ReadableInstant readableInstant48 = null;
        org.joda.time.PeriodType periodType49 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod50 = new org.joda.time.MutablePeriod(readableInstant47, readableInstant48, periodType49);
        org.joda.time.DurationFieldType durationFieldType52 = periodType49.getFieldType((int) (short) 0);
        java.lang.String str53 = periodType49.toString();
        org.joda.time.Instant instant54 = new org.joda.time.Instant();
        org.joda.time.Instant instant56 = instant54.withMillis(0L);
        org.joda.time.Chronology chronology57 = instant56.getChronology();
        org.joda.time.Period period58 = new org.joda.time.Period((long) 53, (long) (-1), periodType49, chronology57);
        org.joda.time.DateTimeField dateTimeField59 = dateTimeFieldType44.getField(chronology57);
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.DateTime dateTime61 = new org.joda.time.DateTime(chronology60);
        org.joda.time.DateTime dateTime63 = dateTime61.plusMinutes(15);
        org.joda.time.Chronology chronology64 = dateTime61.getChronology();
        java.lang.String str65 = chronology64.toString();
        org.joda.time.DateTimeField dateTimeField66 = dateTimeFieldType44.getField(chronology64);
        org.joda.time.DateTimeField dateTimeField67 = chronology64.dayOfYear();
        java.util.Locale locale68 = java.util.Locale.CANADA;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket70 = new org.joda.time.format.DateTimeParserBucket((long) 19045, chronology64, locale68, (java.lang.Integer) 5);
        org.joda.time.DateTimeField dateTimeField71 = chronology64.dayOfYear();
        java.util.Locale.Category category72 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale73 = java.util.Locale.getDefault(category72);
        java.util.Locale locale74 = java.util.Locale.TAIWAN;
        java.util.Locale.setDefault(category72, locale74);
        java.util.Locale locale76 = java.util.Locale.getDefault(category72);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket79 = new org.joda.time.format.DateTimeParserBucket(3755808026266L, chronology64, locale76, (java.lang.Integer) 0, 9);
        org.joda.time.DateTimeZone dateTimeZone80 = chronology64.getZone();
        mutableDateTime35.setZone(dateTimeZone80);
        org.joda.time.LocalDateTime localDateTime82 = new org.joda.time.LocalDateTime(obj0, dateTimeZone80);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 22 + "'", int3 == 22);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2022 + "'", int4 == 2022);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(hours11);
// flaky:         org.junit.Assert.assertTrue("'" + int14 + "' != '" + 50 + "'", int14 == 50);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(mutableDateTime25);
        org.junit.Assert.assertNotNull(mutableDateTime28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(mutableDateTime30);
        org.junit.Assert.assertNotNull(mutableDateTime32);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertNotNull(timeZone34);
        org.junit.Assert.assertEquals(timeZone34.getDisplayName(), "\u5354\u8abf\u4e16\u754c\u6642\u9593");
        org.junit.Assert.assertNotNull(mutableDateTime35);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(dateTimeFieldType44);
        org.junit.Assert.assertNotNull(periodType49);
        org.junit.Assert.assertNotNull(durationFieldType52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "PeriodType[YearDayTime]" + "'", str53, "PeriodType[YearDayTime]");
        org.junit.Assert.assertNotNull(instant56);
        org.junit.Assert.assertNotNull(chronology57);
        org.junit.Assert.assertNotNull(dateTimeField59);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(chronology64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "ISOChronology[UTC]" + "'", str65, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField66);
        org.junit.Assert.assertNotNull(dateTimeField67);
        org.junit.Assert.assertNotNull(locale68);
        org.junit.Assert.assertEquals(locale68.toString(), "en_CA");
        org.junit.Assert.assertNotNull(dateTimeField71);
        org.junit.Assert.assertTrue("'" + category72 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category72.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale73);
        org.junit.Assert.assertEquals(locale73.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale74);
        org.junit.Assert.assertEquals(locale74.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale76);
        org.junit.Assert.assertEquals(locale76.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(dateTimeZone80);
    }

    @Test
    public void test07659() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07659");
        org.joda.time.Instant instant5 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime6 = instant5.toMutableDateTime();
        org.joda.time.MutableDateTime mutableDateTime7 = org.joda.time.MutableDateTime.now();
        mutableDateTime7.add((long) 'a');
        org.joda.time.MutableDateTime.Property property10 = mutableDateTime7.yearOfCentury();
        org.joda.time.Duration duration12 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period13 = duration12.toPeriod();
        org.joda.time.Duration duration15 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration18 = duration15.withDurationAdded((long) (short) 100, (int) ' ');
        org.joda.time.Duration duration19 = duration12.minus((org.joda.time.ReadableDuration) duration18);
        mutableDateTime7.add((org.joda.time.ReadableDuration) duration12);
        org.joda.time.MutableDateTime.Property property21 = mutableDateTime7.centuryOfEra();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime(chronology22);
        int int24 = dateTime23.getYearOfCentury();
        org.joda.time.DateTime dateTime26 = dateTime23.withSecondOfMinute(53);
        org.joda.time.Duration duration28 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period29 = duration28.toPeriod();
        org.joda.time.Duration duration31 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration34 = duration31.withDurationAdded((long) (short) 100, (int) ' ');
        org.joda.time.Duration duration35 = duration28.minus((org.joda.time.ReadableDuration) duration34);
        org.joda.time.ReadableInstant readableInstant36 = null;
        org.joda.time.ReadableInstant readableInstant37 = null;
        org.joda.time.PeriodType periodType38 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod39 = new org.joda.time.MutablePeriod(readableInstant36, readableInstant37, periodType38);
        org.joda.time.DurationFieldType durationFieldType41 = periodType38.getFieldType((int) (short) 0);
        java.lang.String str42 = periodType38.toString();
        org.joda.time.Period period43 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime23, (org.joda.time.ReadableDuration) duration28, periodType38);
        mutableDateTime7.add((org.joda.time.ReadableDuration) duration28);
        mutableDateTime7.addWeekyears(21);
        org.joda.time.MutableDateTime.Property property47 = mutableDateTime7.weekOfWeekyear();
        boolean boolean48 = instant5.isAfter((org.joda.time.ReadableInstant) mutableDateTime7);
        int int49 = mutableDateTime7.getMillisOfSecond();
        mutableDateTime7.addWeekyears(62151);
        mutableDateTime7.setSecondOfDay(0);
        org.joda.time.Chronology chronology54 = mutableDateTime7.getChronology();
        org.joda.time.LocalDateTime localDateTime55 = org.joda.time.LocalDateTime.now(chronology54);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime56 = new org.joda.time.DateTime(0, 1210, 86399999, 37423908, 62445, chronology54);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 37423908 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(mutableDateTime7);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 22 + "'", int24 == 22);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertNotNull(periodType38);
        org.junit.Assert.assertNotNull(durationFieldType41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "PeriodType[YearDayTime]" + "'", str42, "PeriodType[YearDayTime]");
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int49 + "' != '" + 658 + "'", int49 == 658);
        org.junit.Assert.assertNotNull(chronology54);
        org.junit.Assert.assertNotNull(localDateTime55);
    }

    @Test
    public void test07660() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07660");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime3 = mutableDateTime0.copy();
        org.joda.time.MutableDateTime.Property property4 = mutableDateTime0.weekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime5 = property4.roundHalfFloor();
        org.joda.time.MutableDateTime mutableDateTime6 = property4.roundHalfCeiling();
        org.joda.time.MutableDateTime mutableDateTime8 = property4.set(1);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(chronology9);
        int int11 = dateTime10.getYearOfCentury();
        int int12 = dateTime10.getWeekyear();
        org.joda.time.DateTime dateTime13 = dateTime10.withEarlierOffsetAtOverlap();
        java.lang.String str14 = dateTime13.toString();
        org.joda.time.MutableDateTime mutableDateTime15 = dateTime13.toMutableDateTime();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.UTC;
        boolean boolean17 = dateTimeZone16.isFixed();
        mutableDateTime15.setZoneRetainFields(dateTimeZone16);
        org.joda.time.MutableDateTime mutableDateTime19 = mutableDateTime8.toMutableDateTime(dateTimeZone16);
        org.joda.time.MutableDateTime.Property property20 = mutableDateTime19.yearOfCentury();
        org.joda.time.MutableDateTime.Property property21 = mutableDateTime19.weekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime23 = property21.add((long) 62176);
        org.joda.time.PeriodType periodType26 = null;
        org.joda.time.Period period27 = new org.joda.time.Period((long) 100, 1L, periodType26);
        org.joda.time.Period period29 = period27.minusSeconds((-1));
        org.joda.time.Period period31 = period29.multipliedBy((int) '#');
        org.joda.time.DurationFieldType durationFieldType32 = org.joda.time.DurationFieldType.centuries();
        int int33 = period31.get(durationFieldType32);
        int int34 = period31.getMinutes();
        mutableDateTime23.add((org.joda.time.ReadablePeriod) period31);
        org.joda.time.Period period37 = period31.withMonths(26510057);
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(mutableDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(mutableDateTime5);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(mutableDateTime8);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 22 + "'", int11 == 22);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2022 + "'", int12 == 2022);
        org.junit.Assert.assertNotNull(dateTime13);
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "2022-02-22T07:23:50.579Z" + "'", str14, "2022-02-22T07:23:50.579Z");
        org.junit.Assert.assertNotNull(mutableDateTime15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(mutableDateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(mutableDateTime23);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertNotNull(durationFieldType32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(period37);
    }

    @Test
    public void test07661() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07661");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.monthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.minuteOfDay();
        boolean boolean3 = localDate0.isSupported(dateTimeFieldType2);
        int int4 = localDate0.getDayOfYear();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateMidnight dateMidnight6 = localDate0.toDateMidnight(dateTimeZone5);
        org.joda.time.LocalDate.Property property7 = localDate0.year();
        java.util.Date date8 = localDate0.toDate();
        org.joda.time.LocalDate localDate10 = localDate0.withDayOfYear(13);
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate((long) (byte) -1);
        int int13 = localDate12.getYearOfEra();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.UTC;
        java.util.TimeZone timeZone15 = dateTimeZone14.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.UTC;
        long long18 = dateTimeZone14.getMillisKeepLocal(dateTimeZone16, (long) 44);
        org.joda.time.DateTime dateTime19 = localDate12.toDateTimeAtMidnight(dateTimeZone14);
        java.util.Locale locale21 = null;
        java.lang.String str22 = dateTimeZone14.getName(946000L, locale21);
        org.joda.time.MutableDateTime mutableDateTime23 = org.joda.time.MutableDateTime.now();
        mutableDateTime23.add((long) 'a');
        org.joda.time.MutableDateTime.Property property26 = mutableDateTime23.yearOfCentury();
        mutableDateTime23.addSeconds(0);
        mutableDateTime23.add((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone31 = mutableDateTime23.getZone();
        long long33 = dateTimeZone14.getMillisKeepLocal(dateTimeZone31, 1645516797426L);
        org.joda.time.DateTime dateTime34 = localDate0.toDateTimeAtCurrentTime(dateTimeZone31);
        org.joda.time.DateTime dateTime36 = dateTime34.withWeekyear(132);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 53 + "'", int4 == 53);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Tue Feb 22 00:00:00 UTC 2022");
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1969 + "'", int13 == 1969);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(timeZone15);
        org.junit.Assert.assertEquals(timeZone15.getDisplayName(), "\u5354\u8abf\u4e16\u754c\u6642\u9593");
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 44L + "'", long18 == 44L);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "+00:00" + "'", str22, "+00:00");
        org.junit.Assert.assertNotNull(mutableDateTime23);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 1645516797426L + "'", long33 == 1645516797426L);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime36);
    }

    @Test
    public void test07662() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07662");
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime4 = dateTime2.withZoneRetainFields(dateTimeZone3);
        boolean boolean6 = dateTime4.equals((java.lang.Object) (-1L));
        org.joda.time.Chronology chronology7 = dateTime4.getChronology();
        java.util.Locale locale8 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket10 = new org.joda.time.format.DateTimeParserBucket((long) 1, chronology7, locale8, (java.lang.Integer) 50);
        org.joda.time.DateTimeZone dateTimeZone11 = dateTimeParserBucket10.getZone();
        org.joda.time.LocalTime localTime12 = new org.joda.time.LocalTime(dateTimeZone11);
        org.joda.time.MutableDateTime mutableDateTime13 = org.joda.time.MutableDateTime.now(dateTimeZone11);
        mutableDateTime13.addHours((-2022));
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.ReadableInstant readableInstant19 = null;
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.PeriodType periodType21 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod22 = new org.joda.time.MutablePeriod(readableInstant19, readableInstant20, periodType21);
        org.joda.time.DurationFieldType durationFieldType24 = periodType21.getFieldType((int) (short) 0);
        java.lang.String str25 = periodType21.toString();
        org.joda.time.Instant instant26 = new org.joda.time.Instant();
        org.joda.time.Instant instant28 = instant26.withMillis(0L);
        org.joda.time.Chronology chronology29 = instant28.getChronology();
        org.joda.time.Period period30 = new org.joda.time.Period((long) 53, (long) (-1), periodType21, chronology29);
        org.joda.time.DateTimeField dateTimeField31 = dateTimeFieldType16.getField(chronology29);
        org.joda.time.DurationField durationField32 = chronology29.centuries();
        org.joda.time.DateTimeField dateTimeField33 = chronology29.minuteOfDay();
        long long35 = dateTimeField33.remainder(530061L);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime13.setRounding(dateTimeField33, 369502);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal rounding mode: 369502");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(mutableDateTime13);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertNotNull(periodType21);
        org.junit.Assert.assertNotNull(durationFieldType24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "PeriodType[YearDayTime]" + "'", str25, "PeriodType[YearDayTime]");
        org.junit.Assert.assertNotNull(instant28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 50061L + "'", long35 == 50061L);
    }

    @Test
    public void test07663() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07663");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.Instant instant2 = instant0.withMillis(0L);
        org.joda.time.Duration duration4 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period5 = duration4.toPeriod();
        org.joda.time.Duration duration8 = duration4.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Instant instant9 = instant2.plus((org.joda.time.ReadableDuration) duration8);
        org.joda.time.PeriodType periodType10 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.Period period11 = duration8.toPeriod(periodType10);
        org.joda.time.Duration duration13 = duration8.withMillis(60000L);
        org.joda.time.MutableDateTime mutableDateTime15 = new org.joda.time.MutableDateTime(5L);
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime19 = dateTime17.withZoneRetainFields(dateTimeZone18);
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property21 = localDate20.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.UTC;
        java.util.TimeZone timeZone23 = dateTimeZone22.toTimeZone();
        org.joda.time.DateTime dateTime24 = localDate20.toDateTimeAtCurrentTime(dateTimeZone22);
        int int25 = dateTime19.compareTo((org.joda.time.ReadableInstant) dateTime24);
        org.joda.time.DateTime dateTime27 = dateTime24.withDayOfMonth(20);
        org.joda.time.DateTime.Property property28 = dateTime27.hourOfDay();
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.UTC;
        java.util.Locale locale32 = java.util.Locale.GERMAN;
        java.lang.String str33 = locale32.getDisplayName();
        java.lang.String str34 = dateTimeZone30.getName(100L, locale32);
        org.joda.time.MutableDateTime mutableDateTime35 = new org.joda.time.MutableDateTime(948227L, dateTimeZone30);
        org.joda.time.MutableDateTime.Property property36 = mutableDateTime35.year();
        mutableDateTime35.addHours(16);
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.ReadableInstant readableInstant42 = null;
        org.joda.time.ReadableInstant readableInstant43 = null;
        org.joda.time.PeriodType periodType44 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod45 = new org.joda.time.MutablePeriod(readableInstant42, readableInstant43, periodType44);
        org.joda.time.DurationFieldType durationFieldType47 = periodType44.getFieldType((int) (short) 0);
        java.lang.String str48 = periodType44.toString();
        org.joda.time.Instant instant49 = new org.joda.time.Instant();
        org.joda.time.Instant instant51 = instant49.withMillis(0L);
        org.joda.time.Chronology chronology52 = instant51.getChronology();
        org.joda.time.Period period53 = new org.joda.time.Period((long) 53, (long) (-1), periodType44, chronology52);
        org.joda.time.DateTimeField dateTimeField54 = dateTimeFieldType39.getField(chronology52);
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.DateTime dateTime56 = new org.joda.time.DateTime(chronology55);
        org.joda.time.DateTime dateTime58 = dateTime56.plusMinutes(15);
        org.joda.time.Chronology chronology59 = dateTime56.getChronology();
        java.lang.String str60 = chronology59.toString();
        org.joda.time.DateTimeField dateTimeField61 = dateTimeFieldType39.getField(chronology59);
        org.joda.time.DurationField durationField62 = chronology59.centuries();
        org.joda.time.DateTimeField dateTimeField63 = chronology59.millisOfDay();
        mutableDateTime35.setChronology(chronology59);
        org.joda.time.MutableDateTime mutableDateTime65 = dateTime27.toMutableDateTime(chronology59);
        org.joda.time.Duration duration67 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period68 = duration67.toPeriod();
        org.joda.time.Duration duration70 = duration67.minus((long) 292278993);
        org.joda.time.MutableDateTime mutableDateTime71 = org.joda.time.MutableDateTime.now();
        mutableDateTime71.add((long) 'a');
        org.joda.time.MutableDateTime.Property property74 = mutableDateTime71.yearOfCentury();
        org.joda.time.Duration duration76 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period77 = duration76.toPeriod();
        org.joda.time.Duration duration79 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration82 = duration79.withDurationAdded((long) (short) 100, (int) ' ');
        org.joda.time.Duration duration83 = duration76.minus((org.joda.time.ReadableDuration) duration82);
        mutableDateTime71.add((org.joda.time.ReadableDuration) duration76);
        boolean boolean85 = duration70.isShorterThan((org.joda.time.ReadableDuration) duration76);
        org.joda.time.PeriodType periodType87 = org.joda.time.PeriodType.years();
        org.joda.time.Period period88 = new org.joda.time.Period(60000L, periodType87);
        org.joda.time.Period period89 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime27, (org.joda.time.ReadableDuration) duration76, periodType87);
        org.joda.time.Period period90 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration8, (org.joda.time.ReadableInstant) mutableDateTime15, periodType87);
        int int91 = mutableDateTime15.getSecondOfDay();
        org.joda.time.Instant instant92 = mutableDateTime15.toInstant();
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime15.setWeekOfWeekyear(564);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 564 for weekOfWeekyear must be in the range [1,53]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(instant2);
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(instant9);
        org.junit.Assert.assertNotNull(periodType10);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(timeZone23);
        org.junit.Assert.assertEquals(timeZone23.getDisplayName(), "\u5354\u8abf\u4e16\u754c\u6642\u9593");
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "de");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "\u5fb7\u6587" + "'", str33, "\u5fb7\u6587");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "+00:00" + "'", str34, "+00:00");
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(dateTimeFieldType39);
        org.junit.Assert.assertNotNull(periodType44);
        org.junit.Assert.assertNotNull(durationFieldType47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "PeriodType[YearDayTime]" + "'", str48, "PeriodType[YearDayTime]");
        org.junit.Assert.assertNotNull(instant51);
        org.junit.Assert.assertNotNull(chronology52);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(chronology59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "ISOChronology[UTC]" + "'", str60, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField61);
        org.junit.Assert.assertNotNull(durationField62);
        org.junit.Assert.assertNotNull(dateTimeField63);
        org.junit.Assert.assertNotNull(mutableDateTime65);
        org.junit.Assert.assertNotNull(duration67);
        org.junit.Assert.assertNotNull(period68);
        org.junit.Assert.assertNotNull(duration70);
        org.junit.Assert.assertNotNull(mutableDateTime71);
        org.junit.Assert.assertNotNull(property74);
        org.junit.Assert.assertNotNull(duration76);
        org.junit.Assert.assertNotNull(period77);
        org.junit.Assert.assertNotNull(duration79);
        org.junit.Assert.assertNotNull(duration82);
        org.junit.Assert.assertNotNull(duration83);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertNotNull(periodType87);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 0 + "'", int91 == 0);
        org.junit.Assert.assertNotNull(instant92);
    }

    @Test
    public void test07664() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07664");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.Instant instant2 = instant0.withMillis(0L);
        org.joda.time.Duration duration4 = org.joda.time.Duration.standardDays((long) (byte) 1);
        java.lang.String str5 = duration4.toString();
        org.joda.time.Instant instant6 = instant0.minus((org.joda.time.ReadableDuration) duration4);
        org.joda.time.Instant instant7 = instant0.toInstant();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime(chronology8);
        int int10 = dateTime9.getSecondOfMinute();
        int int11 = dateTime9.getYearOfEra();
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.PeriodType periodType14 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod15 = new org.joda.time.MutablePeriod(readableInstant12, readableInstant13, periodType14);
        mutablePeriod15.setYears((int) '#');
        mutablePeriod15.setSeconds((int) 'a');
        org.joda.time.DateTime dateTime20 = dateTime9.plus((org.joda.time.ReadablePeriod) mutablePeriod15);
        org.joda.time.Duration duration22 = org.joda.time.Duration.standardHours((long) 52);
        org.joda.time.MutableDateTime mutableDateTime23 = org.joda.time.MutableDateTime.now();
        mutableDateTime23.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime26 = mutableDateTime23.copy();
        org.joda.time.MutableDateTime.Property property27 = mutableDateTime23.yearOfEra();
        org.joda.time.MutablePeriod mutablePeriod28 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration22, (org.joda.time.ReadableInstant) mutableDateTime23);
        org.joda.time.DateTime dateTime30 = dateTime20.withDurationAdded((org.joda.time.ReadableDuration) duration22, 36985848);
        org.joda.time.Instant instant31 = instant0.minus((org.joda.time.ReadableDuration) duration22);
        org.joda.time.MutableDateTime mutableDateTime32 = instant31.toMutableDateTime();
        java.lang.Object obj33 = null;
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime(obj33);
        boolean boolean36 = dateTime34.isBefore((long) 7);
        java.lang.String str37 = dateTime34.toString();
        org.joda.time.DateTime dateTime39 = dateTime34.minus((long) 7);
        org.joda.time.Instant instant40 = new org.joda.time.Instant();
        org.joda.time.Instant instant42 = instant40.withMillis(0L);
        org.joda.time.Chronology chronology43 = instant42.getChronology();
        org.joda.time.DateTime dateTime44 = dateTime34.toDateTime(chronology43);
        org.joda.time.DateTime dateTime45 = new org.joda.time.DateTime(chronology43);
        org.joda.time.DateTime dateTime47 = dateTime45.minusDays(2100);
        org.joda.time.DateTime dateTime49 = dateTime47.withSecondOfMinute(9);
        org.joda.time.ReadableInstant readableInstant50 = null;
        org.joda.time.ReadableInstant readableInstant51 = null;
        org.joda.time.PeriodType periodType52 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod53 = new org.joda.time.MutablePeriod(readableInstant50, readableInstant51, periodType52);
        mutablePeriod53.setYears((int) '#');
        org.joda.time.DurationFieldType[] durationFieldTypeArray56 = mutablePeriod53.getFieldTypes();
        int int57 = mutablePeriod53.getMonths();
        org.joda.time.DateTime dateTime59 = dateTime47.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod53, 26177);
        org.joda.time.Duration duration60 = new org.joda.time.Duration((org.joda.time.ReadableInstant) mutableDateTime32, (org.joda.time.ReadableInstant) dateTime59);
        org.junit.Assert.assertNotNull(instant2);
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "PT86400S" + "'", str5, "PT86400S");
        org.junit.Assert.assertNotNull(instant6);
        org.junit.Assert.assertNotNull(instant7);
// flaky:         org.junit.Assert.assertTrue("'" + int10 + "' != '" + 50 + "'", int10 == 50);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2022 + "'", int11 == 2022);
        org.junit.Assert.assertNotNull(periodType14);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(mutableDateTime23);
        org.junit.Assert.assertNotNull(mutableDateTime26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(instant31);
        org.junit.Assert.assertNotNull(mutableDateTime32);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str37 + "' != '" + "2022-02-22T07:23:50.685Z" + "'", str37, "2022-02-22T07:23:50.685Z");
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(instant42);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(periodType52);
        org.junit.Assert.assertNotNull(durationFieldTypeArray56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(dateTime59);
    }

    @Test
    public void test07665() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07665");
        org.joda.time.format.DateTimePrinter dateTimePrinter1 = null;
        org.joda.time.format.DateTimeParser dateTimeParser2 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter1, dateTimeParser2);
        org.joda.time.Instant instant4 = new org.joda.time.Instant();
        org.joda.time.Instant instant6 = instant4.withMillis(0L);
        org.joda.time.Chronology chronology7 = instant6.getChronology();
        org.joda.time.DurationField durationField8 = chronology7.eras();
        long long12 = chronology7.add(0L, (long) 2022, (int) '4');
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = dateTimeFormatter3.withChronology(chronology7);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter14 = dateTimeFormatter3.withZoneUTC();
        boolean boolean15 = dateTimeFormatter3.isPrinter();
        java.lang.Integer int16 = dateTimeFormatter3.getPivotYear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter17 = dateTimeFormatter3.withZoneUTC();
        org.joda.time.DateTimeZone dateTimeZone18 = dateTimeFormatter3.getZone();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter19 = dateTimeFormatter3.withZoneUTC();
        org.joda.time.MutableDateTime mutableDateTime20 = org.joda.time.MutableDateTime.now();
        mutableDateTime20.add((long) 'a');
        org.joda.time.MutableDateTime.Property property23 = mutableDateTime20.yearOfCentury();
        org.joda.time.Duration duration25 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period26 = duration25.toPeriod();
        org.joda.time.Duration duration28 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration31 = duration28.withDurationAdded((long) (short) 100, (int) ' ');
        org.joda.time.Duration duration32 = duration25.minus((org.joda.time.ReadableDuration) duration31);
        mutableDateTime20.add((org.joda.time.ReadableDuration) duration25);
        org.joda.time.MutableDateTime.Property property34 = mutableDateTime20.centuryOfEra();
        mutableDateTime20.addHours((int) (byte) 10);
        mutableDateTime20.addWeeks(100);
        org.joda.time.ReadableInstant readableInstant41 = null;
        org.joda.time.ReadableInstant readableInstant42 = null;
        org.joda.time.PeriodType periodType43 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod44 = new org.joda.time.MutablePeriod(readableInstant41, readableInstant42, periodType43);
        org.joda.time.DurationFieldType durationFieldType46 = periodType43.getFieldType((int) (short) 0);
        java.lang.String str47 = periodType43.toString();
        org.joda.time.Instant instant48 = new org.joda.time.Instant();
        org.joda.time.Instant instant50 = instant48.withMillis(0L);
        org.joda.time.Chronology chronology51 = instant50.getChronology();
        org.joda.time.Period period52 = new org.joda.time.Period((long) 53, (long) (-1), periodType43, chronology51);
        org.joda.time.LocalDate localDate53 = org.joda.time.LocalDate.now(chronology51);
        org.joda.time.DateTimeField dateTimeField54 = chronology51.dayOfWeek();
        mutableDateTime20.setChronology(chronology51);
        org.joda.time.Period period57 = org.joda.time.Period.hours((int) (short) 10);
        org.joda.time.LocalDate localDate58 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property59 = localDate58.monthOfYear();
        org.joda.time.LocalDate localDate60 = property59.roundFloorCopy();
        org.joda.time.DateTime dateTime61 = localDate60.toDateTimeAtMidnight();
        boolean boolean62 = period57.equals((java.lang.Object) localDate60);
        org.joda.time.DateTime dateTime63 = localDate60.toDateTimeAtMidnight();
        org.joda.time.LocalDate localDate64 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property65 = localDate64.monthOfYear();
        org.joda.time.LocalDate.Property property66 = localDate64.dayOfMonth();
        org.joda.time.LocalDate localDate68 = localDate64.withEra((int) (short) 0);
        int[] intArray69 = localDate68.getValues();
        chronology51.validate((org.joda.time.ReadablePartial) localDate60, intArray69);
        org.joda.time.DateTimeField dateTimeField71 = chronology51.year();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter72 = dateTimeFormatter3.withChronology(chronology51);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate73 = org.joda.time.LocalDate.parse("2022-02-22T07:23:07.274Z", dateTimeFormatter72);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(instant6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 105144L + "'", long12 == 105144L);
        org.junit.Assert.assertNotNull(dateTimeFormatter13);
        org.junit.Assert.assertNotNull(dateTimeFormatter14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(int16);
        org.junit.Assert.assertNotNull(dateTimeFormatter17);
        org.junit.Assert.assertNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(dateTimeFormatter19);
        org.junit.Assert.assertNotNull(mutableDateTime20);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(periodType43);
        org.junit.Assert.assertNotNull(durationFieldType46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "PeriodType[YearDayTime]" + "'", str47, "PeriodType[YearDayTime]");
        org.junit.Assert.assertNotNull(instant50);
        org.junit.Assert.assertNotNull(chronology51);
        org.junit.Assert.assertNotNull(localDate53);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertNotNull(period57);
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertNotNull(localDate60);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(property65);
        org.junit.Assert.assertNotNull(property66);
        org.junit.Assert.assertNotNull(localDate68);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-2022, 2, 22]");
        org.junit.Assert.assertNotNull(dateTimeField71);
        org.junit.Assert.assertNotNull(dateTimeFormatter72);
    }

    @Test
    public void test07666() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07666");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property2 = localDate1.monthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.minuteOfDay();
        boolean boolean4 = localDate1.isSupported(dateTimeFieldType3);
        org.joda.time.LocalDate.Property property5 = localDate1.dayOfWeek();
        org.joda.time.MutableDateTime mutableDateTime6 = org.joda.time.MutableDateTime.now();
        mutableDateTime6.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime9 = mutableDateTime6.copy();
        org.joda.time.MutableDateTime.Property property10 = mutableDateTime6.weekOfWeekyear();
        org.joda.time.MutableDateTime.Property property11 = mutableDateTime6.dayOfYear();
        org.joda.time.MutableDateTime mutableDateTime12 = org.joda.time.MutableDateTime.now();
        mutableDateTime12.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime15 = mutableDateTime12.copy();
        mutableDateTime12.setDate((long) '#');
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property19 = localDate18.monthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = org.joda.time.DateTimeFieldType.minuteOfDay();
        boolean boolean21 = localDate18.isSupported(dateTimeFieldType20);
        int int22 = localDate18.getDayOfYear();
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateMidnight dateMidnight24 = localDate18.toDateMidnight(dateTimeZone23);
        org.joda.time.DateTime dateTime25 = mutableDateTime12.toDateTime(dateTimeZone23);
        org.joda.time.LocalDate localDate26 = org.joda.time.LocalDate.now(dateTimeZone23);
        org.joda.time.PeriodType periodType29 = null;
        org.joda.time.Period period30 = new org.joda.time.Period((long) 100, 1L, periodType29);
        org.joda.time.PeriodType periodType31 = period30.getPeriodType();
        boolean boolean32 = dateTimeZone23.equals((java.lang.Object) periodType31);
        mutableDateTime6.setZoneRetainFields(dateTimeZone23);
        org.joda.time.LocalDate localDate34 = new org.joda.time.LocalDate(dateTimeZone23);
        org.joda.time.DateTime dateTime35 = localDate1.toDateTimeAtStartOfDay(dateTimeZone23);
        int int37 = dateTimeZone23.getOffset((long) 36956320);
        org.joda.time.LocalDate localDate38 = new org.joda.time.LocalDate((java.lang.Object) 972866L, dateTimeZone23);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate40 = localDate38.withMonthOfYear(0);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 0 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(mutableDateTime12);
        org.junit.Assert.assertNotNull(mutableDateTime15);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 53 + "'", int22 == 53);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(dateMidnight24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertNotNull(periodType31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
    }

    @Test
    public void test07667() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07667");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.UTC;
        java.util.Locale locale3 = java.util.Locale.GERMAN;
        java.lang.String str4 = locale3.getDisplayName();
        java.lang.String str5 = dateTimeZone1.getName(100L, locale3);
        org.joda.time.MutableDateTime mutableDateTime6 = new org.joda.time.MutableDateTime(948227L, dateTimeZone1);
        long long7 = mutableDateTime6.getMillis();
        org.joda.time.Duration duration9 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration11 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration14 = duration11.withDurationAdded((long) (short) 100, (int) ' ');
        boolean boolean15 = duration9.isLongerThan((org.joda.time.ReadableDuration) duration14);
        java.lang.Object obj16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime(obj16);
        org.joda.time.LocalDateTime localDateTime18 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime20.withHourOfDay(10);
        org.joda.time.DateTimeField dateTimeField24 = localDateTime22.getField((int) (byte) 0);
        long long26 = dateTimeField24.roundHalfEven((long) 1);
        int int27 = dateTime17.get(dateTimeField24);
        org.joda.time.LocalDateTime localDateTime28 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime30 = localDateTime28.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime32 = localDateTime30.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime34 = localDateTime32.withCenturyOfEra((int) 'a');
        java.util.Locale locale36 = java.util.Locale.GERMAN;
        java.lang.String str37 = locale36.getDisplayName();
        java.lang.String str38 = dateTimeField24.getAsText((org.joda.time.ReadablePartial) localDateTime32, 53, locale36);
        org.joda.time.Duration duration40 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period41 = duration40.toPeriod();
        org.joda.time.Duration duration44 = duration40.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.LocalDateTime localDateTime45 = localDateTime32.minus((org.joda.time.ReadableDuration) duration40);
        org.joda.time.LocalDateTime localDateTime46 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime48 = localDateTime46.withHourOfDay(10);
        org.joda.time.LocalDateTime.Property property49 = localDateTime46.hourOfDay();
        org.joda.time.LocalDateTime localDateTime51 = localDateTime46.plusMillis((int) (byte) 0);
        int int52 = localDateTime32.compareTo((org.joda.time.ReadablePartial) localDateTime46);
        boolean boolean53 = duration9.equals((java.lang.Object) int52);
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.DateTime dateTime55 = new org.joda.time.DateTime(chronology54);
        int int56 = dateTime55.getSecondOfMinute();
        int int57 = dateTime55.getYearOfEra();
        org.joda.time.ReadableInstant readableInstant58 = null;
        org.joda.time.ReadableInstant readableInstant59 = null;
        org.joda.time.PeriodType periodType60 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod61 = new org.joda.time.MutablePeriod(readableInstant58, readableInstant59, periodType60);
        mutablePeriod61.setYears((int) '#');
        mutablePeriod61.setSeconds((int) 'a');
        org.joda.time.DateTime dateTime66 = dateTime55.plus((org.joda.time.ReadablePeriod) mutablePeriod61);
        org.joda.time.MutablePeriod mutablePeriod67 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration9, (org.joda.time.ReadableInstant) dateTime55);
        org.joda.time.Period period68 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime6, (org.joda.time.ReadableDuration) duration9);
        java.lang.Object obj69 = null;
        org.joda.time.DateTime dateTime70 = new org.joda.time.DateTime(obj69);
        boolean boolean72 = dateTime70.isBefore((long) 7);
        java.lang.String str73 = dateTime70.toString();
        org.joda.time.DateTime dateTime75 = dateTime70.minus((long) 7);
        org.joda.time.Instant instant76 = new org.joda.time.Instant();
        org.joda.time.Instant instant78 = instant76.withMillis(0L);
        org.joda.time.Chronology chronology79 = instant78.getChronology();
        org.joda.time.DateTime dateTime80 = dateTime70.toDateTime(chronology79);
        org.joda.time.DateTime dateTime81 = new org.joda.time.DateTime(chronology79);
        org.joda.time.DateTime dateTime83 = dateTime81.minusDays(2100);
        int int84 = mutableDateTime6.compareTo((org.joda.time.ReadableInstant) dateTime81);
        mutableDateTime6.addDays((-356));
        int int87 = mutableDateTime6.getEra();
        int int88 = mutableDateTime6.getDayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone89 = mutableDateTime6.getZone();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "de");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u5fb7\u6587" + "'", str4, "\u5fb7\u6587");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "+00:00" + "'", str5, "+00:00");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 948227L + "'", long7 == 948227L);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2022 + "'", int27 == 2022);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "de");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "\u5fb7\u6587" + "'", str37, "\u5fb7\u6587");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "53" + "'", str38, "53");
        org.junit.Assert.assertNotNull(duration40);
        org.junit.Assert.assertNotNull(period41);
        org.junit.Assert.assertNotNull(duration44);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int56 + "' != '" + 50 + "'", int56 == 50);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 2022 + "'", int57 == 2022);
        org.junit.Assert.assertNotNull(periodType60);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str73 + "' != '" + "2022-02-22T07:23:50.835Z" + "'", str73, "2022-02-22T07:23:50.835Z");
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertNotNull(instant78);
        org.junit.Assert.assertNotNull(chronology79);
        org.junit.Assert.assertNotNull(dateTime80);
        org.junit.Assert.assertNotNull(dateTime83);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + (-1) + "'", int84 == (-1));
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 1 + "'", int87 == 1);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 5 + "'", int88 == 5);
        org.junit.Assert.assertNotNull(dateTimeZone89);
    }

    @Test
    public void test07668() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07668");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        int int2 = dateTime1.getYearOfCentury();
        int int3 = dateTime1.getWeekyear();
        org.joda.time.DateTime dateTime5 = dateTime1.plus((long) 15);
        org.joda.time.DateTime.Property property6 = dateTime5.millisOfSecond();
        org.joda.time.DateTime dateTime8 = dateTime5.withCenturyOfEra((int) '#');
        org.joda.time.YearMonthDay yearMonthDay9 = dateTime5.toYearMonthDay();
        org.joda.time.Chronology chronology10 = dateTime5.getChronology();
        org.joda.time.DurationField durationField11 = chronology10.days();
        org.joda.time.MutableDateTime mutableDateTime12 = org.joda.time.MutableDateTime.now(chronology10);
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.MutableDateTime mutableDateTime15 = new org.joda.time.MutableDateTime((long) (-292275054));
        java.io.IOException iOException17 = new java.io.IOException("");
        java.io.IOException iOException18 = new java.io.IOException((java.lang.Throwable) iOException17);
        boolean boolean19 = mutableDateTime15.equals((java.lang.Object) iOException17);
        org.joda.time.Duration duration22 = new org.joda.time.Duration(0L, 946312L);
        mutableDateTime15.add((org.joda.time.ReadableDuration) duration22, 1424);
        org.joda.time.MutableDateTime.Property property25 = mutableDateTime15.era();
        org.joda.time.Duration duration29 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration32 = duration29.withDurationAdded((long) (short) 100, (int) ' ');
        long long33 = duration32.getMillis();
        org.joda.time.Instant instant34 = new org.joda.time.Instant();
        org.joda.time.Instant instant36 = instant34.withMillis(0L);
        org.joda.time.DateTime dateTime37 = instant36.toDateTime();
        org.joda.time.Instant instant38 = new org.joda.time.Instant();
        org.joda.time.Instant instant40 = instant38.withMillis(0L);
        org.joda.time.DateTime dateTime41 = instant40.toDateTime();
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime((long) 1);
        org.joda.time.PeriodType periodType44 = org.joda.time.PeriodType.months();
        org.joda.time.Period period45 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime41, (org.joda.time.ReadableInstant) dateTime43, periodType44);
        boolean boolean46 = dateTime37.isBefore((org.joda.time.ReadableInstant) dateTime41);
        int int47 = dateTime41.getDayOfMonth();
        org.joda.time.ReadableInstant readableInstant48 = null;
        org.joda.time.ReadableInstant readableInstant49 = null;
        org.joda.time.PeriodType periodType50 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod51 = new org.joda.time.MutablePeriod(readableInstant48, readableInstant49, periodType50);
        org.joda.time.PeriodType periodType52 = periodType50.withHoursRemoved();
        org.joda.time.MutablePeriod mutablePeriod53 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration32, (org.joda.time.ReadableInstant) dateTime41, periodType50);
        org.joda.time.Period period54 = new org.joda.time.Period(0L, 24L, periodType50);
        org.joda.time.Period period55 = new org.joda.time.Period(readableInstant13, (org.joda.time.ReadableInstant) mutableDateTime15, periodType50);
        org.joda.time.Period period57 = period55.withDays(69);
        org.joda.time.Period period58 = period57.negated();
        mutableDateTime12.add((org.joda.time.ReadablePeriod) period57);
        boolean boolean60 = mutableDateTime12.isBeforeNow();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 22 + "'", int2 == 22);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2022 + "'", int3 == 2022);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(yearMonthDay9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(mutableDateTime12);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 86403200L + "'", long33 == 86403200L);
        org.junit.Assert.assertNotNull(instant36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(instant40);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(periodType44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(periodType50);
        org.junit.Assert.assertNotNull(periodType52);
        org.junit.Assert.assertNotNull(period57);
        org.junit.Assert.assertNotNull(period58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
    }

    @Test
    public void test07669() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07669");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardHours(946312L);
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(chronology2);
        org.joda.time.DateTime dateTime5 = dateTime3.plusMinutes(15);
        org.joda.time.Chronology chronology6 = dateTime3.getChronology();
        org.joda.time.DateTime dateTime8 = dateTime3.plusHours(19045);
        org.joda.time.DateTime dateTime9 = dateTime3.toDateTimeISO();
        org.joda.time.Duration duration11 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period12 = duration11.toPeriod();
        org.joda.time.Duration duration14 = duration11.minus((long) 292278993);
        org.joda.time.MutableDateTime mutableDateTime15 = org.joda.time.MutableDateTime.now();
        mutableDateTime15.add((long) 'a');
        org.joda.time.MutableDateTime.Property property18 = mutableDateTime15.yearOfCentury();
        org.joda.time.Duration duration20 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period21 = duration20.toPeriod();
        org.joda.time.Duration duration23 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration26 = duration23.withDurationAdded((long) (short) 100, (int) ' ');
        org.joda.time.Duration duration27 = duration20.minus((org.joda.time.ReadableDuration) duration26);
        mutableDateTime15.add((org.joda.time.ReadableDuration) duration20);
        boolean boolean29 = duration14.isShorterThan((org.joda.time.ReadableDuration) duration20);
        org.joda.time.Duration duration31 = duration20.minus((long) (byte) 0);
        org.joda.time.DateTime dateTime32 = dateTime3.minus((org.joda.time.ReadableDuration) duration20);
        int int33 = duration1.compareTo((org.joda.time.ReadableDuration) duration20);
        long long34 = duration20.getMillis();
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(mutableDateTime15);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 86400000L + "'", long34 == 86400000L);
    }

    @Test
    public void test07670() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07670");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardMinutes((long) 36946953);
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period4 = duration3.toPeriod();
        org.joda.time.Duration duration6 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration8 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration11 = duration8.withDurationAdded((long) (short) 100, (int) ' ');
        boolean boolean12 = duration6.isLongerThan((org.joda.time.ReadableDuration) duration11);
        org.joda.time.Duration duration13 = duration3.minus((org.joda.time.ReadableDuration) duration6);
        org.joda.time.Days days14 = duration3.toStandardDays();
        boolean boolean15 = duration1.isEqual((org.joda.time.ReadableDuration) duration3);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime((long) 1, chronology17);
        int int19 = dateTime18.getMinuteOfDay();
        org.joda.time.ReadableDuration readableDuration21 = null;
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.Period period23 = new org.joda.time.Period(readableDuration21, readableInstant22);
        org.joda.time.PeriodType periodType26 = null;
        org.joda.time.Period period27 = new org.joda.time.Period((long) 100, 1L, periodType26);
        org.joda.time.Period period29 = period27.minusSeconds((-1));
        java.lang.String str30 = period27.toString();
        org.joda.time.Period period31 = period27.toPeriod();
        org.joda.time.PeriodType periodType32 = period27.getPeriodType();
        org.joda.time.Period period33 = period23.normalizedStandard(periodType32);
        org.joda.time.Instant instant34 = new org.joda.time.Instant();
        org.joda.time.Instant instant36 = instant34.withMillis(0L);
        org.joda.time.Chronology chronology37 = instant36.getChronology();
        org.joda.time.DurationField durationField38 = chronology37.eras();
        long long42 = chronology37.add(0L, (long) 2022, (int) '4');
        org.joda.time.DateTimeField dateTimeField43 = chronology37.secondOfMinute();
        org.joda.time.MutablePeriod mutablePeriod44 = new org.joda.time.MutablePeriod(44L, periodType32, chronology37);
        org.joda.time.DateTimeField dateTimeField45 = chronology37.clockhourOfHalfday();
        org.joda.time.DateTime dateTime46 = dateTime18.toDateTime(chronology37);
        org.joda.time.LocalDate localDate49 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property50 = localDate49.monthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType51 = org.joda.time.DateTimeFieldType.minuteOfDay();
        boolean boolean52 = localDate49.isSupported(dateTimeFieldType51);
        org.joda.time.Chronology chronology53 = localDate49.getChronology();
        org.joda.time.MutablePeriod mutablePeriod54 = new org.joda.time.MutablePeriod((long) (byte) -1, 0L, chronology53);
        org.joda.time.MutableDateTime mutableDateTime55 = dateTime46.toMutableDateTime(chronology53);
        org.joda.time.DateTimeField dateTimeField56 = chronology53.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField57 = chronology53.year();
        org.joda.time.DateTime dateTime58 = org.joda.time.DateTime.now(chronology53);
        org.joda.time.DateTime dateTime60 = dateTime58.plusDays(69);
        org.joda.time.DateTime dateTime62 = dateTime60.plusMinutes((int) (byte) -1);
        org.joda.time.Period period63 = duration3.toPeriodTo((org.joda.time.ReadableInstant) dateTime60);
        int int64 = dateTime60.getSecondOfMinute();
        org.joda.time.DateTime.Property property65 = dateTime60.weekyear();
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(days14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "PT0.099S" + "'", str30, "PT0.099S");
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertNotNull(periodType32);
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertNotNull(instant36);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(durationField38);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 105144L + "'", long42 == 105144L);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertNotNull(dateTimeFieldType51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertNotNull(mutableDateTime55);
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(period63);
// flaky:         org.junit.Assert.assertTrue("'" + int64 + "' != '" + 50 + "'", int64 == 50);
        org.junit.Assert.assertNotNull(property65);
    }

    @Test
    public void test07671() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07671");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property1 = mutableDateTime0.centuryOfEra();
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime0.dayOfWeek();
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime0.dayOfMonth();
        org.joda.time.MutableDateTime.Property property4 = mutableDateTime0.yearOfEra();
        int int5 = property4.get();
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2022 + "'", int5 == 2022);
    }

    @Test
    public void test07672() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07672");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.Instant instant2 = instant0.withMillis(0L);
        org.joda.time.Duration duration4 = org.joda.time.Duration.standardDays((long) (byte) 1);
        java.lang.String str5 = duration4.toString();
        org.joda.time.Instant instant6 = instant0.minus((org.joda.time.ReadableDuration) duration4);
        java.lang.String str7 = instant0.toString();
        org.joda.time.MutableDateTime mutableDateTime8 = instant0.toMutableDateTime();
        boolean boolean10 = instant0.isEqual((long) 62354);
        org.junit.Assert.assertNotNull(instant2);
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "PT86400S" + "'", str5, "PT86400S");
        org.junit.Assert.assertNotNull(instant6);
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "2022-02-22T07:23:51.065Z" + "'", str7, "2022-02-22T07:23:51.065Z");
        org.junit.Assert.assertNotNull(mutableDateTime8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test07673() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07673");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.add((long) 'a');
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime0.yearOfCentury();
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period6 = duration5.toPeriod();
        org.joda.time.Duration duration8 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration11 = duration8.withDurationAdded((long) (short) 100, (int) ' ');
        org.joda.time.Duration duration12 = duration5.minus((org.joda.time.ReadableDuration) duration11);
        mutableDateTime0.add((org.joda.time.ReadableDuration) duration5);
        org.joda.time.MutableDateTime.Property property14 = mutableDateTime0.centuryOfEra();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime(chronology15);
        int int17 = dateTime16.getYearOfCentury();
        org.joda.time.DateTime dateTime19 = dateTime16.withSecondOfMinute(53);
        org.joda.time.Duration duration21 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period22 = duration21.toPeriod();
        org.joda.time.Duration duration24 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration27 = duration24.withDurationAdded((long) (short) 100, (int) ' ');
        org.joda.time.Duration duration28 = duration21.minus((org.joda.time.ReadableDuration) duration27);
        org.joda.time.ReadableInstant readableInstant29 = null;
        org.joda.time.ReadableInstant readableInstant30 = null;
        org.joda.time.PeriodType periodType31 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod32 = new org.joda.time.MutablePeriod(readableInstant29, readableInstant30, periodType31);
        org.joda.time.DurationFieldType durationFieldType34 = periodType31.getFieldType((int) (short) 0);
        java.lang.String str35 = periodType31.toString();
        org.joda.time.Period period36 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime16, (org.joda.time.ReadableDuration) duration21, periodType31);
        mutableDateTime0.add((org.joda.time.ReadableDuration) duration21);
        mutableDateTime0.addWeekyears(21);
        org.joda.time.MutableDateTime.Property property40 = mutableDateTime0.weekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime41 = property40.getMutableDateTime();
        mutableDateTime41.addMillis(557);
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 22 + "'", int17 == 22);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(periodType31);
        org.junit.Assert.assertNotNull(durationFieldType34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "PeriodType[YearDayTime]" + "'", str35, "PeriodType[YearDayTime]");
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(mutableDateTime41);
    }

    @Test
    public void test07674() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07674");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withHourOfDay(10);
        org.joda.time.LocalDateTime.Property property3 = localDateTime0.hourOfDay();
        int int4 = property3.getMinimumValue();
        org.joda.time.LocalDateTime localDateTime5 = property3.withMinimumValue();
        org.joda.time.LocalDateTime.Property property6 = localDateTime5.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime7 = property6.getLocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        java.util.Locale locale11 = java.util.Locale.GERMAN;
        java.lang.String str12 = locale11.getDisplayName();
        java.lang.String str13 = dateTimeZone9.getName(100L, locale11);
        org.joda.time.MutableDateTime mutableDateTime14 = new org.joda.time.MutableDateTime(948227L, dateTimeZone9);
        long long15 = mutableDateTime14.getMillis();
        org.joda.time.Duration duration17 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration19 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration22 = duration19.withDurationAdded((long) (short) 100, (int) ' ');
        boolean boolean23 = duration17.isLongerThan((org.joda.time.ReadableDuration) duration22);
        java.lang.Object obj24 = null;
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime(obj24);
        org.joda.time.LocalDateTime localDateTime26 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime28 = localDateTime26.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime30 = localDateTime28.withHourOfDay(10);
        org.joda.time.DateTimeField dateTimeField32 = localDateTime30.getField((int) (byte) 0);
        long long34 = dateTimeField32.roundHalfEven((long) 1);
        int int35 = dateTime25.get(dateTimeField32);
        org.joda.time.LocalDateTime localDateTime36 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime38 = localDateTime36.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime40 = localDateTime38.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime42 = localDateTime40.withCenturyOfEra((int) 'a');
        java.util.Locale locale44 = java.util.Locale.GERMAN;
        java.lang.String str45 = locale44.getDisplayName();
        java.lang.String str46 = dateTimeField32.getAsText((org.joda.time.ReadablePartial) localDateTime40, 53, locale44);
        org.joda.time.Duration duration48 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period49 = duration48.toPeriod();
        org.joda.time.Duration duration52 = duration48.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.LocalDateTime localDateTime53 = localDateTime40.minus((org.joda.time.ReadableDuration) duration48);
        org.joda.time.LocalDateTime localDateTime54 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime56 = localDateTime54.withHourOfDay(10);
        org.joda.time.LocalDateTime.Property property57 = localDateTime54.hourOfDay();
        org.joda.time.LocalDateTime localDateTime59 = localDateTime54.plusMillis((int) (byte) 0);
        int int60 = localDateTime40.compareTo((org.joda.time.ReadablePartial) localDateTime54);
        boolean boolean61 = duration17.equals((java.lang.Object) int60);
        org.joda.time.Chronology chronology62 = null;
        org.joda.time.DateTime dateTime63 = new org.joda.time.DateTime(chronology62);
        int int64 = dateTime63.getSecondOfMinute();
        int int65 = dateTime63.getYearOfEra();
        org.joda.time.ReadableInstant readableInstant66 = null;
        org.joda.time.ReadableInstant readableInstant67 = null;
        org.joda.time.PeriodType periodType68 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod69 = new org.joda.time.MutablePeriod(readableInstant66, readableInstant67, periodType68);
        mutablePeriod69.setYears((int) '#');
        mutablePeriod69.setSeconds((int) 'a');
        org.joda.time.DateTime dateTime74 = dateTime63.plus((org.joda.time.ReadablePeriod) mutablePeriod69);
        org.joda.time.MutablePeriod mutablePeriod75 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration17, (org.joda.time.ReadableInstant) dateTime63);
        org.joda.time.Period period76 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime14, (org.joda.time.ReadableDuration) duration17);
        java.lang.Object obj77 = null;
        org.joda.time.DateTime dateTime78 = new org.joda.time.DateTime(obj77);
        boolean boolean80 = dateTime78.isBefore((long) 7);
        java.lang.String str81 = dateTime78.toString();
        org.joda.time.DateTime dateTime83 = dateTime78.minus((long) 7);
        org.joda.time.Instant instant84 = new org.joda.time.Instant();
        org.joda.time.Instant instant86 = instant84.withMillis(0L);
        org.joda.time.Chronology chronology87 = instant86.getChronology();
        org.joda.time.DateTime dateTime88 = dateTime78.toDateTime(chronology87);
        org.joda.time.DateTime dateTime89 = new org.joda.time.DateTime(chronology87);
        org.joda.time.DateTime dateTime91 = dateTime89.minusDays(2100);
        int int92 = mutableDateTime14.compareTo((org.joda.time.ReadableInstant) dateTime89);
        int int93 = property6.compareTo((org.joda.time.ReadableInstant) mutableDateTime14);
        mutableDateTime14.addDays(26268751);
        org.joda.time.Period period97 = org.joda.time.Period.millis(62187);
        mutableDateTime14.add((org.joda.time.ReadablePeriod) period97);
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "de");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "\u5fb7\u6587" + "'", str12, "\u5fb7\u6587");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+00:00" + "'", str13, "+00:00");
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 948227L + "'", long15 == 948227L);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 2022 + "'", int35 == 2022);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "de");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "\u5fb7\u6587" + "'", str45, "\u5fb7\u6587");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "53" + "'", str46, "53");
        org.junit.Assert.assertNotNull(duration48);
        org.junit.Assert.assertNotNull(period49);
        org.junit.Assert.assertNotNull(duration52);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertNotNull(localDateTime59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 1 + "'", int60 == 1);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int64 + "' != '" + 51 + "'", int64 == 51);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 2022 + "'", int65 == 2022);
        org.junit.Assert.assertNotNull(periodType68);
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str81 + "' != '" + "2022-02-22T07:23:51.097Z" + "'", str81, "2022-02-22T07:23:51.097Z");
        org.junit.Assert.assertNotNull(dateTime83);
        org.junit.Assert.assertNotNull(instant86);
        org.junit.Assert.assertNotNull(chronology87);
        org.junit.Assert.assertNotNull(dateTime88);
        org.junit.Assert.assertNotNull(dateTime91);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + (-1) + "'", int92 == (-1));
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + (-1) + "'", int93 == (-1));
        org.junit.Assert.assertNotNull(period97);
    }

    @Test
    public void test07675() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07675");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.withHourOfDay(10);
        org.joda.time.DateTimeField dateTimeField6 = localDateTime4.getField((int) (byte) 0);
        org.joda.time.DateTimeField[] dateTimeFieldArray7 = localDateTime4.getFields();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime4.withDayOfWeek(1);
        org.joda.time.Duration duration11 = org.joda.time.Duration.standardSeconds((long) 45);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime9.withDurationAdded((org.joda.time.ReadableDuration) duration11, 53);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime(chronology14);
        int int16 = dateTime15.getYearOfCentury();
        int int17 = dateTime15.getWeekyear();
        org.joda.time.DateTime dateTime19 = dateTime15.plus((long) 15);
        org.joda.time.DateTime dateTime21 = dateTime15.plusDays(0);
        org.joda.time.DateTime dateTime23 = dateTime15.withYearOfEra(7);
        org.joda.time.Interval interval24 = duration11.toIntervalFrom((org.joda.time.ReadableInstant) dateTime15);
        org.joda.time.MutableDateTime mutableDateTime25 = dateTime15.toMutableDateTimeISO();
        mutableDateTime25.addMonths(26318841);
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeFieldArray7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 22 + "'", int16 == 22);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2022 + "'", int17 == 2022);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(mutableDateTime25);
    }

    @Test
    public void test07676() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07676");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.Instant instant2 = instant0.withMillis(0L);
        org.joda.time.DateTime dateTime3 = instant2.toDateTime();
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) 1);
        org.joda.time.PeriodType periodType6 = org.joda.time.PeriodType.months();
        org.joda.time.Period period7 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime3, (org.joda.time.ReadableInstant) dateTime5, periodType6);
        org.joda.time.PeriodType periodType10 = null;
        org.joda.time.Period period11 = new org.joda.time.Period((long) 100, 1L, periodType10);
        org.joda.time.Period period13 = period11.minusSeconds((-1));
        java.lang.String str14 = period11.toString();
        org.joda.time.Period period15 = period11.toPeriod();
        org.joda.time.PeriodType periodType16 = period11.getPeriodType();
        org.joda.time.DateTime dateTime17 = dateTime5.plus((org.joda.time.ReadablePeriod) period11);
        org.joda.time.DateTime dateTime19 = dateTime17.withWeekyear(26148950);
        int int20 = dateTime17.getWeekyear();
        org.joda.time.MutableDateTime mutableDateTime21 = org.joda.time.MutableDateTime.now();
        mutableDateTime21.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime24 = mutableDateTime21.copy();
        org.joda.time.MutableDateTime.Property property25 = mutableDateTime21.weekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime26 = property25.roundHalfFloor();
        org.joda.time.MutableDateTime mutableDateTime28 = property25.add((long) (byte) 10);
        int int29 = mutableDateTime28.getCenturyOfEra();
        int int30 = dateTime17.compareTo((org.joda.time.ReadableInstant) mutableDateTime28);
        org.joda.time.DateTime dateTime32 = dateTime17.plusMillis((int) (short) 100);
        org.joda.time.DateTime.Property property33 = dateTime17.minuteOfHour();
        int int34 = dateTime17.getYearOfCentury();
        org.junit.Assert.assertNotNull(instant2);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(periodType6);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "PT0.099S" + "'", str14, "PT0.099S");
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(periodType16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1970 + "'", int20 == 1970);
        org.junit.Assert.assertNotNull(mutableDateTime21);
        org.junit.Assert.assertNotNull(mutableDateTime24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(mutableDateTime26);
        org.junit.Assert.assertNotNull(mutableDateTime28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 20 + "'", int29 == 20);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 69 + "'", int34 == 69);
    }

    @Test
    public void test07677() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07677");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        int int2 = dateTime1.getYearOfCentury();
        int int3 = dateTime1.getWeekyear();
        org.joda.time.DateTime dateTime4 = dateTime1.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime.Property property5 = dateTime1.yearOfEra();
        org.joda.time.DateTime dateTime6 = property5.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime7 = property5.roundHalfEvenCopy();
        org.joda.time.DateTime.Property property8 = dateTime7.dayOfYear();
        org.joda.time.DateTime dateTime9 = property8.roundFloorCopy();
        org.joda.time.DateTime.Property property10 = dateTime9.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withHourOfDay(10);
        org.joda.time.LocalDateTime.Property property16 = localDateTime15.dayOfMonth();
        org.joda.time.LocalDateTime.Property property17 = localDateTime15.weekyear();
        org.joda.time.LocalDateTime localDateTime18 = property17.roundCeilingCopy();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.plusMinutes((int) (byte) 1);
        org.joda.time.Duration duration22 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period23 = duration22.toPeriod();
        org.joda.time.Duration duration26 = duration22.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime(chronology27);
        org.joda.time.DateTime dateTime30 = dateTime28.plusMinutes(15);
        org.joda.time.Interval interval31 = duration26.toIntervalTo((org.joda.time.ReadableInstant) dateTime30);
        org.joda.time.Duration duration33 = duration26.plus((long) 6);
        org.joda.time.Minutes minutes34 = duration26.toStandardMinutes();
        org.joda.time.LocalDateTime localDateTime35 = localDateTime18.plus((org.joda.time.ReadableDuration) duration26);
        org.joda.time.LocalDateTime localDateTime37 = localDateTime35.plusDays(48);
        boolean boolean38 = property10.equals((java.lang.Object) 48);
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime40 = new org.joda.time.MutableDateTime((java.lang.Object) boolean38, dateTimeZone39);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No instant converter found for type: java.lang.Boolean");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 22 + "'", int2 == 22);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2022 + "'", int3 == 2022);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(interval31);
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertNotNull(minutes34);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
    }

    @Test
    public void test07678() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07678");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        int int2 = dateTime1.getSecondOfMinute();
        org.joda.time.DateTime dateTime5 = dateTime1.withDurationAdded(0L, (int) '4');
        org.joda.time.DateTime dateTime7 = dateTime5.withCenturyOfEra(62282);
        org.joda.time.MutableDateTime mutableDateTime8 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime8.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime11 = property9.set(45);
        org.joda.time.MutableDateTime mutableDateTime12 = property9.roundFloor();
        org.joda.time.LocalDateTime localDateTime13 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.withCenturyOfEra((int) 'a');
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime(chronology20);
        org.joda.time.DateTime dateTime23 = dateTime21.plusMinutes(15);
        org.joda.time.DateTime dateTime24 = localDateTime17.toDateTime((org.joda.time.ReadableInstant) dateTime21);
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime26 = localDateTime17.toDateTime(dateTimeZone25);
        org.joda.time.DateTime.Property property27 = dateTime26.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField28 = property27.getField();
        mutableDateTime12.setRounding(dateTimeField28);
        org.joda.time.MutableDateTime.Property property30 = mutableDateTime12.weekOfWeekyear();
        org.joda.time.DurationField durationField31 = property30.getRangeDurationField();
        org.joda.time.MutableDateTime mutableDateTime32 = property30.roundHalfCeiling();
        boolean boolean33 = dateTime5.isAfter((org.joda.time.ReadableInstant) mutableDateTime32);
// flaky:         org.junit.Assert.assertTrue("'" + int2 + "' != '" + 51 + "'", int2 == 51);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(mutableDateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertNotNull(mutableDateTime12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertNotNull(mutableDateTime32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
    }

    @Test
    public void test07679() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07679");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime1 = instant0.toMutableDateTime();
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardSeconds(4801284961717L);
        org.joda.time.Instant instant4 = instant0.plus((org.joda.time.ReadableDuration) duration3);
        org.joda.time.Instant instant6 = instant4.minus((long) 2618423);
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime((long) (byte) 10);
        org.joda.time.DateTime.Property property9 = dateTime8.millisOfSecond();
        org.joda.time.DateTime dateTime10 = dateTime8.toDateTime();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime(chronology12);
        org.joda.time.DateTime dateTime15 = dateTime13.plusMinutes(15);
        org.joda.time.Chronology chronology16 = dateTime13.getChronology();
        java.lang.String str17 = chronology16.toString();
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.ReadableInstant readableInstant21 = null;
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.PeriodType periodType23 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod24 = new org.joda.time.MutablePeriod(readableInstant21, readableInstant22, periodType23);
        org.joda.time.DurationFieldType durationFieldType26 = periodType23.getFieldType((int) (short) 0);
        java.lang.String str27 = periodType23.toString();
        org.joda.time.Instant instant28 = new org.joda.time.Instant();
        org.joda.time.Instant instant30 = instant28.withMillis(0L);
        org.joda.time.Chronology chronology31 = instant30.getChronology();
        org.joda.time.Period period32 = new org.joda.time.Period((long) 53, (long) (-1), periodType23, chronology31);
        org.joda.time.DateTimeField dateTimeField33 = dateTimeFieldType18.getField(chronology31);
        java.util.Locale locale34 = java.util.Locale.UK;
        java.lang.String str35 = locale34.getDisplayLanguage();
        int int36 = dateTimeField33.getMaximumTextLength(locale34);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket37 = new org.joda.time.format.DateTimeParserBucket(3155695200000L, chronology16, locale34);
        org.joda.time.LocalDate localDate38 = new org.joda.time.LocalDate(chronology16);
        org.joda.time.DateTime dateTime39 = dateTime8.toDateTime(chronology16);
        org.joda.time.DurationField durationField40 = chronology16.eras();
        org.joda.time.DateTime dateTime41 = instant6.toDateTime(chronology16);
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(instant4);
        org.junit.Assert.assertNotNull(instant6);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "ISOChronology[UTC]" + "'", str17, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertNotNull(periodType23);
        org.junit.Assert.assertNotNull(durationFieldType26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "PeriodType[YearDayTime]" + "'", str27, "PeriodType[YearDayTime]");
        org.junit.Assert.assertNotNull(instant30);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "\u82f1\u6587" + "'", str35, "\u82f1\u6587");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 4 + "'", int36 == 4);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(durationField40);
        org.junit.Assert.assertNotNull(dateTime41);
    }

    @Test
    public void test07680() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07680");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.monthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.minuteOfDay();
        boolean boolean3 = localDate0.isSupported(dateTimeFieldType2);
        int int4 = localDate0.getDayOfYear();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateMidnight dateMidnight6 = localDate0.toDateMidnight(dateTimeZone5);
        org.joda.time.MutableDateTime mutableDateTime7 = org.joda.time.MutableDateTime.now();
        mutableDateTime7.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime10 = mutableDateTime7.copy();
        mutableDateTime7.setDate((long) '#');
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property14 = localDate13.monthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.minuteOfDay();
        boolean boolean16 = localDate13.isSupported(dateTimeFieldType15);
        int int17 = localDate13.getDayOfYear();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateMidnight dateMidnight19 = localDate13.toDateMidnight(dateTimeZone18);
        org.joda.time.DateTime dateTime20 = mutableDateTime7.toDateTime(dateTimeZone18);
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime(dateTimeZone18);
        org.joda.time.Interval interval22 = localDate0.toInterval(dateTimeZone18);
        java.lang.String str23 = dateTimeZone18.getID();
        java.lang.String str25 = dateTimeZone18.getName(189345600086400L);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime(chronology26);
        int int28 = dateTime27.getYearOfCentury();
        int int29 = dateTime27.getWeekyear();
        org.joda.time.DateTime dateTime31 = dateTime27.plus((long) 15);
        org.joda.time.DateTime.Property property32 = dateTime27.year();
        org.joda.time.DateTime dateTime33 = property32.roundHalfFloorCopy();
        org.joda.time.DateTime.Property property34 = dateTime33.millisOfSecond();
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime((long) 1);
        org.joda.time.Duration duration38 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period39 = duration38.toPeriod();
        org.joda.time.Duration duration42 = duration38.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Period period43 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime36, (org.joda.time.ReadableDuration) duration42);
        org.joda.time.Period period45 = period43.plusSeconds((int) (byte) 0);
        org.joda.time.MutableDateTime mutableDateTime46 = org.joda.time.MutableDateTime.now();
        mutableDateTime46.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime49 = mutableDateTime46.copy();
        org.joda.time.MutableDateTime.Property property50 = mutableDateTime46.weekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime51 = property50.roundHalfFloor();
        org.joda.time.MutableDateTime mutableDateTime52 = property50.roundHalfCeiling();
        org.joda.time.DateTimeFieldType dateTimeFieldType53 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.ReadableInstant readableInstant56 = null;
        org.joda.time.ReadableInstant readableInstant57 = null;
        org.joda.time.PeriodType periodType58 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod59 = new org.joda.time.MutablePeriod(readableInstant56, readableInstant57, periodType58);
        org.joda.time.DurationFieldType durationFieldType61 = periodType58.getFieldType((int) (short) 0);
        java.lang.String str62 = periodType58.toString();
        org.joda.time.Instant instant63 = new org.joda.time.Instant();
        org.joda.time.Instant instant65 = instant63.withMillis(0L);
        org.joda.time.Chronology chronology66 = instant65.getChronology();
        org.joda.time.Period period67 = new org.joda.time.Period((long) 53, (long) (-1), periodType58, chronology66);
        org.joda.time.DateTimeField dateTimeField68 = dateTimeFieldType53.getField(chronology66);
        java.util.Locale locale69 = java.util.Locale.UK;
        java.lang.String str70 = locale69.getDisplayLanguage();
        int int71 = dateTimeField68.getMaximumTextLength(locale69);
        mutableDateTime52.setRounding(dateTimeField68);
        org.joda.time.Duration duration73 = period43.toDurationFrom((org.joda.time.ReadableInstant) mutableDateTime52);
        org.joda.time.MutableDateTime.Property property74 = mutableDateTime52.centuryOfEra();
        int int75 = mutableDateTime52.getYear();
        int int76 = dateTime33.compareTo((org.joda.time.ReadableInstant) mutableDateTime52);
        mutableDateTime52.setMinuteOfHour(23);
        org.joda.time.Duration duration80 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Hours hours81 = duration80.toStandardHours();
        org.joda.time.Chronology chronology82 = null;
        org.joda.time.DateTime dateTime83 = new org.joda.time.DateTime(chronology82);
        int int84 = dateTime83.getSecondOfMinute();
        org.joda.time.MutablePeriod mutablePeriod85 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration80, (org.joda.time.ReadableInstant) dateTime83);
        org.joda.time.DateTime dateTime87 = dateTime83.plus(0L);
        org.joda.time.Instant instant88 = dateTime87.toInstant();
        org.joda.time.DateTime.Property property89 = dateTime87.weekOfWeekyear();
        int int90 = dateTime87.getMillisOfDay();
        org.joda.time.Instant instant91 = dateTime87.toInstant();
        mutableDateTime52.setDate((org.joda.time.ReadableInstant) instant91);
        int int93 = dateTimeZone18.getOffset((org.joda.time.ReadableInstant) instant91);
        org.joda.time.Instant instant94 = instant91.toInstant();
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 53 + "'", int4 == 53);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(mutableDateTime7);
        org.junit.Assert.assertNotNull(mutableDateTime10);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 53 + "'", int17 == 53);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(dateMidnight19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "UTC" + "'", str23, "UTC");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "+00:00" + "'", str25, "+00:00");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 22 + "'", int28 == 22);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2022 + "'", int29 == 2022);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertNotNull(period39);
        org.junit.Assert.assertNotNull(duration42);
        org.junit.Assert.assertNotNull(period45);
        org.junit.Assert.assertNotNull(mutableDateTime46);
        org.junit.Assert.assertNotNull(mutableDateTime49);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertNotNull(mutableDateTime51);
        org.junit.Assert.assertNotNull(mutableDateTime52);
        org.junit.Assert.assertNotNull(dateTimeFieldType53);
        org.junit.Assert.assertNotNull(periodType58);
        org.junit.Assert.assertNotNull(durationFieldType61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "PeriodType[YearDayTime]" + "'", str62, "PeriodType[YearDayTime]");
        org.junit.Assert.assertNotNull(instant65);
        org.junit.Assert.assertNotNull(chronology66);
        org.junit.Assert.assertNotNull(dateTimeField68);
        org.junit.Assert.assertNotNull(locale69);
        org.junit.Assert.assertEquals(locale69.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "\u82f1\u6587" + "'", str70, "\u82f1\u6587");
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 4 + "'", int71 == 4);
        org.junit.Assert.assertNotNull(duration73);
        org.junit.Assert.assertNotNull(property74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 2022 + "'", int75 == 2022);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + (-1) + "'", int76 == (-1));
        org.junit.Assert.assertNotNull(duration80);
        org.junit.Assert.assertNotNull(hours81);
// flaky:         org.junit.Assert.assertTrue("'" + int84 + "' != '" + 51 + "'", int84 == 51);
        org.junit.Assert.assertNotNull(dateTime87);
        org.junit.Assert.assertNotNull(instant88);
        org.junit.Assert.assertNotNull(property89);
// flaky:         org.junit.Assert.assertTrue("'" + int90 + "' != '" + 26631338 + "'", int90 == 26631338);
        org.junit.Assert.assertNotNull(instant91);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 0 + "'", int93 == 0);
        org.junit.Assert.assertNotNull(instant94);
    }

    @Test
    public void test07681() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07681");
        org.joda.time.PeriodType periodType3 = org.joda.time.PeriodType.yearDay();
        java.lang.String str4 = periodType3.getName();
        org.joda.time.MutablePeriod mutablePeriod5 = new org.joda.time.MutablePeriod(100L, periodType3);
        org.joda.time.Duration duration7 = org.joda.time.Duration.standardDays((long) (byte) 1);
        java.lang.String str8 = duration7.toString();
        org.joda.time.Duration duration10 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Hours hours11 = duration10.toStandardHours();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime(chronology12);
        int int14 = dateTime13.getSecondOfMinute();
        org.joda.time.MutablePeriod mutablePeriod15 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration10, (org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.Duration duration16 = duration7.plus((org.joda.time.ReadableDuration) duration10);
        org.joda.time.ReadableInstant readableInstant21 = null;
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.PeriodType periodType23 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod24 = new org.joda.time.MutablePeriod(readableInstant21, readableInstant22, periodType23);
        org.joda.time.DurationFieldType durationFieldType26 = periodType23.getFieldType((int) (short) 0);
        java.lang.String str27 = periodType23.toString();
        org.joda.time.Instant instant28 = new org.joda.time.Instant();
        org.joda.time.Instant instant30 = instant28.withMillis(0L);
        org.joda.time.Chronology chronology31 = instant30.getChronology();
        org.joda.time.Period period32 = new org.joda.time.Period((long) 53, (long) (-1), periodType23, chronology31);
        org.joda.time.Period period33 = new org.joda.time.Period((long) (short) -1, (long) 26148950, periodType23);
        org.joda.time.Instant instant34 = new org.joda.time.Instant();
        org.joda.time.Instant instant36 = instant34.withMillis(0L);
        org.joda.time.Chronology chronology37 = instant36.getChronology();
        org.joda.time.DurationField durationField38 = chronology37.eras();
        org.joda.time.LocalTime localTime39 = org.joda.time.LocalTime.now(chronology37);
        org.joda.time.DurationField durationField40 = chronology37.eras();
        org.joda.time.LocalTime localTime41 = org.joda.time.LocalTime.now(chronology37);
        org.joda.time.Period period42 = duration7.toPeriod(periodType23, chronology37);
        org.joda.time.Period period43 = new org.joda.time.Period(1671667200000L, 946312L, periodType3, chronology37);
        org.joda.time.DateTime dateTime44 = new org.joda.time.DateTime(chronology37);
        org.joda.time.MutableDateTime mutableDateTime45 = org.joda.time.MutableDateTime.now(chronology37);
        mutableDateTime45.addWeekyears(317);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime45.setDayOfMonth(26309630);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26309630 for dayOfMonth must be in the range [1,28]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "YearDay" + "'", str4, "YearDay");
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "PT86400S" + "'", str8, "PT86400S");
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(hours11);
// flaky:         org.junit.Assert.assertTrue("'" + int14 + "' != '" + 51 + "'", int14 == 51);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(periodType23);
        org.junit.Assert.assertNotNull(durationFieldType26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "PeriodType[YearDayTime]" + "'", str27, "PeriodType[YearDayTime]");
        org.junit.Assert.assertNotNull(instant30);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(instant36);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(durationField38);
        org.junit.Assert.assertNotNull(localTime39);
        org.junit.Assert.assertNotNull(durationField40);
        org.junit.Assert.assertNotNull(localTime41);
        org.junit.Assert.assertNotNull(period42);
        org.junit.Assert.assertNotNull(mutableDateTime45);
    }

    @Test
    public void test07682() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07682");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property1 = mutableDateTime0.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime3 = property1.set(45);
        org.joda.time.MutableDateTime mutableDateTime4 = property1.roundFloor();
        org.joda.time.MutableDateTime mutableDateTime6 = property1.add(45);
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.UTC;
        java.util.TimeZone timeZone8 = dateTimeZone7.toTimeZone();
        long long10 = dateTimeZone7.previousTransition(100L);
        int int12 = dateTimeZone7.getStandardOffset(86403200L);
        org.joda.time.DateTime dateTime13 = mutableDateTime6.toDateTime(dateTimeZone7);
        mutableDateTime6.setWeekyear(26202);
        int int16 = mutableDateTime6.getWeekOfWeekyear();
        org.joda.time.MutableDateTime.Property property17 = mutableDateTime6.year();
        java.util.Locale.Builder builder18 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder19 = builder18.clear();
        java.util.Locale locale20 = java.util.Locale.GERMAN;
        java.lang.String str21 = locale20.getDisplayName();
        java.lang.String str22 = locale20.getISO3Language();
        java.util.Locale.Builder builder23 = builder19.setLocale(locale20);
        java.util.Locale.Builder builder24 = builder19.clearExtensions();
        java.util.Locale locale25 = builder19.build();
        java.util.Locale.Builder builder27 = builder19.addUnicodeLocaleAttribute("100");
        java.util.Locale.Builder builder28 = builder27.clearExtensions();
        boolean boolean29 = property17.equals((java.lang.Object) builder28);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder32 = builder28.setUnicodeLocaleKeyword("2022-02-22T07:17:09.135Z", "Italy");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale keyword key: 2022-02-22T07:17:09.135Z [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(mutableDateTime3);
        org.junit.Assert.assertNotNull(mutableDateTime4);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(timeZone8);
        org.junit.Assert.assertEquals(timeZone8.getDisplayName(), "\u5354\u8abf\u4e16\u754c\u6642\u9593");
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 100L + "'", long10 == 100L);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "de");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "\u5fb7\u6587" + "'", str21, "\u5fb7\u6587");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "deu" + "'", str22, "deu");
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "de");
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
    }

    @Test
    public void test07683() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07683");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property1 = mutableDateTime0.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime3 = property1.set(45);
        org.joda.time.MutableDateTime mutableDateTime4 = property1.roundFloor();
        org.joda.time.MutableDateTime mutableDateTime6 = property1.add(45);
        mutableDateTime6.addWeeks(10);
        org.joda.time.LocalDateTime localDateTime9 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.withHourOfDay(10);
        org.joda.time.LocalDateTime.Property property12 = localDateTime9.hourOfDay();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime9.plusMillis((int) (byte) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.clockhourOfDay();
        java.lang.String str16 = dateTimeFieldType15.getName();
        int int17 = localDateTime9.indexOf(dateTimeFieldType15);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime9.minusSeconds((int) (short) 0);
        org.joda.time.Instant instant20 = new org.joda.time.Instant();
        org.joda.time.Instant instant22 = instant20.minus((long) 0);
        org.joda.time.DateTime dateTime23 = localDateTime9.toDateTime((org.joda.time.ReadableInstant) instant22);
        boolean boolean24 = mutableDateTime6.isBefore((org.joda.time.ReadableInstant) dateTime23);
        mutableDateTime6.addMinutes((int) (byte) 10);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime((long) 1, chronology28);
        int int30 = dateTime29.getMinuteOfDay();
        int int31 = dateTime29.getEra();
        int int32 = dateTime29.getWeekOfWeekyear();
        org.joda.time.DateTime dateTime34 = dateTime29.withDayOfYear(24);
        org.joda.time.DateTimeZone dateTimeZone35 = dateTime34.getZone();
        mutableDateTime6.setZone(dateTimeZone35);
        org.joda.time.Duration duration38 = org.joda.time.Duration.standardHours((long) 52);
        org.joda.time.MutablePeriod mutablePeriod39 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) mutableDateTime6, (org.joda.time.ReadableDuration) duration38);
        org.joda.time.MutableDateTime.Property property40 = mutableDateTime6.dayOfWeek();
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(mutableDateTime3);
        org.junit.Assert.assertNotNull(mutableDateTime4);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "clockhourOfDay" + "'", str16, "clockhourOfDay");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(instant22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertNotNull(property40);
    }

    @Test
    public void test07684() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07684");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property1 = mutableDateTime0.centuryOfEra();
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime0.dayOfWeek();
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = property2.getFieldType();
        org.joda.time.MutableDateTime mutableDateTime4 = property2.getMutableDateTime();
        org.joda.time.MutableDateTime.Property property5 = mutableDateTime4.yearOfCentury();
        mutableDateTime4.addMillis(161);
        mutableDateTime4.setTime(8646567411879L);
        org.joda.time.MutableDateTime.Property property10 = mutableDateTime4.monthOfYear();
        int int11 = mutableDateTime4.getYear();
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertNotNull(mutableDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2022 + "'", int11 == 2022);
    }

    @Test
    public void test07685() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07685");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime3 = mutableDateTime0.copy();
        org.joda.time.MutableDateTime.Property property4 = mutableDateTime0.weekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime5 = property4.roundHalfFloor();
        org.joda.time.MutableDateTime mutableDateTime6 = property4.roundHalfCeiling();
        org.joda.time.MutableDateTime mutableDateTime8 = property4.set(1);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(chronology9);
        int int11 = dateTime10.getYearOfCentury();
        int int12 = dateTime10.getWeekyear();
        org.joda.time.DateTime dateTime13 = dateTime10.withEarlierOffsetAtOverlap();
        java.lang.String str14 = dateTime13.toString();
        org.joda.time.MutableDateTime mutableDateTime15 = dateTime13.toMutableDateTime();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.UTC;
        boolean boolean17 = dateTimeZone16.isFixed();
        mutableDateTime15.setZoneRetainFields(dateTimeZone16);
        org.joda.time.MutableDateTime mutableDateTime19 = mutableDateTime8.toMutableDateTime(dateTimeZone16);
        int int20 = mutableDateTime19.getYearOfCentury();
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime19.setSecondOfMinute(26389588);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26389588 for secondOfMinute must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(mutableDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(mutableDateTime5);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(mutableDateTime8);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 22 + "'", int11 == 22);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2022 + "'", int12 == 2022);
        org.junit.Assert.assertNotNull(dateTime13);
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "2022-02-22T07:23:51.487Z" + "'", str14, "2022-02-22T07:23:51.487Z");
        org.junit.Assert.assertNotNull(mutableDateTime15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(mutableDateTime19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 22 + "'", int20 == 22);
    }

    @Test
    public void test07686() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07686");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.add((long) 'a');
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime0.yearOfCentury();
        mutableDateTime0.addSeconds(0);
        mutableDateTime0.setWeekyear((int) 'u');
        java.lang.Object obj8 = null;
        org.joda.time.MutableDateTime mutableDateTime9 = org.joda.time.MutableDateTime.now();
        mutableDateTime9.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime12 = mutableDateTime9.copy();
        mutableDateTime9.setDate((long) '#');
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property16 = localDate15.monthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.minuteOfDay();
        boolean boolean18 = localDate15.isSupported(dateTimeFieldType17);
        int int19 = localDate15.getDayOfYear();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateMidnight dateMidnight21 = localDate15.toDateMidnight(dateTimeZone20);
        org.joda.time.DateTime dateTime22 = mutableDateTime9.toDateTime(dateTimeZone20);
        org.joda.time.LocalDate localDate23 = org.joda.time.LocalDate.now(dateTimeZone20);
        org.joda.time.MutableDateTime mutableDateTime24 = new org.joda.time.MutableDateTime(obj8, dateTimeZone20);
        java.lang.String str26 = dateTimeZone20.getName(105144L);
        long long28 = dateTimeZone20.nextTransition(3155760000000L);
        mutableDateTime0.setZone(dateTimeZone20);
        org.joda.time.MutableDateTime mutableDateTime30 = org.joda.time.MutableDateTime.now(dateTimeZone20);
        mutableDateTime30.addWeekyears(15610648);
        mutableDateTime30.addMonths(78);
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertNotNull(mutableDateTime12);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 53 + "'", int19 == 53);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(dateMidnight21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "+00:00" + "'", str26, "+00:00");
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 3155760000000L + "'", long28 == 3155760000000L);
        org.junit.Assert.assertNotNull(mutableDateTime30);
    }

    @Test
    public void test07687() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07687");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property1 = mutableDateTime0.centuryOfEra();
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime0.dayOfWeek();
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime0.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime4 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.withCenturyOfEra((int) 'a');
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime(chronology11);
        org.joda.time.DateTime dateTime14 = dateTime12.plusMinutes(15);
        org.joda.time.DateTime dateTime15 = localDateTime8.toDateTime((org.joda.time.ReadableInstant) dateTime12);
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime17 = localDateTime8.toDateTime(dateTimeZone16);
        org.joda.time.DateTime.Property property18 = dateTime17.minuteOfHour();
        org.joda.time.DateTime dateTime19 = property18.roundFloorCopy();
        org.joda.time.DateTime dateTime21 = dateTime19.withDayOfYear(46);
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.UTC;
        boolean boolean23 = dateTimeZone22.isFixed();
        org.joda.time.DateTime dateTime24 = dateTime19.withZone(dateTimeZone22);
        org.joda.time.MutableDateTime mutableDateTime25 = mutableDateTime0.toMutableDateTime(dateTimeZone22);
        java.lang.String str27 = dateTimeZone22.getName(0L);
        boolean boolean28 = dateTimeZone22.isFixed();
        int int30 = dateTimeZone22.getOffsetFromLocal((long) 5);
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(mutableDateTime25);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "+00:00" + "'", str27, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
    }

    @Test
    public void test07688() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07688");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime1 = instant0.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.weekyear();
        org.joda.time.MutableDateTime mutableDateTime3 = property2.roundHalfEven();
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(mutableDateTime3);
    }

    @Test
    public void test07689() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07689");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime3 = mutableDateTime0.copy();
        org.joda.time.MutableDateTime.Property property4 = mutableDateTime0.yearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime5 = org.joda.time.MutableDateTime.now();
        mutableDateTime5.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime8 = mutableDateTime5.copy();
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime5.yearOfEra();
        org.joda.time.MutableDateTime mutableDateTime10 = property9.getMutableDateTime();
        mutableDateTime0.setTime((org.joda.time.ReadableInstant) mutableDateTime10);
        mutableDateTime0.addMillis(1898);
        org.joda.time.DateTime dateTime15 = org.joda.time.DateTime.parse("2022-02-22T07:17:18.300Z");
        int int16 = mutableDateTime0.compareTo((org.joda.time.ReadableInstant) dateTime15);
        int int17 = dateTime15.getEra();
        org.joda.time.LocalDateTime localDateTime18 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.withHourOfDay(10);
        org.joda.time.LocalDateTime.Property property21 = localDateTime18.hourOfDay();
        org.joda.time.LocalDateTime localDateTime23 = localDateTime18.plusMillis((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property24 = localDateTime18.dayOfYear();
        org.joda.time.LocalDateTime localDateTime26 = localDateTime18.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime18.withYear(45);
        org.joda.time.Duration duration30 = org.joda.time.Duration.standardHours((long) 2);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime28.plus((org.joda.time.ReadableDuration) duration30);
        org.joda.time.DateTime dateTime33 = dateTime15.withDurationAdded((org.joda.time.ReadableDuration) duration30, 190800000);
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(mutableDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(mutableDateTime5);
        org.junit.Assert.assertNotNull(mutableDateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(mutableDateTime10);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(dateTime33);
    }

    @Test
    public void test07690() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07690");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.add((long) 'a');
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime0.yearOfCentury();
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period6 = duration5.toPeriod();
        org.joda.time.Duration duration8 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration11 = duration8.withDurationAdded((long) (short) 100, (int) ' ');
        org.joda.time.Duration duration12 = duration5.minus((org.joda.time.ReadableDuration) duration11);
        mutableDateTime0.add((org.joda.time.ReadableDuration) duration5);
        org.joda.time.MutableDateTime.Property property14 = mutableDateTime0.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime15 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.withHourOfDay(10);
        org.joda.time.LocalDateTime.Property property18 = localDateTime15.hourOfDay();
        org.joda.time.DateTimeField dateTimeField19 = property18.getField();
        int int20 = property18.get();
        java.util.Locale locale21 = java.util.Locale.getDefault();
        java.lang.String str22 = property18.getAsShortText(locale21);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime((long) (byte) -1, chronology24);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime25.plusMonths(46);
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = org.joda.time.DateTimeFieldType.minuteOfDay();
        int int29 = localDateTime27.get(dateTimeFieldType28);
        java.util.Locale locale30 = java.util.Locale.TRADITIONAL_CHINESE;
        boolean boolean31 = localDateTime27.equals((java.lang.Object) locale30);
        java.lang.String str32 = locale21.getDisplayVariant(locale30);
        java.lang.String str33 = locale21.getScript();
        java.lang.String str34 = property14.getAsShortText(locale21);
        org.joda.time.MutableDateTime mutableDateTime35 = property14.roundHalfCeiling();
        mutableDateTime35.addWeeks(48);
        org.joda.time.MutableDateTime.Property property38 = mutableDateTime35.secondOfMinute();
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 7 + "'", int20 == 7);
        org.junit.Assert.assertNotNull(locale21);
// flaky:         org.junit.Assert.assertEquals(locale21.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "7" + "'", str22, "7");
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(dateTimeFieldType28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1439 + "'", int29 == 1439);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "zh_TW");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "20" + "'", str34, "20");
        org.junit.Assert.assertNotNull(mutableDateTime35);
        org.junit.Assert.assertNotNull(property38);
    }

    @Test
    public void test07691() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07691");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.add((long) 'a');
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime0.yearOfCentury();
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period6 = duration5.toPeriod();
        org.joda.time.Duration duration8 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration11 = duration8.withDurationAdded((long) (short) 100, (int) ' ');
        org.joda.time.Duration duration12 = duration5.minus((org.joda.time.ReadableDuration) duration11);
        mutableDateTime0.add((org.joda.time.ReadableDuration) duration5);
        org.joda.time.MutableDateTime.Property property14 = mutableDateTime0.centuryOfEra();
        mutableDateTime0.addHours((int) (byte) 10);
        mutableDateTime0.addWeeks(20);
        org.joda.time.DateTimeField dateTimeField19 = mutableDateTime0.getRoundingField();
        org.joda.time.MutableDateTime mutableDateTime20 = org.joda.time.MutableDateTime.now();
        java.lang.Object obj21 = mutableDateTime20.clone();
        mutableDateTime20.setTime((long) 46);
        org.joda.time.MutableDateTime.Property property24 = mutableDateTime20.dayOfWeek();
        org.joda.time.MutableDateTime mutableDateTime26 = property24.add(1L);
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.UTC;
        java.util.TimeZone timeZone28 = dateTimeZone27.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.UTC;
        long long31 = dateTimeZone27.getMillisKeepLocal(dateTimeZone29, (long) 44);
        org.joda.time.DateTime dateTime32 = org.joda.time.DateTime.now(dateTimeZone27);
        mutableDateTime26.setZoneRetainFields(dateTimeZone27);
        mutableDateTime26.addSeconds((int) (short) 10);
        java.lang.Object obj36 = mutableDateTime26.clone();
        org.joda.time.MutableDateTime.Property property37 = mutableDateTime26.era();
        boolean boolean38 = mutableDateTime0.isAfter((org.joda.time.ReadableInstant) mutableDateTime26);
        org.joda.time.MutableDateTime.Property property39 = mutableDateTime26.millisOfDay();
        java.lang.String str40 = property39.getAsText();
        org.joda.time.MutableDateTime mutableDateTime42 = property39.add((long) '4');
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime44 = property39.set((-1351));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -1351 for millisOfDay must be in the range [0,86399999]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNull(dateTimeField19);
        org.junit.Assert.assertNotNull(mutableDateTime20);
        org.junit.Assert.assertNotNull(obj21);
// flaky:         org.junit.Assert.assertEquals(obj21.toString(), "2022-02-22T07:23:51.759Z");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj21), "2022-02-22T07:23:51.759Z");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj21), "2022-02-22T07:23:51.759Z");
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(mutableDateTime26);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertNotNull(timeZone28);
// flaky:         org.junit.Assert.assertEquals(timeZone28.getDisplayName(), "Temps universel coordonn\351");
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 44L + "'", long31 == 44L);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(obj36);
        org.junit.Assert.assertEquals(obj36.toString(), "2022-02-23T00:00:10.046Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj36), "2022-02-23T00:00:10.046Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj36), "2022-02-23T00:00:10.046Z");
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "10046" + "'", str40, "10046");
        org.junit.Assert.assertNotNull(mutableDateTime42);
    }

    @Test
    public void test07692() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07692");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        int int2 = dateTime1.getYearOfCentury();
        int int3 = dateTime1.getWeekyear();
        org.joda.time.DateTime dateTime4 = dateTime1.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime.Property property5 = dateTime1.yearOfEra();
        org.joda.time.DateTime dateTime6 = property5.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime7 = property5.roundHalfEvenCopy();
        org.joda.time.Duration duration9 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Hours hours10 = duration9.toStandardHours();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime(chronology11);
        int int13 = dateTime12.getSecondOfMinute();
        org.joda.time.MutablePeriod mutablePeriod14 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration9, (org.joda.time.ReadableInstant) dateTime12);
        mutablePeriod14.addSeconds(292278993);
        mutablePeriod14.setPeriod((long) 45, 946312L);
        org.joda.time.DateTime dateTime20 = dateTime7.minus((org.joda.time.ReadablePeriod) mutablePeriod14);
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property22 = localDate21.monthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = org.joda.time.DateTimeFieldType.minuteOfDay();
        boolean boolean24 = localDate21.isSupported(dateTimeFieldType23);
        int int25 = dateTime20.get(dateTimeFieldType23);
        int int26 = dateTime20.getSecondOfMinute();
        org.joda.time.MutableDateTime mutableDateTime27 = dateTime20.toMutableDateTimeISO();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 22 + "'", int2 == 22);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2022 + "'", int3 == 2022);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(hours10);
// flaky:         org.junit.Assert.assertTrue("'" + int13 + "' != '" + 51 + "'", int13 == 51);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1424 + "'", int25 == 1424);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 13 + "'", int26 == 13);
        org.junit.Assert.assertNotNull(mutableDateTime27);
    }

    @Test
    public void test07693() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07693");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property1 = mutableDateTime0.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime3 = property1.set(45);
        org.joda.time.MutableDateTime mutableDateTime4 = property1.roundFloor();
        org.joda.time.MutableDateTime mutableDateTime6 = property1.add(45);
        mutableDateTime6.addWeeks(10);
        org.joda.time.LocalDateTime localDateTime9 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.withHourOfDay(10);
        org.joda.time.LocalDateTime.Property property12 = localDateTime9.hourOfDay();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime9.plusMillis((int) (byte) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.clockhourOfDay();
        java.lang.String str16 = dateTimeFieldType15.getName();
        int int17 = localDateTime9.indexOf(dateTimeFieldType15);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime9.minusSeconds((int) (short) 0);
        org.joda.time.Instant instant20 = new org.joda.time.Instant();
        org.joda.time.Instant instant22 = instant20.minus((long) 0);
        org.joda.time.DateTime dateTime23 = localDateTime9.toDateTime((org.joda.time.ReadableInstant) instant22);
        boolean boolean24 = mutableDateTime6.isBefore((org.joda.time.ReadableInstant) dateTime23);
        mutableDateTime6.addMinutes((int) (byte) 10);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime((long) 1, chronology28);
        int int30 = dateTime29.getMinuteOfDay();
        int int31 = dateTime29.getEra();
        int int32 = dateTime29.getWeekOfWeekyear();
        org.joda.time.DateTime dateTime34 = dateTime29.withDayOfYear(24);
        org.joda.time.DateTimeZone dateTimeZone35 = dateTime34.getZone();
        mutableDateTime6.setZone(dateTimeZone35);
        org.joda.time.Duration duration38 = org.joda.time.Duration.standardHours((long) 52);
        org.joda.time.MutablePeriod mutablePeriod39 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) mutableDateTime6, (org.joda.time.ReadableDuration) duration38);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime6.setDate(83100000, 26579, 33653);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26579 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(mutableDateTime3);
        org.junit.Assert.assertNotNull(mutableDateTime4);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "clockhourOfDay" + "'", str16, "clockhourOfDay");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(instant22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertNotNull(duration38);
    }

    @Test
    public void test07694() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07694");
        org.joda.time.Instant instant0 = org.joda.time.Instant.now();
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property2 = localDate1.dayOfYear();
        org.joda.time.PeriodType periodType5 = null;
        org.joda.time.Period period6 = new org.joda.time.Period((long) 100, 1L, periodType5);
        org.joda.time.Period period8 = period6.minusSeconds((-1));
        java.lang.String str9 = period6.toString();
        org.joda.time.LocalDate localDate11 = localDate1.withPeriodAdded((org.joda.time.ReadablePeriod) period6, 3);
        org.joda.time.DateTime dateTime12 = localDate11.toDateTimeAtCurrentTime();
        org.joda.time.Chronology chronology14 = null;
        java.util.Locale locale15 = java.util.Locale.GERMAN;
        java.util.Locale locale16 = java.util.Locale.CANADA;
        java.lang.String str17 = locale15.getDisplayVariant(locale16);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket18 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology14, locale16);
        java.lang.Object obj19 = dateTimeParserBucket18.saveState();
        org.joda.time.DateTimeZone dateTimeZone20 = dateTimeParserBucket18.getZone();
        org.joda.time.DateTime dateTime21 = localDate11.toDateTimeAtStartOfDay(dateTimeZone20);
        org.joda.time.PeriodType periodType24 = null;
        org.joda.time.Period period25 = new org.joda.time.Period((long) 100, 1L, periodType24);
        org.joda.time.Period period27 = period25.minusSeconds((-1));
        org.joda.time.Period period29 = period27.multipliedBy((int) '#');
        org.joda.time.DurationFieldType durationFieldType30 = org.joda.time.DurationFieldType.centuries();
        int int31 = period29.get(durationFieldType30);
        boolean boolean32 = localDate11.isSupported(durationFieldType30);
        java.lang.String str33 = durationFieldType30.toString();
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime(chronology34);
        org.joda.time.DateTime dateTime37 = dateTime35.plusMinutes(15);
        org.joda.time.Chronology chronology38 = dateTime35.getChronology();
        org.joda.time.DurationField durationField39 = chronology38.hours();
        org.joda.time.DateTimeField dateTimeField40 = chronology38.minuteOfHour();
        boolean boolean41 = durationFieldType30.isSupported(chronology38);
        org.joda.time.DateTimeField dateTimeField42 = chronology38.halfdayOfDay();
        org.joda.time.MutableDateTime mutableDateTime43 = instant0.toMutableDateTime(chronology38);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime43.setSecondOfMinute(26596);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26596 for secondOfMinute must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(instant0);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "PT0.099S" + "'", str9, "PT0.099S");
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "de");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(obj19);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(durationFieldType30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "centuries" + "'", str33, "centuries");
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(durationField39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(mutableDateTime43);
    }

    @Test
    public void test07695() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07695");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime3 = mutableDateTime0.copy();
        org.joda.time.MutableDateTime.Property property4 = mutableDateTime0.weekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime5 = property4.roundHalfFloor();
        org.joda.time.MutableDateTime mutableDateTime6 = property4.roundHalfCeiling();
        org.joda.time.MutableDateTime mutableDateTime8 = property4.set(1);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(chronology9);
        int int11 = dateTime10.getYearOfCentury();
        int int12 = dateTime10.getWeekyear();
        org.joda.time.DateTime dateTime13 = dateTime10.withEarlierOffsetAtOverlap();
        java.lang.String str14 = dateTime13.toString();
        org.joda.time.MutableDateTime mutableDateTime15 = dateTime13.toMutableDateTime();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.UTC;
        boolean boolean17 = dateTimeZone16.isFixed();
        mutableDateTime15.setZoneRetainFields(dateTimeZone16);
        org.joda.time.MutableDateTime mutableDateTime19 = mutableDateTime8.toMutableDateTime(dateTimeZone16);
        org.joda.time.MutableDateTime.Property property20 = mutableDateTime19.yearOfCentury();
        org.joda.time.MutableDateTime.Property property21 = mutableDateTime19.weekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime23 = property21.add((long) 62176);
        org.joda.time.PeriodType periodType26 = null;
        org.joda.time.Period period27 = new org.joda.time.Period((long) 100, 1L, periodType26);
        org.joda.time.Period period29 = period27.minusSeconds((-1));
        org.joda.time.Period period31 = period29.multipliedBy((int) '#');
        org.joda.time.DurationFieldType durationFieldType32 = org.joda.time.DurationFieldType.centuries();
        int int33 = period31.get(durationFieldType32);
        int int34 = period31.getMinutes();
        mutableDateTime23.add((org.joda.time.ReadablePeriod) period31);
        boolean boolean36 = mutableDateTime23.isEqualNow();
        mutableDateTime23.addSeconds(26511);
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(mutableDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(mutableDateTime5);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(mutableDateTime8);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 22 + "'", int11 == 22);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2022 + "'", int12 == 2022);
        org.junit.Assert.assertNotNull(dateTime13);
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "2022-02-22T07:23:51.833Z" + "'", str14, "2022-02-22T07:23:51.833Z");
        org.junit.Assert.assertNotNull(mutableDateTime15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(mutableDateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(mutableDateTime23);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertNotNull(durationFieldType32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
    }

    @Test
    public void test07696() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07696");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(4);
        org.joda.time.MutableDateTime mutableDateTime2 = org.joda.time.MutableDateTime.now(dateTimeZone1);
        mutableDateTime2.setMillis(1645514199781L);
        org.joda.time.DateTimeField dateTimeField5 = mutableDateTime2.getRoundingField();
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime2.getZone();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(dateTimeZone6);
        java.lang.String str9 = dateTimeZone6.getName(9L);
        int int11 = dateTimeZone6.getStandardOffset(11850087L);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(mutableDateTime2);
        org.junit.Assert.assertNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+00:00:00.004" + "'", str9, "+00:00:00.004");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 4 + "'", int11 == 4);
    }

    @Test
    public void test07697() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07697");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.UTC;
        java.util.Locale locale3 = java.util.Locale.GERMAN;
        java.lang.String str4 = locale3.getDisplayName();
        java.lang.String str5 = dateTimeZone1.getName(100L, locale3);
        org.joda.time.MutableDateTime mutableDateTime6 = new org.joda.time.MutableDateTime(948227L, dateTimeZone1);
        org.joda.time.MutableDateTime.Property property7 = mutableDateTime6.year();
        org.joda.time.ReadableInstant readableInstant8 = null;
        mutableDateTime6.setMillis(readableInstant8);
        mutableDateTime6.addYears(36985848);
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime6.era();
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime17 = dateTime15.withZoneRetainFields(dateTimeZone16);
        boolean boolean19 = dateTime17.equals((java.lang.Object) (-1L));
        org.joda.time.Chronology chronology20 = dateTime17.getChronology();
        java.util.Locale locale21 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket23 = new org.joda.time.format.DateTimeParserBucket((long) 1, chronology20, locale21, (java.lang.Integer) 50);
        org.joda.time.DateTimeZone dateTimeZone24 = dateTimeParserBucket23.getZone();
        org.joda.time.DateTimeZone dateTimeZone25 = dateTimeParserBucket23.getZone();
        int int27 = dateTimeZone25.getStandardOffset(0L);
        mutableDateTime6.setZone(dateTimeZone25);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime6.setMinuteOfHour(26540);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26540 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "de");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u5fb7\u6587" + "'", str4, "\u5fb7\u6587");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "+00:00" + "'", str5, "+00:00");
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
    }

    @Test
    public void test07698() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07698");
        org.joda.time.ReadableDuration readableDuration0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.Period period2 = new org.joda.time.Period(readableDuration0, readableInstant1);
        org.joda.time.Period period4 = period2.withDays((int) (byte) 1);
        org.joda.time.Period period6 = period4.plusMinutes(26148950);
        org.joda.time.Period period8 = period4.plusMinutes(1200);
        int int9 = period4.getYears();
        org.joda.time.Instant instant10 = new org.joda.time.Instant();
        org.joda.time.DateTime dateTime11 = instant10.toDateTime();
        org.joda.time.LocalDateTime localDateTime12 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.withCenturyOfEra((int) 'a');
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime(chronology19);
        org.joda.time.DateTime dateTime22 = dateTime20.plusMinutes(15);
        org.joda.time.DateTime dateTime23 = localDateTime16.toDateTime((org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime25 = localDateTime16.toDateTime(dateTimeZone24);
        org.joda.time.DateTime dateTime26 = dateTime11.withZoneRetainFields(dateTimeZone24);
        java.lang.String str27 = dateTimeZone24.toString();
        java.lang.String str28 = dateTimeZone24.getID();
        org.joda.time.MutableDateTime mutableDateTime29 = new org.joda.time.MutableDateTime(dateTimeZone24);
        org.joda.time.LocalDateTime localDateTime31 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime33 = localDateTime31.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime35 = localDateTime33.withHourOfDay(10);
        org.joda.time.DateTimeField dateTimeField37 = localDateTime35.getField((int) (byte) 0);
        java.util.Locale locale39 = java.util.Locale.CANADA;
        java.lang.String str40 = dateTimeField37.getAsShortText((long) '4', locale39);
        java.lang.String str41 = locale39.getVariant();
        java.lang.String str42 = dateTimeZone24.getName((long) 44, locale39);
        org.joda.time.LocalDateTime localDateTime43 = new org.joda.time.LocalDateTime(dateTimeZone24);
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.UTC;
        java.util.Locale locale47 = java.util.Locale.GERMAN;
        java.lang.String str48 = locale47.getDisplayName();
        java.lang.String str49 = dateTimeZone45.getName(100L, locale47);
        org.joda.time.MutableDateTime mutableDateTime50 = new org.joda.time.MutableDateTime(948227L, dateTimeZone45);
        long long51 = mutableDateTime50.getMillis();
        mutableDateTime50.setWeekyear(1439);
        boolean boolean55 = mutableDateTime50.isBefore(1645514186724L);
        org.joda.time.DateTimeZone dateTimeZone57 = org.joda.time.DateTimeZone.forOffsetMillis(36988464);
        mutableDateTime50.setZone(dateTimeZone57);
        org.joda.time.PeriodType periodType59 = org.joda.time.PeriodType.hours();
        org.joda.time.DurationFieldType durationFieldType60 = org.joda.time.DurationFieldType.millis();
        boolean boolean61 = periodType59.isSupported(durationFieldType60);
        mutableDateTime50.add(durationFieldType60, 26298778);
        java.lang.String str64 = durationFieldType60.getName();
        boolean boolean65 = localDateTime43.isSupported(durationFieldType60);
        org.joda.time.Period period67 = period4.withFieldAdded(durationFieldType60, 522);
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "UTC" + "'", str27, "UTC");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "UTC" + "'", str28, "UTC");
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "1970" + "'", str40, "1970");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "+00:00" + "'", str42, "+00:00");
        org.junit.Assert.assertNotNull(dateTimeZone45);
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "de");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "\u5fb7\u6587" + "'", str48, "\u5fb7\u6587");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "+00:00" + "'", str49, "+00:00");
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 948227L + "'", long51 == 948227L);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(dateTimeZone57);
        org.junit.Assert.assertNotNull(periodType59);
        org.junit.Assert.assertNotNull(durationFieldType60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "millis" + "'", str64, "millis");
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(period67);
    }

    @Test
    public void test07699() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07699");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.add((long) 'a');
        org.joda.time.Instant instant3 = new org.joda.time.Instant();
        org.joda.time.Instant instant5 = instant3.withMillis(0L);
        org.joda.time.DateTime dateTime6 = instant5.toDateTime();
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime((long) 1);
        org.joda.time.PeriodType periodType9 = org.joda.time.PeriodType.months();
        org.joda.time.Period period10 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime6, (org.joda.time.ReadableInstant) dateTime8, periodType9);
        org.joda.time.DateTime.Property property11 = dateTime8.minuteOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = property11.getFieldType();
        org.joda.time.MutableDateTime.Property property13 = mutableDateTime0.property(dateTimeFieldType12);
        mutableDateTime0.add(1645514161062L);
        org.joda.time.MutableDateTime.Property property16 = mutableDateTime0.minuteOfHour();
        org.joda.time.MutableDateTime mutableDateTime17 = property16.roundHalfCeiling();
        long long18 = property16.remainder();
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(instant5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(periodType9);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(mutableDateTime17);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
    }

    @Test
    public void test07700() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07700");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime3 = mutableDateTime0.copy();
        org.joda.time.MutableDateTime.Property property4 = mutableDateTime0.weekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime5 = property4.roundHalfFloor();
        org.joda.time.MutableDateTime mutableDateTime6 = property4.roundHalfCeiling();
        org.joda.time.MutableDateTime mutableDateTime8 = property4.set(1);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(chronology9);
        int int11 = dateTime10.getYearOfCentury();
        int int12 = dateTime10.getWeekyear();
        org.joda.time.DateTime dateTime13 = dateTime10.withEarlierOffsetAtOverlap();
        java.lang.String str14 = dateTime13.toString();
        org.joda.time.MutableDateTime mutableDateTime15 = dateTime13.toMutableDateTime();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.UTC;
        boolean boolean17 = dateTimeZone16.isFixed();
        mutableDateTime15.setZoneRetainFields(dateTimeZone16);
        org.joda.time.MutableDateTime mutableDateTime19 = mutableDateTime8.toMutableDateTime(dateTimeZone16);
        boolean boolean20 = mutableDateTime19.isEqualNow();
        org.joda.time.Duration duration22 = org.joda.time.Duration.standardDays((long) (byte) 1);
        java.lang.String str23 = duration22.toString();
        org.joda.time.Duration duration25 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Hours hours26 = duration25.toStandardHours();
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime(chronology27);
        int int29 = dateTime28.getSecondOfMinute();
        org.joda.time.MutablePeriod mutablePeriod30 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration25, (org.joda.time.ReadableInstant) dateTime28);
        org.joda.time.Duration duration31 = duration22.plus((org.joda.time.ReadableDuration) duration25);
        org.joda.time.Duration duration33 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period34 = duration33.toPeriod();
        org.joda.time.Duration duration36 = duration33.minus((long) 292278993);
        org.joda.time.MutableDateTime mutableDateTime37 = org.joda.time.MutableDateTime.now();
        mutableDateTime37.add((long) 'a');
        org.joda.time.MutableDateTime.Property property40 = mutableDateTime37.yearOfCentury();
        org.joda.time.Duration duration42 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period43 = duration42.toPeriod();
        org.joda.time.Duration duration45 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration48 = duration45.withDurationAdded((long) (short) 100, (int) ' ');
        org.joda.time.Duration duration49 = duration42.minus((org.joda.time.ReadableDuration) duration48);
        mutableDateTime37.add((org.joda.time.ReadableDuration) duration42);
        boolean boolean51 = duration36.isShorterThan((org.joda.time.ReadableDuration) duration42);
        boolean boolean52 = duration25.isLongerThan((org.joda.time.ReadableDuration) duration36);
        org.joda.time.DateTime dateTime54 = new org.joda.time.DateTime((long) 1);
        org.joda.time.Duration duration56 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period57 = duration56.toPeriod();
        org.joda.time.Duration duration60 = duration56.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Period period61 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime54, (org.joda.time.ReadableDuration) duration60);
        org.joda.time.Duration duration62 = duration36.plus((org.joda.time.ReadableDuration) duration60);
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.DateTime dateTime64 = new org.joda.time.DateTime(chronology63);
        int int65 = dateTime64.getYearOfCentury();
        int int66 = dateTime64.getWeekyear();
        org.joda.time.DateTime dateTime68 = dateTime64.plus((long) 15);
        org.joda.time.DateTime.Property property69 = dateTime64.year();
        org.joda.time.DateTime dateTime70 = property69.roundHalfFloorCopy();
        org.joda.time.ReadableDuration readableDuration71 = null;
        org.joda.time.ReadableInstant readableInstant72 = null;
        org.joda.time.Period period73 = new org.joda.time.Period(readableDuration71, readableInstant72);
        org.joda.time.PeriodType periodType76 = null;
        org.joda.time.Period period77 = new org.joda.time.Period((long) 100, 1L, periodType76);
        org.joda.time.Period period79 = period77.minusSeconds((-1));
        java.lang.String str80 = period77.toString();
        org.joda.time.Period period81 = period77.toPeriod();
        org.joda.time.PeriodType periodType82 = period77.getPeriodType();
        org.joda.time.Period period83 = period73.normalizedStandard(periodType82);
        java.lang.String str84 = periodType82.getName();
        org.joda.time.PeriodType periodType85 = periodType82.withYearsRemoved();
        org.joda.time.Period period86 = duration60.toPeriodTo((org.joda.time.ReadableInstant) dateTime70, periodType85);
        org.joda.time.MutablePeriod mutablePeriod87 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) mutableDateTime19, (org.joda.time.ReadableDuration) duration60);
        int int88 = mutablePeriod87.getYears();
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(mutableDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(mutableDateTime5);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(mutableDateTime8);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 22 + "'", int11 == 22);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2022 + "'", int12 == 2022);
        org.junit.Assert.assertNotNull(dateTime13);
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "2022-02-22T07:23:51.931Z" + "'", str14, "2022-02-22T07:23:51.931Z");
        org.junit.Assert.assertNotNull(mutableDateTime15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(mutableDateTime19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "PT86400S" + "'", str23, "PT86400S");
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertNotNull(hours26);
// flaky:         org.junit.Assert.assertTrue("'" + int29 + "' != '" + 51 + "'", int29 == 51);
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertNotNull(period34);
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertNotNull(mutableDateTime37);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(duration42);
        org.junit.Assert.assertNotNull(period43);
        org.junit.Assert.assertNotNull(duration45);
        org.junit.Assert.assertNotNull(duration48);
        org.junit.Assert.assertNotNull(duration49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(duration56);
        org.junit.Assert.assertNotNull(period57);
        org.junit.Assert.assertNotNull(duration60);
        org.junit.Assert.assertNotNull(duration62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 22 + "'", int65 == 22);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 2022 + "'", int66 == 2022);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertNotNull(property69);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertNotNull(period79);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "PT0.099S" + "'", str80, "PT0.099S");
        org.junit.Assert.assertNotNull(period81);
        org.junit.Assert.assertNotNull(periodType82);
        org.junit.Assert.assertNotNull(period83);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "Standard" + "'", str84, "Standard");
        org.junit.Assert.assertNotNull(periodType85);
        org.junit.Assert.assertNotNull(period86);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 0 + "'", int88 == 0);
    }

    @Test
    public void test07701() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07701");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.add((long) 'a');
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime0.yearOfCentury();
        mutableDateTime0.addSeconds(0);
        org.joda.time.Duration duration7 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Hours hours8 = duration7.toStandardHours();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(chronology9);
        int int11 = dateTime10.getSecondOfMinute();
        org.joda.time.MutablePeriod mutablePeriod12 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration7, (org.joda.time.ReadableInstant) dateTime10);
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((long) 1);
        org.joda.time.Instant instant15 = new org.joda.time.Instant();
        org.joda.time.Instant instant17 = instant15.withMillis(0L);
        org.joda.time.DateTime dateTime18 = instant17.toDateTime();
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((long) 1);
        org.joda.time.PeriodType periodType21 = org.joda.time.PeriodType.months();
        org.joda.time.Period period22 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime18, (org.joda.time.ReadableInstant) dateTime20, periodType21);
        org.joda.time.Period period23 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration7, (org.joda.time.ReadableInstant) dateTime14, periodType21);
        org.joda.time.Duration duration24 = new org.joda.time.Duration((org.joda.time.ReadableInstant) mutableDateTime0, (org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.Chronology chronology25 = dateTime14.getChronology();
        org.joda.time.Chronology chronology26 = chronology25.withUTC();
        org.joda.time.DurationField durationField27 = chronology25.minutes();
        java.lang.String str28 = durationField27.toString();
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(hours8);
// flaky:         org.junit.Assert.assertTrue("'" + int11 + "' != '" + 51 + "'", int11 == 51);
        org.junit.Assert.assertNotNull(instant17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(periodType21);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "DurationField[minutes]" + "'", str28, "DurationField[minutes]");
    }

    @Test
    public void test07702() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07702");
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.now();
        mutableDateTime1.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime4 = mutableDateTime1.copy();
        org.joda.time.MutableDateTime.Property property5 = mutableDateTime1.weekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime6 = property5.roundHalfFloor();
        org.joda.time.MutableDateTime mutableDateTime8 = property5.add((long) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        java.util.TimeZone timeZone10 = dateTimeZone9.toTimeZone();
        org.joda.time.MutableDateTime mutableDateTime11 = mutableDateTime8.toMutableDateTime(dateTimeZone9);
        mutableDateTime11.add(51L);
        int int14 = mutableDateTime11.getHourOfDay();
        org.joda.time.MutableDateTime mutableDateTime15 = org.joda.time.MutableDateTime.now();
        mutableDateTime15.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime18 = mutableDateTime15.copy();
        org.joda.time.MutableDateTime.Property property19 = mutableDateTime15.weekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime20 = property19.roundHalfFloor();
        org.joda.time.MutableDateTime mutableDateTime21 = property19.roundHalfCeiling();
        org.joda.time.MutableDateTime mutableDateTime23 = property19.set(1);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime(chronology24);
        int int26 = dateTime25.getYearOfCentury();
        int int27 = dateTime25.getWeekyear();
        org.joda.time.DateTime dateTime28 = dateTime25.withEarlierOffsetAtOverlap();
        java.lang.String str29 = dateTime28.toString();
        org.joda.time.MutableDateTime mutableDateTime30 = dateTime28.toMutableDateTime();
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.UTC;
        boolean boolean32 = dateTimeZone31.isFixed();
        mutableDateTime30.setZoneRetainFields(dateTimeZone31);
        org.joda.time.MutableDateTime mutableDateTime34 = mutableDateTime23.toMutableDateTime(dateTimeZone31);
        mutableDateTime11.setZone(dateTimeZone31);
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime41 = dateTime39.withZoneRetainFields(dateTimeZone40);
        org.joda.time.LocalDate localDate42 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property43 = localDate42.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.UTC;
        java.util.TimeZone timeZone45 = dateTimeZone44.toTimeZone();
        org.joda.time.DateTime dateTime46 = localDate42.toDateTimeAtCurrentTime(dateTimeZone44);
        int int47 = dateTime41.compareTo((org.joda.time.ReadableInstant) dateTime46);
        org.joda.time.DateTime dateTime49 = dateTime46.minusWeeks(44);
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.DateTime dateTime51 = new org.joda.time.DateTime(chronology50);
        org.joda.time.DateTime dateTime53 = dateTime51.plusMinutes(15);
        org.joda.time.Chronology chronology54 = dateTime51.getChronology();
        java.lang.String str55 = chronology54.toString();
        org.joda.time.DateTimeField dateTimeField56 = chronology54.dayOfYear();
        org.joda.time.DateTime dateTime57 = dateTime46.withChronology(chronology54);
        org.joda.time.ReadableDuration readableDuration58 = null;
        org.joda.time.ReadableInstant readableInstant59 = null;
        org.joda.time.ReadableInstant readableInstant60 = null;
        org.joda.time.PeriodType periodType61 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod62 = new org.joda.time.MutablePeriod(readableInstant59, readableInstant60, periodType61);
        org.joda.time.DurationFieldType durationFieldType64 = periodType61.getFieldType((int) (short) 0);
        org.joda.time.PeriodType periodType65 = periodType61.withMillisRemoved();
        org.joda.time.Period period66 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime57, readableDuration58, periodType65);
        org.joda.time.Period period67 = new org.joda.time.Period(0L, periodType65);
        org.joda.time.format.DateTimePrinter dateTimePrinter68 = null;
        org.joda.time.format.DateTimeParser dateTimeParser69 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter70 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter68, dateTimeParser69);
        org.joda.time.Instant instant71 = new org.joda.time.Instant();
        org.joda.time.Instant instant73 = instant71.withMillis(0L);
        org.joda.time.Chronology chronology74 = instant73.getChronology();
        org.joda.time.DurationField durationField75 = chronology74.eras();
        long long79 = chronology74.add(0L, (long) 2022, (int) '4');
        org.joda.time.format.DateTimeFormatter dateTimeFormatter80 = dateTimeFormatter70.withChronology(chronology74);
        org.joda.time.MutablePeriod mutablePeriod81 = new org.joda.time.MutablePeriod(3600000L, periodType65, chronology74);
        org.joda.time.DateTimeZone dateTimeZone82 = chronology74.getZone();
        boolean boolean83 = dateTimeZone31.equals((java.lang.Object) chronology74);
        org.joda.time.MutableDateTime mutableDateTime84 = new org.joda.time.MutableDateTime((long) 26252, dateTimeZone31);
        org.joda.time.MutableDateTime.Property property85 = mutableDateTime84.yearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime87 = property85.add(37129311);
        int int88 = property85.getMaximumValue();
        int int89 = property85.getMaximumValue();
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(mutableDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(mutableDateTime8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(timeZone10);
        org.junit.Assert.assertEquals(timeZone10.getDisplayName(), "\u5354\u8abf\u4e16\u754c\u6642\u9593");
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(mutableDateTime15);
        org.junit.Assert.assertNotNull(mutableDateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(mutableDateTime20);
        org.junit.Assert.assertNotNull(mutableDateTime21);
        org.junit.Assert.assertNotNull(mutableDateTime23);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 22 + "'", int26 == 22);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2022 + "'", int27 == 2022);
        org.junit.Assert.assertNotNull(dateTime28);
// flaky:         org.junit.Assert.assertEquals("'" + str29 + "' != '" + "2022-02-22T07:23:52.015Z" + "'", str29, "2022-02-22T07:23:52.015Z");
        org.junit.Assert.assertNotNull(mutableDateTime30);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(mutableDateTime34);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertNotNull(timeZone45);
        org.junit.Assert.assertEquals(timeZone45.getDisplayName(), "\u5354\u8abf\u4e16\u754c\u6642\u9593");
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-1) + "'", int47 == (-1));
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(chronology54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "ISOChronology[UTC]" + "'", str55, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(periodType61);
        org.junit.Assert.assertNotNull(durationFieldType64);
        org.junit.Assert.assertNotNull(periodType65);
        org.junit.Assert.assertNotNull(instant73);
        org.junit.Assert.assertNotNull(chronology74);
        org.junit.Assert.assertNotNull(durationField75);
        org.junit.Assert.assertTrue("'" + long79 + "' != '" + 105144L + "'", long79 == 105144L);
        org.junit.Assert.assertNotNull(dateTimeFormatter80);
        org.junit.Assert.assertNotNull(dateTimeZone82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(property85);
        org.junit.Assert.assertNotNull(mutableDateTime87);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 99 + "'", int88 == 99);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 99 + "'", int89 == 99);
    }

    @Test
    public void test07703() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07703");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 1, chronology1);
        int int3 = dateTime2.getMinuteOfDay();
        org.joda.time.Instant instant4 = dateTime2.toInstant();
        org.joda.time.Instant instant6 = instant4.minus((long) (byte) -1);
        org.joda.time.MutableDateTime mutableDateTime7 = instant6.toMutableDateTimeISO();
        org.joda.time.Duration duration9 = new org.joda.time.Duration((long) 26158);
        org.joda.time.Duration duration10 = duration9.toDuration();
        org.joda.time.MutableDateTime mutableDateTime12 = new org.joda.time.MutableDateTime((long) (-292275054));
        java.io.IOException iOException14 = new java.io.IOException("");
        java.io.IOException iOException15 = new java.io.IOException((java.lang.Throwable) iOException14);
        boolean boolean16 = mutableDateTime12.equals((java.lang.Object) iOException14);
        org.joda.time.Duration duration19 = new org.joda.time.Duration(0L, 946312L);
        mutableDateTime12.add((org.joda.time.ReadableDuration) duration19, 1424);
        org.joda.time.Days days22 = duration19.toStandardDays();
        org.joda.time.MutablePeriod mutablePeriod25 = new org.joda.time.MutablePeriod((long) (short) -1, 3155695200000L);
        mutablePeriod25.clear();
        org.joda.time.Duration duration28 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period29 = duration28.toPeriod();
        org.joda.time.Duration duration32 = duration28.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime(chronology33);
        org.joda.time.DateTime dateTime36 = dateTime34.plusMinutes(15);
        org.joda.time.Interval interval37 = duration32.toIntervalTo((org.joda.time.ReadableInstant) dateTime36);
        mutablePeriod25.setPeriod((org.joda.time.ReadableInterval) interval37);
        org.joda.time.ReadableInstant readableInstant39 = null;
        org.joda.time.ReadableInstant readableInstant40 = null;
        org.joda.time.PeriodType periodType41 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod42 = new org.joda.time.MutablePeriod(readableInstant39, readableInstant40, periodType41);
        org.joda.time.DurationFieldType durationFieldType44 = periodType41.getFieldType((int) (short) 0);
        int int45 = mutablePeriod25.get(durationFieldType44);
        org.joda.time.Duration duration47 = org.joda.time.Duration.standardHours((long) 52);
        org.joda.time.MutableDateTime mutableDateTime48 = org.joda.time.MutableDateTime.now();
        mutableDateTime48.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime51 = mutableDateTime48.copy();
        org.joda.time.MutableDateTime.Property property52 = mutableDateTime48.yearOfEra();
        org.joda.time.MutablePeriod mutablePeriod53 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration47, (org.joda.time.ReadableInstant) mutableDateTime48);
        org.joda.time.Instant instant54 = new org.joda.time.Instant();
        org.joda.time.Instant instant56 = instant54.withMillis(0L);
        org.joda.time.Chronology chronology57 = instant56.getChronology();
        org.joda.time.DurationField durationField58 = chronology57.eras();
        org.joda.time.LocalTime localTime59 = org.joda.time.LocalTime.now(chronology57);
        org.joda.time.DurationField durationField60 = chronology57.eras();
        mutablePeriod25.setPeriod((org.joda.time.ReadableDuration) duration47, chronology57);
        org.joda.time.Duration duration63 = duration19.withDurationAdded((org.joda.time.ReadableDuration) duration47, 26148950);
        org.joda.time.Duration duration65 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period66 = duration65.toPeriod();
        org.joda.time.Duration duration68 = duration65.minus((long) 292278993);
        int int69 = duration47.compareTo((org.joda.time.ReadableDuration) duration65);
        int int70 = duration9.compareTo((org.joda.time.ReadableDuration) duration47);
        org.joda.time.Duration duration72 = duration9.withMillis((long) 365);
        org.joda.time.Instant instant73 = instant6.minus((org.joda.time.ReadableDuration) duration72);
        long long74 = duration72.getMillis();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(instant4);
        org.junit.Assert.assertNotNull(instant6);
        org.junit.Assert.assertNotNull(mutableDateTime7);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(days22);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(interval37);
        org.junit.Assert.assertNotNull(periodType41);
        org.junit.Assert.assertNotNull(durationFieldType44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertNotNull(mutableDateTime48);
        org.junit.Assert.assertNotNull(mutableDateTime51);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertNotNull(instant56);
        org.junit.Assert.assertNotNull(chronology57);
        org.junit.Assert.assertNotNull(durationField58);
        org.junit.Assert.assertNotNull(localTime59);
        org.junit.Assert.assertNotNull(durationField60);
        org.junit.Assert.assertNotNull(duration63);
        org.junit.Assert.assertNotNull(duration65);
        org.junit.Assert.assertNotNull(period66);
        org.junit.Assert.assertNotNull(duration68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 1 + "'", int69 == 1);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + (-1) + "'", int70 == (-1));
        org.junit.Assert.assertNotNull(duration72);
        org.junit.Assert.assertNotNull(instant73);
        org.junit.Assert.assertTrue("'" + long74 + "' != '" + 365L + "'", long74 == 365L);
    }

    @Test
    public void test07704() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07704");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((long) (short) 100, chronology1);
        int int3 = localTime2.getMillisOfDay();
        org.joda.time.LocalTime.Property property4 = localTime2.millisOfSecond();
        org.joda.time.DurationField durationField5 = property4.getLeapDurationField();
        org.joda.time.LocalTime localTime6 = property4.roundHalfCeilingCopy();
        java.util.Locale locale7 = java.util.Locale.getDefault();
        java.util.Locale locale8 = locale7.stripExtensions();
        java.lang.String str9 = property4.getAsText(locale8);
        org.joda.time.LocalTime localTime11 = property4.addNoWrapToCopy(33454);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.LocalTime localTime13 = new org.joda.time.LocalTime(dateTimeZone12);
        org.joda.time.LocalTime localTime15 = localTime13.minusHours((int) (byte) 100);
        int int16 = localTime15.getMinuteOfHour();
        java.lang.String str18 = localTime15.toString("1");
        org.joda.time.LocalTime localTime20 = localTime15.minusMinutes(15);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime(chronology21);
        int int23 = dateTime22.getYearOfCentury();
        int int24 = dateTime22.getWeekyear();
        org.joda.time.DateTime dateTime26 = dateTime22.plus((long) 15);
        org.joda.time.DateTime.Property property27 = dateTime22.year();
        org.joda.time.DateTime dateTime28 = property27.roundHalfFloorCopy();
        org.joda.time.DateTime.Property property29 = dateTime28.millisOfSecond();
        org.joda.time.MutableDateTime mutableDateTime30 = dateTime28.toMutableDateTime();
        org.joda.time.LocalTime localTime31 = dateTime28.toLocalTime();
        org.joda.time.LocalTime localTime32 = localTime15.withFields((org.joda.time.ReadablePartial) localTime31);
        org.joda.time.ReadablePeriod readablePeriod33 = null;
        org.joda.time.LocalTime localTime34 = localTime31.minus(readablePeriod33);
        java.lang.String str36 = localTime34.toString("00:15:59.418");
        org.joda.time.ReadableDuration readableDuration37 = null;
        org.joda.time.ReadableInstant readableInstant38 = null;
        org.joda.time.Period period39 = new org.joda.time.Period(readableDuration37, readableInstant38);
        org.joda.time.Period period41 = period39.withDays((int) (byte) 1);
        org.joda.time.Period period43 = period41.plusMinutes(26148950);
        org.joda.time.LocalTime localTime44 = localTime34.minus((org.joda.time.ReadablePeriod) period43);
        org.joda.time.LocalTime localTime46 = localTime34.minusMillis(34);
        org.joda.time.LocalTime localTime48 = localTime34.withSecondOfMinute(34);
        java.lang.String str49 = localTime34.toString();
        org.joda.time.DateTimeFieldType dateTimeFieldType50 = org.joda.time.DateTimeFieldType.millisOfSecond();
        java.lang.String str51 = dateTimeFieldType50.getName();
        org.joda.time.DurationFieldType durationFieldType52 = dateTimeFieldType50.getRangeDurationType();
        int int53 = localTime34.get(dateTimeFieldType50);
        java.lang.String str54 = dateTimeFieldType50.getName();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime56 = localTime11.withField(dateTimeFieldType50, 1975);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 1975 for millisOfSecond must be in the range [0,999]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 100 + "'", int3 == 100);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNull(durationField5);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(locale7);
// flaky:         org.junit.Assert.assertEquals(locale7.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale8);
// flaky:         org.junit.Assert.assertEquals(locale8.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "100" + "'", str9, "100");
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(localTime15);
// flaky:         org.junit.Assert.assertTrue("'" + int16 + "' != '" + 23 + "'", int16 == 23);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "1" + "'", str18, "1");
        org.junit.Assert.assertNotNull(localTime20);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 22 + "'", int23 == 22);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2022 + "'", int24 == 2022);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(mutableDateTime30);
        org.junit.Assert.assertNotNull(localTime31);
        org.junit.Assert.assertNotNull(localTime32);
        org.junit.Assert.assertNotNull(localTime34);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "00:15:59.418" + "'", str36, "00:15:59.418");
        org.junit.Assert.assertNotNull(period41);
        org.junit.Assert.assertNotNull(period43);
        org.junit.Assert.assertNotNull(localTime44);
        org.junit.Assert.assertNotNull(localTime46);
        org.junit.Assert.assertNotNull(localTime48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "00:00:00.000" + "'", str49, "00:00:00.000");
        org.junit.Assert.assertNotNull(dateTimeFieldType50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "millisOfSecond" + "'", str51, "millisOfSecond");
        org.junit.Assert.assertNotNull(durationFieldType52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "millisOfSecond" + "'", str54, "millisOfSecond");
    }

    @Test
    public void test07705() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07705");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.add((long) 'a');
        org.joda.time.Duration duration4 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration6 = org.joda.time.Duration.standardDays((long) (byte) 1);
        java.lang.String str7 = duration6.toString();
        boolean boolean8 = duration4.isShorterThan((org.joda.time.ReadableDuration) duration6);
        org.joda.time.Hours hours9 = duration4.toStandardHours();
        mutableDateTime0.add((org.joda.time.ReadableDuration) duration4, 20);
        mutableDateTime0.setMillisOfDay(36946953);
        org.joda.time.DateTimeField dateTimeField14 = mutableDateTime0.getRoundingField();
        org.joda.time.Duration duration16 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period17 = duration16.toPeriod();
        org.joda.time.Duration duration20 = duration16.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Duration duration22 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration25 = duration22.withDurationAdded((long) (short) 100, (int) ' ');
        boolean boolean26 = duration20.isLongerThan((org.joda.time.ReadableDuration) duration22);
        org.joda.time.Period period27 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime0, (org.joda.time.ReadableDuration) duration22);
        org.joda.time.Duration duration29 = new org.joda.time.Duration((long) 0);
        long long30 = duration29.getStandardDays();
        org.joda.time.Duration duration32 = duration22.withDurationAdded((org.joda.time.ReadableDuration) duration29, 26245);
        org.joda.time.Duration duration35 = duration32.withDurationAdded(1163292L, 5);
        org.joda.time.Duration duration37 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration39 = org.joda.time.Duration.standardDays((long) (byte) 1);
        java.lang.String str40 = duration39.toString();
        boolean boolean41 = duration37.isShorterThan((org.joda.time.ReadableDuration) duration39);
        org.joda.time.Duration duration43 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period44 = duration43.toPeriod();
        org.joda.time.Duration duration47 = duration43.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Duration duration49 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration52 = duration49.withDurationAdded((long) (short) 100, (int) ' ');
        boolean boolean53 = duration47.isLongerThan((org.joda.time.ReadableDuration) duration49);
        boolean boolean54 = duration39.isEqual((org.joda.time.ReadableDuration) duration49);
        org.joda.time.Duration duration56 = org.joda.time.Duration.standardDays((-9571L));
        org.joda.time.Duration duration58 = org.joda.time.Duration.standardMinutes(1L);
        org.joda.time.Period period59 = duration58.toPeriod();
        org.joda.time.Duration duration60 = duration56.minus((org.joda.time.ReadableDuration) duration58);
        org.joda.time.Duration duration61 = duration39.minus((org.joda.time.ReadableDuration) duration56);
        org.joda.time.DateTimeZone dateTimeZone62 = null;
        org.joda.time.LocalTime localTime63 = new org.joda.time.LocalTime(dateTimeZone62);
        org.joda.time.LocalTime localTime65 = localTime63.minusHours((int) (byte) 100);
        int int66 = localTime65.getMinuteOfHour();
        java.lang.String str68 = localTime65.toString("1");
        org.joda.time.LocalTime localTime70 = localTime65.minusMinutes(15);
        org.joda.time.Chronology chronology71 = null;
        org.joda.time.DateTime dateTime72 = new org.joda.time.DateTime(chronology71);
        int int73 = dateTime72.getYearOfCentury();
        int int74 = dateTime72.getWeekyear();
        org.joda.time.DateTime dateTime76 = dateTime72.plus((long) 15);
        org.joda.time.DateTime.Property property77 = dateTime72.year();
        org.joda.time.DateTime dateTime78 = property77.roundHalfFloorCopy();
        org.joda.time.DateTime.Property property79 = dateTime78.millisOfSecond();
        org.joda.time.MutableDateTime mutableDateTime80 = dateTime78.toMutableDateTime();
        org.joda.time.LocalTime localTime81 = dateTime78.toLocalTime();
        org.joda.time.LocalTime localTime82 = localTime65.withFields((org.joda.time.ReadablePartial) localTime81);
        boolean boolean83 = duration39.equals((java.lang.Object) localTime82);
        long long84 = duration39.getStandardHours();
        org.joda.time.Duration duration85 = duration35.plus((org.joda.time.ReadableDuration) duration39);
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "PT86400S" + "'", str7, "PT86400S");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(hours9);
        org.junit.Assert.assertNull(dateTimeField14);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertNotNull(duration39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "PT86400S" + "'", str40, "PT86400S");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertNotNull(period44);
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertNotNull(duration49);
        org.junit.Assert.assertNotNull(duration52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(duration56);
        org.junit.Assert.assertNotNull(duration58);
        org.junit.Assert.assertNotNull(period59);
        org.junit.Assert.assertNotNull(duration60);
        org.junit.Assert.assertNotNull(duration61);
        org.junit.Assert.assertNotNull(localTime65);
// flaky:         org.junit.Assert.assertTrue("'" + int66 + "' != '" + 23 + "'", int66 == 23);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "1" + "'", str68, "1");
        org.junit.Assert.assertNotNull(localTime70);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 22 + "'", int73 == 22);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 2022 + "'", int74 == 2022);
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertNotNull(property77);
        org.junit.Assert.assertNotNull(dateTime78);
        org.junit.Assert.assertNotNull(property79);
        org.junit.Assert.assertNotNull(mutableDateTime80);
        org.junit.Assert.assertNotNull(localTime81);
        org.junit.Assert.assertNotNull(localTime82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + long84 + "' != '" + 24L + "'", long84 == 24L);
        org.junit.Assert.assertNotNull(duration85);
    }

    @Test
    public void test07706() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07706");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.withHourOfDay(10);
        org.joda.time.LocalDateTime.Property property5 = localDateTime4.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime6 = property5.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime8 = property5.addWrapFieldToCopy((int) (short) -1);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.withYearOfEra(55);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.LocalTime localTime12 = new org.joda.time.LocalTime(dateTimeZone11);
        org.joda.time.LocalTime localTime14 = localTime12.minusHours((int) (byte) 100);
        org.joda.time.LocalTime localTime16 = localTime14.withHourOfDay(0);
        org.joda.time.LocalTime localTime18 = localTime16.withMillisOfSecond(44);
        org.joda.time.LocalTime.Property property19 = localTime16.hourOfDay();
        java.lang.String str20 = localTime16.toString();
        org.joda.time.LocalTime.Property property21 = localTime16.millisOfSecond();
        org.joda.time.LocalTime localTime22 = property21.roundHalfFloorCopy();
        org.joda.time.DateTimeField[] dateTimeFieldArray23 = localTime22.getFields();
        org.joda.time.MutableDateTime mutableDateTime24 = org.joda.time.MutableDateTime.now();
        mutableDateTime24.add((long) 'a');
        org.joda.time.MutableDateTime.Property property27 = mutableDateTime24.yearOfCentury();
        mutableDateTime24.addSeconds(0);
        org.joda.time.ReadableDuration readableDuration32 = null;
        org.joda.time.ReadableInstant readableInstant33 = null;
        org.joda.time.Period period34 = new org.joda.time.Period(readableDuration32, readableInstant33);
        org.joda.time.PeriodType periodType37 = null;
        org.joda.time.Period period38 = new org.joda.time.Period((long) 100, 1L, periodType37);
        org.joda.time.Period period40 = period38.minusSeconds((-1));
        java.lang.String str41 = period38.toString();
        org.joda.time.Period period42 = period38.toPeriod();
        org.joda.time.PeriodType periodType43 = period38.getPeriodType();
        org.joda.time.Period period44 = period34.normalizedStandard(periodType43);
        org.joda.time.DurationFieldType durationFieldType45 = null;
        int int46 = periodType43.indexOf(durationFieldType45);
        org.joda.time.Instant instant47 = new org.joda.time.Instant();
        org.joda.time.Instant instant49 = instant47.withMillis(0L);
        org.joda.time.Chronology chronology50 = instant49.getChronology();
        org.joda.time.DurationField durationField51 = chronology50.eras();
        org.joda.time.LocalTime localTime52 = org.joda.time.LocalTime.now(chronology50);
        org.joda.time.DurationField durationField53 = chronology50.eras();
        org.joda.time.DateTimeField dateTimeField54 = chronology50.hourOfDay();
        org.joda.time.MutablePeriod mutablePeriod55 = new org.joda.time.MutablePeriod((long) 12, (long) 292278993, periodType43, chronology50);
        org.joda.time.MutableDateTime mutableDateTime56 = mutableDateTime24.toMutableDateTime(chronology50);
        mutableDateTime56.setDate((long) (-292275054));
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.LocalTime localTime61 = new org.joda.time.LocalTime((long) (short) 100, chronology60);
        int int62 = localTime61.getMillisOfDay();
        org.joda.time.LocalTime.Property property63 = localTime61.millisOfSecond();
        org.joda.time.DurationField durationField64 = property63.getLeapDurationField();
        java.lang.String str65 = property63.getName();
        org.joda.time.DateTimeZone dateTimeZone67 = org.joda.time.DateTimeZone.UTC;
        java.util.Locale locale69 = java.util.Locale.GERMAN;
        java.lang.String str70 = locale69.getDisplayName();
        java.lang.String str71 = dateTimeZone67.getName(100L, locale69);
        org.joda.time.LocalTime localTime72 = property63.setCopy("615", locale69);
        org.joda.time.LocalTime localTime74 = property63.addWrapFieldToCopy(4);
        org.joda.time.LocalTime localTime76 = property63.setCopy("641");
        org.joda.time.LocalTime localTime77 = property63.roundFloorCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType78 = property63.getFieldType();
        org.joda.time.MutableDateTime.Property property79 = mutableDateTime56.property(dateTimeFieldType78);
        int int80 = localTime22.get(dateTimeFieldType78);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime82 = localDateTime8.withField(dateTimeFieldType78, 26324361);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26324361 for millisOfSecond must be in the range [0,999]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertNotNull(localTime18);
        org.junit.Assert.assertNotNull(property19);
// flaky:         org.junit.Assert.assertEquals("'" + str20 + "' != '" + "00:23:52.285" + "'", str20, "00:23:52.285");
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(localTime22);
        org.junit.Assert.assertNotNull(dateTimeFieldArray23);
        org.junit.Assert.assertNotNull(mutableDateTime24);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(period40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "PT0.099S" + "'", str41, "PT0.099S");
        org.junit.Assert.assertNotNull(period42);
        org.junit.Assert.assertNotNull(periodType43);
        org.junit.Assert.assertNotNull(period44);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-1) + "'", int46 == (-1));
        org.junit.Assert.assertNotNull(instant49);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertNotNull(durationField51);
        org.junit.Assert.assertNotNull(localTime52);
        org.junit.Assert.assertNotNull(durationField53);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertNotNull(mutableDateTime56);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 100 + "'", int62 == 100);
        org.junit.Assert.assertNotNull(property63);
        org.junit.Assert.assertNull(durationField64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "millisOfSecond" + "'", str65, "millisOfSecond");
        org.junit.Assert.assertNotNull(dateTimeZone67);
        org.junit.Assert.assertNotNull(locale69);
        org.junit.Assert.assertEquals(locale69.toString(), "de");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "\u5fb7\u6587" + "'", str70, "\u5fb7\u6587");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "+00:00" + "'", str71, "+00:00");
        org.junit.Assert.assertNotNull(localTime72);
        org.junit.Assert.assertNotNull(localTime74);
        org.junit.Assert.assertNotNull(localTime76);
        org.junit.Assert.assertNotNull(localTime77);
        org.junit.Assert.assertNotNull(dateTimeFieldType78);
        org.junit.Assert.assertNotNull(property79);
// flaky:         org.junit.Assert.assertTrue("'" + int80 + "' != '" + 285 + "'", int80 == 285);
    }

    @Test
    public void test07707() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07707");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        java.lang.Object obj1 = mutableDateTime0.clone();
        mutableDateTime0.setTime((long) 46);
        org.joda.time.MutableDateTime.Property property4 = mutableDateTime0.dayOfWeek();
        org.joda.time.MutableDateTime mutableDateTime6 = property4.add(1L);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.LocalTime localTime9 = new org.joda.time.LocalTime((long) (short) 100, chronology8);
        int int10 = localTime9.getMillisOfDay();
        org.joda.time.LocalTime.Property property11 = localTime9.millisOfSecond();
        org.joda.time.LocalTime localTime13 = property11.addCopy(0);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateTime dateTime15 = localTime13.toDateTimeToday(dateTimeZone14);
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        int int17 = localTime13.indexOf(dateTimeFieldType16);
        org.joda.time.MutableDateTime.Property property18 = mutableDateTime6.property(dateTimeFieldType16);
        org.joda.time.MutableDateTime.Property property19 = mutableDateTime6.hourOfDay();
        org.joda.time.MutableDateTime mutableDateTime20 = property19.roundCeiling();
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(obj1);
// flaky:         org.junit.Assert.assertEquals(obj1.toString(), "2022-02-22T07:23:52.302Z");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj1), "2022-02-22T07:23:52.302Z");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj1), "2022-02-22T07:23:52.302Z");
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 100 + "'", int10 == 100);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(mutableDateTime20);
    }

    @Test
    public void test07708() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07708");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardDays((long) (byte) 1);
        java.lang.String str2 = duration1.toString();
        org.joda.time.Duration duration4 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Hours hours5 = duration4.toStandardHours();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime(chronology6);
        int int8 = dateTime7.getSecondOfMinute();
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration4, (org.joda.time.ReadableInstant) dateTime7);
        org.joda.time.Duration duration10 = duration1.plus((org.joda.time.ReadableDuration) duration4);
        org.joda.time.Duration duration11 = duration1.toDuration();
        org.joda.time.Period period12 = duration1.toPeriod();
        org.joda.time.MutablePeriod mutablePeriod13 = period12.toMutablePeriod();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DurationFieldType durationFieldType15 = mutablePeriod13.getFieldType(26426649);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "PT86400S" + "'", str2, "PT86400S");
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertNotNull(hours5);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 52 + "'", int8 == 52);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(mutablePeriod13);
    }

    @Test
    public void test07709() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07709");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property1 = mutableDateTime0.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime3 = property1.set(45);
        org.joda.time.MutableDateTime mutableDateTime4 = property1.roundFloor();
        org.joda.time.MutableDateTime mutableDateTime5 = property1.roundHalfEven();
        org.joda.time.MutableDateTime mutableDateTime7 = property1.add((int) '#');
        org.joda.time.MutableDateTime mutableDateTime8 = property1.getMutableDateTime();
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(mutableDateTime3);
        org.junit.Assert.assertNotNull(mutableDateTime4);
        org.junit.Assert.assertNotNull(mutableDateTime5);
        org.junit.Assert.assertNotNull(mutableDateTime7);
        org.junit.Assert.assertNotNull(mutableDateTime8);
    }

    @Test
    public void test07710() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07710");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) 1);
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period4 = duration3.toPeriod();
        org.joda.time.Duration duration7 = duration3.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Period period8 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime1, (org.joda.time.ReadableDuration) duration7);
        org.joda.time.Instant instant9 = dateTime1.toInstant();
        org.joda.time.DateTime dateTime12 = dateTime1.withDurationAdded((long) 3, 4);
        org.joda.time.Instant instant13 = dateTime12.toInstant();
        org.joda.time.Instant instant15 = instant13.minus((long) 26172069);
        org.joda.time.DateTime dateTime16 = instant15.toDateTime();
        org.joda.time.Duration duration18 = org.joda.time.Duration.standardDays((long) (byte) 1);
        java.lang.String str19 = duration18.toString();
        org.joda.time.Duration duration21 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Hours hours22 = duration21.toStandardHours();
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime(chronology23);
        int int25 = dateTime24.getSecondOfMinute();
        org.joda.time.MutablePeriod mutablePeriod26 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration21, (org.joda.time.ReadableInstant) dateTime24);
        org.joda.time.Duration duration27 = duration18.plus((org.joda.time.ReadableDuration) duration21);
        org.joda.time.Duration duration29 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period30 = duration29.toPeriod();
        org.joda.time.Duration duration32 = duration29.minus((long) 292278993);
        org.joda.time.MutableDateTime mutableDateTime33 = org.joda.time.MutableDateTime.now();
        mutableDateTime33.add((long) 'a');
        org.joda.time.MutableDateTime.Property property36 = mutableDateTime33.yearOfCentury();
        org.joda.time.Duration duration38 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period39 = duration38.toPeriod();
        org.joda.time.Duration duration41 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration44 = duration41.withDurationAdded((long) (short) 100, (int) ' ');
        org.joda.time.Duration duration45 = duration38.minus((org.joda.time.ReadableDuration) duration44);
        mutableDateTime33.add((org.joda.time.ReadableDuration) duration38);
        boolean boolean47 = duration32.isShorterThan((org.joda.time.ReadableDuration) duration38);
        boolean boolean48 = duration21.isLongerThan((org.joda.time.ReadableDuration) duration32);
        org.joda.time.Duration duration49 = duration21.toDuration();
        java.lang.String str50 = duration21.toString();
        org.joda.time.Instant instant51 = instant15.plus((org.joda.time.ReadableDuration) duration21);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(instant9);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(instant13);
        org.junit.Assert.assertNotNull(instant15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "PT86400S" + "'", str19, "PT86400S");
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(hours22);
// flaky:         org.junit.Assert.assertTrue("'" + int25 + "' != '" + 52 + "'", int25 == 52);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertNotNull(mutableDateTime33);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertNotNull(period39);
        org.junit.Assert.assertNotNull(duration41);
        org.junit.Assert.assertNotNull(duration44);
        org.junit.Assert.assertNotNull(duration45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(duration49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "PT100S" + "'", str50, "PT100S");
        org.junit.Assert.assertNotNull(instant51);
    }

    @Test
    public void test07711() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07711");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        int int2 = dateTime1.getYearOfCentury();
        int int3 = dateTime1.getWeekyear();
        org.joda.time.DateTime dateTime4 = dateTime1.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime.Property property5 = dateTime1.yearOfEra();
        org.joda.time.DateTime dateTime6 = property5.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime7 = property5.roundHalfEvenCopy();
        org.joda.time.DateTime dateTime9 = property5.addWrapFieldToCopy(0);
        org.joda.time.DateTime dateTime10 = dateTime9.withTimeAtStartOfDay();
        org.joda.time.DateTimeZone dateTimeZone11 = dateTime9.getZone();
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) 1);
        org.joda.time.Duration duration15 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period16 = duration15.toPeriod();
        org.joda.time.Duration duration19 = duration15.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Period period20 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime13, (org.joda.time.ReadableDuration) duration19);
        org.joda.time.DateTime dateTime21 = dateTime13.toDateTimeISO();
        org.joda.time.LocalDate localDate23 = new org.joda.time.LocalDate((long) (byte) -1);
        int int24 = localDate23.getYearOfEra();
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.UTC;
        java.util.TimeZone timeZone26 = dateTimeZone25.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.UTC;
        long long29 = dateTimeZone25.getMillisKeepLocal(dateTimeZone27, (long) 44);
        org.joda.time.DateTime dateTime30 = localDate23.toDateTimeAtMidnight(dateTimeZone25);
        java.util.Locale locale32 = null;
        java.lang.String str33 = dateTimeZone25.getName(946000L, locale32);
        org.joda.time.MutableDateTime mutableDateTime34 = new org.joda.time.MutableDateTime(dateTimeZone25);
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime(dateTimeZone25);
        org.joda.time.ReadableDuration readableDuration36 = null;
        org.joda.time.ReadableInstant readableInstant37 = null;
        org.joda.time.Period period38 = new org.joda.time.Period(readableDuration36, readableInstant37);
        org.joda.time.PeriodType periodType41 = null;
        org.joda.time.Period period42 = new org.joda.time.Period((long) 100, 1L, periodType41);
        org.joda.time.Period period44 = period42.minusSeconds((-1));
        java.lang.String str45 = period42.toString();
        org.joda.time.Period period46 = period42.toPeriod();
        org.joda.time.PeriodType periodType47 = period42.getPeriodType();
        org.joda.time.Period period48 = period38.normalizedStandard(periodType47);
        org.joda.time.Period period50 = period48.withSeconds(10);
        org.joda.time.Minutes minutes51 = period48.toStandardMinutes();
        org.joda.time.DurationFieldType[] durationFieldTypeArray52 = period48.getFieldTypes();
        org.joda.time.Period period54 = period48.withYears(999);
        org.joda.time.Period period56 = period54.multipliedBy(443);
        org.joda.time.Period period58 = period54.minusMonths(1439);
        org.joda.time.DateTime dateTime59 = dateTime35.plus((org.joda.time.ReadablePeriod) period54);
        org.joda.time.DateTime dateTime60 = dateTime21.minus((org.joda.time.ReadablePeriod) period54);
        org.joda.time.DateTime.Property property61 = dateTime60.yearOfEra();
        boolean boolean62 = dateTimeZone11.equals((java.lang.Object) property61);
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.DateTime dateTime64 = new org.joda.time.DateTime(chronology63);
        int int65 = dateTime64.getSecondOfMinute();
        org.joda.time.DateTime dateTime68 = dateTime64.withDurationAdded(0L, (int) '4');
        org.joda.time.LocalDate localDate69 = dateTime68.toLocalDate();
        int int70 = dateTime68.getSecondOfDay();
        long long71 = property61.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime68);
        org.joda.time.DateTime dateTime72 = property61.roundHalfCeilingCopy();
        org.joda.time.LocalDate localDate73 = dateTime72.toLocalDate();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 22 + "'", int2 == 22);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2022 + "'", int3 == 2022);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1969 + "'", int24 == 1969);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(timeZone26);
// flaky:         org.junit.Assert.assertEquals(timeZone26.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 44L + "'", long29 == 44L);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "+00:00" + "'", str33, "+00:00");
        org.junit.Assert.assertNotNull(period44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "PT0.099S" + "'", str45, "PT0.099S");
        org.junit.Assert.assertNotNull(period46);
        org.junit.Assert.assertNotNull(periodType47);
        org.junit.Assert.assertNotNull(period48);
        org.junit.Assert.assertNotNull(period50);
        org.junit.Assert.assertNotNull(minutes51);
        org.junit.Assert.assertNotNull(durationFieldTypeArray52);
        org.junit.Assert.assertNotNull(period54);
        org.junit.Assert.assertNotNull(period56);
        org.junit.Assert.assertNotNull(period58);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(property61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int65 + "' != '" + 52 + "'", int65 == 52);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertNotNull(localDate69);
// flaky:         org.junit.Assert.assertTrue("'" + int70 + "' != '" + 26632 + "'", int70 == 26632);
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + (-1051L) + "'", long71 == (-1051L));
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertNotNull(localDate73);
    }

    @Test
    public void test07712() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07712");
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) (short) -1, 3155695200000L);
        mutablePeriod3.clear();
        org.joda.time.Duration duration6 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period7 = duration6.toPeriod();
        org.joda.time.Duration duration10 = duration6.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime(chronology11);
        org.joda.time.DateTime dateTime14 = dateTime12.plusMinutes(15);
        org.joda.time.Interval interval15 = duration10.toIntervalTo((org.joda.time.ReadableInstant) dateTime14);
        mutablePeriod3.setPeriod((org.joda.time.ReadableInterval) interval15);
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.PeriodType periodType19 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod20 = new org.joda.time.MutablePeriod(readableInstant17, readableInstant18, periodType19);
        org.joda.time.DurationFieldType durationFieldType22 = periodType19.getFieldType((int) (short) 0);
        int int23 = mutablePeriod3.get(durationFieldType22);
        org.joda.time.Duration duration25 = org.joda.time.Duration.standardHours((long) 52);
        org.joda.time.MutableDateTime mutableDateTime26 = org.joda.time.MutableDateTime.now();
        mutableDateTime26.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime29 = mutableDateTime26.copy();
        org.joda.time.MutableDateTime.Property property30 = mutableDateTime26.yearOfEra();
        org.joda.time.MutablePeriod mutablePeriod31 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration25, (org.joda.time.ReadableInstant) mutableDateTime26);
        org.joda.time.Instant instant32 = new org.joda.time.Instant();
        org.joda.time.Instant instant34 = instant32.withMillis(0L);
        org.joda.time.Chronology chronology35 = instant34.getChronology();
        org.joda.time.DurationField durationField36 = chronology35.eras();
        org.joda.time.LocalTime localTime37 = org.joda.time.LocalTime.now(chronology35);
        org.joda.time.DurationField durationField38 = chronology35.eras();
        mutablePeriod3.setPeriod((org.joda.time.ReadableDuration) duration25, chronology35);
        org.joda.time.DateTimeField dateTimeField40 = chronology35.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField41 = chronology35.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField42 = chronology35.minuteOfHour();
        org.joda.time.MutablePeriod mutablePeriod43 = new org.joda.time.MutablePeriod(962578L, chronology35);
        org.joda.time.MutableDateTime mutableDateTime44 = org.joda.time.MutableDateTime.now(chronology35);
        org.joda.time.DateTimeField dateTimeField45 = chronology35.hourOfHalfday();
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertNotNull(periodType19);
        org.junit.Assert.assertNotNull(durationFieldType22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertNotNull(mutableDateTime26);
        org.junit.Assert.assertNotNull(mutableDateTime29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(instant34);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(durationField36);
        org.junit.Assert.assertNotNull(localTime37);
        org.junit.Assert.assertNotNull(durationField38);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(mutableDateTime44);
        org.junit.Assert.assertNotNull(dateTimeField45);
    }

    @Test
    public void test07713() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07713");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.monthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.minuteOfDay();
        boolean boolean3 = localDate0.isSupported(dateTimeFieldType2);
        org.joda.time.LocalDate.Property property4 = localDate0.dayOfWeek();
        org.joda.time.MutableDateTime mutableDateTime5 = org.joda.time.MutableDateTime.now();
        mutableDateTime5.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime8 = mutableDateTime5.copy();
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime5.weekOfWeekyear();
        org.joda.time.MutableDateTime.Property property10 = mutableDateTime5.dayOfYear();
        org.joda.time.MutableDateTime mutableDateTime11 = org.joda.time.MutableDateTime.now();
        mutableDateTime11.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime14 = mutableDateTime11.copy();
        mutableDateTime11.setDate((long) '#');
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property18 = localDate17.monthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = org.joda.time.DateTimeFieldType.minuteOfDay();
        boolean boolean20 = localDate17.isSupported(dateTimeFieldType19);
        int int21 = localDate17.getDayOfYear();
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateMidnight dateMidnight23 = localDate17.toDateMidnight(dateTimeZone22);
        org.joda.time.DateTime dateTime24 = mutableDateTime11.toDateTime(dateTimeZone22);
        org.joda.time.LocalDate localDate25 = org.joda.time.LocalDate.now(dateTimeZone22);
        org.joda.time.PeriodType periodType28 = null;
        org.joda.time.Period period29 = new org.joda.time.Period((long) 100, 1L, periodType28);
        org.joda.time.PeriodType periodType30 = period29.getPeriodType();
        boolean boolean31 = dateTimeZone22.equals((java.lang.Object) periodType30);
        mutableDateTime5.setZoneRetainFields(dateTimeZone22);
        org.joda.time.LocalDate localDate33 = new org.joda.time.LocalDate(dateTimeZone22);
        org.joda.time.DateTime dateTime34 = localDate0.toDateTimeAtStartOfDay(dateTimeZone22);
        org.joda.time.Chronology chronology35 = localDate0.getChronology();
        int int36 = localDate0.getMonthOfYear();
        org.joda.time.LocalDate localDate38 = localDate0.plusDays(26371489);
        org.joda.time.LocalDate localDate40 = localDate38.plusMonths(299);
        java.lang.String str42 = localDate40.toString("132");
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(mutableDateTime5);
        org.junit.Assert.assertNotNull(mutableDateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertNotNull(mutableDateTime14);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 53 + "'", int21 == 53);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(dateMidnight23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertNotNull(periodType30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 2 + "'", int36 == 2);
        org.junit.Assert.assertNotNull(localDate38);
        org.junit.Assert.assertNotNull(localDate40);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "132" + "'", str42, "132");
    }

    @Test
    public void test07714() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07714");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        java.lang.Object obj1 = mutableDateTime0.clone();
        mutableDateTime0.setTime((long) 46);
        org.joda.time.MutableDateTime.Property property4 = mutableDateTime0.dayOfWeek();
        int int5 = mutableDateTime0.getHourOfDay();
        mutableDateTime0.setSecondOfMinute(30);
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(obj1);
// flaky:         org.junit.Assert.assertEquals(obj1.toString(), "2022-02-22T07:23:52.507Z");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj1), "2022-02-22T07:23:52.507Z");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj1), "2022-02-22T07:23:52.507Z");
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
    }

    @Test
    public void test07715() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07715");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime3 = mutableDateTime0.copy();
        org.joda.time.MutableDateTime.Property property4 = mutableDateTime0.weekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime5 = property4.roundHalfFloor();
        org.joda.time.MutableDateTime mutableDateTime7 = property4.add((long) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.UTC;
        java.util.TimeZone timeZone9 = dateTimeZone8.toTimeZone();
        org.joda.time.MutableDateTime mutableDateTime10 = mutableDateTime7.toMutableDateTime(dateTimeZone8);
        int int12 = dateTimeZone8.getStandardOffset(60000L);
        java.util.Locale.Builder builder14 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder15 = builder14.clear();
        java.util.Locale locale16 = java.util.Locale.GERMAN;
        java.lang.String str17 = locale16.getDisplayName();
        java.lang.String str18 = locale16.getISO3Language();
        java.util.Locale.Builder builder19 = builder15.setLocale(locale16);
        java.lang.String str20 = dateTimeZone8.getName(950707L, locale16);
        long long22 = dateTimeZone8.previousTransition(555563119L);
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(mutableDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(mutableDateTime5);
        org.junit.Assert.assertNotNull(mutableDateTime7);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(timeZone9);
        org.junit.Assert.assertEquals(timeZone9.getDisplayName(), "\u5354\u8abf\u4e16\u754c\u6642\u9593");
        org.junit.Assert.assertNotNull(mutableDateTime10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "de");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "\u5fb7\u6587" + "'", str17, "\u5fb7\u6587");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "deu" + "'", str18, "deu");
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "+00:00" + "'", str20, "+00:00");
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 555563119L + "'", long22 == 555563119L);
    }

    @Test
    public void test07716() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07716");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property1 = mutableDateTime0.centuryOfEra();
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime0.dayOfWeek();
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime0.dayOfMonth();
        org.joda.time.MutableDateTime mutableDateTime4 = property3.roundHalfEven();
        java.util.Locale locale5 = null;
        java.lang.String str6 = property3.getAsText(locale5);
        org.joda.time.DurationField durationField7 = property3.getRangeDurationField();
        org.joda.time.LocalDateTime localDateTime8 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.withHourOfDay(10);
        org.joda.time.LocalDateTime.Property property11 = localDateTime8.hourOfDay();
        org.joda.time.DateTimeField dateTimeField12 = property11.getField();
        int int13 = property11.get();
        java.util.Locale locale14 = java.util.Locale.getDefault();
        java.lang.String str15 = property11.getAsShortText(locale14);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime((long) (byte) -1, chronology17);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.plusMonths(46);
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.minuteOfDay();
        int int22 = localDateTime20.get(dateTimeFieldType21);
        java.util.Locale locale23 = java.util.Locale.TRADITIONAL_CHINESE;
        boolean boolean24 = localDateTime20.equals((java.lang.Object) locale23);
        java.lang.String str25 = locale14.getDisplayVariant(locale23);
        java.lang.String str26 = locale14.getDisplayScript();
        java.util.Locale locale27 = java.util.Locale.JAPAN;
        java.lang.String str28 = locale14.getDisplayVariant(locale27);
        java.lang.String str29 = property3.getAsText(locale14);
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(mutableDateTime4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "22" + "'", str6, "22");
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 7 + "'", int13 == 7);
        org.junit.Assert.assertNotNull(locale14);
// flaky:         org.junit.Assert.assertEquals(locale14.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "7" + "'", str15, "7");
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1439 + "'", int22 == 1439);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "zh_TW");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "22" + "'", str29, "22");
    }

    @Test
    public void test07717() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07717");
        java.lang.Object obj0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.UTC;
        java.util.Locale locale3 = java.util.Locale.GERMAN;
        java.lang.String str4 = locale3.getDisplayName();
        java.lang.String str5 = dateTimeZone1.getName(100L, locale3);
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime(obj0, dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime7 = org.joda.time.LocalDateTime.now(dateTimeZone1);
        org.joda.time.MutableDateTime mutableDateTime8 = org.joda.time.MutableDateTime.now();
        mutableDateTime8.add((long) 'a');
        org.joda.time.Duration duration12 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration14 = org.joda.time.Duration.standardDays((long) (byte) 1);
        java.lang.String str15 = duration14.toString();
        boolean boolean16 = duration12.isShorterThan((org.joda.time.ReadableDuration) duration14);
        org.joda.time.Hours hours17 = duration12.toStandardHours();
        mutableDateTime8.add((org.joda.time.ReadableDuration) duration12, 20);
        mutableDateTime8.setMillisOfDay(36946953);
        org.joda.time.DateTimeField dateTimeField22 = mutableDateTime8.getRoundingField();
        org.joda.time.Duration duration24 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period25 = duration24.toPeriod();
        org.joda.time.Duration duration28 = duration24.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Duration duration30 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration33 = duration30.withDurationAdded((long) (short) 100, (int) ' ');
        boolean boolean34 = duration28.isLongerThan((org.joda.time.ReadableDuration) duration30);
        org.joda.time.Period period35 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime8, (org.joda.time.ReadableDuration) duration30);
        org.joda.time.LocalDateTime localDateTime36 = localDateTime7.plus((org.joda.time.ReadableDuration) duration30);
        org.joda.time.LocalDateTime.Property property37 = localDateTime7.weekOfWeekyear();
        int int38 = localDateTime7.getMillisOfDay();
        org.joda.time.LocalDateTime localDateTime40 = localDateTime7.minusSeconds(2000);
        org.joda.time.LocalDateTime.Property property41 = localDateTime40.weekyear();
        int int42 = localDateTime40.getCenturyOfEra();
        org.joda.time.LocalDateTime localDateTime44 = localDateTime40.plusMillis(36946953);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime46 = localDateTime40.withMillisOfSecond(62262);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 62262 for millisOfSecond must be in the range [0,999]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "de");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u5fb7\u6587" + "'", str4, "\u5fb7\u6587");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "+00:00" + "'", str5, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(mutableDateTime8);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "PT86400S" + "'", str15, "PT86400S");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(hours17);
        org.junit.Assert.assertNull(dateTimeField22);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(property37);
// flaky:         org.junit.Assert.assertTrue("'" + int38 + "' != '" + 26632626 + "'", int38 == 26632626);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 20 + "'", int42 == 20);
        org.junit.Assert.assertNotNull(localDateTime44);
    }

    @Test
    public void test07718() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07718");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(chronology1);
        org.joda.time.DateTime dateTime4 = dateTime2.plusMinutes(15);
        org.joda.time.Chronology chronology5 = dateTime2.getChronology();
        org.joda.time.DurationField durationField6 = chronology5.hours();
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod(1440L, chronology5);
        org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime(chronology5);
        int int9 = mutableDateTime8.getMillisOfDay();
        org.joda.time.MutableDateTime.Property property10 = mutableDateTime8.yearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime12 = property10.add(1439);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(durationField6);
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 26632647 + "'", int9 == 26632647);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(mutableDateTime12);
    }

    @Test
    public void test07719() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07719");
        org.joda.time.Duration duration10 = org.joda.time.Duration.standardSeconds((long) 26209);
        org.joda.time.ReadableDuration readableDuration13 = null;
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.Period period15 = new org.joda.time.Period(readableDuration13, readableInstant14);
        org.joda.time.PeriodType periodType18 = null;
        org.joda.time.Period period19 = new org.joda.time.Period((long) 100, 1L, periodType18);
        org.joda.time.Period period21 = period19.minusSeconds((-1));
        java.lang.String str22 = period19.toString();
        org.joda.time.Period period23 = period19.toPeriod();
        org.joda.time.PeriodType periodType24 = period19.getPeriodType();
        org.joda.time.Period period25 = period15.normalizedStandard(periodType24);
        org.joda.time.DurationFieldType durationFieldType26 = null;
        int int27 = periodType24.indexOf(durationFieldType26);
        org.joda.time.Instant instant28 = new org.joda.time.Instant();
        org.joda.time.Instant instant30 = instant28.withMillis(0L);
        org.joda.time.Chronology chronology31 = instant30.getChronology();
        org.joda.time.DurationField durationField32 = chronology31.eras();
        org.joda.time.LocalTime localTime33 = org.joda.time.LocalTime.now(chronology31);
        org.joda.time.DurationField durationField34 = chronology31.eras();
        org.joda.time.DateTimeField dateTimeField35 = chronology31.hourOfDay();
        org.joda.time.MutablePeriod mutablePeriod36 = new org.joda.time.MutablePeriod((long) 12, (long) 292278993, periodType24, chronology31);
        org.joda.time.Period period37 = duration10.toPeriod(periodType24);
        org.joda.time.MutableDateTime mutableDateTime38 = org.joda.time.MutableDateTime.now();
        mutableDateTime38.add((long) 'a');
        org.joda.time.MutableDateTime.Property property41 = mutableDateTime38.yearOfCentury();
        org.joda.time.Duration duration43 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period44 = duration43.toPeriod();
        org.joda.time.Duration duration46 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration49 = duration46.withDurationAdded((long) (short) 100, (int) ' ');
        org.joda.time.Duration duration50 = duration43.minus((org.joda.time.ReadableDuration) duration49);
        mutableDateTime38.add((org.joda.time.ReadableDuration) duration43);
        org.joda.time.MutableDateTime mutableDateTime53 = org.joda.time.MutableDateTime.now();
        mutableDateTime53.add((long) 'a');
        org.joda.time.MutableDateTime.Property property56 = mutableDateTime53.yearOfCentury();
        mutableDateTime53.addSeconds(0);
        org.joda.time.ReadableDuration readableDuration61 = null;
        org.joda.time.ReadableInstant readableInstant62 = null;
        org.joda.time.Period period63 = new org.joda.time.Period(readableDuration61, readableInstant62);
        org.joda.time.PeriodType periodType66 = null;
        org.joda.time.Period period67 = new org.joda.time.Period((long) 100, 1L, periodType66);
        org.joda.time.Period period69 = period67.minusSeconds((-1));
        java.lang.String str70 = period67.toString();
        org.joda.time.Period period71 = period67.toPeriod();
        org.joda.time.PeriodType periodType72 = period67.getPeriodType();
        org.joda.time.Period period73 = period63.normalizedStandard(periodType72);
        org.joda.time.DurationFieldType durationFieldType74 = null;
        int int75 = periodType72.indexOf(durationFieldType74);
        org.joda.time.Instant instant76 = new org.joda.time.Instant();
        org.joda.time.Instant instant78 = instant76.withMillis(0L);
        org.joda.time.Chronology chronology79 = instant78.getChronology();
        org.joda.time.DurationField durationField80 = chronology79.eras();
        org.joda.time.LocalTime localTime81 = org.joda.time.LocalTime.now(chronology79);
        org.joda.time.DurationField durationField82 = chronology79.eras();
        org.joda.time.DateTimeField dateTimeField83 = chronology79.hourOfDay();
        org.joda.time.MutablePeriod mutablePeriod84 = new org.joda.time.MutablePeriod((long) 12, (long) 292278993, periodType72, chronology79);
        org.joda.time.MutableDateTime mutableDateTime85 = mutableDateTime53.toMutableDateTime(chronology79);
        org.joda.time.DateTimeField dateTimeField86 = chronology79.clockhourOfHalfday();
        org.joda.time.DateTime dateTime87 = new org.joda.time.DateTime((long) (short) 0, chronology79);
        mutableDateTime38.setChronology(chronology79);
        org.joda.time.Period period89 = new org.joda.time.Period(1149706L, periodType24, chronology79);
        org.joda.time.MutablePeriod mutablePeriod90 = new org.joda.time.MutablePeriod(26309196, 0, 26342498, 335, 1968, 26396, 161, 208, periodType24);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "PT0.099S" + "'", str22, "PT0.099S");
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertNotNull(periodType24);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertNotNull(instant30);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertNotNull(localTime33);
        org.junit.Assert.assertNotNull(durationField34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(period37);
        org.junit.Assert.assertNotNull(mutableDateTime38);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertNotNull(period44);
        org.junit.Assert.assertNotNull(duration46);
        org.junit.Assert.assertNotNull(duration49);
        org.junit.Assert.assertNotNull(duration50);
        org.junit.Assert.assertNotNull(mutableDateTime53);
        org.junit.Assert.assertNotNull(property56);
        org.junit.Assert.assertNotNull(period69);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "PT0.099S" + "'", str70, "PT0.099S");
        org.junit.Assert.assertNotNull(period71);
        org.junit.Assert.assertNotNull(periodType72);
        org.junit.Assert.assertNotNull(period73);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + (-1) + "'", int75 == (-1));
        org.junit.Assert.assertNotNull(instant78);
        org.junit.Assert.assertNotNull(chronology79);
        org.junit.Assert.assertNotNull(durationField80);
        org.junit.Assert.assertNotNull(localTime81);
        org.junit.Assert.assertNotNull(durationField82);
        org.junit.Assert.assertNotNull(dateTimeField83);
        org.junit.Assert.assertNotNull(mutableDateTime85);
        org.junit.Assert.assertNotNull(dateTimeField86);
    }

    @Test
    public void test07720() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07720");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.UTC;
        java.util.Locale locale4 = java.util.Locale.GERMAN;
        java.lang.String str5 = locale4.getDisplayName();
        java.lang.String str6 = dateTimeZone2.getName(100L, locale4);
        java.lang.String str7 = dateTimeZone2.toString();
        org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime((long) 1970, dateTimeZone2);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime(dateTimeZone2);
        org.joda.time.MutableDateTime mutableDateTime10 = new org.joda.time.MutableDateTime((-62166787199903L), dateTimeZone2);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime10.setDayOfWeek(62524);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 62524 for dayOfWeek must be in the range [1,7]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "de");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "\u5fb7\u6587" + "'", str5, "\u5fb7\u6587");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00" + "'", str6, "+00:00");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "UTC" + "'", str7, "UTC");
    }

    @Test
    public void test07721() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07721");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) (short) -1);
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardDays((long) (byte) 1);
        java.lang.String str4 = duration3.toString();
        mutableDateTime1.add((org.joda.time.ReadableDuration) duration3, 8);
        mutableDateTime1.setSecondOfMinute((int) (short) 0);
        mutableDateTime1.addMonths(36956320);
        mutableDateTime1.setDayOfYear(49);
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime16 = dateTime14.withZoneRetainFields(dateTimeZone15);
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property18 = localDate17.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.UTC;
        java.util.TimeZone timeZone20 = dateTimeZone19.toTimeZone();
        org.joda.time.DateTime dateTime21 = localDate17.toDateTimeAtCurrentTime(dateTimeZone19);
        int int22 = dateTime16.compareTo((org.joda.time.ReadableInstant) dateTime21);
        org.joda.time.DateTime dateTime24 = dateTime21.minusWeeks(44);
        org.joda.time.DateTime dateTime27 = dateTime24.withDurationAdded((-1L), 36946953);
        org.joda.time.YearMonthDay yearMonthDay28 = dateTime27.toYearMonthDay();
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime((long) 1);
        org.joda.time.Duration duration32 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period33 = duration32.toPeriod();
        org.joda.time.Duration duration36 = duration32.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Period period37 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime30, (org.joda.time.ReadableDuration) duration36);
        org.joda.time.Duration duration39 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration41 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration44 = duration41.withDurationAdded((long) (short) 100, (int) ' ');
        boolean boolean45 = duration39.isLongerThan((org.joda.time.ReadableDuration) duration44);
        org.joda.time.Minutes minutes46 = duration39.toStandardMinutes();
        org.joda.time.Period period47 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime30, (org.joda.time.ReadableDuration) duration39);
        org.joda.time.Duration duration49 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period50 = duration49.toPeriod();
        org.joda.time.PeriodType periodType51 = period50.getPeriodType();
        org.joda.time.Period period52 = period47.withPeriodType(periodType51);
        org.joda.time.MutablePeriod mutablePeriod53 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) mutableDateTime1, (org.joda.time.ReadableInstant) dateTime27, periodType51);
        org.joda.time.LocalDate localDate54 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property55 = localDate54.monthOfYear();
        org.joda.time.DateTimeField dateTimeField56 = property55.getField();
        org.joda.time.LocalDate localDate57 = property55.roundCeilingCopy();
        org.joda.time.Chronology chronology58 = localDate57.getChronology();
        org.joda.time.DurationField durationField59 = chronology58.months();
        org.joda.time.MutableDateTime mutableDateTime60 = mutableDateTime1.toMutableDateTime(chronology58);
        org.joda.time.DateTime dateTime61 = new org.joda.time.DateTime(chronology58);
        org.joda.time.DateTime.Property property62 = dateTime61.era();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime64 = dateTime61.withDayOfWeek(21);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 21 for dayOfWeek must be in the range [1,7]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "PT86400S" + "'", str4, "PT86400S");
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(timeZone20);
// flaky:         org.junit.Assert.assertEquals(timeZone20.getDisplayName(), "\u534f\u8c03\u4e16\u754c\u65f6\u95f4");
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(yearMonthDay28);
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertNotNull(duration39);
        org.junit.Assert.assertNotNull(duration41);
        org.junit.Assert.assertNotNull(duration44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(minutes46);
        org.junit.Assert.assertNotNull(duration49);
        org.junit.Assert.assertNotNull(period50);
        org.junit.Assert.assertNotNull(periodType51);
        org.junit.Assert.assertNotNull(period52);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertNotNull(localDate57);
        org.junit.Assert.assertNotNull(chronology58);
        org.junit.Assert.assertNotNull(durationField59);
        org.junit.Assert.assertNotNull(mutableDateTime60);
        org.junit.Assert.assertNotNull(property62);
    }

    @Test
    public void test07722() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07722");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.DateTime dateTime1 = instant0.toDateTime();
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.withCenturyOfEra((int) 'a');
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(chronology9);
        org.joda.time.DateTime dateTime12 = dateTime10.plusMinutes(15);
        org.joda.time.DateTime dateTime13 = localDateTime6.toDateTime((org.joda.time.ReadableInstant) dateTime10);
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime15 = localDateTime6.toDateTime(dateTimeZone14);
        org.joda.time.DateTime dateTime16 = dateTime1.withZoneRetainFields(dateTimeZone14);
        org.joda.time.MutableDateTime mutableDateTime17 = org.joda.time.MutableDateTime.now();
        mutableDateTime17.add((long) 'a');
        org.joda.time.MutableDateTime.Property property20 = mutableDateTime17.yearOfCentury();
        mutableDateTime17.addSeconds(0);
        org.joda.time.Duration duration24 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Hours hours25 = duration24.toStandardHours();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime(chronology26);
        int int28 = dateTime27.getSecondOfMinute();
        org.joda.time.MutablePeriod mutablePeriod29 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration24, (org.joda.time.ReadableInstant) dateTime27);
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime((long) 1);
        org.joda.time.Instant instant32 = new org.joda.time.Instant();
        org.joda.time.Instant instant34 = instant32.withMillis(0L);
        org.joda.time.DateTime dateTime35 = instant34.toDateTime();
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime((long) 1);
        org.joda.time.PeriodType periodType38 = org.joda.time.PeriodType.months();
        org.joda.time.Period period39 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime35, (org.joda.time.ReadableInstant) dateTime37, periodType38);
        org.joda.time.Period period40 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration24, (org.joda.time.ReadableInstant) dateTime31, periodType38);
        org.joda.time.Duration duration41 = new org.joda.time.Duration((org.joda.time.ReadableInstant) mutableDateTime17, (org.joda.time.ReadableInstant) dateTime31);
        org.joda.time.DateTime dateTime42 = dateTime16.plus((org.joda.time.ReadableDuration) duration41);
        org.joda.time.DateTime dateTime44 = dateTime16.minusYears(29);
        org.joda.time.DateTime.Property property45 = dateTime16.minuteOfDay();
        org.joda.time.DateTime dateTime47 = property45.addWrapFieldToCopy(36985848);
        org.joda.time.DateTime.Property property48 = dateTime47.dayOfWeek();
        org.joda.time.DateTime.Property property49 = dateTime47.dayOfYear();
        org.joda.time.DateTime dateTime51 = dateTime47.plusSeconds(0);
        org.joda.time.LocalDateTime localDateTime52 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime54 = localDateTime52.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime56 = localDateTime54.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime58 = localDateTime56.plusYears((int) (short) 100);
        org.joda.time.Duration duration60 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period61 = duration60.toPeriod();
        org.joda.time.Duration duration63 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration66 = duration63.withDurationAdded((long) (short) 100, (int) ' ');
        org.joda.time.Duration duration67 = duration60.minus((org.joda.time.ReadableDuration) duration66);
        org.joda.time.LocalDateTime localDateTime68 = localDateTime58.plus((org.joda.time.ReadableDuration) duration60);
        org.joda.time.Instant instant69 = new org.joda.time.Instant();
        org.joda.time.Instant instant71 = instant69.withMillis(0L);
        org.joda.time.Duration duration73 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period74 = duration73.toPeriod();
        org.joda.time.Duration duration77 = duration73.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Instant instant78 = instant71.plus((org.joda.time.ReadableDuration) duration77);
        org.joda.time.PeriodType periodType79 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.Period period80 = duration77.toPeriod(periodType79);
        org.joda.time.Duration duration82 = duration77.withMillis(60000L);
        boolean boolean83 = duration60.isLongerThan((org.joda.time.ReadableDuration) duration77);
        org.joda.time.DateTime dateTime84 = dateTime51.plus((org.joda.time.ReadableDuration) duration77);
        org.joda.time.DateTime dateTime86 = dateTime51.withYearOfCentury(8);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(mutableDateTime17);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertNotNull(hours25);
// flaky:         org.junit.Assert.assertTrue("'" + int28 + "' != '" + 52 + "'", int28 == 52);
        org.junit.Assert.assertNotNull(instant34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(periodType38);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertNotNull(duration60);
        org.junit.Assert.assertNotNull(period61);
        org.junit.Assert.assertNotNull(duration63);
        org.junit.Assert.assertNotNull(duration66);
        org.junit.Assert.assertNotNull(duration67);
        org.junit.Assert.assertNotNull(localDateTime68);
        org.junit.Assert.assertNotNull(instant71);
        org.junit.Assert.assertNotNull(duration73);
        org.junit.Assert.assertNotNull(period74);
        org.junit.Assert.assertNotNull(duration77);
        org.junit.Assert.assertNotNull(instant78);
        org.junit.Assert.assertNotNull(periodType79);
        org.junit.Assert.assertNotNull(period80);
        org.junit.Assert.assertNotNull(duration82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(dateTime84);
        org.junit.Assert.assertNotNull(dateTime86);
    }

    @Test
    public void test07723() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07723");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.Instant instant2 = instant0.withMillis(0L);
        org.joda.time.Duration duration4 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period5 = duration4.toPeriod();
        org.joda.time.Duration duration8 = duration4.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Instant instant9 = instant2.plus((org.joda.time.ReadableDuration) duration8);
        long long10 = instant9.getMillis();
        org.joda.time.DateTime dateTime11 = instant9.toDateTime();
        org.joda.time.MutableDateTime mutableDateTime12 = instant9.toMutableDateTimeISO();
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.PeriodType periodType19 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod20 = new org.joda.time.MutablePeriod(readableInstant17, readableInstant18, periodType19);
        org.joda.time.DurationFieldType durationFieldType22 = periodType19.getFieldType((int) (short) 0);
        java.lang.String str23 = periodType19.toString();
        org.joda.time.Instant instant24 = new org.joda.time.Instant();
        org.joda.time.Instant instant26 = instant24.withMillis(0L);
        org.joda.time.Chronology chronology27 = instant26.getChronology();
        org.joda.time.Period period28 = new org.joda.time.Period((long) 53, (long) (-1), periodType19, chronology27);
        org.joda.time.ReadableInstant readableInstant31 = null;
        org.joda.time.ReadableInstant readableInstant32 = null;
        org.joda.time.PeriodType periodType33 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod34 = new org.joda.time.MutablePeriod(readableInstant31, readableInstant32, periodType33);
        org.joda.time.DurationFieldType durationFieldType36 = periodType33.getFieldType((int) (short) 0);
        java.lang.String str37 = periodType33.toString();
        org.joda.time.Instant instant38 = new org.joda.time.Instant();
        org.joda.time.Instant instant40 = instant38.withMillis(0L);
        org.joda.time.Chronology chronology41 = instant40.getChronology();
        org.joda.time.Period period42 = new org.joda.time.Period((long) 53, (long) (-1), periodType33, chronology41);
        org.joda.time.MutablePeriod mutablePeriod43 = new org.joda.time.MutablePeriod((long) (short) 10, periodType19, chronology41);
        org.joda.time.DateTime dateTime44 = new org.joda.time.DateTime((long) (byte) 1, chronology41);
        org.joda.time.MutableDateTime mutableDateTime45 = instant9.toMutableDateTime(chronology41);
        org.junit.Assert.assertNotNull(instant2);
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(instant9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 86400000L + "'", long10 == 86400000L);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(mutableDateTime12);
        org.junit.Assert.assertNotNull(periodType19);
        org.junit.Assert.assertNotNull(durationFieldType22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "PeriodType[YearDayTime]" + "'", str23, "PeriodType[YearDayTime]");
        org.junit.Assert.assertNotNull(instant26);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(periodType33);
        org.junit.Assert.assertNotNull(durationFieldType36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "PeriodType[YearDayTime]" + "'", str37, "PeriodType[YearDayTime]");
        org.junit.Assert.assertNotNull(instant40);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(mutableDateTime45);
    }

    @Test
    public void test07724() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07724");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.Instant instant3 = new org.joda.time.Instant();
        org.joda.time.Instant instant5 = instant3.withMillis(0L);
        org.joda.time.Chronology chronology6 = instant5.getChronology();
        org.joda.time.DurationField durationField7 = chronology6.eras();
        long long11 = chronology6.add(0L, (long) 2022, (int) '4');
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = dateTimeFormatter2.withChronology(chronology6);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = dateTimeFormatter2.withZoneUTC();
        boolean boolean14 = dateTimeFormatter2.isPrinter();
        org.joda.time.MutableDateTime mutableDateTime15 = org.joda.time.MutableDateTime.now();
        mutableDateTime15.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime18 = mutableDateTime15.copy();
        org.joda.time.MutableDateTime.Property property19 = mutableDateTime15.weekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime20 = property19.roundHalfFloor();
        org.joda.time.MutableDateTime mutableDateTime21 = property19.roundHalfCeiling();
        org.joda.time.MutableDateTime mutableDateTime23 = property19.set(1);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime(chronology24);
        int int26 = dateTime25.getYearOfCentury();
        int int27 = dateTime25.getWeekyear();
        org.joda.time.DateTime dateTime28 = dateTime25.withEarlierOffsetAtOverlap();
        java.lang.String str29 = dateTime28.toString();
        org.joda.time.MutableDateTime mutableDateTime30 = dateTime28.toMutableDateTime();
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.UTC;
        boolean boolean32 = dateTimeZone31.isFixed();
        mutableDateTime30.setZoneRetainFields(dateTimeZone31);
        org.joda.time.MutableDateTime mutableDateTime34 = mutableDateTime23.toMutableDateTime(dateTimeZone31);
        org.joda.time.LocalDate localDate35 = org.joda.time.LocalDate.now(dateTimeZone31);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter36 = dateTimeFormatter2.withZone(dateTimeZone31);
        java.lang.Integer int37 = dateTimeFormatter36.getPivotYear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime39 = dateTimeFormatter36.parseLocalDateTime("194");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(instant5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 105144L + "'", long11 == 105144L);
        org.junit.Assert.assertNotNull(dateTimeFormatter12);
        org.junit.Assert.assertNotNull(dateTimeFormatter13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(mutableDateTime15);
        org.junit.Assert.assertNotNull(mutableDateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(mutableDateTime20);
        org.junit.Assert.assertNotNull(mutableDateTime21);
        org.junit.Assert.assertNotNull(mutableDateTime23);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 22 + "'", int26 == 22);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2022 + "'", int27 == 2022);
        org.junit.Assert.assertNotNull(dateTime28);
// flaky:         org.junit.Assert.assertEquals("'" + str29 + "' != '" + "2022-02-22T07:23:52.851Z" + "'", str29, "2022-02-22T07:23:52.851Z");
        org.junit.Assert.assertNotNull(mutableDateTime30);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(mutableDateTime34);
        org.junit.Assert.assertNotNull(localDate35);
        org.junit.Assert.assertNotNull(dateTimeFormatter36);
        org.junit.Assert.assertNull(int37);
    }

    @Test
    public void test07725() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07725");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property1 = mutableDateTime0.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime2 = property1.getMutableDateTime();
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime((long) 1);
        org.joda.time.Duration duration6 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period7 = duration6.toPeriod();
        org.joda.time.Duration duration10 = duration6.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Period period11 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime4, (org.joda.time.ReadableDuration) duration10);
        org.joda.time.Instant instant12 = dateTime4.toInstant();
        org.joda.time.DateTime dateTime15 = dateTime4.withDurationAdded((long) 3, 4);
        org.joda.time.MutableDateTime mutableDateTime16 = org.joda.time.MutableDateTime.now();
        mutableDateTime16.add((long) 'a');
        org.joda.time.MutableDateTime.Property property19 = mutableDateTime16.yearOfCentury();
        mutableDateTime16.addSeconds(0);
        org.joda.time.ReadableDuration readableDuration24 = null;
        org.joda.time.ReadableInstant readableInstant25 = null;
        org.joda.time.Period period26 = new org.joda.time.Period(readableDuration24, readableInstant25);
        org.joda.time.PeriodType periodType29 = null;
        org.joda.time.Period period30 = new org.joda.time.Period((long) 100, 1L, periodType29);
        org.joda.time.Period period32 = period30.minusSeconds((-1));
        java.lang.String str33 = period30.toString();
        org.joda.time.Period period34 = period30.toPeriod();
        org.joda.time.PeriodType periodType35 = period30.getPeriodType();
        org.joda.time.Period period36 = period26.normalizedStandard(periodType35);
        org.joda.time.DurationFieldType durationFieldType37 = null;
        int int38 = periodType35.indexOf(durationFieldType37);
        org.joda.time.Instant instant39 = new org.joda.time.Instant();
        org.joda.time.Instant instant41 = instant39.withMillis(0L);
        org.joda.time.Chronology chronology42 = instant41.getChronology();
        org.joda.time.DurationField durationField43 = chronology42.eras();
        org.joda.time.LocalTime localTime44 = org.joda.time.LocalTime.now(chronology42);
        org.joda.time.DurationField durationField45 = chronology42.eras();
        org.joda.time.DateTimeField dateTimeField46 = chronology42.hourOfDay();
        org.joda.time.MutablePeriod mutablePeriod47 = new org.joda.time.MutablePeriod((long) 12, (long) 292278993, periodType35, chronology42);
        org.joda.time.MutableDateTime mutableDateTime48 = mutableDateTime16.toMutableDateTime(chronology42);
        mutableDateTime16.setDayOfYear(44);
        int int51 = mutableDateTime16.getHourOfDay();
        org.joda.time.MutablePeriod mutablePeriod52 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime15, (org.joda.time.ReadableInstant) mutableDateTime16);
        mutableDateTime16.addMillis(365);
        mutableDateTime2.setTime((org.joda.time.ReadableInstant) mutableDateTime16);
        mutableDateTime16.addSeconds(26184);
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(mutableDateTime2);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(instant12);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(mutableDateTime16);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "PT0.099S" + "'", str33, "PT0.099S");
        org.junit.Assert.assertNotNull(period34);
        org.junit.Assert.assertNotNull(periodType35);
        org.junit.Assert.assertNotNull(period36);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertNotNull(instant41);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(durationField43);
        org.junit.Assert.assertNotNull(localTime44);
        org.junit.Assert.assertNotNull(durationField45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(mutableDateTime48);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 7 + "'", int51 == 7);
    }

    @Test
    public void test07726() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07726");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property1 = mutableDateTime0.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime3 = property1.set(45);
        org.joda.time.MutableDateTime mutableDateTime4 = property1.roundFloor();
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod((long) (short) -1, 3155695200000L);
        mutablePeriod7.clear();
        org.joda.time.Duration duration10 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period11 = duration10.toPeriod();
        org.joda.time.Duration duration14 = duration10.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime(chronology15);
        org.joda.time.DateTime dateTime18 = dateTime16.plusMinutes(15);
        org.joda.time.Interval interval19 = duration14.toIntervalTo((org.joda.time.ReadableInstant) dateTime18);
        mutablePeriod7.setPeriod((org.joda.time.ReadableInterval) interval19);
        mutablePeriod7.setYears(0);
        mutablePeriod7.addMinutes((int) (byte) 10);
        org.joda.time.ReadableDuration readableDuration25 = null;
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.Period period27 = new org.joda.time.Period(readableDuration25, readableInstant26);
        org.joda.time.Period period29 = period27.withDays((int) (byte) 1);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.LocalTime localTime32 = new org.joda.time.LocalTime((long) (short) 100, chronology31);
        org.joda.time.DurationFieldType durationFieldType33 = org.joda.time.DurationFieldType.millis();
        java.lang.String str34 = durationFieldType33.getName();
        boolean boolean35 = localTime32.isSupported(durationFieldType33);
        int int36 = period27.get(durationFieldType33);
        boolean boolean37 = mutablePeriod7.isSupported(durationFieldType33);
        int int38 = mutablePeriod7.getSeconds();
        mutableDateTime4.add((org.joda.time.ReadablePeriod) mutablePeriod7, 1424);
        mutableDateTime4.addMillis(84);
        mutableDateTime4.setMillisOfSecond((int) '4');
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime4.setMillisOfDay((-43829));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -43829 for millisOfDay must be in the range [0,86399999]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(mutableDateTime3);
        org.junit.Assert.assertNotNull(mutableDateTime4);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(interval19);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(durationFieldType33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "millis" + "'", str34, "millis");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
    }

    @Test
    public void test07727() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07727");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.dayOfMonth();
        boolean boolean2 = localDate0.isSupported(dateTimeFieldType1);
        org.joda.time.LocalDate.Property property3 = localDate0.yearOfEra();
        org.joda.time.Instant instant4 = new org.joda.time.Instant();
        org.joda.time.Instant instant6 = instant4.withMillis(0L);
        org.joda.time.Duration duration8 = org.joda.time.Duration.standardDays((long) (byte) 1);
        java.lang.String str9 = duration8.toString();
        org.joda.time.Instant instant10 = instant4.minus((org.joda.time.ReadableDuration) duration8);
        int int11 = property3.getDifference((org.joda.time.ReadableInstant) instant4);
        org.joda.time.Duration duration13 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period14 = duration13.toPeriod();
        org.joda.time.Duration duration16 = duration13.minus((long) 292278993);
        org.joda.time.MutableDateTime mutableDateTime17 = org.joda.time.MutableDateTime.now();
        mutableDateTime17.add((long) 'a');
        org.joda.time.MutableDateTime.Property property20 = mutableDateTime17.yearOfCentury();
        org.joda.time.Duration duration22 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period23 = duration22.toPeriod();
        org.joda.time.Duration duration25 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration28 = duration25.withDurationAdded((long) (short) 100, (int) ' ');
        org.joda.time.Duration duration29 = duration22.minus((org.joda.time.ReadableDuration) duration28);
        mutableDateTime17.add((org.joda.time.ReadableDuration) duration22);
        boolean boolean31 = duration16.isShorterThan((org.joda.time.ReadableDuration) duration22);
        org.joda.time.Instant instant32 = instant4.plus((org.joda.time.ReadableDuration) duration16);
        org.joda.time.Duration duration34 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration36 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration39 = duration36.withDurationAdded((long) (short) 100, (int) ' ');
        boolean boolean40 = duration34.isLongerThan((org.joda.time.ReadableDuration) duration39);
        org.joda.time.Minutes minutes41 = duration34.toStandardMinutes();
        org.joda.time.Instant instant42 = new org.joda.time.Instant();
        org.joda.time.Instant instant44 = instant42.withMillis(0L);
        org.joda.time.DateTime dateTime45 = instant44.toDateTimeISO();
        org.joda.time.Duration duration47 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration49 = org.joda.time.Duration.standardDays((long) (byte) 1);
        java.lang.String str50 = duration49.toString();
        boolean boolean51 = duration47.isShorterThan((org.joda.time.ReadableDuration) duration49);
        org.joda.time.Duration duration53 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period54 = duration53.toPeriod();
        org.joda.time.Duration duration57 = duration53.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Duration duration59 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration62 = duration59.withDurationAdded((long) (short) 100, (int) ' ');
        boolean boolean63 = duration57.isLongerThan((org.joda.time.ReadableDuration) duration59);
        boolean boolean64 = duration49.isEqual((org.joda.time.ReadableDuration) duration59);
        long long65 = duration49.getStandardDays();
        org.joda.time.Instant instant66 = instant44.minus((org.joda.time.ReadableDuration) duration49);
        boolean boolean67 = duration34.isEqual((org.joda.time.ReadableDuration) duration49);
        org.joda.time.Instant instant69 = instant32.withDurationAdded((org.joda.time.ReadableDuration) duration34, 26241);
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(instant6);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "PT86400S" + "'", str9, "PT86400S");
        org.junit.Assert.assertNotNull(instant10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(mutableDateTime17);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(instant32);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertNotNull(duration39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(minutes41);
        org.junit.Assert.assertNotNull(instant44);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertNotNull(duration49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "PT86400S" + "'", str50, "PT86400S");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(duration53);
        org.junit.Assert.assertNotNull(period54);
        org.junit.Assert.assertNotNull(duration57);
        org.junit.Assert.assertNotNull(duration59);
        org.junit.Assert.assertNotNull(duration62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 1L + "'", long65 == 1L);
        org.junit.Assert.assertNotNull(instant66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(instant69);
    }

    @Test
    public void test07728() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07728");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.dayOfMonth();
        boolean boolean2 = localDate0.isSupported(dateTimeFieldType1);
        org.joda.time.LocalDate.Property property3 = localDate0.yearOfEra();
        org.joda.time.Instant instant4 = new org.joda.time.Instant();
        org.joda.time.Instant instant6 = instant4.withMillis(0L);
        org.joda.time.Duration duration8 = org.joda.time.Duration.standardDays((long) (byte) 1);
        java.lang.String str9 = duration8.toString();
        org.joda.time.Instant instant10 = instant4.minus((org.joda.time.ReadableDuration) duration8);
        int int11 = property3.getDifference((org.joda.time.ReadableInstant) instant4);
        org.joda.time.Duration duration14 = new org.joda.time.Duration((long) (short) -1, (long) (-292275054));
        org.joda.time.Instant instant15 = instant4.plus((org.joda.time.ReadableDuration) duration14);
        org.joda.time.Duration duration17 = org.joda.time.Duration.standardDays((long) (byte) 1);
        java.lang.String str18 = duration17.toString();
        org.joda.time.Duration duration20 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Hours hours21 = duration20.toStandardHours();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime(chronology22);
        int int24 = dateTime23.getSecondOfMinute();
        org.joda.time.MutablePeriod mutablePeriod25 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration20, (org.joda.time.ReadableInstant) dateTime23);
        org.joda.time.Duration duration26 = duration17.plus((org.joda.time.ReadableDuration) duration20);
        org.joda.time.Duration duration28 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period29 = duration28.toPeriod();
        org.joda.time.Duration duration31 = duration28.minus((long) 292278993);
        org.joda.time.MutableDateTime mutableDateTime32 = org.joda.time.MutableDateTime.now();
        mutableDateTime32.add((long) 'a');
        org.joda.time.MutableDateTime.Property property35 = mutableDateTime32.yearOfCentury();
        org.joda.time.Duration duration37 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period38 = duration37.toPeriod();
        org.joda.time.Duration duration40 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration43 = duration40.withDurationAdded((long) (short) 100, (int) ' ');
        org.joda.time.Duration duration44 = duration37.minus((org.joda.time.ReadableDuration) duration43);
        mutableDateTime32.add((org.joda.time.ReadableDuration) duration37);
        boolean boolean46 = duration31.isShorterThan((org.joda.time.ReadableDuration) duration37);
        boolean boolean47 = duration20.isLongerThan((org.joda.time.ReadableDuration) duration31);
        org.joda.time.Instant instant48 = instant15.minus((org.joda.time.ReadableDuration) duration31);
        org.joda.time.MutableDateTime mutableDateTime49 = instant48.toMutableDateTime();
        org.joda.time.DateTime dateTime50 = instant48.toDateTime();
        org.joda.time.MutableDateTime mutableDateTime51 = instant48.toMutableDateTimeISO();
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(instant6);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "PT86400S" + "'", str9, "PT86400S");
        org.junit.Assert.assertNotNull(instant10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(instant15);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "PT86400S" + "'", str18, "PT86400S");
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(hours21);
// flaky:         org.junit.Assert.assertTrue("'" + int24 + "' != '" + 53 + "'", int24 == 53);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertNotNull(mutableDateTime32);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertNotNull(period38);
        org.junit.Assert.assertNotNull(duration40);
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertNotNull(duration44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(instant48);
        org.junit.Assert.assertNotNull(mutableDateTime49);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(mutableDateTime51);
    }

    @Test
    public void test07729() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07729");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = java.util.Locale.GERMAN;
        java.util.Locale locale3 = java.util.Locale.CANADA;
        java.lang.String str4 = locale2.getDisplayVariant(locale3);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology1, locale3);
        java.lang.Object obj6 = dateTimeParserBucket5.saveState();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.LocalTime localTime9 = new org.joda.time.LocalTime((long) (short) 100, chronology8);
        org.joda.time.DurationFieldType durationFieldType10 = org.joda.time.DurationFieldType.weeks();
        java.lang.String str11 = durationFieldType10.getName();
        boolean boolean12 = localTime9.isSupported(durationFieldType10);
        boolean boolean13 = dateTimeParserBucket5.restoreState((java.lang.Object) boolean12);
        org.joda.time.Chronology chronology14 = dateTimeParserBucket5.getChronology();
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime18 = dateTime16.withZoneRetainFields(dateTimeZone17);
        dateTimeParserBucket5.setZone(dateTimeZone17);
        dateTimeParserBucket5.setPivotYear((java.lang.Integer) 292278993);
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = org.joda.time.DateTimeFieldType.yearOfEra();
        java.util.Locale.Builder builder24 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder25 = builder24.clear();
        java.util.Locale locale26 = java.util.Locale.GERMAN;
        java.lang.String str27 = locale26.getDisplayName();
        java.lang.String str28 = locale26.getISO3Language();
        java.lang.String str29 = locale26.getISO3Country();
        java.util.Locale.Builder builder30 = builder25.setLocale(locale26);
        java.util.Locale locale31 = locale26.stripExtensions();
        dateTimeParserBucket5.saveField(dateTimeFieldType22, "1969-12-31", locale26);
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = org.joda.time.DateTimeFieldType.centuryOfEra();
        java.util.Locale locale35 = java.util.Locale.GERMAN;
        java.util.Locale locale36 = java.util.Locale.CANADA;
        java.lang.String str37 = locale35.getDisplayVariant(locale36);
        dateTimeParserBucket5.saveField(dateTimeFieldType33, "", locale36);
        dateTimeParserBucket5.setPivotYear((java.lang.Integer) 575);
        org.joda.time.MutableDateTime mutableDateTime42 = new org.joda.time.MutableDateTime((long) (short) -1);
        org.joda.time.MutableDateTime mutableDateTime43 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property44 = mutableDateTime43.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime46 = property44.set(45);
        org.joda.time.MutableDateTime mutableDateTime47 = property44.roundFloor();
        org.joda.time.MutableDateTime mutableDateTime49 = property44.add(45);
        org.joda.time.DateTimeZone dateTimeZone50 = org.joda.time.DateTimeZone.UTC;
        java.util.TimeZone timeZone51 = dateTimeZone50.toTimeZone();
        long long53 = dateTimeZone50.previousTransition(100L);
        int int55 = dateTimeZone50.getStandardOffset(86403200L);
        org.joda.time.DateTime dateTime56 = mutableDateTime49.toDateTime(dateTimeZone50);
        mutableDateTime42.setZoneRetainFields(dateTimeZone50);
        java.lang.String str59 = dateTimeZone50.getNameKey((long) 36950209);
        java.lang.String str60 = dateTimeZone50.getID();
        long long63 = dateTimeZone50.convertLocalToUTC(1645514162999L, true);
        dateTimeParserBucket5.setZone(dateTimeZone50);
        java.lang.String str66 = dateTimeZone50.getShortName((long) 152);
        long long70 = dateTimeZone50.convertLocalToUTC((long) 15556368, true, (-908840217599999965L));
        java.lang.String str72 = dateTimeZone50.getShortName((long) 1350);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "de");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertNotNull(durationFieldType10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "weeks" + "'", str11, "weeks");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "de");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "\u5fb7\u6587" + "'", str27, "\u5fb7\u6587");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "deu" + "'", str28, "deu");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "de");
        org.junit.Assert.assertNotNull(dateTimeFieldType33);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "de");
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(mutableDateTime43);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(mutableDateTime46);
        org.junit.Assert.assertNotNull(mutableDateTime47);
        org.junit.Assert.assertNotNull(mutableDateTime49);
        org.junit.Assert.assertNotNull(dateTimeZone50);
        org.junit.Assert.assertNotNull(timeZone51);
// flaky:         org.junit.Assert.assertEquals(timeZone51.getDisplayName(), "\u534f\u8c03\u4e16\u754c\u65f6\u95f4");
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 100L + "'", long53 == 100L);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "UTC" + "'", str59, "UTC");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "UTC" + "'", str60, "UTC");
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 1645514162999L + "'", long63 == 1645514162999L);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "+00:00" + "'", str66, "+00:00");
        org.junit.Assert.assertTrue("'" + long70 + "' != '" + 15556368L + "'", long70 == 15556368L);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "+00:00" + "'", str72, "+00:00");
    }

    @Test
    public void test07730() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07730");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(chronology1);
        org.joda.time.DateTime dateTime4 = dateTime2.plusMinutes(15);
        org.joda.time.Chronology chronology5 = dateTime2.getChronology();
        java.lang.String str6 = chronology5.toString();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((long) 0, chronology5);
        org.joda.time.DateTime dateTime8 = localDate7.toDateTimeAtStartOfDay();
        org.joda.time.LocalDate.Property property9 = localDate7.year();
        org.joda.time.Instant instant10 = new org.joda.time.Instant();
        org.joda.time.Instant instant12 = instant10.withMillis(0L);
        org.joda.time.Duration duration14 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period15 = duration14.toPeriod();
        org.joda.time.Duration duration18 = duration14.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Instant instant19 = instant12.plus((org.joda.time.ReadableDuration) duration18);
        org.joda.time.PeriodType periodType20 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.Period period21 = duration18.toPeriod(periodType20);
        org.joda.time.Duration duration23 = duration18.withMillis(60000L);
        org.joda.time.Instant instant24 = new org.joda.time.Instant();
        org.joda.time.Instant instant26 = instant24.withMillis(0L);
        org.joda.time.Duration duration28 = org.joda.time.Duration.standardDays((long) (byte) 1);
        java.lang.String str29 = duration28.toString();
        org.joda.time.Instant instant30 = instant24.minus((org.joda.time.ReadableDuration) duration28);
        org.joda.time.MutableDateTime mutableDateTime31 = org.joda.time.MutableDateTime.now();
        mutableDateTime31.add((long) 'a');
        org.joda.time.MutableDateTime.Property property34 = mutableDateTime31.yearOfCentury();
        org.joda.time.Duration duration36 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period37 = duration36.toPeriod();
        org.joda.time.Duration duration39 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration42 = duration39.withDurationAdded((long) (short) 100, (int) ' ');
        org.joda.time.Duration duration43 = duration36.minus((org.joda.time.ReadableDuration) duration42);
        mutableDateTime31.add((org.joda.time.ReadableDuration) duration36);
        org.joda.time.MutableDateTime.Property property45 = mutableDateTime31.centuryOfEra();
        mutableDateTime31.addHours((int) (byte) 10);
        mutableDateTime31.addWeeks(100);
        boolean boolean50 = instant24.isAfter((org.joda.time.ReadableInstant) mutableDateTime31);
        org.joda.time.ReadableDuration readableDuration51 = null;
        org.joda.time.ReadableInstant readableInstant52 = null;
        org.joda.time.Period period53 = new org.joda.time.Period(readableDuration51, readableInstant52);
        org.joda.time.PeriodType periodType56 = null;
        org.joda.time.Period period57 = new org.joda.time.Period((long) 100, 1L, periodType56);
        org.joda.time.Period period59 = period57.minusSeconds((-1));
        java.lang.String str60 = period57.toString();
        org.joda.time.Period period61 = period57.toPeriod();
        org.joda.time.PeriodType periodType62 = period57.getPeriodType();
        org.joda.time.Period period63 = period53.normalizedStandard(periodType62);
        java.lang.String str64 = periodType62.getName();
        int int65 = periodType62.size();
        org.joda.time.Period period66 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration18, (org.joda.time.ReadableInstant) instant24, periodType62);
        org.joda.time.Duration duration68 = org.joda.time.Duration.standardDays((long) (byte) 1);
        java.lang.String str69 = duration68.toString();
        org.joda.time.Duration duration71 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Hours hours72 = duration71.toStandardHours();
        org.joda.time.Chronology chronology73 = null;
        org.joda.time.DateTime dateTime74 = new org.joda.time.DateTime(chronology73);
        int int75 = dateTime74.getSecondOfMinute();
        org.joda.time.MutablePeriod mutablePeriod76 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration71, (org.joda.time.ReadableInstant) dateTime74);
        org.joda.time.Duration duration77 = duration68.plus((org.joda.time.ReadableDuration) duration71);
        org.joda.time.Instant instant78 = instant24.plus((org.joda.time.ReadableDuration) duration77);
        long long79 = property9.getDifferenceAsLong((org.joda.time.ReadableInstant) instant78);
        org.joda.time.LocalDate localDate80 = property9.roundHalfEvenCopy();
        org.joda.time.DateTime dateTime81 = localDate80.toDateTimeAtStartOfDay();
        int int82 = localDate80.getMonthOfYear();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "ISOChronology[UTC]" + "'", str6, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(instant12);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(instant19);
        org.junit.Assert.assertNotNull(periodType20);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(instant26);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "PT86400S" + "'", str29, "PT86400S");
        org.junit.Assert.assertNotNull(instant30);
        org.junit.Assert.assertNotNull(mutableDateTime31);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertNotNull(period37);
        org.junit.Assert.assertNotNull(duration39);
        org.junit.Assert.assertNotNull(duration42);
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(period59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "PT0.099S" + "'", str60, "PT0.099S");
        org.junit.Assert.assertNotNull(period61);
        org.junit.Assert.assertNotNull(periodType62);
        org.junit.Assert.assertNotNull(period63);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "Standard" + "'", str64, "Standard");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 8 + "'", int65 == 8);
        org.junit.Assert.assertNotNull(duration68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "PT86400S" + "'", str69, "PT86400S");
        org.junit.Assert.assertNotNull(duration71);
        org.junit.Assert.assertNotNull(hours72);
// flaky:         org.junit.Assert.assertTrue("'" + int75 + "' != '" + 53 + "'", int75 == 53);
        org.junit.Assert.assertNotNull(duration77);
        org.junit.Assert.assertNotNull(instant78);
        org.junit.Assert.assertTrue("'" + long79 + "' != '" + (-52L) + "'", long79 == (-52L));
        org.junit.Assert.assertNotNull(localDate80);
        org.junit.Assert.assertNotNull(dateTime81);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 1 + "'", int82 == 1);
    }

    @Test
    public void test07731() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07731");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime3 = mutableDateTime0.copy();
        org.joda.time.MutableDateTime.Property property4 = mutableDateTime0.yearOfEra();
        org.joda.time.MutableDateTime mutableDateTime6 = property4.addWrapField(62151);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 1, chronology8);
        int int10 = dateTime9.getMinuteOfDay();
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.Period period14 = new org.joda.time.Period(readableDuration12, readableInstant13);
        org.joda.time.PeriodType periodType17 = null;
        org.joda.time.Period period18 = new org.joda.time.Period((long) 100, 1L, periodType17);
        org.joda.time.Period period20 = period18.minusSeconds((-1));
        java.lang.String str21 = period18.toString();
        org.joda.time.Period period22 = period18.toPeriod();
        org.joda.time.PeriodType periodType23 = period18.getPeriodType();
        org.joda.time.Period period24 = period14.normalizedStandard(periodType23);
        org.joda.time.Instant instant25 = new org.joda.time.Instant();
        org.joda.time.Instant instant27 = instant25.withMillis(0L);
        org.joda.time.Chronology chronology28 = instant27.getChronology();
        org.joda.time.DurationField durationField29 = chronology28.eras();
        long long33 = chronology28.add(0L, (long) 2022, (int) '4');
        org.joda.time.DateTimeField dateTimeField34 = chronology28.secondOfMinute();
        org.joda.time.MutablePeriod mutablePeriod35 = new org.joda.time.MutablePeriod(44L, periodType23, chronology28);
        org.joda.time.DateTimeField dateTimeField36 = chronology28.clockhourOfHalfday();
        org.joda.time.DateTime dateTime37 = dateTime9.toDateTime(chronology28);
        org.joda.time.LocalDate localDate40 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property41 = localDate40.monthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType42 = org.joda.time.DateTimeFieldType.minuteOfDay();
        boolean boolean43 = localDate40.isSupported(dateTimeFieldType42);
        org.joda.time.Chronology chronology44 = localDate40.getChronology();
        org.joda.time.MutablePeriod mutablePeriod45 = new org.joda.time.MutablePeriod((long) (byte) -1, 0L, chronology44);
        org.joda.time.MutableDateTime mutableDateTime46 = dateTime37.toMutableDateTime(chronology44);
        org.joda.time.DateTimeField dateTimeField47 = chronology44.clockhourOfHalfday();
        int int48 = mutableDateTime6.get(dateTimeField47);
        int int49 = mutableDateTime6.getMinuteOfDay();
        int int50 = mutableDateTime6.getMinuteOfHour();
        mutableDateTime6.addMonths(26306);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime6.setTime(1921, 26431904, 62431, 26388166);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 1921 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(mutableDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "PT0.099S" + "'", str21, "PT0.099S");
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(periodType23);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertNotNull(instant27);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 105144L + "'", long33 == 105144L);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(dateTimeFieldType42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(mutableDateTime46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 7 + "'", int48 == 7);
// flaky:         org.junit.Assert.assertTrue("'" + int49 + "' != '" + 443 + "'", int49 == 443);
// flaky:         org.junit.Assert.assertTrue("'" + int50 + "' != '" + 23 + "'", int50 == 23);
    }

    @Test
    public void test07732() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07732");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        int int2 = dateTime1.getYearOfCentury();
        int int3 = dateTime1.getWeekyear();
        org.joda.time.DateTime dateTime5 = dateTime1.plus((long) 15);
        org.joda.time.DateTime.Property property6 = dateTime1.year();
        org.joda.time.DateTime dateTime7 = property6.roundHalfFloorCopy();
        org.joda.time.DateTime.Property property8 = dateTime7.millisOfSecond();
        org.joda.time.MutableDateTime mutableDateTime9 = dateTime7.toMutableDateTime();
        int int10 = mutableDateTime9.getCenturyOfEra();
        org.joda.time.MutableDateTime mutableDateTime11 = org.joda.time.MutableDateTime.now();
        mutableDateTime11.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime14 = mutableDateTime11.copy();
        org.joda.time.MutableDateTime.Property property15 = mutableDateTime11.weekOfWeekyear();
        org.joda.time.MutableDateTime.Property property16 = mutableDateTime11.dayOfYear();
        org.joda.time.MutableDateTime mutableDateTime17 = org.joda.time.MutableDateTime.now();
        mutableDateTime17.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime20 = mutableDateTime17.copy();
        mutableDateTime17.setDate((long) '#');
        org.joda.time.LocalDate localDate23 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property24 = localDate23.monthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = org.joda.time.DateTimeFieldType.minuteOfDay();
        boolean boolean26 = localDate23.isSupported(dateTimeFieldType25);
        int int27 = localDate23.getDayOfYear();
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateMidnight dateMidnight29 = localDate23.toDateMidnight(dateTimeZone28);
        org.joda.time.DateTime dateTime30 = mutableDateTime17.toDateTime(dateTimeZone28);
        org.joda.time.LocalDate localDate31 = org.joda.time.LocalDate.now(dateTimeZone28);
        org.joda.time.PeriodType periodType34 = null;
        org.joda.time.Period period35 = new org.joda.time.Period((long) 100, 1L, periodType34);
        org.joda.time.PeriodType periodType36 = period35.getPeriodType();
        boolean boolean37 = dateTimeZone28.equals((java.lang.Object) periodType36);
        mutableDateTime11.setZoneRetainFields(dateTimeZone28);
        org.joda.time.LocalDate localDate39 = new org.joda.time.LocalDate(dateTimeZone28);
        org.joda.time.DateTime dateTime40 = mutableDateTime9.toDateTime(dateTimeZone28);
        int int41 = dateTime40.getYearOfCentury();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 22 + "'", int2 == 22);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2022 + "'", int3 == 2022);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 20 + "'", int10 == 20);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertNotNull(mutableDateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(mutableDateTime17);
        org.junit.Assert.assertNotNull(mutableDateTime20);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(dateTimeFieldType25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 53 + "'", int27 == 53);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(dateMidnight29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertNotNull(periodType36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 22 + "'", int41 == 22);
    }

    @Test
    public void test07733() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07733");
        java.lang.Object obj0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.now();
        mutableDateTime1.add((long) 'a');
        org.joda.time.MutableDateTime.Property property4 = mutableDateTime1.yearOfCentury();
        org.joda.time.Duration duration6 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period7 = duration6.toPeriod();
        org.joda.time.Duration duration9 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration12 = duration9.withDurationAdded((long) (short) 100, (int) ' ');
        org.joda.time.Duration duration13 = duration6.minus((org.joda.time.ReadableDuration) duration12);
        mutableDateTime1.add((org.joda.time.ReadableDuration) duration6);
        org.joda.time.MutableDateTime.Property property15 = mutableDateTime1.centuryOfEra();
        mutableDateTime1.addHours((int) (byte) 10);
        mutableDateTime1.addYears(12);
        org.joda.time.Instant instant20 = new org.joda.time.Instant();
        org.joda.time.DateTime dateTime21 = instant20.toDateTime();
        org.joda.time.LocalDateTime localDateTime22 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime24 = localDateTime22.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime24.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime26.withCenturyOfEra((int) 'a');
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime(chronology29);
        org.joda.time.DateTime dateTime32 = dateTime30.plusMinutes(15);
        org.joda.time.DateTime dateTime33 = localDateTime26.toDateTime((org.joda.time.ReadableInstant) dateTime30);
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime35 = localDateTime26.toDateTime(dateTimeZone34);
        org.joda.time.DateTime dateTime36 = dateTime21.withZoneRetainFields(dateTimeZone34);
        java.lang.String str37 = dateTimeZone34.toString();
        java.lang.String str38 = dateTimeZone34.getID();
        org.joda.time.MutableDateTime mutableDateTime39 = new org.joda.time.MutableDateTime(dateTimeZone34);
        mutableDateTime1.setDate((org.joda.time.ReadableInstant) mutableDateTime39);
        org.joda.time.MutableDateTime.Property property41 = mutableDateTime1.millisOfSecond();
        org.joda.time.DateTimeZone dateTimeZone42 = mutableDateTime1.getZone();
        org.joda.time.LocalDateTime localDateTime43 = new org.joda.time.LocalDateTime(obj0, dateTimeZone42);
        java.util.Date date44 = localDateTime43.toDate();
        org.joda.time.LocalDateTime localDateTime46 = localDateTime43.withYear(1966);
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "UTC" + "'", str37, "UTC");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "UTC" + "'", str38, "UTC");
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertNotNull(date44);
// flaky:         org.junit.Assert.assertEquals(date44.toString(), "Tue Feb 22 07:23:53 GMT+00:00 2022");
        org.junit.Assert.assertNotNull(localDateTime46);
    }

    @Test
    public void test07734() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07734");
        org.joda.time.MutableDateTime mutableDateTime2 = org.joda.time.MutableDateTime.now();
        mutableDateTime2.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime5 = mutableDateTime2.copy();
        org.joda.time.MutableDateTime.Property property6 = mutableDateTime2.weekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime7 = property6.roundHalfFloor();
        org.joda.time.MutableDateTime mutableDateTime9 = property6.add((long) (byte) 10);
        int int10 = mutableDateTime9.getCenturyOfEra();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((long) (byte) -1, chronology12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.plusMonths(46);
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.minuteOfDay();
        int int17 = localDateTime15.get(dateTimeFieldType16);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime15.plusMinutes(7);
        org.joda.time.PeriodType periodType22 = null;
        org.joda.time.Period period23 = new org.joda.time.Period((long) 100, 1L, periodType22);
        org.joda.time.Period period25 = period23.minusSeconds((-1));
        org.joda.time.Period period27 = period25.multipliedBy((int) '#');
        org.joda.time.LocalDateTime localDateTime28 = localDateTime15.minus((org.joda.time.ReadablePeriod) period27);
        org.joda.time.Period period30 = period27.withWeeks(7);
        org.joda.time.MutablePeriod mutablePeriod39 = new org.joda.time.MutablePeriod(999, 12, 8, (int) (byte) 10, 5, (-292275054), 15, 50);
        org.joda.time.Period period40 = period30.withFields((org.joda.time.ReadablePeriod) mutablePeriod39);
        mutableDateTime9.add((org.joda.time.ReadablePeriod) mutablePeriod39);
        org.joda.time.PeriodType periodType42 = mutablePeriod39.getPeriodType();
        org.joda.time.PeriodType periodType43 = periodType42.withWeeksRemoved();
        org.joda.time.Instant instant44 = new org.joda.time.Instant();
        org.joda.time.Instant instant46 = instant44.withMillis(0L);
        org.joda.time.Chronology chronology47 = instant46.getChronology();
        org.joda.time.DurationField durationField48 = chronology47.eras();
        long long52 = chronology47.add(0L, (long) 2022, (int) '4');
        org.joda.time.DateTimeField dateTimeField53 = chronology47.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField54 = chronology47.dayOfYear();
        org.joda.time.MutableDateTime mutableDateTime55 = org.joda.time.MutableDateTime.now();
        java.lang.Object obj56 = mutableDateTime55.clone();
        mutableDateTime55.setTime((long) 46);
        org.joda.time.MutableDateTime.Property property59 = mutableDateTime55.dayOfWeek();
        org.joda.time.MutableDateTime mutableDateTime61 = property59.add(1L);
        org.joda.time.DateTimeZone dateTimeZone62 = org.joda.time.DateTimeZone.UTC;
        java.util.TimeZone timeZone63 = dateTimeZone62.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone64 = org.joda.time.DateTimeZone.UTC;
        long long66 = dateTimeZone62.getMillisKeepLocal(dateTimeZone64, (long) 44);
        org.joda.time.DateTime dateTime67 = org.joda.time.DateTime.now(dateTimeZone62);
        mutableDateTime61.setZoneRetainFields(dateTimeZone62);
        java.util.Locale.Builder builder70 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder71 = builder70.clear();
        java.util.Locale locale72 = builder71.build();
        java.lang.String str73 = dateTimeZone62.getName(555370422L, locale72);
        java.lang.String str75 = dateTimeZone62.getShortName(962578L);
        int int77 = dateTimeZone62.getOffset(1645514174548L);
        java.lang.String str78 = dateTimeZone62.toString();
        org.joda.time.Chronology chronology79 = chronology47.withZone(dateTimeZone62);
        org.joda.time.MutablePeriod mutablePeriod80 = new org.joda.time.MutablePeriod((long) 360, 2040681600000L, periodType43, chronology47);
        org.junit.Assert.assertNotNull(mutableDateTime2);
        org.junit.Assert.assertNotNull(mutableDateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(mutableDateTime7);
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 20 + "'", int10 == 20);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1439 + "'", int17 == 1439);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertNotNull(period40);
        org.junit.Assert.assertNotNull(periodType42);
        org.junit.Assert.assertNotNull(periodType43);
        org.junit.Assert.assertNotNull(instant46);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertNotNull(durationField48);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 105144L + "'", long52 == 105144L);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertNotNull(mutableDateTime55);
        org.junit.Assert.assertNotNull(obj56);
// flaky:         org.junit.Assert.assertEquals(obj56.toString(), "2022-02-22T07:23:53.246Z");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj56), "2022-02-22T07:23:53.246Z");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj56), "2022-02-22T07:23:53.246Z");
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertNotNull(mutableDateTime61);
        org.junit.Assert.assertNotNull(dateTimeZone62);
        org.junit.Assert.assertNotNull(timeZone63);
// flaky:         org.junit.Assert.assertEquals(timeZone63.getDisplayName(), "\u534f\u8c03\u4e16\u754c\u65f6\u95f4");
        org.junit.Assert.assertNotNull(dateTimeZone64);
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 44L + "'", long66 == 44L);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(locale72);
        org.junit.Assert.assertEquals(locale72.toString(), "");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "+00:00" + "'", str73, "+00:00");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "+00:00" + "'", str75, "+00:00");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "UTC" + "'", str78, "UTC");
        org.junit.Assert.assertNotNull(chronology79);
    }

    @Test
    public void test07735() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07735");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.monthOfYear();
        org.joda.time.DateTimeField dateTimeField2 = property1.getField();
        org.joda.time.LocalDate localDate3 = property1.roundCeilingCopy();
        org.joda.time.LocalDate localDate5 = localDate3.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDate localDate7 = localDate3.withWeekOfWeekyear(46);
        org.joda.time.LocalDate localDate9 = localDate7.plusWeeks((int) (byte) 10);
        org.joda.time.MutableDateTime mutableDateTime10 = org.joda.time.MutableDateTime.now();
        mutableDateTime10.add((long) 'a');
        org.joda.time.MutableDateTime.Property property13 = mutableDateTime10.yearOfCentury();
        org.joda.time.Duration duration15 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period16 = duration15.toPeriod();
        org.joda.time.Duration duration18 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration21 = duration18.withDurationAdded((long) (short) 100, (int) ' ');
        org.joda.time.Duration duration22 = duration15.minus((org.joda.time.ReadableDuration) duration21);
        mutableDateTime10.add((org.joda.time.ReadableDuration) duration15);
        org.joda.time.MutableDateTime.Property property24 = mutableDateTime10.centuryOfEra();
        mutableDateTime10.addHours((int) (byte) 10);
        int int27 = mutableDateTime10.getSecondOfDay();
        org.joda.time.LocalDate localDate28 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property29 = localDate28.monthOfYear();
        org.joda.time.LocalDate.Property property30 = localDate28.dayOfMonth();
        org.joda.time.ReadableInstant readableInstant31 = null;
        org.joda.time.ReadableInstant readableInstant32 = null;
        org.joda.time.PeriodType periodType33 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod34 = new org.joda.time.MutablePeriod(readableInstant31, readableInstant32, periodType33);
        org.joda.time.DurationFieldType durationFieldType36 = periodType33.getFieldType((int) (short) 0);
        boolean boolean37 = localDate28.isSupported(durationFieldType36);
        mutableDateTime10.add(durationFieldType36, (-292275054));
        org.joda.time.LocalDate localDate41 = localDate7.withFieldAdded(durationFieldType36, 53);
        org.joda.time.ReadableDuration readableDuration42 = null;
        org.joda.time.ReadableInstant readableInstant43 = null;
        org.joda.time.Period period44 = new org.joda.time.Period(readableDuration42, readableInstant43);
        org.joda.time.PeriodType periodType47 = null;
        org.joda.time.Period period48 = new org.joda.time.Period((long) 100, 1L, periodType47);
        org.joda.time.Period period50 = period48.minusSeconds((-1));
        java.lang.String str51 = period48.toString();
        org.joda.time.Period period52 = period48.toPeriod();
        org.joda.time.PeriodType periodType53 = period48.getPeriodType();
        org.joda.time.Period period54 = period44.normalizedStandard(periodType53);
        java.lang.String str55 = periodType53.getName();
        org.joda.time.Instant instant56 = new org.joda.time.Instant();
        org.joda.time.Instant instant58 = instant56.withMillis(0L);
        org.joda.time.DateTime dateTime59 = instant58.toDateTime();
        org.joda.time.DateTime dateTime61 = new org.joda.time.DateTime((long) 1);
        org.joda.time.PeriodType periodType62 = org.joda.time.PeriodType.months();
        org.joda.time.Period period63 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime59, (org.joda.time.ReadableInstant) dateTime61, periodType62);
        org.joda.time.PeriodType periodType66 = null;
        org.joda.time.Period period67 = new org.joda.time.Period((long) 100, 1L, periodType66);
        org.joda.time.Period period69 = period67.minusSeconds((-1));
        java.lang.String str70 = period67.toString();
        org.joda.time.Period period71 = period67.toPeriod();
        org.joda.time.PeriodType periodType72 = period67.getPeriodType();
        org.joda.time.DateTime dateTime73 = dateTime61.plus((org.joda.time.ReadablePeriod) period67);
        org.joda.time.Chronology chronology75 = null;
        org.joda.time.LocalTime localTime76 = new org.joda.time.LocalTime((long) (short) 100, chronology75);
        org.joda.time.DurationFieldType durationFieldType77 = org.joda.time.DurationFieldType.millis();
        java.lang.String str78 = durationFieldType77.getName();
        boolean boolean79 = localTime76.isSupported(durationFieldType77);
        int int80 = period67.get(durationFieldType77);
        boolean boolean81 = periodType53.isSupported(durationFieldType77);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate83 = localDate7.withFieldAdded(durationFieldType77, 39172808);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'millis' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(mutableDateTime10);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(property24);
// flaky:         org.junit.Assert.assertTrue("'" + int27 + "' != '" + 62633 + "'", int27 == 62633);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(periodType33);
        org.junit.Assert.assertNotNull(durationFieldType36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(localDate41);
        org.junit.Assert.assertNotNull(period50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "PT0.099S" + "'", str51, "PT0.099S");
        org.junit.Assert.assertNotNull(period52);
        org.junit.Assert.assertNotNull(periodType53);
        org.junit.Assert.assertNotNull(period54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "Standard" + "'", str55, "Standard");
        org.junit.Assert.assertNotNull(instant58);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(periodType62);
        org.junit.Assert.assertNotNull(period69);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "PT0.099S" + "'", str70, "PT0.099S");
        org.junit.Assert.assertNotNull(period71);
        org.junit.Assert.assertNotNull(periodType72);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertNotNull(durationFieldType77);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "millis" + "'", str78, "millis");
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + (-99) + "'", int80 == (-99));
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
    }

    @Test
    public void test07736() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07736");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((long) (short) 100, chronology1);
        int int3 = localTime2.getMillisOfDay();
        org.joda.time.LocalTime.Property property4 = localTime2.millisOfSecond();
        org.joda.time.DurationField durationField5 = property4.getLeapDurationField();
        org.joda.time.LocalTime localTime6 = property4.roundHalfEvenCopy();
        org.joda.time.Instant instant7 = new org.joda.time.Instant();
        org.joda.time.Instant instant9 = instant7.withMillis(0L);
        org.joda.time.Duration duration11 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period12 = duration11.toPeriod();
        org.joda.time.Duration duration15 = duration11.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Instant instant16 = instant9.plus((org.joda.time.ReadableDuration) duration15);
        long long17 = instant16.getMillis();
        org.joda.time.Chronology chronology18 = instant16.getChronology();
        org.joda.time.MutableDateTime mutableDateTime19 = org.joda.time.MutableDateTime.now();
        mutableDateTime19.add((long) 'a');
        org.joda.time.Duration duration23 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration25 = org.joda.time.Duration.standardDays((long) (byte) 1);
        java.lang.String str26 = duration25.toString();
        boolean boolean27 = duration23.isShorterThan((org.joda.time.ReadableDuration) duration25);
        org.joda.time.Hours hours28 = duration23.toStandardHours();
        mutableDateTime19.add((org.joda.time.ReadableDuration) duration23, 20);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime(chronology31);
        int int33 = dateTime32.getYearOfCentury();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter34 = null;
        java.lang.String str35 = dateTime32.toString(dateTimeFormatter34);
        org.joda.time.DateTime dateTime37 = dateTime32.minusMonths(22);
        org.joda.time.Instant instant38 = new org.joda.time.Instant();
        org.joda.time.Instant instant40 = instant38.withMillis(0L);
        org.joda.time.Chronology chronology41 = instant40.getChronology();
        org.joda.time.DurationField durationField42 = chronology41.eras();
        org.joda.time.DateTime dateTime43 = dateTime32.withChronology(chronology41);
        org.joda.time.Period period44 = duration23.toPeriod(chronology41);
        org.joda.time.Instant instant46 = instant16.withDurationAdded((org.joda.time.ReadableDuration) duration23, 16);
        boolean boolean47 = localTime6.equals((java.lang.Object) instant16);
        org.joda.time.Instant instant50 = instant16.withDurationAdded(3155695200000L, 44);
        org.joda.time.DateTime dateTime51 = instant50.toDateTimeISO();
        org.joda.time.Chronology chronology52 = instant50.getChronology();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 100 + "'", int3 == 100);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNull(durationField5);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(instant9);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(instant16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 86400000L + "'", long17 == 86400000L);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(mutableDateTime19);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "PT86400S" + "'", str26, "PT86400S");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(hours28);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 22 + "'", int33 == 22);
// flaky:         org.junit.Assert.assertEquals("'" + str35 + "' != '" + "2022-02-22T07:23:53.319Z" + "'", str35, "2022-02-22T07:23:53.319Z");
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(instant40);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(durationField42);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(period44);
        org.junit.Assert.assertNotNull(instant46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(instant50);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(chronology52);
    }

    @Test
    public void test07737() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07737");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        java.lang.Object obj1 = mutableDateTime0.clone();
        mutableDateTime0.setTime((long) 46);
        org.joda.time.MutableDateTime.Property property4 = mutableDateTime0.dayOfWeek();
        org.joda.time.MutableDateTime mutableDateTime6 = property4.add(1L);
        mutableDateTime6.addWeeks(5);
        java.lang.Object obj9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(obj9);
        boolean boolean12 = dateTime10.isBefore((long) 7);
        java.lang.String str13 = dateTime10.toString();
        org.joda.time.DateTime dateTime15 = dateTime10.minus((long) 7);
        org.joda.time.Instant instant16 = new org.joda.time.Instant();
        org.joda.time.Instant instant18 = instant16.withMillis(0L);
        org.joda.time.Chronology chronology19 = instant18.getChronology();
        org.joda.time.DateTime dateTime20 = dateTime10.toDateTime(chronology19);
        org.joda.time.DurationField durationField21 = chronology19.days();
        org.joda.time.DateTimeField dateTimeField22 = chronology19.weekyear();
        boolean boolean24 = dateTimeField22.isLeap(0L);
        org.joda.time.LocalDate localDate25 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property26 = localDate25.monthOfYear();
        org.joda.time.DateTimeField dateTimeField27 = property26.getField();
        org.joda.time.LocalDate localDate28 = property26.withMaximumValue();
        java.util.Date date29 = localDate28.toDate();
        org.joda.time.LocalDate.Property property30 = localDate28.dayOfMonth();
        org.joda.time.LocalDate localDate31 = property30.withMaximumValue();
        org.joda.time.LocalDate localDate33 = localDate31.plusDays(12);
        org.joda.time.MutableDateTime mutableDateTime34 = org.joda.time.MutableDateTime.now();
        java.lang.Object obj35 = mutableDateTime34.clone();
        mutableDateTime34.setTime((long) 46);
        org.joda.time.MutableDateTime.Property property38 = mutableDateTime34.dayOfWeek();
        org.joda.time.MutableDateTime mutableDateTime40 = property38.add(1L);
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.UTC;
        java.util.TimeZone timeZone42 = dateTimeZone41.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.UTC;
        long long45 = dateTimeZone41.getMillisKeepLocal(dateTimeZone43, (long) 44);
        org.joda.time.DateTime dateTime46 = org.joda.time.DateTime.now(dateTimeZone41);
        mutableDateTime40.setZoneRetainFields(dateTimeZone41);
        org.joda.time.MutableDateTime mutableDateTime48 = org.joda.time.MutableDateTime.now(dateTimeZone41);
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.DateTime dateTime50 = new org.joda.time.DateTime(chronology49);
        int int51 = dateTime50.getYearOfCentury();
        org.joda.time.DateTime dateTime53 = dateTime50.withSecondOfMinute(53);
        org.joda.time.Duration duration55 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period56 = duration55.toPeriod();
        org.joda.time.Duration duration58 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration61 = duration58.withDurationAdded((long) (short) 100, (int) ' ');
        org.joda.time.Duration duration62 = duration55.minus((org.joda.time.ReadableDuration) duration61);
        org.joda.time.ReadableInstant readableInstant63 = null;
        org.joda.time.ReadableInstant readableInstant64 = null;
        org.joda.time.PeriodType periodType65 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod66 = new org.joda.time.MutablePeriod(readableInstant63, readableInstant64, periodType65);
        org.joda.time.DurationFieldType durationFieldType68 = periodType65.getFieldType((int) (short) 0);
        java.lang.String str69 = periodType65.toString();
        org.joda.time.Period period70 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime50, (org.joda.time.ReadableDuration) duration55, periodType65);
        org.joda.time.Period period72 = period70.minusMinutes(49);
        org.joda.time.Instant instant73 = new org.joda.time.Instant();
        org.joda.time.Instant instant75 = instant73.withMillis(0L);
        org.joda.time.DateTime dateTime76 = instant75.toDateTime();
        org.joda.time.DateTime dateTime78 = new org.joda.time.DateTime((long) 1);
        org.joda.time.PeriodType periodType79 = org.joda.time.PeriodType.months();
        org.joda.time.Period period80 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime76, (org.joda.time.ReadableInstant) dateTime78, periodType79);
        org.joda.time.Period period81 = period80.toPeriod();
        org.joda.time.Period period82 = period72.withFields((org.joda.time.ReadablePeriod) period81);
        mutableDateTime48.add((org.joda.time.ReadablePeriod) period72, (int) (byte) 10);
        int[] intArray85 = period72.getValues();
        int int86 = dateTimeField22.getMinimumValue((org.joda.time.ReadablePartial) localDate33, intArray85);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime6.setRounding(dateTimeField22, 42);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal rounding mode: 42");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(obj1);
// flaky:         org.junit.Assert.assertEquals(obj1.toString(), "2022-02-22T07:23:53.369Z");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj1), "2022-02-22T07:23:53.369Z");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj1), "2022-02-22T07:23:53.369Z");
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "2022-02-22T07:23:53.369Z" + "'", str13, "2022-02-22T07:23:53.369Z");
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(instant18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertNotNull(date29);
// flaky:         org.junit.Assert.assertEquals(date29.toString(), "Thu Dec 22 00:00:00 GMT+00:00 2022");
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertNotNull(localDate33);
        org.junit.Assert.assertNotNull(mutableDateTime34);
        org.junit.Assert.assertNotNull(obj35);
// flaky:         org.junit.Assert.assertEquals(obj35.toString(), "2022-02-22T07:23:53.369Z");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj35), "2022-02-22T07:23:53.369Z");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj35), "2022-02-22T07:23:53.369Z");
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(mutableDateTime40);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertNotNull(timeZone42);
// flaky:         org.junit.Assert.assertEquals(timeZone42.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone43);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 44L + "'", long45 == 44L);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(mutableDateTime48);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 22 + "'", int51 == 22);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(duration55);
        org.junit.Assert.assertNotNull(period56);
        org.junit.Assert.assertNotNull(duration58);
        org.junit.Assert.assertNotNull(duration61);
        org.junit.Assert.assertNotNull(duration62);
        org.junit.Assert.assertNotNull(periodType65);
        org.junit.Assert.assertNotNull(durationFieldType68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "PeriodType[YearDayTime]" + "'", str69, "PeriodType[YearDayTime]");
        org.junit.Assert.assertNotNull(period72);
        org.junit.Assert.assertNotNull(instant75);
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertNotNull(periodType79);
        org.junit.Assert.assertNotNull(period81);
        org.junit.Assert.assertNotNull(period82);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[0, 1, 0, -49, 0, 0]");
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + (-292275054) + "'", int86 == (-292275054));
    }

    @Test
    public void test07738() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07738");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.Instant instant2 = instant0.withMillis(0L);
        org.joda.time.Chronology chronology3 = instant2.getChronology();
        org.joda.time.DurationField durationField4 = chronology3.eras();
        org.joda.time.LocalTime localTime5 = org.joda.time.LocalTime.now(chronology3);
        org.joda.time.DurationField durationField6 = chronology3.eras();
        org.joda.time.DateTimeField dateTimeField7 = chronology3.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField8 = chronology3.clockhourOfHalfday();
        int int9 = dateTimeField8.getMinimumValue();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.LocalTime localTime12 = new org.joda.time.LocalTime((long) (short) 100, chronology11);
        int int13 = localTime12.getMillisOfDay();
        org.joda.time.LocalTime.Property property14 = localTime12.millisOfSecond();
        org.joda.time.DurationField durationField15 = property14.getLeapDurationField();
        java.lang.String str16 = property14.getName();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.UTC;
        java.util.Locale locale20 = java.util.Locale.GERMAN;
        java.lang.String str21 = locale20.getDisplayName();
        java.lang.String str22 = dateTimeZone18.getName(100L, locale20);
        org.joda.time.LocalTime localTime23 = property14.setCopy("615", locale20);
        int int24 = property14.getMinimumValueOverall();
        org.joda.time.LocalTime localTime25 = property14.roundFloorCopy();
        org.joda.time.LocalTime localTime26 = property14.withMaximumValue();
        org.joda.time.LocalTime localTime28 = property14.addNoWrapToCopy(62277);
        org.joda.time.DurationField durationField29 = property14.getRangeDurationField();
        org.joda.time.LocalTime localTime30 = property14.roundHalfEvenCopy();
        org.joda.time.LocalDateTime localDateTime32 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime34 = localDateTime32.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime36 = localDateTime34.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime38 = localDateTime36.withCenturyOfEra((int) 'a');
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime(chronology39);
        org.joda.time.DateTime dateTime42 = dateTime40.plusMinutes(15);
        org.joda.time.DateTime dateTime43 = localDateTime36.toDateTime((org.joda.time.ReadableInstant) dateTime40);
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime45 = localDateTime36.toDateTime(dateTimeZone44);
        org.joda.time.DateTime.Property property46 = dateTime45.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField47 = property46.getField();
        long long49 = dateTimeField47.roundHalfEven((long) 21);
        long long52 = dateTimeField47.addWrapField((long) (-198), 113);
        org.joda.time.DurationField durationField53 = dateTimeField47.getLeapDurationField();
        org.joda.time.Instant instant54 = new org.joda.time.Instant();
        org.joda.time.Instant instant56 = instant54.withMillis(0L);
        org.joda.time.Chronology chronology57 = instant56.getChronology();
        org.joda.time.DurationField durationField58 = chronology57.eras();
        long long62 = chronology57.add(0L, (long) 2022, (int) '4');
        org.joda.time.DateTimeField dateTimeField63 = chronology57.secondOfMinute();
        org.joda.time.format.DateTimePrinter dateTimePrinter64 = null;
        org.joda.time.format.DateTimeParser dateTimeParser65 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter66 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter64, dateTimeParser65);
        org.joda.time.Instant instant67 = new org.joda.time.Instant();
        org.joda.time.Instant instant69 = instant67.withMillis(0L);
        org.joda.time.Chronology chronology70 = instant69.getChronology();
        org.joda.time.DurationField durationField71 = chronology70.eras();
        long long75 = chronology70.add(0L, (long) 2022, (int) '4');
        org.joda.time.format.DateTimeFormatter dateTimeFormatter76 = dateTimeFormatter66.withChronology(chronology70);
        org.joda.time.LocalDateTime localDateTime77 = new org.joda.time.LocalDateTime(chronology70);
        org.joda.time.LocalDateTime localDateTime79 = localDateTime77.minusYears(26148950);
        java.util.Locale locale80 = java.util.Locale.KOREAN;
        java.lang.String str81 = dateTimeField63.getAsShortText((org.joda.time.ReadablePartial) localDateTime79, locale80);
        org.joda.time.LocalDateTime localDateTime83 = localDateTime79.withCenturyOfEra(56);
        org.joda.time.LocalDateTime localDateTime85 = new org.joda.time.LocalDateTime((long) (byte) -1);
        int[] intArray86 = localDateTime85.getValues();
        int int87 = dateTimeField47.getMinimumValue((org.joda.time.ReadablePartial) localDateTime83, intArray86);
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray89 = dateTimeField8.set((org.joda.time.ReadablePartial) localTime30, 2222, intArray86, 26574);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26574 for clockhourOfHalfday must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(instant2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 100 + "'", int13 == 100);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNull(durationField15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "millisOfSecond" + "'", str16, "millisOfSecond");
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "de");
// flaky:         org.junit.Assert.assertEquals("'" + str21 + "' != '" + "alem\343o" + "'", str21, "alem\343o");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "+00:00" + "'", str22, "+00:00");
        org.junit.Assert.assertNotNull(localTime23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(localTime25);
        org.junit.Assert.assertNotNull(localTime26);
        org.junit.Assert.assertNotNull(localTime28);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertNotNull(localTime30);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 0L + "'", long49 == 0L);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + (-420198L) + "'", long52 == (-420198L));
        org.junit.Assert.assertNull(durationField53);
        org.junit.Assert.assertNotNull(instant56);
        org.junit.Assert.assertNotNull(chronology57);
        org.junit.Assert.assertNotNull(durationField58);
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 105144L + "'", long62 == 105144L);
        org.junit.Assert.assertNotNull(dateTimeField63);
        org.junit.Assert.assertNotNull(instant69);
        org.junit.Assert.assertNotNull(chronology70);
        org.junit.Assert.assertNotNull(durationField71);
        org.junit.Assert.assertTrue("'" + long75 + "' != '" + 105144L + "'", long75 == 105144L);
        org.junit.Assert.assertNotNull(dateTimeFormatter76);
        org.junit.Assert.assertNotNull(localDateTime79);
        org.junit.Assert.assertNotNull(locale80);
        org.junit.Assert.assertEquals(locale80.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str81 + "' != '" + "53" + "'", str81, "53");
        org.junit.Assert.assertNotNull(localDateTime83);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[1969, 12, 31, 86399999]");
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 0 + "'", int87 == 0);
    }

    @Test
    public void test07739() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07739");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 1, chronology1);
        int int3 = dateTime2.getMinuteOfDay();
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.Period period7 = new org.joda.time.Period(readableDuration5, readableInstant6);
        org.joda.time.PeriodType periodType10 = null;
        org.joda.time.Period period11 = new org.joda.time.Period((long) 100, 1L, periodType10);
        org.joda.time.Period period13 = period11.minusSeconds((-1));
        java.lang.String str14 = period11.toString();
        org.joda.time.Period period15 = period11.toPeriod();
        org.joda.time.PeriodType periodType16 = period11.getPeriodType();
        org.joda.time.Period period17 = period7.normalizedStandard(periodType16);
        org.joda.time.Instant instant18 = new org.joda.time.Instant();
        org.joda.time.Instant instant20 = instant18.withMillis(0L);
        org.joda.time.Chronology chronology21 = instant20.getChronology();
        org.joda.time.DurationField durationField22 = chronology21.eras();
        long long26 = chronology21.add(0L, (long) 2022, (int) '4');
        org.joda.time.DateTimeField dateTimeField27 = chronology21.secondOfMinute();
        org.joda.time.MutablePeriod mutablePeriod28 = new org.joda.time.MutablePeriod(44L, periodType16, chronology21);
        org.joda.time.DateTimeField dateTimeField29 = chronology21.clockhourOfHalfday();
        org.joda.time.DateTime dateTime30 = dateTime2.toDateTime(chronology21);
        org.joda.time.LocalDate localDate33 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property34 = localDate33.monthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType35 = org.joda.time.DateTimeFieldType.minuteOfDay();
        boolean boolean36 = localDate33.isSupported(dateTimeFieldType35);
        org.joda.time.Chronology chronology37 = localDate33.getChronology();
        org.joda.time.MutablePeriod mutablePeriod38 = new org.joda.time.MutablePeriod((long) (byte) -1, 0L, chronology37);
        org.joda.time.MutableDateTime mutableDateTime39 = dateTime30.toMutableDateTime(chronology37);
        org.joda.time.MutableDateTime mutableDateTime40 = org.joda.time.MutableDateTime.now(chronology37);
        org.joda.time.MutableDateTime.Property property41 = mutableDateTime40.dayOfMonth();
        org.joda.time.Interval interval42 = property41.toInterval();
        org.joda.time.MutableDateTime mutableDateTime43 = property41.roundHalfCeiling();
        org.joda.time.DurationField durationField44 = property41.getLeapDurationField();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "PT0.099S" + "'", str14, "PT0.099S");
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(periodType16);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(instant20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 105144L + "'", long26 == 105144L);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(dateTimeFieldType35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(mutableDateTime39);
        org.junit.Assert.assertNotNull(mutableDateTime40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(interval42);
        org.junit.Assert.assertNotNull(mutableDateTime43);
        org.junit.Assert.assertNull(durationField44);
    }

    @Test
    public void test07740() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07740");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime3 = mutableDateTime0.copy();
        org.joda.time.MutableDateTime.Property property4 = mutableDateTime0.weekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime5 = property4.roundHalfFloor();
        org.joda.time.MutableDateTime mutableDateTime7 = property4.add((long) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.UTC;
        java.util.TimeZone timeZone9 = dateTimeZone8.toTimeZone();
        org.joda.time.MutableDateTime mutableDateTime10 = mutableDateTime7.toMutableDateTime(dateTimeZone8);
        mutableDateTime10.add(51L);
        org.joda.time.MutableDateTime.Property property13 = mutableDateTime10.dayOfWeek();
        org.joda.time.MutableDateTime mutableDateTime15 = property13.add(4);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime15.setWeekOfWeekyear(0);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 0 for weekOfWeekyear must be in the range [1,52]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(mutableDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(mutableDateTime5);
        org.junit.Assert.assertNotNull(mutableDateTime7);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(timeZone9);
// flaky:         org.junit.Assert.assertEquals(timeZone9.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(mutableDateTime10);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(mutableDateTime15);
    }

    @Test
    public void test07741() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07741");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) 1);
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period4 = duration3.toPeriod();
        org.joda.time.Duration duration7 = duration3.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Period period8 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime1, (org.joda.time.ReadableDuration) duration7);
        org.joda.time.Instant instant9 = dateTime1.toInstant();
        org.joda.time.DateTime dateTime12 = dateTime1.withDurationAdded((long) 3, 4);
        org.joda.time.MutableDateTime mutableDateTime13 = org.joda.time.MutableDateTime.now();
        mutableDateTime13.add((long) 'a');
        org.joda.time.MutableDateTime.Property property16 = mutableDateTime13.yearOfCentury();
        mutableDateTime13.addSeconds(0);
        org.joda.time.ReadableDuration readableDuration21 = null;
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.Period period23 = new org.joda.time.Period(readableDuration21, readableInstant22);
        org.joda.time.PeriodType periodType26 = null;
        org.joda.time.Period period27 = new org.joda.time.Period((long) 100, 1L, periodType26);
        org.joda.time.Period period29 = period27.minusSeconds((-1));
        java.lang.String str30 = period27.toString();
        org.joda.time.Period period31 = period27.toPeriod();
        org.joda.time.PeriodType periodType32 = period27.getPeriodType();
        org.joda.time.Period period33 = period23.normalizedStandard(periodType32);
        org.joda.time.DurationFieldType durationFieldType34 = null;
        int int35 = periodType32.indexOf(durationFieldType34);
        org.joda.time.Instant instant36 = new org.joda.time.Instant();
        org.joda.time.Instant instant38 = instant36.withMillis(0L);
        org.joda.time.Chronology chronology39 = instant38.getChronology();
        org.joda.time.DurationField durationField40 = chronology39.eras();
        org.joda.time.LocalTime localTime41 = org.joda.time.LocalTime.now(chronology39);
        org.joda.time.DurationField durationField42 = chronology39.eras();
        org.joda.time.DateTimeField dateTimeField43 = chronology39.hourOfDay();
        org.joda.time.MutablePeriod mutablePeriod44 = new org.joda.time.MutablePeriod((long) 12, (long) 292278993, periodType32, chronology39);
        org.joda.time.MutableDateTime mutableDateTime45 = mutableDateTime13.toMutableDateTime(chronology39);
        mutableDateTime13.setDayOfYear(44);
        int int48 = mutableDateTime13.getHourOfDay();
        org.joda.time.MutablePeriod mutablePeriod49 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime12, (org.joda.time.ReadableInstant) mutableDateTime13);
        mutableDateTime13.addMillis(365);
        org.joda.time.Instant instant52 = new org.joda.time.Instant();
        org.joda.time.Instant instant54 = instant52.withMillis(0L);
        org.joda.time.DateTime dateTime55 = instant54.toDateTime();
        org.joda.time.DateTime dateTime57 = new org.joda.time.DateTime((long) 1);
        org.joda.time.PeriodType periodType58 = org.joda.time.PeriodType.months();
        org.joda.time.Period period59 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime55, (org.joda.time.ReadableInstant) dateTime57, periodType58);
        org.joda.time.PeriodType periodType62 = null;
        org.joda.time.Period period63 = new org.joda.time.Period((long) 100, 1L, periodType62);
        org.joda.time.Period period65 = period63.minusSeconds((-1));
        java.lang.String str66 = period63.toString();
        org.joda.time.Period period67 = period63.toPeriod();
        org.joda.time.PeriodType periodType68 = period63.getPeriodType();
        org.joda.time.DateTime dateTime69 = dateTime57.plus((org.joda.time.ReadablePeriod) period63);
        org.joda.time.Chronology chronology71 = null;
        org.joda.time.LocalTime localTime72 = new org.joda.time.LocalTime((long) (short) 100, chronology71);
        org.joda.time.DurationFieldType durationFieldType73 = org.joda.time.DurationFieldType.millis();
        java.lang.String str74 = durationFieldType73.getName();
        boolean boolean75 = localTime72.isSupported(durationFieldType73);
        int int76 = period63.get(durationFieldType73);
        mutableDateTime13.add(durationFieldType73, 442);
        org.joda.time.MutableDateTime.Property property79 = mutableDateTime13.dayOfMonth();
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime13.setWeekOfWeekyear(37263107);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 37263107 for weekOfWeekyear must be in the range [1,52]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(instant9);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(mutableDateTime13);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "PT0.099S" + "'", str30, "PT0.099S");
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertNotNull(periodType32);
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertNotNull(instant38);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(durationField40);
        org.junit.Assert.assertNotNull(localTime41);
        org.junit.Assert.assertNotNull(durationField42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(mutableDateTime45);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 7 + "'", int48 == 7);
        org.junit.Assert.assertNotNull(instant54);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(periodType58);
        org.junit.Assert.assertNotNull(period65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "PT0.099S" + "'", str66, "PT0.099S");
        org.junit.Assert.assertNotNull(period67);
        org.junit.Assert.assertNotNull(periodType68);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(durationFieldType73);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "millis" + "'", str74, "millis");
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + (-99) + "'", int76 == (-99));
        org.junit.Assert.assertNotNull(property79);
    }

    @Test
    public void test07742() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07742");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.Instant instant2 = instant0.withMillis(0L);
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime((long) 1);
        org.joda.time.Duration duration6 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period7 = duration6.toPeriod();
        org.joda.time.Duration duration10 = duration6.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Period period11 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime4, (org.joda.time.ReadableDuration) duration10);
        org.joda.time.Instant instant12 = dateTime4.toInstant();
        org.joda.time.DateTime dateTime15 = dateTime4.withDurationAdded((long) 3, 4);
        org.joda.time.Instant instant16 = dateTime15.toInstant();
        boolean boolean17 = instant0.isBefore((org.joda.time.ReadableInstant) dateTime15);
        org.joda.time.MutableDateTime mutableDateTime18 = org.joda.time.MutableDateTime.now();
        java.lang.Object obj19 = mutableDateTime18.clone();
        mutableDateTime18.setTime((long) 46);
        org.joda.time.MutableDateTime.Property property22 = mutableDateTime18.dayOfWeek();
        mutableDateTime18.setMillisOfDay(2);
        int int25 = instant0.compareTo((org.joda.time.ReadableInstant) mutableDateTime18);
        org.joda.time.Duration duration27 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period28 = duration27.toPeriod();
        org.joda.time.Duration duration30 = duration27.minus((long) 292278993);
        org.joda.time.Period period31 = new org.joda.time.Period((java.lang.Object) duration30);
        org.joda.time.Duration duration32 = duration30.toDuration();
        long long33 = duration30.getStandardMinutes();
        org.joda.time.Duration duration35 = org.joda.time.Duration.millis(725810096000L);
        boolean boolean36 = duration30.isShorterThan((org.joda.time.ReadableDuration) duration35);
        org.joda.time.Instant instant38 = instant0.withDurationAdded((org.joda.time.ReadableDuration) duration30, 37061667);
        org.junit.Assert.assertNotNull(instant2);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(instant12);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(instant16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(mutableDateTime18);
        org.junit.Assert.assertNotNull(obj19);
// flaky:         org.junit.Assert.assertEquals(obj19.toString(), "2022-02-22T07:23:53.484Z");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj19), "2022-02-22T07:23:53.484Z");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj19), "2022-02-22T07:23:53.484Z");
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + (-3431L) + "'", long33 == (-3431L));
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(instant38);
    }

    @Test
    public void test07743() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07743");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        int int2 = dateTime1.getYearOfCentury();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = null;
        java.lang.String str4 = dateTime1.toString(dateTimeFormatter3);
        org.joda.time.DateTime.Property property5 = dateTime1.yearOfCentury();
        org.joda.time.DateTime.Property property6 = dateTime1.weekOfWeekyear();
        org.joda.time.DateTime dateTime8 = dateTime1.minusMillis(62222);
        org.joda.time.ReadableInstant readableInstant9 = null;
        boolean boolean10 = dateTime8.isBefore(readableInstant9);
        org.joda.time.Instant instant11 = new org.joda.time.Instant();
        org.joda.time.Instant instant13 = instant11.withMillis(0L);
        org.joda.time.Duration duration15 = org.joda.time.Duration.standardDays((long) (byte) 1);
        java.lang.String str16 = duration15.toString();
        org.joda.time.Instant instant17 = instant11.minus((org.joda.time.ReadableDuration) duration15);
        org.joda.time.MutableDateTime mutableDateTime18 = instant11.toMutableDateTimeISO();
        org.joda.time.ReadableInstant readableInstant19 = null;
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.PeriodType periodType21 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod22 = new org.joda.time.MutablePeriod(readableInstant19, readableInstant20, periodType21);
        mutablePeriod22.setYears((int) '#');
        org.joda.time.Chronology chronology26 = null;
        mutablePeriod22.add((long) 1, chronology26);
        org.joda.time.ReadableInterval readableInterval28 = null;
        mutablePeriod22.setPeriod(readableInterval28);
        int int30 = mutablePeriod22.getDays();
        mutableDateTime18.add((org.joda.time.ReadablePeriod) mutablePeriod22, 5);
        org.joda.time.DurationFieldType durationFieldType33 = org.joda.time.DurationFieldType.minutes();
        boolean boolean34 = mutablePeriod22.isSupported(durationFieldType33);
        java.lang.String str35 = durationFieldType33.getName();
        org.joda.time.DateTime dateTime37 = dateTime8.withFieldAdded(durationFieldType33, 33487);
        org.joda.time.DateTime dateTime39 = dateTime8.minusHours(26388166);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 22 + "'", int2 == 22);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "2022-02-22T07:23:53.567Z" + "'", str4, "2022-02-22T07:23:53.567Z");
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(instant13);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "PT86400S" + "'", str16, "PT86400S");
        org.junit.Assert.assertNotNull(instant17);
        org.junit.Assert.assertNotNull(mutableDateTime18);
        org.junit.Assert.assertNotNull(periodType21);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(durationFieldType33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "minutes" + "'", str35, "minutes");
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime39);
    }

    @Test
    public void test07744() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07744");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        int int2 = dateTime1.getYearOfCentury();
        int int3 = dateTime1.getWeekyear();
        org.joda.time.DateTime dateTime4 = dateTime1.withEarlierOffsetAtOverlap();
        java.lang.String str5 = dateTime4.toString();
        org.joda.time.MutableDateTime mutableDateTime6 = dateTime4.toMutableDateTime();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.UTC;
        boolean boolean8 = dateTimeZone7.isFixed();
        mutableDateTime6.setZoneRetainFields(dateTimeZone7);
        mutableDateTime6.setMillisOfDay(335);
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime6.monthOfYear();
        java.util.Locale locale13 = java.util.Locale.GERMAN;
        java.util.Locale locale14 = java.util.Locale.CANADA;
        java.lang.String str15 = locale13.getDisplayVariant(locale14);
        java.lang.String str16 = locale13.getISO3Language();
        java.lang.String str17 = locale13.getCountry();
        java.util.Locale locale20 = new java.util.Locale("1970", "millis");
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime((long) (byte) -1, chronology22);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime23.plusMonths(46);
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = org.joda.time.DateTimeFieldType.minuteOfDay();
        int int27 = localDateTime25.get(dateTimeFieldType26);
        java.util.Locale locale28 = java.util.Locale.TRADITIONAL_CHINESE;
        boolean boolean29 = localDateTime25.equals((java.lang.Object) locale28);
        java.lang.String str30 = locale28.getScript();
        java.util.Locale locale31 = java.util.Locale.GERMAN;
        java.lang.String str32 = locale31.getDisplayName();
        java.lang.String str33 = locale31.getISO3Language();
        java.lang.String str34 = locale28.getDisplayName(locale31);
        java.lang.String str35 = locale20.getDisplayVariant(locale31);
        java.lang.String str36 = locale13.getDisplayLanguage(locale31);
        java.lang.String str37 = property12.getAsText(locale13);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 22 + "'", int2 == 22);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2022 + "'", int3 == 2022);
        org.junit.Assert.assertNotNull(dateTime4);
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "2022-02-22T07:23:53.585Z" + "'", str5, "2022-02-22T07:23:53.585Z");
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "de");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "deu" + "'", str16, "deu");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals(locale20.toString(), "1970_MILLIS");
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(dateTimeFieldType26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1439 + "'", int27 == 1439);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "zh_TW");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "de");
// flaky:         org.junit.Assert.assertEquals("'" + str32 + "' != '" + "alem\343o" + "'", str32, "alem\343o");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "deu" + "'", str33, "deu");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "Chinesisch (Taiwan)" + "'", str34, "Chinesisch (Taiwan)");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "Deutsch" + "'", str36, "Deutsch");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "Februar" + "'", str37, "Februar");
    }

    @Test
    public void test07745() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07745");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.monthOfYear();
        org.joda.time.DateTimeField dateTimeField2 = property1.getField();
        org.joda.time.LocalDate localDate3 = property1.roundCeilingCopy();
        org.joda.time.LocalDate localDate5 = localDate3.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDate localDate7 = localDate3.withWeekOfWeekyear(46);
        org.joda.time.LocalDate localDate9 = localDate7.plusWeeks((int) (byte) 10);
        org.joda.time.MutableDateTime mutableDateTime10 = org.joda.time.MutableDateTime.now();
        mutableDateTime10.add((long) 'a');
        org.joda.time.MutableDateTime.Property property13 = mutableDateTime10.yearOfCentury();
        org.joda.time.Duration duration15 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period16 = duration15.toPeriod();
        org.joda.time.Duration duration18 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration21 = duration18.withDurationAdded((long) (short) 100, (int) ' ');
        org.joda.time.Duration duration22 = duration15.minus((org.joda.time.ReadableDuration) duration21);
        mutableDateTime10.add((org.joda.time.ReadableDuration) duration15);
        org.joda.time.MutableDateTime.Property property24 = mutableDateTime10.centuryOfEra();
        mutableDateTime10.addHours((int) (byte) 10);
        int int27 = mutableDateTime10.getSecondOfDay();
        org.joda.time.LocalDate localDate28 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property29 = localDate28.monthOfYear();
        org.joda.time.LocalDate.Property property30 = localDate28.dayOfMonth();
        org.joda.time.ReadableInstant readableInstant31 = null;
        org.joda.time.ReadableInstant readableInstant32 = null;
        org.joda.time.PeriodType periodType33 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod34 = new org.joda.time.MutablePeriod(readableInstant31, readableInstant32, periodType33);
        org.joda.time.DurationFieldType durationFieldType36 = periodType33.getFieldType((int) (short) 0);
        boolean boolean37 = localDate28.isSupported(durationFieldType36);
        mutableDateTime10.add(durationFieldType36, (-292275054));
        org.joda.time.LocalDate localDate41 = localDate7.withFieldAdded(durationFieldType36, 53);
        org.joda.time.LocalDate.Property property42 = localDate7.yearOfCentury();
        int int43 = property42.getMaximumValueOverall();
        org.joda.time.MutableDateTime mutableDateTime44 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property45 = mutableDateTime44.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime47 = property45.set(45);
        org.joda.time.MutableDateTime mutableDateTime48 = property45.roundFloor();
        org.joda.time.MutableDateTime mutableDateTime50 = property45.add(45);
        org.joda.time.DateTimeZone dateTimeZone51 = org.joda.time.DateTimeZone.UTC;
        java.util.TimeZone timeZone52 = dateTimeZone51.toTimeZone();
        long long54 = dateTimeZone51.previousTransition(100L);
        int int56 = dateTimeZone51.getStandardOffset(86403200L);
        org.joda.time.DateTime dateTime57 = mutableDateTime50.toDateTime(dateTimeZone51);
        org.joda.time.ReadableDuration readableDuration58 = null;
        org.joda.time.DateTime dateTime60 = dateTime57.withDurationAdded(readableDuration58, (int) (byte) -1);
        int int61 = property42.getDifference((org.joda.time.ReadableInstant) dateTime60);
        org.joda.time.LocalDate localDate62 = dateTime60.toLocalDate();
        int int63 = localDate62.getCenturyOfEra();
        org.joda.time.DateTimeZone dateTimeZone64 = null;
        org.joda.time.DateTime dateTime65 = localDate62.toDateTimeAtCurrentTime(dateTimeZone64);
        org.joda.time.DateTime dateTime67 = dateTime65.minusSeconds(37293501);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(mutableDateTime10);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(property24);
// flaky:         org.junit.Assert.assertTrue("'" + int27 + "' != '" + 62633 + "'", int27 == 62633);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(periodType33);
        org.junit.Assert.assertNotNull(durationFieldType36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(localDate41);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 99 + "'", int43 == 99);
        org.junit.Assert.assertNotNull(mutableDateTime44);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(mutableDateTime47);
        org.junit.Assert.assertNotNull(mutableDateTime48);
        org.junit.Assert.assertNotNull(mutableDateTime50);
        org.junit.Assert.assertNotNull(dateTimeZone51);
        org.junit.Assert.assertNotNull(timeZone52);
// flaky:         org.junit.Assert.assertEquals(timeZone52.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 100L + "'", long54 == 100L);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-6977) + "'", int61 == (-6977));
        org.junit.Assert.assertNotNull(localDate62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 90 + "'", int63 == 90);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(dateTime67);
    }

    @Test
    public void test07746() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07746");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.add((long) 'a');
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime0.yearOfCentury();
        mutableDateTime0.addSeconds(0);
        mutableDateTime0.setWeekyear((int) 'u');
        org.joda.time.MutableDateTime.Property property8 = mutableDateTime0.dayOfMonth();
        org.joda.time.MutableDateTime mutableDateTime9 = property8.getMutableDateTime();
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime9.setSecondOfMinute(26609);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26609 for secondOfMinute must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(mutableDateTime9);
    }

    @Test
    public void test07747() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07747");
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.plusYears((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.minusSeconds((int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.plusMinutes((-1));
        org.joda.time.LocalDateTime.Property property13 = localDateTime10.weekyear();
        org.joda.time.LocalDateTime localDateTime15 = property13.addToCopy(26197957);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.minusHours((int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetMillis(36988464);
        org.joda.time.DateTime dateTime20 = localDateTime17.toDateTime(dateTimeZone19);
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime(0L, dateTimeZone19);
        org.joda.time.MutableDateTime mutableDateTime22 = new org.joda.time.MutableDateTime(26411731L, dateTimeZone19);
        org.joda.time.MutableDateTime mutableDateTime23 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property24 = mutableDateTime23.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime26 = property24.set(45);
        org.joda.time.MutableDateTime mutableDateTime27 = property24.roundFloor();
        org.joda.time.MutableDateTime mutableDateTime29 = property24.add(45);
        java.lang.String str30 = mutableDateTime29.toString();
        org.joda.time.MutableDateTime mutableDateTime31 = org.joda.time.MutableDateTime.now();
        mutableDateTime31.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime34 = mutableDateTime31.copy();
        org.joda.time.ReadableDuration readableDuration35 = null;
        org.joda.time.ReadableInstant readableInstant36 = null;
        org.joda.time.Period period37 = new org.joda.time.Period(readableDuration35, readableInstant36);
        org.joda.time.Period period39 = period37.withDays((int) (byte) 1);
        org.joda.time.Period period41 = period37.minusMillis(1424);
        mutableDateTime31.add((org.joda.time.ReadablePeriod) period37);
        mutableDateTime29.add((org.joda.time.ReadablePeriod) period37);
        org.joda.time.MutableDateTime.Property property44 = mutableDateTime29.year();
        org.joda.time.MutableDateTime mutableDateTime45 = property44.roundCeiling();
        org.joda.time.PeriodType periodType48 = null;
        org.joda.time.Period period49 = new org.joda.time.Period((long) 100, 1L, periodType48);
        org.joda.time.Period period51 = period49.minusSeconds((-1));
        java.lang.String str52 = period49.toString();
        org.joda.time.Period period53 = period49.toPeriod();
        org.joda.time.Period period55 = period53.withMillis(0);
        org.joda.time.Period period57 = period53.plusSeconds((int) '4');
        mutableDateTime45.add((org.joda.time.ReadablePeriod) period53);
        mutableDateTime45.addYears(26281);
        org.joda.time.Duration duration61 = new org.joda.time.Duration((org.joda.time.ReadableInstant) mutableDateTime22, (org.joda.time.ReadableInstant) mutableDateTime45);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime22.setTime(3495968, (-7938), 122, 26310348);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 3495968 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(mutableDateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(mutableDateTime26);
        org.junit.Assert.assertNotNull(mutableDateTime27);
        org.junit.Assert.assertNotNull(mutableDateTime29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "9000-01-01T00:00:00.000Z" + "'", str30, "9000-01-01T00:00:00.000Z");
        org.junit.Assert.assertNotNull(mutableDateTime31);
        org.junit.Assert.assertNotNull(mutableDateTime34);
        org.junit.Assert.assertNotNull(period39);
        org.junit.Assert.assertNotNull(period41);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(mutableDateTime45);
        org.junit.Assert.assertNotNull(period51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "PT0.099S" + "'", str52, "PT0.099S");
        org.junit.Assert.assertNotNull(period53);
        org.junit.Assert.assertNotNull(period55);
        org.junit.Assert.assertNotNull(period57);
    }

    @Test
    public void test07748() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07748");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardHours((long) (-292275054));
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardMinutes(0L);
        org.joda.time.Duration duration4 = duration1.plus((org.joda.time.ReadableDuration) duration3);
        org.joda.time.MutableDateTime mutableDateTime5 = org.joda.time.MutableDateTime.now();
        mutableDateTime5.add((long) 'a');
        org.joda.time.MutableDateTime.Property property8 = mutableDateTime5.yearOfCentury();
        org.joda.time.Duration duration10 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period11 = duration10.toPeriod();
        org.joda.time.Duration duration13 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration16 = duration13.withDurationAdded((long) (short) 100, (int) ' ');
        org.joda.time.Duration duration17 = duration10.minus((org.joda.time.ReadableDuration) duration16);
        mutableDateTime5.add((org.joda.time.ReadableDuration) duration10);
        org.joda.time.MutableDateTime.Property property19 = mutableDateTime5.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime20 = property19.roundFloor();
        org.joda.time.MutablePeriod mutablePeriod21 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration3, (org.joda.time.ReadableInstant) mutableDateTime20);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime20.setMonthOfYear(26306);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26306 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertNotNull(mutableDateTime5);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(mutableDateTime20);
    }

    @Test
    public void test07749() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07749");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(chronology1);
        int int3 = dateTime2.getYearOfCentury();
        int int4 = dateTime2.getWeekyear();
        org.joda.time.DateTime dateTime5 = dateTime2.withEarlierOffsetAtOverlap();
        java.lang.String str6 = dateTime5.toString();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(chronology7);
        int int9 = dateTime8.getYearOfCentury();
        int int10 = dateTime8.getWeekyear();
        org.joda.time.DateTime dateTime11 = dateTime8.withEarlierOffsetAtOverlap();
        java.lang.String str12 = dateTime11.toString();
        org.joda.time.MutableDateTime mutableDateTime13 = dateTime11.toMutableDateTime();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.UTC;
        boolean boolean15 = dateTimeZone14.isFixed();
        mutableDateTime13.setZoneRetainFields(dateTimeZone14);
        org.joda.time.DateTime dateTime17 = dateTime5.toDateTime(dateTimeZone14);
        long long19 = dateTimeZone14.nextTransition((long) 21);
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime(3155760000000L, dateTimeZone14);
        org.joda.time.TimeOfDay timeOfDay21 = dateTime20.toTimeOfDay();
        org.joda.time.DateTime.Property property22 = dateTime20.weekyear();
        java.util.Locale locale27 = new java.util.Locale("2022-02-22T10:15:47.721", "53", "2022-02-22T07:15:46.416Z");
        org.joda.time.Chronology chronology29 = null;
        java.util.Locale locale30 = java.util.Locale.GERMAN;
        java.util.Locale locale31 = java.util.Locale.CANADA;
        java.lang.String str32 = locale30.getDisplayVariant(locale31);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket33 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology29, locale31);
        java.lang.Object obj34 = dateTimeParserBucket33.saveState();
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.LocalTime localTime37 = new org.joda.time.LocalTime((long) (short) 100, chronology36);
        org.joda.time.DurationFieldType durationFieldType38 = org.joda.time.DurationFieldType.weeks();
        java.lang.String str39 = durationFieldType38.getName();
        boolean boolean40 = localTime37.isSupported(durationFieldType38);
        boolean boolean41 = dateTimeParserBucket33.restoreState((java.lang.Object) boolean40);
        org.joda.time.Chronology chronology42 = dateTimeParserBucket33.getChronology();
        long long45 = dateTimeParserBucket33.computeMillis(true, "");
        int int46 = dateTimeParserBucket33.getOffset();
        java.lang.Object obj47 = dateTimeParserBucket33.saveState();
        java.lang.Integer int48 = dateTimeParserBucket33.getPivotYear();
        long long50 = dateTimeParserBucket33.computeMillis(false);
        java.lang.Integer int51 = dateTimeParserBucket33.getPivotYear();
        org.joda.time.Chronology chronology52 = dateTimeParserBucket33.getChronology();
        long long54 = dateTimeParserBucket33.computeMillis(true);
        java.util.Locale locale55 = dateTimeParserBucket33.getLocale();
        java.lang.String str56 = locale27.getDisplayCountry(locale55);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime57 = property22.setCopy("TWN", locale55);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"TWN\" for weekyear is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 22 + "'", int3 == 22);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2022 + "'", int4 == 2022);
        org.junit.Assert.assertNotNull(dateTime5);
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "2022-02-22T07:23:53.687Z" + "'", str6, "2022-02-22T07:23:53.687Z");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 22 + "'", int9 == 22);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2022 + "'", int10 == 2022);
        org.junit.Assert.assertNotNull(dateTime11);
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "2022-02-22T07:23:53.687Z" + "'", str12, "2022-02-22T07:23:53.687Z");
        org.junit.Assert.assertNotNull(mutableDateTime13);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 21L + "'", long19 == 21L);
        org.junit.Assert.assertNotNull(timeOfDay21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertEquals(locale27.toString(), "2022-02-22t10:15:47.721_53_2022-02-22T07:15:46.416Z");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "de");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(obj34);
        org.junit.Assert.assertNotNull(durationFieldType38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "weeks" + "'", str39, "weeks");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 97L + "'", long45 == 97L);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(obj47);
        org.junit.Assert.assertNull(int48);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 97L + "'", long50 == 97L);
        org.junit.Assert.assertNull(int51);
        org.junit.Assert.assertNotNull(chronology52);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 97L + "'", long54 == 97L);
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "53" + "'", str56, "53");
    }

    @Test
    public void test07750() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07750");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        int int2 = dateTime1.getYearOfCentury();
        int int3 = dateTime1.getWeekyear();
        org.joda.time.DateTime dateTime4 = dateTime1.withEarlierOffsetAtOverlap();
        java.lang.String str5 = dateTime4.toString();
        org.joda.time.MutableDateTime mutableDateTime6 = dateTime4.toMutableDateTime();
        org.joda.time.Instant instant7 = mutableDateTime6.toInstant();
        mutableDateTime6.setMillis(26149000L);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 22 + "'", int2 == 22);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2022 + "'", int3 == 2022);
        org.junit.Assert.assertNotNull(dateTime4);
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "2022-02-22T07:23:53.715Z" + "'", str5, "2022-02-22T07:23:53.715Z");
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(instant7);
    }

    @Test
    public void test07751() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07751");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime3 = mutableDateTime0.copy();
        org.joda.time.MutableDateTime.Property property4 = mutableDateTime0.weekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime5 = property4.roundHalfFloor();
        org.joda.time.MutableDateTime mutableDateTime7 = property4.add((long) (byte) 10);
        int int8 = mutableDateTime7.getCenturyOfEra();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime((long) (byte) -1, chronology10);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.plusMonths(46);
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.minuteOfDay();
        int int15 = localDateTime13.get(dateTimeFieldType14);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime13.plusMinutes(7);
        org.joda.time.PeriodType periodType20 = null;
        org.joda.time.Period period21 = new org.joda.time.Period((long) 100, 1L, periodType20);
        org.joda.time.Period period23 = period21.minusSeconds((-1));
        org.joda.time.Period period25 = period23.multipliedBy((int) '#');
        org.joda.time.LocalDateTime localDateTime26 = localDateTime13.minus((org.joda.time.ReadablePeriod) period25);
        org.joda.time.Period period28 = period25.withWeeks(7);
        org.joda.time.MutablePeriod mutablePeriod37 = new org.joda.time.MutablePeriod(999, 12, 8, (int) (byte) 10, 5, (-292275054), 15, 50);
        org.joda.time.Period period38 = period28.withFields((org.joda.time.ReadablePeriod) mutablePeriod37);
        mutableDateTime7.add((org.joda.time.ReadablePeriod) mutablePeriod37);
        org.joda.time.PeriodType periodType40 = mutablePeriod37.getPeriodType();
        org.joda.time.PeriodType periodType41 = periodType40.withWeeksRemoved();
        java.lang.String str42 = periodType41.getName();
        org.joda.time.PeriodType periodType43 = periodType41.withDaysRemoved();
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(mutableDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(mutableDateTime5);
        org.junit.Assert.assertNotNull(mutableDateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 20 + "'", int8 == 20);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1439 + "'", int15 == 1439);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(period38);
        org.junit.Assert.assertNotNull(periodType40);
        org.junit.Assert.assertNotNull(periodType41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "StandardNoWeeks" + "'", str42, "StandardNoWeeks");
        org.junit.Assert.assertNotNull(periodType43);
    }

    @Test
    public void test07752() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07752");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Hours hours2 = duration1.toStandardHours();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime(chronology3);
        int int5 = dateTime4.getSecondOfMinute();
        org.joda.time.MutablePeriod mutablePeriod6 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration1, (org.joda.time.ReadableInstant) dateTime4);
        org.joda.time.DateTime dateTime8 = dateTime4.plus(0L);
        org.joda.time.Instant instant9 = dateTime8.toInstant();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetHours(100);
        org.joda.time.MutableDateTime mutableDateTime12 = dateTime8.toMutableDateTime(dateTimeZone11);
        org.joda.time.Duration duration14 = new org.joda.time.Duration(0L);
        org.joda.time.Duration duration16 = duration14.minus((long) 40);
        org.joda.time.Period period17 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime12, (org.joda.time.ReadableDuration) duration16);
        org.joda.time.MutableDateTime.Property property18 = mutableDateTime12.minuteOfDay();
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property20 = localDate19.dayOfYear();
        org.joda.time.PeriodType periodType23 = null;
        org.joda.time.Period period24 = new org.joda.time.Period((long) 100, 1L, periodType23);
        org.joda.time.Period period26 = period24.minusSeconds((-1));
        java.lang.String str27 = period24.toString();
        org.joda.time.LocalDate localDate29 = localDate19.withPeriodAdded((org.joda.time.ReadablePeriod) period24, 3);
        int int30 = localDate19.getYear();
        org.joda.time.LocalDate.Property property31 = localDate19.dayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone.setDefault(dateTimeZone32);
        org.joda.time.DateTime dateTime34 = localDate19.toDateTimeAtCurrentTime(dateTimeZone32);
        org.joda.time.MutableDateTime mutableDateTime35 = org.joda.time.MutableDateTime.now(dateTimeZone32);
        mutableDateTime12.setMillis((org.joda.time.ReadableInstant) mutableDateTime35);
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(hours2);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 53 + "'", int5 == 53);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(instant9);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(mutableDateTime12);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "PT0.099S" + "'", str27, "PT0.099S");
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2022 + "'", int30 == 2022);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(mutableDateTime35);
    }

    @Test
    public void test07753() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07753");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 1, chronology1);
        java.util.GregorianCalendar gregorianCalendar3 = dateTime2.toGregorianCalendar();
        org.joda.time.LocalDate localDate4 = org.joda.time.LocalDate.fromCalendarFields((java.util.Calendar) gregorianCalendar3);
        org.joda.time.Chronology chronology5 = localDate4.getChronology();
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property7 = localDate6.monthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.minuteOfDay();
        boolean boolean9 = localDate6.isSupported(dateTimeFieldType8);
        int int10 = localDate6.getDayOfYear();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateMidnight dateMidnight12 = localDate6.toDateMidnight(dateTimeZone11);
        org.joda.time.MutableDateTime mutableDateTime13 = org.joda.time.MutableDateTime.now();
        mutableDateTime13.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime16 = mutableDateTime13.copy();
        mutableDateTime13.setDate((long) '#');
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property20 = localDate19.monthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.minuteOfDay();
        boolean boolean22 = localDate19.isSupported(dateTimeFieldType21);
        int int23 = localDate19.getDayOfYear();
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateMidnight dateMidnight25 = localDate19.toDateMidnight(dateTimeZone24);
        org.joda.time.DateTime dateTime26 = mutableDateTime13.toDateTime(dateTimeZone24);
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime(dateTimeZone24);
        org.joda.time.Interval interval28 = localDate6.toInterval(dateTimeZone24);
        java.util.TimeZone timeZone29 = dateTimeZone24.toTimeZone();
        java.lang.String str31 = dateTimeZone24.getName(0L);
        org.joda.time.DateTime dateTime32 = localDate4.toDateTimeAtMidnight(dateTimeZone24);
        org.joda.time.DateTime dateTime34 = dateTime32.minusWeeks(26252175);
        org.junit.Assert.assertNotNull(gregorianCalendar3);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 53 + "'", int10 == 53);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(dateMidnight12);
        org.junit.Assert.assertNotNull(mutableDateTime13);
        org.junit.Assert.assertNotNull(mutableDateTime16);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 53 + "'", int23 == 53);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(dateMidnight25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(interval28);
        org.junit.Assert.assertNotNull(timeZone29);
// flaky:         org.junit.Assert.assertEquals(timeZone29.getDisplayName(), "\u534f\u8c03\u4e16\u754c\u65f6\u95f4");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "+00:00" + "'", str31, "+00:00");
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime34);
    }

    @Test
    public void test07754() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07754");
        java.lang.Object obj0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(obj0);
        boolean boolean3 = dateTime1.isBefore((long) 7);
        java.lang.String str4 = dateTime1.toString();
        org.joda.time.DateTime dateTime6 = dateTime1.minus((long) 7);
        org.joda.time.Instant instant7 = new org.joda.time.Instant();
        org.joda.time.Instant instant9 = instant7.withMillis(0L);
        org.joda.time.Chronology chronology10 = instant9.getChronology();
        org.joda.time.DateTime dateTime11 = dateTime1.toDateTime(chronology10);
        org.joda.time.DateTime dateTime13 = dateTime1.plusSeconds(26150803);
        org.joda.time.DateTime dateTime15 = dateTime1.minusSeconds((int) ' ');
        org.joda.time.LocalDate localDate16 = dateTime1.toLocalDate();
        org.joda.time.Duration duration18 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period19 = duration18.toPeriod();
        org.joda.time.Duration duration21 = duration18.minus((long) 292278993);
        org.joda.time.MutableDateTime mutableDateTime22 = org.joda.time.MutableDateTime.now();
        mutableDateTime22.add((long) 'a');
        org.joda.time.MutableDateTime.Property property25 = mutableDateTime22.yearOfCentury();
        org.joda.time.Duration duration27 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period28 = duration27.toPeriod();
        org.joda.time.Duration duration30 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration33 = duration30.withDurationAdded((long) (short) 100, (int) ' ');
        org.joda.time.Duration duration34 = duration27.minus((org.joda.time.ReadableDuration) duration33);
        mutableDateTime22.add((org.joda.time.ReadableDuration) duration27);
        boolean boolean36 = duration21.isShorterThan((org.joda.time.ReadableDuration) duration27);
        org.joda.time.Duration duration38 = duration27.minus((long) (byte) 0);
        org.joda.time.MutableDateTime mutableDateTime39 = org.joda.time.MutableDateTime.now();
        mutableDateTime39.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime42 = mutableDateTime39.copy();
        mutableDateTime39.setDate((long) '#');
        org.joda.time.LocalDate localDate45 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property46 = localDate45.monthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType47 = org.joda.time.DateTimeFieldType.minuteOfDay();
        boolean boolean48 = localDate45.isSupported(dateTimeFieldType47);
        int int49 = localDate45.getDayOfYear();
        org.joda.time.DateTimeZone dateTimeZone50 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateMidnight dateMidnight51 = localDate45.toDateMidnight(dateTimeZone50);
        org.joda.time.DateTime dateTime52 = mutableDateTime39.toDateTime(dateTimeZone50);
        org.joda.time.MutablePeriod mutablePeriod53 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration38, (org.joda.time.ReadableInstant) mutableDateTime39);
        org.joda.time.MutablePeriod mutablePeriod54 = mutablePeriod53.copy();
        mutablePeriod54.clear();
        mutablePeriod54.setPeriod(21L, (long) '#');
        org.joda.time.LocalDate localDate60 = localDate16.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod54, (-1));
        int int61 = mutablePeriod54.getHours();
        org.joda.time.MutablePeriod mutablePeriod62 = new org.joda.time.MutablePeriod((java.lang.Object) mutablePeriod54);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "2022-02-22T07:23:53.865Z" + "'", str4, "2022-02-22T07:23:53.865Z");
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(instant9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(mutableDateTime22);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertNotNull(mutableDateTime39);
        org.junit.Assert.assertNotNull(mutableDateTime42);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(dateTimeFieldType47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 53 + "'", int49 == 53);
        org.junit.Assert.assertNotNull(dateTimeZone50);
        org.junit.Assert.assertNotNull(dateMidnight51);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(mutablePeriod54);
        org.junit.Assert.assertNotNull(localDate60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
    }

    @Test
    public void test07755() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07755");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap3 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList4 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, strMap3);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap5 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList6 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList4, strMap5);
        java.util.Locale.LanguageRange[] languageRangeArray7 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList8 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList8, languageRangeArray7);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap10 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList11 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList8, strMap10);
        org.joda.time.Chronology chronology13 = null;
        java.util.Locale locale14 = java.util.Locale.GERMAN;
        java.util.Locale locale15 = java.util.Locale.CANADA;
        java.lang.String str16 = locale14.getDisplayVariant(locale15);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket17 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology13, locale15);
        java.util.Locale locale18 = java.util.Locale.GERMAN;
        java.util.Locale locale19 = java.util.Locale.CANADA;
        java.lang.String str20 = locale18.getDisplayVariant(locale19);
        java.util.Locale locale21 = java.util.Locale.GERMAN;
        java.util.Locale locale22 = java.util.Locale.CANADA;
        java.lang.String str23 = locale21.getDisplayVariant(locale22);
        java.lang.String str24 = locale21.getISO3Language();
        java.util.Locale locale25 = java.util.Locale.GERMAN;
        java.util.Locale locale26 = java.util.Locale.CANADA;
        java.lang.String str27 = locale25.getDisplayVariant(locale26);
        java.util.Locale locale28 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Locale locale29 = java.util.Locale.GERMAN;
        java.lang.String str30 = locale29.getDisplayName();
        java.util.Locale locale31 = java.util.Locale.CANADA;
        org.joda.time.Chronology chronology33 = null;
        java.util.Locale locale34 = java.util.Locale.GERMAN;
        java.util.Locale locale35 = java.util.Locale.CANADA;
        java.lang.String str36 = locale34.getDisplayVariant(locale35);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket38 = new org.joda.time.format.DateTimeParserBucket((long) (-1), chronology33, locale35, (java.lang.Integer) 10);
        java.util.Locale locale39 = java.util.Locale.GERMAN;
        java.lang.String str40 = locale39.getDisplayName();
        java.util.Locale locale41 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Locale locale42 = java.util.Locale.UK;
        java.util.Locale[] localeArray43 = new java.util.Locale[] { locale15, locale19, locale21, locale25, locale28, locale29, locale31, locale35, locale39, locale41, locale42 };
        java.util.ArrayList<java.util.Locale> localeList44 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList44, localeArray43);
        java.util.Locale.FilteringMode filteringMode46 = java.util.Locale.FilteringMode.AUTOSELECT_FILTERING;
        java.util.List<java.util.Locale> localeList47 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList8, (java.util.Collection<java.util.Locale>) localeList44, filteringMode46);
        java.util.List<java.util.Locale> localeList48 = java.util.Locale.filter(languageRangeList4, (java.util.Collection<java.util.Locale>) localeList44);
        org.joda.time.tz.Provider provider49 = org.joda.time.DateTimeZone.getProvider();
        org.joda.time.DateTimeZone.setProvider(provider49);
        org.joda.time.DateTimeZone dateTimeZone52 = provider49.getZone("hourOfDay");
        java.util.Set<java.lang.String> strSet53 = provider49.getAvailableIDs();
        java.util.List<java.lang.String> strList54 = java.util.Locale.filterTags(languageRangeList4, (java.util.Collection<java.lang.String>) strSet53);
        java.util.Spliterator<java.lang.String> strSpliterator55 = strSet53.spliterator();
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.DateTime dateTime58 = new org.joda.time.DateTime(chronology57);
        org.joda.time.DateTime dateTime60 = dateTime58.plusMinutes(15);
        org.joda.time.Chronology chronology61 = dateTime58.getChronology();
        org.joda.time.DurationField durationField62 = chronology61.hours();
        org.joda.time.MutablePeriod mutablePeriod63 = new org.joda.time.MutablePeriod(1440L, chronology61);
        org.joda.time.MutableDateTime mutableDateTime64 = new org.joda.time.MutableDateTime(chronology61);
        boolean boolean65 = strSet53.equals((java.lang.Object) mutableDateTime64);
        java.lang.Object[] objArray66 = strSet53.toArray();
        boolean boolean68 = strSet53.add("2022-02-22T07:19:10.057Z");
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(languageRangeList4);
        org.junit.Assert.assertNotNull(languageRangeList6);
        org.junit.Assert.assertNotNull(languageRangeArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(languageRangeList11);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "de");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "de");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "de");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "deu" + "'", str24, "deu");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "de");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "de");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "\u5fb7\u6587" + "'", str30, "\u5fb7\u6587");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "de");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "de");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "\u5fb7\u6587" + "'", str40, "\u5fb7\u6587");
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "en_GB");
        org.junit.Assert.assertNotNull(localeArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + filteringMode46 + "' != '" + java.util.Locale.FilteringMode.AUTOSELECT_FILTERING + "'", filteringMode46.equals(java.util.Locale.FilteringMode.AUTOSELECT_FILTERING));
        org.junit.Assert.assertNotNull(localeList47);
        org.junit.Assert.assertNotNull(localeList48);
        org.junit.Assert.assertNotNull(provider49);
        org.junit.Assert.assertNull(dateTimeZone52);
        org.junit.Assert.assertNotNull(strSet53);
        org.junit.Assert.assertNotNull(strList54);
        org.junit.Assert.assertNotNull(strSpliterator55);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(chronology61);
        org.junit.Assert.assertNotNull(durationField62);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(objArray66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
    }

    @Test
    public void test07756() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07756");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.Instant instant2 = instant0.withMillis(0L);
        org.joda.time.Duration duration4 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period5 = duration4.toPeriod();
        org.joda.time.Duration duration8 = duration4.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Instant instant9 = instant2.plus((org.joda.time.ReadableDuration) duration8);
        long long10 = instant9.getMillis();
        org.joda.time.Duration duration12 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period13 = duration12.toPeriod();
        org.joda.time.Duration duration15 = duration12.minus((long) 292278993);
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.PeriodType periodType25 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod26 = new org.joda.time.MutablePeriod(readableInstant23, readableInstant24, periodType25);
        org.joda.time.DurationFieldType durationFieldType28 = periodType25.getFieldType((int) (short) 0);
        java.lang.String str29 = periodType25.toString();
        org.joda.time.Instant instant30 = new org.joda.time.Instant();
        org.joda.time.Instant instant32 = instant30.withMillis(0L);
        org.joda.time.Chronology chronology33 = instant32.getChronology();
        org.joda.time.Period period34 = new org.joda.time.Period((long) 53, (long) (-1), periodType25, chronology33);
        org.joda.time.Period period35 = new org.joda.time.Period((long) (short) -1, (long) 26148950, periodType25);
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.LocalTime localTime39 = new org.joda.time.LocalTime(dateTimeZone38);
        org.joda.time.LocalTime localTime41 = localTime39.minusHours((int) (byte) 100);
        org.joda.time.Chronology chronology42 = localTime41.getChronology();
        org.joda.time.MutablePeriod mutablePeriod43 = new org.joda.time.MutablePeriod((long) 45, 949680L, chronology42);
        org.joda.time.DateTimeField dateTimeField44 = chronology42.millisOfDay();
        org.joda.time.Period period45 = new org.joda.time.Period(3155760000000L, periodType25, chronology42);
        org.joda.time.MutablePeriod mutablePeriod46 = new org.joda.time.MutablePeriod((long) (byte) 0, (long) (short) 100, periodType25);
        org.joda.time.Period period47 = new org.joda.time.Period((org.joda.time.ReadableInstant) instant9, (org.joda.time.ReadableDuration) duration15, periodType25);
        org.joda.time.DateTime dateTime48 = instant9.toDateTime();
        org.joda.time.Chronology chronology49 = instant9.getChronology();
        org.joda.time.Duration duration51 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period52 = duration51.toPeriod();
        org.joda.time.Duration duration55 = duration51.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.DateTime dateTime57 = new org.joda.time.DateTime(chronology56);
        org.joda.time.DateTime dateTime59 = dateTime57.plusMinutes(15);
        org.joda.time.Interval interval60 = duration55.toIntervalTo((org.joda.time.ReadableInstant) dateTime59);
        org.joda.time.Seconds seconds61 = duration55.toStandardSeconds();
        org.joda.time.Instant instant62 = instant9.minus((org.joda.time.ReadableDuration) duration55);
        org.joda.time.MutableDateTime mutableDateTime63 = instant9.toMutableDateTime();
        org.junit.Assert.assertNotNull(instant2);
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(instant9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 86400000L + "'", long10 == 86400000L);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(periodType25);
        org.junit.Assert.assertNotNull(durationFieldType28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "PeriodType[YearDayTime]" + "'", str29, "PeriodType[YearDayTime]");
        org.junit.Assert.assertNotNull(instant32);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(localTime41);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertNotNull(duration51);
        org.junit.Assert.assertNotNull(period52);
        org.junit.Assert.assertNotNull(duration55);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(interval60);
        org.junit.Assert.assertNotNull(seconds61);
        org.junit.Assert.assertNotNull(instant62);
        org.junit.Assert.assertNotNull(mutableDateTime63);
    }

    @Test
    public void test07757() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07757");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.add((long) 'a');
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime0.yearOfCentury();
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period6 = duration5.toPeriod();
        org.joda.time.Duration duration8 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration11 = duration8.withDurationAdded((long) (short) 100, (int) ' ');
        org.joda.time.Duration duration12 = duration5.minus((org.joda.time.ReadableDuration) duration11);
        mutableDateTime0.add((org.joda.time.ReadableDuration) duration5);
        org.joda.time.MutableDateTime.Property property14 = mutableDateTime0.centuryOfEra();
        mutableDateTime0.addYears(0);
        mutableDateTime0.setMinuteOfDay((int) (short) 0);
        org.joda.time.Instant instant19 = new org.joda.time.Instant();
        org.joda.time.Instant instant21 = instant19.withMillis(0L);
        org.joda.time.Duration duration23 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period24 = duration23.toPeriod();
        org.joda.time.Duration duration27 = duration23.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Instant instant28 = instant21.plus((org.joda.time.ReadableDuration) duration27);
        long long29 = instant28.getMillis();
        org.joda.time.Duration duration30 = new org.joda.time.Duration((org.joda.time.ReadableInstant) mutableDateTime0, (org.joda.time.ReadableInstant) instant28);
        mutableDateTime0.addHours(20);
        mutableDateTime0.setMillisOfSecond(57);
        org.joda.time.MutableDateTime.Property property35 = mutableDateTime0.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField36 = property35.getField();
        int int38 = dateTimeField36.getMaximumValue((long) 26511);
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(instant21);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertNotNull(instant28);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 86400000L + "'", long29 == 86400000L);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 99 + "'", int38 == 99);
    }

    @Test
    public void test07758() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07758");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.UTC;
        java.util.TimeZone timeZone3 = dateTimeZone2.toTimeZone();
        org.joda.time.DateTime dateTime4 = localDate0.toDateTimeAtCurrentTime(dateTimeZone2);
        org.joda.time.MutableDateTime mutableDateTime5 = org.joda.time.MutableDateTime.now(dateTimeZone2);
        int int6 = mutableDateTime5.getDayOfMonth();
        int int7 = mutableDateTime5.getMonthOfYear();
        org.joda.time.MutableDateTime.Property property8 = mutableDateTime5.dayOfYear();
        org.joda.time.Chronology chronology9 = mutableDateTime5.getChronology();
        mutableDateTime5.setWeekyear(61);
        int int12 = mutableDateTime5.getRoundingMode();
        mutableDateTime5.setMinuteOfDay(278);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(timeZone3);
// flaky:         org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "\u534f\u8c03\u4e16\u754c\u65f6\u95f4");
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(mutableDateTime5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 22 + "'", int6 == 22);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2 + "'", int7 == 2);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
    }

    @Test
    public void test07759() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07759");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.add((long) 'a');
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime0.yearOfCentury();
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period6 = duration5.toPeriod();
        org.joda.time.Duration duration8 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration11 = duration8.withDurationAdded((long) (short) 100, (int) ' ');
        org.joda.time.Duration duration12 = duration5.minus((org.joda.time.ReadableDuration) duration11);
        mutableDateTime0.add((org.joda.time.ReadableDuration) duration5);
        org.joda.time.MutableDateTime.Property property14 = mutableDateTime0.centuryOfEra();
        mutableDateTime0.addYears(0);
        mutableDateTime0.setMinuteOfDay((int) (short) 0);
        org.joda.time.Instant instant19 = new org.joda.time.Instant();
        org.joda.time.Instant instant21 = instant19.withMillis(0L);
        org.joda.time.Duration duration23 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period24 = duration23.toPeriod();
        org.joda.time.Duration duration27 = duration23.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Instant instant28 = instant21.plus((org.joda.time.ReadableDuration) duration27);
        long long29 = instant28.getMillis();
        org.joda.time.Duration duration30 = new org.joda.time.Duration((org.joda.time.ReadableInstant) mutableDateTime0, (org.joda.time.ReadableInstant) instant28);
        org.joda.time.DateTime dateTime31 = instant28.toDateTimeISO();
        org.joda.time.Instant instant33 = instant28.plus(1645514195313L);
        java.lang.Object obj34 = null;
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime(obj34);
        org.joda.time.Duration duration37 = org.joda.time.Duration.standardSeconds((long) 45);
        org.joda.time.Period period38 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime35, (org.joda.time.ReadableDuration) duration37);
        org.joda.time.Days days39 = duration37.toStandardDays();
        org.joda.time.Duration duration41 = duration37.plus(993373L);
        java.lang.String str42 = duration41.toString();
        org.joda.time.Instant instant43 = instant28.minus((org.joda.time.ReadableDuration) duration41);
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(instant21);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertNotNull(instant28);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 86400000L + "'", long29 == 86400000L);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(instant33);
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertNotNull(days39);
        org.junit.Assert.assertNotNull(duration41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "PT1038.373S" + "'", str42, "PT1038.373S");
        org.junit.Assert.assertNotNull(instant43);
    }

    @Test
    public void test07760() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07760");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        java.lang.Object obj1 = mutableDateTime0.clone();
        mutableDateTime0.setTime((long) 46);
        org.joda.time.MutableDateTime.Property property4 = mutableDateTime0.dayOfWeek();
        org.joda.time.MutableDateTime mutableDateTime6 = property4.add(1L);
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.UTC;
        java.util.TimeZone timeZone8 = dateTimeZone7.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        long long11 = dateTimeZone7.getMillisKeepLocal(dateTimeZone9, (long) 44);
        org.joda.time.DateTime dateTime12 = org.joda.time.DateTime.now(dateTimeZone7);
        mutableDateTime6.setZoneRetainFields(dateTimeZone7);
        java.util.Locale.Builder builder15 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder16 = builder15.clear();
        java.util.Locale locale17 = builder16.build();
        java.lang.String str18 = dateTimeZone7.getName(555370422L, locale17);
        java.lang.String str20 = dateTimeZone7.getShortName(962578L);
        int int22 = dateTimeZone7.getOffset(1645514174548L);
        java.lang.String str23 = dateTimeZone7.toString();
        long long26 = dateTimeZone7.convertLocalToUTC(1645514193039L, false);
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime(dateTimeZone7);
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(obj1);
// flaky:         org.junit.Assert.assertEquals(obj1.toString(), "2022-02-22T07:23:54.101Z");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj1), "2022-02-22T07:23:54.101Z");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj1), "2022-02-22T07:23:54.101Z");
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(timeZone8);
// flaky:         org.junit.Assert.assertEquals(timeZone8.getDisplayName(), "\u534f\u8c03\u4e16\u754c\u65f6\u95f4");
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 44L + "'", long11 == 44L);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "+00:00" + "'", str18, "+00:00");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "+00:00" + "'", str20, "+00:00");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "UTC" + "'", str23, "UTC");
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 1645514193039L + "'", long26 == 1645514193039L);
    }

    @Test
    public void test07761() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07761");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardDays((-229704L));
        org.junit.Assert.assertNotNull(duration1);
    }

    @Test
    public void test07762() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07762");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) (byte) -1);
        org.joda.time.LocalDate.Property property2 = localDate1.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime4 = org.joda.time.MutableDateTime.now();
        mutableDateTime4.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime7 = mutableDateTime4.copy();
        org.joda.time.MutableDateTime.Property property8 = mutableDateTime4.weekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime9 = property8.roundHalfFloor();
        org.joda.time.MutableDateTime mutableDateTime11 = property8.add((long) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.UTC;
        java.util.TimeZone timeZone13 = dateTimeZone12.toTimeZone();
        org.joda.time.MutableDateTime mutableDateTime14 = mutableDateTime11.toMutableDateTime(dateTimeZone12);
        mutableDateTime14.add(51L);
        int int17 = mutableDateTime14.getHourOfDay();
        org.joda.time.MutableDateTime mutableDateTime18 = org.joda.time.MutableDateTime.now();
        mutableDateTime18.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime21 = mutableDateTime18.copy();
        org.joda.time.MutableDateTime.Property property22 = mutableDateTime18.weekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime23 = property22.roundHalfFloor();
        org.joda.time.MutableDateTime mutableDateTime24 = property22.roundHalfCeiling();
        org.joda.time.MutableDateTime mutableDateTime26 = property22.set(1);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime(chronology27);
        int int29 = dateTime28.getYearOfCentury();
        int int30 = dateTime28.getWeekyear();
        org.joda.time.DateTime dateTime31 = dateTime28.withEarlierOffsetAtOverlap();
        java.lang.String str32 = dateTime31.toString();
        org.joda.time.MutableDateTime mutableDateTime33 = dateTime31.toMutableDateTime();
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.UTC;
        boolean boolean35 = dateTimeZone34.isFixed();
        mutableDateTime33.setZoneRetainFields(dateTimeZone34);
        org.joda.time.MutableDateTime mutableDateTime37 = mutableDateTime26.toMutableDateTime(dateTimeZone34);
        mutableDateTime14.setZone(dateTimeZone34);
        org.joda.time.DateTime dateTime42 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime44 = dateTime42.withZoneRetainFields(dateTimeZone43);
        org.joda.time.LocalDate localDate45 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property46 = localDate45.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.UTC;
        java.util.TimeZone timeZone48 = dateTimeZone47.toTimeZone();
        org.joda.time.DateTime dateTime49 = localDate45.toDateTimeAtCurrentTime(dateTimeZone47);
        int int50 = dateTime44.compareTo((org.joda.time.ReadableInstant) dateTime49);
        org.joda.time.DateTime dateTime52 = dateTime49.minusWeeks(44);
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.DateTime dateTime54 = new org.joda.time.DateTime(chronology53);
        org.joda.time.DateTime dateTime56 = dateTime54.plusMinutes(15);
        org.joda.time.Chronology chronology57 = dateTime54.getChronology();
        java.lang.String str58 = chronology57.toString();
        org.joda.time.DateTimeField dateTimeField59 = chronology57.dayOfYear();
        org.joda.time.DateTime dateTime60 = dateTime49.withChronology(chronology57);
        org.joda.time.ReadableDuration readableDuration61 = null;
        org.joda.time.ReadableInstant readableInstant62 = null;
        org.joda.time.ReadableInstant readableInstant63 = null;
        org.joda.time.PeriodType periodType64 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod65 = new org.joda.time.MutablePeriod(readableInstant62, readableInstant63, periodType64);
        org.joda.time.DurationFieldType durationFieldType67 = periodType64.getFieldType((int) (short) 0);
        org.joda.time.PeriodType periodType68 = periodType64.withMillisRemoved();
        org.joda.time.Period period69 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime60, readableDuration61, periodType68);
        org.joda.time.Period period70 = new org.joda.time.Period(0L, periodType68);
        org.joda.time.format.DateTimePrinter dateTimePrinter71 = null;
        org.joda.time.format.DateTimeParser dateTimeParser72 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter73 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter71, dateTimeParser72);
        org.joda.time.Instant instant74 = new org.joda.time.Instant();
        org.joda.time.Instant instant76 = instant74.withMillis(0L);
        org.joda.time.Chronology chronology77 = instant76.getChronology();
        org.joda.time.DurationField durationField78 = chronology77.eras();
        long long82 = chronology77.add(0L, (long) 2022, (int) '4');
        org.joda.time.format.DateTimeFormatter dateTimeFormatter83 = dateTimeFormatter73.withChronology(chronology77);
        org.joda.time.MutablePeriod mutablePeriod84 = new org.joda.time.MutablePeriod(3600000L, periodType68, chronology77);
        org.joda.time.DateTimeZone dateTimeZone85 = chronology77.getZone();
        boolean boolean86 = dateTimeZone34.equals((java.lang.Object) chronology77);
        org.joda.time.MutableDateTime mutableDateTime87 = new org.joda.time.MutableDateTime((long) 26252, dateTimeZone34);
        org.joda.time.DateTime dateTime88 = localDate1.toDateTimeAtStartOfDay(dateTimeZone34);
        org.joda.time.DateTime dateTime90 = dateTime88.plusMillis(117);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(mutableDateTime4);
        org.junit.Assert.assertNotNull(mutableDateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(timeZone13);
// flaky:         org.junit.Assert.assertEquals(timeZone13.getDisplayName(), "\u534f\u8c03\u4e16\u754c\u65f6\u95f4");
        org.junit.Assert.assertNotNull(mutableDateTime14);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(mutableDateTime18);
        org.junit.Assert.assertNotNull(mutableDateTime21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(mutableDateTime23);
        org.junit.Assert.assertNotNull(mutableDateTime24);
        org.junit.Assert.assertNotNull(mutableDateTime26);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 22 + "'", int29 == 22);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2022 + "'", int30 == 2022);
        org.junit.Assert.assertNotNull(dateTime31);
// flaky:         org.junit.Assert.assertEquals("'" + str32 + "' != '" + "2022-02-22T07:23:54.134Z" + "'", str32, "2022-02-22T07:23:54.134Z");
        org.junit.Assert.assertNotNull(mutableDateTime33);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(mutableDateTime37);
        org.junit.Assert.assertNotNull(dateTimeZone43);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(dateTimeZone47);
        org.junit.Assert.assertNotNull(timeZone48);
// flaky:         org.junit.Assert.assertEquals(timeZone48.getDisplayName(), "\u534f\u8c03\u4e16\u754c\u65f6\u95f4");
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(chronology57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "ISOChronology[UTC]" + "'", str58, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField59);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(periodType64);
        org.junit.Assert.assertNotNull(durationFieldType67);
        org.junit.Assert.assertNotNull(periodType68);
        org.junit.Assert.assertNotNull(instant76);
        org.junit.Assert.assertNotNull(chronology77);
        org.junit.Assert.assertNotNull(durationField78);
        org.junit.Assert.assertTrue("'" + long82 + "' != '" + 105144L + "'", long82 == 105144L);
        org.junit.Assert.assertNotNull(dateTimeFormatter83);
        org.junit.Assert.assertNotNull(dateTimeZone85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(dateTime88);
        org.junit.Assert.assertNotNull(dateTime90);
    }

    @Test
    public void test07763() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07763");
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.PeriodType periodType6 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod(readableInstant4, readableInstant5, periodType6);
        org.joda.time.DurationFieldType durationFieldType9 = periodType6.getFieldType((int) (short) 0);
        java.lang.String str10 = periodType6.toString();
        org.joda.time.Instant instant11 = new org.joda.time.Instant();
        org.joda.time.Instant instant13 = instant11.withMillis(0L);
        org.joda.time.Chronology chronology14 = instant13.getChronology();
        org.joda.time.Period period15 = new org.joda.time.Period((long) 53, (long) (-1), periodType6, chronology14);
        org.joda.time.LocalDate localDate16 = org.joda.time.LocalDate.now(chronology14);
        org.joda.time.MutablePeriod mutablePeriod17 = new org.joda.time.MutablePeriod((long) 'a', chronology14);
        java.util.Locale.Builder builder18 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder19 = builder18.clear();
        java.util.Locale locale20 = java.util.Locale.GERMAN;
        java.lang.String str21 = locale20.getDisplayName();
        java.lang.String str22 = locale20.getISO3Language();
        java.lang.String str23 = locale20.getISO3Country();
        java.util.Locale.Builder builder24 = builder19.setLocale(locale20);
        java.util.Locale locale25 = java.util.Locale.GERMAN;
        java.util.Locale locale26 = java.util.Locale.CANADA;
        java.lang.String str27 = locale25.getDisplayVariant(locale26);
        java.util.Locale.Builder builder28 = builder24.setLocale(locale26);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket29 = new org.joda.time.format.DateTimeParserBucket((long) 36, chronology14, locale26);
        java.util.Locale locale30 = dateTimeParserBucket29.getLocale();
        java.util.Set<java.lang.String> strSet31 = locale30.getUnicodeLocaleKeys();
        boolean boolean33 = strSet31.equals((java.lang.Object) 1049406L);
        java.util.Set<java.lang.String> strSet34 = org.joda.time.DateTimeZone.getAvailableIDs();
        java.util.Locale.LanguageRange[] languageRangeArray35 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList36 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList36, languageRangeArray35);
        java.util.stream.Stream<java.util.Locale.LanguageRange> languageRangeStream38 = languageRangeList36.stream();
        boolean boolean39 = strSet34.removeAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList36);
        java.util.stream.Stream<java.util.Locale.LanguageRange> languageRangeStream40 = languageRangeList36.stream();
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap41 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList42 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList36, strMap41);
        java.util.Locale.LanguageRange[] languageRangeArray43 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList44 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList44, languageRangeArray43);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap46 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList47 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList44, strMap46);
        java.util.Locale locale48 = java.util.Locale.PRC;
        java.lang.String str49 = locale48.getScript();
        java.util.Set<java.lang.String> strSet50 = locale48.getUnicodeLocaleKeys();
        java.lang.String str51 = java.util.Locale.lookupTag(languageRangeList47, (java.util.Collection<java.lang.String>) strSet50);
        java.lang.Object[] objArray52 = strSet50.toArray();
        java.lang.String str53 = java.util.Locale.lookupTag(languageRangeList42, (java.util.Collection<java.lang.String>) strSet50);
        boolean boolean54 = strSet31.retainAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList42);
        org.joda.time.MutableDateTime mutableDateTime55 = org.joda.time.MutableDateTime.now();
        mutableDateTime55.add((long) 'a');
        org.joda.time.MutableDateTime.Property property58 = mutableDateTime55.yearOfCentury();
        org.joda.time.Duration duration60 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period61 = duration60.toPeriod();
        org.joda.time.Duration duration63 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration66 = duration63.withDurationAdded((long) (short) 100, (int) ' ');
        org.joda.time.Duration duration67 = duration60.minus((org.joda.time.ReadableDuration) duration66);
        mutableDateTime55.add((org.joda.time.ReadableDuration) duration60);
        org.joda.time.MutableDateTime.Property property69 = mutableDateTime55.centuryOfEra();
        mutableDateTime55.addHours((int) (byte) 10);
        mutableDateTime55.addWeeks(100);
        org.joda.time.ReadableInstant readableInstant76 = null;
        org.joda.time.ReadableInstant readableInstant77 = null;
        org.joda.time.PeriodType periodType78 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod79 = new org.joda.time.MutablePeriod(readableInstant76, readableInstant77, periodType78);
        org.joda.time.DurationFieldType durationFieldType81 = periodType78.getFieldType((int) (short) 0);
        java.lang.String str82 = periodType78.toString();
        org.joda.time.Instant instant83 = new org.joda.time.Instant();
        org.joda.time.Instant instant85 = instant83.withMillis(0L);
        org.joda.time.Chronology chronology86 = instant85.getChronology();
        org.joda.time.Period period87 = new org.joda.time.Period((long) 53, (long) (-1), periodType78, chronology86);
        org.joda.time.LocalDate localDate88 = org.joda.time.LocalDate.now(chronology86);
        org.joda.time.DateTimeField dateTimeField89 = chronology86.dayOfWeek();
        mutableDateTime55.setChronology(chronology86);
        org.joda.time.DateTimeField dateTimeField91 = chronology86.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField92 = chronology86.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField93 = chronology86.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField94 = chronology86.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField95 = chronology86.halfdayOfDay();
        boolean boolean96 = strSet31.equals((java.lang.Object) chronology86);
        org.junit.Assert.assertNotNull(periodType6);
        org.junit.Assert.assertNotNull(durationFieldType9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "PeriodType[YearDayTime]" + "'", str10, "PeriodType[YearDayTime]");
        org.junit.Assert.assertNotNull(instant13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "de");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "\u5fb7\u6587" + "'", str21, "\u5fb7\u6587");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "deu" + "'", str22, "deu");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "de");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "en_CA");
        org.junit.Assert.assertNotNull(strSet31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(strSet34);
        org.junit.Assert.assertNotNull(languageRangeArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(languageRangeStream38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(languageRangeStream40);
        org.junit.Assert.assertNotNull(languageRangeList42);
        org.junit.Assert.assertNotNull(languageRangeArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(languageRangeList47);
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertNotNull(strSet50);
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[]");
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(mutableDateTime55);
        org.junit.Assert.assertNotNull(property58);
        org.junit.Assert.assertNotNull(duration60);
        org.junit.Assert.assertNotNull(period61);
        org.junit.Assert.assertNotNull(duration63);
        org.junit.Assert.assertNotNull(duration66);
        org.junit.Assert.assertNotNull(duration67);
        org.junit.Assert.assertNotNull(property69);
        org.junit.Assert.assertNotNull(periodType78);
        org.junit.Assert.assertNotNull(durationFieldType81);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "PeriodType[YearDayTime]" + "'", str82, "PeriodType[YearDayTime]");
        org.junit.Assert.assertNotNull(instant85);
        org.junit.Assert.assertNotNull(chronology86);
        org.junit.Assert.assertNotNull(localDate88);
        org.junit.Assert.assertNotNull(dateTimeField89);
        org.junit.Assert.assertNotNull(dateTimeField91);
        org.junit.Assert.assertNotNull(dateTimeField92);
        org.junit.Assert.assertNotNull(dateTimeField93);
        org.junit.Assert.assertNotNull(dateTimeField94);
        org.junit.Assert.assertNotNull(dateTimeField95);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
    }

    @Test
    public void test07764() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07764");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = java.util.Locale.GERMAN;
        java.util.Locale locale3 = java.util.Locale.CANADA;
        java.lang.String str4 = locale2.getDisplayVariant(locale3);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology1, locale3);
        java.lang.Object obj6 = dateTimeParserBucket5.saveState();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.LocalTime localTime9 = new org.joda.time.LocalTime((long) (short) 100, chronology8);
        org.joda.time.DurationFieldType durationFieldType10 = org.joda.time.DurationFieldType.weeks();
        java.lang.String str11 = durationFieldType10.getName();
        boolean boolean12 = localTime9.isSupported(durationFieldType10);
        boolean boolean13 = dateTimeParserBucket5.restoreState((java.lang.Object) boolean12);
        org.joda.time.Chronology chronology14 = dateTimeParserBucket5.getChronology();
        long long17 = dateTimeParserBucket5.computeMillis(true, "");
        int int18 = dateTimeParserBucket5.getOffset();
        java.lang.Object obj19 = dateTimeParserBucket5.saveState();
        java.lang.Integer int20 = dateTimeParserBucket5.getPivotYear();
        long long22 = dateTimeParserBucket5.computeMillis(false);
        java.lang.Integer int23 = dateTimeParserBucket5.getPivotYear();
        org.joda.time.Chronology chronology24 = dateTimeParserBucket5.getChronology();
        org.joda.time.Chronology chronology25 = dateTimeParserBucket5.getChronology();
        org.joda.time.Instant instant26 = new org.joda.time.Instant();
        org.joda.time.Instant instant28 = instant26.withMillis(0L);
        org.joda.time.Duration duration30 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period31 = duration30.toPeriod();
        org.joda.time.Duration duration34 = duration30.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Instant instant35 = instant28.plus((org.joda.time.ReadableDuration) duration34);
        long long36 = instant35.getMillis();
        org.joda.time.Chronology chronology37 = instant35.getChronology();
        org.joda.time.DurationField durationField38 = chronology37.months();
        org.joda.time.MutableDateTime mutableDateTime39 = org.joda.time.MutableDateTime.now(chronology37);
        org.joda.time.DateTimeField dateTimeField40 = chronology37.yearOfCentury();
        org.joda.time.DateTimeFieldType dateTimeFieldType41 = dateTimeField40.getType();
        dateTimeParserBucket5.saveField(dateTimeField40, 37);
        org.joda.time.DateTimeZone dateTimeZone44 = null;
        org.joda.time.LocalTime localTime45 = new org.joda.time.LocalTime(dateTimeZone44);
        org.joda.time.LocalTime localTime47 = localTime45.minusHours((int) (byte) 100);
        org.joda.time.LocalTime localTime49 = localTime47.withHourOfDay(0);
        org.joda.time.LocalTime localTime51 = localTime49.withMillisOfSecond(44);
        org.joda.time.LocalTime localTime53 = localTime51.plusSeconds(0);
        org.joda.time.LocalTime.Property property54 = localTime53.hourOfDay();
        org.joda.time.LocalTime localTime55 = property54.withMaximumValue();
        org.joda.time.LocalTime.Property property56 = localTime55.millisOfDay();
        org.joda.time.MutablePeriod mutablePeriod60 = new org.joda.time.MutablePeriod(0L, 1645514345757L);
        int[] intArray61 = mutablePeriod60.getValues();
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray63 = dateTimeField40.set((org.joda.time.ReadablePartial) localTime55, 26450, intArray61, 26514297);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26514297 for yearOfCentury must be in the range [0,99]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "de");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertNotNull(durationFieldType10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "weeks" + "'", str11, "weeks");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 97L + "'", long17 == 97L);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(obj19);
        org.junit.Assert.assertNull(int20);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 97L + "'", long22 == 97L);
        org.junit.Assert.assertNull(int23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(instant28);
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertNotNull(instant35);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 86400000L + "'", long36 == 86400000L);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(durationField38);
        org.junit.Assert.assertNotNull(mutableDateTime39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(dateTimeFieldType41);
        org.junit.Assert.assertNotNull(localTime47);
        org.junit.Assert.assertNotNull(localTime49);
        org.junit.Assert.assertNotNull(localTime51);
        org.junit.Assert.assertNotNull(localTime53);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertNotNull(localTime55);
        org.junit.Assert.assertNotNull(property56);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[52, 1, 3, 0, 7, 19, 5, 757]");
    }

    @Test
    public void test07765() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07765");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.monthOfYear();
        org.joda.time.DateTimeField dateTimeField2 = property1.getField();
        org.joda.time.LocalDate localDate3 = property1.withMaximumValue();
        java.util.Date date4 = localDate3.toDate();
        org.joda.time.LocalDate.Property property5 = localDate3.dayOfMonth();
        org.joda.time.LocalDate localDate7 = localDate3.withEra(0);
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.UTC;
        java.util.TimeZone timeZone9 = dateTimeZone8.toTimeZone();
        org.joda.time.DateTime dateTime10 = org.joda.time.DateTime.now(dateTimeZone8);
        org.joda.time.DateTime dateTime11 = localDate3.toDateTimeAtMidnight(dateTimeZone8);
        int int12 = localDate3.getWeekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.UTC;
        java.util.TimeZone timeZone14 = dateTimeZone13.toTimeZone();
        long long16 = dateTimeZone13.previousTransition(100L);
        int int18 = dateTimeZone13.getStandardOffset(86403200L);
        java.util.Locale locale23 = new java.util.Locale("2022-02-22T07:16:45.172Z", "2022-02-22T07:16:03.288", "PT15M53.936S");
        java.lang.String str24 = locale23.getVariant();
        java.lang.String str25 = dateTimeZone13.getShortName(1076373L, locale23);
        org.joda.time.DateTime dateTime26 = localDate3.toDateTimeAtCurrentTime(dateTimeZone13);
        int int27 = localDate3.getYearOfCentury();
        org.joda.time.ReadableInstant readableInstant28 = null;
        org.joda.time.ReadableInstant readableInstant29 = null;
        org.joda.time.PeriodType periodType30 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod31 = new org.joda.time.MutablePeriod(readableInstant28, readableInstant29, periodType30);
        mutablePeriod31.setYears((int) '#');
        org.joda.time.Chronology chronology35 = null;
        mutablePeriod31.add((long) 1, chronology35);
        org.joda.time.ReadableInterval readableInterval37 = null;
        mutablePeriod31.setPeriod(readableInterval37);
        org.joda.time.Duration duration40 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period41 = duration40.toPeriod();
        org.joda.time.Duration duration43 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration45 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration48 = duration45.withDurationAdded((long) (short) 100, (int) ' ');
        boolean boolean49 = duration43.isLongerThan((org.joda.time.ReadableDuration) duration48);
        org.joda.time.Duration duration50 = duration40.minus((org.joda.time.ReadableDuration) duration43);
        org.joda.time.Instant instant51 = new org.joda.time.Instant();
        org.joda.time.Instant instant53 = instant51.withMillis(0L);
        org.joda.time.Duration duration55 = org.joda.time.Duration.standardDays((long) (byte) 1);
        java.lang.String str56 = duration55.toString();
        org.joda.time.Instant instant57 = instant51.minus((org.joda.time.ReadableDuration) duration55);
        org.joda.time.MutableDateTime mutableDateTime58 = instant51.toMutableDateTime();
        mutableDateTime58.addDays(1424);
        int int61 = mutableDateTime58.getHourOfDay();
        org.joda.time.Chronology chronology62 = mutableDateTime58.getChronology();
        org.joda.time.Interval interval63 = duration50.toIntervalFrom((org.joda.time.ReadableInstant) mutableDateTime58);
        mutablePeriod31.add((org.joda.time.ReadableInterval) interval63);
        int int65 = mutablePeriod31.getMonths();
        org.joda.time.LocalDate localDate66 = localDate3.plus((org.joda.time.ReadablePeriod) mutablePeriod31);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(date4);
// flaky:         org.junit.Assert.assertEquals(date4.toString(), "Thu Dec 22 00:00:00 GMT+00:00 2022");
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(timeZone9);
// flaky:         org.junit.Assert.assertEquals(timeZone9.getDisplayName(), "\u534f\u8c03\u4e16\u754c\u65f6\u95f4");
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 51 + "'", int12 == 51);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(timeZone14);
// flaky:         org.junit.Assert.assertEquals(timeZone14.getDisplayName(), "\u534f\u8c03\u4e16\u754c\u65f6\u95f4");
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 100L + "'", long16 == 100L);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertEquals(locale23.toString(), "2022-02-22t07:16:45.172z_2022-02-22T07:16:03.288_PT15M53.936S");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "PT15M53.936S" + "'", str24, "PT15M53.936S");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "+00:00" + "'", str25, "+00:00");
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 22 + "'", int27 == 22);
        org.junit.Assert.assertNotNull(periodType30);
        org.junit.Assert.assertNotNull(duration40);
        org.junit.Assert.assertNotNull(period41);
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertNotNull(duration45);
        org.junit.Assert.assertNotNull(duration48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(duration50);
        org.junit.Assert.assertNotNull(instant53);
        org.junit.Assert.assertNotNull(duration55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "PT86400S" + "'", str56, "PT86400S");
        org.junit.Assert.assertNotNull(instant57);
        org.junit.Assert.assertNotNull(mutableDateTime58);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 7 + "'", int61 == 7);
        org.junit.Assert.assertNotNull(chronology62);
        org.junit.Assert.assertNotNull(interval63);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertNotNull(localDate66);
    }

    @Test
    public void test07766() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07766");
        java.lang.Object obj0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(obj0);
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.withHourOfDay(10);
        org.joda.time.DateTimeField dateTimeField8 = localDateTime6.getField((int) (byte) 0);
        long long10 = dateTimeField8.roundHalfEven((long) 1);
        int int11 = dateTime1.get(dateTimeField8);
        org.joda.time.LocalDateTime localDateTime12 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.withCenturyOfEra((int) 'a');
        java.util.Locale locale20 = java.util.Locale.GERMAN;
        java.lang.String str21 = locale20.getDisplayName();
        java.lang.String str22 = dateTimeField8.getAsText((org.joda.time.ReadablePartial) localDateTime16, 53, locale20);
        org.joda.time.Duration duration24 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period25 = duration24.toPeriod();
        org.joda.time.Duration duration28 = duration24.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime16.minus((org.joda.time.ReadableDuration) duration24);
        org.joda.time.LocalDateTime localDateTime30 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime32 = localDateTime30.withHourOfDay(10);
        org.joda.time.LocalDateTime.Property property33 = localDateTime30.hourOfDay();
        org.joda.time.LocalDateTime localDateTime35 = localDateTime30.plusMillis((int) (byte) 0);
        int int36 = localDateTime16.compareTo((org.joda.time.ReadablePartial) localDateTime30);
        org.joda.time.MutableDateTime mutableDateTime38 = new org.joda.time.MutableDateTime((long) (short) -1);
        mutableDateTime38.setSecondOfMinute(53);
        int int41 = mutableDateTime38.getEra();
        org.joda.time.DateTimeField dateTimeField42 = mutableDateTime38.getRoundingField();
        org.joda.time.DateTime dateTime43 = localDateTime16.toDateTime((org.joda.time.ReadableInstant) mutableDateTime38);
        org.joda.time.Instant instant44 = new org.joda.time.Instant();
        org.joda.time.Instant instant46 = instant44.withMillis(0L);
        org.joda.time.DateTime dateTime47 = instant46.toDateTime();
        org.joda.time.Duration duration49 = org.joda.time.Duration.standardMinutes((long) (byte) -1);
        org.joda.time.Instant instant51 = instant46.withDurationAdded((org.joda.time.ReadableDuration) duration49, 0);
        org.joda.time.MutableDateTime mutableDateTime52 = instant46.toMutableDateTime();
        mutableDateTime52.setTime(31556952000L);
        int int55 = dateTime43.compareTo((org.joda.time.ReadableInstant) mutableDateTime52);
        org.joda.time.DateTime dateTime57 = new org.joda.time.DateTime((long) 1);
        org.joda.time.Duration duration59 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period60 = duration59.toPeriod();
        org.joda.time.Duration duration63 = duration59.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Period period64 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime57, (org.joda.time.ReadableDuration) duration63);
        org.joda.time.Instant instant65 = dateTime57.toInstant();
        org.joda.time.Instant instant66 = instant65.toInstant();
        long long67 = instant65.getMillis();
        org.joda.time.DateTime dateTime68 = instant65.toDateTimeISO();
        org.joda.time.DateTime dateTime70 = dateTime68.plusDays(42);
        int int71 = dateTime70.getYearOfEra();
        org.joda.time.MutablePeriod mutablePeriod72 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) mutableDateTime52, (org.joda.time.ReadableInstant) dateTime70);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2022 + "'", int11 == 2022);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "de");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "\u5fb7\u6587" + "'", str21, "\u5fb7\u6587");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "53" + "'", str22, "53");
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertNull(dateTimeField42);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(instant46);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(duration49);
        org.junit.Assert.assertNotNull(instant51);
        org.junit.Assert.assertNotNull(mutableDateTime52);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertNotNull(duration59);
        org.junit.Assert.assertNotNull(period60);
        org.junit.Assert.assertNotNull(duration63);
        org.junit.Assert.assertNotNull(instant65);
        org.junit.Assert.assertNotNull(instant66);
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + 1L + "'", long67 == 1L);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 1970 + "'", int71 == 1970);
    }

    @Test
    public void test07767() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07767");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.add((long) 'a');
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime0.yearOfCentury();
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period6 = duration5.toPeriod();
        org.joda.time.Duration duration8 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration11 = duration8.withDurationAdded((long) (short) 100, (int) ' ');
        org.joda.time.Duration duration12 = duration5.minus((org.joda.time.ReadableDuration) duration11);
        mutableDateTime0.add((org.joda.time.ReadableDuration) duration5);
        org.joda.time.MutableDateTime.Property property14 = mutableDateTime0.centuryOfEra();
        mutableDateTime0.addHours((int) (byte) 10);
        mutableDateTime0.addWeeks(20);
        org.joda.time.DateTimeField dateTimeField19 = mutableDateTime0.getRoundingField();
        int int20 = mutableDateTime0.getWeekyear();
        int int21 = mutableDateTime0.getDayOfWeek();
        int int22 = mutableDateTime0.getWeekyear();
        org.joda.time.MutableDateTime.Property property23 = mutableDateTime0.millisOfDay();
        org.joda.time.MutableDateTime mutableDateTime24 = org.joda.time.MutableDateTime.now();
        mutableDateTime24.add((long) 'a');
        org.joda.time.MutableDateTime.Property property27 = mutableDateTime24.yearOfCentury();
        org.joda.time.Duration duration29 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period30 = duration29.toPeriod();
        org.joda.time.Duration duration32 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration35 = duration32.withDurationAdded((long) (short) 100, (int) ' ');
        org.joda.time.Duration duration36 = duration29.minus((org.joda.time.ReadableDuration) duration35);
        mutableDateTime24.add((org.joda.time.ReadableDuration) duration29);
        org.joda.time.MutableDateTime.Property property38 = mutableDateTime24.centuryOfEra();
        mutableDateTime24.addYears(0);
        mutableDateTime24.setMinuteOfDay((int) (short) 0);
        org.joda.time.Instant instant43 = new org.joda.time.Instant();
        org.joda.time.Instant instant45 = instant43.withMillis(0L);
        org.joda.time.Duration duration47 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period48 = duration47.toPeriod();
        org.joda.time.Duration duration51 = duration47.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Instant instant52 = instant45.plus((org.joda.time.ReadableDuration) duration51);
        long long53 = instant52.getMillis();
        org.joda.time.Duration duration54 = new org.joda.time.Duration((org.joda.time.ReadableInstant) mutableDateTime24, (org.joda.time.ReadableInstant) instant52);
        org.joda.time.MutableDateTime.Property property55 = mutableDateTime24.millisOfSecond();
        org.joda.time.Instant instant56 = new org.joda.time.Instant((java.lang.Object) mutableDateTime24);
        boolean boolean57 = mutableDateTime0.isAfter((org.joda.time.ReadableInstant) mutableDateTime24);
        org.joda.time.DateTime dateTime58 = mutableDateTime24.toDateTime();
        int int59 = mutableDateTime24.getDayOfMonth();
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime24.setDateTime(2020, 26515585, 812, 26518437, 125, 686, 33489);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26518437 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNull(dateTimeField19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2022 + "'", int20 == 2022);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 3 + "'", int21 == 3);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2022 + "'", int22 == 2022);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(mutableDateTime24);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(instant45);
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertNotNull(period48);
        org.junit.Assert.assertNotNull(duration51);
        org.junit.Assert.assertNotNull(instant52);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 86400000L + "'", long53 == 86400000L);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 23 + "'", int59 == 23);
    }

    @Test
    public void test07768() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07768");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.UTC;
        java.util.Locale locale4 = java.util.Locale.GERMAN;
        java.lang.String str5 = locale4.getDisplayName();
        java.lang.String str6 = dateTimeZone2.getName(100L, locale4);
        java.lang.String str7 = dateTimeZone2.toString();
        org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime((long) 1970, dateTimeZone2);
        java.lang.String str10 = dateTimeZone2.getShortName((long) 6);
        long long12 = dateTimeZone2.nextTransition(0L);
        boolean boolean14 = dateTimeZone2.isStandardOffset(1645514379577L);
        org.joda.time.MutableDateTime mutableDateTime15 = new org.joda.time.MutableDateTime((long) 86399364, dateTimeZone2);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "de");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "\u5fb7\u6587" + "'", str5, "\u5fb7\u6587");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00" + "'", str6, "+00:00");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "UTC" + "'", str7, "UTC");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "+00:00" + "'", str10, "+00:00");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
    }

    @Test
    public void test07769() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07769");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.Instant instant3 = new org.joda.time.Instant();
        org.joda.time.Instant instant5 = instant3.withMillis(0L);
        org.joda.time.Chronology chronology6 = instant5.getChronology();
        org.joda.time.DurationField durationField7 = chronology6.eras();
        long long11 = chronology6.add(0L, (long) 2022, (int) '4');
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = dateTimeFormatter2.withChronology(chronology6);
        java.lang.Object obj13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(obj13);
        org.joda.time.LocalDateTime localDateTime15 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.withHourOfDay(10);
        org.joda.time.DateTimeField dateTimeField21 = localDateTime19.getField((int) (byte) 0);
        long long23 = dateTimeField21.roundHalfEven((long) 1);
        int int24 = dateTime14.get(dateTimeField21);
        org.joda.time.LocalDateTime localDateTime25 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime27 = localDateTime25.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime27.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime29.withCenturyOfEra((int) 'a');
        java.util.Locale locale33 = java.util.Locale.GERMAN;
        java.lang.String str34 = locale33.getDisplayName();
        java.lang.String str35 = dateTimeField21.getAsText((org.joda.time.ReadablePartial) localDateTime29, 53, locale33);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter36 = dateTimeFormatter2.withLocale(locale33);
        boolean boolean37 = dateTimeFormatter36.isOffsetParsed();
        org.joda.time.format.DateTimeParser dateTimeParser38 = dateTimeFormatter36.getParser();
        java.util.Locale.Builder builder39 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder40 = builder39.clear();
        java.util.Locale locale41 = java.util.Locale.GERMAN;
        java.lang.String str42 = locale41.getDisplayName();
        java.lang.String str43 = locale41.getISO3Language();
        java.util.Locale.Builder builder44 = builder40.setLocale(locale41);
        org.joda.time.Chronology chronology46 = null;
        java.util.Locale locale47 = java.util.Locale.GERMAN;
        java.util.Locale locale48 = java.util.Locale.CANADA;
        java.lang.String str49 = locale47.getDisplayVariant(locale48);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket50 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology46, locale48);
        java.util.Locale locale51 = dateTimeParserBucket50.getLocale();
        java.util.Locale.Builder builder52 = builder44.setLocale(locale51);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter53 = dateTimeFormatter36.withLocale(locale51);
        boolean boolean54 = dateTimeFormatter53.isParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter56 = dateTimeFormatter53.withPivotYear(152);
        int int57 = dateTimeFormatter53.getDefaultYear();
        org.joda.time.format.DateTimeParser dateTimeParser58 = dateTimeFormatter53.getParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter59 = dateTimeFormatter53.withZoneUTC();
        java.lang.Appendable appendable60 = null;
        org.joda.time.LocalDateTime localDateTime61 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime63 = localDateTime61.withHourOfDay(10);
        org.joda.time.LocalDateTime.Property property64 = localDateTime61.hourOfDay();
        org.joda.time.DateTimeField dateTimeField65 = property64.getField();
        java.lang.String str66 = property64.toString();
        org.joda.time.LocalDateTime localDateTime68 = property64.addToCopy(100L);
        org.joda.time.LocalDateTime localDateTime70 = localDateTime68.minusMinutes(46);
        org.joda.time.LocalDateTime localDateTime72 = localDateTime68.withMillisOfDay(20);
        int int73 = localDateTime68.size();
        org.joda.time.LocalDateTime localDateTime75 = localDateTime68.minusDays(36988464);
        org.joda.time.MutableDateTime mutableDateTime77 = new org.joda.time.MutableDateTime((long) (-292275054));
        java.io.IOException iOException79 = new java.io.IOException("");
        java.io.IOException iOException80 = new java.io.IOException((java.lang.Throwable) iOException79);
        boolean boolean81 = mutableDateTime77.equals((java.lang.Object) iOException79);
        org.joda.time.Duration duration84 = new org.joda.time.Duration(0L, 946312L);
        mutableDateTime77.add((org.joda.time.ReadableDuration) duration84, 1424);
        boolean boolean88 = duration84.equals((java.lang.Object) "2022-02-22T07:16:00.803Z");
        org.joda.time.LocalDateTime localDateTime89 = localDateTime75.minus((org.joda.time.ReadableDuration) duration84);
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter59.printTo(appendable60, (org.joda.time.ReadablePartial) localDateTime89);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(instant5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 105144L + "'", long11 == 105144L);
        org.junit.Assert.assertNotNull(dateTimeFormatter12);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2022 + "'", int24 == 2022);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "de");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "\u5fb7\u6587" + "'", str34, "\u5fb7\u6587");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "53" + "'", str35, "53");
        org.junit.Assert.assertNotNull(dateTimeFormatter36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNull(dateTimeParser38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "de");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "\u5fb7\u6587" + "'", str42, "\u5fb7\u6587");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "deu" + "'", str43, "deu");
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "de");
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "en_CA");
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(dateTimeFormatter53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 2000 + "'", int57 == 2000);
        org.junit.Assert.assertNull(dateTimeParser58);
        org.junit.Assert.assertNotNull(dateTimeFormatter59);
        org.junit.Assert.assertNotNull(localDateTime61);
        org.junit.Assert.assertNotNull(localDateTime63);
        org.junit.Assert.assertNotNull(property64);
        org.junit.Assert.assertNotNull(dateTimeField65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "Property[hourOfDay]" + "'", str66, "Property[hourOfDay]");
        org.junit.Assert.assertNotNull(localDateTime68);
        org.junit.Assert.assertNotNull(localDateTime70);
        org.junit.Assert.assertNotNull(localDateTime72);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 4 + "'", int73 == 4);
        org.junit.Assert.assertNotNull(localDateTime75);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(localDateTime89);
    }

    @Test
    public void test07770() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07770");
        org.joda.time.Instant instant2 = new org.joda.time.Instant();
        org.joda.time.Instant instant4 = instant2.withMillis(0L);
        org.joda.time.Duration duration6 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period7 = duration6.toPeriod();
        org.joda.time.Duration duration10 = duration6.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Instant instant11 = instant4.plus((org.joda.time.ReadableDuration) duration10);
        org.joda.time.PeriodType periodType12 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.Period period13 = duration10.toPeriod(periodType12);
        org.joda.time.Duration duration15 = duration10.withMillis(60000L);
        org.joda.time.Period period16 = duration15.toPeriod();
        org.joda.time.MutablePeriod mutablePeriod17 = period16.toMutablePeriod();
        org.joda.time.Period period19 = period16.withSeconds(46);
        org.joda.time.PeriodType periodType20 = period16.getPeriodType();
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property22 = localDate21.monthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = org.joda.time.DateTimeFieldType.minuteOfDay();
        boolean boolean24 = localDate21.isSupported(dateTimeFieldType23);
        org.joda.time.LocalDate.Property property25 = localDate21.dayOfWeek();
        org.joda.time.MutableDateTime mutableDateTime26 = org.joda.time.MutableDateTime.now();
        mutableDateTime26.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime29 = mutableDateTime26.copy();
        org.joda.time.MutableDateTime.Property property30 = mutableDateTime26.weekOfWeekyear();
        org.joda.time.MutableDateTime.Property property31 = mutableDateTime26.dayOfYear();
        org.joda.time.MutableDateTime mutableDateTime32 = org.joda.time.MutableDateTime.now();
        mutableDateTime32.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime35 = mutableDateTime32.copy();
        mutableDateTime32.setDate((long) '#');
        org.joda.time.LocalDate localDate38 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property39 = localDate38.monthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType40 = org.joda.time.DateTimeFieldType.minuteOfDay();
        boolean boolean41 = localDate38.isSupported(dateTimeFieldType40);
        int int42 = localDate38.getDayOfYear();
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateMidnight dateMidnight44 = localDate38.toDateMidnight(dateTimeZone43);
        org.joda.time.DateTime dateTime45 = mutableDateTime32.toDateTime(dateTimeZone43);
        org.joda.time.LocalDate localDate46 = org.joda.time.LocalDate.now(dateTimeZone43);
        org.joda.time.PeriodType periodType49 = null;
        org.joda.time.Period period50 = new org.joda.time.Period((long) 100, 1L, periodType49);
        org.joda.time.PeriodType periodType51 = period50.getPeriodType();
        boolean boolean52 = dateTimeZone43.equals((java.lang.Object) periodType51);
        mutableDateTime26.setZoneRetainFields(dateTimeZone43);
        org.joda.time.LocalDate localDate54 = new org.joda.time.LocalDate(dateTimeZone43);
        org.joda.time.DateTime dateTime55 = localDate21.toDateTimeAtStartOfDay(dateTimeZone43);
        org.joda.time.Chronology chronology56 = localDate21.getChronology();
        org.joda.time.Period period57 = new org.joda.time.Period((long) 121, 2457L, periodType20, chronology56);
        org.joda.time.DateTimeField dateTimeField58 = chronology56.millisOfSecond();
        org.junit.Assert.assertNotNull(instant4);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(instant11);
        org.junit.Assert.assertNotNull(periodType12);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(mutablePeriod17);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(periodType20);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(mutableDateTime26);
        org.junit.Assert.assertNotNull(mutableDateTime29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(mutableDateTime32);
        org.junit.Assert.assertNotNull(mutableDateTime35);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(dateTimeFieldType40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 53 + "'", int42 == 53);
        org.junit.Assert.assertNotNull(dateTimeZone43);
        org.junit.Assert.assertNotNull(dateMidnight44);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(localDate46);
        org.junit.Assert.assertNotNull(periodType51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(chronology56);
        org.junit.Assert.assertNotNull(dateTimeField58);
    }

    @Test
    public void test07771() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07771");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.Instant instant2 = instant0.withMillis(0L);
        org.joda.time.DateTime dateTime3 = instant2.toDateTime();
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardMinutes((long) (byte) -1);
        org.joda.time.Instant instant7 = instant2.withDurationAdded((org.joda.time.ReadableDuration) duration5, 0);
        org.joda.time.Instant instant10 = instant7.withDurationAdded(25L, 26158);
        org.joda.time.MutableDateTime mutableDateTime11 = instant10.toMutableDateTime();
        org.joda.time.MutablePeriod mutablePeriod14 = new org.joda.time.MutablePeriod((long) 5, 953941L);
        org.joda.time.format.PeriodFormatter periodFormatter15 = null;
        java.lang.String str16 = mutablePeriod14.toString(periodFormatter15);
        org.joda.time.MutablePeriod mutablePeriod17 = mutablePeriod14.toMutablePeriod();
        mutablePeriod14.setPeriod(0L);
        mutablePeriod14.addSeconds(2227);
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.PeriodType periodType24 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod25 = new org.joda.time.MutablePeriod(readableInstant22, readableInstant23, periodType24);
        mutablePeriod25.setYears((int) '#');
        mutablePeriod25.setMinutes(3);
        int int30 = mutablePeriod25.getMinutes();
        org.joda.time.ReadableDuration readableDuration31 = null;
        org.joda.time.ReadableInstant readableInstant32 = null;
        org.joda.time.Period period33 = new org.joda.time.Period(readableDuration31, readableInstant32);
        org.joda.time.Period period35 = period33.withDays((int) (byte) 1);
        org.joda.time.Period period37 = period33.minusMillis(1424);
        org.joda.time.Period period39 = period33.withDays(12);
        org.joda.time.ReadableDuration readableDuration40 = null;
        org.joda.time.ReadableInstant readableInstant41 = null;
        org.joda.time.Period period42 = new org.joda.time.Period(readableDuration40, readableInstant41);
        org.joda.time.PeriodType periodType45 = null;
        org.joda.time.Period period46 = new org.joda.time.Period((long) 100, 1L, periodType45);
        org.joda.time.Period period48 = period46.minusSeconds((-1));
        java.lang.String str49 = period46.toString();
        org.joda.time.Period period50 = period46.toPeriod();
        org.joda.time.PeriodType periodType51 = period46.getPeriodType();
        org.joda.time.Period period52 = period42.normalizedStandard(periodType51);
        java.lang.String str53 = periodType51.getName();
        org.joda.time.Instant instant54 = new org.joda.time.Instant();
        org.joda.time.Instant instant56 = instant54.withMillis(0L);
        org.joda.time.DateTime dateTime57 = instant56.toDateTime();
        org.joda.time.DateTime dateTime59 = new org.joda.time.DateTime((long) 1);
        org.joda.time.PeriodType periodType60 = org.joda.time.PeriodType.months();
        org.joda.time.Period period61 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime57, (org.joda.time.ReadableInstant) dateTime59, periodType60);
        org.joda.time.PeriodType periodType64 = null;
        org.joda.time.Period period65 = new org.joda.time.Period((long) 100, 1L, periodType64);
        org.joda.time.Period period67 = period65.minusSeconds((-1));
        java.lang.String str68 = period65.toString();
        org.joda.time.Period period69 = period65.toPeriod();
        org.joda.time.PeriodType periodType70 = period65.getPeriodType();
        org.joda.time.DateTime dateTime71 = dateTime59.plus((org.joda.time.ReadablePeriod) period65);
        org.joda.time.Chronology chronology73 = null;
        org.joda.time.LocalTime localTime74 = new org.joda.time.LocalTime((long) (short) 100, chronology73);
        org.joda.time.DurationFieldType durationFieldType75 = org.joda.time.DurationFieldType.millis();
        java.lang.String str76 = durationFieldType75.getName();
        boolean boolean77 = localTime74.isSupported(durationFieldType75);
        int int78 = period65.get(durationFieldType75);
        boolean boolean79 = periodType51.isSupported(durationFieldType75);
        boolean boolean80 = period33.isSupported(durationFieldType75);
        int int81 = mutablePeriod25.get(durationFieldType75);
        mutablePeriod14.add(durationFieldType75, 489);
        java.lang.String str84 = durationFieldType75.getName();
        mutableDateTime11.add(durationFieldType75, 0);
        org.junit.Assert.assertNotNull(instant2);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(instant7);
        org.junit.Assert.assertNotNull(instant10);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "PT15M53.936S" + "'", str16, "PT15M53.936S");
        org.junit.Assert.assertNotNull(mutablePeriod17);
        org.junit.Assert.assertNotNull(periodType24);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 3 + "'", int30 == 3);
        org.junit.Assert.assertNotNull(period35);
        org.junit.Assert.assertNotNull(period37);
        org.junit.Assert.assertNotNull(period39);
        org.junit.Assert.assertNotNull(period48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "PT0.099S" + "'", str49, "PT0.099S");
        org.junit.Assert.assertNotNull(period50);
        org.junit.Assert.assertNotNull(periodType51);
        org.junit.Assert.assertNotNull(period52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "Standard" + "'", str53, "Standard");
        org.junit.Assert.assertNotNull(instant56);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(periodType60);
        org.junit.Assert.assertNotNull(period67);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "PT0.099S" + "'", str68, "PT0.099S");
        org.junit.Assert.assertNotNull(period69);
        org.junit.Assert.assertNotNull(periodType70);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertNotNull(durationFieldType75);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "millis" + "'", str76, "millis");
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + (-99) + "'", int78 == (-99));
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "millis" + "'", str84, "millis");
    }

    @Test
    public void test07772() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07772");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.UTC;
        java.util.TimeZone timeZone3 = dateTimeZone2.toTimeZone();
        org.joda.time.DateTime dateTime4 = localDate0.toDateTimeAtCurrentTime(dateTimeZone2);
        org.joda.time.MutableDateTime mutableDateTime5 = org.joda.time.MutableDateTime.now(dateTimeZone2);
        int int6 = mutableDateTime5.getDayOfMonth();
        int int7 = mutableDateTime5.getMonthOfYear();
        org.joda.time.MutableDateTime.Property property8 = mutableDateTime5.monthOfYear();
        mutableDateTime5.setWeekyear(786);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(timeZone3);
// flaky:         org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "\u534f\u8c03\u4e16\u754c\u65f6\u95f4");
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(mutableDateTime5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 22 + "'", int6 == 22);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2 + "'", int7 == 2);
        org.junit.Assert.assertNotNull(property8);
    }

    @Test
    public void test07773() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07773");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime3 = mutableDateTime0.copy();
        org.joda.time.MutableDateTime.Property property4 = mutableDateTime0.weekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime5 = property4.roundHalfFloor();
        org.joda.time.MutableDateTime mutableDateTime7 = property4.add((long) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.UTC;
        java.util.TimeZone timeZone9 = dateTimeZone8.toTimeZone();
        org.joda.time.MutableDateTime mutableDateTime10 = mutableDateTime7.toMutableDateTime(dateTimeZone8);
        mutableDateTime10.add(51L);
        org.joda.time.MutableDateTime.Property property13 = mutableDateTime10.dayOfWeek();
        mutableDateTime10.setSecondOfDay(20);
        org.joda.time.MutableDateTime.Property property16 = mutableDateTime10.millisOfSecond();
        mutableDateTime10.addMinutes(579);
        mutableDateTime10.addMonths(671);
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(mutableDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(mutableDateTime5);
        org.junit.Assert.assertNotNull(mutableDateTime7);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(timeZone9);
// flaky:         org.junit.Assert.assertEquals(timeZone9.getDisplayName(), "\u534f\u8c03\u4e16\u754c\u65f6\u95f4");
        org.junit.Assert.assertNotNull(mutableDateTime10);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(property16);
    }

    @Test
    public void test07774() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07774");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.Instant instant3 = new org.joda.time.Instant();
        org.joda.time.Instant instant5 = instant3.withMillis(0L);
        org.joda.time.Chronology chronology6 = instant5.getChronology();
        org.joda.time.DurationField durationField7 = chronology6.eras();
        long long11 = chronology6.add(0L, (long) 2022, (int) '4');
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = dateTimeFormatter2.withChronology(chronology6);
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime(chronology6);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.minusYears(26148950);
        org.joda.time.LocalDateTime.Property property16 = localDateTime13.minuteOfHour();
        org.joda.time.PeriodType periodType19 = null;
        org.joda.time.Period period20 = new org.joda.time.Period((long) 100, 1L, periodType19);
        org.joda.time.Period period22 = period20.minusSeconds((-1));
        org.joda.time.Period period24 = period22.multipliedBy((int) '#');
        org.joda.time.Minutes minutes25 = period24.toStandardMinutes();
        int int26 = period24.getYears();
        org.joda.time.LocalDateTime localDateTime27 = localDateTime13.minus((org.joda.time.ReadablePeriod) period24);
        org.joda.time.LocalDateTime.Property property28 = localDateTime13.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime30 = localDateTime13.plusSeconds(62254);
        org.joda.time.LocalDateTime.Property property31 = localDateTime13.dayOfWeek();
        org.joda.time.MutableDateTime mutableDateTime32 = org.joda.time.MutableDateTime.now();
        mutableDateTime32.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime35 = mutableDateTime32.copy();
        org.joda.time.MutableDateTime.Property property36 = mutableDateTime32.weekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime37 = property36.roundHalfFloor();
        org.joda.time.MutableDateTime mutableDateTime39 = property36.add((long) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.UTC;
        java.util.TimeZone timeZone41 = dateTimeZone40.toTimeZone();
        org.joda.time.MutableDateTime mutableDateTime42 = mutableDateTime39.toMutableDateTime(dateTimeZone40);
        mutableDateTime42.add(51L);
        int int45 = mutableDateTime42.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime46 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime48 = localDateTime46.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime50 = localDateTime48.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime52 = localDateTime50.plusYears((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime54 = localDateTime52.minusSeconds((int) (byte) 10);
        java.lang.Object obj55 = null;
        org.joda.time.DateTime dateTime56 = new org.joda.time.DateTime(obj55);
        org.joda.time.Duration duration58 = org.joda.time.Duration.standardSeconds((long) 45);
        org.joda.time.Period period59 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime56, (org.joda.time.ReadableDuration) duration58);
        org.joda.time.LocalDateTime localDateTime60 = localDateTime52.minus((org.joda.time.ReadableDuration) duration58);
        java.util.TimeZone timeZone62 = java.util.TimeZone.getTimeZone("2022-02-22T10:15:47.721");
        boolean boolean63 = duration58.equals((java.lang.Object) "2022-02-22T10:15:47.721");
        org.joda.time.Duration duration65 = duration58.withMillis(27418772L);
        org.joda.time.Duration duration67 = duration58.plus(963012L);
        mutableDateTime42.add((org.joda.time.ReadableDuration) duration58);
        org.joda.time.Period period70 = org.joda.time.Period.days(62176);
        org.joda.time.LocalDateTime localDateTime71 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime73 = localDateTime71.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime75 = localDateTime73.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime77 = localDateTime75.withCenturyOfEra((int) 'a');
        org.joda.time.Chronology chronology78 = null;
        org.joda.time.DateTime dateTime79 = new org.joda.time.DateTime(chronology78);
        org.joda.time.DateTime dateTime81 = dateTime79.plusMinutes(15);
        org.joda.time.DateTime dateTime82 = localDateTime75.toDateTime((org.joda.time.ReadableInstant) dateTime79);
        org.joda.time.DateTimeZone dateTimeZone83 = org.joda.time.DateTimeZone.UTC;
        java.util.TimeZone timeZone84 = dateTimeZone83.toTimeZone();
        org.joda.time.DateTime dateTime85 = dateTime82.withZone(dateTimeZone83);
        org.joda.time.PeriodType periodType87 = org.joda.time.PeriodType.yearDay();
        java.lang.String str88 = periodType87.getName();
        org.joda.time.MutablePeriod mutablePeriod89 = new org.joda.time.MutablePeriod(100L, periodType87);
        org.joda.time.DateTime dateTime90 = dateTime85.plus((org.joda.time.ReadablePeriod) mutablePeriod89);
        org.joda.time.Duration duration91 = period70.toDurationTo((org.joda.time.ReadableInstant) dateTime90);
        int int92 = duration58.compareTo((org.joda.time.ReadableDuration) duration91);
        org.joda.time.LocalDateTime localDateTime94 = localDateTime13.withDurationAdded((org.joda.time.ReadableDuration) duration91, 640);
        int int95 = localDateTime13.getYear();
        int int96 = localDateTime13.getMonthOfYear();
        org.junit.Assert.assertNotNull(instant5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 105144L + "'", long11 == 105144L);
        org.junit.Assert.assertNotNull(dateTimeFormatter12);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertNotNull(minutes25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(mutableDateTime32);
        org.junit.Assert.assertNotNull(mutableDateTime35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(mutableDateTime37);
        org.junit.Assert.assertNotNull(mutableDateTime39);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertNotNull(timeZone41);
// flaky:         org.junit.Assert.assertEquals(timeZone41.getDisplayName(), "\u534f\u8c03\u4e16\u754c\u65f6\u95f4");
        org.junit.Assert.assertNotNull(mutableDateTime42);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertNotNull(duration58);
        org.junit.Assert.assertNotNull(localDateTime60);
        org.junit.Assert.assertNotNull(timeZone62);
// flaky:         org.junit.Assert.assertEquals(timeZone62.getDisplayName(), "\u683c\u6797\u5a01\u6cbb\u65f6\u95f4");
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(duration65);
        org.junit.Assert.assertNotNull(duration67);
        org.junit.Assert.assertNotNull(period70);
        org.junit.Assert.assertNotNull(localDateTime71);
        org.junit.Assert.assertNotNull(localDateTime73);
        org.junit.Assert.assertNotNull(localDateTime75);
        org.junit.Assert.assertNotNull(localDateTime77);
        org.junit.Assert.assertNotNull(dateTime81);
        org.junit.Assert.assertNotNull(dateTime82);
        org.junit.Assert.assertNotNull(dateTimeZone83);
        org.junit.Assert.assertNotNull(timeZone84);
// flaky:         org.junit.Assert.assertEquals(timeZone84.getDisplayName(), "\u534f\u8c03\u4e16\u754c\u65f6\u95f4");
        org.junit.Assert.assertNotNull(dateTime85);
        org.junit.Assert.assertNotNull(periodType87);
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "YearDay" + "'", str88, "YearDay");
        org.junit.Assert.assertNotNull(dateTime90);
        org.junit.Assert.assertNotNull(duration91);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + (-1) + "'", int92 == (-1));
        org.junit.Assert.assertNotNull(localDateTime94);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 2022 + "'", int95 == 2022);
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + 2 + "'", int96 == 2);
    }

    @Test
    public void test07775() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07775");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime3 = mutableDateTime0.copy();
        org.joda.time.MutableDateTime.Property property4 = mutableDateTime0.weekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime5 = property4.roundHalfFloor();
        org.joda.time.MutableDateTime mutableDateTime6 = property4.roundHalfCeiling();
        org.joda.time.MutableDateTime mutableDateTime8 = property4.set(1);
        org.joda.time.MutableDateTime mutableDateTime9 = org.joda.time.MutableDateTime.now();
        mutableDateTime9.add((long) 'a');
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime9.yearOfCentury();
        org.joda.time.Duration duration14 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period15 = duration14.toPeriod();
        org.joda.time.Duration duration17 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration20 = duration17.withDurationAdded((long) (short) 100, (int) ' ');
        org.joda.time.Duration duration21 = duration14.minus((org.joda.time.ReadableDuration) duration20);
        mutableDateTime9.add((org.joda.time.ReadableDuration) duration14);
        org.joda.time.MutableDateTime.Property property23 = mutableDateTime9.centuryOfEra();
        mutableDateTime9.addYears(0);
        mutableDateTime9.setMinuteOfDay((int) (short) 0);
        org.joda.time.Instant instant28 = new org.joda.time.Instant();
        org.joda.time.Instant instant30 = instant28.withMillis(0L);
        org.joda.time.Duration duration32 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period33 = duration32.toPeriod();
        org.joda.time.Duration duration36 = duration32.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Instant instant37 = instant30.plus((org.joda.time.ReadableDuration) duration36);
        long long38 = instant37.getMillis();
        org.joda.time.Duration duration39 = new org.joda.time.Duration((org.joda.time.ReadableInstant) mutableDateTime9, (org.joda.time.ReadableInstant) instant37);
        mutableDateTime8.add((org.joda.time.ReadableDuration) duration39, 999);
        long long42 = duration39.getStandardMinutes();
        org.joda.time.Period period43 = duration39.toPeriod();
        long long44 = duration39.getMillis();
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(mutableDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(mutableDateTime5);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(mutableDateTime8);
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(instant30);
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertNotNull(instant37);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 86400000L + "'", long38 == 86400000L);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + (-27424800L) + "'", long42 == (-27424800L));
        org.junit.Assert.assertNotNull(period43);
// flaky:         org.junit.Assert.assertTrue("'" + long44 + "' != '" + (-1645488054875L) + "'", long44 == (-1645488054875L));
    }

    @Test
    public void test07776() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07776");
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.ReadableInstant readableInstant11 = null;
        org.joda.time.Period period12 = new org.joda.time.Period(readableDuration10, readableInstant11);
        org.joda.time.PeriodType periodType15 = null;
        org.joda.time.Period period16 = new org.joda.time.Period((long) 100, 1L, periodType15);
        org.joda.time.Period period18 = period16.minusSeconds((-1));
        java.lang.String str19 = period16.toString();
        org.joda.time.Period period20 = period16.toPeriod();
        org.joda.time.PeriodType periodType21 = period16.getPeriodType();
        org.joda.time.Period period22 = period12.normalizedStandard(periodType21);
        java.lang.String str23 = periodType21.getName();
        java.lang.String str24 = periodType21.toString();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime(chronology26);
        org.joda.time.DateTime dateTime29 = dateTime27.plusMinutes(15);
        org.joda.time.Chronology chronology30 = dateTime27.getChronology();
        java.lang.String str31 = chronology30.toString();
        org.joda.time.DateTimeFieldType dateTimeFieldType32 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.ReadableInstant readableInstant35 = null;
        org.joda.time.ReadableInstant readableInstant36 = null;
        org.joda.time.PeriodType periodType37 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod38 = new org.joda.time.MutablePeriod(readableInstant35, readableInstant36, periodType37);
        org.joda.time.DurationFieldType durationFieldType40 = periodType37.getFieldType((int) (short) 0);
        java.lang.String str41 = periodType37.toString();
        org.joda.time.Instant instant42 = new org.joda.time.Instant();
        org.joda.time.Instant instant44 = instant42.withMillis(0L);
        org.joda.time.Chronology chronology45 = instant44.getChronology();
        org.joda.time.Period period46 = new org.joda.time.Period((long) 53, (long) (-1), periodType37, chronology45);
        org.joda.time.DateTimeField dateTimeField47 = dateTimeFieldType32.getField(chronology45);
        java.util.Locale locale48 = java.util.Locale.UK;
        java.lang.String str49 = locale48.getDisplayLanguage();
        int int50 = dateTimeField47.getMaximumTextLength(locale48);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket51 = new org.joda.time.format.DateTimeParserBucket(3155695200000L, chronology30, locale48);
        org.joda.time.LocalDate localDate52 = new org.joda.time.LocalDate(chronology30);
        org.joda.time.MutablePeriod mutablePeriod53 = new org.joda.time.MutablePeriod((long) 52, 946312L, periodType21, chronology30);
        org.joda.time.MutablePeriod mutablePeriod54 = new org.joda.time.MutablePeriod(57, (int) '4', (-99), (int) ' ', 57, 44, (int) (short) 0, (int) (short) -1, periodType21);
        org.joda.time.MutableDateTime mutableDateTime55 = org.joda.time.MutableDateTime.now();
        mutableDateTime55.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime58 = mutableDateTime55.copy();
        org.joda.time.MutableDateTime.Property property59 = mutableDateTime55.yearOfEra();
        org.joda.time.MutableDateTime mutableDateTime60 = property59.getMutableDateTime();
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.DateTime dateTime62 = new org.joda.time.DateTime(chronology61);
        org.joda.time.DateTime dateTime64 = dateTime62.plusMinutes(15);
        mutablePeriod54.setPeriod((org.joda.time.ReadableInstant) mutableDateTime60, (org.joda.time.ReadableInstant) dateTime62);
        mutablePeriod54.add(69, 10, 335, 26177, 0, 26148, 26172069, 15);
        int int75 = mutablePeriod54.getDays();
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "PT0.099S" + "'", str19, "PT0.099S");
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(periodType21);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Standard" + "'", str23, "Standard");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "PeriodType[Standard]" + "'", str24, "PeriodType[Standard]");
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "ISOChronology[UTC]" + "'", str31, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeFieldType32);
        org.junit.Assert.assertNotNull(periodType37);
        org.junit.Assert.assertNotNull(durationFieldType40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "PeriodType[YearDayTime]" + "'", str41, "PeriodType[YearDayTime]");
        org.junit.Assert.assertNotNull(instant44);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "\u82f1\u6587" + "'", str49, "\u82f1\u6587");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 4 + "'", int50 == 4);
        org.junit.Assert.assertNotNull(mutableDateTime55);
        org.junit.Assert.assertNotNull(mutableDateTime58);
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertNotNull(mutableDateTime60);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 26177 + "'", int75 == 26177);
    }

    @Test
    public void test07777() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07777");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = java.util.Locale.GERMAN;
        java.util.Locale locale3 = java.util.Locale.CANADA;
        java.lang.String str4 = locale2.getDisplayVariant(locale3);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology1, locale3);
        java.lang.Object obj6 = dateTimeParserBucket5.saveState();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.LocalTime localTime9 = new org.joda.time.LocalTime((long) (short) 100, chronology8);
        org.joda.time.DurationFieldType durationFieldType10 = org.joda.time.DurationFieldType.weeks();
        java.lang.String str11 = durationFieldType10.getName();
        boolean boolean12 = localTime9.isSupported(durationFieldType10);
        boolean boolean13 = dateTimeParserBucket5.restoreState((java.lang.Object) boolean12);
        org.joda.time.Chronology chronology14 = dateTimeParserBucket5.getChronology();
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime(chronology14);
        org.joda.time.DateTimeField dateTimeField16 = chronology14.millisOfSecond();
        org.joda.time.LocalTime localTime18 = org.joda.time.LocalTime.fromMillisOfDay(964100L);
        java.util.Locale locale21 = new java.util.Locale("1970", "millis");
        java.lang.String str22 = locale21.getDisplayName();
        java.lang.String str23 = dateTimeField16.getAsShortText((org.joda.time.ReadablePartial) localTime18, locale21);
        org.joda.time.LocalTime localTime25 = localTime18.plusMinutes(62194);
        org.joda.time.Duration duration27 = org.joda.time.Duration.standardDays((long) (byte) 1);
        java.lang.String str28 = duration27.toString();
        org.joda.time.Duration duration30 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Hours hours31 = duration30.toStandardHours();
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime(chronology32);
        int int34 = dateTime33.getSecondOfMinute();
        org.joda.time.MutablePeriod mutablePeriod35 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration30, (org.joda.time.ReadableInstant) dateTime33);
        org.joda.time.Duration duration36 = duration27.plus((org.joda.time.ReadableDuration) duration30);
        org.joda.time.Duration duration38 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period39 = duration38.toPeriod();
        org.joda.time.Duration duration41 = duration38.minus((long) 292278993);
        org.joda.time.MutableDateTime mutableDateTime42 = org.joda.time.MutableDateTime.now();
        mutableDateTime42.add((long) 'a');
        org.joda.time.MutableDateTime.Property property45 = mutableDateTime42.yearOfCentury();
        org.joda.time.Duration duration47 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period48 = duration47.toPeriod();
        org.joda.time.Duration duration50 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration53 = duration50.withDurationAdded((long) (short) 100, (int) ' ');
        org.joda.time.Duration duration54 = duration47.minus((org.joda.time.ReadableDuration) duration53);
        mutableDateTime42.add((org.joda.time.ReadableDuration) duration47);
        boolean boolean56 = duration41.isShorterThan((org.joda.time.ReadableDuration) duration47);
        boolean boolean57 = duration30.isLongerThan((org.joda.time.ReadableDuration) duration41);
        org.joda.time.DateTime dateTime59 = new org.joda.time.DateTime((long) 1);
        org.joda.time.Duration duration61 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period62 = duration61.toPeriod();
        org.joda.time.Duration duration65 = duration61.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Period period66 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime59, (org.joda.time.ReadableDuration) duration65);
        org.joda.time.Duration duration67 = duration41.plus((org.joda.time.ReadableDuration) duration65);
        org.joda.time.Chronology chronology68 = null;
        org.joda.time.DateTime dateTime69 = new org.joda.time.DateTime(chronology68);
        int int70 = dateTime69.getYearOfCentury();
        int int71 = dateTime69.getWeekyear();
        org.joda.time.DateTime dateTime73 = dateTime69.plus((long) 15);
        org.joda.time.DateTime.Property property74 = dateTime69.year();
        org.joda.time.DateTime dateTime75 = property74.roundHalfFloorCopy();
        org.joda.time.ReadableDuration readableDuration76 = null;
        org.joda.time.ReadableInstant readableInstant77 = null;
        org.joda.time.Period period78 = new org.joda.time.Period(readableDuration76, readableInstant77);
        org.joda.time.PeriodType periodType81 = null;
        org.joda.time.Period period82 = new org.joda.time.Period((long) 100, 1L, periodType81);
        org.joda.time.Period period84 = period82.minusSeconds((-1));
        java.lang.String str85 = period82.toString();
        org.joda.time.Period period86 = period82.toPeriod();
        org.joda.time.PeriodType periodType87 = period82.getPeriodType();
        org.joda.time.Period period88 = period78.normalizedStandard(periodType87);
        java.lang.String str89 = periodType87.getName();
        org.joda.time.PeriodType periodType90 = periodType87.withYearsRemoved();
        org.joda.time.Period period91 = duration65.toPeriodTo((org.joda.time.ReadableInstant) dateTime75, periodType90);
        org.joda.time.MutablePeriod mutablePeriod92 = new org.joda.time.MutablePeriod(periodType90);
        org.joda.time.LocalTime localTime93 = localTime18.plus((org.joda.time.ReadablePeriod) mutablePeriod92);
        org.joda.time.LocalTime localTime95 = localTime18.minusHours(37115682);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "de");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertNotNull(durationFieldType10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "weeks" + "'", str11, "weeks");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(localTime18);
        org.junit.Assert.assertEquals(locale21.toString(), "1970_MILLIS");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "1970 (MILLIS)" + "'", str22, "1970 (MILLIS)");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "100" + "'", str23, "100");
        org.junit.Assert.assertNotNull(localTime25);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "PT86400S" + "'", str28, "PT86400S");
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertNotNull(hours31);
// flaky:         org.junit.Assert.assertTrue("'" + int34 + "' != '" + 54 + "'", int34 == 54);
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertNotNull(period39);
        org.junit.Assert.assertNotNull(duration41);
        org.junit.Assert.assertNotNull(mutableDateTime42);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertNotNull(period48);
        org.junit.Assert.assertNotNull(duration50);
        org.junit.Assert.assertNotNull(duration53);
        org.junit.Assert.assertNotNull(duration54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(duration61);
        org.junit.Assert.assertNotNull(period62);
        org.junit.Assert.assertNotNull(duration65);
        org.junit.Assert.assertNotNull(duration67);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 22 + "'", int70 == 22);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 2022 + "'", int71 == 2022);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertNotNull(property74);
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertNotNull(period84);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "PT0.099S" + "'", str85, "PT0.099S");
        org.junit.Assert.assertNotNull(period86);
        org.junit.Assert.assertNotNull(periodType87);
        org.junit.Assert.assertNotNull(period88);
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "Standard" + "'", str89, "Standard");
        org.junit.Assert.assertNotNull(periodType90);
        org.junit.Assert.assertNotNull(period91);
        org.junit.Assert.assertNotNull(localTime93);
        org.junit.Assert.assertNotNull(localTime95);
    }

    @Test
    public void test07778() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07778");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardDays((long) (byte) 1);
        java.lang.String str2 = duration1.toString();
        org.joda.time.Duration duration4 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Hours hours5 = duration4.toStandardHours();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime(chronology6);
        int int8 = dateTime7.getSecondOfMinute();
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration4, (org.joda.time.ReadableInstant) dateTime7);
        org.joda.time.Duration duration10 = duration1.plus((org.joda.time.ReadableDuration) duration4);
        org.joda.time.Duration duration12 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period13 = duration12.toPeriod();
        org.joda.time.Duration duration15 = duration12.minus((long) 292278993);
        org.joda.time.MutableDateTime mutableDateTime16 = org.joda.time.MutableDateTime.now();
        mutableDateTime16.add((long) 'a');
        org.joda.time.MutableDateTime.Property property19 = mutableDateTime16.yearOfCentury();
        org.joda.time.Duration duration21 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period22 = duration21.toPeriod();
        org.joda.time.Duration duration24 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration27 = duration24.withDurationAdded((long) (short) 100, (int) ' ');
        org.joda.time.Duration duration28 = duration21.minus((org.joda.time.ReadableDuration) duration27);
        mutableDateTime16.add((org.joda.time.ReadableDuration) duration21);
        boolean boolean30 = duration15.isShorterThan((org.joda.time.ReadableDuration) duration21);
        boolean boolean31 = duration4.isLongerThan((org.joda.time.ReadableDuration) duration15);
        org.joda.time.Duration duration32 = duration4.toDuration();
        org.joda.time.PeriodType periodType36 = org.joda.time.PeriodType.yearDay();
        java.lang.String str37 = periodType36.getName();
        org.joda.time.MutablePeriod mutablePeriod38 = new org.joda.time.MutablePeriod(100L, periodType36);
        org.joda.time.Duration duration40 = org.joda.time.Duration.standardDays((long) (byte) 1);
        java.lang.String str41 = duration40.toString();
        org.joda.time.Duration duration43 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Hours hours44 = duration43.toStandardHours();
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime(chronology45);
        int int47 = dateTime46.getSecondOfMinute();
        org.joda.time.MutablePeriod mutablePeriod48 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration43, (org.joda.time.ReadableInstant) dateTime46);
        org.joda.time.Duration duration49 = duration40.plus((org.joda.time.ReadableDuration) duration43);
        org.joda.time.ReadableInstant readableInstant54 = null;
        org.joda.time.ReadableInstant readableInstant55 = null;
        org.joda.time.PeriodType periodType56 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod57 = new org.joda.time.MutablePeriod(readableInstant54, readableInstant55, periodType56);
        org.joda.time.DurationFieldType durationFieldType59 = periodType56.getFieldType((int) (short) 0);
        java.lang.String str60 = periodType56.toString();
        org.joda.time.Instant instant61 = new org.joda.time.Instant();
        org.joda.time.Instant instant63 = instant61.withMillis(0L);
        org.joda.time.Chronology chronology64 = instant63.getChronology();
        org.joda.time.Period period65 = new org.joda.time.Period((long) 53, (long) (-1), periodType56, chronology64);
        org.joda.time.Period period66 = new org.joda.time.Period((long) (short) -1, (long) 26148950, periodType56);
        org.joda.time.Instant instant67 = new org.joda.time.Instant();
        org.joda.time.Instant instant69 = instant67.withMillis(0L);
        org.joda.time.Chronology chronology70 = instant69.getChronology();
        org.joda.time.DurationField durationField71 = chronology70.eras();
        org.joda.time.LocalTime localTime72 = org.joda.time.LocalTime.now(chronology70);
        org.joda.time.DurationField durationField73 = chronology70.eras();
        org.joda.time.LocalTime localTime74 = org.joda.time.LocalTime.now(chronology70);
        org.joda.time.Period period75 = duration40.toPeriod(periodType56, chronology70);
        org.joda.time.Period period76 = new org.joda.time.Period(1671667200000L, 946312L, periodType36, chronology70);
        org.joda.time.PeriodType periodType77 = periodType36.withMinutesRemoved();
        org.joda.time.Chronology chronology78 = null;
        org.joda.time.LocalTime localTime79 = new org.joda.time.LocalTime(chronology78);
        org.joda.time.LocalTime localTime81 = localTime79.plusMinutes(26);
        org.joda.time.Chronology chronology82 = localTime81.getChronology();
        org.joda.time.DateTimeField dateTimeField83 = chronology82.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField84 = chronology82.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField85 = chronology82.yearOfCentury();
        org.joda.time.Period period86 = duration32.toPeriod(periodType36, chronology82);
        int int87 = period86.getDays();
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "PT86400S" + "'", str2, "PT86400S");
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertNotNull(hours5);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 54 + "'", int8 == 54);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(mutableDateTime16);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertNotNull(periodType36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "YearDay" + "'", str37, "YearDay");
        org.junit.Assert.assertNotNull(duration40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "PT86400S" + "'", str41, "PT86400S");
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertNotNull(hours44);
// flaky:         org.junit.Assert.assertTrue("'" + int47 + "' != '" + 54 + "'", int47 == 54);
        org.junit.Assert.assertNotNull(duration49);
        org.junit.Assert.assertNotNull(periodType56);
        org.junit.Assert.assertNotNull(durationFieldType59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "PeriodType[YearDayTime]" + "'", str60, "PeriodType[YearDayTime]");
        org.junit.Assert.assertNotNull(instant63);
        org.junit.Assert.assertNotNull(chronology64);
        org.junit.Assert.assertNotNull(instant69);
        org.junit.Assert.assertNotNull(chronology70);
        org.junit.Assert.assertNotNull(durationField71);
        org.junit.Assert.assertNotNull(localTime72);
        org.junit.Assert.assertNotNull(durationField73);
        org.junit.Assert.assertNotNull(localTime74);
        org.junit.Assert.assertNotNull(period75);
        org.junit.Assert.assertNotNull(periodType77);
        org.junit.Assert.assertNotNull(localTime81);
        org.junit.Assert.assertNotNull(chronology82);
        org.junit.Assert.assertNotNull(dateTimeField83);
        org.junit.Assert.assertNotNull(dateTimeField84);
        org.junit.Assert.assertNotNull(dateTimeField85);
        org.junit.Assert.assertNotNull(period86);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 0 + "'", int87 == 0);
    }

    @Test
    public void test07779() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07779");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.add((long) 'a');
        org.joda.time.Duration duration4 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration6 = org.joda.time.Duration.standardDays((long) (byte) 1);
        java.lang.String str7 = duration6.toString();
        boolean boolean8 = duration4.isShorterThan((org.joda.time.ReadableDuration) duration6);
        org.joda.time.Hours hours9 = duration4.toStandardHours();
        mutableDateTime0.add((org.joda.time.ReadableDuration) duration4, 20);
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime0.millisOfDay();
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property14 = localDate13.dayOfYear();
        org.joda.time.PeriodType periodType17 = null;
        org.joda.time.Period period18 = new org.joda.time.Period((long) 100, 1L, periodType17);
        org.joda.time.Period period20 = period18.minusSeconds((-1));
        java.lang.String str21 = period18.toString();
        org.joda.time.LocalDate localDate23 = localDate13.withPeriodAdded((org.joda.time.ReadablePeriod) period18, 3);
        org.joda.time.DateTime dateTime24 = localDate23.toDateTimeAtCurrentTime();
        org.joda.time.Period period25 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime0, (org.joda.time.ReadableInstant) dateTime24);
        java.util.GregorianCalendar gregorianCalendar26 = mutableDateTime0.toGregorianCalendar();
        mutableDateTime0.addDays(0);
        int int29 = mutableDateTime0.getWeekyear();
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "PT86400S" + "'", str7, "PT86400S");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(hours9);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "PT0.099S" + "'", str21, "PT0.099S");
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(gregorianCalendar26);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2022 + "'", int29 == 2022);
    }

    @Test
    public void test07780() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07780");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withHourOfDay(10);
        org.joda.time.LocalDateTime.Property property3 = localDateTime0.hourOfDay();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime0.plusMillis((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property6 = localDateTime0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime0.withMillisOfSecond((int) (byte) 1);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime((long) (byte) -1, chronology10);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.plusMonths(8);
        int int14 = localDateTime0.compareTo((org.joda.time.ReadablePartial) localDateTime11);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime11.withYear(86399999);
        org.joda.time.Duration duration18 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period19 = duration18.toPeriod();
        org.joda.time.Duration duration21 = duration18.minus((long) 292278993);
        org.joda.time.Duration duration23 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Hours hours24 = duration23.toStandardHours();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime(chronology25);
        int int27 = dateTime26.getSecondOfMinute();
        org.joda.time.MutablePeriod mutablePeriod28 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration23, (org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.Duration duration29 = duration21.plus((org.joda.time.ReadableDuration) duration23);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime11.withDurationAdded((org.joda.time.ReadableDuration) duration23, 122);
        org.joda.time.Duration duration33 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period34 = duration33.toPeriod();
        org.joda.time.Duration duration37 = duration33.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime(chronology38);
        org.joda.time.DateTime dateTime41 = dateTime39.plusMinutes(15);
        org.joda.time.Interval interval42 = duration37.toIntervalTo((org.joda.time.ReadableInstant) dateTime41);
        org.joda.time.DateTime dateTime43 = dateTime41.withLaterOffsetAtOverlap();
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.DateTime dateTime45 = new org.joda.time.DateTime(chronology44);
        org.joda.time.DateTime dateTime47 = dateTime45.plusMinutes(15);
        org.joda.time.Chronology chronology48 = dateTime45.getChronology();
        org.joda.time.DateTime dateTime50 = dateTime45.plusHours(19045);
        org.joda.time.DateTime dateTime51 = dateTime45.toDateTimeISO();
        org.joda.time.Duration duration53 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period54 = duration53.toPeriod();
        org.joda.time.Duration duration56 = duration53.minus((long) 292278993);
        org.joda.time.MutableDateTime mutableDateTime57 = org.joda.time.MutableDateTime.now();
        mutableDateTime57.add((long) 'a');
        org.joda.time.MutableDateTime.Property property60 = mutableDateTime57.yearOfCentury();
        org.joda.time.Duration duration62 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period63 = duration62.toPeriod();
        org.joda.time.Duration duration65 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration68 = duration65.withDurationAdded((long) (short) 100, (int) ' ');
        org.joda.time.Duration duration69 = duration62.minus((org.joda.time.ReadableDuration) duration68);
        mutableDateTime57.add((org.joda.time.ReadableDuration) duration62);
        boolean boolean71 = duration56.isShorterThan((org.joda.time.ReadableDuration) duration62);
        org.joda.time.Duration duration73 = duration62.minus((long) (byte) 0);
        org.joda.time.DateTime dateTime74 = dateTime45.minus((org.joda.time.ReadableDuration) duration62);
        org.joda.time.DateTime dateTime76 = dateTime43.withDurationAdded((org.joda.time.ReadableDuration) duration62, 29);
        org.joda.time.DateTime dateTime78 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTimeZone dateTimeZone79 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime80 = dateTime78.withZoneRetainFields(dateTimeZone79);
        boolean boolean82 = dateTime80.equals((java.lang.Object) (-1L));
        org.joda.time.Chronology chronology83 = dateTime80.getChronology();
        org.joda.time.Instant instant84 = new org.joda.time.Instant();
        org.joda.time.Instant instant86 = instant84.withMillis(0L);
        org.joda.time.DateTime dateTime87 = instant86.toDateTime();
        org.joda.time.DateTime dateTime89 = new org.joda.time.DateTime((long) 1);
        org.joda.time.PeriodType periodType90 = org.joda.time.PeriodType.months();
        org.joda.time.Period period91 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime87, (org.joda.time.ReadableInstant) dateTime89, periodType90);
        org.joda.time.DateTime.Property property92 = dateTime89.minuteOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType93 = property92.getFieldType();
        org.joda.time.DateTime.Property property94 = dateTime80.property(dateTimeFieldType93);
        boolean boolean95 = dateTime43.isSupported(dateTimeFieldType93);
        int int96 = localDateTime31.get(dateTimeFieldType93);
        int int97 = localDateTime31.getHourOfDay();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(hours24);
// flaky:         org.junit.Assert.assertTrue("'" + int27 + "' != '" + 54 + "'", int27 == 54);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertNotNull(period34);
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(interval42);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(duration53);
        org.junit.Assert.assertNotNull(period54);
        org.junit.Assert.assertNotNull(duration56);
        org.junit.Assert.assertNotNull(mutableDateTime57);
        org.junit.Assert.assertNotNull(property60);
        org.junit.Assert.assertNotNull(duration62);
        org.junit.Assert.assertNotNull(period63);
        org.junit.Assert.assertNotNull(duration65);
        org.junit.Assert.assertNotNull(duration68);
        org.junit.Assert.assertNotNull(duration69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(duration73);
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertNotNull(dateTimeZone79);
        org.junit.Assert.assertNotNull(dateTime80);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(chronology83);
        org.junit.Assert.assertNotNull(instant86);
        org.junit.Assert.assertNotNull(dateTime87);
        org.junit.Assert.assertNotNull(periodType90);
        org.junit.Assert.assertNotNull(property92);
        org.junit.Assert.assertNotNull(dateTimeFieldType93);
        org.junit.Assert.assertNotNull(property94);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + true + "'", boolean95 == true);
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + 203 + "'", int96 == 203);
        org.junit.Assert.assertTrue("'" + int97 + "' != '" + 3 + "'", int97 == 3);
    }

    @Test
    public void test07781() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07781");
        org.joda.time.Instant instant1 = new org.joda.time.Instant();
        org.joda.time.Instant instant3 = instant1.withMillis(0L);
        org.joda.time.Chronology chronology4 = instant3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.eras();
        org.joda.time.LocalTime localTime6 = org.joda.time.LocalTime.now(chronology4);
        org.joda.time.DurationField durationField7 = chronology4.eras();
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime((long) 44, chronology4);
        int int9 = dateTime8.getSecondOfMinute();
        int int10 = dateTime8.getWeekOfWeekyear();
        org.joda.time.Chronology chronology12 = null;
        java.util.Locale locale13 = java.util.Locale.GERMAN;
        java.util.Locale locale14 = java.util.Locale.CANADA;
        java.lang.String str15 = locale13.getDisplayVariant(locale14);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket16 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology12, locale14);
        java.lang.Object obj17 = dateTimeParserBucket16.saveState();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.LocalTime localTime20 = new org.joda.time.LocalTime((long) (short) 100, chronology19);
        org.joda.time.DurationFieldType durationFieldType21 = org.joda.time.DurationFieldType.weeks();
        java.lang.String str22 = durationFieldType21.getName();
        boolean boolean23 = localTime20.isSupported(durationFieldType21);
        boolean boolean24 = dateTimeParserBucket16.restoreState((java.lang.Object) boolean23);
        java.lang.Integer int25 = dateTimeParserBucket16.getOffsetInteger();
        org.joda.time.Chronology chronology26 = dateTimeParserBucket16.getChronology();
        org.joda.time.MutableDateTime mutableDateTime27 = dateTime8.toMutableDateTime(chronology26);
        mutableDateTime27.addWeeks(57);
        mutableDateTime27.setTime((long) 26265573);
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.LocalTime localTime33 = new org.joda.time.LocalTime(dateTimeZone32);
        org.joda.time.LocalTime localTime35 = localTime33.minusHours((int) (byte) 100);
        org.joda.time.LocalTime localTime37 = localTime35.withHourOfDay(0);
        org.joda.time.LocalTime localTime39 = localTime37.withMillisOfSecond(44);
        org.joda.time.ReadableDuration readableDuration40 = null;
        org.joda.time.ReadableInstant readableInstant41 = null;
        org.joda.time.Period period42 = new org.joda.time.Period(readableDuration40, readableInstant41);
        org.joda.time.Period period44 = period42.withDays((int) (byte) 1);
        org.joda.time.Period period46 = period42.withMonths(26148);
        org.joda.time.MutablePeriod mutablePeriod47 = period42.toMutablePeriod();
        org.joda.time.LocalTime localTime48 = localTime37.minus((org.joda.time.ReadablePeriod) mutablePeriod47);
        org.joda.time.LocalTime localTime50 = localTime48.plusMinutes((int) (short) 10);
        int int51 = localTime48.getSecondOfMinute();
        int int52 = localTime48.getMinuteOfHour();
        org.joda.time.MutableDateTime mutableDateTime53 = org.joda.time.MutableDateTime.now();
        java.lang.Object obj54 = mutableDateTime53.clone();
        org.joda.time.MutableDateTime.Property property55 = mutableDateTime53.millisOfDay();
        boolean boolean56 = localTime48.equals((java.lang.Object) mutableDateTime53);
        int int57 = mutableDateTime53.getWeekyear();
        mutableDateTime53.addWeeks((-52));
        org.joda.time.MutablePeriod mutablePeriod60 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) mutableDateTime27, (org.joda.time.ReadableInstant) mutableDateTime53);
        org.joda.time.ReadablePeriod readablePeriod61 = null;
        mutableDateTime53.add(readablePeriod61);
        org.junit.Assert.assertNotNull(instant3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "de");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(obj17);
        org.junit.Assert.assertNotNull(durationFieldType21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "weeks" + "'", str22, "weeks");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNull(int25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(mutableDateTime27);
        org.junit.Assert.assertNotNull(localTime35);
        org.junit.Assert.assertNotNull(localTime37);
        org.junit.Assert.assertNotNull(localTime39);
        org.junit.Assert.assertNotNull(period44);
        org.junit.Assert.assertNotNull(period46);
        org.junit.Assert.assertNotNull(mutablePeriod47);
        org.junit.Assert.assertNotNull(localTime48);
        org.junit.Assert.assertNotNull(localTime50);
// flaky:         org.junit.Assert.assertTrue("'" + int51 + "' != '" + 55 + "'", int51 == 55);
// flaky:         org.junit.Assert.assertTrue("'" + int52 + "' != '" + 23 + "'", int52 == 23);
        org.junit.Assert.assertNotNull(mutableDateTime53);
        org.junit.Assert.assertNotNull(obj54);
// flaky:         org.junit.Assert.assertEquals(obj54.toString(), "2022-02-22T07:23:55.022Z");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj54), "2022-02-22T07:23:55.022Z");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj54), "2022-02-22T07:23:55.022Z");
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 2022 + "'", int57 == 2022);
    }

    @Test
    public void test07782() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07782");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withHourOfDay(10);
        org.joda.time.LocalDateTime.Property property3 = localDateTime0.hourOfDay();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime0.plusMillis((int) (byte) 0);
        org.joda.time.PeriodType periodType8 = null;
        org.joda.time.Period period9 = new org.joda.time.Period((long) 100, 1L, periodType8);
        org.joda.time.Period period11 = period9.minusSeconds((-1));
        org.joda.time.LocalDateTime localDateTime12 = localDateTime5.minus((org.joda.time.ReadablePeriod) period9);
        org.joda.time.LocalDateTime.Property property13 = localDateTime5.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime14 = property13.getLocalDateTime();
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.plusHours(292278993);
        org.joda.time.MutablePeriod mutablePeriod19 = new org.joda.time.MutablePeriod((long) (short) -1, 3155695200000L);
        mutablePeriod19.clear();
        org.joda.time.PeriodType periodType23 = null;
        org.joda.time.Period period24 = new org.joda.time.Period((long) 100, 1L, periodType23);
        org.joda.time.PeriodType periodType27 = null;
        org.joda.time.Period period28 = new org.joda.time.Period((long) 100, 1L, periodType27);
        org.joda.time.Period period29 = period24.plus((org.joda.time.ReadablePeriod) period28);
        org.joda.time.MutablePeriod mutablePeriod30 = period29.toMutablePeriod();
        mutablePeriod30.setMillis(62167);
        mutablePeriod19.mergePeriod((org.joda.time.ReadablePeriod) mutablePeriod30);
        mutablePeriod30.addMinutes((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime36 = localDateTime14.plus((org.joda.time.ReadablePeriod) mutablePeriod30);
        org.joda.time.MutableDateTime mutableDateTime37 = org.joda.time.MutableDateTime.now();
        java.lang.Object obj38 = mutableDateTime37.clone();
        mutableDateTime37.setTime((long) 46);
        org.joda.time.MutableDateTime.Property property41 = mutableDateTime37.dayOfWeek();
        mutableDateTime37.setMillisOfDay(2);
        org.joda.time.MutableDateTime.Property property44 = mutableDateTime37.yearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime45 = property44.roundCeiling();
        mutableDateTime45.addMonths(37112100);
        org.joda.time.Duration duration48 = mutablePeriod30.toDurationFrom((org.joda.time.ReadableInstant) mutableDateTime45);
        mutablePeriod30.setMonths(39292537);
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(mutablePeriod30);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(mutableDateTime37);
        org.junit.Assert.assertNotNull(obj38);
// flaky:         org.junit.Assert.assertEquals(obj38.toString(), "2022-02-22T07:23:55.048Z");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj38), "2022-02-22T07:23:55.048Z");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj38), "2022-02-22T07:23:55.048Z");
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(mutableDateTime45);
        org.junit.Assert.assertNotNull(duration48);
    }

    @Test
    public void test07783() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07783");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withHourOfDay(10);
        org.joda.time.LocalDateTime.Property property3 = localDateTime0.hourOfDay();
        org.joda.time.DateTimeField dateTimeField4 = property3.getField();
        java.lang.String str5 = property3.toString();
        org.joda.time.LocalDateTime localDateTime7 = property3.addToCopy(100L);
        org.joda.time.Chronology chronology8 = localDateTime7.getChronology();
        org.joda.time.LocalDateTime.Property property9 = localDateTime7.yearOfCentury();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Property[hourOfDay]" + "'", str5, "Property[hourOfDay]");
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(property9);
    }

    @Test
    public void test07784() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07784");
        org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod((long) (short) -1, 3155695200000L);
        mutablePeriod2.clear();
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period6 = duration5.toPeriod();
        org.joda.time.Duration duration9 = duration5.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime(chronology10);
        org.joda.time.DateTime dateTime13 = dateTime11.plusMinutes(15);
        org.joda.time.Interval interval14 = duration9.toIntervalTo((org.joda.time.ReadableInstant) dateTime13);
        mutablePeriod2.setPeriod((org.joda.time.ReadableInterval) interval14);
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.PeriodType periodType18 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod19 = new org.joda.time.MutablePeriod(readableInstant16, readableInstant17, periodType18);
        org.joda.time.DurationFieldType durationFieldType21 = periodType18.getFieldType((int) (short) 0);
        int int22 = mutablePeriod2.get(durationFieldType21);
        org.joda.time.Duration duration24 = org.joda.time.Duration.standardHours((long) 52);
        org.joda.time.MutableDateTime mutableDateTime25 = org.joda.time.MutableDateTime.now();
        mutableDateTime25.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime28 = mutableDateTime25.copy();
        org.joda.time.MutableDateTime.Property property29 = mutableDateTime25.yearOfEra();
        org.joda.time.MutablePeriod mutablePeriod30 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration24, (org.joda.time.ReadableInstant) mutableDateTime25);
        org.joda.time.Instant instant31 = new org.joda.time.Instant();
        org.joda.time.Instant instant33 = instant31.withMillis(0L);
        org.joda.time.Chronology chronology34 = instant33.getChronology();
        org.joda.time.DurationField durationField35 = chronology34.eras();
        org.joda.time.LocalTime localTime36 = org.joda.time.LocalTime.now(chronology34);
        org.joda.time.DurationField durationField37 = chronology34.eras();
        mutablePeriod2.setPeriod((org.joda.time.ReadableDuration) duration24, chronology34);
        org.joda.time.DateTimeField dateTimeField39 = chronology34.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField40 = chronology34.weekyearOfCentury();
        java.lang.String str41 = dateTimeField40.getName();
        java.util.Locale.Category category43 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale44 = java.util.Locale.getDefault(category43);
        java.util.Locale locale45 = java.util.Locale.getDefault(category43);
        java.util.Locale locale46 = java.util.Locale.GERMAN;
        java.util.Locale locale47 = java.util.Locale.CANADA;
        java.lang.String str48 = locale46.getDisplayVariant(locale47);
        java.lang.String str49 = locale46.getISO3Language();
        java.lang.String str50 = locale46.getISO3Country();
        java.util.Locale locale51 = java.util.Locale.PRC;
        java.util.Locale.setDefault(locale51);
        java.lang.String str53 = locale46.getDisplayLanguage(locale51);
        java.util.Locale locale54 = java.util.Locale.FRENCH;
        java.lang.String str55 = locale51.getDisplayName(locale54);
        java.util.Locale.setDefault(category43, locale54);
        org.joda.time.ReadableInstant readableInstant60 = null;
        org.joda.time.ReadableInstant readableInstant61 = null;
        org.joda.time.PeriodType periodType62 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod63 = new org.joda.time.MutablePeriod(readableInstant60, readableInstant61, periodType62);
        org.joda.time.DurationFieldType durationFieldType65 = periodType62.getFieldType((int) (short) 0);
        java.lang.String str66 = periodType62.toString();
        org.joda.time.Instant instant67 = new org.joda.time.Instant();
        org.joda.time.Instant instant69 = instant67.withMillis(0L);
        org.joda.time.Chronology chronology70 = instant69.getChronology();
        org.joda.time.Period period71 = new org.joda.time.Period((long) 53, (long) (-1), periodType62, chronology70);
        org.joda.time.DateTimeField dateTimeField72 = chronology70.dayOfMonth();
        java.util.Locale locale73 = java.util.Locale.JAPANESE;
        boolean boolean74 = locale73.hasExtensions();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket77 = new org.joda.time.format.DateTimeParserBucket((-60715529700000L), chronology70, locale73, (java.lang.Integer) 4, (int) (short) 10);
        java.util.Locale.setDefault(category43, locale73);
        java.util.Locale locale79 = java.util.Locale.KOREA;
        java.util.Locale.setDefault(category43, locale79);
        java.lang.String str81 = dateTimeField40.getAsShortText((long) 31, locale79);
        int int83 = dateTimeField40.getMaximumValue(1645514421052L);
        // The following exception was thrown during execution in test generation
        try {
            long long86 = dateTimeField40.set((long) 26221, "2022-02-22T07:19:13.627Z");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"2022-02-22T07:19:13.627Z\" for weekyearOfCentury is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(periodType18);
        org.junit.Assert.assertNotNull(durationFieldType21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertNotNull(mutableDateTime25);
        org.junit.Assert.assertNotNull(mutableDateTime28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(instant33);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(durationField35);
        org.junit.Assert.assertNotNull(localTime36);
        org.junit.Assert.assertNotNull(durationField37);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "weekyearOfCentury" + "'", str41, "weekyearOfCentury");
        org.junit.Assert.assertTrue("'" + category43 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category43.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale44);
// flaky:         org.junit.Assert.assertEquals(locale44.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale45);
// flaky:         org.junit.Assert.assertEquals(locale45.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "de");
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "deu" + "'", str49, "deu");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "\u5fb7\u6587" + "'", str53, "\u5fb7\u6587");
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "chinois (Chine)" + "'", str55, "chinois (Chine)");
        org.junit.Assert.assertNotNull(periodType62);
        org.junit.Assert.assertNotNull(durationFieldType65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "PeriodType[YearDayTime]" + "'", str66, "PeriodType[YearDayTime]");
        org.junit.Assert.assertNotNull(instant69);
        org.junit.Assert.assertNotNull(chronology70);
        org.junit.Assert.assertNotNull(dateTimeField72);
        org.junit.Assert.assertNotNull(locale73);
        org.junit.Assert.assertEquals(locale73.toString(), "ja");
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(locale79);
        org.junit.Assert.assertEquals(locale79.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "70" + "'", str81, "70");
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 99 + "'", int83 == 99);
    }

    @Test
    public void test07785() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07785");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.withHourOfDay(10);
        org.joda.time.DateTimeField dateTimeField6 = localDateTime4.getField((int) (byte) 0);
        org.joda.time.DateTimeField[] dateTimeFieldArray7 = localDateTime4.getFields();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime4.withDayOfWeek(1);
        org.joda.time.Duration duration11 = org.joda.time.Duration.standardSeconds((long) 45);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime9.withDurationAdded((org.joda.time.ReadableDuration) duration11, 53);
        org.joda.time.LocalDateTime.Property property14 = localDateTime9.millisOfSecond();
        java.lang.String str15 = property14.toString();
        org.joda.time.LocalDateTime localDateTime16 = property14.roundFloorCopy();
        org.joda.time.MutableDateTime mutableDateTime17 = org.joda.time.MutableDateTime.now();
        mutableDateTime17.add((long) 'a');
        org.joda.time.Duration duration21 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration23 = org.joda.time.Duration.standardDays((long) (byte) 1);
        java.lang.String str24 = duration23.toString();
        boolean boolean25 = duration21.isShorterThan((org.joda.time.ReadableDuration) duration23);
        org.joda.time.Hours hours26 = duration21.toStandardHours();
        mutableDateTime17.add((org.joda.time.ReadableDuration) duration21, 20);
        mutableDateTime17.setMillisOfDay(36946953);
        org.joda.time.DateTimeField dateTimeField31 = mutableDateTime17.getRoundingField();
        org.joda.time.Duration duration33 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period34 = duration33.toPeriod();
        org.joda.time.Duration duration37 = duration33.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Duration duration39 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration42 = duration39.withDurationAdded((long) (short) 100, (int) ' ');
        boolean boolean43 = duration37.isLongerThan((org.joda.time.ReadableDuration) duration39);
        org.joda.time.Period period44 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime17, (org.joda.time.ReadableDuration) duration39);
        org.joda.time.LocalDateTime localDateTime45 = localDateTime16.minus((org.joda.time.ReadableDuration) duration39);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime47 = localDateTime16.withWeekOfWeekyear((int) (short) 0);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 0 for weekOfWeekyear must be in the range [1,52]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeFieldArray7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Property[millisOfSecond]" + "'", str15, "Property[millisOfSecond]");
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(mutableDateTime17);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "PT86400S" + "'", str24, "PT86400S");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(hours26);
        org.junit.Assert.assertNull(dateTimeField31);
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertNotNull(period34);
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertNotNull(duration39);
        org.junit.Assert.assertNotNull(duration42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(localDateTime45);
    }

    @Test
    public void test07786() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07786");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Hours hours2 = duration1.toStandardHours();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime(chronology3);
        int int5 = dateTime4.getSecondOfMinute();
        org.joda.time.MutablePeriod mutablePeriod6 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration1, (org.joda.time.ReadableInstant) dateTime4);
        org.joda.time.Instant instant7 = new org.joda.time.Instant();
        org.joda.time.Instant instant9 = instant7.withMillis(0L);
        org.joda.time.Duration duration11 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period12 = duration11.toPeriod();
        org.joda.time.Duration duration15 = duration11.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Instant instant16 = instant9.plus((org.joda.time.ReadableDuration) duration15);
        org.joda.time.PeriodType periodType17 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.Period period18 = duration15.toPeriod(periodType17);
        org.joda.time.DateTime dateTime19 = dateTime4.minus((org.joda.time.ReadablePeriod) period18);
        org.joda.time.Chronology chronology22 = null;
        java.util.Locale locale23 = java.util.Locale.GERMAN;
        java.util.Locale locale24 = java.util.Locale.CANADA;
        java.lang.String str25 = locale23.getDisplayVariant(locale24);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket26 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology22, locale24);
        java.lang.Object obj27 = dateTimeParserBucket26.saveState();
        org.joda.time.DateTimeZone dateTimeZone28 = dateTimeParserBucket26.getZone();
        org.joda.time.MutableDateTime mutableDateTime29 = new org.joda.time.MutableDateTime((long) 55, dateTimeZone28);
        mutableDateTime29.setTime((int) (byte) 1, 14, 8, 6);
        org.joda.time.MutableDateTime.Property property35 = mutableDateTime29.dayOfWeek();
        org.joda.time.MutableDateTime mutableDateTime36 = property35.roundCeiling();
        int int37 = dateTime4.compareTo((org.joda.time.ReadableInstant) mutableDateTime36);
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(hours2);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 55 + "'", int5 == 55);
        org.junit.Assert.assertNotNull(instant9);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(instant16);
        org.junit.Assert.assertNotNull(periodType17);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "de");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(obj27);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(mutableDateTime36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
    }

    @Test
    public void test07787() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07787");
        org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod((long) (short) -1, 3155695200000L);
        mutablePeriod2.clear();
        mutablePeriod2.addMinutes(53);
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod((long) (short) -1, 3155695200000L);
        mutablePeriod8.clear();
        org.joda.time.Duration duration11 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period12 = duration11.toPeriod();
        org.joda.time.Duration duration15 = duration11.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime(chronology16);
        org.joda.time.DateTime dateTime19 = dateTime17.plusMinutes(15);
        org.joda.time.Interval interval20 = duration15.toIntervalTo((org.joda.time.ReadableInstant) dateTime19);
        mutablePeriod8.setPeriod((org.joda.time.ReadableInterval) interval20);
        mutablePeriod2.setPeriod((org.joda.time.ReadableInterval) interval20);
        org.joda.time.MutableDateTime mutableDateTime23 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property24 = mutableDateTime23.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime26 = property24.set(45);
        org.joda.time.MutableDateTime mutableDateTime27 = property24.roundFloor();
        org.joda.time.MutableDateTime mutableDateTime29 = property24.add(45);
        java.lang.String str30 = mutableDateTime29.toString();
        org.joda.time.MutableDateTime mutableDateTime31 = org.joda.time.MutableDateTime.now();
        mutableDateTime31.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime34 = mutableDateTime31.copy();
        org.joda.time.ReadableDuration readableDuration35 = null;
        org.joda.time.ReadableInstant readableInstant36 = null;
        org.joda.time.Period period37 = new org.joda.time.Period(readableDuration35, readableInstant36);
        org.joda.time.Period period39 = period37.withDays((int) (byte) 1);
        org.joda.time.Period period41 = period37.minusMillis(1424);
        mutableDateTime31.add((org.joda.time.ReadablePeriod) period37);
        mutableDateTime29.add((org.joda.time.ReadablePeriod) period37);
        org.joda.time.MutableDateTime.Property property44 = mutableDateTime29.year();
        org.joda.time.MutableDateTime mutableDateTime45 = property44.roundCeiling();
        boolean boolean47 = mutableDateTime45.equals((java.lang.Object) 1973);
        org.joda.time.MutableDateTime.Property property48 = mutableDateTime45.centuryOfEra();
        org.joda.time.Duration duration49 = mutablePeriod2.toDurationFrom((org.joda.time.ReadableInstant) mutableDateTime45);
        mutableDateTime45.setMillisOfSecond(0);
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.DateTime dateTime54 = new org.joda.time.DateTime((long) 1, chronology53);
        int int55 = dateTime54.getMinuteOfDay();
        int int56 = dateTime54.getWeekOfWeekyear();
        org.joda.time.DateTime.Property property57 = dateTime54.dayOfMonth();
        org.joda.time.LocalDate localDate58 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property59 = localDate58.monthOfYear();
        org.joda.time.DateTimeField dateTimeField60 = property59.getField();
        org.joda.time.LocalDate localDate61 = property59.roundCeilingCopy();
        org.joda.time.Chronology chronology62 = localDate61.getChronology();
        org.joda.time.DateTimeField dateTimeField63 = chronology62.weekOfWeekyear();
        org.joda.time.DateTimeFieldType dateTimeFieldType64 = dateTimeField63.getType();
        boolean boolean65 = dateTime54.isSupported(dateTimeFieldType64);
        org.joda.time.Instant instant66 = new org.joda.time.Instant();
        org.joda.time.Instant instant68 = instant66.withMillis(0L);
        org.joda.time.Chronology chronology69 = instant68.getChronology();
        org.joda.time.DurationField durationField70 = chronology69.eras();
        long long74 = chronology69.add(0L, (long) 2022, (int) '4');
        org.joda.time.DateTimeField dateTimeField75 = chronology69.monthOfYear();
        org.joda.time.DateTimeField dateTimeField76 = chronology69.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField77 = chronology69.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField78 = chronology69.monthOfYear();
        org.joda.time.DateTimeField dateTimeField79 = chronology69.monthOfYear();
        boolean boolean80 = dateTimeFieldType64.isSupported(chronology69);
        org.joda.time.DateTimeField dateTimeField81 = chronology69.halfdayOfDay();
        boolean boolean82 = dateTimeField81.isSupported();
        mutableDateTime45.setRounding(dateTimeField81);
        org.joda.time.Duration duration85 = org.joda.time.Duration.standardDays((long) 2037);
        long long86 = duration85.getStandardMinutes();
        org.joda.time.Duration duration88 = duration85.plus(11786356L);
        org.joda.time.Seconds seconds89 = duration88.toStandardSeconds();
        mutableDateTime45.add((org.joda.time.ReadableDuration) duration88);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(interval20);
        org.junit.Assert.assertNotNull(mutableDateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(mutableDateTime26);
        org.junit.Assert.assertNotNull(mutableDateTime27);
        org.junit.Assert.assertNotNull(mutableDateTime29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "9000-01-01T00:00:00.000Z" + "'", str30, "9000-01-01T00:00:00.000Z");
        org.junit.Assert.assertNotNull(mutableDateTime31);
        org.junit.Assert.assertNotNull(mutableDateTime34);
        org.junit.Assert.assertNotNull(period39);
        org.junit.Assert.assertNotNull(period41);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(mutableDateTime45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(duration49);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertNotNull(dateTimeField60);
        org.junit.Assert.assertNotNull(localDate61);
        org.junit.Assert.assertNotNull(chronology62);
        org.junit.Assert.assertNotNull(dateTimeField63);
        org.junit.Assert.assertNotNull(dateTimeFieldType64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(instant68);
        org.junit.Assert.assertNotNull(chronology69);
        org.junit.Assert.assertNotNull(durationField70);
        org.junit.Assert.assertTrue("'" + long74 + "' != '" + 105144L + "'", long74 == 105144L);
        org.junit.Assert.assertNotNull(dateTimeField75);
        org.junit.Assert.assertNotNull(dateTimeField76);
        org.junit.Assert.assertNotNull(dateTimeField77);
        org.junit.Assert.assertNotNull(dateTimeField78);
        org.junit.Assert.assertNotNull(dateTimeField79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertNotNull(dateTimeField81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertNotNull(duration85);
        org.junit.Assert.assertTrue("'" + long86 + "' != '" + 2933280L + "'", long86 == 2933280L);
        org.junit.Assert.assertNotNull(duration88);
        org.junit.Assert.assertNotNull(seconds89);
    }

    @Test
    public void test07788() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07788");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.UTC;
        java.util.TimeZone timeZone3 = dateTimeZone2.toTimeZone();
        org.joda.time.DateTime dateTime4 = localDate0.toDateTimeAtCurrentTime(dateTimeZone2);
        org.joda.time.MutableDateTime mutableDateTime5 = org.joda.time.MutableDateTime.now(dateTimeZone2);
        int int6 = mutableDateTime5.getDayOfMonth();
        org.joda.time.MutablePeriod mutablePeriod11 = new org.joda.time.MutablePeriod((int) (byte) -1, (int) (byte) 1, 44, (int) ' ');
        mutablePeriod11.addDays((int) (byte) 10);
        mutablePeriod11.addMillis((int) '4');
        org.joda.time.Duration duration17 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period18 = duration17.toPeriod();
        org.joda.time.Duration duration20 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration22 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration25 = duration22.withDurationAdded((long) (short) 100, (int) ' ');
        boolean boolean26 = duration20.isLongerThan((org.joda.time.ReadableDuration) duration25);
        org.joda.time.Duration duration27 = duration17.minus((org.joda.time.ReadableDuration) duration20);
        mutablePeriod11.setPeriod((org.joda.time.ReadableDuration) duration27);
        org.joda.time.MutablePeriod mutablePeriod29 = mutablePeriod11.copy();
        mutableDateTime5.add((org.joda.time.ReadablePeriod) mutablePeriod29);
        mutableDateTime5.add((long) 26254);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime5.setMonthOfYear(26439);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26439 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(timeZone3);
// flaky:         org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "\uc138\uacc4\ud45c\uc900\uc2dc");
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(mutableDateTime5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 22 + "'", int6 == 22);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertNotNull(mutablePeriod29);
    }

    @Test
    public void test07789() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07789");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.Instant instant2 = instant0.withMillis(0L);
        org.joda.time.Duration duration4 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period5 = duration4.toPeriod();
        org.joda.time.Duration duration8 = duration4.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Instant instant9 = instant2.plus((org.joda.time.ReadableDuration) duration8);
        long long10 = instant9.getMillis();
        org.joda.time.Chronology chronology11 = instant9.getChronology();
        org.joda.time.MutableDateTime mutableDateTime12 = org.joda.time.MutableDateTime.now();
        mutableDateTime12.add((long) 'a');
        org.joda.time.Duration duration16 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration18 = org.joda.time.Duration.standardDays((long) (byte) 1);
        java.lang.String str19 = duration18.toString();
        boolean boolean20 = duration16.isShorterThan((org.joda.time.ReadableDuration) duration18);
        org.joda.time.Hours hours21 = duration16.toStandardHours();
        mutableDateTime12.add((org.joda.time.ReadableDuration) duration16, 20);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime(chronology24);
        int int26 = dateTime25.getYearOfCentury();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter27 = null;
        java.lang.String str28 = dateTime25.toString(dateTimeFormatter27);
        org.joda.time.DateTime dateTime30 = dateTime25.minusMonths(22);
        org.joda.time.Instant instant31 = new org.joda.time.Instant();
        org.joda.time.Instant instant33 = instant31.withMillis(0L);
        org.joda.time.Chronology chronology34 = instant33.getChronology();
        org.joda.time.DurationField durationField35 = chronology34.eras();
        org.joda.time.DateTime dateTime36 = dateTime25.withChronology(chronology34);
        org.joda.time.Period period37 = duration16.toPeriod(chronology34);
        org.joda.time.Instant instant39 = instant9.withDurationAdded((org.joda.time.ReadableDuration) duration16, 16);
        org.joda.time.Duration duration40 = duration16.toDuration();
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.DateTime dateTime42 = new org.joda.time.DateTime(chronology41);
        int int43 = dateTime42.getYearOfCentury();
        int int44 = dateTime42.getYearOfEra();
        org.joda.time.DateTime dateTime45 = dateTime42.withLaterOffsetAtOverlap();
        org.joda.time.Interval interval46 = duration16.toIntervalFrom((org.joda.time.ReadableInstant) dateTime42);
        org.joda.time.DateTime dateTime48 = dateTime42.plus(48888L);
        long long49 = dateTime42.getMillis();
        org.junit.Assert.assertNotNull(instant2);
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(instant9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 86400000L + "'", long10 == 86400000L);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(mutableDateTime12);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "PT86400S" + "'", str19, "PT86400S");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(hours21);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 22 + "'", int26 == 22);
// flaky:         org.junit.Assert.assertEquals("'" + str28 + "' != '" + "2022-02-22T07:23:55.350Z" + "'", str28, "2022-02-22T07:23:55.350Z");
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(instant33);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(durationField35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(period37);
        org.junit.Assert.assertNotNull(instant39);
        org.junit.Assert.assertNotNull(duration40);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 22 + "'", int43 == 22);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 2022 + "'", int44 == 2022);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(interval46);
        org.junit.Assert.assertNotNull(dateTime48);
// flaky:         org.junit.Assert.assertTrue("'" + long49 + "' != '" + 1645514635350L + "'", long49 == 1645514635350L);
    }

    @Test
    public void test07790() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07790");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) 1);
        org.joda.time.MutableDateTime mutableDateTime2 = org.joda.time.MutableDateTime.now();
        mutableDateTime2.add((long) 'a');
        org.joda.time.MutableDateTime.Property property5 = mutableDateTime2.yearOfCentury();
        org.joda.time.Duration duration7 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period8 = duration7.toPeriod();
        org.joda.time.Duration duration10 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration13 = duration10.withDurationAdded((long) (short) 100, (int) ' ');
        org.joda.time.Duration duration14 = duration7.minus((org.joda.time.ReadableDuration) duration13);
        mutableDateTime2.add((org.joda.time.ReadableDuration) duration7);
        org.joda.time.MutableDateTime.Property property16 = mutableDateTime2.centuryOfEra();
        mutableDateTime2.addYears(0);
        mutableDateTime2.setMinuteOfDay((int) (short) 0);
        org.joda.time.Instant instant21 = new org.joda.time.Instant();
        org.joda.time.Instant instant23 = instant21.withMillis(0L);
        org.joda.time.Duration duration25 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period26 = duration25.toPeriod();
        org.joda.time.Duration duration29 = duration25.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Instant instant30 = instant23.plus((org.joda.time.ReadableDuration) duration29);
        long long31 = instant30.getMillis();
        org.joda.time.Duration duration32 = new org.joda.time.Duration((org.joda.time.ReadableInstant) mutableDateTime2, (org.joda.time.ReadableInstant) instant30);
        org.joda.time.MutableDateTime mutableDateTime33 = instant30.toMutableDateTime();
        boolean boolean34 = dateTime1.equals((java.lang.Object) mutableDateTime33);
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime38 = dateTime36.withZoneRetainFields(dateTimeZone37);
        boolean boolean40 = dateTime38.equals((java.lang.Object) (-1L));
        org.joda.time.Chronology chronology41 = dateTime38.getChronology();
        org.joda.time.Instant instant42 = new org.joda.time.Instant();
        org.joda.time.Instant instant44 = instant42.withMillis(0L);
        org.joda.time.Chronology chronology45 = instant44.getChronology();
        org.joda.time.DurationField durationField46 = chronology45.eras();
        org.joda.time.LocalTime localTime47 = org.joda.time.LocalTime.now(chronology45);
        org.joda.time.DateTime dateTime48 = dateTime38.toDateTime(chronology45);
        org.joda.time.DateTime dateTime49 = dateTime1.toDateTime(chronology45);
        org.joda.time.DateTime.Property property50 = dateTime49.dayOfMonth();
        int int51 = dateTime49.getYearOfEra();
        org.junit.Assert.assertNotNull(mutableDateTime2);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(instant23);
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertNotNull(instant30);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 86400000L + "'", long31 == 86400000L);
        org.junit.Assert.assertNotNull(mutableDateTime33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(instant44);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(durationField46);
        org.junit.Assert.assertNotNull(localTime47);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1970 + "'", int51 == 1970);
    }

    @Test
    public void test07791() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07791");
        org.joda.time.Instant instant2 = new org.joda.time.Instant();
        org.joda.time.Instant instant4 = instant2.withMillis(0L);
        org.joda.time.Duration duration6 = org.joda.time.Duration.standardDays((long) (byte) 1);
        java.lang.String str7 = duration6.toString();
        org.joda.time.Instant instant8 = instant2.minus((org.joda.time.ReadableDuration) duration6);
        org.joda.time.Duration duration10 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period11 = duration10.toPeriod();
        org.joda.time.Duration duration13 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration15 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration18 = duration15.withDurationAdded((long) (short) 100, (int) ' ');
        boolean boolean19 = duration13.isLongerThan((org.joda.time.ReadableDuration) duration18);
        org.joda.time.Duration duration20 = duration10.minus((org.joda.time.ReadableDuration) duration13);
        org.joda.time.Duration duration22 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration25 = duration22.withDurationAdded((long) (short) 100, (int) ' ');
        boolean boolean26 = duration13.equals((java.lang.Object) duration22);
        org.joda.time.Instant instant28 = instant8.withDurationAdded((org.joda.time.ReadableDuration) duration13, 26150565);
        org.joda.time.Chronology chronology29 = instant8.getChronology();
        org.joda.time.PeriodType periodType32 = null;
        org.joda.time.Period period33 = new org.joda.time.Period((long) 100, 1L, periodType32);
        org.joda.time.Period period35 = period33.minusSeconds((-1));
        org.joda.time.Period period37 = period33.withWeeks((int) (byte) 0);
        org.joda.time.Period period39 = period33.minusDays(26183562);
        org.joda.time.LocalDate localDate40 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property41 = localDate40.dayOfYear();
        org.joda.time.PeriodType periodType44 = null;
        org.joda.time.Period period45 = new org.joda.time.Period((long) 100, 1L, periodType44);
        org.joda.time.Period period47 = period45.minusSeconds((-1));
        java.lang.String str48 = period45.toString();
        org.joda.time.LocalDate localDate50 = localDate40.withPeriodAdded((org.joda.time.ReadablePeriod) period45, 3);
        org.joda.time.DateTime dateTime51 = localDate50.toDateTimeAtCurrentTime();
        org.joda.time.Chronology chronology53 = null;
        java.util.Locale locale54 = java.util.Locale.GERMAN;
        java.util.Locale locale55 = java.util.Locale.CANADA;
        java.lang.String str56 = locale54.getDisplayVariant(locale55);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket57 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology53, locale55);
        java.lang.Object obj58 = dateTimeParserBucket57.saveState();
        org.joda.time.DateTimeZone dateTimeZone59 = dateTimeParserBucket57.getZone();
        org.joda.time.DateTime dateTime60 = localDate50.toDateTimeAtStartOfDay(dateTimeZone59);
        org.joda.time.PeriodType periodType63 = null;
        org.joda.time.Period period64 = new org.joda.time.Period((long) 100, 1L, periodType63);
        org.joda.time.Period period66 = period64.minusSeconds((-1));
        org.joda.time.Period period68 = period66.multipliedBy((int) '#');
        org.joda.time.DurationFieldType durationFieldType69 = org.joda.time.DurationFieldType.centuries();
        int int70 = period68.get(durationFieldType69);
        boolean boolean71 = localDate50.isSupported(durationFieldType69);
        java.lang.String str72 = durationFieldType69.toString();
        org.joda.time.Chronology chronology73 = null;
        org.joda.time.DateTime dateTime74 = new org.joda.time.DateTime(chronology73);
        org.joda.time.DateTime dateTime76 = dateTime74.plusMinutes(15);
        org.joda.time.Chronology chronology77 = dateTime74.getChronology();
        org.joda.time.DurationField durationField78 = chronology77.hours();
        org.joda.time.DateTimeField dateTimeField79 = chronology77.minuteOfHour();
        boolean boolean80 = durationFieldType69.isSupported(chronology77);
        int int81 = period33.get(durationFieldType69);
        int[] intArray83 = chronology29.get((org.joda.time.ReadablePeriod) period33, 1051843L);
        org.joda.time.Period period84 = new org.joda.time.Period(190800052L, (long) 26251, chronology29);
        org.joda.time.MutableDateTime mutableDateTime85 = org.joda.time.MutableDateTime.now(chronology29);
        org.joda.time.DateTimeField dateTimeField86 = chronology29.era();
        org.junit.Assert.assertNotNull(instant4);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "PT86400S" + "'", str7, "PT86400S");
        org.junit.Assert.assertNotNull(instant8);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(instant28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(period35);
        org.junit.Assert.assertNotNull(period37);
        org.junit.Assert.assertNotNull(period39);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(period47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "PT0.099S" + "'", str48, "PT0.099S");
        org.junit.Assert.assertNotNull(localDate50);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "de");
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertNotNull(obj58);
        org.junit.Assert.assertNotNull(dateTimeZone59);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(period66);
        org.junit.Assert.assertNotNull(period68);
        org.junit.Assert.assertNotNull(durationFieldType69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "centuries" + "'", str72, "centuries");
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertNotNull(chronology77);
        org.junit.Assert.assertNotNull(durationField78);
        org.junit.Assert.assertNotNull(dateTimeField79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[0, 0, 0, 0, 0, 17, 31, 843]");
        org.junit.Assert.assertNotNull(mutableDateTime85);
        org.junit.Assert.assertNotNull(dateTimeField86);
    }

    @Test
    public void test07792() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07792");
        java.lang.Object obj0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(obj0);
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.withHourOfDay(10);
        org.joda.time.DateTimeField dateTimeField8 = localDateTime6.getField((int) (byte) 0);
        long long10 = dateTimeField8.roundHalfEven((long) 1);
        int int11 = dateTime1.get(dateTimeField8);
        org.joda.time.LocalDateTime localDateTime12 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.withCenturyOfEra((int) 'a');
        java.util.Locale locale20 = java.util.Locale.GERMAN;
        java.lang.String str21 = locale20.getDisplayName();
        java.lang.String str22 = dateTimeField8.getAsText((org.joda.time.ReadablePartial) localDateTime16, 53, locale20);
        org.joda.time.Duration duration24 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period25 = duration24.toPeriod();
        org.joda.time.Duration duration28 = duration24.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime16.minus((org.joda.time.ReadableDuration) duration24);
        org.joda.time.LocalDateTime localDateTime30 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime32 = localDateTime30.withHourOfDay(10);
        org.joda.time.LocalDateTime.Property property33 = localDateTime30.hourOfDay();
        org.joda.time.LocalDateTime localDateTime35 = localDateTime30.plusMillis((int) (byte) 0);
        int int36 = localDateTime16.compareTo((org.joda.time.ReadablePartial) localDateTime30);
        org.joda.time.MutableDateTime mutableDateTime38 = new org.joda.time.MutableDateTime((long) (short) -1);
        mutableDateTime38.setSecondOfMinute(53);
        int int41 = mutableDateTime38.getEra();
        org.joda.time.DateTimeField dateTimeField42 = mutableDateTime38.getRoundingField();
        org.joda.time.DateTime dateTime43 = localDateTime16.toDateTime((org.joda.time.ReadableInstant) mutableDateTime38);
        org.joda.time.Instant instant44 = new org.joda.time.Instant();
        org.joda.time.Instant instant46 = instant44.withMillis(0L);
        org.joda.time.DateTime dateTime47 = instant46.toDateTime();
        org.joda.time.Duration duration49 = org.joda.time.Duration.standardMinutes((long) (byte) -1);
        org.joda.time.Instant instant51 = instant46.withDurationAdded((org.joda.time.ReadableDuration) duration49, 0);
        org.joda.time.MutableDateTime mutableDateTime52 = instant46.toMutableDateTime();
        mutableDateTime52.setTime(31556952000L);
        int int55 = dateTime43.compareTo((org.joda.time.ReadableInstant) mutableDateTime52);
        org.joda.time.MutableDateTime.Property property56 = mutableDateTime52.weekyear();
        org.joda.time.MutableDateTime mutableDateTime57 = property56.roundHalfEven();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime59 = property56.set("PT1143849662.172S");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"PT1143849662.172S\" for weekyear is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2022 + "'", int11 == 2022);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "de");
// flaky:         org.junit.Assert.assertEquals("'" + str21 + "' != '" + "German" + "'", str21, "German");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "53" + "'", str22, "53");
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertNull(dateTimeField42);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(instant46);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(duration49);
        org.junit.Assert.assertNotNull(instant51);
        org.junit.Assert.assertNotNull(mutableDateTime52);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertNotNull(property56);
        org.junit.Assert.assertNotNull(mutableDateTime57);
    }

    @Test
    public void test07793() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07793");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.add((long) 'a');
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime0.yearOfCentury();
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period6 = duration5.toPeriod();
        org.joda.time.Duration duration8 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration11 = duration8.withDurationAdded((long) (short) 100, (int) ' ');
        org.joda.time.Duration duration12 = duration5.minus((org.joda.time.ReadableDuration) duration11);
        mutableDateTime0.add((org.joda.time.ReadableDuration) duration5);
        org.joda.time.MutableDateTime.Property property14 = mutableDateTime0.centuryOfEra();
        mutableDateTime0.addHours((int) (byte) 10);
        mutableDateTime0.addWeeks(20);
        org.joda.time.DateTimeField dateTimeField19 = mutableDateTime0.getRoundingField();
        int int20 = mutableDateTime0.getWeekyear();
        int int21 = mutableDateTime0.getDayOfWeek();
        int int22 = mutableDateTime0.getWeekyear();
        org.joda.time.MutableDateTime mutableDateTime23 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property24 = mutableDateTime23.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime26 = property24.set(45);
        org.joda.time.MutableDateTime mutableDateTime27 = property24.roundFloor();
        org.joda.time.MutableDateTime mutableDateTime28 = property24.roundHalfEven();
        org.joda.time.MutableDateTime mutableDateTime29 = property24.roundHalfFloor();
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime(chronology31);
        org.joda.time.DateTime dateTime34 = dateTime32.plusMinutes(15);
        org.joda.time.Chronology chronology35 = dateTime32.getChronology();
        java.lang.String str36 = chronology35.toString();
        org.joda.time.LocalDate localDate37 = new org.joda.time.LocalDate((long) 0, chronology35);
        org.joda.time.DateTime dateTime38 = localDate37.toDateTimeAtStartOfDay();
        org.joda.time.DateTime.Property property39 = dateTime38.hourOfDay();
        org.joda.time.Instant instant40 = new org.joda.time.Instant();
        org.joda.time.Instant instant42 = instant40.withMillis(0L);
        org.joda.time.Duration duration44 = org.joda.time.Duration.standardDays((long) (byte) 1);
        java.lang.String str45 = duration44.toString();
        org.joda.time.Instant instant46 = instant40.minus((org.joda.time.ReadableDuration) duration44);
        org.joda.time.MutableDateTime mutableDateTime47 = org.joda.time.MutableDateTime.now();
        mutableDateTime47.add((long) 'a');
        org.joda.time.MutableDateTime.Property property50 = mutableDateTime47.yearOfCentury();
        org.joda.time.Duration duration52 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period53 = duration52.toPeriod();
        org.joda.time.Duration duration55 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration58 = duration55.withDurationAdded((long) (short) 100, (int) ' ');
        org.joda.time.Duration duration59 = duration52.minus((org.joda.time.ReadableDuration) duration58);
        mutableDateTime47.add((org.joda.time.ReadableDuration) duration52);
        org.joda.time.MutableDateTime.Property property61 = mutableDateTime47.centuryOfEra();
        mutableDateTime47.addHours((int) (byte) 10);
        mutableDateTime47.addWeeks(100);
        boolean boolean66 = instant40.isAfter((org.joda.time.ReadableInstant) mutableDateTime47);
        int int67 = property39.compareTo((org.joda.time.ReadableInstant) mutableDateTime47);
        mutableDateTime47.addWeekyears(19045);
        boolean boolean70 = mutableDateTime29.isEqual((org.joda.time.ReadableInstant) mutableDateTime47);
        org.joda.time.Period period71 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime0, (org.joda.time.ReadableInstant) mutableDateTime47);
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNull(dateTimeField19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2022 + "'", int20 == 2022);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 3 + "'", int21 == 3);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2022 + "'", int22 == 2022);
        org.junit.Assert.assertNotNull(mutableDateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(mutableDateTime26);
        org.junit.Assert.assertNotNull(mutableDateTime27);
        org.junit.Assert.assertNotNull(mutableDateTime28);
        org.junit.Assert.assertNotNull(mutableDateTime29);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "ISOChronology[UTC]" + "'", str36, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(instant42);
        org.junit.Assert.assertNotNull(duration44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "PT86400S" + "'", str45, "PT86400S");
        org.junit.Assert.assertNotNull(instant46);
        org.junit.Assert.assertNotNull(mutableDateTime47);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertNotNull(duration52);
        org.junit.Assert.assertNotNull(period53);
        org.junit.Assert.assertNotNull(duration55);
        org.junit.Assert.assertNotNull(duration58);
        org.junit.Assert.assertNotNull(duration59);
        org.junit.Assert.assertNotNull(property61);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + (-1) + "'", int67 == (-1));
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
    }

    @Test
    public void test07794() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07794");
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.PeriodType periodType5 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod6 = new org.joda.time.MutablePeriod(readableInstant3, readableInstant4, periodType5);
        org.joda.time.DurationFieldType durationFieldType8 = periodType5.getFieldType((int) (short) 0);
        java.lang.String str9 = periodType5.toString();
        org.joda.time.Instant instant10 = new org.joda.time.Instant();
        org.joda.time.Instant instant12 = instant10.withMillis(0L);
        org.joda.time.Chronology chronology13 = instant12.getChronology();
        org.joda.time.Period period14 = new org.joda.time.Period((long) 53, (long) (-1), periodType5, chronology13);
        org.joda.time.DateTimeField dateTimeField15 = chronology13.weekyearOfCentury();
        org.joda.time.LocalTime localTime16 = new org.joda.time.LocalTime((long) 436, chronology13);
        org.joda.time.DateTimeZone dateTimeZone17 = chronology13.getZone();
        org.joda.time.MutableDateTime mutableDateTime18 = org.joda.time.MutableDateTime.now(chronology13);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime18.setMinuteOfHour(263973);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 263973 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType5);
        org.junit.Assert.assertNotNull(durationFieldType8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "PeriodType[YearDayTime]" + "'", str9, "PeriodType[YearDayTime]");
        org.junit.Assert.assertNotNull(instant12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(mutableDateTime18);
    }

    @Test
    public void test07795() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07795");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.add((long) 'a');
        long long3 = mutableDateTime0.getMillis();
        org.joda.time.MutableDateTime.Property property4 = mutableDateTime0.minuteOfDay();
        org.joda.time.MutableDateTime mutableDateTime5 = org.joda.time.MutableDateTime.now();
        mutableDateTime5.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime8 = mutableDateTime5.copy();
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime5.weekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime10 = property9.roundHalfFloor();
        org.joda.time.MutableDateTime mutableDateTime11 = property9.roundHalfCeiling();
        org.joda.time.MutableDateTime mutableDateTime13 = property9.set(1);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime(chronology14);
        int int16 = dateTime15.getYearOfCentury();
        int int17 = dateTime15.getWeekyear();
        org.joda.time.DateTime dateTime18 = dateTime15.withEarlierOffsetAtOverlap();
        java.lang.String str19 = dateTime18.toString();
        org.joda.time.MutableDateTime mutableDateTime20 = dateTime18.toMutableDateTime();
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.UTC;
        boolean boolean22 = dateTimeZone21.isFixed();
        mutableDateTime20.setZoneRetainFields(dateTimeZone21);
        org.joda.time.MutableDateTime mutableDateTime24 = mutableDateTime13.toMutableDateTime(dateTimeZone21);
        int int25 = mutableDateTime24.getYearOfCentury();
        org.joda.time.MutableDateTime.Property property26 = mutableDateTime24.minuteOfDay();
        org.joda.time.MutableDateTime mutableDateTime28 = property26.add((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType29 = org.joda.time.DurationFieldType.minutes();
        mutableDateTime28.add(durationFieldType29, (-7664));
        mutableDateTime0.add(durationFieldType29, 999);
        org.junit.Assert.assertNotNull(mutableDateTime0);
// flaky:         org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1645514635869L + "'", long3 == 1645514635869L);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(mutableDateTime5);
        org.junit.Assert.assertNotNull(mutableDateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(mutableDateTime10);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertNotNull(mutableDateTime13);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 22 + "'", int16 == 22);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2022 + "'", int17 == 2022);
        org.junit.Assert.assertNotNull(dateTime18);
// flaky:         org.junit.Assert.assertEquals("'" + str19 + "' != '" + "2022-02-22T07:23:55.772Z" + "'", str19, "2022-02-22T07:23:55.772Z");
        org.junit.Assert.assertNotNull(mutableDateTime20);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(mutableDateTime24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 22 + "'", int25 == 22);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(mutableDateTime28);
        org.junit.Assert.assertNotNull(durationFieldType29);
    }

    @Test
    public void test07796() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07796");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime3 = mutableDateTime0.copy();
        org.joda.time.MutableDateTime.Property property4 = mutableDateTime0.weekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime5 = property4.roundHalfFloor();
        org.joda.time.MutableDateTime mutableDateTime6 = property4.roundHalfCeiling();
        org.joda.time.MutableDateTime mutableDateTime8 = property4.set(1);
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime8.dayOfWeek();
        org.joda.time.MutablePeriod mutablePeriod12 = new org.joda.time.MutablePeriod((long) (short) -1, 3155695200000L);
        org.joda.time.Duration duration14 = org.joda.time.Duration.standardDays((long) (byte) 1);
        java.lang.String str15 = duration14.toString();
        org.joda.time.Duration duration17 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Hours hours18 = duration17.toStandardHours();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime(chronology19);
        int int21 = dateTime20.getSecondOfMinute();
        org.joda.time.MutablePeriod mutablePeriod22 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration17, (org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.Duration duration23 = duration14.plus((org.joda.time.ReadableDuration) duration17);
        org.joda.time.Duration duration25 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period26 = duration25.toPeriod();
        org.joda.time.Duration duration28 = duration25.minus((long) 292278993);
        org.joda.time.MutableDateTime mutableDateTime29 = org.joda.time.MutableDateTime.now();
        mutableDateTime29.add((long) 'a');
        org.joda.time.MutableDateTime.Property property32 = mutableDateTime29.yearOfCentury();
        org.joda.time.Duration duration34 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period35 = duration34.toPeriod();
        org.joda.time.Duration duration37 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration40 = duration37.withDurationAdded((long) (short) 100, (int) ' ');
        org.joda.time.Duration duration41 = duration34.minus((org.joda.time.ReadableDuration) duration40);
        mutableDateTime29.add((org.joda.time.ReadableDuration) duration34);
        boolean boolean43 = duration28.isShorterThan((org.joda.time.ReadableDuration) duration34);
        boolean boolean44 = duration17.isLongerThan((org.joda.time.ReadableDuration) duration28);
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime((long) 1);
        org.joda.time.Duration duration48 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period49 = duration48.toPeriod();
        org.joda.time.Duration duration52 = duration48.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Period period53 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime46, (org.joda.time.ReadableDuration) duration52);
        org.joda.time.Duration duration54 = duration28.plus((org.joda.time.ReadableDuration) duration52);
        mutablePeriod12.add((org.joda.time.ReadableDuration) duration52);
        org.joda.time.MutableDateTime mutableDateTime56 = org.joda.time.MutableDateTime.now();
        mutableDateTime56.add((long) 'a');
        org.joda.time.MutableDateTime.Property property59 = mutableDateTime56.yearOfCentury();
        org.joda.time.Duration duration61 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period62 = duration61.toPeriod();
        org.joda.time.Duration duration64 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration67 = duration64.withDurationAdded((long) (short) 100, (int) ' ');
        org.joda.time.Duration duration68 = duration61.minus((org.joda.time.ReadableDuration) duration67);
        mutableDateTime56.add((org.joda.time.ReadableDuration) duration61);
        org.joda.time.MutableDateTime.Property property70 = mutableDateTime56.centuryOfEra();
        mutableDateTime56.addHours((int) (byte) 10);
        mutableDateTime56.addWeeks(20);
        org.joda.time.DateTimeField dateTimeField75 = mutableDateTime56.getRoundingField();
        int int76 = mutableDateTime56.getWeekyear();
        int int77 = mutableDateTime56.getDayOfWeek();
        int int78 = mutableDateTime56.getWeekyear();
        org.joda.time.Duration duration80 = org.joda.time.Duration.standardHours(946312L);
        mutableDateTime56.add((org.joda.time.ReadableDuration) duration80, 24);
        org.joda.time.LocalDateTime localDateTime83 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime85 = localDateTime83.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime87 = localDateTime85.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime89 = localDateTime87.withCenturyOfEra((int) 'a');
        org.joda.time.LocalDateTime localDateTime91 = localDateTime89.minusMillis((int) (short) -1);
        org.joda.time.LocalDateTime localDateTime93 = localDateTime91.plusHours(51);
        boolean boolean94 = duration80.equals((java.lang.Object) 51);
        boolean boolean95 = duration52.isShorterThan((org.joda.time.ReadableDuration) duration80);
        mutableDateTime8.add((org.joda.time.ReadableDuration) duration52);
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(mutableDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(mutableDateTime5);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(mutableDateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "PT86400S" + "'", str15, "PT86400S");
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(hours18);
// flaky:         org.junit.Assert.assertTrue("'" + int21 + "' != '" + 55 + "'", int21 == 55);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(mutableDateTime29);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertNotNull(period35);
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertNotNull(duration40);
        org.junit.Assert.assertNotNull(duration41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(duration48);
        org.junit.Assert.assertNotNull(period49);
        org.junit.Assert.assertNotNull(duration52);
        org.junit.Assert.assertNotNull(duration54);
        org.junit.Assert.assertNotNull(mutableDateTime56);
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertNotNull(duration61);
        org.junit.Assert.assertNotNull(period62);
        org.junit.Assert.assertNotNull(duration64);
        org.junit.Assert.assertNotNull(duration67);
        org.junit.Assert.assertNotNull(duration68);
        org.junit.Assert.assertNotNull(property70);
        org.junit.Assert.assertNull(dateTimeField75);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 2022 + "'", int76 == 2022);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 3 + "'", int77 == 3);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 2022 + "'", int78 == 2022);
        org.junit.Assert.assertNotNull(duration80);
        org.junit.Assert.assertNotNull(localDateTime83);
        org.junit.Assert.assertNotNull(localDateTime85);
        org.junit.Assert.assertNotNull(localDateTime87);
        org.junit.Assert.assertNotNull(localDateTime89);
        org.junit.Assert.assertNotNull(localDateTime91);
        org.junit.Assert.assertNotNull(localDateTime93);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + true + "'", boolean95 == true);
    }

    @Test
    public void test07797() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07797");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime(dateTimeZone0);
        org.joda.time.LocalTime localTime3 = localTime1.minusHours((int) (byte) 100);
        int int4 = localTime3.getMinuteOfHour();
        java.lang.String str6 = localTime3.toString("1");
        org.joda.time.LocalTime localTime8 = localTime3.minusMinutes(15);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(chronology9);
        int int11 = dateTime10.getYearOfCentury();
        int int12 = dateTime10.getWeekyear();
        org.joda.time.DateTime dateTime14 = dateTime10.plus((long) 15);
        org.joda.time.DateTime.Property property15 = dateTime10.year();
        org.joda.time.DateTime dateTime16 = property15.roundHalfFloorCopy();
        org.joda.time.DateTime.Property property17 = dateTime16.millisOfSecond();
        org.joda.time.MutableDateTime mutableDateTime18 = dateTime16.toMutableDateTime();
        org.joda.time.LocalTime localTime19 = dateTime16.toLocalTime();
        org.joda.time.LocalTime localTime20 = localTime3.withFields((org.joda.time.ReadablePartial) localTime19);
        org.joda.time.LocalTime localTime22 = localTime3.minusMinutes(26212472);
        org.joda.time.LocalTime.Property property23 = localTime22.minuteOfHour();
        org.joda.time.LocalTime localTime25 = property23.addCopy(37048051);
        int int26 = localTime25.getMillisOfDay();
        org.junit.Assert.assertNotNull(localTime3);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 23 + "'", int4 == 23);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "1" + "'", str6, "1");
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 22 + "'", int11 == 22);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2022 + "'", int12 == 2022);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(mutableDateTime18);
        org.junit.Assert.assertNotNull(localTime19);
        org.junit.Assert.assertNotNull(localTime20);
        org.junit.Assert.assertNotNull(localTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(localTime25);
// flaky:         org.junit.Assert.assertTrue("'" + int26 + "' != '" + 73375864 + "'", int26 == 73375864);
    }

    @Test
    public void test07798() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07798");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(1645514288948L);
    }

    @Test
    public void test07799() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07799");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.Instant instant2 = instant0.withMillis(0L);
        org.joda.time.Duration duration4 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period5 = duration4.toPeriod();
        org.joda.time.Duration duration8 = duration4.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Instant instant9 = instant2.plus((org.joda.time.ReadableDuration) duration8);
        org.joda.time.Duration duration11 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration13 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration16 = duration13.withDurationAdded((long) (short) 100, (int) ' ');
        boolean boolean17 = duration11.isLongerThan((org.joda.time.ReadableDuration) duration16);
        java.lang.Object obj18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime(obj18);
        org.joda.time.LocalDateTime localDateTime20 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime22 = localDateTime20.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime22.withHourOfDay(10);
        org.joda.time.DateTimeField dateTimeField26 = localDateTime24.getField((int) (byte) 0);
        long long28 = dateTimeField26.roundHalfEven((long) 1);
        int int29 = dateTime19.get(dateTimeField26);
        org.joda.time.LocalDateTime localDateTime30 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime32 = localDateTime30.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime34 = localDateTime32.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime36 = localDateTime34.withCenturyOfEra((int) 'a');
        java.util.Locale locale38 = java.util.Locale.GERMAN;
        java.lang.String str39 = locale38.getDisplayName();
        java.lang.String str40 = dateTimeField26.getAsText((org.joda.time.ReadablePartial) localDateTime34, 53, locale38);
        org.joda.time.Duration duration42 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period43 = duration42.toPeriod();
        org.joda.time.Duration duration46 = duration42.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.LocalDateTime localDateTime47 = localDateTime34.minus((org.joda.time.ReadableDuration) duration42);
        org.joda.time.LocalDateTime localDateTime48 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime50 = localDateTime48.withHourOfDay(10);
        org.joda.time.LocalDateTime.Property property51 = localDateTime48.hourOfDay();
        org.joda.time.LocalDateTime localDateTime53 = localDateTime48.plusMillis((int) (byte) 0);
        int int54 = localDateTime34.compareTo((org.joda.time.ReadablePartial) localDateTime48);
        boolean boolean55 = duration11.equals((java.lang.Object) int54);
        org.joda.time.Instant instant56 = instant2.plus((org.joda.time.ReadableDuration) duration11);
        org.joda.time.DateTime dateTime58 = new org.joda.time.DateTime((long) 1);
        org.joda.time.Duration duration60 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period61 = duration60.toPeriod();
        org.joda.time.Duration duration64 = duration60.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Period period65 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime58, (org.joda.time.ReadableDuration) duration64);
        org.joda.time.Period period67 = period65.plusSeconds((int) (byte) 0);
        org.joda.time.MutableDateTime mutableDateTime68 = org.joda.time.MutableDateTime.now();
        mutableDateTime68.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime71 = mutableDateTime68.copy();
        org.joda.time.MutableDateTime.Property property72 = mutableDateTime68.weekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime73 = property72.roundHalfFloor();
        org.joda.time.MutableDateTime mutableDateTime74 = property72.roundHalfCeiling();
        org.joda.time.DateTimeFieldType dateTimeFieldType75 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.ReadableInstant readableInstant78 = null;
        org.joda.time.ReadableInstant readableInstant79 = null;
        org.joda.time.PeriodType periodType80 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod81 = new org.joda.time.MutablePeriod(readableInstant78, readableInstant79, periodType80);
        org.joda.time.DurationFieldType durationFieldType83 = periodType80.getFieldType((int) (short) 0);
        java.lang.String str84 = periodType80.toString();
        org.joda.time.Instant instant85 = new org.joda.time.Instant();
        org.joda.time.Instant instant87 = instant85.withMillis(0L);
        org.joda.time.Chronology chronology88 = instant87.getChronology();
        org.joda.time.Period period89 = new org.joda.time.Period((long) 53, (long) (-1), periodType80, chronology88);
        org.joda.time.DateTimeField dateTimeField90 = dateTimeFieldType75.getField(chronology88);
        java.util.Locale locale91 = java.util.Locale.UK;
        java.lang.String str92 = locale91.getDisplayLanguage();
        int int93 = dateTimeField90.getMaximumTextLength(locale91);
        mutableDateTime74.setRounding(dateTimeField90);
        org.joda.time.Duration duration95 = period65.toDurationFrom((org.joda.time.ReadableInstant) mutableDateTime74);
        org.joda.time.MutableDateTime.Property property96 = mutableDateTime74.centuryOfEra();
        org.joda.time.Interval interval97 = duration11.toIntervalFrom((org.joda.time.ReadableInstant) mutableDateTime74);
        mutableDateTime74.addMillis(190800000);
        org.junit.Assert.assertNotNull(instant2);
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(instant9);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2022 + "'", int29 == 2022);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "de");
// flaky:         org.junit.Assert.assertEquals("'" + str39 + "' != '" + "German" + "'", str39, "German");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "53" + "'", str40, "53");
        org.junit.Assert.assertNotNull(duration42);
        org.junit.Assert.assertNotNull(period43);
        org.junit.Assert.assertNotNull(duration46);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(instant56);
        org.junit.Assert.assertNotNull(duration60);
        org.junit.Assert.assertNotNull(period61);
        org.junit.Assert.assertNotNull(duration64);
        org.junit.Assert.assertNotNull(period67);
        org.junit.Assert.assertNotNull(mutableDateTime68);
        org.junit.Assert.assertNotNull(mutableDateTime71);
        org.junit.Assert.assertNotNull(property72);
        org.junit.Assert.assertNotNull(mutableDateTime73);
        org.junit.Assert.assertNotNull(mutableDateTime74);
        org.junit.Assert.assertNotNull(dateTimeFieldType75);
        org.junit.Assert.assertNotNull(periodType80);
        org.junit.Assert.assertNotNull(durationFieldType83);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "PeriodType[YearDayTime]" + "'", str84, "PeriodType[YearDayTime]");
        org.junit.Assert.assertNotNull(instant87);
        org.junit.Assert.assertNotNull(chronology88);
        org.junit.Assert.assertNotNull(dateTimeField90);
        org.junit.Assert.assertNotNull(locale91);
        org.junit.Assert.assertEquals(locale91.toString(), "en_GB");
// flaky:         org.junit.Assert.assertEquals("'" + str92 + "' != '" + "English" + "'", str92, "English");
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 4 + "'", int93 == 4);
        org.junit.Assert.assertNotNull(duration95);
        org.junit.Assert.assertNotNull(property96);
        org.junit.Assert.assertNotNull(interval97);
    }

    @Test
    public void test07800() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07800");
        java.lang.Object obj0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(obj0);
        boolean boolean3 = dateTime1.isBefore((long) 7);
        java.lang.String str4 = dateTime1.toString();
        org.joda.time.DateTime dateTime6 = dateTime1.minus((long) 7);
        org.joda.time.DateTime.Property property7 = dateTime1.millisOfSecond();
        org.joda.time.DateTime dateTime9 = property7.addToCopy(23);
        org.joda.time.Duration duration11 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration13 = org.joda.time.Duration.standardDays((long) (byte) 1);
        java.lang.String str14 = duration13.toString();
        boolean boolean15 = duration11.isShorterThan((org.joda.time.ReadableDuration) duration13);
        org.joda.time.Duration duration17 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period18 = duration17.toPeriod();
        org.joda.time.Duration duration20 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration22 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration25 = duration22.withDurationAdded((long) (short) 100, (int) ' ');
        boolean boolean26 = duration20.isLongerThan((org.joda.time.ReadableDuration) duration25);
        org.joda.time.Duration duration27 = duration17.minus((org.joda.time.ReadableDuration) duration20);
        boolean boolean28 = duration11.isShorterThan((org.joda.time.ReadableDuration) duration27);
        org.joda.time.ReadableDuration readableDuration29 = null;
        org.joda.time.ReadableInstant readableInstant30 = null;
        org.joda.time.Period period31 = new org.joda.time.Period(readableDuration29, readableInstant30);
        org.joda.time.Period period33 = period31.withDays((int) (byte) 1);
        org.joda.time.Duration duration35 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Hours hours36 = duration35.toStandardHours();
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime(chronology37);
        int int39 = dateTime38.getSecondOfMinute();
        org.joda.time.MutablePeriod mutablePeriod40 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration35, (org.joda.time.ReadableInstant) dateTime38);
        org.joda.time.Duration duration41 = period31.toDurationFrom((org.joda.time.ReadableInstant) dateTime38);
        org.joda.time.Duration duration43 = duration27.withDurationAdded((org.joda.time.ReadableDuration) duration41, (int) ' ');
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.DateTime dateTime45 = new org.joda.time.DateTime(chronology44);
        org.joda.time.DateTime dateTime47 = dateTime45.plusMinutes(15);
        org.joda.time.Chronology chronology48 = dateTime45.getChronology();
        org.joda.time.Instant instant49 = new org.joda.time.Instant();
        org.joda.time.Instant instant51 = instant49.withMillis(0L);
        org.joda.time.Chronology chronology52 = instant51.getChronology();
        org.joda.time.DurationField durationField53 = chronology52.eras();
        org.joda.time.LocalTime localTime54 = org.joda.time.LocalTime.now(chronology52);
        org.joda.time.DurationField durationField55 = chronology52.eras();
        org.joda.time.DateTimeField dateTimeField56 = chronology52.hourOfDay();
        org.joda.time.DateTime dateTime57 = dateTime45.withChronology(chronology52);
        org.joda.time.TimeOfDay timeOfDay58 = dateTime57.toTimeOfDay();
        org.joda.time.MutableDateTime mutableDateTime59 = dateTime57.toMutableDateTime();
        org.joda.time.Interval interval60 = duration27.toIntervalTo((org.joda.time.ReadableInstant) mutableDateTime59);
        boolean boolean61 = dateTime9.equals((java.lang.Object) interval60);
        org.joda.time.DateTime dateTime63 = dateTime9.withYearOfEra(26378);
        java.util.Date date64 = dateTime9.toDate();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "2022-02-22T07:23:55.993Z" + "'", str4, "2022-02-22T07:23:55.993Z");
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "PT86400S" + "'", str14, "PT86400S");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertNotNull(hours36);
// flaky:         org.junit.Assert.assertTrue("'" + int39 + "' != '" + 55 + "'", int39 == 55);
        org.junit.Assert.assertNotNull(duration41);
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertNotNull(instant51);
        org.junit.Assert.assertNotNull(chronology52);
        org.junit.Assert.assertNotNull(durationField53);
        org.junit.Assert.assertNotNull(localTime54);
        org.junit.Assert.assertNotNull(durationField55);
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(timeOfDay58);
        org.junit.Assert.assertNotNull(mutableDateTime59);
        org.junit.Assert.assertNotNull(interval60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(date64);
// flaky:         org.junit.Assert.assertEquals(date64.toString(), "Tue Feb 22 07:23:56 GMT+00:00 2022");
    }

    @Test
    public void test07801() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07801");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = java.util.Locale.GERMAN;
        java.util.Locale locale3 = java.util.Locale.CANADA;
        java.lang.String str4 = locale2.getDisplayVariant(locale3);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology1, locale3);
        java.lang.Object obj6 = dateTimeParserBucket5.saveState();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.LocalTime localTime9 = new org.joda.time.LocalTime((long) (short) 100, chronology8);
        org.joda.time.DurationFieldType durationFieldType10 = org.joda.time.DurationFieldType.weeks();
        java.lang.String str11 = durationFieldType10.getName();
        boolean boolean12 = localTime9.isSupported(durationFieldType10);
        boolean boolean13 = dateTimeParserBucket5.restoreState((java.lang.Object) boolean12);
        org.joda.time.Chronology chronology14 = dateTimeParserBucket5.getChronology();
        org.joda.time.MutableDateTime mutableDateTime15 = new org.joda.time.MutableDateTime(chronology14);
        org.joda.time.DateTimeField dateTimeField16 = mutableDateTime15.getRoundingField();
        org.joda.time.Duration duration18 = org.joda.time.Duration.standardMinutes((long) 36946953);
        org.joda.time.Duration duration20 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period21 = duration20.toPeriod();
        org.joda.time.Duration duration23 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration25 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration28 = duration25.withDurationAdded((long) (short) 100, (int) ' ');
        boolean boolean29 = duration23.isLongerThan((org.joda.time.ReadableDuration) duration28);
        org.joda.time.Duration duration30 = duration20.minus((org.joda.time.ReadableDuration) duration23);
        org.joda.time.Days days31 = duration20.toStandardDays();
        boolean boolean32 = duration18.isEqual((org.joda.time.ReadableDuration) duration20);
        org.joda.time.MutablePeriod mutablePeriod33 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) mutableDateTime15, (org.joda.time.ReadableDuration) duration18);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Seconds seconds34 = duration18.toStandardSeconds();
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Value cannot fit in an int: 2216817180");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "de");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertNotNull(durationFieldType10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "weeks" + "'", str11, "weeks");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNull(dateTimeField16);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertNotNull(days31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
    }

    @Test
    public void test07802() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07802");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property1 = mutableDateTime0.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime3 = property1.set(45);
        org.joda.time.MutableDateTime mutableDateTime4 = property1.roundFloor();
        org.joda.time.MutableDateTime mutableDateTime5 = property1.roundHalfEven();
        org.joda.time.MutableDateTime mutableDateTime6 = property1.roundHalfFloor();
        org.joda.time.MutableDateTime mutableDateTime7 = property1.roundHalfCeiling();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        java.util.TimeZone timeZone10 = dateTimeZone9.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.UTC;
        long long13 = dateTimeZone9.getMillisKeepLocal(dateTimeZone11, (long) 44);
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((long) 36, dateTimeZone11);
        mutableDateTime7.setZoneRetainFields(dateTimeZone11);
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(mutableDateTime3);
        org.junit.Assert.assertNotNull(mutableDateTime4);
        org.junit.Assert.assertNotNull(mutableDateTime5);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(mutableDateTime7);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(timeZone10);
// flaky:         org.junit.Assert.assertEquals(timeZone10.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 44L + "'", long13 == 44L);
    }

    @Test
    public void test07803() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07803");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) 1);
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period4 = duration3.toPeriod();
        org.joda.time.Duration duration7 = duration3.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Period period8 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime1, (org.joda.time.ReadableDuration) duration7);
        org.joda.time.Period period10 = period8.plusSeconds((int) (byte) 0);
        org.joda.time.MutableDateTime mutableDateTime11 = org.joda.time.MutableDateTime.now();
        mutableDateTime11.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime14 = mutableDateTime11.copy();
        org.joda.time.MutableDateTime.Property property15 = mutableDateTime11.weekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime16 = property15.roundHalfFloor();
        org.joda.time.MutableDateTime mutableDateTime17 = property15.roundHalfCeiling();
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.ReadableInstant readableInstant21 = null;
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.PeriodType periodType23 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod24 = new org.joda.time.MutablePeriod(readableInstant21, readableInstant22, periodType23);
        org.joda.time.DurationFieldType durationFieldType26 = periodType23.getFieldType((int) (short) 0);
        java.lang.String str27 = periodType23.toString();
        org.joda.time.Instant instant28 = new org.joda.time.Instant();
        org.joda.time.Instant instant30 = instant28.withMillis(0L);
        org.joda.time.Chronology chronology31 = instant30.getChronology();
        org.joda.time.Period period32 = new org.joda.time.Period((long) 53, (long) (-1), periodType23, chronology31);
        org.joda.time.DateTimeField dateTimeField33 = dateTimeFieldType18.getField(chronology31);
        java.util.Locale locale34 = java.util.Locale.UK;
        java.lang.String str35 = locale34.getDisplayLanguage();
        int int36 = dateTimeField33.getMaximumTextLength(locale34);
        mutableDateTime17.setRounding(dateTimeField33);
        org.joda.time.Duration duration38 = period8.toDurationFrom((org.joda.time.ReadableInstant) mutableDateTime17);
        org.joda.time.MutableDateTime.Property property39 = mutableDateTime17.centuryOfEra();
        org.joda.time.MutablePeriod mutablePeriod44 = new org.joda.time.MutablePeriod(999, (int) (short) -1, 0, (int) (short) -1);
        org.joda.time.Instant instant46 = new org.joda.time.Instant();
        org.joda.time.Instant instant48 = instant46.withMillis(0L);
        org.joda.time.Chronology chronology49 = instant48.getChronology();
        org.joda.time.DurationField durationField50 = chronology49.eras();
        org.joda.time.LocalTime localTime51 = org.joda.time.LocalTime.now(chronology49);
        org.joda.time.DurationField durationField52 = chronology49.eras();
        mutablePeriod44.setPeriod((long) 999, chronology49);
        org.joda.time.MutablePeriod mutablePeriod58 = new org.joda.time.MutablePeriod((int) (byte) -1, (int) (byte) 1, 44, (int) ' ');
        mutablePeriod58.addDays((int) (byte) 10);
        mutablePeriod58.addMillis((int) '4');
        mutablePeriod58.setSeconds((int) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone65 = null;
        org.joda.time.LocalTime localTime66 = new org.joda.time.LocalTime(dateTimeZone65);
        org.joda.time.ReadablePeriod readablePeriod67 = null;
        org.joda.time.LocalTime localTime68 = localTime66.plus(readablePeriod67);
        org.joda.time.ReadableInstant readableInstant69 = null;
        org.joda.time.ReadableInstant readableInstant70 = null;
        org.joda.time.PeriodType periodType71 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod72 = new org.joda.time.MutablePeriod(readableInstant69, readableInstant70, periodType71);
        org.joda.time.DurationFieldType durationFieldType74 = periodType71.getFieldType((int) (short) 0);
        boolean boolean75 = localTime66.isSupported(durationFieldType74);
        mutablePeriod58.add(durationFieldType74, 8);
        boolean boolean78 = mutablePeriod44.isSupported(durationFieldType74);
        mutablePeriod44.addWeeks(443);
        mutableDateTime17.add((org.joda.time.ReadablePeriod) mutablePeriod44, 26176);
        int int83 = mutableDateTime17.getDayOfYear();
        mutableDateTime17.addWeekyears(26);
        org.joda.time.DateTimeFieldType dateTimeFieldType86 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.DurationFieldType durationFieldType87 = dateTimeFieldType86.getDurationType();
        int int88 = mutableDateTime17.get(dateTimeFieldType86);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertNotNull(mutableDateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(mutableDateTime16);
        org.junit.Assert.assertNotNull(mutableDateTime17);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertNotNull(periodType23);
        org.junit.Assert.assertNotNull(durationFieldType26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "PeriodType[YearDayTime]" + "'", str27, "PeriodType[YearDayTime]");
        org.junit.Assert.assertNotNull(instant30);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "en_GB");
// flaky:         org.junit.Assert.assertEquals("'" + str35 + "' != '" + "English" + "'", str35, "English");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 4 + "'", int36 == 4);
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(instant48);
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertNotNull(durationField50);
        org.junit.Assert.assertNotNull(localTime51);
        org.junit.Assert.assertNotNull(durationField52);
        org.junit.Assert.assertNotNull(localTime68);
        org.junit.Assert.assertNotNull(periodType71);
        org.junit.Assert.assertNotNull(durationFieldType74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 335 + "'", int83 == 335);
        org.junit.Assert.assertNotNull(dateTimeFieldType86);
        org.junit.Assert.assertNotNull(durationFieldType87);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 224288 + "'", int88 == 224288);
    }

    @Test
    public void test07804() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07804");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period2 = duration1.toPeriod();
        org.joda.time.Duration duration5 = duration1.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Period period6 = duration1.toPeriod();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.dayOfMonth();
        boolean boolean9 = localDate7.isSupported(dateTimeFieldType8);
        org.joda.time.LocalDate.Property property10 = localDate7.yearOfEra();
        org.joda.time.Instant instant11 = new org.joda.time.Instant();
        org.joda.time.Instant instant13 = instant11.withMillis(0L);
        org.joda.time.Duration duration15 = org.joda.time.Duration.standardDays((long) (byte) 1);
        java.lang.String str16 = duration15.toString();
        org.joda.time.Instant instant17 = instant11.minus((org.joda.time.ReadableDuration) duration15);
        int int18 = property10.getDifference((org.joda.time.ReadableInstant) instant11);
        org.joda.time.Duration duration21 = new org.joda.time.Duration((long) (short) -1, (long) (-292275054));
        org.joda.time.Instant instant22 = instant11.plus((org.joda.time.ReadableDuration) duration21);
        org.joda.time.Duration duration24 = org.joda.time.Duration.standardDays((long) (byte) 1);
        java.lang.String str25 = duration24.toString();
        org.joda.time.Duration duration27 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Hours hours28 = duration27.toStandardHours();
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime(chronology29);
        int int31 = dateTime30.getSecondOfMinute();
        org.joda.time.MutablePeriod mutablePeriod32 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration27, (org.joda.time.ReadableInstant) dateTime30);
        org.joda.time.Duration duration33 = duration24.plus((org.joda.time.ReadableDuration) duration27);
        org.joda.time.Duration duration35 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period36 = duration35.toPeriod();
        org.joda.time.Duration duration38 = duration35.minus((long) 292278993);
        org.joda.time.MutableDateTime mutableDateTime39 = org.joda.time.MutableDateTime.now();
        mutableDateTime39.add((long) 'a');
        org.joda.time.MutableDateTime.Property property42 = mutableDateTime39.yearOfCentury();
        org.joda.time.Duration duration44 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period45 = duration44.toPeriod();
        org.joda.time.Duration duration47 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration50 = duration47.withDurationAdded((long) (short) 100, (int) ' ');
        org.joda.time.Duration duration51 = duration44.minus((org.joda.time.ReadableDuration) duration50);
        mutableDateTime39.add((org.joda.time.ReadableDuration) duration44);
        boolean boolean53 = duration38.isShorterThan((org.joda.time.ReadableDuration) duration44);
        boolean boolean54 = duration27.isLongerThan((org.joda.time.ReadableDuration) duration38);
        org.joda.time.Instant instant55 = instant22.minus((org.joda.time.ReadableDuration) duration38);
        org.joda.time.Duration duration57 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Hours hours58 = duration57.toStandardHours();
        org.joda.time.Chronology chronology59 = null;
        org.joda.time.DateTime dateTime60 = new org.joda.time.DateTime(chronology59);
        int int61 = dateTime60.getSecondOfMinute();
        org.joda.time.MutablePeriod mutablePeriod62 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration57, (org.joda.time.ReadableInstant) dateTime60);
        org.joda.time.DateTime dateTime64 = dateTime60.plus(0L);
        org.joda.time.Instant instant65 = dateTime64.toInstant();
        boolean boolean66 = instant22.isAfter((org.joda.time.ReadableInstant) instant65);
        org.joda.time.Duration duration68 = org.joda.time.Duration.standardDays(1028704L);
        org.joda.time.Instant instant69 = instant22.plus((org.joda.time.ReadableDuration) duration68);
        boolean boolean70 = duration1.isLongerThan((org.joda.time.ReadableDuration) duration68);
        long long71 = duration1.getMillis();
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(period2);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(instant13);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "PT86400S" + "'", str16, "PT86400S");
        org.junit.Assert.assertNotNull(instant17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(instant22);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "PT86400S" + "'", str25, "PT86400S");
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertNotNull(hours28);
// flaky:         org.junit.Assert.assertTrue("'" + int31 + "' != '" + 56 + "'", int31 == 56);
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertNotNull(period36);
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertNotNull(mutableDateTime39);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(duration44);
        org.junit.Assert.assertNotNull(period45);
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertNotNull(duration50);
        org.junit.Assert.assertNotNull(duration51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(instant55);
        org.junit.Assert.assertNotNull(duration57);
        org.junit.Assert.assertNotNull(hours58);
// flaky:         org.junit.Assert.assertTrue("'" + int61 + "' != '" + 56 + "'", int61 == 56);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(instant65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(duration68);
        org.junit.Assert.assertNotNull(instant69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + 86400000L + "'", long71 == 86400000L);
    }

    @Test
    public void test07805() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07805");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) (short) -1);
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardDays((long) (byte) 1);
        java.lang.String str4 = duration3.toString();
        mutableDateTime1.add((org.joda.time.ReadableDuration) duration3, 8);
        mutableDateTime1.addSeconds(1970);
        mutableDateTime1.setMillisOfSecond(49);
        mutableDateTime1.addWeeks(33471);
        mutableDateTime1.setSecondOfDay(600);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "PT86400S" + "'", str4, "PT86400S");
    }

    @Test
    public void test07806() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07806");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Hours hours2 = duration1.toStandardHours();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime(chronology3);
        int int5 = dateTime4.getSecondOfMinute();
        org.joda.time.MutablePeriod mutablePeriod6 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration1, (org.joda.time.ReadableInstant) dateTime4);
        org.joda.time.DateTime dateTime8 = dateTime4.plus(0L);
        org.joda.time.Instant instant9 = dateTime8.toInstant();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetHours(100);
        org.joda.time.MutableDateTime mutableDateTime12 = dateTime8.toMutableDateTime(dateTimeZone11);
        org.joda.time.MutableDateTime mutableDateTime14 = new org.joda.time.MutableDateTime((long) (-292275054));
        java.io.IOException iOException16 = new java.io.IOException("");
        java.io.IOException iOException17 = new java.io.IOException((java.lang.Throwable) iOException16);
        boolean boolean18 = mutableDateTime14.equals((java.lang.Object) iOException16);
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property20 = localDate19.monthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.minuteOfDay();
        boolean boolean22 = localDate19.isSupported(dateTimeFieldType21);
        org.joda.time.DurationFieldType durationFieldType23 = dateTimeFieldType21.getRangeDurationType();
        mutableDateTime14.set(dateTimeFieldType21, 4);
        java.lang.String str26 = dateTimeFieldType21.getName();
        org.joda.time.DurationFieldType durationFieldType27 = dateTimeFieldType21.getRangeDurationType();
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime12.set(dateTimeFieldType21, 26353940);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26353940 for minuteOfDay must be in the range [0,1439]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(hours2);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 56 + "'", int5 == 56);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(instant9);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(mutableDateTime12);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(durationFieldType23);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "minuteOfDay" + "'", str26, "minuteOfDay");
        org.junit.Assert.assertNotNull(durationFieldType27);
    }

    @Test
    public void test07807() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07807");
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.ReadableInstant readableInstant11 = null;
        org.joda.time.Period period12 = new org.joda.time.Period(readableDuration10, readableInstant11);
        org.joda.time.PeriodType periodType15 = null;
        org.joda.time.Period period16 = new org.joda.time.Period((long) 100, 1L, periodType15);
        org.joda.time.Period period18 = period16.minusSeconds((-1));
        java.lang.String str19 = period16.toString();
        org.joda.time.Period period20 = period16.toPeriod();
        org.joda.time.PeriodType periodType21 = period16.getPeriodType();
        org.joda.time.Period period22 = period12.normalizedStandard(periodType21);
        java.lang.String str23 = periodType21.getName();
        java.lang.String str24 = periodType21.toString();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime(chronology26);
        org.joda.time.DateTime dateTime29 = dateTime27.plusMinutes(15);
        org.joda.time.Chronology chronology30 = dateTime27.getChronology();
        java.lang.String str31 = chronology30.toString();
        org.joda.time.DateTimeFieldType dateTimeFieldType32 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.ReadableInstant readableInstant35 = null;
        org.joda.time.ReadableInstant readableInstant36 = null;
        org.joda.time.PeriodType periodType37 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod38 = new org.joda.time.MutablePeriod(readableInstant35, readableInstant36, periodType37);
        org.joda.time.DurationFieldType durationFieldType40 = periodType37.getFieldType((int) (short) 0);
        java.lang.String str41 = periodType37.toString();
        org.joda.time.Instant instant42 = new org.joda.time.Instant();
        org.joda.time.Instant instant44 = instant42.withMillis(0L);
        org.joda.time.Chronology chronology45 = instant44.getChronology();
        org.joda.time.Period period46 = new org.joda.time.Period((long) 53, (long) (-1), periodType37, chronology45);
        org.joda.time.DateTimeField dateTimeField47 = dateTimeFieldType32.getField(chronology45);
        java.util.Locale locale48 = java.util.Locale.UK;
        java.lang.String str49 = locale48.getDisplayLanguage();
        int int50 = dateTimeField47.getMaximumTextLength(locale48);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket51 = new org.joda.time.format.DateTimeParserBucket(3155695200000L, chronology30, locale48);
        org.joda.time.LocalDate localDate52 = new org.joda.time.LocalDate(chronology30);
        org.joda.time.MutablePeriod mutablePeriod53 = new org.joda.time.MutablePeriod((long) 52, 946312L, periodType21, chronology30);
        org.joda.time.MutablePeriod mutablePeriod54 = new org.joda.time.MutablePeriod(57, (int) '4', (-99), (int) ' ', 57, 44, (int) (short) 0, (int) (short) -1, periodType21);
        org.joda.time.MutableDateTime mutableDateTime55 = org.joda.time.MutableDateTime.now();
        mutableDateTime55.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime58 = mutableDateTime55.copy();
        org.joda.time.MutableDateTime.Property property59 = mutableDateTime55.yearOfEra();
        org.joda.time.MutableDateTime mutableDateTime60 = property59.getMutableDateTime();
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.DateTime dateTime62 = new org.joda.time.DateTime(chronology61);
        org.joda.time.DateTime dateTime64 = dateTime62.plusMinutes(15);
        mutablePeriod54.setPeriod((org.joda.time.ReadableInstant) mutableDateTime60, (org.joda.time.ReadableInstant) dateTime62);
        mutablePeriod54.setDays(36950209);
        mutablePeriod54.setMonths(62262);
        mutablePeriod54.setPeriod(1989, 26471738, 26495254, 33824, 133, 26466, 38560276, 62479);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "PT0.099S" + "'", str19, "PT0.099S");
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(periodType21);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Standard" + "'", str23, "Standard");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "PeriodType[Standard]" + "'", str24, "PeriodType[Standard]");
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "ISOChronology[UTC]" + "'", str31, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeFieldType32);
        org.junit.Assert.assertNotNull(periodType37);
        org.junit.Assert.assertNotNull(durationFieldType40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "PeriodType[YearDayTime]" + "'", str41, "PeriodType[YearDayTime]");
        org.junit.Assert.assertNotNull(instant44);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "en_GB");
// flaky:         org.junit.Assert.assertEquals("'" + str49 + "' != '" + "English" + "'", str49, "English");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 4 + "'", int50 == 4);
        org.junit.Assert.assertNotNull(mutableDateTime55);
        org.junit.Assert.assertNotNull(mutableDateTime58);
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertNotNull(mutableDateTime60);
        org.junit.Assert.assertNotNull(dateTime64);
    }

    @Test
    public void test07808() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07808");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property1 = mutableDateTime0.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime2 = property1.getMutableDateTime();
        org.joda.time.DateTimeField dateTimeField3 = property1.getField();
        int int4 = property1.getLeapAmount();
        org.joda.time.MutableDateTime mutableDateTime6 = property1.add((int) (byte) 1);
        org.joda.time.MutableDateTime mutableDateTime8 = property1.add((int) (short) 1);
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime8.era();
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(mutableDateTime2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(mutableDateTime8);
        org.junit.Assert.assertNotNull(property9);
    }

    @Test
    public void test07809() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07809");
        org.joda.time.LocalDateTime localDateTime8 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.withCenturyOfEra((int) 'a');
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime(chronology15);
        org.joda.time.DateTime dateTime18 = dateTime16.plusMinutes(15);
        org.joda.time.DateTime dateTime19 = localDateTime12.toDateTime((org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime21 = localDateTime12.toDateTime(dateTimeZone20);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime12.minusWeeks(10);
        org.joda.time.LocalDateTime localDateTime24 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime26 = localDateTime24.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime26.withHourOfDay(10);
        int int29 = localDateTime28.getMinuteOfHour();
        boolean boolean30 = localDateTime12.isAfter((org.joda.time.ReadablePartial) localDateTime28);
        java.lang.Object obj31 = null;
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.UTC;
        java.util.Locale locale34 = java.util.Locale.GERMAN;
        java.lang.String str35 = locale34.getDisplayName();
        java.lang.String str36 = dateTimeZone32.getName(100L, locale34);
        org.joda.time.LocalDateTime localDateTime37 = new org.joda.time.LocalDateTime(obj31, dateTimeZone32);
        org.joda.time.LocalDateTime localDateTime38 = org.joda.time.LocalDateTime.now(dateTimeZone32);
        org.joda.time.MutableDateTime mutableDateTime39 = org.joda.time.MutableDateTime.now();
        mutableDateTime39.add((long) 'a');
        org.joda.time.Duration duration43 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration45 = org.joda.time.Duration.standardDays((long) (byte) 1);
        java.lang.String str46 = duration45.toString();
        boolean boolean47 = duration43.isShorterThan((org.joda.time.ReadableDuration) duration45);
        org.joda.time.Hours hours48 = duration43.toStandardHours();
        mutableDateTime39.add((org.joda.time.ReadableDuration) duration43, 20);
        mutableDateTime39.setMillisOfDay(36946953);
        org.joda.time.DateTimeField dateTimeField53 = mutableDateTime39.getRoundingField();
        org.joda.time.Duration duration55 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period56 = duration55.toPeriod();
        org.joda.time.Duration duration59 = duration55.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Duration duration61 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration64 = duration61.withDurationAdded((long) (short) 100, (int) ' ');
        boolean boolean65 = duration59.isLongerThan((org.joda.time.ReadableDuration) duration61);
        org.joda.time.Period period66 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime39, (org.joda.time.ReadableDuration) duration61);
        org.joda.time.LocalDateTime localDateTime67 = localDateTime38.plus((org.joda.time.ReadableDuration) duration61);
        org.joda.time.ReadableInstant readableInstant70 = null;
        org.joda.time.ReadableInstant readableInstant71 = null;
        org.joda.time.PeriodType periodType72 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod73 = new org.joda.time.MutablePeriod(readableInstant70, readableInstant71, periodType72);
        org.joda.time.DurationFieldType durationFieldType75 = periodType72.getFieldType((int) (short) 0);
        java.lang.String str76 = periodType72.toString();
        org.joda.time.Instant instant77 = new org.joda.time.Instant();
        org.joda.time.Instant instant79 = instant77.withMillis(0L);
        org.joda.time.Chronology chronology80 = instant79.getChronology();
        org.joda.time.Period period81 = new org.joda.time.Period((long) 53, (long) (-1), periodType72, chronology80);
        org.joda.time.PeriodType periodType82 = periodType72.withMonthsRemoved();
        org.joda.time.Period period83 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDateTime28, (org.joda.time.ReadablePartial) localDateTime67, periodType82);
        org.joda.time.PeriodType periodType84 = periodType82.withYearsRemoved();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutablePeriod mutablePeriod85 = new org.joda.time.MutablePeriod(37347767, 15659374, 26542, 703, 543, 26426649, 26209742, 2191499, periodType82);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Period does not support field 'months'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime28);
// flaky:         org.junit.Assert.assertTrue("'" + int29 + "' != '" + 23 + "'", int29 == 23);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "de");
// flaky:         org.junit.Assert.assertEquals("'" + str35 + "' != '" + "German" + "'", str35, "German");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "+00:00" + "'", str36, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(mutableDateTime39);
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertNotNull(duration45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "PT86400S" + "'", str46, "PT86400S");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(hours48);
        org.junit.Assert.assertNull(dateTimeField53);
        org.junit.Assert.assertNotNull(duration55);
        org.junit.Assert.assertNotNull(period56);
        org.junit.Assert.assertNotNull(duration59);
        org.junit.Assert.assertNotNull(duration61);
        org.junit.Assert.assertNotNull(duration64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(localDateTime67);
        org.junit.Assert.assertNotNull(periodType72);
        org.junit.Assert.assertNotNull(durationFieldType75);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "PeriodType[YearDayTime]" + "'", str76, "PeriodType[YearDayTime]");
        org.junit.Assert.assertNotNull(instant79);
        org.junit.Assert.assertNotNull(chronology80);
        org.junit.Assert.assertNotNull(periodType82);
        org.junit.Assert.assertNotNull(periodType84);
    }

    @Test
    public void test07810() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07810");
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime();
        org.joda.time.MutableDateTime.Property property1 = mutableDateTime0.millisOfSecond();
        mutableDateTime0.setMinuteOfHour(37);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.LocalTime localTime6 = new org.joda.time.LocalTime((long) (short) 100, chronology5);
        int int7 = localTime6.getMillisOfDay();
        org.joda.time.LocalTime.Property property8 = localTime6.millisOfSecond();
        org.joda.time.DurationField durationField9 = property8.getLeapDurationField();
        org.joda.time.LocalTime localTime10 = property8.getLocalTime();
        org.joda.time.LocalTime.Property property11 = localTime10.millisOfDay();
        org.joda.time.LocalTime localTime12 = property11.roundHalfFloorCopy();
        java.lang.String str13 = property11.getAsShortText();
        org.joda.time.LocalTime localTime15 = property11.addCopy(4801285254589L);
        boolean boolean16 = mutableDateTime0.equals((java.lang.Object) localTime15);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 100 + "'", int7 == 100);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNull(durationField9);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "100" + "'", str13, "100");
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test07811() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07811");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) 1);
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period4 = duration3.toPeriod();
        org.joda.time.Duration duration7 = duration3.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Period period8 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime1, (org.joda.time.ReadableDuration) duration7);
        org.joda.time.Duration duration10 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration12 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration15 = duration12.withDurationAdded((long) (short) 100, (int) ' ');
        boolean boolean16 = duration10.isLongerThan((org.joda.time.ReadableDuration) duration15);
        org.joda.time.Minutes minutes17 = duration10.toStandardMinutes();
        org.joda.time.Period period18 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime1, (org.joda.time.ReadableDuration) duration10);
        org.joda.time.MutableDateTime mutableDateTime19 = org.joda.time.MutableDateTime.now();
        mutableDateTime19.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime22 = mutableDateTime19.copy();
        org.joda.time.MutableDateTime.Property property23 = mutableDateTime19.weekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime24 = property23.roundHalfFloor();
        org.joda.time.MutableDateTime mutableDateTime26 = property23.add((long) (byte) 10);
        int int27 = mutableDateTime26.getCenturyOfEra();
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.LocalDateTime localDateTime30 = new org.joda.time.LocalDateTime((long) (byte) -1, chronology29);
        org.joda.time.LocalDateTime localDateTime32 = localDateTime30.plusMonths(46);
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = org.joda.time.DateTimeFieldType.minuteOfDay();
        int int34 = localDateTime32.get(dateTimeFieldType33);
        org.joda.time.LocalDateTime localDateTime36 = localDateTime32.plusMinutes(7);
        org.joda.time.PeriodType periodType39 = null;
        org.joda.time.Period period40 = new org.joda.time.Period((long) 100, 1L, periodType39);
        org.joda.time.Period period42 = period40.minusSeconds((-1));
        org.joda.time.Period period44 = period42.multipliedBy((int) '#');
        org.joda.time.LocalDateTime localDateTime45 = localDateTime32.minus((org.joda.time.ReadablePeriod) period44);
        org.joda.time.Period period47 = period44.withWeeks(7);
        org.joda.time.MutablePeriod mutablePeriod56 = new org.joda.time.MutablePeriod(999, 12, 8, (int) (byte) 10, 5, (-292275054), 15, 50);
        org.joda.time.Period period57 = period47.withFields((org.joda.time.ReadablePeriod) mutablePeriod56);
        mutableDateTime26.add((org.joda.time.ReadablePeriod) mutablePeriod56);
        boolean boolean59 = duration10.equals((java.lang.Object) mutablePeriod56);
        org.joda.time.MutableDateTime mutableDateTime60 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property61 = mutableDateTime60.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime63 = property61.set(45);
        org.joda.time.MutableDateTime mutableDateTime64 = property61.roundFloor();
        org.joda.time.MutableDateTime mutableDateTime66 = property61.add(45);
        java.lang.String str67 = mutableDateTime66.toString();
        org.joda.time.MutableDateTime mutableDateTime68 = org.joda.time.MutableDateTime.now();
        mutableDateTime68.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime71 = mutableDateTime68.copy();
        org.joda.time.ReadableDuration readableDuration72 = null;
        org.joda.time.ReadableInstant readableInstant73 = null;
        org.joda.time.Period period74 = new org.joda.time.Period(readableDuration72, readableInstant73);
        org.joda.time.Period period76 = period74.withDays((int) (byte) 1);
        org.joda.time.Period period78 = period74.minusMillis(1424);
        mutableDateTime68.add((org.joda.time.ReadablePeriod) period74);
        mutableDateTime66.add((org.joda.time.ReadablePeriod) period74);
        org.joda.time.MutableDateTime.Property property81 = mutableDateTime66.year();
        org.joda.time.MutableDateTime mutableDateTime82 = property81.roundCeiling();
        boolean boolean84 = mutableDateTime82.equals((java.lang.Object) 1973);
        org.joda.time.Interval interval85 = duration10.toIntervalFrom((org.joda.time.ReadableInstant) mutableDateTime82);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(minutes17);
        org.junit.Assert.assertNotNull(mutableDateTime19);
        org.junit.Assert.assertNotNull(mutableDateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(mutableDateTime24);
        org.junit.Assert.assertNotNull(mutableDateTime26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 20 + "'", int27 == 20);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(dateTimeFieldType33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1439 + "'", int34 == 1439);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(period42);
        org.junit.Assert.assertNotNull(period44);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(period47);
        org.junit.Assert.assertNotNull(period57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(mutableDateTime60);
        org.junit.Assert.assertNotNull(property61);
        org.junit.Assert.assertNotNull(mutableDateTime63);
        org.junit.Assert.assertNotNull(mutableDateTime64);
        org.junit.Assert.assertNotNull(mutableDateTime66);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "9000-01-01T00:00:00.000Z" + "'", str67, "9000-01-01T00:00:00.000Z");
        org.junit.Assert.assertNotNull(mutableDateTime68);
        org.junit.Assert.assertNotNull(mutableDateTime71);
        org.junit.Assert.assertNotNull(period76);
        org.junit.Assert.assertNotNull(period78);
        org.junit.Assert.assertNotNull(property81);
        org.junit.Assert.assertNotNull(mutableDateTime82);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(interval85);
    }

    @Test
    public void test07812() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07812");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.add((long) 'a');
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime0.yearOfCentury();
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period6 = duration5.toPeriod();
        org.joda.time.Duration duration8 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration11 = duration8.withDurationAdded((long) (short) 100, (int) ' ');
        org.joda.time.Duration duration12 = duration5.minus((org.joda.time.ReadableDuration) duration11);
        mutableDateTime0.add((org.joda.time.ReadableDuration) duration5);
        org.joda.time.MutableDateTime.Property property14 = mutableDateTime0.centuryOfEra();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime(chronology15);
        int int17 = dateTime16.getYearOfCentury();
        org.joda.time.DateTime dateTime19 = dateTime16.withSecondOfMinute(53);
        org.joda.time.Duration duration21 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period22 = duration21.toPeriod();
        org.joda.time.Duration duration24 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration27 = duration24.withDurationAdded((long) (short) 100, (int) ' ');
        org.joda.time.Duration duration28 = duration21.minus((org.joda.time.ReadableDuration) duration27);
        org.joda.time.ReadableInstant readableInstant29 = null;
        org.joda.time.ReadableInstant readableInstant30 = null;
        org.joda.time.PeriodType periodType31 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod32 = new org.joda.time.MutablePeriod(readableInstant29, readableInstant30, periodType31);
        org.joda.time.DurationFieldType durationFieldType34 = periodType31.getFieldType((int) (short) 0);
        java.lang.String str35 = periodType31.toString();
        org.joda.time.Period period36 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime16, (org.joda.time.ReadableDuration) duration21, periodType31);
        mutableDateTime0.add((org.joda.time.ReadableDuration) duration21);
        mutableDateTime0.addWeekyears(21);
        org.joda.time.MutableDateTime.Property property40 = mutableDateTime0.weekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime42 = property40.set(44);
        org.joda.time.MutableDateTime mutableDateTime43 = property40.getMutableDateTime();
        org.joda.time.MutableDateTime.Property property44 = mutableDateTime43.millisOfSecond();
        int int45 = mutableDateTime43.getDayOfYear();
        int int46 = mutableDateTime43.getWeekOfWeekyear();
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.DateTime dateTime49 = new org.joda.time.DateTime(chronology48);
        int int50 = dateTime49.getYearOfCentury();
        int int51 = dateTime49.getWeekyear();
        org.joda.time.DateTime dateTime52 = dateTime49.withEarlierOffsetAtOverlap();
        java.lang.String str53 = dateTime52.toString();
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.DateTime dateTime55 = new org.joda.time.DateTime(chronology54);
        int int56 = dateTime55.getYearOfCentury();
        int int57 = dateTime55.getWeekyear();
        org.joda.time.DateTime dateTime58 = dateTime55.withEarlierOffsetAtOverlap();
        java.lang.String str59 = dateTime58.toString();
        org.joda.time.MutableDateTime mutableDateTime60 = dateTime58.toMutableDateTime();
        org.joda.time.DateTimeZone dateTimeZone61 = org.joda.time.DateTimeZone.UTC;
        boolean boolean62 = dateTimeZone61.isFixed();
        mutableDateTime60.setZoneRetainFields(dateTimeZone61);
        org.joda.time.DateTime dateTime64 = dateTime52.toDateTime(dateTimeZone61);
        long long66 = dateTimeZone61.nextTransition((long) 21);
        org.joda.time.DateTime dateTime67 = new org.joda.time.DateTime(3155760000000L, dateTimeZone61);
        org.joda.time.DateTime dateTime69 = dateTime67.minusSeconds(25);
        org.joda.time.DateTime.Property property70 = dateTime67.year();
        org.joda.time.DateTime dateTime72 = dateTime67.minusMillis(26198);
        org.joda.time.Period period73 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime43, (org.joda.time.ReadableInstant) dateTime67);
        org.joda.time.DateTime dateTime74 = mutableDateTime43.toDateTime();
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 22 + "'", int17 == 22);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(periodType31);
        org.junit.Assert.assertNotNull(durationFieldType34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "PeriodType[YearDayTime]" + "'", str35, "PeriodType[YearDayTime]");
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(mutableDateTime42);
        org.junit.Assert.assertNotNull(mutableDateTime43);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 302 + "'", int45 == 302);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 44 + "'", int46 == 44);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 22 + "'", int50 == 22);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 2022 + "'", int51 == 2022);
        org.junit.Assert.assertNotNull(dateTime52);
// flaky:         org.junit.Assert.assertEquals("'" + str53 + "' != '" + "2022-02-22T07:23:56.281Z" + "'", str53, "2022-02-22T07:23:56.281Z");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 22 + "'", int56 == 22);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 2022 + "'", int57 == 2022);
        org.junit.Assert.assertNotNull(dateTime58);
// flaky:         org.junit.Assert.assertEquals("'" + str59 + "' != '" + "2022-02-22T07:23:56.281Z" + "'", str59, "2022-02-22T07:23:56.281Z");
        org.junit.Assert.assertNotNull(mutableDateTime60);
        org.junit.Assert.assertNotNull(dateTimeZone61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 21L + "'", long66 == 21L);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(property70);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertNotNull(dateTime74);
    }

    @Test
    public void test07813() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07813");
        java.lang.Object obj0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(obj0);
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.withHourOfDay(10);
        org.joda.time.DateTimeField dateTimeField8 = localDateTime6.getField((int) (byte) 0);
        long long10 = dateTimeField8.roundHalfEven((long) 1);
        int int11 = dateTime1.get(dateTimeField8);
        boolean boolean12 = dateTime1.isBeforeNow();
        org.joda.time.DateTime dateTime14 = dateTime1.minusYears(8);
        org.joda.time.DateTime dateTime16 = dateTime1.withYearOfEra(1380);
        org.joda.time.MutableDateTime mutableDateTime17 = dateTime1.toMutableDateTimeISO();
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2022 + "'", int11 == 2022);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(mutableDateTime17);
    }

    @Test
    public void test07814() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07814");
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.LocalTime localTime4 = new org.joda.time.LocalTime(dateTimeZone3);
        org.joda.time.LocalTime localTime6 = localTime4.minusHours((int) (byte) 100);
        org.joda.time.Chronology chronology7 = localTime6.getChronology();
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod((long) 45, 949680L, chronology7);
        org.joda.time.DateTimeField dateTimeField9 = chronology7.millisOfDay();
        long long13 = chronology7.add((long) 5, (long) '#', (int) (byte) 0);
        org.joda.time.DurationField durationField14 = chronology7.months();
        org.joda.time.MutableDateTime mutableDateTime15 = new org.joda.time.MutableDateTime(26333L, chronology7);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 5L + "'", long13 == 5L);
        org.junit.Assert.assertNotNull(durationField14);
    }

    @Test
    public void test07815() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07815");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.add((long) 'a');
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime0.yearOfCentury();
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period6 = duration5.toPeriod();
        org.joda.time.Duration duration8 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration11 = duration8.withDurationAdded((long) (short) 100, (int) ' ');
        org.joda.time.Duration duration12 = duration5.minus((org.joda.time.ReadableDuration) duration11);
        mutableDateTime0.add((org.joda.time.ReadableDuration) duration5);
        org.joda.time.MutableDateTime.Property property14 = mutableDateTime0.centuryOfEra();
        mutableDateTime0.addHours((int) (byte) 10);
        mutableDateTime0.addWeeks(20);
        org.joda.time.DateTimeField dateTimeField19 = mutableDateTime0.getRoundingField();
        org.joda.time.MutableDateTime mutableDateTime20 = org.joda.time.MutableDateTime.now();
        java.lang.Object obj21 = mutableDateTime20.clone();
        mutableDateTime20.setTime((long) 46);
        org.joda.time.MutableDateTime.Property property24 = mutableDateTime20.dayOfWeek();
        org.joda.time.MutableDateTime mutableDateTime26 = property24.add(1L);
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.UTC;
        java.util.TimeZone timeZone28 = dateTimeZone27.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.UTC;
        long long31 = dateTimeZone27.getMillisKeepLocal(dateTimeZone29, (long) 44);
        org.joda.time.DateTime dateTime32 = org.joda.time.DateTime.now(dateTimeZone27);
        mutableDateTime26.setZoneRetainFields(dateTimeZone27);
        mutableDateTime26.addSeconds((int) (short) 10);
        java.lang.Object obj36 = mutableDateTime26.clone();
        org.joda.time.MutableDateTime.Property property37 = mutableDateTime26.era();
        boolean boolean38 = mutableDateTime0.isAfter((org.joda.time.ReadableInstant) mutableDateTime26);
        mutableDateTime26.setYear(2);
        org.joda.time.MutableDateTime.Property property41 = mutableDateTime26.dayOfYear();
        org.joda.time.MutableDateTime mutableDateTime42 = property41.roundHalfCeiling();
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.DateTime dateTime44 = new org.joda.time.DateTime(chronology43);
        org.joda.time.DateTime dateTime46 = dateTime44.plusMinutes(15);
        org.joda.time.Chronology chronology47 = dateTime44.getChronology();
        org.joda.time.DateTime dateTime49 = dateTime44.plusHours(19045);
        org.joda.time.DateTime dateTime51 = dateTime49.minus(51L);
        org.joda.time.DateTime dateTime53 = dateTime49.minusMillis(2016);
        mutableDateTime42.setDate((org.joda.time.ReadableInstant) dateTime53);
        org.joda.time.MutableDateTime.Property property55 = mutableDateTime42.millisOfDay();
        mutableDateTime42.setMillis((long) 26559761);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime42.setMinuteOfDay(26427838);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26427838 for minuteOfDay must be in the range [0,1439]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNull(dateTimeField19);
        org.junit.Assert.assertNotNull(mutableDateTime20);
        org.junit.Assert.assertNotNull(obj21);
// flaky:         org.junit.Assert.assertEquals(obj21.toString(), "2022-02-22T07:23:56.428Z");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj21), "2022-02-22T07:23:56.428Z");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj21), "2022-02-22T07:23:56.428Z");
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(mutableDateTime26);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertNotNull(timeZone28);
// flaky:         org.junit.Assert.assertEquals(timeZone28.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 44L + "'", long31 == 44L);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(obj36);
        org.junit.Assert.assertEquals(obj36.toString(), "2022-02-23T00:00:10.046Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj36), "2022-02-23T00:00:10.046Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj36), "2022-02-23T00:00:10.046Z");
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(mutableDateTime42);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(property55);
    }

    @Test
    public void test07816() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07816");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.add((long) 'a');
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime0.yearOfCentury();
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period6 = duration5.toPeriod();
        org.joda.time.Duration duration8 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration11 = duration8.withDurationAdded((long) (short) 100, (int) ' ');
        org.joda.time.Duration duration12 = duration5.minus((org.joda.time.ReadableDuration) duration11);
        mutableDateTime0.add((org.joda.time.ReadableDuration) duration5);
        org.joda.time.MutableDateTime.Property property14 = mutableDateTime0.centuryOfEra();
        mutableDateTime0.addHours((int) (byte) 10);
        mutableDateTime0.addWeeks(20);
        java.util.Locale locale19 = java.util.Locale.getDefault();
        java.lang.String str20 = locale19.getDisplayScript();
        java.util.Locale locale21 = java.util.Locale.getDefault();
        java.util.Locale locale22 = locale21.stripExtensions();
        java.lang.String str23 = locale19.getDisplayCountry(locale21);
        java.util.Calendar calendar24 = mutableDateTime0.toCalendar(locale21);
        org.joda.time.LocalDate localDate25 = org.joda.time.LocalDate.fromCalendarFields(calendar24);
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(locale19);
// flaky:         org.junit.Assert.assertEquals(locale19.toString(), "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(locale21);
// flaky:         org.junit.Assert.assertEquals(locale21.toString(), "");
        org.junit.Assert.assertNotNull(locale22);
// flaky:         org.junit.Assert.assertEquals(locale22.toString(), "");
// flaky:         org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(calendar24);
// flaky:         org.junit.Assert.assertEquals(calendar24.toString(), "java.util.GregorianCalendar[time=1657733036583,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=6,WEEK_OF_YEAR=29,WEEK_OF_MONTH=3,DAY_OF_MONTH=13,DAY_OF_YEAR=194,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=5,HOUR_OF_DAY=17,MINUTE=23,SECOND=56,MILLISECOND=583,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDate25);
    }

    @Test
    public void test07817() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07817");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (byte) -1, chronology1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.plusMonths(46);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.minuteOfDay();
        int int6 = localDateTime4.get(dateTimeFieldType5);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime4.plusSeconds((-292275054));
        org.joda.time.LocalDateTime.Property property9 = localDateTime8.dayOfMonth();
        org.joda.time.LocalDateTime.Property property10 = localDateTime8.era();
        org.joda.time.LocalDateTime localDateTime11 = property10.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.plusWeeks(26212472);
        int int14 = localDateTime13.getSecondOfMinute();
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.PeriodType periodType19 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod20 = new org.joda.time.MutablePeriod(readableInstant17, readableInstant18, periodType19);
        org.joda.time.DurationFieldType durationFieldType22 = periodType19.getFieldType((int) (short) 0);
        java.lang.String str23 = periodType19.toString();
        org.joda.time.Instant instant24 = new org.joda.time.Instant();
        org.joda.time.Instant instant26 = instant24.withMillis(0L);
        org.joda.time.Chronology chronology27 = instant26.getChronology();
        org.joda.time.Period period28 = new org.joda.time.Period((long) 53, (long) (-1), periodType19, chronology27);
        org.joda.time.MutablePeriod mutablePeriod29 = new org.joda.time.MutablePeriod(periodType19);
        org.joda.time.Duration duration31 = org.joda.time.Duration.standardSeconds(4801284961717L);
        org.joda.time.MutablePeriod mutablePeriod36 = new org.joda.time.MutablePeriod(10, 1, 53, 15);
        boolean boolean37 = duration31.equals((java.lang.Object) 53);
        org.joda.time.MutableDateTime mutableDateTime38 = org.joda.time.MutableDateTime.now();
        java.lang.Object obj39 = mutableDateTime38.clone();
        mutableDateTime38.setTime((long) 46);
        org.joda.time.MutableDateTime.Property property42 = mutableDateTime38.dayOfWeek();
        org.joda.time.MutableDateTime mutableDateTime44 = property42.add(1L);
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.UTC;
        java.util.TimeZone timeZone46 = dateTimeZone45.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.UTC;
        long long49 = dateTimeZone45.getMillisKeepLocal(dateTimeZone47, (long) 44);
        org.joda.time.DateTime dateTime50 = org.joda.time.DateTime.now(dateTimeZone45);
        mutableDateTime44.setZoneRetainFields(dateTimeZone45);
        mutableDateTime44.addSeconds((int) (short) 10);
        org.joda.time.Interval interval54 = duration31.toIntervalTo((org.joda.time.ReadableInstant) mutableDateTime44);
        org.joda.time.Duration duration55 = mutablePeriod29.toDurationFrom((org.joda.time.ReadableInstant) mutableDateTime44);
        org.joda.time.LocalDateTime localDateTime57 = localDateTime13.withDurationAdded((org.joda.time.ReadableDuration) duration55, 26380);
        org.joda.time.LocalDateTime.Property property58 = localDateTime13.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime60 = property58.addWrapFieldToCopy(26385643);
        org.joda.time.LocalDateTime.Property property61 = localDateTime60.yearOfCentury();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1439 + "'", int6 == 1439);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(periodType19);
        org.junit.Assert.assertNotNull(durationFieldType22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "PeriodType[YearDayTime]" + "'", str23, "PeriodType[YearDayTime]");
        org.junit.Assert.assertNotNull(instant26);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(mutableDateTime38);
        org.junit.Assert.assertNotNull(obj39);
// flaky:         org.junit.Assert.assertEquals(obj39.toString(), "2022-02-22T07:23:56.501Z");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj39), "2022-02-22T07:23:56.501Z");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj39), "2022-02-22T07:23:56.501Z");
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(mutableDateTime44);
        org.junit.Assert.assertNotNull(dateTimeZone45);
        org.junit.Assert.assertNotNull(timeZone46);
// flaky:         org.junit.Assert.assertEquals(timeZone46.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone47);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 44L + "'", long49 == 44L);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(interval54);
        org.junit.Assert.assertNotNull(duration55);
        org.junit.Assert.assertNotNull(localDateTime57);
        org.junit.Assert.assertNotNull(property58);
        org.junit.Assert.assertNotNull(localDateTime60);
        org.junit.Assert.assertNotNull(property61);
    }

    @Test
    public void test07818() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07818");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.withCenturyOfEra((int) 'a');
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.minusMillis((int) (short) -1);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.plusHours(51);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minusMillis(36946953);
        java.lang.Object obj13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(obj13);
        org.joda.time.LocalDateTime localDateTime15 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.withHourOfDay(10);
        org.joda.time.DateTimeField dateTimeField21 = localDateTime19.getField((int) (byte) 0);
        long long23 = dateTimeField21.roundHalfEven((long) 1);
        int int24 = dateTime14.get(dateTimeField21);
        org.joda.time.LocalDateTime localDateTime25 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime27 = localDateTime25.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime27.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime29.withCenturyOfEra((int) 'a');
        java.util.Locale locale33 = java.util.Locale.GERMAN;
        java.lang.String str34 = locale33.getDisplayName();
        java.lang.String str35 = dateTimeField21.getAsText((org.joda.time.ReadablePartial) localDateTime29, 53, locale33);
        org.joda.time.Duration duration37 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period38 = duration37.toPeriod();
        org.joda.time.Duration duration41 = duration37.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.LocalDateTime localDateTime42 = localDateTime29.minus((org.joda.time.ReadableDuration) duration37);
        org.joda.time.PeriodType periodType43 = org.joda.time.PeriodType.yearDay();
        org.joda.time.Period period44 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDateTime10, (org.joda.time.ReadablePartial) localDateTime29, periodType43);
        org.joda.time.Period period46 = period44.withDays(200);
        org.joda.time.Period period48 = period44.multipliedBy(766);
        org.joda.time.DurationFieldType[] durationFieldTypeArray49 = period48.getFieldTypes();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2022 + "'", int24 == 2022);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "de");
// flaky:         org.junit.Assert.assertEquals("'" + str34 + "' != '" + "German" + "'", str34, "German");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "53" + "'", str35, "53");
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertNotNull(period38);
        org.junit.Assert.assertNotNull(duration41);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(periodType43);
        org.junit.Assert.assertNotNull(period46);
        org.junit.Assert.assertNotNull(period48);
        org.junit.Assert.assertNotNull(durationFieldTypeArray49);
    }

    @Test
    public void test07819() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07819");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) (short) -1);
        org.joda.time.MutableDateTime mutableDateTime2 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime2.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime5 = property3.set(45);
        org.joda.time.MutableDateTime mutableDateTime6 = property3.roundFloor();
        org.joda.time.MutableDateTime mutableDateTime8 = property3.add(45);
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        java.util.TimeZone timeZone10 = dateTimeZone9.toTimeZone();
        long long12 = dateTimeZone9.previousTransition(100L);
        int int14 = dateTimeZone9.getStandardOffset(86403200L);
        org.joda.time.DateTime dateTime15 = mutableDateTime8.toDateTime(dateTimeZone9);
        mutableDateTime1.setZoneRetainFields(dateTimeZone9);
        java.lang.String str18 = dateTimeZone9.getNameKey((long) 36950209);
        java.lang.String str19 = dateTimeZone9.getID();
        long long22 = dateTimeZone9.convertLocalToUTC(1645514162999L, true);
        java.lang.String str24 = dateTimeZone9.getName(4L);
        long long27 = dateTimeZone9.adjustOffset((long) 26357, false);
        org.junit.Assert.assertNotNull(mutableDateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(mutableDateTime5);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(mutableDateTime8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(timeZone10);
// flaky:         org.junit.Assert.assertEquals(timeZone10.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 100L + "'", long12 == 100L);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "UTC" + "'", str18, "UTC");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "UTC" + "'", str19, "UTC");
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 1645514162999L + "'", long22 == 1645514162999L);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "+00:00" + "'", str24, "+00:00");
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 26357L + "'", long27 == 26357L);
    }

    @Test
    public void test07820() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07820");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardDays((-9571L));
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardMinutes(1L);
        org.joda.time.Period period4 = duration3.toPeriod();
        org.joda.time.Duration duration5 = duration1.minus((org.joda.time.ReadableDuration) duration3);
        org.joda.time.Duration duration7 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration9 = org.joda.time.Duration.standardDays((long) (byte) 1);
        java.lang.String str10 = duration9.toString();
        boolean boolean11 = duration7.isShorterThan((org.joda.time.ReadableDuration) duration9);
        org.joda.time.Duration duration13 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period14 = duration13.toPeriod();
        org.joda.time.Duration duration17 = duration13.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Duration duration19 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration22 = duration19.withDurationAdded((long) (short) 100, (int) ' ');
        boolean boolean23 = duration17.isLongerThan((org.joda.time.ReadableDuration) duration19);
        boolean boolean24 = duration9.isEqual((org.joda.time.ReadableDuration) duration19);
        org.joda.time.Duration duration25 = duration1.plus((org.joda.time.ReadableDuration) duration9);
        org.joda.time.MutableDateTime mutableDateTime26 = org.joda.time.MutableDateTime.now();
        mutableDateTime26.add((long) 'a');
        org.joda.time.MutableDateTime.Property property29 = mutableDateTime26.yearOfCentury();
        mutableDateTime26.addSeconds(0);
        org.joda.time.Duration duration33 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Hours hours34 = duration33.toStandardHours();
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime(chronology35);
        int int37 = dateTime36.getSecondOfMinute();
        org.joda.time.MutablePeriod mutablePeriod38 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration33, (org.joda.time.ReadableInstant) dateTime36);
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime((long) 1);
        org.joda.time.Instant instant41 = new org.joda.time.Instant();
        org.joda.time.Instant instant43 = instant41.withMillis(0L);
        org.joda.time.DateTime dateTime44 = instant43.toDateTime();
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime((long) 1);
        org.joda.time.PeriodType periodType47 = org.joda.time.PeriodType.months();
        org.joda.time.Period period48 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime44, (org.joda.time.ReadableInstant) dateTime46, periodType47);
        org.joda.time.Period period49 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration33, (org.joda.time.ReadableInstant) dateTime40, periodType47);
        org.joda.time.Duration duration50 = new org.joda.time.Duration((org.joda.time.ReadableInstant) mutableDateTime26, (org.joda.time.ReadableInstant) dateTime40);
        mutableDateTime26.addMinutes(28);
        org.joda.time.PeriodType periodType54 = org.joda.time.PeriodType.yearWeekDayTime();
        org.joda.time.MutablePeriod mutablePeriod55 = new org.joda.time.MutablePeriod((-29912203583046059L), periodType54);
        org.joda.time.Period period56 = duration1.toPeriodFrom((org.joda.time.ReadableInstant) mutableDateTime26, periodType54);
        org.joda.time.Duration duration57 = duration1.toDuration();
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "PT86400S" + "'", str10, "PT86400S");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertNotNull(mutableDateTime26);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertNotNull(hours34);
// flaky:         org.junit.Assert.assertTrue("'" + int37 + "' != '" + 56 + "'", int37 == 56);
        org.junit.Assert.assertNotNull(instant43);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(periodType47);
        org.junit.Assert.assertNotNull(periodType54);
        org.junit.Assert.assertNotNull(period56);
        org.junit.Assert.assertNotNull(duration57);
    }

    @Test
    public void test07821() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07821");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("2022-02-22T07:16:00.803Z");
        org.joda.time.format.DateTimePrinter dateTimePrinter2 = null;
        org.joda.time.format.DateTimeParser dateTimeParser3 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter2, dateTimeParser3);
        org.joda.time.Instant instant5 = new org.joda.time.Instant();
        org.joda.time.Instant instant7 = instant5.withMillis(0L);
        org.joda.time.Chronology chronology8 = instant7.getChronology();
        org.joda.time.DurationField durationField9 = chronology8.eras();
        long long13 = chronology8.add(0L, (long) 2022, (int) '4');
        org.joda.time.format.DateTimeFormatter dateTimeFormatter14 = dateTimeFormatter4.withChronology(chronology8);
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime(chronology8);
        org.joda.time.DateTimeField dateTimeField16 = chronology8.minuteOfHour();
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.UTC;
        java.util.TimeZone timeZone18 = dateTimeZone17.toTimeZone();
        long long20 = dateTimeZone17.previousTransition(100L);
        int int22 = dateTimeZone17.getStandardOffset(86403200L);
        org.joda.time.Chronology chronology23 = chronology8.withZone(dateTimeZone17);
        java.util.TimeZone timeZone24 = dateTimeZone17.toTimeZone();
        boolean boolean25 = timeZone1.hasSameRules(timeZone24);
        java.util.TimeZone.setDefault(timeZone1);
        int int27 = timeZone1.getRawOffset();
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forTimeZone(timeZone1);
        org.joda.time.MutableDateTime mutableDateTime29 = new org.joda.time.MutableDateTime(dateTimeZone28);
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime((long) 1);
        org.joda.time.Duration duration33 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period34 = duration33.toPeriod();
        org.joda.time.Duration duration37 = duration33.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Period period38 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime31, (org.joda.time.ReadableDuration) duration37);
        org.joda.time.Duration duration40 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration42 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration45 = duration42.withDurationAdded((long) (short) 100, (int) ' ');
        boolean boolean46 = duration40.isLongerThan((org.joda.time.ReadableDuration) duration45);
        org.joda.time.Minutes minutes47 = duration40.toStandardMinutes();
        org.joda.time.Period period48 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime31, (org.joda.time.ReadableDuration) duration40);
        mutableDateTime29.setMillis((org.joda.time.ReadableInstant) dateTime31);
        boolean boolean51 = mutableDateTime29.isAfter((long) 26579);
        org.junit.Assert.assertNotNull(timeZone1);
// flaky:         org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(instant7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 105144L + "'", long13 == 105144L);
        org.junit.Assert.assertNotNull(dateTimeFormatter14);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(timeZone18);
// flaky:         org.junit.Assert.assertEquals(timeZone18.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 100L + "'", long20 == 100L);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(timeZone24);
// flaky:         org.junit.Assert.assertEquals(timeZone24.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertNotNull(period34);
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertNotNull(duration40);
        org.junit.Assert.assertNotNull(duration42);
        org.junit.Assert.assertNotNull(duration45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(minutes47);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
    }

    @Test
    public void test07822() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07822");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime(chronology0);
        org.joda.time.MutableDateTime mutableDateTime2 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime2.centuryOfEra();
        org.joda.time.MutableDateTime.Property property4 = mutableDateTime2.dayOfWeek();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = property4.getFieldType();
        boolean boolean6 = localTime1.isSupported(dateTimeFieldType5);
        org.joda.time.LocalTime localTime8 = localTime1.withMillisOfDay(1379);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime10 = localTime8.withMinuteOfHour(26263);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26263 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableDateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(localTime8);
    }

    @Test
    public void test07823() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07823");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) (short) -1);
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.monthOfYear();
        org.joda.time.MutableDateTime mutableDateTime3 = org.joda.time.MutableDateTime.now();
        mutableDateTime3.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime6 = mutableDateTime3.copy();
        org.joda.time.MutableDateTime.Property property7 = mutableDateTime3.weekOfWeekyear();
        org.joda.time.MutableDateTime.Property property8 = mutableDateTime3.dayOfYear();
        org.joda.time.MutableDateTime mutableDateTime9 = org.joda.time.MutableDateTime.now();
        mutableDateTime9.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime12 = mutableDateTime9.copy();
        mutableDateTime9.setDate((long) '#');
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property16 = localDate15.monthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.minuteOfDay();
        boolean boolean18 = localDate15.isSupported(dateTimeFieldType17);
        int int19 = localDate15.getDayOfYear();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateMidnight dateMidnight21 = localDate15.toDateMidnight(dateTimeZone20);
        org.joda.time.DateTime dateTime22 = mutableDateTime9.toDateTime(dateTimeZone20);
        org.joda.time.LocalDate localDate23 = org.joda.time.LocalDate.now(dateTimeZone20);
        org.joda.time.PeriodType periodType26 = null;
        org.joda.time.Period period27 = new org.joda.time.Period((long) 100, 1L, periodType26);
        org.joda.time.PeriodType periodType28 = period27.getPeriodType();
        boolean boolean29 = dateTimeZone20.equals((java.lang.Object) periodType28);
        mutableDateTime3.setZoneRetainFields(dateTimeZone20);
        long long32 = dateTimeZone20.nextTransition(100L);
        mutableDateTime1.setZoneRetainFields(dateTimeZone20);
        mutableDateTime1.addWeekyears(8642122);
        mutableDateTime1.setWeekyear(62431);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(mutableDateTime3);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertNotNull(mutableDateTime12);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 53 + "'", int19 == 53);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(dateMidnight21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertNotNull(periodType28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 100L + "'", long32 == 100L);
    }

    @Test
    public void test07824() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07824");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.UTC;
        java.util.Locale locale3 = java.util.Locale.GERMAN;
        java.lang.String str4 = locale3.getDisplayName();
        java.lang.String str5 = dateTimeZone1.getName(100L, locale3);
        org.joda.time.MutableDateTime mutableDateTime6 = new org.joda.time.MutableDateTime(948227L, dateTimeZone1);
        org.joda.time.MutableDateTime.Property property7 = mutableDateTime6.year();
        mutableDateTime6.addHours(16);
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.PeriodType periodType15 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod16 = new org.joda.time.MutablePeriod(readableInstant13, readableInstant14, periodType15);
        org.joda.time.DurationFieldType durationFieldType18 = periodType15.getFieldType((int) (short) 0);
        java.lang.String str19 = periodType15.toString();
        org.joda.time.Instant instant20 = new org.joda.time.Instant();
        org.joda.time.Instant instant22 = instant20.withMillis(0L);
        org.joda.time.Chronology chronology23 = instant22.getChronology();
        org.joda.time.Period period24 = new org.joda.time.Period((long) 53, (long) (-1), periodType15, chronology23);
        org.joda.time.DateTimeField dateTimeField25 = dateTimeFieldType10.getField(chronology23);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime(chronology26);
        org.joda.time.DateTime dateTime29 = dateTime27.plusMinutes(15);
        org.joda.time.Chronology chronology30 = dateTime27.getChronology();
        java.lang.String str31 = chronology30.toString();
        org.joda.time.DateTimeField dateTimeField32 = dateTimeFieldType10.getField(chronology30);
        org.joda.time.DurationField durationField33 = chronology30.centuries();
        org.joda.time.DateTimeField dateTimeField34 = chronology30.millisOfDay();
        mutableDateTime6.setChronology(chronology30);
        org.joda.time.DurationField durationField36 = chronology30.months();
        org.joda.time.DateTimeField dateTimeField37 = chronology30.clockhourOfDay();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "de");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "German" + "'", str4, "German");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "+00:00" + "'", str5, "+00:00");
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertNotNull(periodType15);
        org.junit.Assert.assertNotNull(durationFieldType18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "PeriodType[YearDayTime]" + "'", str19, "PeriodType[YearDayTime]");
        org.junit.Assert.assertNotNull(instant22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "ISOChronology[UTC]" + "'", str31, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(durationField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(durationField36);
        org.junit.Assert.assertNotNull(dateTimeField37);
    }

    @Test
    public void test07825() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07825");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.withHourOfDay(10);
        org.joda.time.LocalDateTime.Property property5 = localDateTime4.dayOfMonth();
        org.joda.time.LocalDateTime.Property property6 = localDateTime4.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime7 = property6.getLocalDateTime();
        java.lang.String str8 = localDateTime7.toString();
        org.joda.time.Instant instant9 = new org.joda.time.Instant();
        org.joda.time.Instant instant11 = instant9.withMillis(0L);
        org.joda.time.Chronology chronology12 = instant11.getChronology();
        org.joda.time.DurationField durationField13 = chronology12.eras();
        org.joda.time.LocalTime localTime14 = org.joda.time.LocalTime.now(chronology12);
        org.joda.time.DurationField durationField15 = chronology12.eras();
        org.joda.time.DateTimeField dateTimeField16 = chronology12.hourOfDay();
        org.joda.time.DateTimeField dateTimeField17 = chronology12.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField18 = chronology12.year();
        org.joda.time.MutableDateTime mutableDateTime19 = org.joda.time.MutableDateTime.now(chronology12);
        org.joda.time.MutableDateTime.Property property20 = mutableDateTime19.yearOfCentury();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime((long) 1, chronology22);
        int int24 = dateTime23.getMinuteOfDay();
        int int25 = dateTime23.getEra();
        int int26 = dateTime23.getWeekOfWeekyear();
        org.joda.time.DateTime dateTime27 = dateTime23.withLaterOffsetAtOverlap();
        org.joda.time.Chronology chronology29 = null;
        java.util.Locale locale30 = java.util.Locale.GERMAN;
        java.util.Locale locale31 = java.util.Locale.CANADA;
        java.lang.String str32 = locale30.getDisplayVariant(locale31);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket33 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology29, locale31);
        java.lang.Object obj34 = dateTimeParserBucket33.saveState();
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.LocalTime localTime37 = new org.joda.time.LocalTime((long) (short) 100, chronology36);
        org.joda.time.DurationFieldType durationFieldType38 = org.joda.time.DurationFieldType.weeks();
        java.lang.String str39 = durationFieldType38.getName();
        boolean boolean40 = localTime37.isSupported(durationFieldType38);
        boolean boolean41 = dateTimeParserBucket33.restoreState((java.lang.Object) boolean40);
        java.lang.Integer int42 = dateTimeParserBucket33.getOffsetInteger();
        org.joda.time.Chronology chronology43 = dateTimeParserBucket33.getChronology();
        dateTimeParserBucket33.setOffset((int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType46 = org.joda.time.DateTimeFieldType.millisOfSecond();
        java.lang.String str47 = dateTimeFieldType46.getName();
        org.joda.time.DurationFieldType durationFieldType48 = dateTimeFieldType46.getRangeDurationType();
        dateTimeParserBucket33.saveField(dateTimeFieldType46, 20);
        int int51 = dateTime23.get(dateTimeFieldType46);
        mutableDateTime19.set(dateTimeFieldType46, 97);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime55 = localDateTime7.withField(dateTimeFieldType46, (-883));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -883 for millisOfSecond must be in the range [0,999]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localDateTime7);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "2022-02-22T10:23:56.782" + "'", str8, "2022-02-22T10:23:56.782");
        org.junit.Assert.assertNotNull(instant11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(mutableDateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "de");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(obj34);
        org.junit.Assert.assertNotNull(durationFieldType38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "weeks" + "'", str39, "weeks");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNull(int42);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(dateTimeFieldType46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "millisOfSecond" + "'", str47, "millisOfSecond");
        org.junit.Assert.assertNotNull(durationFieldType48);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
    }

    @Test
    public void test07826() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07826");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) (-292275054));
        java.io.IOException iOException3 = new java.io.IOException("");
        java.io.IOException iOException4 = new java.io.IOException((java.lang.Throwable) iOException3);
        boolean boolean5 = mutableDateTime1.equals((java.lang.Object) iOException3);
        org.joda.time.Duration duration8 = new org.joda.time.Duration(0L, 946312L);
        mutableDateTime1.add((org.joda.time.ReadableDuration) duration8, 1424);
        org.joda.time.Days days11 = duration8.toStandardDays();
        org.joda.time.MutablePeriod mutablePeriod14 = new org.joda.time.MutablePeriod((long) (short) -1, 3155695200000L);
        mutablePeriod14.clear();
        org.joda.time.Duration duration17 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period18 = duration17.toPeriod();
        org.joda.time.Duration duration21 = duration17.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime(chronology22);
        org.joda.time.DateTime dateTime25 = dateTime23.plusMinutes(15);
        org.joda.time.Interval interval26 = duration21.toIntervalTo((org.joda.time.ReadableInstant) dateTime25);
        mutablePeriod14.setPeriod((org.joda.time.ReadableInterval) interval26);
        org.joda.time.ReadableInstant readableInstant28 = null;
        org.joda.time.ReadableInstant readableInstant29 = null;
        org.joda.time.PeriodType periodType30 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod31 = new org.joda.time.MutablePeriod(readableInstant28, readableInstant29, periodType30);
        org.joda.time.DurationFieldType durationFieldType33 = periodType30.getFieldType((int) (short) 0);
        int int34 = mutablePeriod14.get(durationFieldType33);
        org.joda.time.Duration duration36 = org.joda.time.Duration.standardHours((long) 52);
        org.joda.time.MutableDateTime mutableDateTime37 = org.joda.time.MutableDateTime.now();
        mutableDateTime37.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime40 = mutableDateTime37.copy();
        org.joda.time.MutableDateTime.Property property41 = mutableDateTime37.yearOfEra();
        org.joda.time.MutablePeriod mutablePeriod42 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration36, (org.joda.time.ReadableInstant) mutableDateTime37);
        org.joda.time.Instant instant43 = new org.joda.time.Instant();
        org.joda.time.Instant instant45 = instant43.withMillis(0L);
        org.joda.time.Chronology chronology46 = instant45.getChronology();
        org.joda.time.DurationField durationField47 = chronology46.eras();
        org.joda.time.LocalTime localTime48 = org.joda.time.LocalTime.now(chronology46);
        org.joda.time.DurationField durationField49 = chronology46.eras();
        mutablePeriod14.setPeriod((org.joda.time.ReadableDuration) duration36, chronology46);
        org.joda.time.Duration duration52 = duration8.withDurationAdded((org.joda.time.ReadableDuration) duration36, 26148950);
        org.joda.time.Duration duration54 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period55 = duration54.toPeriod();
        org.joda.time.Duration duration57 = duration54.minus((long) 292278993);
        int int58 = duration36.compareTo((org.joda.time.ReadableDuration) duration54);
        org.joda.time.MutableDateTime mutableDateTime59 = org.joda.time.MutableDateTime.now();
        java.lang.Object obj60 = mutableDateTime59.clone();
        mutableDateTime59.setTime((long) 46);
        org.joda.time.MutableDateTime.Property property63 = mutableDateTime59.dayOfWeek();
        org.joda.time.MutableDateTime mutableDateTime65 = property63.add(1L);
        java.util.Locale locale66 = java.util.Locale.GERMAN;
        java.util.Locale locale67 = java.util.Locale.CANADA;
        java.lang.String str68 = locale66.getDisplayVariant(locale67);
        java.lang.String str69 = locale66.getISO3Language();
        java.lang.String str70 = property63.getAsText(locale66);
        org.joda.time.MutableDateTime mutableDateTime71 = property63.roundHalfCeiling();
        org.joda.time.MutableDateTime mutableDateTime73 = property63.add(62273);
        org.joda.time.MutableDateTime mutableDateTime74 = property63.getMutableDateTime();
        org.joda.time.Interval interval75 = duration36.toIntervalFrom((org.joda.time.ReadableInstant) mutableDateTime74);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(days11);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertNotNull(periodType30);
        org.junit.Assert.assertNotNull(durationFieldType33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertNotNull(mutableDateTime37);
        org.junit.Assert.assertNotNull(mutableDateTime40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(instant45);
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertNotNull(durationField47);
        org.junit.Assert.assertNotNull(localTime48);
        org.junit.Assert.assertNotNull(durationField49);
        org.junit.Assert.assertNotNull(duration52);
        org.junit.Assert.assertNotNull(duration54);
        org.junit.Assert.assertNotNull(period55);
        org.junit.Assert.assertNotNull(duration57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 1 + "'", int58 == 1);
        org.junit.Assert.assertNotNull(mutableDateTime59);
        org.junit.Assert.assertNotNull(obj60);
// flaky:         org.junit.Assert.assertEquals(obj60.toString(), "2022-02-22T07:23:56.815Z");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj60), "2022-02-22T07:23:56.815Z");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj60), "2022-02-22T07:23:56.815Z");
        org.junit.Assert.assertNotNull(property63);
        org.junit.Assert.assertNotNull(mutableDateTime65);
        org.junit.Assert.assertNotNull(locale66);
        org.junit.Assert.assertEquals(locale66.toString(), "de");
        org.junit.Assert.assertNotNull(locale67);
        org.junit.Assert.assertEquals(locale67.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "" + "'", str68, "");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "deu" + "'", str69, "deu");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "Mittwoch" + "'", str70, "Mittwoch");
        org.junit.Assert.assertNotNull(mutableDateTime71);
        org.junit.Assert.assertNotNull(mutableDateTime73);
        org.junit.Assert.assertNotNull(mutableDateTime74);
        org.junit.Assert.assertNotNull(interval75);
    }

    @Test
    public void test07827() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07827");
        org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod((long) 672, 1645514186724L);
        mutablePeriod2.setPeriod(26237290, 62357, 26195, 26284687, 82800100, 0, 61, 26514582);
    }

    @Test
    public void test07828() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07828");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property1 = mutableDateTime0.centuryOfEra();
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime0.dayOfWeek();
        org.joda.time.MutableDateTime mutableDateTime3 = org.joda.time.MutableDateTime.now();
        mutableDateTime3.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime6 = mutableDateTime3.copy();
        org.joda.time.MutableDateTime.Property property7 = mutableDateTime3.weekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime8 = property7.roundHalfFloor();
        org.joda.time.MutableDateTime mutableDateTime9 = property7.roundHalfCeiling();
        org.joda.time.MutableDateTime mutableDateTime11 = property7.set(1);
        org.joda.time.MutableDateTime mutableDateTime12 = org.joda.time.MutableDateTime.now();
        mutableDateTime12.add((long) 'a');
        org.joda.time.MutableDateTime.Property property15 = mutableDateTime12.yearOfCentury();
        org.joda.time.Duration duration17 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period18 = duration17.toPeriod();
        org.joda.time.Duration duration20 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration23 = duration20.withDurationAdded((long) (short) 100, (int) ' ');
        org.joda.time.Duration duration24 = duration17.minus((org.joda.time.ReadableDuration) duration23);
        mutableDateTime12.add((org.joda.time.ReadableDuration) duration17);
        org.joda.time.MutableDateTime.Property property26 = mutableDateTime12.centuryOfEra();
        mutableDateTime12.addYears(0);
        mutableDateTime12.setMinuteOfDay((int) (short) 0);
        org.joda.time.Instant instant31 = new org.joda.time.Instant();
        org.joda.time.Instant instant33 = instant31.withMillis(0L);
        org.joda.time.Duration duration35 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period36 = duration35.toPeriod();
        org.joda.time.Duration duration39 = duration35.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Instant instant40 = instant33.plus((org.joda.time.ReadableDuration) duration39);
        long long41 = instant40.getMillis();
        org.joda.time.Duration duration42 = new org.joda.time.Duration((org.joda.time.ReadableInstant) mutableDateTime12, (org.joda.time.ReadableInstant) instant40);
        mutableDateTime11.add((org.joda.time.ReadableDuration) duration42, 999);
        org.joda.time.Duration duration46 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period47 = duration46.toPeriod();
        org.joda.time.Duration duration49 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration51 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration54 = duration51.withDurationAdded((long) (short) 100, (int) ' ');
        boolean boolean55 = duration49.isLongerThan((org.joda.time.ReadableDuration) duration54);
        org.joda.time.Duration duration56 = duration46.minus((org.joda.time.ReadableDuration) duration49);
        org.joda.time.Duration duration58 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration61 = duration58.withDurationAdded((long) (short) 100, (int) ' ');
        boolean boolean62 = duration49.equals((java.lang.Object) duration58);
        boolean boolean63 = duration42.isShorterThan((org.joda.time.ReadableDuration) duration58);
        org.joda.time.Minutes minutes64 = duration58.toStandardMinutes();
        mutableDateTime0.add((org.joda.time.ReadableDuration) duration58);
        long long66 = duration58.getStandardSeconds();
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(mutableDateTime3);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(mutableDateTime8);
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertNotNull(mutableDateTime12);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(instant33);
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertNotNull(period36);
        org.junit.Assert.assertNotNull(duration39);
        org.junit.Assert.assertNotNull(instant40);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 86400000L + "'", long41 == 86400000L);
        org.junit.Assert.assertNotNull(duration46);
        org.junit.Assert.assertNotNull(period47);
        org.junit.Assert.assertNotNull(duration49);
        org.junit.Assert.assertNotNull(duration51);
        org.junit.Assert.assertNotNull(duration54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(duration56);
        org.junit.Assert.assertNotNull(duration58);
        org.junit.Assert.assertNotNull(duration61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(minutes64);
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 86400L + "'", long66 == 86400L);
    }

    @Test
    public void test07829() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07829");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime3 = mutableDateTime0.copy();
        org.joda.time.MutableDateTime.Property property4 = mutableDateTime0.weekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime5 = property4.roundHalfFloor();
        org.joda.time.MutableDateTime mutableDateTime6 = property4.roundHalfCeiling();
        org.joda.time.MutableDateTime mutableDateTime8 = property4.set(1);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(chronology9);
        int int11 = dateTime10.getYearOfCentury();
        int int12 = dateTime10.getWeekyear();
        org.joda.time.DateTime dateTime13 = dateTime10.withEarlierOffsetAtOverlap();
        java.lang.String str14 = dateTime13.toString();
        org.joda.time.MutableDateTime mutableDateTime15 = dateTime13.toMutableDateTime();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.UTC;
        boolean boolean17 = dateTimeZone16.isFixed();
        mutableDateTime15.setZoneRetainFields(dateTimeZone16);
        org.joda.time.MutableDateTime mutableDateTime19 = mutableDateTime8.toMutableDateTime(dateTimeZone16);
        org.joda.time.MutableDateTime mutableDateTime20 = mutableDateTime19.toMutableDateTimeISO();
        mutableDateTime19.setWeekyear(93);
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(mutableDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(mutableDateTime5);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(mutableDateTime8);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 22 + "'", int11 == 22);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2022 + "'", int12 == 2022);
        org.junit.Assert.assertNotNull(dateTime13);
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "2022-02-22T07:23:56.944Z" + "'", str14, "2022-02-22T07:23:56.944Z");
        org.junit.Assert.assertNotNull(mutableDateTime15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(mutableDateTime19);
        org.junit.Assert.assertNotNull(mutableDateTime20);
    }

    @Test
    public void test07830() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07830");
        java.lang.Object obj0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(obj0);
        boolean boolean3 = dateTime1.isBefore((long) 7);
        java.lang.String str4 = dateTime1.toString();
        org.joda.time.DateTime dateTime6 = dateTime1.minus((long) 7);
        org.joda.time.DateTime.Property property7 = dateTime1.hourOfDay();
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property9 = localDate8.dayOfYear();
        int int10 = localDate8.getCenturyOfEra();
        org.joda.time.LocalDate localDate12 = localDate8.withWeekyear(26175498);
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate((long) (byte) -1);
        int int15 = localDate14.getYearOfEra();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.UTC;
        java.util.TimeZone timeZone17 = dateTimeZone16.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.UTC;
        long long20 = dateTimeZone16.getMillisKeepLocal(dateTimeZone18, (long) 44);
        org.joda.time.DateTime dateTime21 = localDate14.toDateTimeAtMidnight(dateTimeZone16);
        java.util.Locale locale23 = null;
        java.lang.String str24 = dateTimeZone16.getName(946000L, locale23);
        org.joda.time.MutableDateTime mutableDateTime25 = new org.joda.time.MutableDateTime(dateTimeZone16);
        org.joda.time.LocalDate localDate26 = org.joda.time.LocalDate.now(dateTimeZone16);
        org.joda.time.DateTime dateTime27 = localDate12.toDateTimeAtStartOfDay(dateTimeZone16);
        org.joda.time.MutableDateTime mutableDateTime29 = org.joda.time.MutableDateTime.now();
        mutableDateTime29.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime32 = mutableDateTime29.copy();
        mutableDateTime29.setDate((long) '#');
        org.joda.time.LocalDate localDate35 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property36 = localDate35.monthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType37 = org.joda.time.DateTimeFieldType.minuteOfDay();
        boolean boolean38 = localDate35.isSupported(dateTimeFieldType37);
        int int39 = localDate35.getDayOfYear();
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateMidnight dateMidnight41 = localDate35.toDateMidnight(dateTimeZone40);
        org.joda.time.DateTime dateTime42 = mutableDateTime29.toDateTime(dateTimeZone40);
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime(dateTimeZone40);
        org.joda.time.LocalDate localDate44 = org.joda.time.LocalDate.now(dateTimeZone40);
        org.joda.time.MutableDateTime mutableDateTime45 = org.joda.time.MutableDateTime.now();
        mutableDateTime45.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime48 = mutableDateTime45.copy();
        org.joda.time.MutableDateTime.Property property49 = mutableDateTime45.weekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime50 = property49.roundHalfFloor();
        org.joda.time.MutableDateTime mutableDateTime51 = property49.roundHalfCeiling();
        org.joda.time.MutableDateTime mutableDateTime53 = property49.set(1);
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.DateTime dateTime55 = new org.joda.time.DateTime(chronology54);
        int int56 = dateTime55.getYearOfCentury();
        int int57 = dateTime55.getWeekyear();
        org.joda.time.DateTime dateTime58 = dateTime55.withEarlierOffsetAtOverlap();
        java.lang.String str59 = dateTime58.toString();
        org.joda.time.MutableDateTime mutableDateTime60 = dateTime58.toMutableDateTime();
        org.joda.time.DateTimeZone dateTimeZone61 = org.joda.time.DateTimeZone.UTC;
        boolean boolean62 = dateTimeZone61.isFixed();
        mutableDateTime60.setZoneRetainFields(dateTimeZone61);
        org.joda.time.MutableDateTime mutableDateTime64 = mutableDateTime53.toMutableDateTime(dateTimeZone61);
        org.joda.time.Interval interval65 = localDate44.toInterval(dateTimeZone61);
        org.joda.time.MutableDateTime mutableDateTime66 = new org.joda.time.MutableDateTime((long) 58, dateTimeZone61);
        java.util.Locale locale68 = java.util.Locale.CANADA;
        java.lang.String str70 = locale68.getExtension('a');
        java.lang.String str71 = dateTimeZone61.getShortName(1645516800000L, locale68);
        org.joda.time.DateTime dateTime72 = localDate12.toDateTimeAtCurrentTime(dateTimeZone61);
        int int73 = property7.compareTo((org.joda.time.ReadableInstant) dateTime72);
        org.joda.time.Instant instant74 = org.joda.time.Instant.now();
        org.joda.time.Instant instant75 = new org.joda.time.Instant();
        org.joda.time.Instant instant77 = instant75.withMillis(0L);
        org.joda.time.Duration duration79 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period80 = duration79.toPeriod();
        org.joda.time.Duration duration83 = duration79.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Instant instant84 = instant77.plus((org.joda.time.ReadableDuration) duration83);
        org.joda.time.PeriodType periodType85 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.Period period86 = duration83.toPeriod(periodType85);
        org.joda.time.Duration duration88 = duration83.withMillis(60000L);
        org.joda.time.Period period89 = duration88.toPeriod();
        org.joda.time.Instant instant90 = instant74.plus((org.joda.time.ReadableDuration) duration88);
        org.joda.time.Instant instant92 = instant90.plus(4801285028947L);
        org.joda.time.MutablePeriod mutablePeriod93 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime72, (org.joda.time.ReadableInstant) instant92);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "2022-02-22T07:23:56.963Z" + "'", str4, "2022-02-22T07:23:56.963Z");
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 20 + "'", int10 == 20);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1969 + "'", int15 == 1969);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(timeZone17);
// flaky:         org.junit.Assert.assertEquals(timeZone17.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 44L + "'", long20 == 44L);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "+00:00" + "'", str24, "+00:00");
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(mutableDateTime29);
        org.junit.Assert.assertNotNull(mutableDateTime32);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(dateTimeFieldType37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 53 + "'", int39 == 53);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertNotNull(dateMidnight41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(localDate44);
        org.junit.Assert.assertNotNull(mutableDateTime45);
        org.junit.Assert.assertNotNull(mutableDateTime48);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(mutableDateTime50);
        org.junit.Assert.assertNotNull(mutableDateTime51);
        org.junit.Assert.assertNotNull(mutableDateTime53);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 22 + "'", int56 == 22);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 2022 + "'", int57 == 2022);
        org.junit.Assert.assertNotNull(dateTime58);
// flaky:         org.junit.Assert.assertEquals("'" + str59 + "' != '" + "2022-02-22T07:23:56.963Z" + "'", str59, "2022-02-22T07:23:56.963Z");
        org.junit.Assert.assertNotNull(mutableDateTime60);
        org.junit.Assert.assertNotNull(dateTimeZone61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(mutableDateTime64);
        org.junit.Assert.assertNotNull(interval65);
        org.junit.Assert.assertNotNull(locale68);
        org.junit.Assert.assertEquals(locale68.toString(), "en_CA");
        org.junit.Assert.assertNull(str70);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "+00:00" + "'", str71, "+00:00");
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertNotNull(instant74);
        org.junit.Assert.assertNotNull(instant77);
        org.junit.Assert.assertNotNull(duration79);
        org.junit.Assert.assertNotNull(period80);
        org.junit.Assert.assertNotNull(duration83);
        org.junit.Assert.assertNotNull(instant84);
        org.junit.Assert.assertNotNull(periodType85);
        org.junit.Assert.assertNotNull(period86);
        org.junit.Assert.assertNotNull(duration88);
        org.junit.Assert.assertNotNull(period89);
        org.junit.Assert.assertNotNull(instant90);
        org.junit.Assert.assertNotNull(instant92);
    }

    @Test
    public void test07831() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07831");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime(dateTimeZone0);
        org.joda.time.LocalTime localTime3 = localTime1.minusHours((int) (byte) 100);
        org.joda.time.Chronology chronology4 = localTime3.getChronology();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime(chronology5);
        int int7 = dateTime6.getYearOfCentury();
        int int8 = dateTime6.getWeekyear();
        org.joda.time.DateTime dateTime9 = dateTime6.withEarlierOffsetAtOverlap();
        java.lang.String str10 = dateTime9.toString();
        org.joda.time.MutableDateTime mutableDateTime11 = dateTime9.toMutableDateTime();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.UTC;
        boolean boolean13 = dateTimeZone12.isFixed();
        mutableDateTime11.setZoneRetainFields(dateTimeZone12);
        org.joda.time.DateTime dateTime15 = localTime3.toDateTimeToday(dateTimeZone12);
        org.joda.time.DateTime dateTime17 = dateTime15.withYearOfEra(26333);
        int int18 = dateTime15.getWeekOfWeekyear();
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 22 + "'", int7 == 22);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2022 + "'", int8 == 2022);
        org.junit.Assert.assertNotNull(dateTime9);
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "2022-02-22T07:23:57.077Z" + "'", str10, "2022-02-22T07:23:57.077Z");
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 8 + "'", int18 == 8);
    }

    @Test
    public void test07832() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07832");
        org.joda.time.Period period8 = new org.joda.time.Period(10, 21, 72600000, (int) '#', 10, 0, (int) (short) 100, 766);
        org.joda.time.MutableDateTime mutableDateTime9 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property10 = mutableDateTime9.centuryOfEra();
        org.joda.time.MutableDateTime.Property property11 = mutableDateTime9.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime12 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.withHourOfDay(10);
        org.joda.time.LocalDateTime.Property property15 = localDateTime12.hourOfDay();
        org.joda.time.LocalDateTime localDateTime17 = localDateTime12.plusMillis((int) (byte) 0);
        org.joda.time.PeriodType periodType20 = null;
        org.joda.time.Period period21 = new org.joda.time.Period((long) 100, 1L, periodType20);
        org.joda.time.Period period23 = period21.minusSeconds((-1));
        org.joda.time.LocalDateTime localDateTime24 = localDateTime17.minus((org.joda.time.ReadablePeriod) period21);
        mutableDateTime9.add((org.joda.time.ReadablePeriod) period21, 0);
        org.joda.time.MutableDateTime.Property property27 = mutableDateTime9.dayOfMonth();
        org.joda.time.MutableDateTime mutableDateTime28 = property27.roundHalfFloor();
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.UTC;
        boolean boolean31 = dateTimeZone30.isFixed();
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime((long) (short) -1, dateTimeZone30);
        mutableDateTime28.setZone(dateTimeZone30);
        org.joda.time.ReadableDuration readableDuration34 = null;
        org.joda.time.ReadableInstant readableInstant35 = null;
        org.joda.time.Period period36 = new org.joda.time.Period(readableDuration34, readableInstant35);
        java.lang.String str37 = period36.toString();
        org.joda.time.Period period39 = period36.withHours(69);
        mutableDateTime28.add((org.joda.time.ReadablePeriod) period36);
        org.joda.time.Duration duration41 = period8.toDurationFrom((org.joda.time.ReadableInstant) mutableDateTime28);
        int[] intArray42 = period8.getValues();
        org.joda.time.Period period43 = period8.normalizedStandard();
        org.joda.time.Period period45 = period8.minusDays(26394624);
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(mutableDateTime28);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "PT0S" + "'", str37, "PT0S");
        org.junit.Assert.assertNotNull(period39);
        org.junit.Assert.assertNotNull(duration41);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[10, 21, 72600000, 35, 10, 0, 100, 766]");
        org.junit.Assert.assertNotNull(period43);
        org.junit.Assert.assertNotNull(period45);
    }

    @Test
    public void test07833() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07833");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period2 = duration1.toPeriod();
        org.joda.time.Duration duration4 = duration1.minus((long) 292278993);
        org.joda.time.MutableDateTime mutableDateTime5 = org.joda.time.MutableDateTime.now();
        mutableDateTime5.add((long) 'a');
        org.joda.time.MutableDateTime.Property property8 = mutableDateTime5.yearOfCentury();
        org.joda.time.Duration duration10 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period11 = duration10.toPeriod();
        org.joda.time.Duration duration13 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration16 = duration13.withDurationAdded((long) (short) 100, (int) ' ');
        org.joda.time.Duration duration17 = duration10.minus((org.joda.time.ReadableDuration) duration16);
        mutableDateTime5.add((org.joda.time.ReadableDuration) duration10);
        boolean boolean19 = duration4.isShorterThan((org.joda.time.ReadableDuration) duration10);
        org.joda.time.Duration duration21 = duration10.minus((long) (byte) 0);
        org.joda.time.MutableDateTime mutableDateTime22 = org.joda.time.MutableDateTime.now();
        mutableDateTime22.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime25 = mutableDateTime22.copy();
        mutableDateTime22.setDate((long) '#');
        org.joda.time.LocalDate localDate28 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property29 = localDate28.monthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = org.joda.time.DateTimeFieldType.minuteOfDay();
        boolean boolean31 = localDate28.isSupported(dateTimeFieldType30);
        int int32 = localDate28.getDayOfYear();
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateMidnight dateMidnight34 = localDate28.toDateMidnight(dateTimeZone33);
        org.joda.time.DateTime dateTime35 = mutableDateTime22.toDateTime(dateTimeZone33);
        org.joda.time.MutablePeriod mutablePeriod36 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration21, (org.joda.time.ReadableInstant) mutableDateTime22);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime22.setWeekOfWeekyear(62176);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 62176 for weekOfWeekyear must be in the range [1,53]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(period2);
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertNotNull(mutableDateTime5);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(mutableDateTime22);
        org.junit.Assert.assertNotNull(mutableDateTime25);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(dateTimeFieldType30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 53 + "'", int32 == 53);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertNotNull(dateMidnight34);
        org.junit.Assert.assertNotNull(dateTime35);
    }

    @Test
    public void test07834() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07834");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.monthOfYear();
        org.joda.time.DateTimeField dateTimeField2 = property1.getField();
        org.joda.time.LocalDate localDate3 = property1.roundCeilingCopy();
        org.joda.time.Chronology chronology4 = localDate3.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(53, 0);
        org.joda.time.DateTime dateTime8 = localDate3.toDateTimeAtMidnight(dateTimeZone7);
        org.joda.time.DateTime.Property property9 = dateTime8.monthOfYear();
        org.joda.time.DateTime dateTime10 = property9.roundHalfCeilingCopy();
        org.joda.time.DateTime dateTime12 = property9.addWrapFieldToCopy(26197957);
        org.joda.time.DateTime dateTime13 = property9.withMinimumValue();
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate((long) (byte) -1);
        int int16 = localDate15.getYearOfEra();
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.UTC;
        java.util.TimeZone timeZone18 = dateTimeZone17.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.UTC;
        long long21 = dateTimeZone17.getMillisKeepLocal(dateTimeZone19, (long) 44);
        org.joda.time.DateTime dateTime22 = localDate15.toDateTimeAtMidnight(dateTimeZone17);
        org.joda.time.DateTime dateTime23 = localDate15.toDateTimeAtCurrentTime();
        org.joda.time.MutableDateTime mutableDateTime24 = org.joda.time.MutableDateTime.now();
        mutableDateTime24.add((long) 'a');
        org.joda.time.MutableDateTime.Property property27 = mutableDateTime24.yearOfCentury();
        mutableDateTime24.addWeekyears((int) (byte) 1);
        int int30 = dateTime23.compareTo((org.joda.time.ReadableInstant) mutableDateTime24);
        org.joda.time.MutableDateTime.Property property31 = mutableDateTime24.centuryOfEra();
        org.joda.time.Duration duration33 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration35 = org.joda.time.Duration.standardDays((long) (byte) 1);
        java.lang.String str36 = duration35.toString();
        boolean boolean37 = duration33.isShorterThan((org.joda.time.ReadableDuration) duration35);
        long long38 = duration33.getStandardMinutes();
        long long39 = duration33.getStandardMinutes();
        mutableDateTime24.add((org.joda.time.ReadableDuration) duration33, 26150565);
        org.joda.time.MutableDateTime mutableDateTime42 = org.joda.time.MutableDateTime.now();
        java.lang.Object obj43 = mutableDateTime42.clone();
        mutableDateTime42.setTime((long) 46);
        org.joda.time.MutableDateTime.Property property46 = mutableDateTime42.dayOfWeek();
        mutableDateTime42.setMillisOfDay(2);
        org.joda.time.MutableDateTime.Property property49 = mutableDateTime42.yearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime50 = property49.roundCeiling();
        mutableDateTime50.setMillisOfDay(49);
        boolean boolean53 = mutableDateTime24.isEqual((org.joda.time.ReadableInstant) mutableDateTime50);
        org.joda.time.DateTimeFieldType dateTimeFieldType54 = org.joda.time.DateTimeFieldType.dayOfMonth();
        int int55 = mutableDateTime24.get(dateTimeFieldType54);
        mutableDateTime24.addMillis(73619);
        long long58 = property9.getDifferenceAsLong((org.joda.time.ReadableInstant) mutableDateTime24);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime24.setDateTime(62308, 81358, 2037, 26503844, 310, 10046, 26462);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26503844 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1969 + "'", int16 == 1969);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(timeZone18);
// flaky:         org.junit.Assert.assertEquals(timeZone18.getDisplayName(), "\u5354\u8abf\u4e16\u754c\u6642\u9593");
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 44L + "'", long21 == 44L);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(mutableDateTime24);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "PT86400S" + "'", str36, "PT86400S");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 1440L + "'", long38 == 1440L);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 1440L + "'", long39 == 1440L);
        org.junit.Assert.assertNotNull(mutableDateTime42);
        org.junit.Assert.assertNotNull(obj43);
// flaky:         org.junit.Assert.assertEquals(obj43.toString(), "2022-02-22T07:23:57.163Z");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj43), "2022-02-22T07:23:57.163Z");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj43), "2022-02-22T07:23:57.163Z");
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(mutableDateTime50);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 15 + "'", int55 == 15);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + (-859185L) + "'", long58 == (-859185L));
    }

    @Test
    public void test07835() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07835");
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod(999, 12, 8, (int) (byte) 10, 5, (-292275054), 15, 50);
        int int9 = mutablePeriod8.getMillis();
        int int10 = mutablePeriod8.size();
        org.joda.time.Duration duration12 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration14 = org.joda.time.Duration.standardDays((long) (byte) 1);
        java.lang.String str15 = duration14.toString();
        boolean boolean16 = duration12.isShorterThan((org.joda.time.ReadableDuration) duration14);
        org.joda.time.Duration duration18 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period19 = duration18.toPeriod();
        org.joda.time.Duration duration22 = duration18.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Duration duration24 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration27 = duration24.withDurationAdded((long) (short) 100, (int) ' ');
        boolean boolean28 = duration22.isLongerThan((org.joda.time.ReadableDuration) duration24);
        boolean boolean29 = duration14.isEqual((org.joda.time.ReadableDuration) duration24);
        org.joda.time.LocalDate localDate31 = new org.joda.time.LocalDate((long) (byte) -1);
        int int32 = localDate31.getYearOfEra();
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.UTC;
        java.util.TimeZone timeZone34 = dateTimeZone33.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.UTC;
        long long37 = dateTimeZone33.getMillisKeepLocal(dateTimeZone35, (long) 44);
        org.joda.time.DateTime dateTime38 = localDate31.toDateTimeAtMidnight(dateTimeZone33);
        org.joda.time.DateTime dateTime40 = dateTime38.minusWeeks(62234);
        org.joda.time.Period period41 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration24, (org.joda.time.ReadableInstant) dateTime38);
        long long42 = duration24.getStandardDays();
        org.joda.time.Instant instant44 = new org.joda.time.Instant();
        org.joda.time.Instant instant46 = instant44.withMillis(0L);
        org.joda.time.Duration duration48 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period49 = duration48.toPeriod();
        org.joda.time.Duration duration52 = duration48.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Instant instant53 = instant46.plus((org.joda.time.ReadableDuration) duration52);
        long long54 = instant53.getMillis();
        org.joda.time.Chronology chronology55 = instant53.getChronology();
        org.joda.time.DurationField durationField56 = chronology55.months();
        org.joda.time.Period period57 = new org.joda.time.Period((-205878993L), chronology55);
        org.joda.time.DateTimeField dateTimeField58 = chronology55.weekOfWeekyear();
        org.joda.time.DurationField durationField59 = chronology55.centuries();
        org.joda.time.DateTimeField dateTimeField60 = chronology55.millisOfDay();
        org.joda.time.DateTimeField dateTimeField61 = chronology55.weekOfWeekyear();
        mutablePeriod8.setPeriod((org.joda.time.ReadableDuration) duration24, chronology55);
        org.joda.time.DateTimeField dateTimeField63 = chronology55.clockhourOfHalfday();
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 50 + "'", int9 == 50);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 8 + "'", int10 == 8);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "PT86400S" + "'", str15, "PT86400S");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1969 + "'", int32 == 1969);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertNotNull(timeZone34);
// flaky:         org.junit.Assert.assertEquals(timeZone34.getDisplayName(), "\u5354\u8abf\u4e16\u754c\u6642\u9593");
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 44L + "'", long37 == 44L);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 1L + "'", long42 == 1L);
        org.junit.Assert.assertNotNull(instant46);
        org.junit.Assert.assertNotNull(duration48);
        org.junit.Assert.assertNotNull(period49);
        org.junit.Assert.assertNotNull(duration52);
        org.junit.Assert.assertNotNull(instant53);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 86400000L + "'", long54 == 86400000L);
        org.junit.Assert.assertNotNull(chronology55);
        org.junit.Assert.assertNotNull(durationField56);
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertNotNull(durationField59);
        org.junit.Assert.assertNotNull(dateTimeField60);
        org.junit.Assert.assertNotNull(dateTimeField61);
        org.junit.Assert.assertNotNull(dateTimeField63);
    }

    @Test
    public void test07836() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07836");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.UTC;
        java.util.Locale locale3 = java.util.Locale.GERMAN;
        java.lang.String str4 = locale3.getDisplayName();
        java.lang.String str5 = dateTimeZone1.getName(100L, locale3);
        org.joda.time.MutableDateTime mutableDateTime6 = new org.joda.time.MutableDateTime(948227L, dateTimeZone1);
        org.joda.time.MutableDateTime.Property property7 = mutableDateTime6.year();
        mutableDateTime6.addHours(16);
        org.joda.time.MutableDateTime mutableDateTime10 = mutableDateTime6.copy();
        int int11 = mutableDateTime6.getMinuteOfDay();
        mutableDateTime6.addDays(63);
        mutableDateTime6.addSeconds(26437);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "de");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u5fb7\u6587" + "'", str4, "\u5fb7\u6587");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "+00:00" + "'", str5, "+00:00");
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(mutableDateTime10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 975 + "'", int11 == 975);
    }

    @Test
    public void test07837() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07837");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime3 = mutableDateTime0.copy();
        org.joda.time.MutableDateTime.Property property4 = mutableDateTime0.weekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime5 = property4.roundHalfFloor();
        org.joda.time.MutableDateTime mutableDateTime6 = property4.roundHalfCeiling();
        org.joda.time.MutableDateTime mutableDateTime8 = property4.set(1);
        org.joda.time.MutableDateTime mutableDateTime9 = org.joda.time.MutableDateTime.now();
        mutableDateTime9.add((long) 'a');
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime9.yearOfCentury();
        org.joda.time.Duration duration14 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period15 = duration14.toPeriod();
        org.joda.time.Duration duration17 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration20 = duration17.withDurationAdded((long) (short) 100, (int) ' ');
        org.joda.time.Duration duration21 = duration14.minus((org.joda.time.ReadableDuration) duration20);
        mutableDateTime9.add((org.joda.time.ReadableDuration) duration14);
        org.joda.time.MutableDateTime.Property property23 = mutableDateTime9.centuryOfEra();
        mutableDateTime9.addYears(0);
        mutableDateTime9.setMinuteOfDay((int) (short) 0);
        org.joda.time.Instant instant28 = new org.joda.time.Instant();
        org.joda.time.Instant instant30 = instant28.withMillis(0L);
        org.joda.time.Duration duration32 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period33 = duration32.toPeriod();
        org.joda.time.Duration duration36 = duration32.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Instant instant37 = instant30.plus((org.joda.time.ReadableDuration) duration36);
        long long38 = instant37.getMillis();
        org.joda.time.Duration duration39 = new org.joda.time.Duration((org.joda.time.ReadableInstant) mutableDateTime9, (org.joda.time.ReadableInstant) instant37);
        mutableDateTime8.add((org.joda.time.ReadableDuration) duration39, 999);
        mutableDateTime8.setSecondOfMinute(24);
        java.lang.String str44 = mutableDateTime8.toString();
        org.joda.time.MutableDateTime.Property property45 = mutableDateTime8.secondOfMinute();
        mutableDateTime8.addYears(38170023);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime8.setMinuteOfHour(26559761);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26559761 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(mutableDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(mutableDateTime5);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(mutableDateTime8);
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(instant30);
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertNotNull(instant37);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 86400000L + "'", long38 == 86400000L);
// flaky:         org.junit.Assert.assertEquals("'" + str44 + "' != '" + "-50070-09-17T08:04:24.363Z" + "'", str44, "-50070-09-17T08:04:24.363Z");
        org.junit.Assert.assertNotNull(property45);
    }

    @Test
    public void test07838() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07838");
        org.joda.time.ReadableDuration readableDuration0 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) (byte) -1);
        int int3 = localDate2.getYearOfEra();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.UTC;
        java.util.TimeZone timeZone5 = dateTimeZone4.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.UTC;
        long long8 = dateTimeZone4.getMillisKeepLocal(dateTimeZone6, (long) 44);
        org.joda.time.DateTime dateTime9 = localDate2.toDateTimeAtMidnight(dateTimeZone4);
        org.joda.time.DateTime dateTime10 = localDate2.toDateTimeAtCurrentTime();
        org.joda.time.MutableDateTime mutableDateTime11 = org.joda.time.MutableDateTime.now();
        mutableDateTime11.add((long) 'a');
        org.joda.time.MutableDateTime.Property property14 = mutableDateTime11.yearOfCentury();
        mutableDateTime11.addWeekyears((int) (byte) 1);
        int int17 = dateTime10.compareTo((org.joda.time.ReadableInstant) mutableDateTime11);
        org.joda.time.MutablePeriod mutablePeriod18 = new org.joda.time.MutablePeriod(readableDuration0, (org.joda.time.ReadableInstant) mutableDateTime11);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1969 + "'", int3 == 1969);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "\u5354\u8abf\u4e16\u754c\u6642\u9593");
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 44L + "'", long8 == 44L);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
    }

    @Test
    public void test07839() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07839");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) (short) -1);
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardDays((long) (byte) 1);
        java.lang.String str4 = duration3.toString();
        mutableDateTime1.add((org.joda.time.ReadableDuration) duration3, 8);
        mutableDateTime1.addMinutes(1424);
        mutableDateTime1.setSecondOfDay(24);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime1.setMonthOfYear(47927060);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 47927060 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "PT86400S" + "'", str4, "PT86400S");
    }

    @Test
    public void test07840() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07840");
        java.lang.Object obj0 = null;
        org.joda.time.Chronology chronology2 = null;
        java.util.Locale locale3 = java.util.Locale.GERMAN;
        java.util.Locale locale4 = java.util.Locale.CANADA;
        java.lang.String str5 = locale3.getDisplayVariant(locale4);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket6 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology2, locale4);
        java.lang.Object obj7 = dateTimeParserBucket6.saveState();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.LocalTime localTime10 = new org.joda.time.LocalTime((long) (short) 100, chronology9);
        org.joda.time.DurationFieldType durationFieldType11 = org.joda.time.DurationFieldType.weeks();
        java.lang.String str12 = durationFieldType11.getName();
        boolean boolean13 = localTime10.isSupported(durationFieldType11);
        boolean boolean14 = dateTimeParserBucket6.restoreState((java.lang.Object) boolean13);
        org.joda.time.Chronology chronology15 = dateTimeParserBucket6.getChronology();
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime(chronology15);
        org.joda.time.DateTimeField dateTimeField17 = chronology15.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField18 = chronology15.monthOfYear();
        org.joda.time.DateTimeField dateTimeField19 = chronology15.weekyear();
        org.joda.time.DateTimeField dateTimeField20 = chronology15.dayOfMonth();
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime(obj0, chronology15);
        org.joda.time.DateTime dateTime23 = dateTime21.plusMinutes(972);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "de");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertNotNull(durationFieldType11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "weeks" + "'", str12, "weeks");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTime23);
    }

    @Test
    public void test07841() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07841");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.UTC;
        java.util.Locale locale3 = java.util.Locale.GERMAN;
        java.lang.String str4 = locale3.getDisplayName();
        java.lang.String str5 = dateTimeZone1.getName(100L, locale3);
        org.joda.time.MutableDateTime mutableDateTime6 = new org.joda.time.MutableDateTime(948227L, dateTimeZone1);
        long long7 = mutableDateTime6.getMillis();
        mutableDateTime6.setWeekyear(1439);
        boolean boolean11 = mutableDateTime6.isBefore(1645514186724L);
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forOffsetMillis(36988464);
        mutableDateTime6.setZone(dateTimeZone13);
        mutableDateTime6.setDayOfYear(345);
        org.joda.time.LocalDateTime localDateTime17 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.withHourOfDay(10);
        org.joda.time.LocalDateTime.Property property20 = localDateTime17.hourOfDay();
        org.joda.time.DateTimeField dateTimeField21 = property20.getField();
        java.lang.String str22 = property20.toString();
        org.joda.time.LocalDateTime localDateTime24 = property20.addToCopy(100L);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime24.minusMinutes(46);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime24.withMillisOfDay(20);
        int int29 = localDateTime24.getMinuteOfHour();
        org.joda.time.PeriodType periodType32 = null;
        org.joda.time.Period period33 = new org.joda.time.Period((long) 100, 1L, periodType32);
        org.joda.time.Period period35 = period33.minusSeconds((-1));
        org.joda.time.Period period37 = period35.multipliedBy((int) '#');
        org.joda.time.DurationFieldType durationFieldType38 = org.joda.time.DurationFieldType.centuries();
        int int39 = period37.get(durationFieldType38);
        org.joda.time.Period period41 = period37.plusMinutes(44);
        org.joda.time.Duration duration43 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration45 = org.joda.time.Duration.standardDays((long) (byte) 1);
        java.lang.String str46 = duration45.toString();
        boolean boolean47 = duration43.isShorterThan((org.joda.time.ReadableDuration) duration45);
        org.joda.time.Hours hours48 = duration43.toStandardHours();
        boolean boolean49 = period41.equals((java.lang.Object) duration43);
        org.joda.time.LocalDateTime localDateTime50 = localDateTime24.plus((org.joda.time.ReadableDuration) duration43);
        org.joda.time.PeriodType periodType54 = org.joda.time.PeriodType.months();
        org.joda.time.Period period55 = new org.joda.time.Period((long) 4, periodType54);
        org.joda.time.Instant instant56 = new org.joda.time.Instant();
        org.joda.time.Instant instant58 = instant56.withMillis(0L);
        org.joda.time.Chronology chronology59 = instant58.getChronology();
        org.joda.time.DurationField durationField60 = chronology59.eras();
        long long64 = chronology59.add(0L, (long) 2022, (int) '4');
        org.joda.time.DateTimeField dateTimeField65 = chronology59.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField66 = chronology59.dayOfYear();
        org.joda.time.LocalDateTime localDateTime67 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime69 = localDateTime67.withHourOfDay(10);
        org.joda.time.LocalDateTime.Property property70 = localDateTime67.hourOfDay();
        org.joda.time.DateTimeField dateTimeField71 = property70.getField();
        org.joda.time.LocalDateTime localDateTime72 = property70.roundHalfFloorCopy();
        org.joda.time.LocalDateTime.Property property73 = localDateTime72.weekyear();
        long long75 = chronology59.set((org.joda.time.ReadablePartial) localDateTime72, 4801285094859L);
        org.joda.time.Period period76 = new org.joda.time.Period((long) 62308, 625L, periodType54, chronology59);
        org.joda.time.Period period77 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime6, (org.joda.time.ReadableDuration) duration43, periodType54);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "de");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u5fb7\u6587" + "'", str4, "\u5fb7\u6587");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "+00:00" + "'", str5, "+00:00");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 948227L + "'", long7 == 948227L);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Property[hourOfDay]" + "'", str22, "Property[hourOfDay]");
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime28);
// flaky:         org.junit.Assert.assertTrue("'" + int29 + "' != '" + 23 + "'", int29 == 23);
        org.junit.Assert.assertNotNull(period35);
        org.junit.Assert.assertNotNull(period37);
        org.junit.Assert.assertNotNull(durationFieldType38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(period41);
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertNotNull(duration45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "PT86400S" + "'", str46, "PT86400S");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(hours48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(periodType54);
        org.junit.Assert.assertNotNull(instant58);
        org.junit.Assert.assertNotNull(chronology59);
        org.junit.Assert.assertNotNull(durationField60);
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 105144L + "'", long64 == 105144L);
        org.junit.Assert.assertNotNull(dateTimeField65);
        org.junit.Assert.assertNotNull(dateTimeField66);
        org.junit.Assert.assertNotNull(localDateTime67);
        org.junit.Assert.assertNotNull(localDateTime69);
        org.junit.Assert.assertNotNull(property70);
        org.junit.Assert.assertNotNull(dateTimeField71);
        org.junit.Assert.assertNotNull(localDateTime72);
        org.junit.Assert.assertNotNull(property73);
        org.junit.Assert.assertTrue("'" + long75 + "' != '" + 1645513200000L + "'", long75 == 1645513200000L);
    }

    @Test
    public void test07842() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07842");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime3 = mutableDateTime0.copy();
        org.joda.time.MutableDateTime.Property property4 = mutableDateTime0.weekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime5 = property4.roundHalfFloor();
        org.joda.time.MutableDateTime mutableDateTime7 = property4.add((long) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.UTC;
        java.util.TimeZone timeZone9 = dateTimeZone8.toTimeZone();
        org.joda.time.MutableDateTime mutableDateTime10 = mutableDateTime7.toMutableDateTime(dateTimeZone8);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime(chronology11);
        org.joda.time.DateTime dateTime14 = dateTime12.plusMinutes(15);
        org.joda.time.Chronology chronology15 = dateTime12.getChronology();
        org.joda.time.Instant instant16 = new org.joda.time.Instant();
        org.joda.time.Instant instant18 = instant16.withMillis(0L);
        org.joda.time.Chronology chronology19 = instant18.getChronology();
        org.joda.time.DurationField durationField20 = chronology19.eras();
        org.joda.time.LocalTime localTime21 = org.joda.time.LocalTime.now(chronology19);
        org.joda.time.DurationField durationField22 = chronology19.eras();
        org.joda.time.DateTimeField dateTimeField23 = chronology19.hourOfDay();
        org.joda.time.DateTime dateTime24 = dateTime12.withChronology(chronology19);
        org.joda.time.MutableDateTime mutableDateTime25 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property26 = mutableDateTime25.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime27 = property26.getMutableDateTime();
        boolean boolean28 = dateTime24.isBefore((org.joda.time.ReadableInstant) mutableDateTime27);
        mutableDateTime27.setHourOfDay(0);
        mutableDateTime10.setMillis((org.joda.time.ReadableInstant) mutableDateTime27);
        org.joda.time.Period period33 = org.joda.time.Period.hours(20);
        mutableDateTime27.add((org.joda.time.ReadablePeriod) period33, 26196);
        mutableDateTime27.addWeekyears(26150565);
        org.joda.time.ReadableInstant readableInstant38 = null;
        mutableDateTime27.setDate(readableInstant38);
        org.joda.time.MutableDateTime mutableDateTime40 = mutableDateTime27.toMutableDateTime();
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(mutableDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(mutableDateTime5);
        org.junit.Assert.assertNotNull(mutableDateTime7);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(timeZone9);
// flaky:         org.junit.Assert.assertEquals(timeZone9.getDisplayName(), "\u534f\u8c03\u4e16\u754c\u65f6\u95f4");
        org.junit.Assert.assertNotNull(mutableDateTime10);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(instant18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(localTime21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(mutableDateTime25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(mutableDateTime27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertNotNull(mutableDateTime40);
    }

    @Test
    public void test07843() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07843");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("2022-02-22T07:17:33.003Z");
        org.joda.time.MutableDateTime mutableDateTime2 = org.joda.time.MutableDateTime.now();
        mutableDateTime2.add((long) 'a');
        org.joda.time.MutableDateTime.Property property5 = mutableDateTime2.yearOfCentury();
        org.joda.time.Duration duration7 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period8 = duration7.toPeriod();
        org.joda.time.Duration duration10 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration13 = duration10.withDurationAdded((long) (short) 100, (int) ' ');
        org.joda.time.Duration duration14 = duration7.minus((org.joda.time.ReadableDuration) duration13);
        mutableDateTime2.add((org.joda.time.ReadableDuration) duration7);
        org.joda.time.MutableDateTime.Property property16 = mutableDateTime2.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime17 = property16.roundFloor();
        org.joda.time.MutableDateTime mutableDateTime18 = property16.roundFloor();
        mutableDateTime18.addHours(0);
        org.joda.time.MutableDateTime mutableDateTime21 = new org.joda.time.MutableDateTime((java.lang.Object) mutableDateTime18);
        mutableDateTime18.setMillisOfDay(50);
        org.joda.time.Duration duration25 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration27 = org.joda.time.Duration.standardDays((long) (byte) 1);
        java.lang.String str28 = duration27.toString();
        boolean boolean29 = duration25.isShorterThan((org.joda.time.ReadableDuration) duration27);
        org.joda.time.Duration duration31 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period32 = duration31.toPeriod();
        org.joda.time.Duration duration34 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration36 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration39 = duration36.withDurationAdded((long) (short) 100, (int) ' ');
        boolean boolean40 = duration34.isLongerThan((org.joda.time.ReadableDuration) duration39);
        org.joda.time.Duration duration41 = duration31.minus((org.joda.time.ReadableDuration) duration34);
        boolean boolean42 = duration25.isShorterThan((org.joda.time.ReadableDuration) duration41);
        org.joda.time.ReadableDuration readableDuration43 = null;
        org.joda.time.ReadableInstant readableInstant44 = null;
        org.joda.time.Period period45 = new org.joda.time.Period(readableDuration43, readableInstant44);
        org.joda.time.Period period47 = period45.withDays((int) (byte) 1);
        org.joda.time.Duration duration49 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Hours hours50 = duration49.toStandardHours();
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.DateTime dateTime52 = new org.joda.time.DateTime(chronology51);
        int int53 = dateTime52.getSecondOfMinute();
        org.joda.time.MutablePeriod mutablePeriod54 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration49, (org.joda.time.ReadableInstant) dateTime52);
        org.joda.time.Duration duration55 = period45.toDurationFrom((org.joda.time.ReadableInstant) dateTime52);
        org.joda.time.Duration duration57 = duration41.withDurationAdded((org.joda.time.ReadableDuration) duration55, (int) ' ');
        org.joda.time.Duration duration59 = duration57.withMillis((long) 70);
        org.joda.time.ReadableInstant readableInstant62 = null;
        org.joda.time.ReadableInstant readableInstant63 = null;
        org.joda.time.PeriodType periodType64 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod65 = new org.joda.time.MutablePeriod(readableInstant62, readableInstant63, periodType64);
        org.joda.time.DurationFieldType durationFieldType67 = periodType64.getFieldType((int) (short) 0);
        java.lang.String str68 = periodType64.toString();
        org.joda.time.Instant instant69 = new org.joda.time.Instant();
        org.joda.time.Instant instant71 = instant69.withMillis(0L);
        org.joda.time.Chronology chronology72 = instant71.getChronology();
        org.joda.time.Period period73 = new org.joda.time.Period((long) 53, (long) (-1), periodType64, chronology72);
        org.joda.time.PeriodType periodType74 = periodType64.withHoursRemoved();
        org.joda.time.PeriodType periodType75 = periodType74.withMinutesRemoved();
        org.joda.time.Period period76 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime18, (org.joda.time.ReadableDuration) duration57, periodType74);
        java.lang.Object obj77 = mutableDateTime18.clone();
        java.util.Date date78 = mutableDateTime18.toDate();
        boolean boolean79 = timeZone1.inDaylightTime(date78);
        org.junit.Assert.assertNotNull(timeZone1);
// flaky:         org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "\u683c\u6797\u5a01\u6cbb\u65f6\u95f4");
        org.junit.Assert.assertNotNull(mutableDateTime2);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(mutableDateTime17);
        org.junit.Assert.assertNotNull(mutableDateTime18);
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "PT86400S" + "'", str28, "PT86400S");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertNotNull(duration39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(duration41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(period47);
        org.junit.Assert.assertNotNull(duration49);
        org.junit.Assert.assertNotNull(hours50);
// flaky:         org.junit.Assert.assertTrue("'" + int53 + "' != '" + 57 + "'", int53 == 57);
        org.junit.Assert.assertNotNull(duration55);
        org.junit.Assert.assertNotNull(duration57);
        org.junit.Assert.assertNotNull(duration59);
        org.junit.Assert.assertNotNull(periodType64);
        org.junit.Assert.assertNotNull(durationFieldType67);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "PeriodType[YearDayTime]" + "'", str68, "PeriodType[YearDayTime]");
        org.junit.Assert.assertNotNull(instant71);
        org.junit.Assert.assertNotNull(chronology72);
        org.junit.Assert.assertNotNull(periodType74);
        org.junit.Assert.assertNotNull(periodType75);
        org.junit.Assert.assertNotNull(obj77);
        org.junit.Assert.assertEquals(obj77.toString(), "2000-01-01T00:00:00.050Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj77), "2000-01-01T00:00:00.050Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj77), "2000-01-01T00:00:00.050Z");
        org.junit.Assert.assertNotNull(date78);
        org.junit.Assert.assertEquals(date78.toString(), "Sat Jan 01 00:00:00 GMT 2000");
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
    }

    @Test
    public void test07844() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07844");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((long) (short) 100, chronology1);
        int int3 = localTime2.getMillisOfDay();
        org.joda.time.LocalTime.Property property4 = localTime2.millisOfSecond();
        org.joda.time.DurationField durationField5 = property4.getLeapDurationField();
        java.lang.String str6 = property4.getName();
        org.joda.time.LocalTime localTime8 = property4.addWrapFieldToCopy(51);
        org.joda.time.LocalTime localTime10 = property4.addNoWrapToCopy(8);
        org.joda.time.LocalTime localTime12 = property4.addNoWrapToCopy(2021);
        org.joda.time.LocalTime localTime14 = property4.setCopy(161);
        org.joda.time.LocalTime localTime15 = property4.roundHalfCeilingCopy();
        org.joda.time.LocalTime localTime16 = property4.roundHalfFloorCopy();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 100 + "'", int3 == 100);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNull(durationField5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "millisOfSecond" + "'", str6, "millisOfSecond");
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(localTime16);
    }

    @Test
    public void test07845() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07845");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        java.lang.Object obj1 = mutableDateTime0.clone();
        mutableDateTime0.setTime((long) 46);
        org.joda.time.MutableDateTime.Property property4 = mutableDateTime0.dayOfWeek();
        org.joda.time.MutableDateTime mutableDateTime6 = property4.add(1L);
        int int7 = property4.getMinimumValue();
        org.joda.time.MutableDateTime mutableDateTime9 = property4.addWrapField(10);
        mutableDateTime9.addMinutes(7203);
        org.joda.time.MutableDateTime mutableDateTime12 = org.joda.time.MutableDateTime.now();
        mutableDateTime12.add((long) 'a');
        org.joda.time.MutableDateTime.Property property15 = mutableDateTime12.yearOfCentury();
        org.joda.time.Duration duration17 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period18 = duration17.toPeriod();
        org.joda.time.Duration duration20 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration23 = duration20.withDurationAdded((long) (short) 100, (int) ' ');
        org.joda.time.Duration duration24 = duration17.minus((org.joda.time.ReadableDuration) duration23);
        mutableDateTime12.add((org.joda.time.ReadableDuration) duration17);
        org.joda.time.MutableDateTime.Property property26 = mutableDateTime12.centuryOfEra();
        mutableDateTime12.addHours((int) (byte) 10);
        mutableDateTime12.addWeeks(20);
        org.joda.time.DateTimeField dateTimeField31 = mutableDateTime12.getRoundingField();
        org.joda.time.MutableDateTime.Property property32 = mutableDateTime12.era();
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.forOffsetMillis(4);
        mutableDateTime12.setZoneRetainFields(dateTimeZone34);
        mutableDateTime9.setZone(dateTimeZone34);
        org.joda.time.LocalDateTime localDateTime37 = org.joda.time.LocalDateTime.now(dateTimeZone34);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType39 = localDateTime37.getFieldType(26291);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 26291");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(obj1);
// flaky:         org.junit.Assert.assertEquals(obj1.toString(), "2022-02-22T07:23:57.607Z");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj1), "2022-02-22T07:23:57.607Z");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj1), "2022-02-22T07:23:57.607Z");
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertNotNull(mutableDateTime12);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNull(dateTimeField31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertNotNull(localDateTime37);
    }

    @Test
    public void test07846() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07846");
        org.joda.time.ReadableDuration readableDuration2 = null;
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.Period period4 = new org.joda.time.Period(readableDuration2, readableInstant3);
        org.joda.time.PeriodType periodType7 = null;
        org.joda.time.Period period8 = new org.joda.time.Period((long) 100, 1L, periodType7);
        org.joda.time.Period period10 = period8.minusSeconds((-1));
        java.lang.String str11 = period8.toString();
        org.joda.time.Period period12 = period8.toPeriod();
        org.joda.time.PeriodType periodType13 = period8.getPeriodType();
        org.joda.time.Period period14 = period4.normalizedStandard(periodType13);
        org.joda.time.DurationFieldType durationFieldType15 = null;
        int int16 = periodType13.indexOf(durationFieldType15);
        org.joda.time.Instant instant17 = new org.joda.time.Instant();
        org.joda.time.Instant instant19 = instant17.withMillis(0L);
        org.joda.time.Chronology chronology20 = instant19.getChronology();
        org.joda.time.DurationField durationField21 = chronology20.eras();
        org.joda.time.LocalTime localTime22 = org.joda.time.LocalTime.now(chronology20);
        org.joda.time.DurationField durationField23 = chronology20.eras();
        org.joda.time.DateTimeField dateTimeField24 = chronology20.hourOfDay();
        org.joda.time.MutablePeriod mutablePeriod25 = new org.joda.time.MutablePeriod((long) 12, (long) 292278993, periodType13, chronology20);
        org.joda.time.DateTimeField dateTimeField26 = chronology20.hourOfDay();
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime(chronology27);
        int int29 = dateTime28.getYearOfCentury();
        int int30 = dateTime28.getWeekyear();
        org.joda.time.DateTime dateTime32 = dateTime28.plus((long) 15);
        org.joda.time.DateTime.Property property33 = dateTime28.year();
        org.joda.time.DateTime dateTime35 = property33.addToCopy((long) 25);
        org.joda.time.Period period37 = new org.joda.time.Period(985622L);
        org.joda.time.DateTime dateTime39 = dateTime35.withPeriodAdded((org.joda.time.ReadablePeriod) period37, 62371);
        int[] intArray42 = chronology20.get((org.joda.time.ReadablePeriod) period37, (-835943673573850L), 1420626L);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "PT0.099S" + "'", str11, "PT0.099S");
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(periodType13);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNotNull(instant19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(localTime22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 22 + "'", int29 == 22);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2022 + "'", int30 == 2022);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[26490, 0, 0, 0, 0, 23, 14, 476]");
    }

    @Test
    public void test07847() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07847");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property2 = localDate1.monthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.minuteOfDay();
        boolean boolean4 = localDate1.isSupported(dateTimeFieldType3);
        org.joda.time.LocalDate.Property property5 = localDate1.dayOfWeek();
        org.joda.time.MutableDateTime mutableDateTime6 = org.joda.time.MutableDateTime.now();
        mutableDateTime6.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime9 = mutableDateTime6.copy();
        org.joda.time.MutableDateTime.Property property10 = mutableDateTime6.weekOfWeekyear();
        org.joda.time.MutableDateTime.Property property11 = mutableDateTime6.dayOfYear();
        org.joda.time.MutableDateTime mutableDateTime12 = org.joda.time.MutableDateTime.now();
        mutableDateTime12.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime15 = mutableDateTime12.copy();
        mutableDateTime12.setDate((long) '#');
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property19 = localDate18.monthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = org.joda.time.DateTimeFieldType.minuteOfDay();
        boolean boolean21 = localDate18.isSupported(dateTimeFieldType20);
        int int22 = localDate18.getDayOfYear();
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateMidnight dateMidnight24 = localDate18.toDateMidnight(dateTimeZone23);
        org.joda.time.DateTime dateTime25 = mutableDateTime12.toDateTime(dateTimeZone23);
        org.joda.time.LocalDate localDate26 = org.joda.time.LocalDate.now(dateTimeZone23);
        org.joda.time.PeriodType periodType29 = null;
        org.joda.time.Period period30 = new org.joda.time.Period((long) 100, 1L, periodType29);
        org.joda.time.PeriodType periodType31 = period30.getPeriodType();
        boolean boolean32 = dateTimeZone23.equals((java.lang.Object) periodType31);
        mutableDateTime6.setZoneRetainFields(dateTimeZone23);
        org.joda.time.LocalDate localDate34 = new org.joda.time.LocalDate(dateTimeZone23);
        org.joda.time.DateTime dateTime35 = localDate1.toDateTimeAtStartOfDay(dateTimeZone23);
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime(86400000L, dateTimeZone23);
        int int37 = dateTime36.getMillisOfSecond();
        org.joda.time.LocalDate localDate38 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property39 = localDate38.monthOfYear();
        org.joda.time.DateTimeField dateTimeField40 = property39.getField();
        org.joda.time.LocalDate localDate41 = property39.roundCeilingCopy();
        org.joda.time.Chronology chronology42 = localDate41.getChronology();
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(53, 0);
        org.joda.time.DateTime dateTime46 = localDate41.toDateTimeAtMidnight(dateTimeZone45);
        org.joda.time.DateTime.Property property47 = dateTime46.monthOfYear();
        org.joda.time.DateTime dateTime49 = dateTime46.minusMillis(26237290);
        boolean boolean50 = dateTime36.isAfter((org.joda.time.ReadableInstant) dateTime49);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(mutableDateTime12);
        org.junit.Assert.assertNotNull(mutableDateTime15);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 53 + "'", int22 == 53);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(dateMidnight24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertNotNull(periodType31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(localDate41);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(dateTimeZone45);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
    }

    @Test
    public void test07848() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07848");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        int int2 = dateTime1.getYearOfCentury();
        int int3 = dateTime1.getWeekyear();
        org.joda.time.DateTime dateTime5 = dateTime1.plus((long) 15);
        org.joda.time.DateTime.Property property6 = dateTime1.year();
        org.joda.time.DateTime dateTime7 = property6.roundHalfFloorCopy();
        org.joda.time.DateTime.Property property8 = dateTime7.millisOfSecond();
        org.joda.time.MutableDateTime mutableDateTime9 = dateTime7.toMutableDateTime();
        int int10 = dateTime7.getMillisOfSecond();
        int int11 = dateTime7.getMillisOfSecond();
        boolean boolean13 = dateTime7.isAfter((long) 51);
        org.joda.time.DateTime.Property property14 = dateTime7.yearOfCentury();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 22 + "'", int2 == 22);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2022 + "'", int3 == 2022);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(property14);
    }

    @Test
    public void test07849() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07849");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime3 = mutableDateTime0.copy();
        org.joda.time.MutableDateTime.Property property4 = mutableDateTime0.weekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime5 = property4.roundHalfFloor();
        org.joda.time.MutableDateTime mutableDateTime6 = property4.roundHalfCeiling();
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.ReadableInstant readableInstant11 = null;
        org.joda.time.PeriodType periodType12 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod13 = new org.joda.time.MutablePeriod(readableInstant10, readableInstant11, periodType12);
        org.joda.time.DurationFieldType durationFieldType15 = periodType12.getFieldType((int) (short) 0);
        java.lang.String str16 = periodType12.toString();
        org.joda.time.Instant instant17 = new org.joda.time.Instant();
        org.joda.time.Instant instant19 = instant17.withMillis(0L);
        org.joda.time.Chronology chronology20 = instant19.getChronology();
        org.joda.time.Period period21 = new org.joda.time.Period((long) 53, (long) (-1), periodType12, chronology20);
        org.joda.time.DateTimeField dateTimeField22 = dateTimeFieldType7.getField(chronology20);
        java.util.Locale locale23 = java.util.Locale.UK;
        java.lang.String str24 = locale23.getDisplayLanguage();
        int int25 = dateTimeField22.getMaximumTextLength(locale23);
        mutableDateTime6.setRounding(dateTimeField22);
        java.lang.String str28 = dateTimeField22.getAsText(1645514195313L);
        long long30 = dateTimeField22.roundCeiling((long) 455);
        int int33 = dateTimeField22.getDifference((long) 62555, (long) 26456200);
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(mutableDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(mutableDateTime5);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertNotNull(periodType12);
        org.junit.Assert.assertNotNull(durationFieldType15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "PeriodType[YearDayTime]" + "'", str16, "PeriodType[YearDayTime]");
        org.junit.Assert.assertNotNull(instant19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "en_GB");
// flaky:         org.junit.Assert.assertEquals("'" + str24 + "' != '" + "English" + "'", str24, "English");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 4 + "'", int25 == 4);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "436" + "'", str28, "436");
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 60000L + "'", long30 == 60000L);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-439) + "'", int33 == (-439));
    }

    @Test
    public void test07850() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07850");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime3 = mutableDateTime0.copy();
        org.joda.time.MutableDateTime.Property property4 = mutableDateTime0.weekOfWeekyear();
        org.joda.time.MutableDateTime.Property property5 = mutableDateTime0.dayOfYear();
        org.joda.time.MutableDateTime mutableDateTime6 = org.joda.time.MutableDateTime.now();
        mutableDateTime6.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime9 = mutableDateTime6.copy();
        mutableDateTime6.setDate((long) '#');
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property13 = localDate12.monthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.minuteOfDay();
        boolean boolean15 = localDate12.isSupported(dateTimeFieldType14);
        int int16 = localDate12.getDayOfYear();
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateMidnight dateMidnight18 = localDate12.toDateMidnight(dateTimeZone17);
        org.joda.time.DateTime dateTime19 = mutableDateTime6.toDateTime(dateTimeZone17);
        org.joda.time.LocalDate localDate20 = org.joda.time.LocalDate.now(dateTimeZone17);
        org.joda.time.PeriodType periodType23 = null;
        org.joda.time.Period period24 = new org.joda.time.Period((long) 100, 1L, periodType23);
        org.joda.time.PeriodType periodType25 = period24.getPeriodType();
        boolean boolean26 = dateTimeZone17.equals((java.lang.Object) periodType25);
        mutableDateTime0.setZoneRetainFields(dateTimeZone17);
        long long29 = dateTimeZone17.nextTransition(100L);
        org.joda.time.DateTime dateTime30 = org.joda.time.DateTime.now(dateTimeZone17);
        org.joda.time.YearMonthDay yearMonthDay31 = dateTime30.toYearMonthDay();
        org.joda.time.DateTime.Property property32 = dateTime30.yearOfCentury();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime34 = dateTime30.withMillisOfSecond(26369);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26369 for millisOfSecond must be in the range [0,999]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(mutableDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 53 + "'", int16 == 53);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(dateMidnight18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(periodType25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 100L + "'", long29 == 100L);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(yearMonthDay31);
        org.junit.Assert.assertNotNull(property32);
    }

    @Test
    public void test07851() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07851");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime3 = mutableDateTime0.copy();
        org.joda.time.MutableDateTime.Property property4 = mutableDateTime0.yearOfEra();
        org.joda.time.MutableDateTime mutableDateTime5 = property4.roundHalfCeiling();
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.ReadableInstant readableInstant11 = null;
        org.joda.time.PeriodType periodType12 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod13 = new org.joda.time.MutablePeriod(readableInstant10, readableInstant11, periodType12);
        org.joda.time.DurationFieldType durationFieldType15 = periodType12.getFieldType((int) (short) 0);
        java.lang.String str16 = periodType12.toString();
        org.joda.time.Instant instant17 = new org.joda.time.Instant();
        org.joda.time.Instant instant19 = instant17.withMillis(0L);
        org.joda.time.Chronology chronology20 = instant19.getChronology();
        org.joda.time.Period period21 = new org.joda.time.Period((long) 53, (long) (-1), periodType12, chronology20);
        org.joda.time.DateTimeField dateTimeField22 = dateTimeFieldType7.getField(chronology20);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime(chronology23);
        org.joda.time.DateTime dateTime26 = dateTime24.plusMinutes(15);
        org.joda.time.Chronology chronology27 = dateTime24.getChronology();
        java.lang.String str28 = chronology27.toString();
        org.joda.time.DateTimeField dateTimeField29 = dateTimeFieldType7.getField(chronology27);
        org.joda.time.DateTimeField dateTimeField30 = chronology27.dayOfYear();
        java.util.Locale locale31 = java.util.Locale.CANADA;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket33 = new org.joda.time.format.DateTimeParserBucket((long) 19045, chronology27, locale31, (java.lang.Integer) 5);
        int int34 = property4.getMaximumShortTextLength(locale31);
        org.joda.time.MutableDateTime mutableDateTime35 = property4.getMutableDateTime();
        org.joda.time.DurationFieldType durationFieldType36 = org.joda.time.DurationFieldType.millis();
        java.lang.String str37 = durationFieldType36.getName();
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime(chronology39);
        org.joda.time.DateTime dateTime42 = dateTime40.plusMinutes(15);
        org.joda.time.Chronology chronology43 = dateTime40.getChronology();
        org.joda.time.DurationField durationField44 = chronology43.hours();
        org.joda.time.MutablePeriod mutablePeriod45 = new org.joda.time.MutablePeriod(1440L, chronology43);
        boolean boolean46 = durationFieldType36.isSupported(chronology43);
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.DateTime dateTime49 = new org.joda.time.DateTime(chronology48);
        org.joda.time.DateTime dateTime51 = dateTime49.plusMinutes(15);
        org.joda.time.Chronology chronology52 = dateTime49.getChronology();
        java.lang.String str53 = chronology52.toString();
        org.joda.time.LocalTime localTime54 = org.joda.time.LocalTime.fromMillisOfDay((long) (short) -1, chronology52);
        org.joda.time.DateTimeField dateTimeField55 = chronology52.millisOfDay();
        org.joda.time.DateTimeField dateTimeField56 = chronology52.millisOfSecond();
        boolean boolean57 = durationFieldType36.isSupported(chronology52);
        org.joda.time.DateTimeField dateTimeField58 = chronology52.hourOfHalfday();
        mutableDateTime35.setChronology(chronology52);
        org.joda.time.DateTimeField dateTimeField60 = chronology52.yearOfCentury();
        java.lang.String str61 = chronology52.toString();
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(mutableDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(mutableDateTime5);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertNotNull(periodType12);
        org.junit.Assert.assertNotNull(durationFieldType15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "PeriodType[YearDayTime]" + "'", str16, "PeriodType[YearDayTime]");
        org.junit.Assert.assertNotNull(instant19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "ISOChronology[UTC]" + "'", str28, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "en_CA");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 9 + "'", int34 == 9);
        org.junit.Assert.assertNotNull(mutableDateTime35);
        org.junit.Assert.assertNotNull(durationFieldType36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "millis" + "'", str37, "millis");
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(durationField44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(chronology52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "ISOChronology[UTC]" + "'", str53, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(localTime54);
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertNotNull(dateTimeField60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "ISOChronology[UTC]" + "'", str61, "ISOChronology[UTC]");
    }

    @Test
    public void test07852() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07852");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (byte) -1, chronology1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.plusMonths(46);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.millisOfSecond();
        int int6 = localDateTime4.get(dateTimeFieldType5);
        org.joda.time.LocalDateTime localDateTime7 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.withHourOfDay(10);
        org.joda.time.DateTimeField dateTimeField13 = localDateTime11.getField((int) (byte) 0);
        org.joda.time.DateTimeField[] dateTimeFieldArray14 = localDateTime11.getFields();
        org.joda.time.LocalDateTime localDateTime16 = localDateTime11.withDayOfWeek(1);
        boolean boolean17 = localDateTime4.isEqual((org.joda.time.ReadablePartial) localDateTime11);
        org.joda.time.LocalDateTime.Property property18 = localDateTime11.millisOfDay();
        int int19 = property18.getMinimumValue();
        org.joda.time.LocalDateTime localDateTime20 = property18.withMinimumValue();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime(chronology21);
        int int23 = dateTime22.getYearOfCentury();
        int int24 = dateTime22.getWeekyear();
        org.joda.time.DateTime dateTime25 = dateTime22.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime.Property property26 = dateTime22.yearOfEra();
        org.joda.time.DateTime dateTime27 = property26.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime28 = property26.roundHalfEvenCopy();
        org.joda.time.Duration duration30 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Hours hours31 = duration30.toStandardHours();
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime(chronology32);
        int int34 = dateTime33.getSecondOfMinute();
        org.joda.time.MutablePeriod mutablePeriod35 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration30, (org.joda.time.ReadableInstant) dateTime33);
        mutablePeriod35.addSeconds(292278993);
        mutablePeriod35.setPeriod((long) 45, 946312L);
        org.joda.time.DateTime dateTime41 = dateTime28.minus((org.joda.time.ReadablePeriod) mutablePeriod35);
        org.joda.time.DateTime.Property property42 = dateTime41.dayOfWeek();
        org.joda.time.MutableDateTime mutableDateTime43 = org.joda.time.MutableDateTime.now();
        mutableDateTime43.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime46 = mutableDateTime43.copy();
        org.joda.time.MutableDateTime.Property property47 = mutableDateTime43.weekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime48 = property47.roundHalfFloor();
        org.joda.time.MutableDateTime mutableDateTime50 = property47.add((long) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone51 = org.joda.time.DateTimeZone.UTC;
        java.util.TimeZone timeZone52 = dateTimeZone51.toTimeZone();
        org.joda.time.MutableDateTime mutableDateTime53 = mutableDateTime50.toMutableDateTime(dateTimeZone51);
        int int55 = dateTimeZone51.getStandardOffset(60000L);
        java.util.Locale.Builder builder57 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder58 = builder57.clear();
        java.util.Locale locale59 = java.util.Locale.GERMAN;
        java.lang.String str60 = locale59.getDisplayName();
        java.lang.String str61 = locale59.getISO3Language();
        java.util.Locale.Builder builder62 = builder58.setLocale(locale59);
        java.lang.String str63 = dateTimeZone51.getName(950707L, locale59);
        org.joda.time.DateTime dateTime64 = dateTime41.toDateTime(dateTimeZone51);
        org.joda.time.DateTime dateTime65 = localDateTime20.toDateTime(dateTimeZone51);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 999 + "'", int6 == 999);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeFieldArray14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 22 + "'", int23 == 22);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2022 + "'", int24 == 2022);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertNotNull(hours31);
// flaky:         org.junit.Assert.assertTrue("'" + int34 + "' != '" + 57 + "'", int34 == 57);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(mutableDateTime43);
        org.junit.Assert.assertNotNull(mutableDateTime46);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertNotNull(mutableDateTime48);
        org.junit.Assert.assertNotNull(mutableDateTime50);
        org.junit.Assert.assertNotNull(dateTimeZone51);
        org.junit.Assert.assertNotNull(timeZone52);
// flaky:         org.junit.Assert.assertEquals(timeZone52.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(mutableDateTime53);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "de");
// flaky:         org.junit.Assert.assertEquals("'" + str60 + "' != '" + "German" + "'", str60, "German");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "deu" + "'", str61, "deu");
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "+00:00" + "'", str63, "+00:00");
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(dateTime65);
    }

    @Test
    public void test07853() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07853");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) (short) -1);
        mutableDateTime1.setSecondOfMinute(53);
        mutableDateTime1.setMillis(966164L);
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.Period period9 = new org.joda.time.Period(readableDuration7, readableInstant8);
        org.joda.time.PeriodType periodType12 = null;
        org.joda.time.Period period13 = new org.joda.time.Period((long) 100, 1L, periodType12);
        org.joda.time.Period period15 = period13.minusSeconds((-1));
        java.lang.String str16 = period13.toString();
        org.joda.time.Period period17 = period13.toPeriod();
        org.joda.time.PeriodType periodType18 = period13.getPeriodType();
        org.joda.time.Period period19 = period9.normalizedStandard(periodType18);
        java.lang.String str20 = periodType18.getName();
        org.joda.time.Instant instant21 = new org.joda.time.Instant();
        org.joda.time.Instant instant23 = instant21.withMillis(0L);
        org.joda.time.DateTime dateTime24 = instant23.toDateTime();
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime((long) 1);
        org.joda.time.PeriodType periodType27 = org.joda.time.PeriodType.months();
        org.joda.time.Period period28 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime24, (org.joda.time.ReadableInstant) dateTime26, periodType27);
        org.joda.time.PeriodType periodType31 = null;
        org.joda.time.Period period32 = new org.joda.time.Period((long) 100, 1L, periodType31);
        org.joda.time.Period period34 = period32.minusSeconds((-1));
        java.lang.String str35 = period32.toString();
        org.joda.time.Period period36 = period32.toPeriod();
        org.joda.time.PeriodType periodType37 = period32.getPeriodType();
        org.joda.time.DateTime dateTime38 = dateTime26.plus((org.joda.time.ReadablePeriod) period32);
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.LocalTime localTime41 = new org.joda.time.LocalTime((long) (short) 100, chronology40);
        org.joda.time.DurationFieldType durationFieldType42 = org.joda.time.DurationFieldType.millis();
        java.lang.String str43 = durationFieldType42.getName();
        boolean boolean44 = localTime41.isSupported(durationFieldType42);
        int int45 = period32.get(durationFieldType42);
        boolean boolean46 = periodType18.isSupported(durationFieldType42);
        org.joda.time.MutablePeriod mutablePeriod47 = new org.joda.time.MutablePeriod((long) 36985848, periodType18);
        mutablePeriod47.addYears(57);
        mutableDateTime1.add((org.joda.time.ReadablePeriod) mutablePeriod47, 2021);
        java.lang.Class<?> wildcardClass52 = mutablePeriod47.getClass();
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "PT0.099S" + "'", str16, "PT0.099S");
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(periodType18);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Standard" + "'", str20, "Standard");
        org.junit.Assert.assertNotNull(instant23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(periodType27);
        org.junit.Assert.assertNotNull(period34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "PT0.099S" + "'", str35, "PT0.099S");
        org.junit.Assert.assertNotNull(period36);
        org.junit.Assert.assertNotNull(periodType37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(durationFieldType42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "millis" + "'", str43, "millis");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-99) + "'", int45 == (-99));
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(wildcardClass52);
    }

    @Test
    public void test07854() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07854");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime3 = mutableDateTime0.copy();
        org.joda.time.MutableDateTime.Property property4 = mutableDateTime0.weekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime5 = property4.roundHalfFloor();
        org.joda.time.MutableDateTime mutableDateTime6 = property4.roundHalfCeiling();
        org.joda.time.MutableDateTime mutableDateTime8 = property4.set(1);
        org.joda.time.MutableDateTime mutableDateTime9 = org.joda.time.MutableDateTime.now();
        mutableDateTime9.add((long) 'a');
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime9.yearOfCentury();
        org.joda.time.Duration duration14 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period15 = duration14.toPeriod();
        org.joda.time.Duration duration17 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration20 = duration17.withDurationAdded((long) (short) 100, (int) ' ');
        org.joda.time.Duration duration21 = duration14.minus((org.joda.time.ReadableDuration) duration20);
        mutableDateTime9.add((org.joda.time.ReadableDuration) duration14);
        org.joda.time.MutableDateTime.Property property23 = mutableDateTime9.centuryOfEra();
        mutableDateTime9.addYears(0);
        mutableDateTime9.setMinuteOfDay((int) (short) 0);
        org.joda.time.Instant instant28 = new org.joda.time.Instant();
        org.joda.time.Instant instant30 = instant28.withMillis(0L);
        org.joda.time.Duration duration32 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period33 = duration32.toPeriod();
        org.joda.time.Duration duration36 = duration32.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Instant instant37 = instant30.plus((org.joda.time.ReadableDuration) duration36);
        long long38 = instant37.getMillis();
        org.joda.time.Duration duration39 = new org.joda.time.Duration((org.joda.time.ReadableInstant) mutableDateTime9, (org.joda.time.ReadableInstant) instant37);
        mutableDateTime8.add((org.joda.time.ReadableDuration) duration39, 999);
        mutableDateTime8.setSecondOfMinute(24);
        java.lang.String str44 = mutableDateTime8.toString();
        org.joda.time.MutableDateTime.Property property45 = mutableDateTime8.secondOfMinute();
        org.joda.time.MutableDateTime mutableDateTime46 = property45.roundHalfCeiling();
        org.joda.time.Chronology chronology48 = null;
        java.util.Locale locale49 = java.util.Locale.GERMAN;
        java.util.Locale locale50 = java.util.Locale.CANADA;
        java.lang.String str51 = locale49.getDisplayVariant(locale50);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket52 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology48, locale50);
        java.lang.Object obj53 = dateTimeParserBucket52.saveState();
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.LocalTime localTime56 = new org.joda.time.LocalTime((long) (short) 100, chronology55);
        org.joda.time.DurationFieldType durationFieldType57 = org.joda.time.DurationFieldType.weeks();
        java.lang.String str58 = durationFieldType57.getName();
        boolean boolean59 = localTime56.isSupported(durationFieldType57);
        boolean boolean60 = dateTimeParserBucket52.restoreState((java.lang.Object) boolean59);
        org.joda.time.Chronology chronology61 = dateTimeParserBucket52.getChronology();
        long long64 = dateTimeParserBucket52.computeMillis(true, "");
        int int65 = dateTimeParserBucket52.getOffset();
        java.lang.Object obj66 = dateTimeParserBucket52.saveState();
        java.lang.Integer int67 = dateTimeParserBucket52.getPivotYear();
        org.joda.time.DateTimeZone dateTimeZone68 = dateTimeParserBucket52.getZone();
        org.joda.time.LocalTime localTime69 = org.joda.time.LocalTime.now(dateTimeZone68);
        long long73 = dateTimeZone68.convertLocalToUTC((long) 892, true, 4801285114273L);
        mutableDateTime46.setZoneRetainFields(dateTimeZone68);
        boolean boolean75 = dateTimeZone68.isFixed();
        org.joda.time.MutableDateTime mutableDateTime76 = new org.joda.time.MutableDateTime(dateTimeZone68);
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(mutableDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(mutableDateTime5);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(mutableDateTime8);
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(instant30);
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertNotNull(instant37);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 86400000L + "'", long38 == 86400000L);
// flaky:         org.junit.Assert.assertEquals("'" + str44 + "' != '" + "-50070-09-17T07:55:24.938Z" + "'", str44, "-50070-09-17T07:55:24.938Z");
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(mutableDateTime46);
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "de");
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertNotNull(obj53);
        org.junit.Assert.assertNotNull(durationFieldType57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "weeks" + "'", str58, "weeks");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(chronology61);
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 97L + "'", long64 == 97L);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertNotNull(obj66);
        org.junit.Assert.assertNull(int67);
        org.junit.Assert.assertNotNull(dateTimeZone68);
        org.junit.Assert.assertNotNull(localTime69);
        org.junit.Assert.assertTrue("'" + long73 + "' != '" + 892L + "'", long73 == 892L);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
    }

    @Test
    public void test07855() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07855");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) (-292275054));
        java.io.IOException iOException3 = new java.io.IOException("");
        java.io.IOException iOException4 = new java.io.IOException((java.lang.Throwable) iOException3);
        boolean boolean5 = mutableDateTime1.equals((java.lang.Object) iOException3);
        org.joda.time.Duration duration8 = new org.joda.time.Duration(0L, 946312L);
        mutableDateTime1.add((org.joda.time.ReadableDuration) duration8, 1424);
        org.joda.time.MutableDateTime mutableDateTime11 = org.joda.time.MutableDateTime.now();
        java.lang.Object obj12 = mutableDateTime11.clone();
        mutableDateTime11.setTime((long) 46);
        org.joda.time.MutableDateTime.Property property15 = mutableDateTime11.dayOfWeek();
        org.joda.time.MutableDateTime.Property property16 = mutableDateTime11.weekyear();
        int int17 = mutableDateTime11.getMinuteOfHour();
        mutableDateTime11.setMillisOfDay(26333);
        int int20 = mutableDateTime11.getYearOfCentury();
        java.lang.String str21 = mutableDateTime11.toString();
        org.joda.time.MutablePeriod mutablePeriod22 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration8, (org.joda.time.ReadableInstant) mutableDateTime11);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime(chronology23);
        org.joda.time.DateTime dateTime26 = dateTime24.plusMinutes(15);
        org.joda.time.Chronology chronology27 = dateTime24.getChronology();
        org.joda.time.Instant instant28 = new org.joda.time.Instant();
        org.joda.time.Instant instant30 = instant28.withMillis(0L);
        org.joda.time.Chronology chronology31 = instant30.getChronology();
        org.joda.time.DurationField durationField32 = chronology31.eras();
        org.joda.time.LocalTime localTime33 = org.joda.time.LocalTime.now(chronology31);
        org.joda.time.DurationField durationField34 = chronology31.eras();
        org.joda.time.DateTimeField dateTimeField35 = chronology31.hourOfDay();
        org.joda.time.DateTime dateTime36 = dateTime24.withChronology(chronology31);
        org.joda.time.MutableDateTime mutableDateTime37 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property38 = mutableDateTime37.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime39 = property38.getMutableDateTime();
        boolean boolean40 = dateTime36.isBefore((org.joda.time.ReadableInstant) mutableDateTime39);
        org.joda.time.DateTime.Property property41 = dateTime36.minuteOfDay();
        org.joda.time.DateTime dateTime42 = dateTime36.withTimeAtStartOfDay();
        boolean boolean44 = dateTime36.isAfter(4801285114273L);
        org.joda.time.DateTime dateTime45 = dateTime36.toDateTime();
        mutableDateTime11.setDate((org.joda.time.ReadableInstant) dateTime45);
        java.lang.Object obj47 = mutableDateTime11.clone();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertNotNull(obj12);
// flaky:         org.junit.Assert.assertEquals(obj12.toString(), "2022-02-22T07:23:57.873Z");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj12), "2022-02-22T07:23:57.873Z");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj12), "2022-02-22T07:23:57.873Z");
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 22 + "'", int20 == 22);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "2022-02-22T00:00:26.333Z" + "'", str21, "2022-02-22T00:00:26.333Z");
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(instant30);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertNotNull(localTime33);
        org.junit.Assert.assertNotNull(durationField34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(mutableDateTime37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(mutableDateTime39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(obj47);
        org.junit.Assert.assertEquals(obj47.toString(), "2022-02-22T00:00:26.333Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj47), "2022-02-22T00:00:26.333Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj47), "2022-02-22T00:00:26.333Z");
    }

    @Test
    public void test07856() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07856");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.plusYears((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.minusSeconds((int) (byte) 10);
        java.lang.Object obj9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(obj9);
        org.joda.time.Duration duration12 = org.joda.time.Duration.standardSeconds((long) 45);
        org.joda.time.Period period13 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime10, (org.joda.time.ReadableDuration) duration12);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime6.minus((org.joda.time.ReadableDuration) duration12);
        int int15 = localDateTime6.getCenturyOfEra();
        java.lang.Object obj16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime(obj16);
        org.joda.time.LocalDateTime localDateTime18 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime20.withHourOfDay(10);
        org.joda.time.DateTimeField dateTimeField24 = localDateTime22.getField((int) (byte) 0);
        long long26 = dateTimeField24.roundHalfEven((long) 1);
        int int27 = dateTime17.get(dateTimeField24);
        org.joda.time.LocalDateTime localDateTime28 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime30 = localDateTime28.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime32 = localDateTime30.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime34 = localDateTime32.withCenturyOfEra((int) 'a');
        java.util.Locale locale36 = java.util.Locale.GERMAN;
        java.lang.String str37 = locale36.getDisplayName();
        java.lang.String str38 = dateTimeField24.getAsText((org.joda.time.ReadablePartial) localDateTime32, 53, locale36);
        org.joda.time.Duration duration40 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period41 = duration40.toPeriod();
        org.joda.time.Duration duration44 = duration40.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.LocalDateTime localDateTime45 = localDateTime32.minus((org.joda.time.ReadableDuration) duration40);
        org.joda.time.LocalDateTime localDateTime46 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime48 = localDateTime46.withHourOfDay(10);
        org.joda.time.LocalDateTime.Property property49 = localDateTime46.hourOfDay();
        org.joda.time.LocalDateTime localDateTime51 = localDateTime46.plusMillis((int) (byte) 0);
        int int52 = localDateTime32.compareTo((org.joda.time.ReadablePartial) localDateTime46);
        org.joda.time.LocalDateTime localDateTime54 = localDateTime32.plusDays(50);
        org.joda.time.LocalDateTime localDateTime56 = localDateTime54.withWeekOfWeekyear(10);
        org.joda.time.LocalDateTime localDateTime57 = localDateTime6.withFields((org.joda.time.ReadablePartial) localDateTime56);
        org.joda.time.LocalDateTime.Property property58 = localDateTime57.yearOfEra();
        org.joda.time.LocalDateTime localDateTime60 = localDateTime57.withMillisOfDay(0);
        org.joda.time.LocalDateTime localDateTime62 = localDateTime57.minusMillis(0);
        org.joda.time.LocalDateTime.Property property63 = localDateTime62.minuteOfHour();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 21 + "'", int15 == 21);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2022 + "'", int27 == 2022);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "de");
// flaky:         org.junit.Assert.assertEquals("'" + str37 + "' != '" + "German" + "'", str37, "German");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "53" + "'", str38, "53");
        org.junit.Assert.assertNotNull(duration40);
        org.junit.Assert.assertNotNull(period41);
        org.junit.Assert.assertNotNull(duration44);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertNotNull(localDateTime57);
        org.junit.Assert.assertNotNull(property58);
        org.junit.Assert.assertNotNull(localDateTime60);
        org.junit.Assert.assertNotNull(localDateTime62);
        org.junit.Assert.assertNotNull(property63);
    }

    @Test
    public void test07857() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07857");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        java.lang.Object obj1 = mutableDateTime0.clone();
        mutableDateTime0.setTime((long) 46);
        org.joda.time.MutableDateTime.Property property4 = mutableDateTime0.dayOfWeek();
        org.joda.time.MutableDateTime mutableDateTime6 = property4.add(1L);
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.UTC;
        java.util.TimeZone timeZone8 = dateTimeZone7.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        long long11 = dateTimeZone7.getMillisKeepLocal(dateTimeZone9, (long) 44);
        org.joda.time.DateTime dateTime12 = org.joda.time.DateTime.now(dateTimeZone7);
        mutableDateTime6.setZoneRetainFields(dateTimeZone7);
        java.lang.String str15 = dateTimeZone7.getNameKey((long) 26183562);
        org.joda.time.MutableDateTime mutableDateTime16 = new org.joda.time.MutableDateTime(dateTimeZone7);
        org.joda.time.format.DateTimePrinter dateTimePrinter17 = null;
        org.joda.time.format.DateTimeParser dateTimeParser18 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter19 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter17, dateTimeParser18);
        org.joda.time.Instant instant20 = new org.joda.time.Instant();
        org.joda.time.Instant instant22 = instant20.withMillis(0L);
        org.joda.time.Chronology chronology23 = instant22.getChronology();
        org.joda.time.DurationField durationField24 = chronology23.eras();
        long long28 = chronology23.add(0L, (long) 2022, (int) '4');
        org.joda.time.format.DateTimeFormatter dateTimeFormatter29 = dateTimeFormatter19.withChronology(chronology23);
        org.joda.time.format.DateTimePrinter dateTimePrinter30 = dateTimeFormatter29.getPrinter();
        boolean boolean31 = dateTimeFormatter29.isParser();
        java.lang.Integer int32 = dateTimeFormatter29.getPivotYear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter33 = dateTimeFormatter29.withZoneUTC();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter35 = dateTimeFormatter33.withDefaultYear(62215);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter37 = dateTimeFormatter35.withDefaultYear(0);
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.LocalTime localTime39 = new org.joda.time.LocalTime(dateTimeZone38);
        org.joda.time.ReadablePeriod readablePeriod40 = null;
        org.joda.time.LocalTime localTime41 = localTime39.plus(readablePeriod40);
        org.joda.time.ReadableInstant readableInstant42 = null;
        org.joda.time.ReadableInstant readableInstant43 = null;
        org.joda.time.PeriodType periodType44 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod45 = new org.joda.time.MutablePeriod(readableInstant42, readableInstant43, periodType44);
        org.joda.time.DurationFieldType durationFieldType47 = periodType44.getFieldType((int) (short) 0);
        boolean boolean48 = localTime39.isSupported(durationFieldType47);
        java.util.Locale locale50 = java.util.Locale.CHINESE;
        java.util.Locale locale51 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str52 = locale50.getDisplayScript(locale51);
        java.lang.String str53 = localTime39.toString("2022-02-01", locale50);
        java.lang.String str54 = locale50.getCountry();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter55 = dateTimeFormatter37.withLocale(locale50);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter56 = dateTimeFormatter55.withOffsetParsed();
        boolean boolean57 = dateTimeZone7.equals((java.lang.Object) dateTimeFormatter55);
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(obj1);
// flaky:         org.junit.Assert.assertEquals(obj1.toString(), "2022-02-22T07:23:57.933Z");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj1), "2022-02-22T07:23:57.933Z");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj1), "2022-02-22T07:23:57.933Z");
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(timeZone8);
// flaky:         org.junit.Assert.assertEquals(timeZone8.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 44L + "'", long11 == 44L);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "UTC" + "'", str15, "UTC");
        org.junit.Assert.assertNotNull(instant22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 105144L + "'", long28 == 105144L);
        org.junit.Assert.assertNotNull(dateTimeFormatter29);
        org.junit.Assert.assertNull(dateTimePrinter30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNull(int32);
        org.junit.Assert.assertNotNull(dateTimeFormatter33);
        org.junit.Assert.assertNotNull(dateTimeFormatter35);
        org.junit.Assert.assertNotNull(dateTimeFormatter37);
        org.junit.Assert.assertNotNull(localTime41);
        org.junit.Assert.assertNotNull(periodType44);
        org.junit.Assert.assertNotNull(durationFieldType47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "zh");
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "2022-02-01" + "'", str53, "2022-02-01");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertNotNull(dateTimeFormatter55);
        org.junit.Assert.assertNotNull(dateTimeFormatter56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
    }

    @Test
    public void test07858() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07858");
        org.joda.time.format.DateTimePrinter dateTimePrinter1 = null;
        org.joda.time.format.DateTimeParser dateTimeParser2 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter1, dateTimeParser2);
        org.joda.time.Instant instant4 = new org.joda.time.Instant();
        org.joda.time.Instant instant6 = instant4.withMillis(0L);
        org.joda.time.Chronology chronology7 = instant6.getChronology();
        org.joda.time.DurationField durationField8 = chronology7.eras();
        long long12 = chronology7.add(0L, (long) 2022, (int) '4');
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = dateTimeFormatter3.withChronology(chronology7);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter14 = dateTimeFormatter3.withZoneUTC();
        boolean boolean15 = dateTimeFormatter3.isPrinter();
        org.joda.time.MutableDateTime mutableDateTime16 = org.joda.time.MutableDateTime.now();
        mutableDateTime16.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime19 = mutableDateTime16.copy();
        org.joda.time.MutableDateTime.Property property20 = mutableDateTime16.weekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime21 = property20.roundHalfFloor();
        org.joda.time.MutableDateTime mutableDateTime22 = property20.roundHalfCeiling();
        org.joda.time.MutableDateTime mutableDateTime24 = property20.set(1);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime(chronology25);
        int int27 = dateTime26.getYearOfCentury();
        int int28 = dateTime26.getWeekyear();
        org.joda.time.DateTime dateTime29 = dateTime26.withEarlierOffsetAtOverlap();
        java.lang.String str30 = dateTime29.toString();
        org.joda.time.MutableDateTime mutableDateTime31 = dateTime29.toMutableDateTime();
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.UTC;
        boolean boolean33 = dateTimeZone32.isFixed();
        mutableDateTime31.setZoneRetainFields(dateTimeZone32);
        org.joda.time.MutableDateTime mutableDateTime35 = mutableDateTime24.toMutableDateTime(dateTimeZone32);
        org.joda.time.LocalDate localDate36 = org.joda.time.LocalDate.now(dateTimeZone32);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter37 = dateTimeFormatter3.withZone(dateTimeZone32);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter39 = dateTimeFormatter37.withPivotYear((java.lang.Integer) 26360275);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Instant instant40 = org.joda.time.Instant.parse("PT1M2.194S", dateTimeFormatter37);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(instant6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 105144L + "'", long12 == 105144L);
        org.junit.Assert.assertNotNull(dateTimeFormatter13);
        org.junit.Assert.assertNotNull(dateTimeFormatter14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(mutableDateTime16);
        org.junit.Assert.assertNotNull(mutableDateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(mutableDateTime21);
        org.junit.Assert.assertNotNull(mutableDateTime22);
        org.junit.Assert.assertNotNull(mutableDateTime24);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 22 + "'", int27 == 22);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2022 + "'", int28 == 2022);
        org.junit.Assert.assertNotNull(dateTime29);
// flaky:         org.junit.Assert.assertEquals("'" + str30 + "' != '" + "2022-02-22T07:23:57.956Z" + "'", str30, "2022-02-22T07:23:57.956Z");
        org.junit.Assert.assertNotNull(mutableDateTime31);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(mutableDateTime35);
        org.junit.Assert.assertNotNull(localDate36);
        org.junit.Assert.assertNotNull(dateTimeFormatter37);
        org.junit.Assert.assertNotNull(dateTimeFormatter39);
    }

    @Test
    public void test07859() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07859");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.add((long) 'a');
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime0.yearOfCentury();
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period6 = duration5.toPeriod();
        org.joda.time.Duration duration8 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration11 = duration8.withDurationAdded((long) (short) 100, (int) ' ');
        org.joda.time.Duration duration12 = duration5.minus((org.joda.time.ReadableDuration) duration11);
        mutableDateTime0.add((org.joda.time.ReadableDuration) duration5);
        org.joda.time.MutableDateTime.Property property14 = mutableDateTime0.centuryOfEra();
        mutableDateTime0.addHours((int) (byte) 10);
        mutableDateTime0.addWeeks(20);
        org.joda.time.DateTimeField dateTimeField19 = mutableDateTime0.getRoundingField();
        int int20 = mutableDateTime0.getWeekyear();
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property22 = localDate21.monthOfYear();
        org.joda.time.DateTimeField dateTimeField23 = property22.getField();
        org.joda.time.LocalDate localDate24 = property22.roundCeilingCopy();
        org.joda.time.LocalDate localDate26 = localDate24.withCenturyOfEra((int) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone.setDefault(dateTimeZone27);
        org.joda.time.DateMidnight dateMidnight29 = localDate26.toDateMidnight(dateTimeZone27);
        mutableDateTime0.setZoneRetainFields(dateTimeZone27);
        org.joda.time.LocalDate localDate31 = new org.joda.time.LocalDate(dateTimeZone27);
        org.joda.time.LocalDate.Property property32 = localDate31.yearOfCentury();
        int int33 = property32.get();
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNull(dateTimeField19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2022 + "'", int20 == 2022);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertNotNull(dateMidnight29);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 22 + "'", int33 == 22);
    }

    @Test
    public void test07860() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07860");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clear();
        java.util.Locale locale2 = java.util.Locale.GERMAN;
        java.lang.String str3 = locale2.getDisplayName();
        java.lang.String str4 = locale2.getISO3Language();
        java.util.Locale.Builder builder5 = builder1.setLocale(locale2);
        java.util.Locale.Builder builder6 = builder1.clearExtensions();
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.ReadableInstant readableInstant11 = null;
        org.joda.time.PeriodType periodType12 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod13 = new org.joda.time.MutablePeriod(readableInstant10, readableInstant11, periodType12);
        org.joda.time.DurationFieldType durationFieldType15 = periodType12.getFieldType((int) (short) 0);
        java.lang.String str16 = periodType12.toString();
        org.joda.time.Instant instant17 = new org.joda.time.Instant();
        org.joda.time.Instant instant19 = instant17.withMillis(0L);
        org.joda.time.Chronology chronology20 = instant19.getChronology();
        org.joda.time.Period period21 = new org.joda.time.Period((long) 53, (long) (-1), periodType12, chronology20);
        org.joda.time.DateTimeField dateTimeField22 = dateTimeFieldType7.getField(chronology20);
        java.util.Locale locale23 = java.util.Locale.UK;
        java.lang.String str24 = locale23.getDisplayLanguage();
        int int25 = dateTimeField22.getMaximumTextLength(locale23);
        java.lang.String str26 = locale23.getScript();
        java.util.Locale.Builder builder27 = builder1.setLocale(locale23);
        org.joda.time.LocalDate localDate28 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property29 = localDate28.monthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = org.joda.time.DateTimeFieldType.minuteOfDay();
        boolean boolean31 = localDate28.isSupported(dateTimeFieldType30);
        org.joda.time.LocalDate.Property property32 = localDate28.dayOfWeek();
        org.joda.time.MutableDateTime mutableDateTime33 = org.joda.time.MutableDateTime.now();
        mutableDateTime33.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime36 = mutableDateTime33.copy();
        org.joda.time.MutableDateTime.Property property37 = mutableDateTime33.weekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime38 = property37.roundHalfFloor();
        org.joda.time.MutableDateTime mutableDateTime39 = property37.roundHalfCeiling();
        org.joda.time.MutableDateTime mutableDateTime41 = property37.set(1);
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime(chronology42);
        int int44 = dateTime43.getYearOfCentury();
        int int45 = dateTime43.getWeekyear();
        org.joda.time.DateTime dateTime46 = dateTime43.withEarlierOffsetAtOverlap();
        java.lang.String str47 = dateTime46.toString();
        org.joda.time.MutableDateTime mutableDateTime48 = dateTime46.toMutableDateTime();
        org.joda.time.DateTimeZone dateTimeZone49 = org.joda.time.DateTimeZone.UTC;
        boolean boolean50 = dateTimeZone49.isFixed();
        mutableDateTime48.setZoneRetainFields(dateTimeZone49);
        org.joda.time.MutableDateTime mutableDateTime52 = mutableDateTime41.toMutableDateTime(dateTimeZone49);
        org.joda.time.LocalDate localDate53 = org.joda.time.LocalDate.now(dateTimeZone49);
        java.lang.Object obj55 = null;
        org.joda.time.DateTime dateTime56 = new org.joda.time.DateTime(obj55);
        org.joda.time.Duration duration58 = org.joda.time.Duration.standardSeconds((long) 45);
        org.joda.time.Period period59 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime56, (org.joda.time.ReadableDuration) duration58);
        org.joda.time.LocalDate localDate60 = dateTime56.toLocalDate();
        org.joda.time.LocalDate.Property property61 = localDate60.dayOfMonth();
        java.util.Date date62 = localDate60.toDate();
        org.joda.time.LocalDate.Property property63 = localDate60.dayOfYear();
        java.util.Locale locale64 = java.util.Locale.GERMAN;
        java.lang.String str65 = property63.getAsText(locale64);
        java.lang.String str66 = dateTimeZone49.getShortName(360000000L, locale64);
        java.lang.String str67 = property32.getAsText(locale64);
        java.util.Set<java.lang.String> strSet68 = locale64.getUnicodeLocaleKeys();
        java.util.Locale.Builder builder69 = builder1.setLocale(locale64);
        java.util.Locale.Builder builder72 = builder1.setExtension('a', "6216720-04-22");
        java.util.Locale.Builder builder73 = builder72.clearExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder75 = builder73.removeUnicodeLocaleAttribute("2022-02-22T07:18:14.750Z");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute: 2022-02-22T07:18:14.750Z [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "de");
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "German" + "'", str3, "German");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "deu" + "'", str4, "deu");
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertNotNull(periodType12);
        org.junit.Assert.assertNotNull(durationFieldType15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "PeriodType[YearDayTime]" + "'", str16, "PeriodType[YearDayTime]");
        org.junit.Assert.assertNotNull(instant19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "en_GB");
// flaky:         org.junit.Assert.assertEquals("'" + str24 + "' != '" + "English" + "'", str24, "English");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 4 + "'", int25 == 4);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(dateTimeFieldType30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(mutableDateTime33);
        org.junit.Assert.assertNotNull(mutableDateTime36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(mutableDateTime38);
        org.junit.Assert.assertNotNull(mutableDateTime39);
        org.junit.Assert.assertNotNull(mutableDateTime41);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 22 + "'", int44 == 22);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 2022 + "'", int45 == 2022);
        org.junit.Assert.assertNotNull(dateTime46);
// flaky:         org.junit.Assert.assertEquals("'" + str47 + "' != '" + "2022-02-22T07:23:58.073Z" + "'", str47, "2022-02-22T07:23:58.073Z");
        org.junit.Assert.assertNotNull(mutableDateTime48);
        org.junit.Assert.assertNotNull(dateTimeZone49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(mutableDateTime52);
        org.junit.Assert.assertNotNull(localDate53);
        org.junit.Assert.assertNotNull(duration58);
        org.junit.Assert.assertNotNull(localDate60);
        org.junit.Assert.assertNotNull(property61);
        org.junit.Assert.assertNotNull(date62);
        org.junit.Assert.assertEquals(date62.toString(), "Tue Feb 22 00:00:00 GMT 2022");
        org.junit.Assert.assertNotNull(property63);
        org.junit.Assert.assertNotNull(locale64);
        org.junit.Assert.assertEquals(locale64.toString(), "de");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "53" + "'", str65, "53");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "+00:00" + "'", str66, "+00:00");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "Dienstag" + "'", str67, "Dienstag");
        org.junit.Assert.assertNotNull(strSet68);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(builder73);
    }

    @Test
    public void test07861() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07861");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime3 = mutableDateTime0.copy();
        org.joda.time.MutableDateTime.Property property4 = mutableDateTime0.weekOfWeekyear();
        org.joda.time.MutableDateTime.Property property5 = mutableDateTime0.dayOfYear();
        org.joda.time.MutableDateTime mutableDateTime6 = org.joda.time.MutableDateTime.now();
        mutableDateTime6.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime9 = mutableDateTime6.copy();
        mutableDateTime6.setDate((long) '#');
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property13 = localDate12.monthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.minuteOfDay();
        boolean boolean15 = localDate12.isSupported(dateTimeFieldType14);
        int int16 = localDate12.getDayOfYear();
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateMidnight dateMidnight18 = localDate12.toDateMidnight(dateTimeZone17);
        org.joda.time.DateTime dateTime19 = mutableDateTime6.toDateTime(dateTimeZone17);
        org.joda.time.LocalDate localDate20 = org.joda.time.LocalDate.now(dateTimeZone17);
        org.joda.time.PeriodType periodType23 = null;
        org.joda.time.Period period24 = new org.joda.time.Period((long) 100, 1L, periodType23);
        org.joda.time.PeriodType periodType25 = period24.getPeriodType();
        boolean boolean26 = dateTimeZone17.equals((java.lang.Object) periodType25);
        mutableDateTime0.setZoneRetainFields(dateTimeZone17);
        org.joda.time.LocalDate localDate28 = new org.joda.time.LocalDate(dateTimeZone17);
        int int29 = localDate28.getDayOfWeek();
        org.joda.time.LocalDate localDate31 = localDate28.minusDays(766);
        org.joda.time.LocalDate localDate33 = localDate28.plusDays(621);
        org.joda.time.LocalDate.Property property34 = localDate33.dayOfWeek();
        org.joda.time.DateTimeFieldType dateTimeFieldType35 = property34.getFieldType();
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(mutableDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 53 + "'", int16 == 53);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(dateMidnight18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(periodType25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2 + "'", int29 == 2);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertNotNull(localDate33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(dateTimeFieldType35);
    }

    @Test
    public void test07862() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07862");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(chronology1);
        org.joda.time.DateTime dateTime4 = dateTime2.plusMinutes(15);
        org.joda.time.Chronology chronology5 = dateTime2.getChronology();
        java.lang.String str6 = chronology5.toString();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((long) 0, chronology5);
        org.joda.time.DateTime dateTime8 = localDate7.toDateTimeAtStartOfDay();
        org.joda.time.LocalDate.Property property9 = localDate7.year();
        org.joda.time.Instant instant10 = new org.joda.time.Instant();
        org.joda.time.Instant instant12 = instant10.withMillis(0L);
        org.joda.time.Duration duration14 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period15 = duration14.toPeriod();
        org.joda.time.Duration duration18 = duration14.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Instant instant19 = instant12.plus((org.joda.time.ReadableDuration) duration18);
        org.joda.time.PeriodType periodType20 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.Period period21 = duration18.toPeriod(periodType20);
        org.joda.time.Duration duration23 = duration18.withMillis(60000L);
        org.joda.time.Instant instant24 = new org.joda.time.Instant();
        org.joda.time.Instant instant26 = instant24.withMillis(0L);
        org.joda.time.Duration duration28 = org.joda.time.Duration.standardDays((long) (byte) 1);
        java.lang.String str29 = duration28.toString();
        org.joda.time.Instant instant30 = instant24.minus((org.joda.time.ReadableDuration) duration28);
        org.joda.time.MutableDateTime mutableDateTime31 = org.joda.time.MutableDateTime.now();
        mutableDateTime31.add((long) 'a');
        org.joda.time.MutableDateTime.Property property34 = mutableDateTime31.yearOfCentury();
        org.joda.time.Duration duration36 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period37 = duration36.toPeriod();
        org.joda.time.Duration duration39 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration42 = duration39.withDurationAdded((long) (short) 100, (int) ' ');
        org.joda.time.Duration duration43 = duration36.minus((org.joda.time.ReadableDuration) duration42);
        mutableDateTime31.add((org.joda.time.ReadableDuration) duration36);
        org.joda.time.MutableDateTime.Property property45 = mutableDateTime31.centuryOfEra();
        mutableDateTime31.addHours((int) (byte) 10);
        mutableDateTime31.addWeeks(100);
        boolean boolean50 = instant24.isAfter((org.joda.time.ReadableInstant) mutableDateTime31);
        org.joda.time.ReadableDuration readableDuration51 = null;
        org.joda.time.ReadableInstant readableInstant52 = null;
        org.joda.time.Period period53 = new org.joda.time.Period(readableDuration51, readableInstant52);
        org.joda.time.PeriodType periodType56 = null;
        org.joda.time.Period period57 = new org.joda.time.Period((long) 100, 1L, periodType56);
        org.joda.time.Period period59 = period57.minusSeconds((-1));
        java.lang.String str60 = period57.toString();
        org.joda.time.Period period61 = period57.toPeriod();
        org.joda.time.PeriodType periodType62 = period57.getPeriodType();
        org.joda.time.Period period63 = period53.normalizedStandard(periodType62);
        java.lang.String str64 = periodType62.getName();
        int int65 = periodType62.size();
        org.joda.time.Period period66 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration18, (org.joda.time.ReadableInstant) instant24, periodType62);
        org.joda.time.Duration duration68 = org.joda.time.Duration.standardDays((long) (byte) 1);
        java.lang.String str69 = duration68.toString();
        org.joda.time.Duration duration71 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Hours hours72 = duration71.toStandardHours();
        org.joda.time.Chronology chronology73 = null;
        org.joda.time.DateTime dateTime74 = new org.joda.time.DateTime(chronology73);
        int int75 = dateTime74.getSecondOfMinute();
        org.joda.time.MutablePeriod mutablePeriod76 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration71, (org.joda.time.ReadableInstant) dateTime74);
        org.joda.time.Duration duration77 = duration68.plus((org.joda.time.ReadableDuration) duration71);
        org.joda.time.Instant instant78 = instant24.plus((org.joda.time.ReadableDuration) duration77);
        long long79 = property9.getDifferenceAsLong((org.joda.time.ReadableInstant) instant78);
        org.joda.time.LocalDate localDate80 = property9.roundHalfEvenCopy();
        org.joda.time.LocalDate localDate82 = localDate80.withWeekyear(3622);
        org.joda.time.LocalDate localDate84 = localDate82.minusYears(0);
        org.joda.time.Chronology chronology85 = localDate84.getChronology();
        int int86 = localDate84.getDayOfMonth();
        int int87 = localDate84.getDayOfMonth();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "ISOChronology[UTC]" + "'", str6, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(instant12);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(instant19);
        org.junit.Assert.assertNotNull(periodType20);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(instant26);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "PT86400S" + "'", str29, "PT86400S");
        org.junit.Assert.assertNotNull(instant30);
        org.junit.Assert.assertNotNull(mutableDateTime31);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertNotNull(period37);
        org.junit.Assert.assertNotNull(duration39);
        org.junit.Assert.assertNotNull(duration42);
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(period59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "PT0.099S" + "'", str60, "PT0.099S");
        org.junit.Assert.assertNotNull(period61);
        org.junit.Assert.assertNotNull(periodType62);
        org.junit.Assert.assertNotNull(period63);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "Standard" + "'", str64, "Standard");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 8 + "'", int65 == 8);
        org.junit.Assert.assertNotNull(duration68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "PT86400S" + "'", str69, "PT86400S");
        org.junit.Assert.assertNotNull(duration71);
        org.junit.Assert.assertNotNull(hours72);
// flaky:         org.junit.Assert.assertTrue("'" + int75 + "' != '" + 58 + "'", int75 == 58);
        org.junit.Assert.assertNotNull(duration77);
        org.junit.Assert.assertNotNull(instant78);
        org.junit.Assert.assertTrue("'" + long79 + "' != '" + (-52L) + "'", long79 == (-52L));
        org.junit.Assert.assertNotNull(localDate80);
        org.junit.Assert.assertNotNull(localDate82);
        org.junit.Assert.assertNotNull(localDate84);
        org.junit.Assert.assertNotNull(chronology85);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 6 + "'", int86 == 6);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 6 + "'", int87 == 6);
    }

    @Test
    public void test07863() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07863");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        java.lang.Object obj1 = mutableDateTime0.clone();
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime0.millisOfDay();
        org.joda.time.DateTime dateTime3 = mutableDateTime0.toDateTime();
        org.joda.time.DateTime dateTime5 = dateTime3.minusMonths((int) (short) 10);
        org.joda.time.DateTime dateTime7 = dateTime5.plusSeconds(26158);
        org.joda.time.DateMidnight dateMidnight8 = dateTime5.toDateMidnight();
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(obj1);
// flaky:         org.junit.Assert.assertEquals(obj1.toString(), "2022-02-22T07:23:58.197Z");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj1), "2022-02-22T07:23:58.197Z");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj1), "2022-02-22T07:23:58.197Z");
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateMidnight8);
    }

    @Test
    public void test07864() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07864");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.Instant instant2 = instant0.withMillis(0L);
        org.joda.time.Duration duration4 = org.joda.time.Duration.standardDays((long) (byte) 1);
        java.lang.String str5 = duration4.toString();
        org.joda.time.Instant instant6 = instant0.minus((org.joda.time.ReadableDuration) duration4);
        org.joda.time.MutableDateTime mutableDateTime7 = instant0.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property8 = mutableDateTime7.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime9 = property8.roundCeiling();
        mutableDateTime9.addMonths(422);
        org.junit.Assert.assertNotNull(instant2);
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "PT86400S" + "'", str5, "PT86400S");
        org.junit.Assert.assertNotNull(instant6);
        org.junit.Assert.assertNotNull(mutableDateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(mutableDateTime9);
    }

    @Test
    public void test07865() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07865");
        org.joda.time.LocalTime localTime0 = new org.joda.time.LocalTime();
        org.joda.time.Chronology chronology1 = localTime0.getChronology();
        org.joda.time.MutableDateTime mutableDateTime2 = org.joda.time.MutableDateTime.now(chronology1);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime2.setDayOfWeek(157);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 157 for dayOfWeek must be in the range [1,7]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(mutableDateTime2);
    }

    @Test
    public void test07866() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07866");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        java.lang.Object obj1 = mutableDateTime0.clone();
        org.joda.time.ReadableDuration readableDuration3 = null;
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.Period period5 = new org.joda.time.Period(readableDuration3, readableInstant4);
        org.joda.time.PeriodType periodType8 = null;
        org.joda.time.Period period9 = new org.joda.time.Period((long) 100, 1L, periodType8);
        org.joda.time.Period period11 = period9.minusSeconds((-1));
        java.lang.String str12 = period9.toString();
        org.joda.time.Period period13 = period9.toPeriod();
        org.joda.time.PeriodType periodType14 = period9.getPeriodType();
        org.joda.time.Period period15 = period5.normalizedStandard(periodType14);
        org.joda.time.Instant instant16 = new org.joda.time.Instant();
        org.joda.time.Instant instant18 = instant16.withMillis(0L);
        org.joda.time.Chronology chronology19 = instant18.getChronology();
        org.joda.time.DurationField durationField20 = chronology19.eras();
        long long24 = chronology19.add(0L, (long) 2022, (int) '4');
        org.joda.time.DateTimeField dateTimeField25 = chronology19.secondOfMinute();
        org.joda.time.MutablePeriod mutablePeriod26 = new org.joda.time.MutablePeriod(44L, periodType14, chronology19);
        org.joda.time.DateTimeField dateTimeField27 = chronology19.clockhourOfHalfday();
        org.joda.time.LocalTime localTime28 = new org.joda.time.LocalTime(chronology19);
        mutableDateTime0.setChronology(chronology19);
        org.joda.time.DateTimeField dateTimeField30 = chronology19.dayOfWeek();
        java.lang.String str31 = chronology19.toString();
        org.joda.time.DateTimeField dateTimeField32 = chronology19.monthOfYear();
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(obj1);
// flaky:         org.junit.Assert.assertEquals(obj1.toString(), "2022-02-22T07:23:58.245Z");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj1), "2022-02-22T07:23:58.245Z");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj1), "2022-02-22T07:23:58.245Z");
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "PT0.099S" + "'", str12, "PT0.099S");
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(periodType14);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(instant18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 105144L + "'", long24 == 105144L);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "ISOChronology[UTC]" + "'", str31, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField32);
    }

    @Test
    public void test07867() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07867");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds(948227L);
        org.joda.time.Instant instant2 = new org.joda.time.Instant();
        org.joda.time.Instant instant4 = instant2.withMillis(0L);
        org.joda.time.Duration duration6 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period7 = duration6.toPeriod();
        org.joda.time.Duration duration10 = duration6.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Instant instant11 = instant4.plus((org.joda.time.ReadableDuration) duration10);
        boolean boolean12 = duration1.isShorterThan((org.joda.time.ReadableDuration) duration10);
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property14 = localDate13.dayOfYear();
        org.joda.time.PeriodType periodType17 = null;
        org.joda.time.Period period18 = new org.joda.time.Period((long) 100, 1L, periodType17);
        org.joda.time.Period period20 = period18.minusSeconds((-1));
        java.lang.String str21 = period18.toString();
        org.joda.time.LocalDate localDate23 = localDate13.withPeriodAdded((org.joda.time.ReadablePeriod) period18, 3);
        org.joda.time.DateTime dateTime24 = localDate23.toDateTimeAtCurrentTime();
        org.joda.time.Chronology chronology26 = null;
        java.util.Locale locale27 = java.util.Locale.GERMAN;
        java.util.Locale locale28 = java.util.Locale.CANADA;
        java.lang.String str29 = locale27.getDisplayVariant(locale28);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket30 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology26, locale28);
        java.lang.Object obj31 = dateTimeParserBucket30.saveState();
        org.joda.time.DateTimeZone dateTimeZone32 = dateTimeParserBucket30.getZone();
        org.joda.time.DateTime dateTime33 = localDate23.toDateTimeAtStartOfDay(dateTimeZone32);
        org.joda.time.DateTime dateTime35 = dateTime33.plusMonths((int) 'u');
        int int36 = dateTime33.getWeekyear();
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime(chronology37);
        int int39 = dateTime38.getSecondOfMinute();
        int int40 = dateTime38.getYearOfEra();
        org.joda.time.ReadableInstant readableInstant41 = null;
        org.joda.time.ReadableInstant readableInstant42 = null;
        org.joda.time.PeriodType periodType43 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod44 = new org.joda.time.MutablePeriod(readableInstant41, readableInstant42, periodType43);
        mutablePeriod44.setYears((int) '#');
        mutablePeriod44.setSeconds((int) 'a');
        org.joda.time.DateTime dateTime49 = dateTime38.plus((org.joda.time.ReadablePeriod) mutablePeriod44);
        org.joda.time.DateTime.Property property50 = dateTime49.weekyear();
        boolean boolean51 = dateTime33.isBefore((org.joda.time.ReadableInstant) dateTime49);
        org.joda.time.MutablePeriod mutablePeriod52 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration10, (org.joda.time.ReadableInstant) dateTime49);
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.DateTime dateTime55 = new org.joda.time.DateTime((long) 1, chronology54);
        int int56 = dateTime55.getMinuteOfDay();
        org.joda.time.Instant instant57 = dateTime55.toInstant();
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.DateTime dateTime59 = new org.joda.time.DateTime(chronology58);
        int int60 = dateTime59.getYearOfCentury();
        int int61 = dateTime59.getWeekyear();
        org.joda.time.DateTime dateTime62 = dateTime59.withEarlierOffsetAtOverlap();
        java.lang.String str63 = dateTime62.toString();
        org.joda.time.MutableDateTime mutableDateTime64 = dateTime62.toMutableDateTime();
        org.joda.time.Period period65 = new org.joda.time.Period((org.joda.time.ReadableInstant) instant57, (org.joda.time.ReadableInstant) dateTime62);
        org.joda.time.DateTimeZone dateTimeZone66 = org.joda.time.DateTimeZone.UTC;
        java.util.Locale locale68 = java.util.Locale.GERMAN;
        java.lang.String str69 = locale68.getDisplayName();
        java.lang.String str70 = dateTimeZone66.getName(100L, locale68);
        java.lang.String str72 = dateTimeZone66.getShortName(3600000L);
        org.joda.time.DateTime dateTime73 = new org.joda.time.DateTime(dateTimeZone66);
        mutablePeriod52.setPeriod((org.joda.time.ReadableInstant) instant57, (org.joda.time.ReadableInstant) dateTime73);
        int int75 = mutablePeriod52.getMinutes();
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(instant4);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(instant11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "PT0.099S" + "'", str21, "PT0.099S");
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "de");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(obj31);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 2022 + "'", int36 == 2022);
// flaky:         org.junit.Assert.assertTrue("'" + int39 + "' != '" + 58 + "'", int39 == 58);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 2022 + "'", int40 == 2022);
        org.junit.Assert.assertNotNull(periodType43);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(instant57);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 22 + "'", int60 == 22);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 2022 + "'", int61 == 2022);
        org.junit.Assert.assertNotNull(dateTime62);
// flaky:         org.junit.Assert.assertEquals("'" + str63 + "' != '" + "2022-02-22T07:23:58.256Z" + "'", str63, "2022-02-22T07:23:58.256Z");
        org.junit.Assert.assertNotNull(mutableDateTime64);
        org.junit.Assert.assertNotNull(dateTimeZone66);
        org.junit.Assert.assertNotNull(locale68);
        org.junit.Assert.assertEquals(locale68.toString(), "de");
// flaky:         org.junit.Assert.assertEquals("'" + str69 + "' != '" + "German" + "'", str69, "German");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "+00:00" + "'", str70, "+00:00");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "+00:00" + "'", str72, "+00:00");
// flaky:         org.junit.Assert.assertTrue("'" + int75 + "' != '" + 23 + "'", int75 == 23);
    }

    @Test
    public void test07868() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07868");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.add((long) 'a');
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime0.yearOfCentury();
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period6 = duration5.toPeriod();
        org.joda.time.Duration duration8 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration11 = duration8.withDurationAdded((long) (short) 100, (int) ' ');
        org.joda.time.Duration duration12 = duration5.minus((org.joda.time.ReadableDuration) duration11);
        mutableDateTime0.add((org.joda.time.ReadableDuration) duration5);
        org.joda.time.MutableDateTime.Property property14 = mutableDateTime0.centuryOfEra();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime(chronology15);
        int int17 = dateTime16.getYearOfCentury();
        org.joda.time.DateTime dateTime19 = dateTime16.withSecondOfMinute(53);
        org.joda.time.Duration duration21 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period22 = duration21.toPeriod();
        org.joda.time.Duration duration24 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration27 = duration24.withDurationAdded((long) (short) 100, (int) ' ');
        org.joda.time.Duration duration28 = duration21.minus((org.joda.time.ReadableDuration) duration27);
        org.joda.time.ReadableInstant readableInstant29 = null;
        org.joda.time.ReadableInstant readableInstant30 = null;
        org.joda.time.PeriodType periodType31 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod32 = new org.joda.time.MutablePeriod(readableInstant29, readableInstant30, periodType31);
        org.joda.time.DurationFieldType durationFieldType34 = periodType31.getFieldType((int) (short) 0);
        java.lang.String str35 = periodType31.toString();
        org.joda.time.Period period36 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime16, (org.joda.time.ReadableDuration) duration21, periodType31);
        mutableDateTime0.add((org.joda.time.ReadableDuration) duration21);
        mutableDateTime0.addWeekyears(21);
        org.joda.time.MutableDateTime.Property property40 = mutableDateTime0.weekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime42 = property40.set(44);
        org.joda.time.MutableDateTime.Property property43 = mutableDateTime42.dayOfWeek();
        mutableDateTime42.setDate((long) 26212118);
        org.joda.time.MutableDateTime mutableDateTime46 = mutableDateTime42.copy();
        org.joda.time.MutableDateTime.Property property47 = mutableDateTime42.secondOfDay();
        org.joda.time.LocalDate localDate48 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property49 = localDate48.monthOfYear();
        org.joda.time.LocalDate.Property property50 = localDate48.dayOfMonth();
        org.joda.time.LocalDate localDate52 = localDate48.withEra((int) (short) 0);
        org.joda.time.LocalDate.Property property53 = localDate52.dayOfWeek();
        org.joda.time.DateTime dateTime55 = new org.joda.time.DateTime((long) 1);
        org.joda.time.Duration duration57 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period58 = duration57.toPeriod();
        org.joda.time.Duration duration61 = duration57.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Period period62 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime55, (org.joda.time.ReadableDuration) duration61);
        org.joda.time.Instant instant63 = dateTime55.toInstant();
        org.joda.time.DateTime dateTime66 = dateTime55.withDurationAdded((long) 3, 4);
        org.joda.time.Instant instant67 = dateTime66.toInstant();
        org.joda.time.DateTimeFieldType dateTimeFieldType68 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.DateTime.Property property69 = dateTime66.property(dateTimeFieldType68);
        org.joda.time.LocalDate.Property property70 = localDate52.property(dateTimeFieldType68);
        java.lang.String str71 = dateTimeFieldType68.getName();
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime42.set(dateTimeFieldType68, 53);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 53 for era must be in the range [0,1]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 22 + "'", int17 == 22);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(periodType31);
        org.junit.Assert.assertNotNull(durationFieldType34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "PeriodType[YearDayTime]" + "'", str35, "PeriodType[YearDayTime]");
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(mutableDateTime42);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(mutableDateTime46);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertNotNull(localDate52);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertNotNull(duration57);
        org.junit.Assert.assertNotNull(period58);
        org.junit.Assert.assertNotNull(duration61);
        org.junit.Assert.assertNotNull(instant63);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(instant67);
        org.junit.Assert.assertNotNull(dateTimeFieldType68);
        org.junit.Assert.assertNotNull(property69);
        org.junit.Assert.assertNotNull(property70);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "era" + "'", str71, "era");
    }

    @Test
    public void test07869() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07869");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardDays((-9571L));
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardMinutes(1L);
        org.joda.time.Period period4 = duration3.toPeriod();
        org.joda.time.Duration duration5 = duration1.minus((org.joda.time.ReadableDuration) duration3);
        org.joda.time.Duration duration7 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration9 = org.joda.time.Duration.standardDays((long) (byte) 1);
        java.lang.String str10 = duration9.toString();
        boolean boolean11 = duration7.isShorterThan((org.joda.time.ReadableDuration) duration9);
        org.joda.time.Duration duration13 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period14 = duration13.toPeriod();
        org.joda.time.Duration duration17 = duration13.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Duration duration19 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration22 = duration19.withDurationAdded((long) (short) 100, (int) ' ');
        boolean boolean23 = duration17.isLongerThan((org.joda.time.ReadableDuration) duration19);
        boolean boolean24 = duration9.isEqual((org.joda.time.ReadableDuration) duration19);
        org.joda.time.Duration duration25 = duration1.plus((org.joda.time.ReadableDuration) duration9);
        org.joda.time.MutableDateTime mutableDateTime26 = org.joda.time.MutableDateTime.now();
        mutableDateTime26.add((long) 'a');
        org.joda.time.MutableDateTime.Property property29 = mutableDateTime26.yearOfCentury();
        mutableDateTime26.addSeconds(0);
        org.joda.time.Duration duration33 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Hours hours34 = duration33.toStandardHours();
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime(chronology35);
        int int37 = dateTime36.getSecondOfMinute();
        org.joda.time.MutablePeriod mutablePeriod38 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration33, (org.joda.time.ReadableInstant) dateTime36);
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime((long) 1);
        org.joda.time.Instant instant41 = new org.joda.time.Instant();
        org.joda.time.Instant instant43 = instant41.withMillis(0L);
        org.joda.time.DateTime dateTime44 = instant43.toDateTime();
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime((long) 1);
        org.joda.time.PeriodType periodType47 = org.joda.time.PeriodType.months();
        org.joda.time.Period period48 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime44, (org.joda.time.ReadableInstant) dateTime46, periodType47);
        org.joda.time.Period period49 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration33, (org.joda.time.ReadableInstant) dateTime40, periodType47);
        org.joda.time.Duration duration50 = new org.joda.time.Duration((org.joda.time.ReadableInstant) mutableDateTime26, (org.joda.time.ReadableInstant) dateTime40);
        mutableDateTime26.addMinutes(28);
        org.joda.time.PeriodType periodType54 = org.joda.time.PeriodType.yearWeekDayTime();
        org.joda.time.MutablePeriod mutablePeriod55 = new org.joda.time.MutablePeriod((-29912203583046059L), periodType54);
        org.joda.time.Period period56 = duration1.toPeriodFrom((org.joda.time.ReadableInstant) mutableDateTime26, periodType54);
        org.joda.time.PeriodType periodType57 = periodType54.withMinutesRemoved();
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "PT86400S" + "'", str10, "PT86400S");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertNotNull(mutableDateTime26);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertNotNull(hours34);
// flaky:         org.junit.Assert.assertTrue("'" + int37 + "' != '" + 58 + "'", int37 == 58);
        org.junit.Assert.assertNotNull(instant43);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(periodType47);
        org.junit.Assert.assertNotNull(periodType54);
        org.junit.Assert.assertNotNull(period56);
        org.junit.Assert.assertNotNull(periodType57);
    }

    @Test
    public void test07870() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07870");
        org.joda.time.MutableDateTime mutableDateTime2 = org.joda.time.MutableDateTime.now();
        java.lang.Object obj3 = mutableDateTime2.clone();
        mutableDateTime2.setTime((long) 46);
        org.joda.time.MutableDateTime.Property property6 = mutableDateTime2.dayOfWeek();
        org.joda.time.MutableDateTime mutableDateTime8 = property6.add(1L);
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        java.util.TimeZone timeZone10 = dateTimeZone9.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.UTC;
        long long13 = dateTimeZone9.getMillisKeepLocal(dateTimeZone11, (long) 44);
        org.joda.time.DateTime dateTime14 = org.joda.time.DateTime.now(dateTimeZone9);
        mutableDateTime8.setZoneRetainFields(dateTimeZone9);
        java.util.Locale.Builder builder17 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder18 = builder17.clear();
        java.util.Locale locale19 = builder18.build();
        java.lang.String str20 = dateTimeZone9.getName(555370422L, locale19);
        java.lang.String str22 = dateTimeZone9.getShortName(962578L);
        long long25 = dateTimeZone9.convertLocalToUTC((long) 62151, false);
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime((long) 26150565, dateTimeZone9);
        org.joda.time.MutableDateTime mutableDateTime27 = new org.joda.time.MutableDateTime(1645514421863L, dateTimeZone9);
        mutableDateTime27.addSeconds(900);
        org.joda.time.Duration duration31 = new org.joda.time.Duration(0L);
        org.joda.time.Duration duration33 = org.joda.time.Duration.standardDays((-9571L));
        org.joda.time.Duration duration35 = org.joda.time.Duration.standardMinutes(1L);
        org.joda.time.Period period36 = duration35.toPeriod();
        org.joda.time.Duration duration37 = duration33.minus((org.joda.time.ReadableDuration) duration35);
        org.joda.time.Duration duration38 = duration31.minus((org.joda.time.ReadableDuration) duration35);
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime((long) (byte) 10);
        org.joda.time.DateTime.Property property41 = dateTime40.millisOfSecond();
        org.joda.time.DateTime dateTime42 = dateTime40.toDateTime();
        int int43 = dateTime40.getMinuteOfDay();
        org.joda.time.DateTime dateTime45 = dateTime40.minusHours(766);
        org.joda.time.MutableDateTime mutableDateTime46 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property47 = mutableDateTime46.centuryOfEra();
        org.joda.time.MutableDateTime.Property property48 = mutableDateTime46.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime49 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime51 = localDateTime49.withHourOfDay(10);
        org.joda.time.LocalDateTime.Property property52 = localDateTime49.hourOfDay();
        org.joda.time.LocalDateTime localDateTime54 = localDateTime49.plusMillis((int) (byte) 0);
        org.joda.time.PeriodType periodType57 = null;
        org.joda.time.Period period58 = new org.joda.time.Period((long) 100, 1L, periodType57);
        org.joda.time.Period period60 = period58.minusSeconds((-1));
        org.joda.time.LocalDateTime localDateTime61 = localDateTime54.minus((org.joda.time.ReadablePeriod) period58);
        mutableDateTime46.add((org.joda.time.ReadablePeriod) period58, 0);
        org.joda.time.PeriodType periodType64 = period58.getPeriodType();
        int int65 = periodType64.size();
        org.joda.time.PeriodType periodType66 = periodType64.withHoursRemoved();
        org.joda.time.MutablePeriod mutablePeriod67 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration38, (org.joda.time.ReadableInstant) dateTime45, periodType66);
        mutableDateTime27.add((org.joda.time.ReadableDuration) duration38, 751);
        org.junit.Assert.assertNotNull(mutableDateTime2);
        org.junit.Assert.assertNotNull(obj3);
// flaky:         org.junit.Assert.assertEquals(obj3.toString(), "2022-02-22T07:23:58.410Z");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj3), "2022-02-22T07:23:58.410Z");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj3), "2022-02-22T07:23:58.410Z");
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(mutableDateTime8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(timeZone10);
// flaky:         org.junit.Assert.assertEquals(timeZone10.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 44L + "'", long13 == 44L);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "+00:00" + "'", str20, "+00:00");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "+00:00" + "'", str22, "+00:00");
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 62151L + "'", long25 == 62151L);
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertNotNull(period36);
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(mutableDateTime46);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertNotNull(period60);
        org.junit.Assert.assertNotNull(localDateTime61);
        org.junit.Assert.assertNotNull(periodType64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 8 + "'", int65 == 8);
        org.junit.Assert.assertNotNull(periodType66);
    }

    @Test
    public void test07871() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07871");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.Instant instant3 = new org.joda.time.Instant();
        org.joda.time.Instant instant5 = instant3.withMillis(0L);
        org.joda.time.Chronology chronology6 = instant5.getChronology();
        org.joda.time.DurationField durationField7 = chronology6.eras();
        long long11 = chronology6.add(0L, (long) 2022, (int) '4');
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = dateTimeFormatter2.withChronology(chronology6);
        org.joda.time.format.DateTimePrinter dateTimePrinter13 = dateTimeFormatter12.getPrinter();
        boolean boolean14 = dateTimeFormatter12.isParser();
        java.lang.Integer int15 = dateTimeFormatter12.getPivotYear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter16 = dateTimeFormatter12.withZoneUTC();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter18 = dateTimeFormatter16.withDefaultYear(62215);
        java.lang.Appendable appendable19 = null;
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter16.printTo(appendable19, 1440L);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(instant5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 105144L + "'", long11 == 105144L);
        org.junit.Assert.assertNotNull(dateTimeFormatter12);
        org.junit.Assert.assertNull(dateTimePrinter13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(int15);
        org.junit.Assert.assertNotNull(dateTimeFormatter16);
        org.junit.Assert.assertNotNull(dateTimeFormatter18);
    }

    @Test
    public void test07872() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07872");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 1, chronology1);
        int int3 = dateTime2.getMinuteOfDay();
        int int4 = dateTime2.getEra();
        int int5 = dateTime2.getWeekOfWeekyear();
        org.joda.time.DateTime dateTime7 = dateTime2.withDayOfYear(24);
        org.joda.time.DateTimeZone dateTimeZone8 = dateTime7.getZone();
        org.joda.time.MutableDateTime mutableDateTime9 = org.joda.time.MutableDateTime.now();
        mutableDateTime9.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime12 = mutableDateTime9.copy();
        org.joda.time.MutableDateTime.Property property13 = mutableDateTime9.weekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime14 = property13.roundHalfFloor();
        org.joda.time.MutableDateTime mutableDateTime15 = property13.roundHalfCeiling();
        org.joda.time.MutableDateTime mutableDateTime17 = property13.set(1);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime(chronology18);
        int int20 = dateTime19.getYearOfCentury();
        int int21 = dateTime19.getWeekyear();
        org.joda.time.DateTime dateTime22 = dateTime19.withEarlierOffsetAtOverlap();
        java.lang.String str23 = dateTime22.toString();
        org.joda.time.MutableDateTime mutableDateTime24 = dateTime22.toMutableDateTime();
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.UTC;
        boolean boolean26 = dateTimeZone25.isFixed();
        mutableDateTime24.setZoneRetainFields(dateTimeZone25);
        org.joda.time.MutableDateTime mutableDateTime28 = mutableDateTime17.toMutableDateTime(dateTimeZone25);
        org.joda.time.DateTime dateTime29 = org.joda.time.DateTime.now(dateTimeZone25);
        long long32 = dateTimeZone25.convertLocalToUTC(2100L, true);
        org.joda.time.LocalDate localDate33 = org.joda.time.LocalDate.now(dateTimeZone25);
        org.joda.time.MutableDateTime mutableDateTime34 = dateTime7.toMutableDateTime(dateTimeZone25);
        org.joda.time.MutableDateTime.Property property35 = mutableDateTime34.weekOfWeekyear();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertNotNull(mutableDateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(mutableDateTime14);
        org.junit.Assert.assertNotNull(mutableDateTime15);
        org.junit.Assert.assertNotNull(mutableDateTime17);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 22 + "'", int20 == 22);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2022 + "'", int21 == 2022);
        org.junit.Assert.assertNotNull(dateTime22);
// flaky:         org.junit.Assert.assertEquals("'" + str23 + "' != '" + "2022-02-22T07:23:58.466Z" + "'", str23, "2022-02-22T07:23:58.466Z");
        org.junit.Assert.assertNotNull(mutableDateTime24);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(mutableDateTime28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 2100L + "'", long32 == 2100L);
        org.junit.Assert.assertNotNull(localDate33);
        org.junit.Assert.assertNotNull(mutableDateTime34);
        org.junit.Assert.assertNotNull(property35);
    }

    @Test
    public void test07873() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07873");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (byte) -1, chronology1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.plusMonths(46);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.minuteOfDay();
        int int6 = localDateTime4.get(dateTimeFieldType5);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime4.plusSeconds((-292275054));
        org.joda.time.LocalDateTime.Property property9 = localDateTime8.dayOfMonth();
        org.joda.time.LocalDateTime.Property property10 = localDateTime8.era();
        org.joda.time.LocalDateTime localDateTime11 = property10.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.plusWeeks(26212472);
        int int14 = localDateTime13.getSecondOfMinute();
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.PeriodType periodType19 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod20 = new org.joda.time.MutablePeriod(readableInstant17, readableInstant18, periodType19);
        org.joda.time.DurationFieldType durationFieldType22 = periodType19.getFieldType((int) (short) 0);
        java.lang.String str23 = periodType19.toString();
        org.joda.time.Instant instant24 = new org.joda.time.Instant();
        org.joda.time.Instant instant26 = instant24.withMillis(0L);
        org.joda.time.Chronology chronology27 = instant26.getChronology();
        org.joda.time.Period period28 = new org.joda.time.Period((long) 53, (long) (-1), periodType19, chronology27);
        org.joda.time.MutablePeriod mutablePeriod29 = new org.joda.time.MutablePeriod(periodType19);
        org.joda.time.Duration duration31 = org.joda.time.Duration.standardSeconds(4801284961717L);
        org.joda.time.MutablePeriod mutablePeriod36 = new org.joda.time.MutablePeriod(10, 1, 53, 15);
        boolean boolean37 = duration31.equals((java.lang.Object) 53);
        org.joda.time.MutableDateTime mutableDateTime38 = org.joda.time.MutableDateTime.now();
        java.lang.Object obj39 = mutableDateTime38.clone();
        mutableDateTime38.setTime((long) 46);
        org.joda.time.MutableDateTime.Property property42 = mutableDateTime38.dayOfWeek();
        org.joda.time.MutableDateTime mutableDateTime44 = property42.add(1L);
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.UTC;
        java.util.TimeZone timeZone46 = dateTimeZone45.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.UTC;
        long long49 = dateTimeZone45.getMillisKeepLocal(dateTimeZone47, (long) 44);
        org.joda.time.DateTime dateTime50 = org.joda.time.DateTime.now(dateTimeZone45);
        mutableDateTime44.setZoneRetainFields(dateTimeZone45);
        mutableDateTime44.addSeconds((int) (short) 10);
        org.joda.time.Interval interval54 = duration31.toIntervalTo((org.joda.time.ReadableInstant) mutableDateTime44);
        org.joda.time.Duration duration55 = mutablePeriod29.toDurationFrom((org.joda.time.ReadableInstant) mutableDateTime44);
        org.joda.time.LocalDateTime localDateTime57 = localDateTime13.withDurationAdded((org.joda.time.ReadableDuration) duration55, 26380);
        org.joda.time.LocalDateTime.Property property58 = localDateTime13.weekOfWeekyear();
        java.lang.String str59 = property58.getName();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1439 + "'", int6 == 1439);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(periodType19);
        org.junit.Assert.assertNotNull(durationFieldType22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "PeriodType[YearDayTime]" + "'", str23, "PeriodType[YearDayTime]");
        org.junit.Assert.assertNotNull(instant26);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(mutableDateTime38);
        org.junit.Assert.assertNotNull(obj39);
// flaky:         org.junit.Assert.assertEquals(obj39.toString(), "2022-02-22T07:23:58.482Z");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj39), "2022-02-22T07:23:58.482Z");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj39), "2022-02-22T07:23:58.482Z");
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(mutableDateTime44);
        org.junit.Assert.assertNotNull(dateTimeZone45);
        org.junit.Assert.assertNotNull(timeZone46);
// flaky:         org.junit.Assert.assertEquals(timeZone46.getDisplayName(), "\u534f\u8c03\u4e16\u754c\u65f6\u95f4");
        org.junit.Assert.assertNotNull(dateTimeZone47);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 44L + "'", long49 == 44L);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(interval54);
        org.junit.Assert.assertNotNull(duration55);
        org.junit.Assert.assertNotNull(localDateTime57);
        org.junit.Assert.assertNotNull(property58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "weekOfWeekyear" + "'", str59, "weekOfWeekyear");
    }

    @Test
    public void test07874() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07874");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.Instant instant3 = new org.joda.time.Instant();
        org.joda.time.Instant instant5 = instant3.withMillis(0L);
        org.joda.time.Chronology chronology6 = instant5.getChronology();
        org.joda.time.DurationField durationField7 = chronology6.eras();
        long long11 = chronology6.add(0L, (long) 2022, (int) '4');
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = dateTimeFormatter2.withChronology(chronology6);
        java.lang.Object obj13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(obj13);
        org.joda.time.LocalDateTime localDateTime15 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.withHourOfDay(10);
        org.joda.time.DateTimeField dateTimeField21 = localDateTime19.getField((int) (byte) 0);
        long long23 = dateTimeField21.roundHalfEven((long) 1);
        int int24 = dateTime14.get(dateTimeField21);
        org.joda.time.LocalDateTime localDateTime25 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime27 = localDateTime25.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime27.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime29.withCenturyOfEra((int) 'a');
        java.util.Locale locale33 = java.util.Locale.GERMAN;
        java.lang.String str34 = locale33.getDisplayName();
        java.lang.String str35 = dateTimeField21.getAsText((org.joda.time.ReadablePartial) localDateTime29, 53, locale33);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter36 = dateTimeFormatter2.withLocale(locale33);
        org.joda.time.format.DateTimePrinter dateTimePrinter37 = dateTimeFormatter2.getPrinter();
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone.setDefault(dateTimeZone38);
        org.joda.time.DateTime dateTime40 = org.joda.time.DateTime.now(dateTimeZone38);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter41 = dateTimeFormatter2.withZone(dateTimeZone38);
        boolean boolean42 = dateTimeFormatter41.isPrinter();
        org.joda.time.Chronology chronology43 = dateTimeFormatter41.getChronolgy();
        java.lang.Integer int44 = dateTimeFormatter41.getPivotYear();
        org.joda.time.Chronology chronology45 = dateTimeFormatter41.getChronology();
        org.junit.Assert.assertNotNull(instant5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 105144L + "'", long11 == 105144L);
        org.junit.Assert.assertNotNull(dateTimeFormatter12);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2022 + "'", int24 == 2022);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "de");
// flaky:         org.junit.Assert.assertEquals("'" + str34 + "' != '" + "\u5fb7\u6587" + "'", str34, "\u5fb7\u6587");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "53" + "'", str35, "53");
        org.junit.Assert.assertNotNull(dateTimeFormatter36);
        org.junit.Assert.assertNull(dateTimePrinter37);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTimeFormatter41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNull(chronology43);
        org.junit.Assert.assertNull(int44);
        org.junit.Assert.assertNull(chronology45);
    }

    @Test
    public void test07875() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07875");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        java.util.TimeZone timeZone1 = dateTimeZone0.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.UTC;
        long long4 = dateTimeZone0.getMillisKeepLocal(dateTimeZone2, (long) 44);
        boolean boolean6 = dateTimeZone2.isStandardOffset((long) (-1));
        java.lang.String str7 = dateTimeZone2.toString();
        org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime(dateTimeZone2);
        mutableDateTime8.setSecondOfMinute(41);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime8.setDayOfWeek((int) (short) -1);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -1 for dayOfWeek must be in the range [1,7]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(timeZone1);
// flaky:         org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "\u534f\u8c03\u4e16\u754c\u65f6\u95f4");
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 44L + "'", long4 == 44L);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "UTC" + "'", str7, "UTC");
    }

    @Test
    public void test07876() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07876");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.Instant instant2 = instant0.withMillis(0L);
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime((long) 1);
        org.joda.time.Duration duration6 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period7 = duration6.toPeriod();
        org.joda.time.Duration duration10 = duration6.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Period period11 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime4, (org.joda.time.ReadableDuration) duration10);
        org.joda.time.Instant instant12 = dateTime4.toInstant();
        org.joda.time.DateTime dateTime15 = dateTime4.withDurationAdded((long) 3, 4);
        org.joda.time.Instant instant16 = dateTime15.toInstant();
        boolean boolean17 = instant0.isBefore((org.joda.time.ReadableInstant) dateTime15);
        org.joda.time.MutableDateTime mutableDateTime18 = instant0.toMutableDateTime();
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone.setDefault(dateTimeZone19);
        org.joda.time.DateTime dateTime21 = org.joda.time.DateTime.now(dateTimeZone19);
        org.joda.time.DateTime dateTime22 = dateTime21.toDateTimeISO();
        org.joda.time.DateTime dateTime24 = dateTime22.minusMillis((int) 'x');
        int int25 = dateTime22.getYear();
        org.joda.time.MutablePeriod mutablePeriod26 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) mutableDateTime18, (org.joda.time.ReadableInstant) dateTime22);
        mutablePeriod26.addDays(0);
        org.junit.Assert.assertNotNull(instant2);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(instant12);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(instant16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(mutableDateTime18);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2022 + "'", int25 == 2022);
    }

    @Test
    public void test07877() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07877");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime3 = mutableDateTime0.copy();
        org.joda.time.MutableDateTime.Property property4 = mutableDateTime0.yearOfEra();
        org.joda.time.MutableDateTime mutableDateTime6 = property4.addWrapField(62151);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 1, chronology8);
        int int10 = dateTime9.getMinuteOfDay();
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.Period period14 = new org.joda.time.Period(readableDuration12, readableInstant13);
        org.joda.time.PeriodType periodType17 = null;
        org.joda.time.Period period18 = new org.joda.time.Period((long) 100, 1L, periodType17);
        org.joda.time.Period period20 = period18.minusSeconds((-1));
        java.lang.String str21 = period18.toString();
        org.joda.time.Period period22 = period18.toPeriod();
        org.joda.time.PeriodType periodType23 = period18.getPeriodType();
        org.joda.time.Period period24 = period14.normalizedStandard(periodType23);
        org.joda.time.Instant instant25 = new org.joda.time.Instant();
        org.joda.time.Instant instant27 = instant25.withMillis(0L);
        org.joda.time.Chronology chronology28 = instant27.getChronology();
        org.joda.time.DurationField durationField29 = chronology28.eras();
        long long33 = chronology28.add(0L, (long) 2022, (int) '4');
        org.joda.time.DateTimeField dateTimeField34 = chronology28.secondOfMinute();
        org.joda.time.MutablePeriod mutablePeriod35 = new org.joda.time.MutablePeriod(44L, periodType23, chronology28);
        org.joda.time.DateTimeField dateTimeField36 = chronology28.clockhourOfHalfday();
        org.joda.time.DateTime dateTime37 = dateTime9.toDateTime(chronology28);
        org.joda.time.LocalDate localDate40 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property41 = localDate40.monthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType42 = org.joda.time.DateTimeFieldType.minuteOfDay();
        boolean boolean43 = localDate40.isSupported(dateTimeFieldType42);
        org.joda.time.Chronology chronology44 = localDate40.getChronology();
        org.joda.time.MutablePeriod mutablePeriod45 = new org.joda.time.MutablePeriod((long) (byte) -1, 0L, chronology44);
        org.joda.time.MutableDateTime mutableDateTime46 = dateTime37.toMutableDateTime(chronology44);
        org.joda.time.DateTimeField dateTimeField47 = chronology44.clockhourOfHalfday();
        int int48 = mutableDateTime6.get(dateTimeField47);
        org.joda.time.LocalDateTime localDateTime51 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime53 = localDateTime51.withHourOfDay(10);
        org.joda.time.LocalDateTime.Property property54 = localDateTime51.hourOfDay();
        org.joda.time.DateTimeField dateTimeField55 = property54.getField();
        boolean boolean57 = property54.equals((java.lang.Object) 10L);
        long long58 = property54.remainder();
        boolean boolean59 = property54.isLeap();
        org.joda.time.LocalDateTime localDateTime61 = property54.addToCopy(946312L);
        org.joda.time.Instant instant62 = new org.joda.time.Instant();
        org.joda.time.Instant instant64 = instant62.withMillis(0L);
        org.joda.time.DateTime dateTime65 = instant64.toDateTime();
        org.joda.time.DateTime dateTime67 = new org.joda.time.DateTime((long) 1);
        org.joda.time.PeriodType periodType68 = org.joda.time.PeriodType.months();
        org.joda.time.Period period69 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime65, (org.joda.time.ReadableInstant) dateTime67, periodType68);
        long long70 = property54.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime65);
        org.joda.time.MutablePeriod mutablePeriod75 = new org.joda.time.MutablePeriod((int) (byte) -1, (int) (byte) 1, 44, (int) ' ');
        org.joda.time.DateTime dateTime76 = dateTime65.minus((org.joda.time.ReadablePeriod) mutablePeriod75);
        org.joda.time.DateTime dateTime78 = dateTime76.withWeekOfWeekyear(51);
        java.util.Locale locale79 = java.util.Locale.JAPAN;
        java.lang.String str80 = locale79.getScript();
        java.lang.String str81 = locale79.getDisplayLanguage();
        java.util.Calendar calendar82 = dateTime78.toCalendar(locale79);
        // The following exception was thrown during execution in test generation
        try {
            long long83 = dateTimeField47.set(4801284994768L, "2022-02-22T10:17:08.431", locale79);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"2022-02-22T10:17:08.431\" for clockhourOfHalfday is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(mutableDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "PT0.099S" + "'", str21, "PT0.099S");
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(periodType23);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertNotNull(instant27);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 105144L + "'", long33 == 105144L);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(dateTimeFieldType42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(mutableDateTime46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 7 + "'", int48 == 7);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long58 + "' != '" + 1438543L + "'", long58 == 1438543L);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(localDateTime61);
        org.junit.Assert.assertNotNull(instant64);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(periodType68);
        org.junit.Assert.assertTrue("'" + long70 + "' != '" + 457087L + "'", long70 == 457087L);
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertNotNull(dateTime78);
        org.junit.Assert.assertNotNull(locale79);
        org.junit.Assert.assertEquals(locale79.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "" + "'", str80, "");
// flaky:         org.junit.Assert.assertEquals("'" + str81 + "' != '" + "Japanisch" + "'", str81, "Japanisch");
        org.junit.Assert.assertNotNull(calendar82);
        org.junit.Assert.assertEquals(calendar82.toString(), "java.util.GregorianCalendar[time=30243495968,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=11,WEEK_OF_YEAR=51,WEEK_OF_MONTH=3,DAY_OF_MONTH=17,DAY_OF_YEAR=351,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=3,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=58,SECOND=15,MILLISECOND=968,ZONE_OFFSET=0,DST_OFFSET=0]");
    }

    @Test
    public void test07878() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07878");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.add((long) 'a');
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime0.yearOfCentury();
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period6 = duration5.toPeriod();
        org.joda.time.Duration duration8 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration11 = duration8.withDurationAdded((long) (short) 100, (int) ' ');
        org.joda.time.Duration duration12 = duration5.minus((org.joda.time.ReadableDuration) duration11);
        mutableDateTime0.add((org.joda.time.ReadableDuration) duration5);
        org.joda.time.MutableDateTime.Property property14 = mutableDateTime0.centuryOfEra();
        mutableDateTime0.addHours((int) (byte) 10);
        mutableDateTime0.addWeeks(100);
        org.joda.time.ReadableInstant readableInstant21 = null;
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.PeriodType periodType23 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod24 = new org.joda.time.MutablePeriod(readableInstant21, readableInstant22, periodType23);
        org.joda.time.DurationFieldType durationFieldType26 = periodType23.getFieldType((int) (short) 0);
        java.lang.String str27 = periodType23.toString();
        org.joda.time.Instant instant28 = new org.joda.time.Instant();
        org.joda.time.Instant instant30 = instant28.withMillis(0L);
        org.joda.time.Chronology chronology31 = instant30.getChronology();
        org.joda.time.Period period32 = new org.joda.time.Period((long) 53, (long) (-1), periodType23, chronology31);
        org.joda.time.LocalDate localDate33 = org.joda.time.LocalDate.now(chronology31);
        org.joda.time.DateTimeField dateTimeField34 = chronology31.dayOfWeek();
        mutableDateTime0.setChronology(chronology31);
        mutableDateTime0.addSeconds(26184);
        org.joda.time.MutableDateTime.Property property38 = mutableDateTime0.secondOfMinute();
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime0.setMonthOfYear(12225851);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 12225851 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(periodType23);
        org.junit.Assert.assertNotNull(durationFieldType26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "PeriodType[YearDayTime]" + "'", str27, "PeriodType[YearDayTime]");
        org.junit.Assert.assertNotNull(instant30);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(localDate33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(property38);
    }

    @Test
    public void test07879() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07879");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.PeriodType periodType2 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod(readableInstant0, readableInstant1, periodType2);
        mutablePeriod3.setYears((int) '#');
        org.joda.time.DurationFieldType[] durationFieldTypeArray6 = mutablePeriod3.getFieldTypes();
        org.joda.time.Duration duration8 = org.joda.time.Duration.standardDays((long) (byte) 1);
        java.lang.String str9 = duration8.toString();
        org.joda.time.Duration duration11 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Hours hours12 = duration11.toStandardHours();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(chronology13);
        int int15 = dateTime14.getSecondOfMinute();
        org.joda.time.MutablePeriod mutablePeriod16 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration11, (org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.Duration duration17 = duration8.plus((org.joda.time.ReadableDuration) duration11);
        org.joda.time.Duration duration18 = duration8.toDuration();
        mutablePeriod3.add((org.joda.time.ReadableDuration) duration8);
        org.joda.time.ReadableInterval readableInterval20 = null;
        mutablePeriod3.setPeriod(readableInterval20);
        org.joda.time.MutableDateTime mutableDateTime22 = org.joda.time.MutableDateTime.now();
        mutableDateTime22.add((long) 'a');
        org.joda.time.MutableDateTime.Property property25 = mutableDateTime22.secondOfDay();
        org.joda.time.MutableDateTime mutableDateTime27 = property25.add(51);
        org.joda.time.LocalDate localDate28 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property29 = localDate28.monthOfYear();
        org.joda.time.DateTimeField dateTimeField30 = property29.getField();
        org.joda.time.LocalDate localDate31 = property29.roundCeilingCopy();
        org.joda.time.Chronology chronology32 = localDate31.getChronology();
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(53, 0);
        org.joda.time.DateTime dateTime36 = localDate31.toDateTimeAtMidnight(dateTimeZone35);
        org.joda.time.DateTime.Property property37 = dateTime36.monthOfYear();
        org.joda.time.DateTime dateTime39 = dateTime36.minusMonths(53);
        mutablePeriod3.setPeriod((org.joda.time.ReadableInstant) mutableDateTime27, (org.joda.time.ReadableInstant) dateTime36);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime42 = dateTime36.withWeekOfWeekyear((-369858));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -369858 for weekOfWeekyear must be in the range [1,52]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType2);
        org.junit.Assert.assertNotNull(durationFieldTypeArray6);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "PT86400S" + "'", str9, "PT86400S");
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(hours12);
// flaky:         org.junit.Assert.assertTrue("'" + int15 + "' != '" + 58 + "'", int15 == 58);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(mutableDateTime22);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(mutableDateTime27);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(dateTime39);
    }

    @Test
    public void test07880() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07880");
        org.joda.time.tz.Provider provider0 = org.joda.time.DateTimeZone.getProvider();
        org.joda.time.DateTimeZone.setProvider(provider0);
        org.joda.time.DateTimeZone.setProvider(provider0);
        org.joda.time.DateTimeZone dateTimeZone4 = provider0.getZone("2022-02-22T07:19:50.018Z");
        java.util.Set<java.lang.String> strSet5 = provider0.getAvailableIDs();
        org.joda.time.DateTimeZone.setProvider(provider0);
        org.junit.Assert.assertNotNull(provider0);
        org.junit.Assert.assertNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(strSet5);
    }

    @Test
    public void test07881() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07881");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        int int2 = dateTime1.getYearOfCentury();
        int int3 = dateTime1.getYearOfEra();
        org.joda.time.MutableDateTime mutableDateTime4 = dateTime1.toMutableDateTime();
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.Period period10 = new org.joda.time.Period(readableDuration8, readableInstant9);
        org.joda.time.PeriodType periodType13 = null;
        org.joda.time.Period period14 = new org.joda.time.Period((long) 100, 1L, periodType13);
        org.joda.time.Period period16 = period14.minusSeconds((-1));
        java.lang.String str17 = period14.toString();
        org.joda.time.Period period18 = period14.toPeriod();
        org.joda.time.PeriodType periodType19 = period14.getPeriodType();
        org.joda.time.Period period20 = period10.normalizedStandard(periodType19);
        org.joda.time.Instant instant21 = new org.joda.time.Instant();
        org.joda.time.Instant instant23 = instant21.withMillis(0L);
        org.joda.time.Chronology chronology24 = instant23.getChronology();
        org.joda.time.DurationField durationField25 = chronology24.eras();
        long long29 = chronology24.add(0L, (long) 2022, (int) '4');
        org.joda.time.DateTimeField dateTimeField30 = chronology24.secondOfMinute();
        org.joda.time.MutablePeriod mutablePeriod31 = new org.joda.time.MutablePeriod(44L, periodType19, chronology24);
        org.joda.time.MutablePeriod mutablePeriod32 = new org.joda.time.MutablePeriod(950105L, 949680L, periodType19);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime(chronology35);
        org.joda.time.DateTime dateTime38 = dateTime36.plusMinutes(15);
        org.joda.time.Chronology chronology39 = dateTime36.getChronology();
        org.joda.time.Instant instant40 = new org.joda.time.Instant();
        org.joda.time.Instant instant42 = instant40.withMillis(0L);
        org.joda.time.Chronology chronology43 = instant42.getChronology();
        org.joda.time.DurationField durationField44 = chronology43.eras();
        org.joda.time.LocalTime localTime45 = org.joda.time.LocalTime.now(chronology43);
        org.joda.time.DurationField durationField46 = chronology43.eras();
        org.joda.time.DateTimeField dateTimeField47 = chronology43.hourOfDay();
        org.joda.time.DateTime dateTime48 = dateTime36.withChronology(chronology43);
        org.joda.time.MutableDateTime mutableDateTime49 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property50 = mutableDateTime49.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime51 = property50.getMutableDateTime();
        boolean boolean52 = dateTime48.isBefore((org.joda.time.ReadableInstant) mutableDateTime51);
        org.joda.time.Instant instant53 = new org.joda.time.Instant();
        org.joda.time.Instant instant55 = instant53.withMillis(0L);
        org.joda.time.Chronology chronology56 = instant55.getChronology();
        org.joda.time.DurationField durationField57 = chronology56.eras();
        long long61 = chronology56.add(0L, (long) 2022, (int) '4');
        org.joda.time.DateTimeField dateTimeField62 = chronology56.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField63 = chronology56.minuteOfDay();
        mutableDateTime51.setChronology(chronology56);
        org.joda.time.DateTime dateTime65 = org.joda.time.DateTime.now(chronology56);
        mutablePeriod32.setPeriod(1645516800000L, (long) 489, chronology56);
        org.joda.time.MutableDateTime mutableDateTime67 = mutableDateTime4.toMutableDateTime(chronology56);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime67.setDateTime(26398, (-369858), 62266, 23, 37127812, 194, 643);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 37127812 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 22 + "'", int2 == 22);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2022 + "'", int3 == 2022);
        org.junit.Assert.assertNotNull(mutableDateTime4);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "PT0.099S" + "'", str17, "PT0.099S");
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(periodType19);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(instant23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 105144L + "'", long29 == 105144L);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(instant42);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(durationField44);
        org.junit.Assert.assertNotNull(localTime45);
        org.junit.Assert.assertNotNull(durationField46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(mutableDateTime49);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertNotNull(mutableDateTime51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(instant55);
        org.junit.Assert.assertNotNull(chronology56);
        org.junit.Assert.assertNotNull(durationField57);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 105144L + "'", long61 == 105144L);
        org.junit.Assert.assertNotNull(dateTimeField62);
        org.junit.Assert.assertNotNull(dateTimeField63);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(mutableDateTime67);
    }

    @Test
    public void test07882() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07882");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate2 = localDate0.plusMonths(26158);
        org.joda.time.LocalDate localDate4 = localDate2.withMonthOfYear(3);
        org.joda.time.LocalDate localDate6 = localDate4.withWeekyear((int) '4');
        org.joda.time.LocalDate localDate8 = localDate6.withCenturyOfEra(26224);
        org.joda.time.LocalDate localDate10 = localDate6.plusWeeks(44);
        org.joda.time.MutableDateTime mutableDateTime11 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime11.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime14 = property12.set(45);
        org.joda.time.MutableDateTime mutableDateTime15 = property12.roundFloor();
        org.joda.time.MutableDateTime mutableDateTime17 = property12.add(45);
        java.lang.String str18 = mutableDateTime17.toString();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime(chronology19);
        int int21 = dateTime20.getYearOfCentury();
        int int22 = dateTime20.getWeekyear();
        org.joda.time.DateTime dateTime24 = dateTime20.plus((long) 15);
        org.joda.time.DateTime.Property property25 = dateTime20.year();
        org.joda.time.DateTime dateTime26 = property25.roundHalfFloorCopy();
        org.joda.time.DateTime.Property property27 = dateTime26.millisOfSecond();
        org.joda.time.MutableDateTime mutableDateTime28 = dateTime26.toMutableDateTime();
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime32 = dateTime30.withZoneRetainFields(dateTimeZone31);
        org.joda.time.LocalDate localDate33 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property34 = localDate33.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.UTC;
        java.util.TimeZone timeZone36 = dateTimeZone35.toTimeZone();
        org.joda.time.DateTime dateTime37 = localDate33.toDateTimeAtCurrentTime(dateTimeZone35);
        int int38 = dateTime32.compareTo((org.joda.time.ReadableInstant) dateTime37);
        int int39 = dateTime37.getCenturyOfEra();
        org.joda.time.DateTime dateTime41 = dateTime37.withWeekyear(44);
        org.joda.time.ReadableInstant readableInstant44 = null;
        org.joda.time.ReadableInstant readableInstant45 = null;
        org.joda.time.PeriodType periodType46 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod47 = new org.joda.time.MutablePeriod(readableInstant44, readableInstant45, periodType46);
        org.joda.time.DurationFieldType durationFieldType49 = periodType46.getFieldType((int) (short) 0);
        java.lang.String str50 = periodType46.toString();
        org.joda.time.Instant instant51 = new org.joda.time.Instant();
        org.joda.time.Instant instant53 = instant51.withMillis(0L);
        org.joda.time.Chronology chronology54 = instant53.getChronology();
        org.joda.time.Period period55 = new org.joda.time.Period((long) 53, (long) (-1), periodType46, chronology54);
        org.joda.time.PeriodType periodType56 = periodType46.withMonthsRemoved();
        org.joda.time.Period period57 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime26, (org.joda.time.ReadableInstant) dateTime37, periodType46);
        org.joda.time.MutablePeriod mutablePeriod58 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) mutableDateTime17, (org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.DateTimeFieldType dateTimeFieldType59 = org.joda.time.DateTimeFieldType.millisOfSecond();
        java.lang.String str60 = dateTimeFieldType59.getName();
        org.joda.time.DurationFieldType durationFieldType61 = dateTimeFieldType59.getRangeDurationType();
        mutableDateTime17.add(durationFieldType61, 26175904);
        java.lang.String str64 = durationFieldType61.getName();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate66 = localDate6.withFieldAdded(durationFieldType61, 37423908);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'seconds' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(mutableDateTime14);
        org.junit.Assert.assertNotNull(mutableDateTime15);
        org.junit.Assert.assertNotNull(mutableDateTime17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "9000-01-01T00:00:00.000Z" + "'", str18, "9000-01-01T00:00:00.000Z");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 22 + "'", int21 == 22);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2022 + "'", int22 == 2022);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(mutableDateTime28);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertNotNull(timeZone36);
// flaky:         org.junit.Assert.assertEquals(timeZone36.getDisplayName(), "Koordinierte Universalzeit");
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 20 + "'", int39 == 20);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(periodType46);
        org.junit.Assert.assertNotNull(durationFieldType49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "PeriodType[YearDayTime]" + "'", str50, "PeriodType[YearDayTime]");
        org.junit.Assert.assertNotNull(instant53);
        org.junit.Assert.assertNotNull(chronology54);
        org.junit.Assert.assertNotNull(periodType56);
        org.junit.Assert.assertNotNull(dateTimeFieldType59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "millisOfSecond" + "'", str60, "millisOfSecond");
        org.junit.Assert.assertNotNull(durationFieldType61);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "seconds" + "'", str64, "seconds");
    }

    @Test
    public void test07883() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07883");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.UTC;
        java.util.TimeZone timeZone3 = dateTimeZone2.toTimeZone();
        org.joda.time.DateTime dateTime4 = localDate0.toDateTimeAtCurrentTime(dateTimeZone2);
        org.joda.time.MutableDateTime mutableDateTime5 = org.joda.time.MutableDateTime.now(dateTimeZone2);
        int int6 = mutableDateTime5.getEra();
        org.joda.time.Instant instant7 = mutableDateTime5.toInstant();
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(timeZone3);
// flaky:         org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "Koordinierte Universalzeit");
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(mutableDateTime5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(instant7);
    }

    @Test
    public void test07884() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07884");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.monthOfYear();
        org.joda.time.DateTimeField dateTimeField2 = property1.getField();
        org.joda.time.LocalDate localDate3 = property1.roundCeilingCopy();
        org.joda.time.LocalDate localDate5 = localDate3.withCenturyOfEra((int) (short) 1);
        org.joda.time.MutableDateTime mutableDateTime6 = org.joda.time.MutableDateTime.now();
        mutableDateTime6.add((long) 'a');
        org.joda.time.Duration duration10 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration12 = org.joda.time.Duration.standardDays((long) (byte) 1);
        java.lang.String str13 = duration12.toString();
        boolean boolean14 = duration10.isShorterThan((org.joda.time.ReadableDuration) duration12);
        org.joda.time.Hours hours15 = duration10.toStandardHours();
        mutableDateTime6.add((org.joda.time.ReadableDuration) duration10, 20);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime(chronology18);
        int int20 = dateTime19.getYearOfCentury();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter21 = null;
        java.lang.String str22 = dateTime19.toString(dateTimeFormatter21);
        org.joda.time.DateTime dateTime24 = dateTime19.minusMonths(22);
        org.joda.time.Instant instant25 = new org.joda.time.Instant();
        org.joda.time.Instant instant27 = instant25.withMillis(0L);
        org.joda.time.Chronology chronology28 = instant27.getChronology();
        org.joda.time.DurationField durationField29 = chronology28.eras();
        org.joda.time.DateTime dateTime30 = dateTime19.withChronology(chronology28);
        org.joda.time.Period period31 = duration10.toPeriod(chronology28);
        org.joda.time.ReadableDuration readableDuration34 = null;
        org.joda.time.ReadableInstant readableInstant35 = null;
        org.joda.time.Period period36 = new org.joda.time.Period(readableDuration34, readableInstant35);
        org.joda.time.PeriodType periodType39 = null;
        org.joda.time.Period period40 = new org.joda.time.Period((long) 100, 1L, periodType39);
        org.joda.time.Period period42 = period40.minusSeconds((-1));
        java.lang.String str43 = period40.toString();
        org.joda.time.Period period44 = period40.toPeriod();
        org.joda.time.PeriodType periodType45 = period40.getPeriodType();
        org.joda.time.Period period46 = period36.normalizedStandard(periodType45);
        java.lang.String str47 = periodType45.getName();
        java.lang.String str48 = periodType45.toString();
        org.joda.time.PeriodType periodType49 = periodType45.withDaysRemoved();
        org.joda.time.PeriodType periodType50 = periodType49.withWeeksRemoved();
        org.joda.time.MutablePeriod mutablePeriod51 = new org.joda.time.MutablePeriod((long) 45, 1L, periodType50);
        int[] intArray53 = chronology28.get((org.joda.time.ReadablePeriod) mutablePeriod51, 1L);
        org.joda.time.Period period55 = org.joda.time.Period.weeks((int) (byte) 0);
        org.joda.time.Period period57 = period55.minusMillis(19045);
        org.joda.time.Period period59 = period55.minusYears(0);
        org.joda.time.DurationFieldType durationFieldType61 = period55.getFieldType(0);
        int int62 = mutablePeriod51.indexOf(durationFieldType61);
        org.joda.time.LocalDate localDate64 = localDate5.withFieldAdded(durationFieldType61, 26417);
        int int65 = localDate64.getDayOfYear();
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "PT86400S" + "'", str13, "PT86400S");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(hours15);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 22 + "'", int20 == 22);
// flaky:         org.junit.Assert.assertEquals("'" + str22 + "' != '" + "2022-02-22T07:23:58.735Z" + "'", str22, "2022-02-22T07:23:58.735Z");
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(instant27);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertNotNull(period42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "PT0.099S" + "'", str43, "PT0.099S");
        org.junit.Assert.assertNotNull(period44);
        org.junit.Assert.assertNotNull(periodType45);
        org.junit.Assert.assertNotNull(period46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "Standard" + "'", str47, "Standard");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "PeriodType[Standard]" + "'", str48, "PeriodType[Standard]");
        org.junit.Assert.assertNotNull(periodType49);
        org.junit.Assert.assertNotNull(periodType50);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertNotNull(period55);
        org.junit.Assert.assertNotNull(period57);
        org.junit.Assert.assertNotNull(period59);
        org.junit.Assert.assertNotNull(durationFieldType61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertNotNull(localDate64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 60 + "'", int65 == 60);
    }

    @Test
    public void test07885() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07885");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) 1);
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period4 = duration3.toPeriod();
        org.joda.time.Duration duration7 = duration3.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Period period8 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime1, (org.joda.time.ReadableDuration) duration7);
        org.joda.time.Period period10 = period8.plusSeconds((int) (byte) 0);
        org.joda.time.MutableDateTime mutableDateTime11 = org.joda.time.MutableDateTime.now();
        mutableDateTime11.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime14 = mutableDateTime11.copy();
        org.joda.time.MutableDateTime.Property property15 = mutableDateTime11.weekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime16 = property15.roundHalfFloor();
        org.joda.time.MutableDateTime mutableDateTime17 = property15.roundHalfCeiling();
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.ReadableInstant readableInstant21 = null;
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.PeriodType periodType23 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod24 = new org.joda.time.MutablePeriod(readableInstant21, readableInstant22, periodType23);
        org.joda.time.DurationFieldType durationFieldType26 = periodType23.getFieldType((int) (short) 0);
        java.lang.String str27 = periodType23.toString();
        org.joda.time.Instant instant28 = new org.joda.time.Instant();
        org.joda.time.Instant instant30 = instant28.withMillis(0L);
        org.joda.time.Chronology chronology31 = instant30.getChronology();
        org.joda.time.Period period32 = new org.joda.time.Period((long) 53, (long) (-1), periodType23, chronology31);
        org.joda.time.DateTimeField dateTimeField33 = dateTimeFieldType18.getField(chronology31);
        java.util.Locale locale34 = java.util.Locale.UK;
        java.lang.String str35 = locale34.getDisplayLanguage();
        int int36 = dateTimeField33.getMaximumTextLength(locale34);
        mutableDateTime17.setRounding(dateTimeField33);
        org.joda.time.Duration duration38 = period8.toDurationFrom((org.joda.time.ReadableInstant) mutableDateTime17);
        org.joda.time.MutableDateTime.Property property39 = mutableDateTime17.centuryOfEra();
        org.joda.time.MutablePeriod mutablePeriod44 = new org.joda.time.MutablePeriod(999, (int) (short) -1, 0, (int) (short) -1);
        org.joda.time.Instant instant46 = new org.joda.time.Instant();
        org.joda.time.Instant instant48 = instant46.withMillis(0L);
        org.joda.time.Chronology chronology49 = instant48.getChronology();
        org.joda.time.DurationField durationField50 = chronology49.eras();
        org.joda.time.LocalTime localTime51 = org.joda.time.LocalTime.now(chronology49);
        org.joda.time.DurationField durationField52 = chronology49.eras();
        mutablePeriod44.setPeriod((long) 999, chronology49);
        org.joda.time.MutablePeriod mutablePeriod58 = new org.joda.time.MutablePeriod((int) (byte) -1, (int) (byte) 1, 44, (int) ' ');
        mutablePeriod58.addDays((int) (byte) 10);
        mutablePeriod58.addMillis((int) '4');
        mutablePeriod58.setSeconds((int) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone65 = null;
        org.joda.time.LocalTime localTime66 = new org.joda.time.LocalTime(dateTimeZone65);
        org.joda.time.ReadablePeriod readablePeriod67 = null;
        org.joda.time.LocalTime localTime68 = localTime66.plus(readablePeriod67);
        org.joda.time.ReadableInstant readableInstant69 = null;
        org.joda.time.ReadableInstant readableInstant70 = null;
        org.joda.time.PeriodType periodType71 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod72 = new org.joda.time.MutablePeriod(readableInstant69, readableInstant70, periodType71);
        org.joda.time.DurationFieldType durationFieldType74 = periodType71.getFieldType((int) (short) 0);
        boolean boolean75 = localTime66.isSupported(durationFieldType74);
        mutablePeriod58.add(durationFieldType74, 8);
        boolean boolean78 = mutablePeriod44.isSupported(durationFieldType74);
        mutablePeriod44.addWeeks(443);
        mutableDateTime17.add((org.joda.time.ReadablePeriod) mutablePeriod44, 26176);
        org.joda.time.MutableDateTime mutableDateTime83 = mutableDateTime17.toMutableDateTime();
        mutableDateTime83.setYear((int) (byte) 0);
        java.lang.String str86 = mutableDateTime83.toString();
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertNotNull(mutableDateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(mutableDateTime16);
        org.junit.Assert.assertNotNull(mutableDateTime17);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertNotNull(periodType23);
        org.junit.Assert.assertNotNull(durationFieldType26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "PeriodType[YearDayTime]" + "'", str27, "PeriodType[YearDayTime]");
        org.junit.Assert.assertNotNull(instant30);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "en_GB");
// flaky:         org.junit.Assert.assertEquals("'" + str35 + "' != '" + "\u82f1\u6587" + "'", str35, "\u82f1\u6587");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 4 + "'", int36 == 4);
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(instant48);
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertNotNull(durationField50);
        org.junit.Assert.assertNotNull(localTime51);
        org.junit.Assert.assertNotNull(durationField52);
        org.junit.Assert.assertNotNull(localTime68);
        org.junit.Assert.assertNotNull(periodType71);
        org.junit.Assert.assertNotNull(durationFieldType74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertNotNull(mutableDateTime83);
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "0000-12-01T07:15:00.000Z" + "'", str86, "0000-12-01T07:15:00.000Z");
    }

    @Test
    public void test07886() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07886");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.add((long) 'a');
        org.joda.time.Instant instant3 = new org.joda.time.Instant();
        org.joda.time.Instant instant5 = instant3.withMillis(0L);
        org.joda.time.DateTime dateTime6 = instant5.toDateTime();
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime((long) 1);
        org.joda.time.PeriodType periodType9 = org.joda.time.PeriodType.months();
        org.joda.time.Period period10 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime6, (org.joda.time.ReadableInstant) dateTime8, periodType9);
        org.joda.time.DateTime.Property property11 = dateTime8.minuteOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = property11.getFieldType();
        org.joda.time.MutableDateTime.Property property13 = mutableDateTime0.property(dateTimeFieldType12);
        org.joda.time.Instant instant15 = new org.joda.time.Instant();
        org.joda.time.Instant instant17 = instant15.withMillis(0L);
        org.joda.time.Duration duration19 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period20 = duration19.toPeriod();
        org.joda.time.Duration duration23 = duration19.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Instant instant24 = instant17.plus((org.joda.time.ReadableDuration) duration23);
        long long25 = instant24.getMillis();
        org.joda.time.Chronology chronology26 = instant24.getChronology();
        org.joda.time.DurationField durationField27 = chronology26.months();
        org.joda.time.Period period28 = new org.joda.time.Period((-205878993L), chronology26);
        org.joda.time.DateTimeField dateTimeField29 = chronology26.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone30 = chronology26.getZone();
        org.joda.time.LocalTime localTime31 = new org.joda.time.LocalTime((java.lang.Object) mutableDateTime0, chronology26);
        org.joda.time.LocalTime localTime33 = localTime31.withMillisOfDay((int) (short) 100);
        org.joda.time.LocalTime localTime35 = localTime33.withMillisOfDay(62167);
        org.joda.time.LocalTime.Property property36 = localTime33.secondOfMinute();
        java.lang.String str37 = localTime33.toString();
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(instant5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(periodType9);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(instant17);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(instant24);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 86400000L + "'", long25 == 86400000L);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertNotNull(localTime33);
        org.junit.Assert.assertNotNull(localTime35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "00:00:00.100" + "'", str37, "00:00:00.100");
    }

    @Test
    public void test07887() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07887");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.PeriodType periodType5 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod6 = new org.joda.time.MutablePeriod(readableInstant3, readableInstant4, periodType5);
        org.joda.time.DurationFieldType durationFieldType8 = periodType5.getFieldType((int) (short) 0);
        java.lang.String str9 = periodType5.toString();
        org.joda.time.Instant instant10 = new org.joda.time.Instant();
        org.joda.time.Instant instant12 = instant10.withMillis(0L);
        org.joda.time.Chronology chronology13 = instant12.getChronology();
        org.joda.time.Period period14 = new org.joda.time.Period((long) 53, (long) (-1), periodType5, chronology13);
        org.joda.time.DateTimeField dateTimeField15 = dateTimeFieldType0.getField(chronology13);
        org.joda.time.DateTimeField dateTimeField16 = chronology13.millisOfSecond();
        org.joda.time.MutableDateTime mutableDateTime17 = new org.joda.time.MutableDateTime(chronology13);
        org.joda.time.LocalDateTime localDateTime18 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime20.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime22.plusYears((int) (short) 100);
        int int25 = localDateTime24.getEra();
        org.joda.time.LocalDateTime localDateTime27 = localDateTime24.plusYears(161);
        long long29 = chronology13.set((org.joda.time.ReadablePartial) localDateTime24, 1645514174548L);
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(periodType5);
        org.junit.Assert.assertNotNull(durationFieldType8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "PeriodType[YearDayTime]" + "'", str9, "PeriodType[YearDayTime]");
        org.junit.Assert.assertNotNull(instant12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(localDateTime27);
// flaky:         org.junit.Assert.assertTrue("'" + long29 + "' != '" + 4801199038823L + "'", long29 == 4801199038823L);
    }

    @Test
    public void test07888() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07888");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime3 = mutableDateTime0.copy();
        org.joda.time.MutableDateTime.Property property4 = mutableDateTime0.yearOfEra();
        org.joda.time.MutableDateTime mutableDateTime6 = property4.addWrapField(62151);
        org.joda.time.MutableDateTime mutableDateTime7 = mutableDateTime6.toMutableDateTime();
        int int8 = mutableDateTime7.getSecondOfDay();
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime7.millisOfSecond();
        org.joda.time.Duration duration11 = org.joda.time.Duration.standardDays((-9571L));
        org.joda.time.Period period12 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime7, (org.joda.time.ReadableDuration) duration11);
        org.joda.time.Instant instant13 = mutableDateTime7.toInstant();
        java.util.Date date14 = mutableDateTime7.toDate();
        org.joda.time.LocalTime localTime15 = org.joda.time.LocalTime.fromDateFields(date14);
        org.joda.time.LocalTime localTime16 = org.joda.time.LocalTime.fromDateFields(date14);
        org.joda.time.LocalTime localTime17 = org.joda.time.LocalTime.fromDateFields(date14);
        org.joda.time.DateTimeField[] dateTimeFieldArray18 = localTime17.getFields();
        org.joda.time.LocalTime localTime20 = localTime17.plusMinutes(0);
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(mutableDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(mutableDateTime7);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 26638 + "'", int8 == 26638);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(instant13);
        org.junit.Assert.assertNotNull(date14);
// flaky:         org.junit.Assert.assertEquals(date14.toString(), "Mon Feb 22 07:23:58 GMT 64173");
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertNotNull(localTime17);
        org.junit.Assert.assertNotNull(dateTimeFieldArray18);
        org.junit.Assert.assertNotNull(localTime20);
    }

    @Test
    public void test07889() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07889");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period2 = duration1.toPeriod();
        org.joda.time.Duration duration4 = duration1.minus((long) 292278993);
        org.joda.time.MutableDateTime mutableDateTime5 = org.joda.time.MutableDateTime.now();
        mutableDateTime5.add((long) 'a');
        org.joda.time.MutableDateTime.Property property8 = mutableDateTime5.yearOfCentury();
        org.joda.time.Duration duration10 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period11 = duration10.toPeriod();
        org.joda.time.Duration duration13 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration16 = duration13.withDurationAdded((long) (short) 100, (int) ' ');
        org.joda.time.Duration duration17 = duration10.minus((org.joda.time.ReadableDuration) duration16);
        mutableDateTime5.add((org.joda.time.ReadableDuration) duration10);
        boolean boolean19 = duration4.isShorterThan((org.joda.time.ReadableDuration) duration10);
        org.joda.time.Duration duration21 = duration10.minus((long) (byte) 0);
        org.joda.time.MutableDateTime mutableDateTime22 = org.joda.time.MutableDateTime.now();
        mutableDateTime22.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime25 = mutableDateTime22.copy();
        mutableDateTime22.setDate((long) '#');
        org.joda.time.LocalDate localDate28 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property29 = localDate28.monthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = org.joda.time.DateTimeFieldType.minuteOfDay();
        boolean boolean31 = localDate28.isSupported(dateTimeFieldType30);
        int int32 = localDate28.getDayOfYear();
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateMidnight dateMidnight34 = localDate28.toDateMidnight(dateTimeZone33);
        org.joda.time.DateTime dateTime35 = mutableDateTime22.toDateTime(dateTimeZone33);
        org.joda.time.MutablePeriod mutablePeriod36 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration21, (org.joda.time.ReadableInstant) mutableDateTime22);
        org.joda.time.Duration duration38 = duration21.plus(69253287811200000L);
        long long39 = duration21.getStandardSeconds();
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(period2);
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertNotNull(mutableDateTime5);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(mutableDateTime22);
        org.junit.Assert.assertNotNull(mutableDateTime25);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(dateTimeFieldType30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 53 + "'", int32 == 53);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertNotNull(dateMidnight34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 86400L + "'", long39 == 86400L);
    }

    @Test
    public void test07890() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07890");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.PeriodType periodType5 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod6 = new org.joda.time.MutablePeriod(readableInstant3, readableInstant4, periodType5);
        org.joda.time.DurationFieldType durationFieldType8 = periodType5.getFieldType((int) (short) 0);
        java.lang.String str9 = periodType5.toString();
        org.joda.time.Instant instant10 = new org.joda.time.Instant();
        org.joda.time.Instant instant12 = instant10.withMillis(0L);
        org.joda.time.Chronology chronology13 = instant12.getChronology();
        org.joda.time.Period period14 = new org.joda.time.Period((long) 53, (long) (-1), periodType5, chronology13);
        org.joda.time.DateTimeField dateTimeField15 = dateTimeFieldType0.getField(chronology13);
        org.joda.time.DateTimeField dateTimeField16 = chronology13.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone17 = chronology13.getZone();
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime(dateTimeZone17);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.plusMonths(29);
        org.joda.time.Duration duration22 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period23 = duration22.toPeriod();
        org.joda.time.Period period25 = period23.minusYears((-1));
        org.joda.time.PeriodType periodType27 = org.joda.time.PeriodType.years();
        org.joda.time.Period period28 = new org.joda.time.Period(60000L, periodType27);
        org.joda.time.Period period29 = period25.withFields((org.joda.time.ReadablePeriod) period28);
        org.joda.time.Instant instant30 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime31 = instant30.toMutableDateTime();
        org.joda.time.MutableDateTime mutableDateTime32 = org.joda.time.MutableDateTime.now();
        mutableDateTime32.add((long) 'a');
        org.joda.time.MutableDateTime.Property property35 = mutableDateTime32.yearOfCentury();
        org.joda.time.Duration duration37 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period38 = duration37.toPeriod();
        org.joda.time.Duration duration40 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration43 = duration40.withDurationAdded((long) (short) 100, (int) ' ');
        org.joda.time.Duration duration44 = duration37.minus((org.joda.time.ReadableDuration) duration43);
        mutableDateTime32.add((org.joda.time.ReadableDuration) duration37);
        org.joda.time.MutableDateTime.Property property46 = mutableDateTime32.centuryOfEra();
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.DateTime dateTime48 = new org.joda.time.DateTime(chronology47);
        int int49 = dateTime48.getYearOfCentury();
        org.joda.time.DateTime dateTime51 = dateTime48.withSecondOfMinute(53);
        org.joda.time.Duration duration53 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period54 = duration53.toPeriod();
        org.joda.time.Duration duration56 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration59 = duration56.withDurationAdded((long) (short) 100, (int) ' ');
        org.joda.time.Duration duration60 = duration53.minus((org.joda.time.ReadableDuration) duration59);
        org.joda.time.ReadableInstant readableInstant61 = null;
        org.joda.time.ReadableInstant readableInstant62 = null;
        org.joda.time.PeriodType periodType63 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod64 = new org.joda.time.MutablePeriod(readableInstant61, readableInstant62, periodType63);
        org.joda.time.DurationFieldType durationFieldType66 = periodType63.getFieldType((int) (short) 0);
        java.lang.String str67 = periodType63.toString();
        org.joda.time.Period period68 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime48, (org.joda.time.ReadableDuration) duration53, periodType63);
        mutableDateTime32.add((org.joda.time.ReadableDuration) duration53);
        mutableDateTime32.addWeekyears(21);
        org.joda.time.MutableDateTime.Property property72 = mutableDateTime32.weekOfWeekyear();
        boolean boolean73 = instant30.isAfter((org.joda.time.ReadableInstant) mutableDateTime32);
        org.joda.time.MutableDateTime mutableDateTime74 = org.joda.time.MutableDateTime.now();
        java.lang.Object obj75 = mutableDateTime74.clone();
        mutableDateTime74.setTime((long) 46);
        org.joda.time.MutableDateTime.Property property78 = mutableDateTime74.dayOfWeek();
        org.joda.time.MutableDateTime mutableDateTime80 = property78.add(1L);
        org.joda.time.DateTimeZone dateTimeZone81 = org.joda.time.DateTimeZone.UTC;
        java.util.TimeZone timeZone82 = dateTimeZone81.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone83 = org.joda.time.DateTimeZone.UTC;
        long long85 = dateTimeZone81.getMillisKeepLocal(dateTimeZone83, (long) 44);
        org.joda.time.DateTime dateTime86 = org.joda.time.DateTime.now(dateTimeZone81);
        mutableDateTime80.setZoneRetainFields(dateTimeZone81);
        mutableDateTime80.addSeconds((int) (short) 10);
        java.lang.Object obj90 = mutableDateTime80.clone();
        org.joda.time.MutableDateTime.Property property91 = mutableDateTime80.era();
        boolean boolean92 = mutableDateTime32.isEqual((org.joda.time.ReadableInstant) mutableDateTime80);
        org.joda.time.Duration duration93 = period28.toDurationTo((org.joda.time.ReadableInstant) mutableDateTime80);
        org.joda.time.LocalDateTime localDateTime94 = localDateTime18.minus((org.joda.time.ReadablePeriod) period28);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period96 = period28.minusWeeks(26256523);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Field is not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(periodType5);
        org.junit.Assert.assertNotNull(durationFieldType8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "PeriodType[YearDayTime]" + "'", str9, "PeriodType[YearDayTime]");
        org.junit.Assert.assertNotNull(instant12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(periodType27);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(mutableDateTime31);
        org.junit.Assert.assertNotNull(mutableDateTime32);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertNotNull(period38);
        org.junit.Assert.assertNotNull(duration40);
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertNotNull(duration44);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 22 + "'", int49 == 22);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(duration53);
        org.junit.Assert.assertNotNull(period54);
        org.junit.Assert.assertNotNull(duration56);
        org.junit.Assert.assertNotNull(duration59);
        org.junit.Assert.assertNotNull(duration60);
        org.junit.Assert.assertNotNull(periodType63);
        org.junit.Assert.assertNotNull(durationFieldType66);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "PeriodType[YearDayTime]" + "'", str67, "PeriodType[YearDayTime]");
        org.junit.Assert.assertNotNull(property72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(mutableDateTime74);
        org.junit.Assert.assertNotNull(obj75);
// flaky:         org.junit.Assert.assertEquals(obj75.toString(), "2022-02-22T07:23:58.884Z");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj75), "2022-02-22T07:23:58.884Z");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj75), "2022-02-22T07:23:58.884Z");
        org.junit.Assert.assertNotNull(property78);
        org.junit.Assert.assertNotNull(mutableDateTime80);
        org.junit.Assert.assertNotNull(dateTimeZone81);
        org.junit.Assert.assertNotNull(timeZone82);
// flaky:         org.junit.Assert.assertEquals(timeZone82.getDisplayName(), "\u534f\u8c03\u4e16\u754c\u65f6\u95f4");
        org.junit.Assert.assertNotNull(dateTimeZone83);
        org.junit.Assert.assertTrue("'" + long85 + "' != '" + 44L + "'", long85 == 44L);
        org.junit.Assert.assertNotNull(dateTime86);
        org.junit.Assert.assertNotNull(obj90);
        org.junit.Assert.assertEquals(obj90.toString(), "2022-02-23T00:00:10.046Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj90), "2022-02-23T00:00:10.046Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj90), "2022-02-23T00:00:10.046Z");
        org.junit.Assert.assertNotNull(property91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertNotNull(duration93);
        org.junit.Assert.assertNotNull(localDateTime94);
    }

    @Test
    public void test07891() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07891");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.monthOfYear();
        org.joda.time.LocalDate localDate2 = property1.roundFloorCopy();
        org.joda.time.DateTime dateTime3 = localDate2.toDateTimeAtMidnight();
        org.joda.time.LocalDate.Property property4 = localDate2.dayOfMonth();
        org.joda.time.LocalDate localDate6 = localDate2.plusYears(58);
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(chronology7);
        int int9 = dateTime8.getYearOfCentury();
        int int10 = dateTime8.getWeekyear();
        org.joda.time.DateTime dateTime11 = dateTime8.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime.Property property12 = dateTime8.yearOfEra();
        org.joda.time.DateTime dateTime13 = property12.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime14 = property12.roundHalfEvenCopy();
        org.joda.time.Duration duration16 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Hours hours17 = duration16.toStandardHours();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime(chronology18);
        int int20 = dateTime19.getSecondOfMinute();
        org.joda.time.MutablePeriod mutablePeriod21 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration16, (org.joda.time.ReadableInstant) dateTime19);
        mutablePeriod21.addSeconds(292278993);
        mutablePeriod21.setPeriod((long) 45, 946312L);
        org.joda.time.DateTime dateTime27 = dateTime14.minus((org.joda.time.ReadablePeriod) mutablePeriod21);
        org.joda.time.DateTime dateTime30 = dateTime14.withDurationAdded((long) 1969, (int) (short) -1);
        org.joda.time.DateTime.Property property31 = dateTime30.year();
        int int32 = dateTime30.getDayOfMonth();
        org.joda.time.DateTime dateTime34 = dateTime30.withYearOfCentury((int) ' ');
        org.joda.time.DateTime.Property property35 = dateTime30.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone36 = dateTime30.getZone();
        org.joda.time.DateTime dateTime37 = localDate2.toDateTimeAtCurrentTime(dateTimeZone36);
        org.joda.time.Interval interval38 = localDate2.toInterval();
        org.joda.time.LocalDate.Property property39 = localDate2.dayOfMonth();
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 22 + "'", int9 == 22);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2022 + "'", int10 == 2022);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(hours17);
// flaky:         org.junit.Assert.assertTrue("'" + int20 + "' != '" + 58 + "'", int20 == 58);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 31 + "'", int32 == 31);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(interval38);
        org.junit.Assert.assertNotNull(property39);
    }

    @Test
    public void test07892() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07892");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.add((long) 'a');
        org.joda.time.Duration duration4 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration6 = org.joda.time.Duration.standardDays((long) (byte) 1);
        java.lang.String str7 = duration6.toString();
        boolean boolean8 = duration4.isShorterThan((org.joda.time.ReadableDuration) duration6);
        org.joda.time.Hours hours9 = duration4.toStandardHours();
        mutableDateTime0.add((org.joda.time.ReadableDuration) duration4, 20);
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime0.millisOfSecond();
        org.joda.time.MutableDateTime mutableDateTime13 = property12.roundFloor();
        java.lang.Object obj14 = null;
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime(obj14);
        boolean boolean16 = dateTime15.isEqualNow();
        long long17 = dateTime15.getMillis();
        org.joda.time.LocalDateTime localDateTime18 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime20.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime22.withCenturyOfEra((int) 'a');
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime(chronology25);
        org.joda.time.DateTime dateTime28 = dateTime26.plusMinutes(15);
        org.joda.time.DateTime dateTime29 = localDateTime22.toDateTime((org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime31 = localDateTime22.toDateTime(dateTimeZone30);
        java.lang.String str33 = dateTimeZone30.getName((-9571L));
        org.joda.time.DateTime dateTime34 = dateTime15.withZone(dateTimeZone30);
        java.lang.String str36 = dateTimeZone30.getName(1181780L);
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime(dateTimeZone30);
        org.joda.time.MutableDateTime mutableDateTime38 = mutableDateTime13.toMutableDateTime(dateTimeZone30);
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "PT86400S" + "'", str7, "PT86400S");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(hours9);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(mutableDateTime13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
// flaky:         org.junit.Assert.assertTrue("'" + long17 + "' != '" + 1645514638950L + "'", long17 == 1645514638950L);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "+00:00" + "'", str33, "+00:00");
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "+00:00" + "'", str36, "+00:00");
        org.junit.Assert.assertNotNull(mutableDateTime38);
    }

    @Test
    public void test07893() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07893");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) (short) -1);
        org.joda.time.MutableDateTime mutableDateTime2 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime2.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime5 = property3.set(45);
        org.joda.time.MutableDateTime mutableDateTime6 = property3.roundFloor();
        org.joda.time.MutableDateTime mutableDateTime8 = property3.add(45);
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        java.util.TimeZone timeZone10 = dateTimeZone9.toTimeZone();
        long long12 = dateTimeZone9.previousTransition(100L);
        int int14 = dateTimeZone9.getStandardOffset(86403200L);
        org.joda.time.DateTime dateTime15 = mutableDateTime8.toDateTime(dateTimeZone9);
        mutableDateTime1.setZoneRetainFields(dateTimeZone9);
        int int17 = mutableDateTime1.getDayOfMonth();
        mutableDateTime1.addWeeks(37140589);
        org.junit.Assert.assertNotNull(mutableDateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(mutableDateTime5);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(mutableDateTime8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(timeZone10);
// flaky:         org.junit.Assert.assertEquals(timeZone10.getDisplayName(), "\u534f\u8c03\u4e16\u754c\u65f6\u95f4");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 100L + "'", long12 == 100L);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 31 + "'", int17 == 31);
    }

    @Test
    public void test07894() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07894");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.monthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.minuteOfDay();
        boolean boolean3 = localDate0.isSupported(dateTimeFieldType2);
        org.joda.time.LocalDate.Property property4 = localDate0.dayOfWeek();
        org.joda.time.MutableDateTime mutableDateTime5 = org.joda.time.MutableDateTime.now();
        mutableDateTime5.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime8 = mutableDateTime5.copy();
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime5.weekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime10 = property9.roundHalfFloor();
        org.joda.time.MutableDateTime mutableDateTime11 = property9.roundHalfCeiling();
        org.joda.time.MutableDateTime mutableDateTime13 = property9.set(1);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime(chronology14);
        int int16 = dateTime15.getYearOfCentury();
        int int17 = dateTime15.getWeekyear();
        org.joda.time.DateTime dateTime18 = dateTime15.withEarlierOffsetAtOverlap();
        java.lang.String str19 = dateTime18.toString();
        org.joda.time.MutableDateTime mutableDateTime20 = dateTime18.toMutableDateTime();
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.UTC;
        boolean boolean22 = dateTimeZone21.isFixed();
        mutableDateTime20.setZoneRetainFields(dateTimeZone21);
        org.joda.time.MutableDateTime mutableDateTime24 = mutableDateTime13.toMutableDateTime(dateTimeZone21);
        org.joda.time.LocalDate localDate25 = org.joda.time.LocalDate.now(dateTimeZone21);
        java.lang.Object obj27 = null;
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime(obj27);
        org.joda.time.Duration duration30 = org.joda.time.Duration.standardSeconds((long) 45);
        org.joda.time.Period period31 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime28, (org.joda.time.ReadableDuration) duration30);
        org.joda.time.LocalDate localDate32 = dateTime28.toLocalDate();
        org.joda.time.LocalDate.Property property33 = localDate32.dayOfMonth();
        java.util.Date date34 = localDate32.toDate();
        org.joda.time.LocalDate.Property property35 = localDate32.dayOfYear();
        java.util.Locale locale36 = java.util.Locale.GERMAN;
        java.lang.String str37 = property35.getAsText(locale36);
        java.lang.String str38 = dateTimeZone21.getShortName(360000000L, locale36);
        java.lang.String str39 = property4.getAsText(locale36);
        org.joda.time.LocalDate localDate40 = property4.roundHalfCeilingCopy();
        org.joda.time.DurationField durationField41 = property4.getRangeDurationField();
        long long44 = durationField41.getMillis(26552384, 4801285053239L);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(mutableDateTime5);
        org.junit.Assert.assertNotNull(mutableDateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(mutableDateTime10);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertNotNull(mutableDateTime13);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 22 + "'", int16 == 22);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2022 + "'", int17 == 2022);
        org.junit.Assert.assertNotNull(dateTime18);
// flaky:         org.junit.Assert.assertEquals("'" + str19 + "' != '" + "2022-02-22T07:23:59.104Z" + "'", str19, "2022-02-22T07:23:59.104Z");
        org.junit.Assert.assertNotNull(mutableDateTime20);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(mutableDateTime24);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertNotNull(localDate32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Tue Feb 22 00:00:00 GMT 2022");
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "de");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "53" + "'", str37, "53");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "+00:00" + "'", str38, "+00:00");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "Dienstag" + "'", str39, "Dienstag");
        org.junit.Assert.assertNotNull(localDate40);
        org.junit.Assert.assertNotNull(durationField41);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 16058881843200000L + "'", long44 == 16058881843200000L);
    }

    @Test
    public void test07895() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07895");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) (short) -1);
        mutableDateTime1.setSecondOfMinute(53);
        int int4 = mutableDateTime1.getEra();
        mutableDateTime1.setHourOfDay((int) (byte) 1);
        org.joda.time.Chronology chronology7 = mutableDateTime1.getChronology();
        org.joda.time.Chronology chronology8 = null;
        mutableDateTime1.setChronology(chronology8);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime1.setDayOfMonth(385);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 385 for dayOfMonth must be in the range [1,31]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(chronology7);
    }

    @Test
    public void test07896() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07896");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.add((long) 'a');
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime0.yearOfCentury();
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period6 = duration5.toPeriod();
        org.joda.time.Duration duration8 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration11 = duration8.withDurationAdded((long) (short) 100, (int) ' ');
        org.joda.time.Duration duration12 = duration5.minus((org.joda.time.ReadableDuration) duration11);
        mutableDateTime0.add((org.joda.time.ReadableDuration) duration5);
        org.joda.time.MutableDateTime.Property property14 = mutableDateTime0.centuryOfEra();
        mutableDateTime0.addHours((int) (byte) 10);
        mutableDateTime0.addWeeks(20);
        org.joda.time.DateTimeField dateTimeField19 = mutableDateTime0.getRoundingField();
        org.joda.time.MutableDateTime mutableDateTime20 = org.joda.time.MutableDateTime.now();
        java.lang.Object obj21 = mutableDateTime20.clone();
        mutableDateTime20.setTime((long) 46);
        org.joda.time.MutableDateTime.Property property24 = mutableDateTime20.dayOfWeek();
        org.joda.time.MutableDateTime mutableDateTime26 = property24.add(1L);
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.UTC;
        java.util.TimeZone timeZone28 = dateTimeZone27.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.UTC;
        long long31 = dateTimeZone27.getMillisKeepLocal(dateTimeZone29, (long) 44);
        org.joda.time.DateTime dateTime32 = org.joda.time.DateTime.now(dateTimeZone27);
        mutableDateTime26.setZoneRetainFields(dateTimeZone27);
        mutableDateTime26.addSeconds((int) (short) 10);
        java.lang.Object obj36 = mutableDateTime26.clone();
        org.joda.time.MutableDateTime.Property property37 = mutableDateTime26.era();
        boolean boolean38 = mutableDateTime0.isAfter((org.joda.time.ReadableInstant) mutableDateTime26);
        org.joda.time.MutableDateTime.Property property39 = mutableDateTime26.millisOfDay();
        org.joda.time.MutableDateTime.Property property40 = mutableDateTime26.centuryOfEra();
        boolean boolean41 = property40.isLeap();
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNull(dateTimeField19);
        org.junit.Assert.assertNotNull(mutableDateTime20);
        org.junit.Assert.assertNotNull(obj21);
// flaky:         org.junit.Assert.assertEquals(obj21.toString(), "2022-02-22T07:23:59.132Z");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj21), "2022-02-22T07:23:59.132Z");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj21), "2022-02-22T07:23:59.132Z");
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(mutableDateTime26);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertNotNull(timeZone28);
// flaky:         org.junit.Assert.assertEquals(timeZone28.getDisplayName(), "\u534f\u8c03\u4e16\u754c\u65f6\u95f4");
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 44L + "'", long31 == 44L);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(obj36);
        org.junit.Assert.assertEquals(obj36.toString(), "2022-02-23T00:00:10.046Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj36), "2022-02-23T00:00:10.046Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj36), "2022-02-23T00:00:10.046Z");
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
    }

    @Test
    public void test07897() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07897");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime3 = mutableDateTime0.copy();
        org.joda.time.MutableDateTime.Property property4 = mutableDateTime0.weekOfWeekyear();
        org.joda.time.MutableDateTime.Property property5 = mutableDateTime0.dayOfYear();
        org.joda.time.MutableDateTime mutableDateTime6 = org.joda.time.MutableDateTime.now();
        mutableDateTime6.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime9 = mutableDateTime6.copy();
        mutableDateTime6.setDate((long) '#');
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property13 = localDate12.monthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.minuteOfDay();
        boolean boolean15 = localDate12.isSupported(dateTimeFieldType14);
        int int16 = localDate12.getDayOfYear();
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateMidnight dateMidnight18 = localDate12.toDateMidnight(dateTimeZone17);
        org.joda.time.DateTime dateTime19 = mutableDateTime6.toDateTime(dateTimeZone17);
        org.joda.time.LocalDate localDate20 = org.joda.time.LocalDate.now(dateTimeZone17);
        org.joda.time.PeriodType periodType23 = null;
        org.joda.time.Period period24 = new org.joda.time.Period((long) 100, 1L, periodType23);
        org.joda.time.PeriodType periodType25 = period24.getPeriodType();
        boolean boolean26 = dateTimeZone17.equals((java.lang.Object) periodType25);
        mutableDateTime0.setZoneRetainFields(dateTimeZone17);
        org.joda.time.LocalDate localDate28 = new org.joda.time.LocalDate(dateTimeZone17);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone17);
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(mutableDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 53 + "'", int16 == 53);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(dateMidnight18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(periodType25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test07898() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07898");
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration6 = duration3.withDurationAdded((long) (short) 100, (int) ' ');
        long long7 = duration6.getMillis();
        org.joda.time.Instant instant8 = new org.joda.time.Instant();
        org.joda.time.Instant instant10 = instant8.withMillis(0L);
        org.joda.time.DateTime dateTime11 = instant10.toDateTime();
        org.joda.time.Instant instant12 = new org.joda.time.Instant();
        org.joda.time.Instant instant14 = instant12.withMillis(0L);
        org.joda.time.DateTime dateTime15 = instant14.toDateTime();
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((long) 1);
        org.joda.time.PeriodType periodType18 = org.joda.time.PeriodType.months();
        org.joda.time.Period period19 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime15, (org.joda.time.ReadableInstant) dateTime17, periodType18);
        boolean boolean20 = dateTime11.isBefore((org.joda.time.ReadableInstant) dateTime15);
        int int21 = dateTime15.getDayOfMonth();
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.PeriodType periodType24 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod25 = new org.joda.time.MutablePeriod(readableInstant22, readableInstant23, periodType24);
        org.joda.time.PeriodType periodType26 = periodType24.withHoursRemoved();
        org.joda.time.MutablePeriod mutablePeriod27 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration6, (org.joda.time.ReadableInstant) dateTime15, periodType24);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime(chronology28);
        org.joda.time.DateTime dateTime31 = dateTime29.plusMinutes(15);
        org.joda.time.Chronology chronology32 = dateTime29.getChronology();
        org.joda.time.Instant instant33 = new org.joda.time.Instant();
        org.joda.time.Instant instant35 = instant33.withMillis(0L);
        org.joda.time.Chronology chronology36 = instant35.getChronology();
        org.joda.time.DurationField durationField37 = chronology36.eras();
        org.joda.time.LocalTime localTime38 = org.joda.time.LocalTime.now(chronology36);
        org.joda.time.DurationField durationField39 = chronology36.eras();
        org.joda.time.DateTimeField dateTimeField40 = chronology36.hourOfDay();
        org.joda.time.DateTime dateTime41 = dateTime29.withChronology(chronology36);
        org.joda.time.MutableDateTime mutableDateTime42 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property43 = mutableDateTime42.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime44 = property43.getMutableDateTime();
        boolean boolean45 = dateTime41.isBefore((org.joda.time.ReadableInstant) mutableDateTime44);
        org.joda.time.Instant instant46 = new org.joda.time.Instant();
        org.joda.time.Instant instant48 = instant46.withMillis(0L);
        org.joda.time.Chronology chronology49 = instant48.getChronology();
        org.joda.time.DurationField durationField50 = chronology49.eras();
        long long54 = chronology49.add(0L, (long) 2022, (int) '4');
        org.joda.time.DateTimeField dateTimeField55 = chronology49.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField56 = chronology49.minuteOfDay();
        mutableDateTime44.setChronology(chronology49);
        org.joda.time.DateTime dateTime58 = dateTime15.toDateTime(chronology49);
        org.joda.time.LocalTime localTime59 = new org.joda.time.LocalTime((long) 99, chronology49);
        org.joda.time.MutableDateTime mutableDateTime60 = new org.joda.time.MutableDateTime((long) 62166, chronology49);
        org.joda.time.MutableDateTime.Property property61 = mutableDateTime60.hourOfDay();
        org.joda.time.MutableDateTime mutableDateTime63 = property61.add((long) 37057844);
        org.joda.time.MutableDateTime.Property property64 = mutableDateTime63.secondOfDay();
        org.joda.time.MutableDateTime.Property property65 = mutableDateTime63.era();
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 86403200L + "'", long7 == 86403200L);
        org.junit.Assert.assertNotNull(instant10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(instant14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(periodType18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(periodType24);
        org.junit.Assert.assertNotNull(periodType26);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(instant35);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(durationField37);
        org.junit.Assert.assertNotNull(localTime38);
        org.junit.Assert.assertNotNull(durationField39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(mutableDateTime42);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(mutableDateTime44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(instant48);
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertNotNull(durationField50);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 105144L + "'", long54 == 105144L);
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(property61);
        org.junit.Assert.assertNotNull(mutableDateTime63);
        org.junit.Assert.assertNotNull(property64);
        org.junit.Assert.assertNotNull(property65);
    }

    @Test
    public void test07899() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07899");
        org.joda.time.Instant instant1 = new org.joda.time.Instant();
        org.joda.time.Instant instant3 = instant1.withMillis(0L);
        org.joda.time.Chronology chronology4 = instant3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.eras();
        org.joda.time.LocalTime localTime6 = org.joda.time.LocalTime.now(chronology4);
        org.joda.time.DurationField durationField7 = chronology4.eras();
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime((long) 44, chronology4);
        org.joda.time.DateTime dateTime10 = dateTime8.withMonthOfYear((int) (short) 10);
        org.joda.time.MutableDateTime mutableDateTime11 = org.joda.time.MutableDateTime.now();
        mutableDateTime11.add((long) 'a');
        org.joda.time.MutableDateTime.Property property14 = mutableDateTime11.yearOfCentury();
        mutableDateTime11.addSeconds(0);
        mutableDateTime11.add((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone19 = mutableDateTime11.getZone();
        boolean boolean20 = dateTime10.isAfter((org.joda.time.ReadableInstant) mutableDateTime11);
        int int21 = dateTime10.getMillisOfDay();
        int int22 = dateTime10.getHourOfDay();
        org.junit.Assert.assertNotNull(instant3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 44 + "'", int21 == 44);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
    }

    @Test
    public void test07900() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07900");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.Instant instant3 = new org.joda.time.Instant();
        org.joda.time.Instant instant5 = instant3.withMillis(0L);
        org.joda.time.Chronology chronology6 = instant5.getChronology();
        org.joda.time.DurationField durationField7 = chronology6.eras();
        long long11 = chronology6.add(0L, (long) 2022, (int) '4');
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = dateTimeFormatter2.withChronology(chronology6);
        java.lang.Object obj13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(obj13);
        org.joda.time.LocalDateTime localDateTime15 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.withHourOfDay(10);
        org.joda.time.DateTimeField dateTimeField21 = localDateTime19.getField((int) (byte) 0);
        long long23 = dateTimeField21.roundHalfEven((long) 1);
        int int24 = dateTime14.get(dateTimeField21);
        org.joda.time.LocalDateTime localDateTime25 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime27 = localDateTime25.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime27.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime29.withCenturyOfEra((int) 'a');
        java.util.Locale locale33 = java.util.Locale.GERMAN;
        java.lang.String str34 = locale33.getDisplayName();
        java.lang.String str35 = dateTimeField21.getAsText((org.joda.time.ReadablePartial) localDateTime29, 53, locale33);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter36 = dateTimeFormatter2.withLocale(locale33);
        boolean boolean37 = dateTimeFormatter36.isOffsetParsed();
        boolean boolean38 = dateTimeFormatter36.isOffsetParsed();
        java.util.Locale locale39 = dateTimeFormatter36.getLocale();
        org.joda.time.Chronology chronology40 = dateTimeFormatter36.getChronolgy();
        java.lang.Integer int41 = dateTimeFormatter36.getPivotYear();
        boolean boolean42 = dateTimeFormatter36.isPrinter();
        org.joda.time.Chronology chronology43 = dateTimeFormatter36.getChronolgy();
        boolean boolean44 = dateTimeFormatter36.isOffsetParsed();
        boolean boolean45 = dateTimeFormatter36.isParser();
        java.lang.Appendable appendable46 = null;
        org.joda.time.MutableDateTime mutableDateTime47 = org.joda.time.MutableDateTime.now();
        java.lang.Object obj48 = mutableDateTime47.clone();
        mutableDateTime47.setTime((long) 46);
        org.joda.time.MutableDateTime.Property property51 = mutableDateTime47.dayOfWeek();
        int int52 = mutableDateTime47.getHourOfDay();
        mutableDateTime47.addMinutes(26148);
        mutableDateTime47.setTime((long) 26522);
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter36.printTo(appendable46, (org.joda.time.ReadableInstant) mutableDateTime47);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(instant5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 105144L + "'", long11 == 105144L);
        org.junit.Assert.assertNotNull(dateTimeFormatter12);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2022 + "'", int24 == 2022);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "de");
// flaky:         org.junit.Assert.assertEquals("'" + str34 + "' != '" + "\u5fb7\u6587" + "'", str34, "\u5fb7\u6587");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "53" + "'", str35, "53");
        org.junit.Assert.assertNotNull(dateTimeFormatter36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "de");
        org.junit.Assert.assertNull(chronology40);
        org.junit.Assert.assertNull(int41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNull(chronology43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(mutableDateTime47);
        org.junit.Assert.assertNotNull(obj48);
// flaky:         org.junit.Assert.assertEquals(obj48.toString(), "2022-02-22T07:23:59.257Z");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj48), "2022-02-22T07:23:59.257Z");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj48), "2022-02-22T07:23:59.257Z");
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
    }

    @Test
    public void test07901() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07901");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) (byte) -1);
        int int2 = localDate1.getYearOfEra();
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.UTC;
        java.util.TimeZone timeZone4 = dateTimeZone3.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.UTC;
        long long7 = dateTimeZone3.getMillisKeepLocal(dateTimeZone5, (long) 44);
        org.joda.time.DateTime dateTime8 = localDate1.toDateTimeAtMidnight(dateTimeZone3);
        org.joda.time.DateTime dateTime9 = localDate1.toDateTimeAtCurrentTime();
        org.joda.time.LocalDate.Property property10 = localDate1.weekOfWeekyear();
        int int11 = property10.getMinimumValue();
        org.joda.time.LocalDate localDate12 = property10.roundHalfEvenCopy();
        int int13 = property10.getMinimumValueOverall();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1969 + "'", int2 == 1969);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(timeZone4);
// flaky:         org.junit.Assert.assertEquals(timeZone4.getDisplayName(), "\u534f\u8c03\u4e16\u754c\u65f6\u95f4");
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 44L + "'", long7 == 44L);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
    }

    @Test
    public void test07902() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07902");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(157767387048L);
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(chronology2);
        org.joda.time.DateTime dateTime5 = dateTime3.plusMinutes(15);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime(chronology6);
        org.joda.time.DateTime dateTime9 = dateTime7.plusMinutes(15);
        org.joda.time.Chronology chronology10 = dateTime7.getChronology();
        org.joda.time.Instant instant11 = new org.joda.time.Instant();
        org.joda.time.Instant instant13 = instant11.withMillis(0L);
        org.joda.time.Chronology chronology14 = instant13.getChronology();
        org.joda.time.DurationField durationField15 = chronology14.eras();
        org.joda.time.LocalTime localTime16 = org.joda.time.LocalTime.now(chronology14);
        org.joda.time.DurationField durationField17 = chronology14.eras();
        org.joda.time.DateTimeField dateTimeField18 = chronology14.hourOfDay();
        org.joda.time.DateTime dateTime19 = dateTime7.withChronology(chronology14);
        org.joda.time.DateTimeField dateTimeField20 = chronology14.dayOfMonth();
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = dateTimeField20.getType();
        int int22 = dateTime5.get(dateTimeFieldType21);
        org.joda.time.Instant instant23 = new org.joda.time.Instant();
        org.joda.time.Instant instant25 = instant23.withMillis(0L);
        org.joda.time.Chronology chronology26 = instant25.getChronology();
        org.joda.time.DurationField durationField27 = chronology26.eras();
        org.joda.time.LocalTime localTime28 = org.joda.time.LocalTime.now(chronology26);
        org.joda.time.DurationField durationField29 = chronology26.eras();
        org.joda.time.DateTimeField dateTimeField30 = dateTimeFieldType21.getField(chronology26);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime(chronology31);
        int int33 = dateTime32.getYearOfCentury();
        int int34 = dateTime32.getWeekyear();
        org.joda.time.DateTime dateTime36 = dateTime32.plus((long) 15);
        org.joda.time.DateTime.Property property37 = dateTime36.millisOfSecond();
        org.joda.time.DateTime dateTime39 = dateTime36.plusMillis(1439);
        org.joda.time.Chronology chronology40 = dateTime39.getChronology();
        org.joda.time.DateTimeField dateTimeField41 = dateTimeFieldType21.getField(chronology40);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime1.set(dateTimeFieldType21, 0);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 0 for dayOfMonth must be in the range [1,28]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(instant13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 22 + "'", int22 == 22);
        org.junit.Assert.assertNotNull(instant25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(localTime28);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 22 + "'", int33 == 22);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 2022 + "'", int34 == 2022);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(dateTimeField41);
    }

    @Test
    public void test07903() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07903");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.Instant instant3 = new org.joda.time.Instant();
        org.joda.time.Instant instant5 = instant3.withMillis(0L);
        org.joda.time.Chronology chronology6 = instant5.getChronology();
        org.joda.time.DurationField durationField7 = chronology6.eras();
        long long11 = chronology6.add(0L, (long) 2022, (int) '4');
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = dateTimeFormatter2.withChronology(chronology6);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = dateTimeFormatter12.withOffsetParsed();
        org.joda.time.Instant instant14 = new org.joda.time.Instant();
        org.joda.time.Instant instant16 = instant14.withMillis(0L);
        org.joda.time.DateTime dateTime17 = instant16.toDateTime();
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((long) 1);
        org.joda.time.PeriodType periodType20 = org.joda.time.PeriodType.months();
        org.joda.time.Period period21 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime17, (org.joda.time.ReadableInstant) dateTime19, periodType20);
        org.joda.time.DateTime.Property property22 = dateTime19.minuteOfDay();
        org.joda.time.DateTime dateTime23 = property22.roundHalfEvenCopy();
        org.joda.time.DateTime dateTime25 = property22.addToCopy(953979L);
        org.joda.time.DateTime dateTime27 = dateTime25.withDayOfYear(3);
        org.joda.time.Duration duration30 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration33 = duration30.withDurationAdded((long) (short) 100, (int) ' ');
        long long34 = duration33.getMillis();
        org.joda.time.Instant instant35 = new org.joda.time.Instant();
        org.joda.time.Instant instant37 = instant35.withMillis(0L);
        org.joda.time.DateTime dateTime38 = instant37.toDateTime();
        org.joda.time.Instant instant39 = new org.joda.time.Instant();
        org.joda.time.Instant instant41 = instant39.withMillis(0L);
        org.joda.time.DateTime dateTime42 = instant41.toDateTime();
        org.joda.time.DateTime dateTime44 = new org.joda.time.DateTime((long) 1);
        org.joda.time.PeriodType periodType45 = org.joda.time.PeriodType.months();
        org.joda.time.Period period46 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime42, (org.joda.time.ReadableInstant) dateTime44, periodType45);
        boolean boolean47 = dateTime38.isBefore((org.joda.time.ReadableInstant) dateTime42);
        int int48 = dateTime42.getDayOfMonth();
        org.joda.time.ReadableInstant readableInstant49 = null;
        org.joda.time.ReadableInstant readableInstant50 = null;
        org.joda.time.PeriodType periodType51 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod52 = new org.joda.time.MutablePeriod(readableInstant49, readableInstant50, periodType51);
        org.joda.time.PeriodType periodType53 = periodType51.withHoursRemoved();
        org.joda.time.MutablePeriod mutablePeriod54 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration33, (org.joda.time.ReadableInstant) dateTime42, periodType51);
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.DateTime dateTime56 = new org.joda.time.DateTime(chronology55);
        org.joda.time.DateTime dateTime58 = dateTime56.plusMinutes(15);
        org.joda.time.Chronology chronology59 = dateTime56.getChronology();
        org.joda.time.Instant instant60 = new org.joda.time.Instant();
        org.joda.time.Instant instant62 = instant60.withMillis(0L);
        org.joda.time.Chronology chronology63 = instant62.getChronology();
        org.joda.time.DurationField durationField64 = chronology63.eras();
        org.joda.time.LocalTime localTime65 = org.joda.time.LocalTime.now(chronology63);
        org.joda.time.DurationField durationField66 = chronology63.eras();
        org.joda.time.DateTimeField dateTimeField67 = chronology63.hourOfDay();
        org.joda.time.DateTime dateTime68 = dateTime56.withChronology(chronology63);
        org.joda.time.MutableDateTime mutableDateTime69 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property70 = mutableDateTime69.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime71 = property70.getMutableDateTime();
        boolean boolean72 = dateTime68.isBefore((org.joda.time.ReadableInstant) mutableDateTime71);
        org.joda.time.Instant instant73 = new org.joda.time.Instant();
        org.joda.time.Instant instant75 = instant73.withMillis(0L);
        org.joda.time.Chronology chronology76 = instant75.getChronology();
        org.joda.time.DurationField durationField77 = chronology76.eras();
        long long81 = chronology76.add(0L, (long) 2022, (int) '4');
        org.joda.time.DateTimeField dateTimeField82 = chronology76.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField83 = chronology76.minuteOfDay();
        mutableDateTime71.setChronology(chronology76);
        org.joda.time.DateTime dateTime85 = dateTime42.toDateTime(chronology76);
        org.joda.time.LocalTime localTime86 = new org.joda.time.LocalTime((long) 99, chronology76);
        boolean boolean87 = dateTime27.equals((java.lang.Object) chronology76);
        org.joda.time.DateTimeZone dateTimeZone88 = chronology76.getZone();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter89 = dateTimeFormatter13.withZone(dateTimeZone88);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter90 = dateTimeFormatter89.withZoneUTC();
        org.joda.time.format.DateTimePrinter dateTimePrinter91 = dateTimeFormatter89.getPrinter();
        org.junit.Assert.assertNotNull(instant5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 105144L + "'", long11 == 105144L);
        org.junit.Assert.assertNotNull(dateTimeFormatter12);
        org.junit.Assert.assertNotNull(dateTimeFormatter13);
        org.junit.Assert.assertNotNull(instant16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(periodType20);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 86403200L + "'", long34 == 86403200L);
        org.junit.Assert.assertNotNull(instant37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(instant41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(periodType45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertNotNull(periodType51);
        org.junit.Assert.assertNotNull(periodType53);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(chronology59);
        org.junit.Assert.assertNotNull(instant62);
        org.junit.Assert.assertNotNull(chronology63);
        org.junit.Assert.assertNotNull(durationField64);
        org.junit.Assert.assertNotNull(localTime65);
        org.junit.Assert.assertNotNull(durationField66);
        org.junit.Assert.assertNotNull(dateTimeField67);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertNotNull(mutableDateTime69);
        org.junit.Assert.assertNotNull(property70);
        org.junit.Assert.assertNotNull(mutableDateTime71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(instant75);
        org.junit.Assert.assertNotNull(chronology76);
        org.junit.Assert.assertNotNull(durationField77);
        org.junit.Assert.assertTrue("'" + long81 + "' != '" + 105144L + "'", long81 == 105144L);
        org.junit.Assert.assertNotNull(dateTimeField82);
        org.junit.Assert.assertNotNull(dateTimeField83);
        org.junit.Assert.assertNotNull(dateTime85);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(dateTimeZone88);
        org.junit.Assert.assertNotNull(dateTimeFormatter89);
        org.junit.Assert.assertNotNull(dateTimeFormatter90);
        org.junit.Assert.assertNull(dateTimePrinter91);
    }

    @Test
    public void test07904() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07904");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        int int2 = dateTime1.getSecondOfMinute();
        boolean boolean3 = dateTime1.isEqualNow();
        int int4 = dateTime1.getDayOfYear();
        int int5 = dateTime1.getHourOfDay();
        org.joda.time.DateTime dateTime7 = dateTime1.plus(960800L);
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.secondOfDay();
        java.lang.String str9 = dateTimeFieldType8.getName();
        int int10 = dateTime1.get(dateTimeFieldType8);
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.PeriodType periodType16 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod17 = new org.joda.time.MutablePeriod(readableInstant14, readableInstant15, periodType16);
        org.joda.time.DurationFieldType durationFieldType19 = periodType16.getFieldType((int) (short) 0);
        java.lang.String str20 = periodType16.toString();
        org.joda.time.Instant instant21 = new org.joda.time.Instant();
        org.joda.time.Instant instant23 = instant21.withMillis(0L);
        org.joda.time.Chronology chronology24 = instant23.getChronology();
        org.joda.time.Period period25 = new org.joda.time.Period((long) 53, (long) (-1), periodType16, chronology24);
        org.joda.time.DateTimeField dateTimeField26 = dateTimeFieldType11.getField(chronology24);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime(chronology27);
        org.joda.time.DateTime dateTime30 = dateTime28.plusMinutes(15);
        org.joda.time.Chronology chronology31 = dateTime28.getChronology();
        java.lang.String str32 = chronology31.toString();
        org.joda.time.DateTimeField dateTimeField33 = dateTimeFieldType11.getField(chronology31);
        org.joda.time.MutableDateTime mutableDateTime34 = new org.joda.time.MutableDateTime((java.lang.Object) dateTime1, chronology31);
        org.joda.time.MutableDateTime mutableDateTime35 = org.joda.time.MutableDateTime.now();
        mutableDateTime35.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime38 = mutableDateTime35.copy();
        org.joda.time.MutableDateTime.Property property39 = mutableDateTime35.weekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime40 = property39.roundHalfFloor();
        org.joda.time.MutableDateTime mutableDateTime41 = property39.roundHalfCeiling();
        org.joda.time.DateTimeField dateTimeField42 = mutableDateTime41.getRoundingField();
        mutableDateTime41.setWeekyear((int) 'a');
        org.joda.time.Duration duration45 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime1, (org.joda.time.ReadableInstant) mutableDateTime41);
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.DateTime dateTime47 = new org.joda.time.DateTime(chronology46);
        org.joda.time.DateTime dateTime49 = dateTime47.plusMinutes(15);
        org.joda.time.Chronology chronology50 = dateTime47.getChronology();
        org.joda.time.Instant instant51 = new org.joda.time.Instant();
        org.joda.time.Instant instant53 = instant51.withMillis(0L);
        org.joda.time.Chronology chronology54 = instant53.getChronology();
        org.joda.time.DurationField durationField55 = chronology54.eras();
        org.joda.time.LocalTime localTime56 = org.joda.time.LocalTime.now(chronology54);
        org.joda.time.DurationField durationField57 = chronology54.eras();
        org.joda.time.DateTimeField dateTimeField58 = chronology54.hourOfDay();
        org.joda.time.DateTime dateTime59 = dateTime47.withChronology(chronology54);
        org.joda.time.MutableDateTime mutableDateTime60 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property61 = mutableDateTime60.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime62 = property61.getMutableDateTime();
        boolean boolean63 = dateTime59.isBefore((org.joda.time.ReadableInstant) mutableDateTime62);
        org.joda.time.Instant instant64 = new org.joda.time.Instant();
        org.joda.time.Instant instant66 = instant64.withMillis(0L);
        org.joda.time.Chronology chronology67 = instant66.getChronology();
        org.joda.time.DurationField durationField68 = chronology67.eras();
        long long72 = chronology67.add(0L, (long) 2022, (int) '4');
        org.joda.time.DateTimeField dateTimeField73 = chronology67.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField74 = chronology67.minuteOfDay();
        mutableDateTime62.setChronology(chronology67);
        mutableDateTime62.setMillisOfSecond((int) '4');
        org.joda.time.ReadableInstant readableInstant78 = null;
        org.joda.time.ReadableInstant readableInstant79 = null;
        org.joda.time.PeriodType periodType80 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod81 = new org.joda.time.MutablePeriod(readableInstant78, readableInstant79, periodType80);
        mutablePeriod81.addDays((int) '4');
        org.joda.time.MutablePeriod mutablePeriod84 = mutablePeriod81.toMutablePeriod();
        mutableDateTime62.add((org.joda.time.ReadablePeriod) mutablePeriod84, 1439);
        mutableDateTime62.setSecondOfDay(100);
        org.joda.time.MutableDateTime.Property property89 = mutableDateTime62.dayOfMonth();
        org.joda.time.DateTimeFieldType dateTimeFieldType90 = property89.getFieldType();
        int int91 = mutableDateTime41.get(dateTimeFieldType90);
        mutableDateTime41.setMillis((-29862722304000000L));
        org.joda.time.MutableDateTime.Property property94 = mutableDateTime41.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime96 = property94.add(0L);
        mutableDateTime96.setWeekyear(22831);
// flaky:         org.junit.Assert.assertTrue("'" + int2 + "' != '" + 59 + "'", int2 == 59);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 53 + "'", int4 == 53);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 7 + "'", int5 == 7);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "secondOfDay" + "'", str9, "secondOfDay");
// flaky:         org.junit.Assert.assertTrue("'" + int10 + "' != '" + 26639 + "'", int10 == 26639);
        org.junit.Assert.assertNotNull(dateTimeFieldType11);
        org.junit.Assert.assertNotNull(periodType16);
        org.junit.Assert.assertNotNull(durationFieldType19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "PeriodType[YearDayTime]" + "'", str20, "PeriodType[YearDayTime]");
        org.junit.Assert.assertNotNull(instant23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "ISOChronology[UTC]" + "'", str32, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(mutableDateTime35);
        org.junit.Assert.assertNotNull(mutableDateTime38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(mutableDateTime40);
        org.junit.Assert.assertNotNull(mutableDateTime41);
        org.junit.Assert.assertNull(dateTimeField42);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertNotNull(instant53);
        org.junit.Assert.assertNotNull(chronology54);
        org.junit.Assert.assertNotNull(durationField55);
        org.junit.Assert.assertNotNull(localTime56);
        org.junit.Assert.assertNotNull(durationField57);
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(mutableDateTime60);
        org.junit.Assert.assertNotNull(property61);
        org.junit.Assert.assertNotNull(mutableDateTime62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(instant66);
        org.junit.Assert.assertNotNull(chronology67);
        org.junit.Assert.assertNotNull(durationField68);
        org.junit.Assert.assertTrue("'" + long72 + "' != '" + 105144L + "'", long72 == 105144L);
        org.junit.Assert.assertNotNull(dateTimeField73);
        org.junit.Assert.assertNotNull(dateTimeField74);
        org.junit.Assert.assertNotNull(periodType80);
        org.junit.Assert.assertNotNull(mutablePeriod84);
        org.junit.Assert.assertNotNull(property89);
        org.junit.Assert.assertNotNull(dateTimeFieldType90);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 18 + "'", int91 == 18);
        org.junit.Assert.assertNotNull(property94);
        org.junit.Assert.assertNotNull(mutableDateTime96);
    }

    @Test
    public void test07905() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07905");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        org.joda.time.DateTime dateTime3 = dateTime1.plusMinutes(15);
        org.joda.time.Chronology chronology4 = dateTime1.getChronology();
        org.joda.time.Instant instant5 = new org.joda.time.Instant();
        org.joda.time.Instant instant7 = instant5.withMillis(0L);
        org.joda.time.Chronology chronology8 = instant7.getChronology();
        org.joda.time.DurationField durationField9 = chronology8.eras();
        org.joda.time.LocalTime localTime10 = org.joda.time.LocalTime.now(chronology8);
        org.joda.time.DurationField durationField11 = chronology8.eras();
        org.joda.time.DateTimeField dateTimeField12 = chronology8.hourOfDay();
        org.joda.time.DateTime dateTime13 = dateTime1.withChronology(chronology8);
        org.joda.time.MutableDateTime mutableDateTime14 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property15 = mutableDateTime14.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime16 = property15.getMutableDateTime();
        boolean boolean17 = dateTime13.isBefore((org.joda.time.ReadableInstant) mutableDateTime16);
        mutableDateTime16.addWeekyears((-1));
        mutableDateTime16.addHours(26150565);
        mutableDateTime16.addYears(54);
        org.joda.time.MutableDateTime.Property property24 = mutableDateTime16.minuteOfHour();
        long long25 = property24.remainder();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(instant7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(mutableDateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(mutableDateTime16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(property24);
// flaky:         org.junit.Assert.assertTrue("'" + long25 + "' != '" + 59405L + "'", long25 == 59405L);
    }

    @Test
    public void test07906() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07906");
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime4 = dateTime2.withZoneRetainFields(dateTimeZone3);
        boolean boolean6 = dateTime4.equals((java.lang.Object) (-1L));
        org.joda.time.Chronology chronology7 = dateTime4.getChronology();
        java.util.Locale locale8 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket10 = new org.joda.time.format.DateTimeParserBucket((long) 1, chronology7, locale8, (java.lang.Integer) 50);
        org.joda.time.DateTimeZone dateTimeZone11 = dateTimeParserBucket10.getZone();
        org.joda.time.LocalTime localTime12 = new org.joda.time.LocalTime(dateTimeZone11);
        org.joda.time.LocalTime localTime14 = localTime12.plusMillis(0);
        org.joda.time.LocalTime localTime16 = localTime12.minusHours(26157);
        org.joda.time.Duration duration20 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration23 = duration20.withDurationAdded((long) (short) 100, (int) ' ');
        long long24 = duration23.getMillis();
        org.joda.time.Instant instant25 = new org.joda.time.Instant();
        org.joda.time.Instant instant27 = instant25.withMillis(0L);
        org.joda.time.DateTime dateTime28 = instant27.toDateTime();
        org.joda.time.Instant instant29 = new org.joda.time.Instant();
        org.joda.time.Instant instant31 = instant29.withMillis(0L);
        org.joda.time.DateTime dateTime32 = instant31.toDateTime();
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime((long) 1);
        org.joda.time.PeriodType periodType35 = org.joda.time.PeriodType.months();
        org.joda.time.Period period36 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime32, (org.joda.time.ReadableInstant) dateTime34, periodType35);
        boolean boolean37 = dateTime28.isBefore((org.joda.time.ReadableInstant) dateTime32);
        int int38 = dateTime32.getDayOfMonth();
        org.joda.time.ReadableInstant readableInstant39 = null;
        org.joda.time.ReadableInstant readableInstant40 = null;
        org.joda.time.PeriodType periodType41 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod42 = new org.joda.time.MutablePeriod(readableInstant39, readableInstant40, periodType41);
        org.joda.time.PeriodType periodType43 = periodType41.withHoursRemoved();
        org.joda.time.MutablePeriod mutablePeriod44 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration23, (org.joda.time.ReadableInstant) dateTime32, periodType41);
        org.joda.time.Period period45 = new org.joda.time.Period(0L, 24L, periodType41);
        boolean boolean46 = localTime16.equals((java.lang.Object) periodType41);
        org.joda.time.Chronology chronology47 = localTime16.getChronology();
        org.joda.time.DateTimeZone dateTimeZone49 = org.joda.time.DateTimeZone.UTC;
        java.util.Locale locale51 = java.util.Locale.GERMAN;
        java.lang.String str52 = locale51.getDisplayName();
        java.lang.String str53 = dateTimeZone49.getName(100L, locale51);
        org.joda.time.MutableDateTime mutableDateTime54 = new org.joda.time.MutableDateTime(948227L, dateTimeZone49);
        org.joda.time.MutableDateTime.Property property55 = mutableDateTime54.year();
        org.joda.time.ReadableInstant readableInstant56 = null;
        mutableDateTime54.setMillis(readableInstant56);
        mutableDateTime54.setMillisOfDay(54);
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.DateTime dateTime61 = new org.joda.time.DateTime(chronology60);
        int int62 = dateTime61.getYearOfCentury();
        int int63 = dateTime61.getWeekyear();
        org.joda.time.DateTime dateTime65 = dateTime61.plus((long) 15);
        org.joda.time.DateTime.Property property66 = dateTime61.year();
        org.joda.time.DateTime dateTime68 = property66.addToCopy((long) 25);
        org.joda.time.DateTime dateTime69 = property66.roundCeilingCopy();
        org.joda.time.MutableDateTime mutableDateTime70 = org.joda.time.MutableDateTime.now();
        java.lang.Object obj71 = mutableDateTime70.clone();
        mutableDateTime70.setTime((long) 46);
        org.joda.time.MutableDateTime.Property property74 = mutableDateTime70.dayOfWeek();
        int int75 = mutableDateTime70.getMinuteOfDay();
        boolean boolean76 = dateTime69.isEqual((org.joda.time.ReadableInstant) mutableDateTime70);
        int int77 = dateTime69.getYearOfCentury();
        boolean boolean78 = mutableDateTime54.isAfter((org.joda.time.ReadableInstant) dateTime69);
        org.joda.time.DateTime dateTime80 = dateTime69.plusWeeks(26345);
        org.joda.time.Chronology chronology81 = dateTime69.getChronology();
        org.joda.time.LocalTime localTime82 = new org.joda.time.LocalTime((java.lang.Object) localTime16, chronology81);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 86403200L + "'", long24 == 86403200L);
        org.junit.Assert.assertNotNull(instant27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(instant31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(periodType35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertNotNull(periodType41);
        org.junit.Assert.assertNotNull(periodType43);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertNotNull(dateTimeZone49);
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "de");
// flaky:         org.junit.Assert.assertEquals("'" + str52 + "' != '" + "\u5fb7\u6587" + "'", str52, "\u5fb7\u6587");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "+00:00" + "'", str53, "+00:00");
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 22 + "'", int62 == 22);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 2022 + "'", int63 == 2022);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(property66);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(mutableDateTime70);
        org.junit.Assert.assertNotNull(obj71);
// flaky:         org.junit.Assert.assertEquals(obj71.toString(), "2022-02-22T07:23:59.416Z");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj71), "2022-02-22T07:23:59.416Z");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj71), "2022-02-22T07:23:59.416Z");
        org.junit.Assert.assertNotNull(property74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 23 + "'", int77 == 23);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(dateTime80);
        org.junit.Assert.assertNotNull(chronology81);
    }

    @Test
    public void test07907() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07907");
        org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod((long) (short) -1, 3155695200000L);
        mutablePeriod2.clear();
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period6 = duration5.toPeriod();
        org.joda.time.Duration duration9 = duration5.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime(chronology10);
        org.joda.time.DateTime dateTime13 = dateTime11.plusMinutes(15);
        org.joda.time.Interval interval14 = duration9.toIntervalTo((org.joda.time.ReadableInstant) dateTime13);
        mutablePeriod2.setPeriod((org.joda.time.ReadableInterval) interval14);
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.PeriodType periodType18 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod19 = new org.joda.time.MutablePeriod(readableInstant16, readableInstant17, periodType18);
        org.joda.time.DurationFieldType durationFieldType21 = periodType18.getFieldType((int) (short) 0);
        int int22 = mutablePeriod2.get(durationFieldType21);
        org.joda.time.Duration duration24 = org.joda.time.Duration.standardHours((long) 52);
        org.joda.time.MutableDateTime mutableDateTime25 = org.joda.time.MutableDateTime.now();
        mutableDateTime25.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime28 = mutableDateTime25.copy();
        org.joda.time.MutableDateTime.Property property29 = mutableDateTime25.yearOfEra();
        org.joda.time.MutablePeriod mutablePeriod30 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration24, (org.joda.time.ReadableInstant) mutableDateTime25);
        org.joda.time.Instant instant31 = new org.joda.time.Instant();
        org.joda.time.Instant instant33 = instant31.withMillis(0L);
        org.joda.time.Chronology chronology34 = instant33.getChronology();
        org.joda.time.DurationField durationField35 = chronology34.eras();
        org.joda.time.LocalTime localTime36 = org.joda.time.LocalTime.now(chronology34);
        org.joda.time.DurationField durationField37 = chronology34.eras();
        mutablePeriod2.setPeriod((org.joda.time.ReadableDuration) duration24, chronology34);
        org.joda.time.DateTimeField dateTimeField39 = chronology34.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField40 = chronology34.weekyearOfCentury();
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.LocalTime localTime43 = new org.joda.time.LocalTime((long) (short) 100, chronology42);
        int int44 = localTime43.getMillisOfDay();
        org.joda.time.LocalTime.Property property45 = localTime43.millisOfSecond();
        org.joda.time.DurationField durationField46 = property45.getLeapDurationField();
        java.lang.String str47 = property45.getName();
        org.joda.time.LocalTime localTime49 = property45.addWrapFieldToCopy(0);
        org.joda.time.LocalTime localTime50 = property45.getLocalTime();
        int int51 = localTime50.getMinuteOfHour();
        int int52 = dateTimeField40.getMaximumValue((org.joda.time.ReadablePartial) localTime50);
        java.lang.String str53 = dateTimeField40.getName();
        org.joda.time.LocalDateTime localDateTime55 = new org.joda.time.LocalDateTime(1056868L);
        org.joda.time.LocalDateTime localDateTime57 = localDateTime55.plusDays(290);
        org.joda.time.ReadableDuration readableDuration59 = null;
        org.joda.time.ReadableInstant readableInstant60 = null;
        org.joda.time.Period period61 = new org.joda.time.Period(readableDuration59, readableInstant60);
        org.joda.time.PeriodType periodType64 = null;
        org.joda.time.Period period65 = new org.joda.time.Period((long) 100, 1L, periodType64);
        org.joda.time.Period period67 = period65.minusSeconds((-1));
        java.lang.String str68 = period65.toString();
        org.joda.time.Period period69 = period65.toPeriod();
        org.joda.time.PeriodType periodType70 = period65.getPeriodType();
        org.joda.time.Period period71 = period61.normalizedStandard(periodType70);
        int int72 = period71.getWeeks();
        int[] intArray73 = period71.getValues();
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray75 = dateTimeField40.set((org.joda.time.ReadablePartial) localDateTime57, 37242433, intArray73, 26223641);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26223641 for weekyearOfCentury must be in the range [0,99]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(periodType18);
        org.junit.Assert.assertNotNull(durationFieldType21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertNotNull(mutableDateTime25);
        org.junit.Assert.assertNotNull(mutableDateTime28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(instant33);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(durationField35);
        org.junit.Assert.assertNotNull(localTime36);
        org.junit.Assert.assertNotNull(durationField37);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 100 + "'", int44 == 100);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNull(durationField46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "millisOfSecond" + "'", str47, "millisOfSecond");
        org.junit.Assert.assertNotNull(localTime49);
        org.junit.Assert.assertNotNull(localTime50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 99 + "'", int52 == 99);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "weekyearOfCentury" + "'", str53, "weekyearOfCentury");
        org.junit.Assert.assertNotNull(localDateTime57);
        org.junit.Assert.assertNotNull(period67);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "PT0.099S" + "'", str68, "PT0.099S");
        org.junit.Assert.assertNotNull(period69);
        org.junit.Assert.assertNotNull(periodType70);
        org.junit.Assert.assertNotNull(period71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[0, 0, 0, 0, 0, 0, 0, 0]");
    }

    @Test
    public void test07908() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07908");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.UTC;
        java.util.TimeZone timeZone3 = dateTimeZone2.toTimeZone();
        org.joda.time.DateTime dateTime4 = localDate0.toDateTimeAtCurrentTime(dateTimeZone2);
        org.joda.time.MutableDateTime mutableDateTime5 = org.joda.time.MutableDateTime.now(dateTimeZone2);
        int int6 = mutableDateTime5.getDayOfMonth();
        int int7 = mutableDateTime5.getMonthOfYear();
        org.joda.time.MutableDateTime.Property property8 = mutableDateTime5.monthOfYear();
        int int9 = mutableDateTime5.getHourOfDay();
        boolean boolean11 = mutableDateTime5.isEqual(56014844400000L);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime5.setMinuteOfHour(26150);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26150 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(timeZone3);
// flaky:         org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "\u534f\u8c03\u4e16\u754c\u65f6\u95f4");
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(mutableDateTime5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 22 + "'", int6 == 22);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2 + "'", int7 == 2);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 7 + "'", int9 == 7);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test07909() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07909");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) (short) -1);
        mutableDateTime1.setSecondOfMinute(53);
        int int4 = mutableDateTime1.getEra();
        mutableDateTime1.setHourOfDay((int) (byte) 1);
        org.joda.time.MutableDateTime.Property property7 = mutableDateTime1.secondOfDay();
        int int8 = mutableDateTime1.getDayOfYear();
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime1.centuryOfEra();
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.PeriodType periodType19 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod20 = new org.joda.time.MutablePeriod(readableInstant17, readableInstant18, periodType19);
        org.joda.time.DurationFieldType durationFieldType22 = periodType19.getFieldType((int) (short) 0);
        java.lang.String str23 = periodType19.toString();
        org.joda.time.Instant instant24 = new org.joda.time.Instant();
        org.joda.time.Instant instant26 = instant24.withMillis(0L);
        org.joda.time.Chronology chronology27 = instant26.getChronology();
        org.joda.time.Period period28 = new org.joda.time.Period((long) 53, (long) (-1), periodType19, chronology27);
        org.joda.time.Period period29 = new org.joda.time.Period((long) (short) -1, (long) 26148950, periodType19);
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.LocalTime localTime33 = new org.joda.time.LocalTime(dateTimeZone32);
        org.joda.time.LocalTime localTime35 = localTime33.minusHours((int) (byte) 100);
        org.joda.time.Chronology chronology36 = localTime35.getChronology();
        org.joda.time.MutablePeriod mutablePeriod37 = new org.joda.time.MutablePeriod((long) 45, 949680L, chronology36);
        org.joda.time.DateTimeField dateTimeField38 = chronology36.millisOfDay();
        org.joda.time.Period period39 = new org.joda.time.Period(3155760000000L, periodType19, chronology36);
        org.joda.time.MutablePeriod mutablePeriod40 = new org.joda.time.MutablePeriod((long) (byte) 0, (long) (short) 100, periodType19);
        org.joda.time.Duration duration42 = org.joda.time.Duration.standardDays((-9571L));
        org.joda.time.Duration duration44 = org.joda.time.Duration.standardMinutes(1L);
        org.joda.time.Period period45 = duration44.toPeriod();
        org.joda.time.Duration duration46 = duration42.minus((org.joda.time.ReadableDuration) duration44);
        mutablePeriod40.setPeriod((org.joda.time.ReadableDuration) duration42);
        org.joda.time.Period period48 = duration42.toPeriod();
        org.joda.time.Period period49 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime1, (org.joda.time.ReadableDuration) duration42);
        mutableDateTime1.addDays(26301);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 365 + "'", int8 == 365);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(periodType19);
        org.junit.Assert.assertNotNull(durationFieldType22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "PeriodType[YearDayTime]" + "'", str23, "PeriodType[YearDayTime]");
        org.junit.Assert.assertNotNull(instant26);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(localTime35);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(duration42);
        org.junit.Assert.assertNotNull(duration44);
        org.junit.Assert.assertNotNull(period45);
        org.junit.Assert.assertNotNull(duration46);
        org.junit.Assert.assertNotNull(period48);
    }

    @Test
    public void test07910() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07910");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.monthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.minuteOfDay();
        boolean boolean3 = localDate0.isSupported(dateTimeFieldType2);
        org.joda.time.LocalDate.Property property4 = localDate0.dayOfWeek();
        org.joda.time.MutableDateTime mutableDateTime5 = org.joda.time.MutableDateTime.now();
        mutableDateTime5.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime8 = mutableDateTime5.copy();
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime5.weekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime10 = property9.roundHalfFloor();
        org.joda.time.MutableDateTime mutableDateTime11 = property9.roundHalfCeiling();
        org.joda.time.MutableDateTime mutableDateTime13 = property9.set(1);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime(chronology14);
        int int16 = dateTime15.getYearOfCentury();
        int int17 = dateTime15.getWeekyear();
        org.joda.time.DateTime dateTime18 = dateTime15.withEarlierOffsetAtOverlap();
        java.lang.String str19 = dateTime18.toString();
        org.joda.time.MutableDateTime mutableDateTime20 = dateTime18.toMutableDateTime();
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.UTC;
        boolean boolean22 = dateTimeZone21.isFixed();
        mutableDateTime20.setZoneRetainFields(dateTimeZone21);
        org.joda.time.MutableDateTime mutableDateTime24 = mutableDateTime13.toMutableDateTime(dateTimeZone21);
        org.joda.time.LocalDate localDate25 = org.joda.time.LocalDate.now(dateTimeZone21);
        java.lang.Object obj27 = null;
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime(obj27);
        org.joda.time.Duration duration30 = org.joda.time.Duration.standardSeconds((long) 45);
        org.joda.time.Period period31 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime28, (org.joda.time.ReadableDuration) duration30);
        org.joda.time.LocalDate localDate32 = dateTime28.toLocalDate();
        org.joda.time.LocalDate.Property property33 = localDate32.dayOfMonth();
        java.util.Date date34 = localDate32.toDate();
        org.joda.time.LocalDate.Property property35 = localDate32.dayOfYear();
        java.util.Locale locale36 = java.util.Locale.GERMAN;
        java.lang.String str37 = property35.getAsText(locale36);
        java.lang.String str38 = dateTimeZone21.getShortName(360000000L, locale36);
        java.lang.String str39 = property4.getAsText(locale36);
        java.util.Set<java.lang.String> strSet40 = locale36.getUnicodeLocaleKeys();
        java.util.List<java.util.Locale.LanguageRange> languageRangeList42 = java.util.Locale.LanguageRange.parse("German");
        boolean boolean43 = strSet40.retainAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList42);
        java.lang.Object[] objArray44 = strSet40.toArray();
        org.joda.time.Chronology chronology46 = null;
        java.util.Locale locale47 = java.util.Locale.GERMAN;
        java.util.Locale locale48 = java.util.Locale.CANADA;
        java.lang.String str49 = locale47.getDisplayVariant(locale48);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket50 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology46, locale48);
        java.lang.Object obj51 = dateTimeParserBucket50.saveState();
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.LocalTime localTime54 = new org.joda.time.LocalTime((long) (short) 100, chronology53);
        org.joda.time.DurationFieldType durationFieldType55 = org.joda.time.DurationFieldType.weeks();
        java.lang.String str56 = durationFieldType55.getName();
        boolean boolean57 = localTime54.isSupported(durationFieldType55);
        boolean boolean58 = dateTimeParserBucket50.restoreState((java.lang.Object) boolean57);
        org.joda.time.Chronology chronology59 = dateTimeParserBucket50.getChronology();
        java.lang.Integer int60 = dateTimeParserBucket50.getPivotYear();
        dateTimeParserBucket50.setPivotYear((java.lang.Integer) 26175498);
        dateTimeParserBucket50.setOffset((java.lang.Integer) 26209742);
        org.joda.time.DateTimeZone dateTimeZone65 = dateTimeParserBucket50.getZone();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime66 = new org.joda.time.LocalTime((java.lang.Object) strSet40, dateTimeZone65);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: java.util.Collections$EmptySet");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(mutableDateTime5);
        org.junit.Assert.assertNotNull(mutableDateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(mutableDateTime10);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertNotNull(mutableDateTime13);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 22 + "'", int16 == 22);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2022 + "'", int17 == 2022);
        org.junit.Assert.assertNotNull(dateTime18);
// flaky:         org.junit.Assert.assertEquals("'" + str19 + "' != '" + "2022-02-22T07:23:59.546Z" + "'", str19, "2022-02-22T07:23:59.546Z");
        org.junit.Assert.assertNotNull(mutableDateTime20);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(mutableDateTime24);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertNotNull(localDate32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Tue Feb 22 00:00:00 GMT 2022");
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "de");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "53" + "'", str37, "53");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "+00:00" + "'", str38, "+00:00");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "Dienstag" + "'", str39, "Dienstag");
        org.junit.Assert.assertNotNull(strSet40);
        org.junit.Assert.assertNotNull(languageRangeList42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(objArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray44), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray44), "[]");
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "de");
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertNotNull(obj51);
        org.junit.Assert.assertNotNull(durationFieldType55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "weeks" + "'", str56, "weeks");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(chronology59);
        org.junit.Assert.assertNull(int60);
        org.junit.Assert.assertNotNull(dateTimeZone65);
    }

    @Test
    public void test07911() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07911");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) (short) -1);
        mutableDateTime1.setSecondOfMinute(53);
        int int4 = mutableDateTime1.getEra();
        org.joda.time.DateTimeField dateTimeField5 = mutableDateTime1.getRoundingField();
        org.joda.time.MutableDateTime.Property property6 = mutableDateTime1.yearOfCentury();
        java.util.Locale locale7 = java.util.Locale.GERMAN;
        java.util.Locale locale8 = java.util.Locale.CANADA;
        java.lang.String str9 = locale7.getDisplayVariant(locale8);
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.UTC;
        java.util.Locale locale12 = java.util.Locale.GERMAN;
        java.lang.String str13 = locale12.getDisplayName();
        java.lang.String str14 = dateTimeZone10.getName(100L, locale12);
        java.lang.String str15 = locale8.getDisplayScript(locale12);
        boolean boolean16 = mutableDateTime1.equals((java.lang.Object) locale12);
        mutableDateTime1.addDays(26184);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNull(dateTimeField5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "de");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "de");
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "\u5fb7\u6587" + "'", str13, "\u5fb7\u6587");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "+00:00" + "'", str14, "+00:00");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test07912() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07912");
        org.joda.time.Period period1 = org.joda.time.Period.months(53);
        org.joda.time.MutableDateTime mutableDateTime2 = org.joda.time.MutableDateTime.now();
        mutableDateTime2.add((long) 'a');
        org.joda.time.Instant instant5 = new org.joda.time.Instant();
        org.joda.time.Instant instant7 = instant5.withMillis(0L);
        org.joda.time.DateTime dateTime8 = instant7.toDateTime();
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) 1);
        org.joda.time.PeriodType periodType11 = org.joda.time.PeriodType.months();
        org.joda.time.Period period12 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime8, (org.joda.time.ReadableInstant) dateTime10, periodType11);
        org.joda.time.DateTime.Property property13 = dateTime10.minuteOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = property13.getFieldType();
        org.joda.time.MutableDateTime.Property property15 = mutableDateTime2.property(dateTimeFieldType14);
        org.joda.time.Instant instant17 = new org.joda.time.Instant();
        org.joda.time.Instant instant19 = instant17.withMillis(0L);
        org.joda.time.Duration duration21 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period22 = duration21.toPeriod();
        org.joda.time.Duration duration25 = duration21.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Instant instant26 = instant19.plus((org.joda.time.ReadableDuration) duration25);
        long long27 = instant26.getMillis();
        org.joda.time.Chronology chronology28 = instant26.getChronology();
        org.joda.time.DurationField durationField29 = chronology28.months();
        org.joda.time.Period period30 = new org.joda.time.Period((-205878993L), chronology28);
        org.joda.time.DateTimeField dateTimeField31 = chronology28.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone32 = chronology28.getZone();
        org.joda.time.LocalTime localTime33 = new org.joda.time.LocalTime((java.lang.Object) mutableDateTime2, chronology28);
        mutableDateTime2.addSeconds(152);
        mutableDateTime2.addDays(57);
        org.joda.time.Duration duration38 = period1.toDurationFrom((org.joda.time.ReadableInstant) mutableDateTime2);
        java.util.Date date39 = mutableDateTime2.toDate();
        mutableDateTime2.addSeconds(0);
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(mutableDateTime2);
        org.junit.Assert.assertNotNull(instant7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(periodType11);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(instant19);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertNotNull(instant26);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 86400000L + "'", long27 == 86400000L);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertNotNull(date39);
// flaky:         org.junit.Assert.assertEquals(date39.toString(), "Wed Apr 20 07:26:31 GMT 2022");
    }

    @Test
    public void test07913() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07913");
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.parse("2022-02-22T07:17:38.454Z");
        org.joda.time.format.DateTimePrinter dateTimePrinter2 = null;
        org.joda.time.format.DateTimeParser dateTimeParser3 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter2, dateTimeParser3);
        org.joda.time.Instant instant5 = new org.joda.time.Instant();
        org.joda.time.Instant instant7 = instant5.withMillis(0L);
        org.joda.time.Chronology chronology8 = instant7.getChronology();
        org.joda.time.DurationField durationField9 = chronology8.eras();
        long long13 = chronology8.add(0L, (long) 2022, (int) '4');
        org.joda.time.format.DateTimeFormatter dateTimeFormatter14 = dateTimeFormatter4.withChronology(chronology8);
        org.joda.time.Chronology chronology15 = dateTimeFormatter4.getChronolgy();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter17 = dateTimeFormatter4.withDefaultYear(999);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter19 = dateTimeFormatter4.withDefaultYear((int) ' ');
        org.joda.time.format.DateTimeFormatter dateTimeFormatter21 = dateTimeFormatter4.withPivotYear(56);
        org.joda.time.format.DateTimePrinter dateTimePrinter22 = dateTimeFormatter21.getPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter24 = dateTimeFormatter21.withDefaultYear((int) (short) 1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter25 = dateTimeFormatter24.withOffsetParsed();
        org.joda.time.LocalDateTime localDateTime26 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime28 = localDateTime26.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime30 = localDateTime28.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime32 = localDateTime30.withCenturyOfEra((int) 'a');
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime(chronology33);
        org.joda.time.DateTime dateTime36 = dateTime34.plusMinutes(15);
        org.joda.time.DateTime dateTime37 = localDateTime30.toDateTime((org.joda.time.ReadableInstant) dateTime34);
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime39 = localDateTime30.toDateTime(dateTimeZone38);
        org.joda.time.DateTime dateTime41 = dateTime39.withMinuteOfHour(46);
        org.joda.time.DateTimeZone dateTimeZone42 = dateTime41.getZone();
        java.lang.String str44 = dateTimeZone42.getShortName((long) ' ');
        org.joda.time.format.DateTimeFormatter dateTimeFormatter45 = dateTimeFormatter24.withZone(dateTimeZone42);
        org.joda.time.DateTimeZone dateTimeZone46 = dateTimeFormatter45.getZone();
        org.joda.time.Chronology chronology48 = null;
        java.util.Locale locale49 = java.util.Locale.GERMAN;
        java.util.Locale locale50 = java.util.Locale.CANADA;
        java.lang.String str51 = locale49.getDisplayVariant(locale50);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket52 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology48, locale50);
        java.lang.Object obj53 = dateTimeParserBucket52.saveState();
        org.joda.time.DateTimeZone dateTimeZone54 = dateTimeParserBucket52.getZone();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter55 = dateTimeFormatter45.withZone(dateTimeZone54);
        mutableDateTime1.setZoneRetainFields(dateTimeZone54);
        mutableDateTime1.setYear(133);
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(instant7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 105144L + "'", long13 == 105144L);
        org.junit.Assert.assertNotNull(dateTimeFormatter14);
        org.junit.Assert.assertNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeFormatter17);
        org.junit.Assert.assertNotNull(dateTimeFormatter19);
        org.junit.Assert.assertNotNull(dateTimeFormatter21);
        org.junit.Assert.assertNull(dateTimePrinter22);
        org.junit.Assert.assertNotNull(dateTimeFormatter24);
        org.junit.Assert.assertNotNull(dateTimeFormatter25);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "+00:00" + "'", str44, "+00:00");
        org.junit.Assert.assertNotNull(dateTimeFormatter45);
        org.junit.Assert.assertNotNull(dateTimeZone46);
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "de");
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertNotNull(obj53);
        org.junit.Assert.assertNotNull(dateTimeZone54);
        org.junit.Assert.assertNotNull(dateTimeFormatter55);
    }

    @Test
    public void test07914() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07914");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.add((long) 'a');
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime0.yearOfCentury();
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period6 = duration5.toPeriod();
        org.joda.time.Duration duration8 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration11 = duration8.withDurationAdded((long) (short) 100, (int) ' ');
        org.joda.time.Duration duration12 = duration5.minus((org.joda.time.ReadableDuration) duration11);
        mutableDateTime0.add((org.joda.time.ReadableDuration) duration5);
        org.joda.time.MutableDateTime.Property property14 = mutableDateTime0.centuryOfEra();
        mutableDateTime0.addHours((int) (byte) 10);
        mutableDateTime0.addWeeks(20);
        org.joda.time.DateTimeField dateTimeField19 = mutableDateTime0.getRoundingField();
        org.joda.time.MutableDateTime mutableDateTime20 = org.joda.time.MutableDateTime.now();
        java.lang.Object obj21 = mutableDateTime20.clone();
        mutableDateTime20.setTime((long) 46);
        org.joda.time.MutableDateTime.Property property24 = mutableDateTime20.dayOfWeek();
        org.joda.time.MutableDateTime mutableDateTime26 = property24.add(1L);
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.UTC;
        java.util.TimeZone timeZone28 = dateTimeZone27.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.UTC;
        long long31 = dateTimeZone27.getMillisKeepLocal(dateTimeZone29, (long) 44);
        org.joda.time.DateTime dateTime32 = org.joda.time.DateTime.now(dateTimeZone27);
        mutableDateTime26.setZoneRetainFields(dateTimeZone27);
        mutableDateTime26.addSeconds((int) (short) 10);
        java.lang.Object obj36 = mutableDateTime26.clone();
        org.joda.time.MutableDateTime.Property property37 = mutableDateTime26.era();
        boolean boolean38 = mutableDateTime0.isAfter((org.joda.time.ReadableInstant) mutableDateTime26);
        org.joda.time.LocalDateTime localDateTime39 = new org.joda.time.LocalDateTime((java.lang.Object) mutableDateTime26);
        mutableDateTime26.addMillis(233);
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNull(dateTimeField19);
        org.junit.Assert.assertNotNull(mutableDateTime20);
        org.junit.Assert.assertNotNull(obj21);
// flaky:         org.junit.Assert.assertEquals(obj21.toString(), "2022-02-22T07:23:59.681Z");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj21), "2022-02-22T07:23:59.681Z");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj21), "2022-02-22T07:23:59.681Z");
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(mutableDateTime26);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertNotNull(timeZone28);
// flaky:         org.junit.Assert.assertEquals(timeZone28.getDisplayName(), "\u534f\u8c03\u4e16\u754c\u65f6\u95f4");
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 44L + "'", long31 == 44L);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(obj36);
        org.junit.Assert.assertEquals(obj36.toString(), "2022-02-23T00:00:10.046Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj36), "2022-02-23T00:00:10.046Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj36), "2022-02-23T00:00:10.046Z");
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
    }

    @Test
    public void test07915() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07915");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.monthOfYear();
        org.joda.time.DateTimeField dateTimeField2 = property1.getField();
        org.joda.time.LocalDate localDate3 = property1.withMaximumValue();
        java.util.Date date4 = localDate3.toDate();
        org.joda.time.LocalDate localDate6 = localDate3.minusMonths((int) ' ');
        org.joda.time.LocalDate localDate8 = localDate6.withYear(1973);
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property10 = localDate9.monthOfYear();
        org.joda.time.DateTimeField dateTimeField11 = property10.getField();
        org.joda.time.LocalDate localDate12 = property10.roundCeilingCopy();
        org.joda.time.LocalDate localDate14 = localDate12.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDate localDate16 = localDate12.withWeekOfWeekyear(46);
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.ReadableInstant readableInstant19 = null;
        org.joda.time.Period period20 = new org.joda.time.Period(readableDuration18, readableInstant19);
        org.joda.time.PeriodType periodType23 = null;
        org.joda.time.Period period24 = new org.joda.time.Period((long) 100, 1L, periodType23);
        org.joda.time.Period period26 = period24.minusSeconds((-1));
        java.lang.String str27 = period24.toString();
        org.joda.time.Period period28 = period24.toPeriod();
        org.joda.time.PeriodType periodType29 = period24.getPeriodType();
        org.joda.time.Period period30 = period20.normalizedStandard(periodType29);
        org.joda.time.Instant instant31 = new org.joda.time.Instant();
        org.joda.time.Instant instant33 = instant31.withMillis(0L);
        org.joda.time.Chronology chronology34 = instant33.getChronology();
        org.joda.time.DurationField durationField35 = chronology34.eras();
        long long39 = chronology34.add(0L, (long) 2022, (int) '4');
        org.joda.time.DateTimeField dateTimeField40 = chronology34.secondOfMinute();
        org.joda.time.MutablePeriod mutablePeriod41 = new org.joda.time.MutablePeriod(44L, periodType29, chronology34);
        org.joda.time.LocalDate localDate43 = localDate16.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod41, (int) (byte) 1);
        int int44 = localDate43.getDayOfWeek();
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime(chronology45);
        int int47 = dateTime46.getYearOfCentury();
        int int48 = dateTime46.getWeekyear();
        org.joda.time.DateTime dateTime49 = dateTime46.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime.Property property50 = dateTime46.yearOfEra();
        org.joda.time.DateTime dateTime51 = property50.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime53 = property50.setCopy(1424);
        org.joda.time.DateTimeZone dateTimeZone54 = dateTime53.getZone();
        org.joda.time.DateTime dateTime55 = localDate43.toDateTimeAtCurrentTime(dateTimeZone54);
        org.joda.time.DateTime dateTime56 = localDate8.toDateTimeAtCurrentTime(dateTimeZone54);
        org.joda.time.LocalDate.Property property57 = localDate8.monthOfYear();
        org.joda.time.LocalDate localDate59 = localDate8.minusDays(62243);
        int int60 = localDate8.getYear();
        org.joda.time.ReadableInstant readableInstant63 = null;
        org.joda.time.ReadableInstant readableInstant64 = null;
        org.joda.time.PeriodType periodType65 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod66 = new org.joda.time.MutablePeriod(readableInstant63, readableInstant64, periodType65);
        org.joda.time.DurationFieldType durationFieldType68 = periodType65.getFieldType((int) (short) 0);
        java.lang.String str69 = periodType65.toString();
        org.joda.time.Instant instant70 = new org.joda.time.Instant();
        org.joda.time.Instant instant72 = instant70.withMillis(0L);
        org.joda.time.Chronology chronology73 = instant72.getChronology();
        org.joda.time.Period period74 = new org.joda.time.Period((long) 53, (long) (-1), periodType65, chronology73);
        org.joda.time.DateTimeField dateTimeField75 = chronology73.weekyearOfCentury();
        int int77 = dateTimeField75.get((long) 1898);
        org.joda.time.LocalDate localDate78 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property79 = localDate78.monthOfYear();
        org.joda.time.LocalDate localDate80 = property79.roundFloorCopy();
        org.joda.time.DateTime dateTime81 = localDate80.toDateTimeAtMidnight();
        org.joda.time.Chronology chronology84 = null;
        java.util.Locale locale85 = java.util.Locale.GERMAN;
        java.util.Locale locale86 = java.util.Locale.CANADA;
        java.lang.String str87 = locale85.getDisplayVariant(locale86);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket88 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology84, locale86);
        java.lang.String str89 = locale86.getDisplayScript();
        java.util.Locale locale90 = locale86.stripExtensions();
        java.lang.String str91 = locale90.getDisplayVariant();
        java.lang.String str92 = dateTimeField75.getAsShortText((org.joda.time.ReadablePartial) localDate80, 62262, locale90);
        org.joda.time.DateTimeFieldType dateTimeFieldType93 = dateTimeField75.getType();
        org.joda.time.LocalDate.Property property94 = localDate8.property(dateTimeFieldType93);
        int int95 = localDate8.getYearOfEra();
        org.joda.time.LocalDate.Property property96 = localDate8.era();
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(date4);
        org.junit.Assert.assertEquals(date4.toString(), "Thu Dec 22 00:00:00 GMT 2022");
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "PT0.099S" + "'", str27, "PT0.099S");
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(periodType29);
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertNotNull(instant33);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(durationField35);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 105144L + "'", long39 == 105144L);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(localDate43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 2 + "'", int44 == 2);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 22 + "'", int47 == 22);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 2022 + "'", int48 == 2022);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(dateTimeZone54);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertNotNull(localDate59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 1973 + "'", int60 == 1973);
        org.junit.Assert.assertNotNull(periodType65);
        org.junit.Assert.assertNotNull(durationFieldType68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "PeriodType[YearDayTime]" + "'", str69, "PeriodType[YearDayTime]");
        org.junit.Assert.assertNotNull(instant72);
        org.junit.Assert.assertNotNull(chronology73);
        org.junit.Assert.assertNotNull(dateTimeField75);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 70 + "'", int77 == 70);
        org.junit.Assert.assertNotNull(property79);
        org.junit.Assert.assertNotNull(localDate80);
        org.junit.Assert.assertNotNull(dateTime81);
        org.junit.Assert.assertNotNull(locale85);
        org.junit.Assert.assertEquals(locale85.toString(), "de");
        org.junit.Assert.assertNotNull(locale86);
        org.junit.Assert.assertEquals(locale86.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "" + "'", str87, "");
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "" + "'", str89, "");
        org.junit.Assert.assertNotNull(locale90);
        org.junit.Assert.assertEquals(locale90.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "" + "'", str91, "");
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "62262" + "'", str92, "62262");
        org.junit.Assert.assertNotNull(dateTimeFieldType93);
        org.junit.Assert.assertNotNull(property94);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 1973 + "'", int95 == 1973);
        org.junit.Assert.assertNotNull(property96);
    }

    @Test
    public void test07916() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07916");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = java.util.Locale.GERMAN;
        java.util.Locale locale3 = java.util.Locale.CANADA;
        java.lang.String str4 = locale2.getDisplayVariant(locale3);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology1, locale3);
        java.lang.Object obj6 = dateTimeParserBucket5.saveState();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.LocalTime localTime9 = new org.joda.time.LocalTime((long) (short) 100, chronology8);
        org.joda.time.DurationFieldType durationFieldType10 = org.joda.time.DurationFieldType.weeks();
        java.lang.String str11 = durationFieldType10.getName();
        boolean boolean12 = localTime9.isSupported(durationFieldType10);
        boolean boolean13 = dateTimeParserBucket5.restoreState((java.lang.Object) boolean12);
        org.joda.time.Chronology chronology14 = dateTimeParserBucket5.getChronology();
        org.joda.time.MutableDateTime mutableDateTime15 = new org.joda.time.MutableDateTime(chronology14);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime((long) 1, chronology17);
        int int19 = dateTime18.getMinuteOfDay();
        int int20 = dateTime18.getEra();
        org.joda.time.Chronology chronology21 = dateTime18.getChronology();
        boolean boolean22 = mutableDateTime15.isEqual((org.joda.time.ReadableInstant) dateTime18);
        org.joda.time.DateTime.Property property23 = dateTime18.yearOfEra();
        org.joda.time.DateTime dateTime24 = property23.roundHalfCeilingCopy();
        org.joda.time.DateTime dateTime25 = property23.withMaximumValue();
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "de");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertNotNull(durationFieldType10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "weeks" + "'", str11, "weeks");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime25);
    }

    @Test
    public void test07917() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07917");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((long) (short) 100, chronology1);
        int int3 = localTime2.getMillisOfDay();
        org.joda.time.LocalTime.Property property4 = localTime2.millisOfSecond();
        org.joda.time.DurationField durationField5 = property4.getLeapDurationField();
        org.joda.time.LocalTime localTime6 = property4.roundHalfEvenCopy();
        org.joda.time.Instant instant7 = new org.joda.time.Instant();
        org.joda.time.Instant instant9 = instant7.withMillis(0L);
        org.joda.time.Duration duration11 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period12 = duration11.toPeriod();
        org.joda.time.Duration duration15 = duration11.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Instant instant16 = instant9.plus((org.joda.time.ReadableDuration) duration15);
        long long17 = instant16.getMillis();
        org.joda.time.Chronology chronology18 = instant16.getChronology();
        org.joda.time.MutableDateTime mutableDateTime19 = org.joda.time.MutableDateTime.now();
        mutableDateTime19.add((long) 'a');
        org.joda.time.Duration duration23 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration25 = org.joda.time.Duration.standardDays((long) (byte) 1);
        java.lang.String str26 = duration25.toString();
        boolean boolean27 = duration23.isShorterThan((org.joda.time.ReadableDuration) duration25);
        org.joda.time.Hours hours28 = duration23.toStandardHours();
        mutableDateTime19.add((org.joda.time.ReadableDuration) duration23, 20);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime(chronology31);
        int int33 = dateTime32.getYearOfCentury();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter34 = null;
        java.lang.String str35 = dateTime32.toString(dateTimeFormatter34);
        org.joda.time.DateTime dateTime37 = dateTime32.minusMonths(22);
        org.joda.time.Instant instant38 = new org.joda.time.Instant();
        org.joda.time.Instant instant40 = instant38.withMillis(0L);
        org.joda.time.Chronology chronology41 = instant40.getChronology();
        org.joda.time.DurationField durationField42 = chronology41.eras();
        org.joda.time.DateTime dateTime43 = dateTime32.withChronology(chronology41);
        org.joda.time.Period period44 = duration23.toPeriod(chronology41);
        org.joda.time.Instant instant46 = instant16.withDurationAdded((org.joda.time.ReadableDuration) duration23, 16);
        boolean boolean47 = localTime6.equals((java.lang.Object) instant16);
        org.joda.time.Instant instant50 = instant16.withDurationAdded(3155695200000L, 44);
        org.joda.time.DateTimeZone dateTimeZone51 = instant16.getZone();
        org.joda.time.MutableDateTime mutableDateTime52 = new org.joda.time.MutableDateTime(dateTimeZone51);
        long long55 = dateTimeZone51.adjustOffset((long) 505, false);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 100 + "'", int3 == 100);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNull(durationField5);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(instant9);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(instant16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 86400000L + "'", long17 == 86400000L);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(mutableDateTime19);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "PT86400S" + "'", str26, "PT86400S");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(hours28);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 22 + "'", int33 == 22);
// flaky:         org.junit.Assert.assertEquals("'" + str35 + "' != '" + "2022-02-22T07:23:59.779Z" + "'", str35, "2022-02-22T07:23:59.779Z");
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(instant40);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(durationField42);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(period44);
        org.junit.Assert.assertNotNull(instant46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(instant50);
        org.junit.Assert.assertNotNull(dateTimeZone51);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 505L + "'", long55 == 505L);
    }

    @Test
    public void test07918() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07918");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.Instant instant2 = new org.joda.time.Instant();
        org.joda.time.Instant instant4 = instant2.withMillis(0L);
        org.joda.time.Chronology chronology5 = instant4.getChronology();
        org.joda.time.DurationField durationField6 = chronology5.eras();
        org.joda.time.LocalTime localTime7 = org.joda.time.LocalTime.now(chronology5);
        org.joda.time.DurationField durationField8 = chronology5.eras();
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 44, chronology5);
        org.joda.time.DateTimeField dateTimeField10 = dateTimeFieldType0.getField(chronology5);
        org.joda.time.PeriodType periodType13 = null;
        org.joda.time.Period period14 = new org.joda.time.Period((long) 100, 1L, periodType13);
        org.joda.time.Period period16 = period14.minusSeconds((-1));
        java.lang.String str17 = period14.toString();
        long long20 = chronology5.add((org.joda.time.ReadablePeriod) period14, (long) ' ', (int) 'a');
        org.joda.time.Period period22 = period14.minusHours((-292275054));
        org.joda.time.Period period24 = period22.withWeeks((int) (byte) 10);
        org.joda.time.MutableDateTime mutableDateTime25 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property26 = mutableDateTime25.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime27 = property26.getMutableDateTime();
        org.joda.time.DateTimeField dateTimeField28 = property26.getField();
        int int29 = property26.getLeapAmount();
        org.joda.time.MutableDateTime mutableDateTime31 = property26.add((int) (byte) 1);
        org.joda.time.MutableDateTime mutableDateTime33 = property26.add((int) (short) 1);
        org.joda.time.MutableDateTime mutableDateTime35 = property26.addWrapField(86399);
        org.joda.time.Duration duration36 = period24.toDurationTo((org.joda.time.ReadableInstant) mutableDateTime35);
        org.joda.time.Duration duration38 = duration36.withMillis(0L);
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(instant4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "PT0.099S" + "'", str17, "PT0.099S");
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + (-9571L) + "'", long20 == (-9571L));
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertNotNull(mutableDateTime25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(mutableDateTime27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(mutableDateTime31);
        org.junit.Assert.assertNotNull(mutableDateTime33);
        org.junit.Assert.assertNotNull(mutableDateTime35);
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertNotNull(duration38);
    }

    @Test
    public void test07919() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07919");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.add((long) 'a');
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime0.yearOfCentury();
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period6 = duration5.toPeriod();
        org.joda.time.Duration duration8 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration11 = duration8.withDurationAdded((long) (short) 100, (int) ' ');
        org.joda.time.Duration duration12 = duration5.minus((org.joda.time.ReadableDuration) duration11);
        mutableDateTime0.add((org.joda.time.ReadableDuration) duration5);
        org.joda.time.MutableDateTime.Property property14 = mutableDateTime0.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime15 = property14.roundFloor();
        org.joda.time.MutableDateTime.Property property16 = mutableDateTime15.yearOfEra();
        org.joda.time.MutableDateTime mutableDateTime17 = org.joda.time.MutableDateTime.now();
        mutableDateTime17.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime20 = mutableDateTime17.copy();
        org.joda.time.MutableDateTime.Property property21 = mutableDateTime17.weekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime22 = property21.roundHalfFloor();
        org.joda.time.MutableDateTime mutableDateTime24 = property21.add((long) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.UTC;
        java.util.TimeZone timeZone26 = dateTimeZone25.toTimeZone();
        org.joda.time.MutableDateTime mutableDateTime27 = mutableDateTime24.toMutableDateTime(dateTimeZone25);
        int int28 = mutableDateTime27.getDayOfYear();
        int int29 = mutableDateTime27.getWeekOfWeekyear();
        org.joda.time.MutablePeriod mutablePeriod30 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) mutableDateTime15, (org.joda.time.ReadableInstant) mutableDateTime27);
        org.joda.time.MutableDateTime.Property property31 = mutableDateTime27.weekOfWeekyear();
        org.joda.time.ReadableInstant readableInstant35 = null;
        org.joda.time.ReadableInstant readableInstant36 = null;
        org.joda.time.PeriodType periodType37 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod38 = new org.joda.time.MutablePeriod(readableInstant35, readableInstant36, periodType37);
        org.joda.time.DurationFieldType durationFieldType40 = periodType37.getFieldType((int) (short) 0);
        java.lang.String str41 = periodType37.toString();
        org.joda.time.Instant instant42 = new org.joda.time.Instant();
        org.joda.time.Instant instant44 = instant42.withMillis(0L);
        org.joda.time.Chronology chronology45 = instant44.getChronology();
        org.joda.time.Period period46 = new org.joda.time.Period((long) 53, (long) (-1), periodType37, chronology45);
        org.joda.time.PeriodType periodType47 = periodType37.withHoursRemoved();
        org.joda.time.MutableDateTime mutableDateTime48 = org.joda.time.MutableDateTime.now();
        mutableDateTime48.add((long) 'a');
        org.joda.time.MutableDateTime.Property property51 = mutableDateTime48.yearOfCentury();
        mutableDateTime48.addSeconds(0);
        org.joda.time.ReadableDuration readableDuration56 = null;
        org.joda.time.ReadableInstant readableInstant57 = null;
        org.joda.time.Period period58 = new org.joda.time.Period(readableDuration56, readableInstant57);
        org.joda.time.PeriodType periodType61 = null;
        org.joda.time.Period period62 = new org.joda.time.Period((long) 100, 1L, periodType61);
        org.joda.time.Period period64 = period62.minusSeconds((-1));
        java.lang.String str65 = period62.toString();
        org.joda.time.Period period66 = period62.toPeriod();
        org.joda.time.PeriodType periodType67 = period62.getPeriodType();
        org.joda.time.Period period68 = period58.normalizedStandard(periodType67);
        org.joda.time.DurationFieldType durationFieldType69 = null;
        int int70 = periodType67.indexOf(durationFieldType69);
        org.joda.time.Instant instant71 = new org.joda.time.Instant();
        org.joda.time.Instant instant73 = instant71.withMillis(0L);
        org.joda.time.Chronology chronology74 = instant73.getChronology();
        org.joda.time.DurationField durationField75 = chronology74.eras();
        org.joda.time.LocalTime localTime76 = org.joda.time.LocalTime.now(chronology74);
        org.joda.time.DurationField durationField77 = chronology74.eras();
        org.joda.time.DateTimeField dateTimeField78 = chronology74.hourOfDay();
        org.joda.time.MutablePeriod mutablePeriod79 = new org.joda.time.MutablePeriod((long) 12, (long) 292278993, periodType67, chronology74);
        org.joda.time.MutableDateTime mutableDateTime80 = mutableDateTime48.toMutableDateTime(chronology74);
        org.joda.time.DateTimeField dateTimeField81 = chronology74.yearOfEra();
        org.joda.time.Period period82 = new org.joda.time.Period((long) 26222, periodType47, chronology74);
        org.joda.time.DateTimeField dateTimeField83 = chronology74.weekyear();
        mutableDateTime27.setChronology(chronology74);
        org.joda.time.DateTimeField dateTimeField85 = chronology74.centuryOfEra();
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(mutableDateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(mutableDateTime17);
        org.junit.Assert.assertNotNull(mutableDateTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(mutableDateTime22);
        org.junit.Assert.assertNotNull(mutableDateTime24);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(timeZone26);
// flaky:         org.junit.Assert.assertEquals(timeZone26.getDisplayName(), "\u534f\u8c03\u4e16\u754c\u65f6\u95f4");
        org.junit.Assert.assertNotNull(mutableDateTime27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 122 + "'", int28 == 122);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 18 + "'", int29 == 18);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(periodType37);
        org.junit.Assert.assertNotNull(durationFieldType40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "PeriodType[YearDayTime]" + "'", str41, "PeriodType[YearDayTime]");
        org.junit.Assert.assertNotNull(instant44);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(periodType47);
        org.junit.Assert.assertNotNull(mutableDateTime48);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(period64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "PT0.099S" + "'", str65, "PT0.099S");
        org.junit.Assert.assertNotNull(period66);
        org.junit.Assert.assertNotNull(periodType67);
        org.junit.Assert.assertNotNull(period68);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + (-1) + "'", int70 == (-1));
        org.junit.Assert.assertNotNull(instant73);
        org.junit.Assert.assertNotNull(chronology74);
        org.junit.Assert.assertNotNull(durationField75);
        org.junit.Assert.assertNotNull(localTime76);
        org.junit.Assert.assertNotNull(durationField77);
        org.junit.Assert.assertNotNull(dateTimeField78);
        org.junit.Assert.assertNotNull(mutableDateTime80);
        org.junit.Assert.assertNotNull(dateTimeField81);
        org.junit.Assert.assertNotNull(dateTimeField83);
        org.junit.Assert.assertNotNull(dateTimeField85);
    }

    @Test
    public void test07920() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07920");
        org.joda.time.MutableDateTime mutableDateTime8 = org.joda.time.MutableDateTime.parse("2022-02-22T07:16:08.639Z");
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetMillis(442);
        mutableDateTime8.setZone(dateTimeZone10);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime12 = new org.joda.time.MutableDateTime(36987870, 1348, 26275855, 26443, 443, 26281, 12225851, dateTimeZone10);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26443 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableDateTime8);
        org.junit.Assert.assertNotNull(dateTimeZone10);
    }

    @Test
    public void test07921() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07921");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) 1);
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period4 = duration3.toPeriod();
        org.joda.time.Duration duration7 = duration3.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Period period8 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime1, (org.joda.time.ReadableDuration) duration7);
        org.joda.time.DateTime dateTime9 = dateTime1.toDateTimeISO();
        org.joda.time.LocalDate localDate11 = new org.joda.time.LocalDate((long) (byte) -1);
        int int12 = localDate11.getYearOfEra();
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.UTC;
        java.util.TimeZone timeZone14 = dateTimeZone13.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.UTC;
        long long17 = dateTimeZone13.getMillisKeepLocal(dateTimeZone15, (long) 44);
        org.joda.time.DateTime dateTime18 = localDate11.toDateTimeAtMidnight(dateTimeZone13);
        java.util.Locale locale20 = null;
        java.lang.String str21 = dateTimeZone13.getName(946000L, locale20);
        org.joda.time.MutableDateTime mutableDateTime22 = new org.joda.time.MutableDateTime(dateTimeZone13);
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime(dateTimeZone13);
        org.joda.time.ReadableDuration readableDuration24 = null;
        org.joda.time.ReadableInstant readableInstant25 = null;
        org.joda.time.Period period26 = new org.joda.time.Period(readableDuration24, readableInstant25);
        org.joda.time.PeriodType periodType29 = null;
        org.joda.time.Period period30 = new org.joda.time.Period((long) 100, 1L, periodType29);
        org.joda.time.Period period32 = period30.minusSeconds((-1));
        java.lang.String str33 = period30.toString();
        org.joda.time.Period period34 = period30.toPeriod();
        org.joda.time.PeriodType periodType35 = period30.getPeriodType();
        org.joda.time.Period period36 = period26.normalizedStandard(periodType35);
        org.joda.time.Period period38 = period36.withSeconds(10);
        org.joda.time.Minutes minutes39 = period36.toStandardMinutes();
        org.joda.time.DurationFieldType[] durationFieldTypeArray40 = period36.getFieldTypes();
        org.joda.time.Period period42 = period36.withYears(999);
        org.joda.time.Period period44 = period42.multipliedBy(443);
        org.joda.time.Period period46 = period42.minusMonths(1439);
        org.joda.time.DateTime dateTime47 = dateTime23.plus((org.joda.time.ReadablePeriod) period42);
        org.joda.time.DateTime dateTime48 = dateTime9.minus((org.joda.time.ReadablePeriod) period42);
        org.joda.time.MutableDateTime mutableDateTime50 = org.joda.time.MutableDateTime.now();
        mutableDateTime50.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime53 = mutableDateTime50.copy();
        org.joda.time.MutableDateTime.Property property54 = mutableDateTime50.weekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime55 = property54.roundHalfFloor();
        org.joda.time.MutableDateTime mutableDateTime56 = property54.roundHalfCeiling();
        org.joda.time.MutableDateTime mutableDateTime58 = property54.set(1);
        org.joda.time.Chronology chronology59 = null;
        org.joda.time.DateTime dateTime60 = new org.joda.time.DateTime(chronology59);
        int int61 = dateTime60.getYearOfCentury();
        int int62 = dateTime60.getWeekyear();
        org.joda.time.DateTime dateTime63 = dateTime60.withEarlierOffsetAtOverlap();
        java.lang.String str64 = dateTime63.toString();
        org.joda.time.MutableDateTime mutableDateTime65 = dateTime63.toMutableDateTime();
        org.joda.time.DateTimeZone dateTimeZone66 = org.joda.time.DateTimeZone.UTC;
        boolean boolean67 = dateTimeZone66.isFixed();
        mutableDateTime65.setZoneRetainFields(dateTimeZone66);
        org.joda.time.MutableDateTime mutableDateTime69 = mutableDateTime58.toMutableDateTime(dateTimeZone66);
        org.joda.time.DateTime dateTime70 = new org.joda.time.DateTime((-62135596800000L), dateTimeZone66);
        long long72 = dateTimeZone66.previousTransition(1645488000000L);
        org.joda.time.MutableDateTime mutableDateTime73 = new org.joda.time.MutableDateTime(dateTimeZone66);
        org.joda.time.DateTime dateTime74 = dateTime48.withZoneRetainFields(dateTimeZone66);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1969 + "'", int12 == 1969);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(timeZone14);
// flaky:         org.junit.Assert.assertEquals(timeZone14.getDisplayName(), "\u534f\u8c03\u4e16\u754c\u65f6\u95f4");
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 44L + "'", long17 == 44L);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "+00:00" + "'", str21, "+00:00");
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "PT0.099S" + "'", str33, "PT0.099S");
        org.junit.Assert.assertNotNull(period34);
        org.junit.Assert.assertNotNull(periodType35);
        org.junit.Assert.assertNotNull(period36);
        org.junit.Assert.assertNotNull(period38);
        org.junit.Assert.assertNotNull(minutes39);
        org.junit.Assert.assertNotNull(durationFieldTypeArray40);
        org.junit.Assert.assertNotNull(period42);
        org.junit.Assert.assertNotNull(period44);
        org.junit.Assert.assertNotNull(period46);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(mutableDateTime50);
        org.junit.Assert.assertNotNull(mutableDateTime53);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertNotNull(mutableDateTime55);
        org.junit.Assert.assertNotNull(mutableDateTime56);
        org.junit.Assert.assertNotNull(mutableDateTime58);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 22 + "'", int61 == 22);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 2022 + "'", int62 == 2022);
        org.junit.Assert.assertNotNull(dateTime63);
// flaky:         org.junit.Assert.assertEquals("'" + str64 + "' != '" + "2022-02-22T07:23:59.889Z" + "'", str64, "2022-02-22T07:23:59.889Z");
        org.junit.Assert.assertNotNull(mutableDateTime65);
        org.junit.Assert.assertNotNull(dateTimeZone66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(mutableDateTime69);
        org.junit.Assert.assertTrue("'" + long72 + "' != '" + 1645488000000L + "'", long72 == 1645488000000L);
        org.junit.Assert.assertNotNull(dateTime74);
    }

    @Test
    public void test07922() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07922");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.Instant instant2 = instant0.withMillis(0L);
        org.joda.time.Chronology chronology3 = instant2.getChronology();
        org.joda.time.DurationField durationField4 = chronology3.eras();
        long long8 = chronology3.add(0L, (long) 2022, (int) '4');
        org.joda.time.DateTimeField dateTimeField9 = chronology3.secondOfMinute();
        org.joda.time.format.DateTimePrinter dateTimePrinter10 = null;
        org.joda.time.format.DateTimeParser dateTimeParser11 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter10, dateTimeParser11);
        org.joda.time.Instant instant13 = new org.joda.time.Instant();
        org.joda.time.Instant instant15 = instant13.withMillis(0L);
        org.joda.time.Chronology chronology16 = instant15.getChronology();
        org.joda.time.DurationField durationField17 = chronology16.eras();
        long long21 = chronology16.add(0L, (long) 2022, (int) '4');
        org.joda.time.format.DateTimeFormatter dateTimeFormatter22 = dateTimeFormatter12.withChronology(chronology16);
        org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime(chronology16);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime23.minusYears(26148950);
        java.util.Locale locale26 = java.util.Locale.KOREAN;
        java.lang.String str27 = dateTimeField9.getAsShortText((org.joda.time.ReadablePartial) localDateTime25, locale26);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime25.withCenturyOfEra((int) ' ');
        org.joda.time.LocalDateTime localDateTime31 = localDateTime29.withYear(152);
        org.joda.time.LocalDateTime.Property property32 = localDateTime29.era();
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime(chronology34);
        org.joda.time.DateTime dateTime37 = dateTime35.plusMinutes(15);
        org.joda.time.Chronology chronology38 = dateTime35.getChronology();
        java.lang.String str39 = chronology38.toString();
        org.joda.time.DateTimeField dateTimeField40 = chronology38.dayOfYear();
        org.joda.time.MutableDateTime mutableDateTime41 = org.joda.time.MutableDateTime.now();
        mutableDateTime41.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime44 = mutableDateTime41.copy();
        org.joda.time.MutableDateTime.Property property45 = mutableDateTime41.weekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime46 = property45.roundHalfFloor();
        org.joda.time.MutableDateTime mutableDateTime48 = property45.add((long) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone49 = org.joda.time.DateTimeZone.UTC;
        java.util.TimeZone timeZone50 = dateTimeZone49.toTimeZone();
        org.joda.time.MutableDateTime mutableDateTime51 = mutableDateTime48.toMutableDateTime(dateTimeZone49);
        int int53 = dateTimeZone49.getStandardOffset(60000L);
        java.util.Locale.Builder builder55 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder56 = builder55.clear();
        java.util.Locale locale57 = java.util.Locale.GERMAN;
        java.lang.String str58 = locale57.getDisplayName();
        java.lang.String str59 = locale57.getISO3Language();
        java.util.Locale.Builder builder60 = builder56.setLocale(locale57);
        java.lang.String str61 = dateTimeZone49.getName(950707L, locale57);
        int int62 = dateTimeField40.getMaximumShortTextLength(locale57);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime63 = property32.setCopy("1970-01-01T01:14:08.006Z", locale57);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"1970-01-01T01:14:08.006Z\" for era is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(instant2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 105144L + "'", long8 == 105144L);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(instant15);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 105144L + "'", long21 == 105144L);
        org.junit.Assert.assertNotNull(dateTimeFormatter22);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str27 + "' != '" + "59" + "'", str27, "59");
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "ISOChronology[UTC]" + "'", str39, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(mutableDateTime41);
        org.junit.Assert.assertNotNull(mutableDateTime44);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(mutableDateTime46);
        org.junit.Assert.assertNotNull(mutableDateTime48);
        org.junit.Assert.assertNotNull(dateTimeZone49);
        org.junit.Assert.assertNotNull(timeZone50);
// flaky:         org.junit.Assert.assertEquals(timeZone50.getDisplayName(), "\u534f\u8c03\u4e16\u754c\u65f6\u95f4");
        org.junit.Assert.assertNotNull(mutableDateTime51);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "de");
// flaky:         org.junit.Assert.assertEquals("'" + str58 + "' != '" + "\u5fb7\u6587" + "'", str58, "\u5fb7\u6587");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "deu" + "'", str59, "deu");
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "+00:00" + "'", str61, "+00:00");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 3 + "'", int62 == 3);
    }

    @Test
    public void test07923() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07923");
        org.joda.time.ReadableDuration readableDuration1 = null;
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.Period period3 = new org.joda.time.Period(readableDuration1, readableInstant2);
        org.joda.time.Period period5 = period3.withDays((int) (byte) 1);
        org.joda.time.Duration duration7 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Hours hours8 = duration7.toStandardHours();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(chronology9);
        int int11 = dateTime10.getSecondOfMinute();
        org.joda.time.MutablePeriod mutablePeriod12 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration7, (org.joda.time.ReadableInstant) dateTime10);
        org.joda.time.Duration duration13 = period3.toDurationFrom((org.joda.time.ReadableInstant) dateTime10);
        org.joda.time.Hours hours14 = duration13.toStandardHours();
        org.joda.time.Instant instant15 = new org.joda.time.Instant();
        org.joda.time.Instant instant17 = instant15.withMillis(0L);
        org.joda.time.Chronology chronology18 = instant17.getChronology();
        org.joda.time.DurationField durationField19 = chronology18.eras();
        long long23 = chronology18.add(0L, (long) 2022, (int) '4');
        org.joda.time.DateTimeField dateTimeField24 = chronology18.secondOfMinute();
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime(chronology18);
        org.joda.time.DateTime dateTime26 = org.joda.time.DateTime.now(chronology18);
        org.joda.time.DateTime.Property property27 = dateTime26.centuryOfEra();
        org.joda.time.Duration duration29 = org.joda.time.Duration.standardDays((long) (byte) 1);
        java.lang.String str30 = duration29.toString();
        org.joda.time.Duration duration32 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Hours hours33 = duration32.toStandardHours();
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime(chronology34);
        int int36 = dateTime35.getSecondOfMinute();
        org.joda.time.MutablePeriod mutablePeriod37 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration32, (org.joda.time.ReadableInstant) dateTime35);
        org.joda.time.Duration duration38 = duration29.plus((org.joda.time.ReadableDuration) duration32);
        org.joda.time.Duration duration40 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period41 = duration40.toPeriod();
        org.joda.time.Duration duration43 = duration40.minus((long) 292278993);
        org.joda.time.MutableDateTime mutableDateTime44 = org.joda.time.MutableDateTime.now();
        mutableDateTime44.add((long) 'a');
        org.joda.time.MutableDateTime.Property property47 = mutableDateTime44.yearOfCentury();
        org.joda.time.Duration duration49 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period50 = duration49.toPeriod();
        org.joda.time.Duration duration52 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration55 = duration52.withDurationAdded((long) (short) 100, (int) ' ');
        org.joda.time.Duration duration56 = duration49.minus((org.joda.time.ReadableDuration) duration55);
        mutableDateTime44.add((org.joda.time.ReadableDuration) duration49);
        boolean boolean58 = duration43.isShorterThan((org.joda.time.ReadableDuration) duration49);
        boolean boolean59 = duration32.isLongerThan((org.joda.time.ReadableDuration) duration43);
        org.joda.time.DateTime dateTime61 = new org.joda.time.DateTime((long) 1);
        org.joda.time.Duration duration63 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period64 = duration63.toPeriod();
        org.joda.time.Duration duration67 = duration63.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Period period68 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime61, (org.joda.time.ReadableDuration) duration67);
        org.joda.time.Duration duration69 = duration43.plus((org.joda.time.ReadableDuration) duration67);
        org.joda.time.Chronology chronology70 = null;
        org.joda.time.DateTime dateTime71 = new org.joda.time.DateTime(chronology70);
        int int72 = dateTime71.getYearOfCentury();
        int int73 = dateTime71.getWeekyear();
        org.joda.time.DateTime dateTime75 = dateTime71.plus((long) 15);
        org.joda.time.DateTime.Property property76 = dateTime71.year();
        org.joda.time.DateTime dateTime77 = property76.roundHalfFloorCopy();
        org.joda.time.ReadableDuration readableDuration78 = null;
        org.joda.time.ReadableInstant readableInstant79 = null;
        org.joda.time.Period period80 = new org.joda.time.Period(readableDuration78, readableInstant79);
        org.joda.time.PeriodType periodType83 = null;
        org.joda.time.Period period84 = new org.joda.time.Period((long) 100, 1L, periodType83);
        org.joda.time.Period period86 = period84.minusSeconds((-1));
        java.lang.String str87 = period84.toString();
        org.joda.time.Period period88 = period84.toPeriod();
        org.joda.time.PeriodType periodType89 = period84.getPeriodType();
        org.joda.time.Period period90 = period80.normalizedStandard(periodType89);
        java.lang.String str91 = periodType89.getName();
        org.joda.time.PeriodType periodType92 = periodType89.withYearsRemoved();
        org.joda.time.Period period93 = duration67.toPeriodTo((org.joda.time.ReadableInstant) dateTime77, periodType92);
        org.joda.time.MutablePeriod mutablePeriod94 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration13, (org.joda.time.ReadableInstant) dateTime26, periodType92);
        org.joda.time.Period period95 = new org.joda.time.Period(1645514468771L, periodType92);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(hours8);
// flaky:         org.junit.Assert.assertTrue("'" + int11 + "' != '" + 59 + "'", int11 == 59);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(hours14);
        org.junit.Assert.assertNotNull(instant17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 105144L + "'", long23 == 105144L);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "PT86400S" + "'", str30, "PT86400S");
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertNotNull(hours33);
// flaky:         org.junit.Assert.assertTrue("'" + int36 + "' != '" + 59 + "'", int36 == 59);
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertNotNull(duration40);
        org.junit.Assert.assertNotNull(period41);
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertNotNull(mutableDateTime44);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertNotNull(duration49);
        org.junit.Assert.assertNotNull(period50);
        org.junit.Assert.assertNotNull(duration52);
        org.junit.Assert.assertNotNull(duration55);
        org.junit.Assert.assertNotNull(duration56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(duration63);
        org.junit.Assert.assertNotNull(period64);
        org.junit.Assert.assertNotNull(duration67);
        org.junit.Assert.assertNotNull(duration69);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 22 + "'", int72 == 22);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 2022 + "'", int73 == 2022);
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertNotNull(property76);
        org.junit.Assert.assertNotNull(dateTime77);
        org.junit.Assert.assertNotNull(period86);
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "PT0.099S" + "'", str87, "PT0.099S");
        org.junit.Assert.assertNotNull(period88);
        org.junit.Assert.assertNotNull(periodType89);
        org.junit.Assert.assertNotNull(period90);
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "Standard" + "'", str91, "Standard");
        org.junit.Assert.assertNotNull(periodType92);
        org.junit.Assert.assertNotNull(period93);
    }

    @Test
    public void test07924() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07924");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property1 = mutableDateTime0.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime2 = property1.getMutableDateTime();
        org.joda.time.DateTimeField dateTimeField3 = property1.getField();
        int int4 = property1.getLeapAmount();
        org.joda.time.MutableDateTime mutableDateTime6 = property1.add((int) (byte) 1);
        org.joda.time.MutableDateTime mutableDateTime8 = property1.add((int) (short) 1);
        org.joda.time.MutableDateTime mutableDateTime10 = property1.add((long) 62244);
        mutableDateTime10.addDays(110);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime10.setWeekOfWeekyear(37240405);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 37240405 for weekOfWeekyear must be in the range [1,52]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(mutableDateTime2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(mutableDateTime8);
        org.junit.Assert.assertNotNull(mutableDateTime10);
    }

    @Test
    public void test07925() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07925");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property1 = mutableDateTime0.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime2 = property1.getMutableDateTime();
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime((long) 1);
        org.joda.time.Duration duration6 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period7 = duration6.toPeriod();
        org.joda.time.Duration duration10 = duration6.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Period period11 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime4, (org.joda.time.ReadableDuration) duration10);
        org.joda.time.Instant instant12 = dateTime4.toInstant();
        org.joda.time.DateTime dateTime15 = dateTime4.withDurationAdded((long) 3, 4);
        org.joda.time.MutableDateTime mutableDateTime16 = org.joda.time.MutableDateTime.now();
        mutableDateTime16.add((long) 'a');
        org.joda.time.MutableDateTime.Property property19 = mutableDateTime16.yearOfCentury();
        mutableDateTime16.addSeconds(0);
        org.joda.time.ReadableDuration readableDuration24 = null;
        org.joda.time.ReadableInstant readableInstant25 = null;
        org.joda.time.Period period26 = new org.joda.time.Period(readableDuration24, readableInstant25);
        org.joda.time.PeriodType periodType29 = null;
        org.joda.time.Period period30 = new org.joda.time.Period((long) 100, 1L, periodType29);
        org.joda.time.Period period32 = period30.minusSeconds((-1));
        java.lang.String str33 = period30.toString();
        org.joda.time.Period period34 = period30.toPeriod();
        org.joda.time.PeriodType periodType35 = period30.getPeriodType();
        org.joda.time.Period period36 = period26.normalizedStandard(periodType35);
        org.joda.time.DurationFieldType durationFieldType37 = null;
        int int38 = periodType35.indexOf(durationFieldType37);
        org.joda.time.Instant instant39 = new org.joda.time.Instant();
        org.joda.time.Instant instant41 = instant39.withMillis(0L);
        org.joda.time.Chronology chronology42 = instant41.getChronology();
        org.joda.time.DurationField durationField43 = chronology42.eras();
        org.joda.time.LocalTime localTime44 = org.joda.time.LocalTime.now(chronology42);
        org.joda.time.DurationField durationField45 = chronology42.eras();
        org.joda.time.DateTimeField dateTimeField46 = chronology42.hourOfDay();
        org.joda.time.MutablePeriod mutablePeriod47 = new org.joda.time.MutablePeriod((long) 12, (long) 292278993, periodType35, chronology42);
        org.joda.time.MutableDateTime mutableDateTime48 = mutableDateTime16.toMutableDateTime(chronology42);
        mutableDateTime16.setDayOfYear(44);
        int int51 = mutableDateTime16.getHourOfDay();
        org.joda.time.MutablePeriod mutablePeriod52 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime15, (org.joda.time.ReadableInstant) mutableDateTime16);
        mutableDateTime16.addMillis(365);
        mutableDateTime2.setTime((org.joda.time.ReadableInstant) mutableDateTime16);
        org.joda.time.MutableDateTime.Property property56 = mutableDateTime16.millisOfDay();
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime16.setMinuteOfDay(26498);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26498 for minuteOfDay must be in the range [0,1439]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(mutableDateTime2);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(instant12);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(mutableDateTime16);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "PT0.099S" + "'", str33, "PT0.099S");
        org.junit.Assert.assertNotNull(period34);
        org.junit.Assert.assertNotNull(periodType35);
        org.junit.Assert.assertNotNull(period36);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertNotNull(instant41);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(durationField43);
        org.junit.Assert.assertNotNull(localTime44);
        org.junit.Assert.assertNotNull(durationField45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(mutableDateTime48);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 7 + "'", int51 == 7);
        org.junit.Assert.assertNotNull(property56);
    }

    @Test
    public void test07926() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07926");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.dayOfYear();
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.Period period5 = new org.joda.time.Period((long) 100, 1L, periodType4);
        org.joda.time.Period period7 = period5.minusSeconds((-1));
        java.lang.String str8 = period5.toString();
        org.joda.time.LocalDate localDate10 = localDate0.withPeriodAdded((org.joda.time.ReadablePeriod) period5, 3);
        int int11 = localDate0.getYear();
        org.joda.time.Instant instant12 = new org.joda.time.Instant();
        org.joda.time.Instant instant14 = instant12.withMillis(0L);
        org.joda.time.DateTime dateTime15 = instant14.toDateTime();
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((long) 1);
        org.joda.time.PeriodType periodType18 = org.joda.time.PeriodType.months();
        org.joda.time.Period period19 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime15, (org.joda.time.ReadableInstant) dateTime17, periodType18);
        org.joda.time.PeriodType periodType22 = null;
        org.joda.time.Period period23 = new org.joda.time.Period((long) 100, 1L, periodType22);
        org.joda.time.Period period25 = period23.minusSeconds((-1));
        java.lang.String str26 = period23.toString();
        org.joda.time.Period period27 = period23.toPeriod();
        org.joda.time.PeriodType periodType28 = period23.getPeriodType();
        org.joda.time.DateTime dateTime29 = dateTime17.plus((org.joda.time.ReadablePeriod) period23);
        org.joda.time.Seconds seconds30 = period23.toStandardSeconds();
        org.joda.time.LocalDate localDate31 = localDate0.minus((org.joda.time.ReadablePeriod) seconds30);
        org.joda.time.MutableDateTime mutableDateTime32 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property33 = mutableDateTime32.centuryOfEra();
        org.joda.time.MutableDateTime.Property property34 = mutableDateTime32.dayOfWeek();
        org.joda.time.DateTimeFieldType dateTimeFieldType35 = property34.getFieldType();
        org.joda.time.DateTimeField dateTimeField36 = property34.getField();
        org.joda.time.DateTimeField dateTimeField37 = property34.getField();
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.LocalDateTime localDateTime39 = new org.joda.time.LocalDateTime(dateTimeZone38);
        org.joda.time.LocalDateTime localDateTime41 = localDateTime39.minusMillis(10);
        int int42 = localDateTime39.getCenturyOfEra();
        org.joda.time.DateTimeField dateTimeField44 = localDateTime39.getField(0);
        int int45 = dateTimeField37.getMinimumValue((org.joda.time.ReadablePartial) localDateTime39);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean46 = localDate0.isBefore((org.joda.time.ReadablePartial) localDateTime39);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: ReadablePartial objects must have matching field types");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "PT0.099S" + "'", str8, "PT0.099S");
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2022 + "'", int11 == 2022);
        org.junit.Assert.assertNotNull(instant14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(periodType18);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "PT0.099S" + "'", str26, "PT0.099S");
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertNotNull(periodType28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(seconds30);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertNotNull(mutableDateTime32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(dateTimeFieldType35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 20 + "'", int42 == 20);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
    }

    @Test
    public void test07927() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07927");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.UTC;
        java.util.Locale locale3 = java.util.Locale.GERMAN;
        java.lang.String str4 = locale3.getDisplayName();
        java.lang.String str5 = dateTimeZone1.getName(100L, locale3);
        org.joda.time.MutableDateTime mutableDateTime6 = new org.joda.time.MutableDateTime(948227L, dateTimeZone1);
        org.joda.time.MutableDateTime.Property property7 = mutableDateTime6.year();
        org.joda.time.ReadableInstant readableInstant8 = null;
        mutableDateTime6.setMillis(readableInstant8);
        mutableDateTime6.addYears(36985848);
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime6.era();
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime17 = dateTime15.withZoneRetainFields(dateTimeZone16);
        boolean boolean19 = dateTime17.equals((java.lang.Object) (-1L));
        org.joda.time.Chronology chronology20 = dateTime17.getChronology();
        java.util.Locale locale21 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket23 = new org.joda.time.format.DateTimeParserBucket((long) 1, chronology20, locale21, (java.lang.Integer) 50);
        org.joda.time.DateTimeZone dateTimeZone24 = dateTimeParserBucket23.getZone();
        org.joda.time.DateTimeZone dateTimeZone25 = dateTimeParserBucket23.getZone();
        int int27 = dateTimeZone25.getStandardOffset(0L);
        mutableDateTime6.setZone(dateTimeZone25);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime6.setDateTime(26522, 26349625, 62261, 26538157, 26245, 0, 15556102);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26538157 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "de");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u5fb7\u6587" + "'", str4, "\u5fb7\u6587");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "+00:00" + "'", str5, "+00:00");
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
    }

    @Test
    public void test07928() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07928");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) (short) -1);
        org.joda.time.MutableDateTime mutableDateTime2 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime2.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime5 = property3.set(45);
        org.joda.time.MutableDateTime mutableDateTime6 = property3.roundFloor();
        org.joda.time.MutableDateTime mutableDateTime8 = property3.add(45);
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        java.util.TimeZone timeZone10 = dateTimeZone9.toTimeZone();
        long long12 = dateTimeZone9.previousTransition(100L);
        int int14 = dateTimeZone9.getStandardOffset(86403200L);
        org.joda.time.DateTime dateTime15 = mutableDateTime8.toDateTime(dateTimeZone9);
        mutableDateTime1.setZoneRetainFields(dateTimeZone9);
        java.lang.String str18 = dateTimeZone9.getNameKey((long) 36950209);
        long long20 = dateTimeZone9.previousTransition(959393L);
        org.joda.time.DateTime dateTime21 = org.joda.time.DateTime.now(dateTimeZone9);
        java.util.GregorianCalendar gregorianCalendar22 = dateTime21.toGregorianCalendar();
        org.junit.Assert.assertNotNull(mutableDateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(mutableDateTime5);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(mutableDateTime8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(timeZone10);
// flaky:         org.junit.Assert.assertEquals(timeZone10.getDisplayName(), "\u534f\u8c03\u4e16\u754c\u65f6\u95f4");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 100L + "'", long12 == 100L);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "UTC" + "'", str18, "UTC");
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 959393L + "'", long20 == 959393L);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(gregorianCalendar22);
    }

    @Test
    public void test07929() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07929");
        org.joda.time.Instant instant7 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime8 = instant7.toMutableDateTime();
        org.joda.time.MutableDateTime mutableDateTime9 = org.joda.time.MutableDateTime.now();
        mutableDateTime9.add((long) 'a');
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime9.yearOfCentury();
        org.joda.time.Duration duration14 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period15 = duration14.toPeriod();
        org.joda.time.Duration duration17 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration20 = duration17.withDurationAdded((long) (short) 100, (int) ' ');
        org.joda.time.Duration duration21 = duration14.minus((org.joda.time.ReadableDuration) duration20);
        mutableDateTime9.add((org.joda.time.ReadableDuration) duration14);
        org.joda.time.MutableDateTime.Property property23 = mutableDateTime9.centuryOfEra();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime(chronology24);
        int int26 = dateTime25.getYearOfCentury();
        org.joda.time.DateTime dateTime28 = dateTime25.withSecondOfMinute(53);
        org.joda.time.Duration duration30 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period31 = duration30.toPeriod();
        org.joda.time.Duration duration33 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration36 = duration33.withDurationAdded((long) (short) 100, (int) ' ');
        org.joda.time.Duration duration37 = duration30.minus((org.joda.time.ReadableDuration) duration36);
        org.joda.time.ReadableInstant readableInstant38 = null;
        org.joda.time.ReadableInstant readableInstant39 = null;
        org.joda.time.PeriodType periodType40 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod41 = new org.joda.time.MutablePeriod(readableInstant38, readableInstant39, periodType40);
        org.joda.time.DurationFieldType durationFieldType43 = periodType40.getFieldType((int) (short) 0);
        java.lang.String str44 = periodType40.toString();
        org.joda.time.Period period45 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime25, (org.joda.time.ReadableDuration) duration30, periodType40);
        mutableDateTime9.add((org.joda.time.ReadableDuration) duration30);
        mutableDateTime9.addWeekyears(21);
        org.joda.time.MutableDateTime.Property property49 = mutableDateTime9.weekOfWeekyear();
        boolean boolean50 = instant7.isAfter((org.joda.time.ReadableInstant) mutableDateTime9);
        int int51 = mutableDateTime9.getMillisOfSecond();
        mutableDateTime9.addWeekyears(62151);
        mutableDateTime9.setSecondOfDay(0);
        org.joda.time.Chronology chronology56 = mutableDateTime9.getChronology();
        org.joda.time.DateTime dateTime57 = new org.joda.time.DateTime(chronology56);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime58 = new org.joda.time.LocalDateTime(26275, 62631, 26324361, 215, 33744, 26526751, 72020057, chronology56);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 215 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableDateTime8);
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 22 + "'", int26 == 22);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertNotNull(periodType40);
        org.junit.Assert.assertNotNull(durationFieldType43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "PeriodType[YearDayTime]" + "'", str44, "PeriodType[YearDayTime]");
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int51 + "' != '" + 255 + "'", int51 == 255);
        org.junit.Assert.assertNotNull(chronology56);
    }

    @Test
    public void test07930() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07930");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) 1);
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period4 = duration3.toPeriod();
        org.joda.time.Duration duration7 = duration3.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Period period8 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime1, (org.joda.time.ReadableDuration) duration7);
        org.joda.time.Period period10 = period8.plusSeconds((int) (byte) 0);
        org.joda.time.MutableDateTime mutableDateTime11 = org.joda.time.MutableDateTime.now();
        mutableDateTime11.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime14 = mutableDateTime11.copy();
        org.joda.time.MutableDateTime.Property property15 = mutableDateTime11.weekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime16 = property15.roundHalfFloor();
        org.joda.time.MutableDateTime mutableDateTime17 = property15.roundHalfCeiling();
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.ReadableInstant readableInstant21 = null;
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.PeriodType periodType23 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod24 = new org.joda.time.MutablePeriod(readableInstant21, readableInstant22, periodType23);
        org.joda.time.DurationFieldType durationFieldType26 = periodType23.getFieldType((int) (short) 0);
        java.lang.String str27 = periodType23.toString();
        org.joda.time.Instant instant28 = new org.joda.time.Instant();
        org.joda.time.Instant instant30 = instant28.withMillis(0L);
        org.joda.time.Chronology chronology31 = instant30.getChronology();
        org.joda.time.Period period32 = new org.joda.time.Period((long) 53, (long) (-1), periodType23, chronology31);
        org.joda.time.DateTimeField dateTimeField33 = dateTimeFieldType18.getField(chronology31);
        java.util.Locale locale34 = java.util.Locale.UK;
        java.lang.String str35 = locale34.getDisplayLanguage();
        int int36 = dateTimeField33.getMaximumTextLength(locale34);
        mutableDateTime17.setRounding(dateTimeField33);
        org.joda.time.Duration duration38 = period8.toDurationFrom((org.joda.time.ReadableInstant) mutableDateTime17);
        org.joda.time.MutableDateTime mutableDateTime39 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property40 = mutableDateTime39.centuryOfEra();
        org.joda.time.MutableDateTime.Property property41 = mutableDateTime39.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime42 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime44 = localDateTime42.withHourOfDay(10);
        org.joda.time.LocalDateTime.Property property45 = localDateTime42.hourOfDay();
        org.joda.time.LocalDateTime localDateTime47 = localDateTime42.plusMillis((int) (byte) 0);
        org.joda.time.PeriodType periodType50 = null;
        org.joda.time.Period period51 = new org.joda.time.Period((long) 100, 1L, periodType50);
        org.joda.time.Period period53 = period51.minusSeconds((-1));
        org.joda.time.LocalDateTime localDateTime54 = localDateTime47.minus((org.joda.time.ReadablePeriod) period51);
        mutableDateTime39.add((org.joda.time.ReadablePeriod) period51, 0);
        org.joda.time.PeriodType periodType57 = period51.getPeriodType();
        org.joda.time.ReadableInstant readableInstant61 = null;
        org.joda.time.ReadableInstant readableInstant62 = null;
        org.joda.time.PeriodType periodType63 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod64 = new org.joda.time.MutablePeriod(readableInstant61, readableInstant62, periodType63);
        org.joda.time.DurationFieldType durationFieldType66 = periodType63.getFieldType((int) (short) 0);
        java.lang.String str67 = periodType63.toString();
        org.joda.time.Instant instant68 = new org.joda.time.Instant();
        org.joda.time.Instant instant70 = instant68.withMillis(0L);
        org.joda.time.Chronology chronology71 = instant70.getChronology();
        org.joda.time.Period period72 = new org.joda.time.Period((long) 53, (long) (-1), periodType63, chronology71);
        org.joda.time.ReadableInstant readableInstant75 = null;
        org.joda.time.ReadableInstant readableInstant76 = null;
        org.joda.time.PeriodType periodType77 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod78 = new org.joda.time.MutablePeriod(readableInstant75, readableInstant76, periodType77);
        org.joda.time.DurationFieldType durationFieldType80 = periodType77.getFieldType((int) (short) 0);
        java.lang.String str81 = periodType77.toString();
        org.joda.time.Instant instant82 = new org.joda.time.Instant();
        org.joda.time.Instant instant84 = instant82.withMillis(0L);
        org.joda.time.Chronology chronology85 = instant84.getChronology();
        org.joda.time.Period period86 = new org.joda.time.Period((long) 53, (long) (-1), periodType77, chronology85);
        org.joda.time.MutablePeriod mutablePeriod87 = new org.joda.time.MutablePeriod((long) (short) 10, periodType63, chronology85);
        org.joda.time.DateTimeField dateTimeField88 = chronology85.weekOfWeekyear();
        org.joda.time.Period period89 = duration38.toPeriod(periodType57, chronology85);
        org.joda.time.Duration duration91 = org.joda.time.Duration.standardSeconds((long) 22);
        long long92 = duration91.getStandardMinutes();
        boolean boolean93 = duration38.isEqual((org.joda.time.ReadableDuration) duration91);
        long long94 = duration91.getStandardSeconds();
        org.joda.time.ReadableInstant readableInstant95 = null;
        org.joda.time.Interval interval96 = duration91.toIntervalFrom(readableInstant95);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertNotNull(mutableDateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(mutableDateTime16);
        org.junit.Assert.assertNotNull(mutableDateTime17);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertNotNull(periodType23);
        org.junit.Assert.assertNotNull(durationFieldType26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "PeriodType[YearDayTime]" + "'", str27, "PeriodType[YearDayTime]");
        org.junit.Assert.assertNotNull(instant30);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "en_GB");
// flaky:         org.junit.Assert.assertEquals("'" + str35 + "' != '" + "\u82f1\u6587" + "'", str35, "\u82f1\u6587");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 4 + "'", int36 == 4);
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertNotNull(mutableDateTime39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(period53);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertNotNull(periodType57);
        org.junit.Assert.assertNotNull(periodType63);
        org.junit.Assert.assertNotNull(durationFieldType66);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "PeriodType[YearDayTime]" + "'", str67, "PeriodType[YearDayTime]");
        org.junit.Assert.assertNotNull(instant70);
        org.junit.Assert.assertNotNull(chronology71);
        org.junit.Assert.assertNotNull(periodType77);
        org.junit.Assert.assertNotNull(durationFieldType80);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "PeriodType[YearDayTime]" + "'", str81, "PeriodType[YearDayTime]");
        org.junit.Assert.assertNotNull(instant84);
        org.junit.Assert.assertNotNull(chronology85);
        org.junit.Assert.assertNotNull(dateTimeField88);
        org.junit.Assert.assertNotNull(period89);
        org.junit.Assert.assertNotNull(duration91);
        org.junit.Assert.assertTrue("'" + long92 + "' != '" + 0L + "'", long92 == 0L);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertTrue("'" + long94 + "' != '" + 22L + "'", long94 == 22L);
        org.junit.Assert.assertNotNull(interval96);
    }

    @Test
    public void test07931() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07931");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) (short) -1);
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardDays((long) (byte) 1);
        java.lang.String str4 = duration3.toString();
        mutableDateTime1.add((org.joda.time.ReadableDuration) duration3, 8);
        mutableDateTime1.setSecondOfMinute((int) (short) 0);
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime1.millisOfSecond();
        org.joda.time.MutableDateTime mutableDateTime11 = property9.add((long) (-1));
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.dayOfMonth();
        boolean boolean14 = localDate12.isSupported(dateTimeFieldType13);
        org.joda.time.LocalDate.Property property15 = localDate12.yearOfEra();
        org.joda.time.Instant instant16 = new org.joda.time.Instant();
        org.joda.time.Instant instant18 = instant16.withMillis(0L);
        org.joda.time.Duration duration20 = org.joda.time.Duration.standardDays((long) (byte) 1);
        java.lang.String str21 = duration20.toString();
        org.joda.time.Instant instant22 = instant16.minus((org.joda.time.ReadableDuration) duration20);
        int int23 = property15.getDifference((org.joda.time.ReadableInstant) instant16);
        org.joda.time.Duration duration26 = new org.joda.time.Duration((long) (short) -1, (long) (-292275054));
        org.joda.time.Instant instant27 = instant16.plus((org.joda.time.ReadableDuration) duration26);
        org.joda.time.Duration duration29 = org.joda.time.Duration.standardDays((long) (byte) 1);
        java.lang.String str30 = duration29.toString();
        org.joda.time.Duration duration32 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Hours hours33 = duration32.toStandardHours();
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime(chronology34);
        int int36 = dateTime35.getSecondOfMinute();
        org.joda.time.MutablePeriod mutablePeriod37 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration32, (org.joda.time.ReadableInstant) dateTime35);
        org.joda.time.Duration duration38 = duration29.plus((org.joda.time.ReadableDuration) duration32);
        org.joda.time.Duration duration40 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period41 = duration40.toPeriod();
        org.joda.time.Duration duration43 = duration40.minus((long) 292278993);
        org.joda.time.MutableDateTime mutableDateTime44 = org.joda.time.MutableDateTime.now();
        mutableDateTime44.add((long) 'a');
        org.joda.time.MutableDateTime.Property property47 = mutableDateTime44.yearOfCentury();
        org.joda.time.Duration duration49 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period50 = duration49.toPeriod();
        org.joda.time.Duration duration52 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration55 = duration52.withDurationAdded((long) (short) 100, (int) ' ');
        org.joda.time.Duration duration56 = duration49.minus((org.joda.time.ReadableDuration) duration55);
        mutableDateTime44.add((org.joda.time.ReadableDuration) duration49);
        boolean boolean58 = duration43.isShorterThan((org.joda.time.ReadableDuration) duration49);
        boolean boolean59 = duration32.isLongerThan((org.joda.time.ReadableDuration) duration43);
        org.joda.time.Instant instant60 = instant27.minus((org.joda.time.ReadableDuration) duration43);
        boolean boolean61 = property9.equals((java.lang.Object) instant27);
        org.joda.time.Instant instant63 = instant27.minus((long) 26238);
        long long64 = instant27.getMillis();
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "PT86400S" + "'", str4, "PT86400S");
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(instant18);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "PT86400S" + "'", str21, "PT86400S");
        org.junit.Assert.assertNotNull(instant22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(instant27);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "PT86400S" + "'", str30, "PT86400S");
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertNotNull(hours33);
// flaky:         org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertNotNull(duration40);
        org.junit.Assert.assertNotNull(period41);
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertNotNull(mutableDateTime44);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertNotNull(duration49);
        org.junit.Assert.assertNotNull(period50);
        org.junit.Assert.assertNotNull(duration52);
        org.junit.Assert.assertNotNull(duration55);
        org.junit.Assert.assertNotNull(duration56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(instant60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(instant63);
// flaky:         org.junit.Assert.assertTrue("'" + long64 + "' != '" + 1645222365202L + "'", long64 == 1645222365202L);
    }

    @Test
    public void test07932() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07932");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        java.lang.Object obj1 = mutableDateTime0.clone();
        mutableDateTime0.setTime((long) 46);
        org.joda.time.MutableDateTime.Property property4 = mutableDateTime0.dayOfWeek();
        org.joda.time.MutableDateTime mutableDateTime6 = property4.add(1L);
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.UTC;
        java.util.TimeZone timeZone8 = dateTimeZone7.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        long long11 = dateTimeZone7.getMillisKeepLocal(dateTimeZone9, (long) 44);
        org.joda.time.DateTime dateTime12 = org.joda.time.DateTime.now(dateTimeZone7);
        mutableDateTime6.setZoneRetainFields(dateTimeZone7);
        mutableDateTime6.addSeconds((int) (short) 10);
        java.lang.Object obj16 = mutableDateTime6.clone();
        org.joda.time.MutableDateTime.Property property17 = mutableDateTime6.era();
        org.joda.time.DateTimeField dateTimeField18 = property17.getField();
        org.joda.time.MutableDateTime mutableDateTime19 = property17.roundHalfFloor();
        org.joda.time.MutableDateTime mutableDateTime20 = property17.getMutableDateTime();
        org.joda.time.ReadableInstant readableInstant21 = null;
        boolean boolean22 = mutableDateTime20.isBefore(readableInstant21);
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(obj1);
// flaky:         org.junit.Assert.assertEquals(obj1.toString(), "2022-02-22T07:24:00.325Z");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj1), "2022-02-22T07:24:00.325Z");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj1), "2022-02-22T07:24:00.325Z");
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(timeZone8);
// flaky:         org.junit.Assert.assertEquals(timeZone8.getDisplayName(), "\u534f\u8c03\u4e16\u754c\u65f6\u95f4");
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 44L + "'", long11 == 44L);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(obj16);
        org.junit.Assert.assertEquals(obj16.toString(), "2022-02-23T00:00:10.046Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj16), "2022-02-23T00:00:10.046Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj16), "2022-02-23T00:00:10.046Z");
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(mutableDateTime19);
        org.junit.Assert.assertNotNull(mutableDateTime20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
    }

    @Test
    public void test07933() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07933");
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.PeriodType periodType6 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod(readableInstant4, readableInstant5, periodType6);
        org.joda.time.DurationFieldType durationFieldType9 = periodType6.getFieldType((int) (short) 0);
        java.lang.String str10 = periodType6.toString();
        org.joda.time.Instant instant11 = new org.joda.time.Instant();
        org.joda.time.Instant instant13 = instant11.withMillis(0L);
        org.joda.time.Chronology chronology14 = instant13.getChronology();
        org.joda.time.Period period15 = new org.joda.time.Period((long) 53, (long) (-1), periodType6, chronology14);
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.ReadableInstant readableInstant19 = null;
        org.joda.time.PeriodType periodType20 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod21 = new org.joda.time.MutablePeriod(readableInstant18, readableInstant19, periodType20);
        org.joda.time.DurationFieldType durationFieldType23 = periodType20.getFieldType((int) (short) 0);
        java.lang.String str24 = periodType20.toString();
        org.joda.time.Instant instant25 = new org.joda.time.Instant();
        org.joda.time.Instant instant27 = instant25.withMillis(0L);
        org.joda.time.Chronology chronology28 = instant27.getChronology();
        org.joda.time.Period period29 = new org.joda.time.Period((long) 53, (long) (-1), periodType20, chronology28);
        org.joda.time.LocalDate localDate30 = org.joda.time.LocalDate.now(chronology28);
        org.joda.time.Period period31 = new org.joda.time.Period((long) 0, periodType6, chronology28);
        java.util.Locale locale32 = java.util.Locale.getDefault();
        java.lang.String str33 = locale32.getDisplayScript();
        java.util.Locale locale34 = java.util.Locale.getDefault();
        java.util.Locale locale35 = locale34.stripExtensions();
        java.lang.String str36 = locale32.getDisplayCountry(locale34);
        java.lang.String str37 = locale32.getCountry();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket40 = new org.joda.time.format.DateTimeParserBucket(1161221L, chronology28, locale32, (java.lang.Integer) (-7938), 443);
        long long43 = dateTimeParserBucket40.computeMillis(false, "292");
        org.junit.Assert.assertNotNull(periodType6);
        org.junit.Assert.assertNotNull(durationFieldType9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "PeriodType[YearDayTime]" + "'", str10, "PeriodType[YearDayTime]");
        org.junit.Assert.assertNotNull(instant13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(periodType20);
        org.junit.Assert.assertNotNull(durationFieldType23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "PeriodType[YearDayTime]" + "'", str24, "PeriodType[YearDayTime]");
        org.junit.Assert.assertNotNull(instant27);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(localDate30);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "\u4e2d\u56fd" + "'", str36, "\u4e2d\u56fd");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "CN" + "'", str37, "CN");
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 1161221L + "'", long43 == 1161221L);
    }

    @Test
    public void test07934() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07934");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) 1);
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period4 = duration3.toPeriod();
        org.joda.time.Duration duration7 = duration3.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Period period8 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime1, (org.joda.time.ReadableDuration) duration7);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(chronology9);
        int int11 = dateTime10.getSecondOfMinute();
        org.joda.time.Interval interval12 = duration7.toIntervalTo((org.joda.time.ReadableInstant) dateTime10);
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.dayOfMonth();
        boolean boolean15 = localDate13.isSupported(dateTimeFieldType14);
        org.joda.time.LocalDate.Property property16 = localDate13.yearOfEra();
        org.joda.time.Instant instant17 = new org.joda.time.Instant();
        org.joda.time.Instant instant19 = instant17.withMillis(0L);
        org.joda.time.Duration duration21 = org.joda.time.Duration.standardDays((long) (byte) 1);
        java.lang.String str22 = duration21.toString();
        org.joda.time.Instant instant23 = instant17.minus((org.joda.time.ReadableDuration) duration21);
        int int24 = property16.getDifference((org.joda.time.ReadableInstant) instant17);
        org.joda.time.Duration duration27 = new org.joda.time.Duration((long) (short) -1, (long) (-292275054));
        org.joda.time.Instant instant28 = instant17.plus((org.joda.time.ReadableDuration) duration27);
        org.joda.time.Duration duration30 = org.joda.time.Duration.standardDays((long) (byte) 1);
        java.lang.String str31 = duration30.toString();
        org.joda.time.Duration duration33 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Hours hours34 = duration33.toStandardHours();
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime(chronology35);
        int int37 = dateTime36.getSecondOfMinute();
        org.joda.time.MutablePeriod mutablePeriod38 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration33, (org.joda.time.ReadableInstant) dateTime36);
        org.joda.time.Duration duration39 = duration30.plus((org.joda.time.ReadableDuration) duration33);
        org.joda.time.Duration duration41 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period42 = duration41.toPeriod();
        org.joda.time.Duration duration44 = duration41.minus((long) 292278993);
        org.joda.time.MutableDateTime mutableDateTime45 = org.joda.time.MutableDateTime.now();
        mutableDateTime45.add((long) 'a');
        org.joda.time.MutableDateTime.Property property48 = mutableDateTime45.yearOfCentury();
        org.joda.time.Duration duration50 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period51 = duration50.toPeriod();
        org.joda.time.Duration duration53 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration56 = duration53.withDurationAdded((long) (short) 100, (int) ' ');
        org.joda.time.Duration duration57 = duration50.minus((org.joda.time.ReadableDuration) duration56);
        mutableDateTime45.add((org.joda.time.ReadableDuration) duration50);
        boolean boolean59 = duration44.isShorterThan((org.joda.time.ReadableDuration) duration50);
        boolean boolean60 = duration33.isLongerThan((org.joda.time.ReadableDuration) duration44);
        org.joda.time.Instant instant61 = instant28.minus((org.joda.time.ReadableDuration) duration44);
        org.joda.time.Interval interval62 = duration7.toIntervalTo((org.joda.time.ReadableInstant) instant61);
        org.joda.time.Instant instant63 = new org.joda.time.Instant();
        org.joda.time.Instant instant65 = instant63.withMillis(0L);
        org.joda.time.Duration duration67 = org.joda.time.Duration.standardDays((long) (byte) 1);
        java.lang.String str68 = duration67.toString();
        org.joda.time.Instant instant69 = instant63.minus((org.joda.time.ReadableDuration) duration67);
        org.joda.time.MutableDateTime mutableDateTime70 = instant63.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property71 = mutableDateTime70.centuryOfEra();
        mutableDateTime70.addYears(22);
        org.joda.time.Period period74 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration7, (org.joda.time.ReadableInstant) mutableDateTime70);
        org.joda.time.Period period76 = period74.minusMonths(359);
        org.joda.time.Period period77 = period76.toPeriod();
        int int78 = period77.getMinutes();
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(duration7);
// flaky:         org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(instant19);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "PT86400S" + "'", str22, "PT86400S");
        org.junit.Assert.assertNotNull(instant23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(instant28);
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "PT86400S" + "'", str31, "PT86400S");
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertNotNull(hours34);
// flaky:         org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(duration39);
        org.junit.Assert.assertNotNull(duration41);
        org.junit.Assert.assertNotNull(period42);
        org.junit.Assert.assertNotNull(duration44);
        org.junit.Assert.assertNotNull(mutableDateTime45);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(duration50);
        org.junit.Assert.assertNotNull(period51);
        org.junit.Assert.assertNotNull(duration53);
        org.junit.Assert.assertNotNull(duration56);
        org.junit.Assert.assertNotNull(duration57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(instant61);
        org.junit.Assert.assertNotNull(interval62);
        org.junit.Assert.assertNotNull(instant65);
        org.junit.Assert.assertNotNull(duration67);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "PT86400S" + "'", str68, "PT86400S");
        org.junit.Assert.assertNotNull(instant69);
        org.junit.Assert.assertNotNull(mutableDateTime70);
        org.junit.Assert.assertNotNull(property71);
        org.junit.Assert.assertNotNull(period76);
        org.junit.Assert.assertNotNull(period77);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
    }

    @Test
    public void test07935() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07935");
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.PeriodType periodType4 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod5 = new org.joda.time.MutablePeriod(readableInstant2, readableInstant3, periodType4);
        org.joda.time.DurationFieldType durationFieldType7 = periodType4.getFieldType((int) (short) 0);
        java.lang.String str8 = periodType4.toString();
        org.joda.time.Instant instant9 = new org.joda.time.Instant();
        org.joda.time.Instant instant11 = instant9.withMillis(0L);
        org.joda.time.Chronology chronology12 = instant11.getChronology();
        org.joda.time.Period period13 = new org.joda.time.Period((long) 53, (long) (-1), periodType4, chronology12);
        org.joda.time.PeriodType periodType14 = periodType4.withMillisRemoved();
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property16 = localDate15.monthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.minuteOfDay();
        boolean boolean18 = localDate15.isSupported(dateTimeFieldType17);
        int int19 = localDate15.getDayOfYear();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateMidnight dateMidnight21 = localDate15.toDateMidnight(dateTimeZone20);
        org.joda.time.LocalDate.Property property22 = localDate15.year();
        org.joda.time.LocalDate localDate23 = property22.withMinimumValue();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray24 = localDate23.getFieldTypes();
        boolean boolean25 = periodType4.equals((java.lang.Object) localDate23);
        org.joda.time.LocalDate localDate27 = localDate23.plusWeeks(26415);
        java.lang.String str28 = localDate27.toString();
        org.junit.Assert.assertNotNull(periodType4);
        org.junit.Assert.assertNotNull(durationFieldType7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "PeriodType[YearDayTime]" + "'", str8, "PeriodType[YearDayTime]");
        org.junit.Assert.assertNotNull(instant11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(periodType14);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 53 + "'", int19 == 53);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(dateMidnight21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "-292274548-05-25" + "'", str28, "-292274548-05-25");
    }

    @Test
    public void test07936() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07936");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.add((long) 'a');
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime0.yearOfCentury();
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period6 = duration5.toPeriod();
        org.joda.time.Duration duration8 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration11 = duration8.withDurationAdded((long) (short) 100, (int) ' ');
        org.joda.time.Duration duration12 = duration5.minus((org.joda.time.ReadableDuration) duration11);
        mutableDateTime0.add((org.joda.time.ReadableDuration) duration5);
        org.joda.time.MutableDateTime.Property property14 = mutableDateTime0.centuryOfEra();
        mutableDateTime0.addHours((int) (byte) 10);
        mutableDateTime0.addWeeks(20);
        org.joda.time.DateTimeField dateTimeField19 = mutableDateTime0.getRoundingField();
        int int20 = mutableDateTime0.getWeekyear();
        int int21 = mutableDateTime0.getDayOfWeek();
        int int22 = mutableDateTime0.getWeekyear();
        org.joda.time.MutableDateTime.Property property23 = mutableDateTime0.millisOfDay();
        org.joda.time.MutableDateTime mutableDateTime24 = org.joda.time.MutableDateTime.now();
        mutableDateTime24.add((long) 'a');
        org.joda.time.MutableDateTime.Property property27 = mutableDateTime24.yearOfCentury();
        org.joda.time.Duration duration29 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period30 = duration29.toPeriod();
        org.joda.time.Duration duration32 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration35 = duration32.withDurationAdded((long) (short) 100, (int) ' ');
        org.joda.time.Duration duration36 = duration29.minus((org.joda.time.ReadableDuration) duration35);
        mutableDateTime24.add((org.joda.time.ReadableDuration) duration29);
        org.joda.time.MutableDateTime.Property property38 = mutableDateTime24.centuryOfEra();
        mutableDateTime24.addYears(0);
        mutableDateTime24.setMinuteOfDay((int) (short) 0);
        org.joda.time.Instant instant43 = new org.joda.time.Instant();
        org.joda.time.Instant instant45 = instant43.withMillis(0L);
        org.joda.time.Duration duration47 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period48 = duration47.toPeriod();
        org.joda.time.Duration duration51 = duration47.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Instant instant52 = instant45.plus((org.joda.time.ReadableDuration) duration51);
        long long53 = instant52.getMillis();
        org.joda.time.Duration duration54 = new org.joda.time.Duration((org.joda.time.ReadableInstant) mutableDateTime24, (org.joda.time.ReadableInstant) instant52);
        org.joda.time.MutableDateTime.Property property55 = mutableDateTime24.millisOfSecond();
        org.joda.time.Instant instant56 = new org.joda.time.Instant((java.lang.Object) mutableDateTime24);
        boolean boolean57 = mutableDateTime0.isAfter((org.joda.time.ReadableInstant) mutableDateTime24);
        org.joda.time.DateTime dateTime58 = mutableDateTime24.toDateTime();
        int int59 = mutableDateTime24.getDayOfMonth();
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.DateTime dateTime61 = new org.joda.time.DateTime(chronology60);
        int int62 = dateTime61.getYearOfCentury();
        int int63 = dateTime61.getWeekyear();
        org.joda.time.DateTime dateTime64 = dateTime61.withEarlierOffsetAtOverlap();
        java.lang.String str65 = dateTime64.toString();
        org.joda.time.MutableDateTime mutableDateTime66 = dateTime64.toMutableDateTime();
        org.joda.time.DateTimeZone dateTimeZone67 = org.joda.time.DateTimeZone.UTC;
        boolean boolean68 = dateTimeZone67.isFixed();
        mutableDateTime66.setZoneRetainFields(dateTimeZone67);
        java.lang.String str70 = dateTimeZone67.toString();
        long long72 = dateTimeZone67.nextTransition((long) 62352);
        org.joda.time.DateTime dateTime73 = new org.joda.time.DateTime((java.lang.Object) mutableDateTime24, dateTimeZone67);
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNull(dateTimeField19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2022 + "'", int20 == 2022);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 3 + "'", int21 == 3);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2022 + "'", int22 == 2022);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(mutableDateTime24);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(instant45);
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertNotNull(period48);
        org.junit.Assert.assertNotNull(duration51);
        org.junit.Assert.assertNotNull(instant52);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 86400000L + "'", long53 == 86400000L);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 23 + "'", int59 == 23);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 22 + "'", int62 == 22);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 2022 + "'", int63 == 2022);
        org.junit.Assert.assertNotNull(dateTime64);
// flaky:         org.junit.Assert.assertEquals("'" + str65 + "' != '" + "2022-02-22T07:24:00.500Z" + "'", str65, "2022-02-22T07:24:00.500Z");
        org.junit.Assert.assertNotNull(mutableDateTime66);
        org.junit.Assert.assertNotNull(dateTimeZone67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "UTC" + "'", str70, "UTC");
        org.junit.Assert.assertTrue("'" + long72 + "' != '" + 62352L + "'", long72 == 62352L);
    }

    @Test
    public void test07937() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07937");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property1 = mutableDateTime0.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime2 = property1.getMutableDateTime();
        org.joda.time.DateTimeField dateTimeField3 = property1.getField();
        org.joda.time.DurationField durationField4 = dateTimeField3.getRangeDurationField();
        org.joda.time.DurationField durationField5 = dateTimeField3.getDurationField();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((java.lang.Object) 1002772L);
        int int8 = dateTimeField3.getMinimumValue((org.joda.time.ReadablePartial) localDate7);
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(mutableDateTime2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
    }

    @Test
    public void test07938() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07938");
        java.lang.Object obj0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(obj0);
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardSeconds((long) 45);
        org.joda.time.Period period4 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime1, (org.joda.time.ReadableDuration) duration3);
        org.joda.time.LocalDate localDate5 = dateTime1.toLocalDate();
        org.joda.time.LocalDate.Property property6 = localDate5.dayOfMonth();
        java.util.Date date7 = localDate5.toDate();
        org.joda.time.LocalDate.Property property8 = localDate5.dayOfYear();
        org.joda.time.LocalDate localDate10 = property8.addWrapFieldToCopy(0);
        org.joda.time.LocalDate localDate11 = property8.roundHalfCeilingCopy();
        org.joda.time.DateTime dateTime12 = localDate11.toDateTimeAtCurrentTime();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(chronology13);
        int int15 = dateTime14.getYearOfCentury();
        int int16 = dateTime14.getWeekyear();
        org.joda.time.DateTime dateTime18 = dateTime14.plus((long) 15);
        org.joda.time.DateTime.Property property19 = dateTime18.millisOfSecond();
        org.joda.time.DateTime dateTime20 = property19.roundHalfCeilingCopy();
        org.joda.time.DateTime dateTime22 = dateTime20.withMillisOfDay(50);
        org.joda.time.DateTime.Property property23 = dateTime22.yearOfEra();
        org.joda.time.Instant instant24 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime25 = instant24.toMutableDateTime();
        org.joda.time.MutableDateTime mutableDateTime26 = org.joda.time.MutableDateTime.now();
        mutableDateTime26.add((long) 'a');
        org.joda.time.MutableDateTime.Property property29 = mutableDateTime26.yearOfCentury();
        org.joda.time.Duration duration31 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period32 = duration31.toPeriod();
        org.joda.time.Duration duration34 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration37 = duration34.withDurationAdded((long) (short) 100, (int) ' ');
        org.joda.time.Duration duration38 = duration31.minus((org.joda.time.ReadableDuration) duration37);
        mutableDateTime26.add((org.joda.time.ReadableDuration) duration31);
        org.joda.time.MutableDateTime.Property property40 = mutableDateTime26.centuryOfEra();
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.DateTime dateTime42 = new org.joda.time.DateTime(chronology41);
        int int43 = dateTime42.getYearOfCentury();
        org.joda.time.DateTime dateTime45 = dateTime42.withSecondOfMinute(53);
        org.joda.time.Duration duration47 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period48 = duration47.toPeriod();
        org.joda.time.Duration duration50 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration53 = duration50.withDurationAdded((long) (short) 100, (int) ' ');
        org.joda.time.Duration duration54 = duration47.minus((org.joda.time.ReadableDuration) duration53);
        org.joda.time.ReadableInstant readableInstant55 = null;
        org.joda.time.ReadableInstant readableInstant56 = null;
        org.joda.time.PeriodType periodType57 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod58 = new org.joda.time.MutablePeriod(readableInstant55, readableInstant56, periodType57);
        org.joda.time.DurationFieldType durationFieldType60 = periodType57.getFieldType((int) (short) 0);
        java.lang.String str61 = periodType57.toString();
        org.joda.time.Period period62 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime42, (org.joda.time.ReadableDuration) duration47, periodType57);
        mutableDateTime26.add((org.joda.time.ReadableDuration) duration47);
        mutableDateTime26.addWeekyears(21);
        org.joda.time.MutableDateTime.Property property66 = mutableDateTime26.weekOfWeekyear();
        boolean boolean67 = instant24.isAfter((org.joda.time.ReadableInstant) mutableDateTime26);
        long long68 = instant24.getMillis();
        long long69 = property23.getDifferenceAsLong((org.joda.time.ReadableInstant) instant24);
        org.joda.time.ReadableInstant readableInstant70 = null;
        int int71 = property23.getDifference(readableInstant70);
        org.joda.time.DateTime dateTime72 = property23.roundHalfCeilingCopy();
        boolean boolean73 = dateTime12.isBefore((org.joda.time.ReadableInstant) dateTime72);
        int int74 = dateTime72.getDayOfYear();
        org.joda.time.Chronology chronology75 = null;
        org.joda.time.DateTime dateTime76 = new org.joda.time.DateTime(chronology75);
        int int77 = dateTime76.getYearOfCentury();
        int int78 = dateTime76.getWeekyear();
        org.joda.time.DateTime dateTime80 = dateTime76.plus((long) 15);
        org.joda.time.DateTime dateTime81 = dateTime76.withEarlierOffsetAtOverlap();
        int int82 = dateTime81.getDayOfWeek();
        int int83 = dateTime81.getMonthOfYear();
        org.joda.time.Period period84 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime72, (org.joda.time.ReadableInstant) dateTime81);
        org.joda.time.Chronology chronology85 = dateTime72.getChronology();
        org.joda.time.DateTimeField dateTimeField86 = chronology85.dayOfWeek();
        org.joda.time.DurationField durationField87 = chronology85.minutes();
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Tue Feb 22 00:00:00 GMT 2022");
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 22 + "'", int15 == 22);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2022 + "'", int16 == 2022);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(mutableDateTime25);
        org.junit.Assert.assertNotNull(mutableDateTime26);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 22 + "'", int43 == 22);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertNotNull(period48);
        org.junit.Assert.assertNotNull(duration50);
        org.junit.Assert.assertNotNull(duration53);
        org.junit.Assert.assertNotNull(duration54);
        org.junit.Assert.assertNotNull(periodType57);
        org.junit.Assert.assertNotNull(durationFieldType60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "PeriodType[YearDayTime]" + "'", str61, "PeriodType[YearDayTime]");
        org.junit.Assert.assertNotNull(property66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long68 + "' != '" + 1645514640603L + "'", long68 == 1645514640603L);
        org.junit.Assert.assertTrue("'" + long69 + "' != '" + 0L + "'", long69 == 0L);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 1 + "'", int74 == 1);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 22 + "'", int77 == 22);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 2022 + "'", int78 == 2022);
        org.junit.Assert.assertNotNull(dateTime80);
        org.junit.Assert.assertNotNull(dateTime81);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 2 + "'", int82 == 2);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 2 + "'", int83 == 2);
        org.junit.Assert.assertNotNull(chronology85);
        org.junit.Assert.assertNotNull(dateTimeField86);
        org.junit.Assert.assertNotNull(durationField87);
    }

    @Test
    public void test07939() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07939");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.Instant instant2 = instant0.withMillis(0L);
        org.joda.time.Duration duration4 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period5 = duration4.toPeriod();
        org.joda.time.Duration duration8 = duration4.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Instant instant9 = instant2.plus((org.joda.time.ReadableDuration) duration8);
        long long10 = instant9.getMillis();
        org.joda.time.Chronology chronology11 = instant9.getChronology();
        org.joda.time.Instant instant12 = new org.joda.time.Instant();
        org.joda.time.Instant instant14 = instant12.withMillis(0L);
        org.joda.time.DateTime dateTime15 = instant14.toDateTime();
        org.joda.time.Instant instant16 = new org.joda.time.Instant();
        org.joda.time.Instant instant18 = instant16.withMillis(0L);
        org.joda.time.DateTime dateTime19 = instant18.toDateTime();
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime((long) 1);
        org.joda.time.PeriodType periodType22 = org.joda.time.PeriodType.months();
        org.joda.time.Period period23 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime19, (org.joda.time.ReadableInstant) dateTime21, periodType22);
        boolean boolean24 = dateTime15.isBefore((org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.Period period25 = new org.joda.time.Period((org.joda.time.ReadableInstant) instant9, (org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.Duration duration27 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period28 = duration27.toPeriod();
        org.joda.time.Duration duration31 = duration27.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime(chronology32);
        org.joda.time.DateTime dateTime35 = dateTime33.plusMinutes(15);
        org.joda.time.Interval interval36 = duration31.toIntervalTo((org.joda.time.ReadableInstant) dateTime35);
        org.joda.time.Instant instant37 = instant9.minus((org.joda.time.ReadableDuration) duration31);
        org.joda.time.DateTime dateTime38 = instant9.toDateTimeISO();
        org.joda.time.MutableDateTime mutableDateTime39 = org.joda.time.MutableDateTime.now();
        java.lang.Object obj40 = mutableDateTime39.clone();
        mutableDateTime39.setTime((long) 46);
        org.joda.time.MutableDateTime.Property property43 = mutableDateTime39.dayOfWeek();
        mutableDateTime39.setMillisOfDay(2);
        org.joda.time.MutableDateTime.Property property46 = mutableDateTime39.yearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime47 = property46.roundCeiling();
        mutableDateTime47.setMillisOfDay(49);
        org.joda.time.Period period50 = new org.joda.time.Period((org.joda.time.ReadableInstant) instant9, (org.joda.time.ReadableInstant) mutableDateTime47);
        org.joda.time.Period period52 = period50.plusYears(356);
        org.joda.time.Period period53 = period52.toPeriod();
        org.joda.time.LocalTime localTime54 = org.joda.time.LocalTime.MIDNIGHT;
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.DateTime dateTime56 = new org.joda.time.DateTime(chronology55);
        org.joda.time.DateTime dateTime58 = dateTime56.plusMinutes(15);
        org.joda.time.Chronology chronology59 = dateTime56.getChronology();
        org.joda.time.DurationField durationField60 = chronology59.hours();
        boolean boolean61 = localTime54.equals((java.lang.Object) durationField60);
        org.joda.time.DurationFieldType durationFieldType62 = durationField60.getType();
        boolean boolean63 = period52.isSupported(durationFieldType62);
        org.junit.Assert.assertNotNull(instant2);
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(instant9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 86400000L + "'", long10 == 86400000L);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(instant14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(instant18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(periodType22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(interval36);
        org.junit.Assert.assertNotNull(instant37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(mutableDateTime39);
        org.junit.Assert.assertNotNull(obj40);
// flaky:         org.junit.Assert.assertEquals(obj40.toString(), "2022-02-22T07:24:00.685Z");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj40), "2022-02-22T07:24:00.685Z");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj40), "2022-02-22T07:24:00.685Z");
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(mutableDateTime47);
        org.junit.Assert.assertNotNull(period52);
        org.junit.Assert.assertNotNull(period53);
        org.junit.Assert.assertNotNull(localTime54);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(chronology59);
        org.junit.Assert.assertNotNull(durationField60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(durationFieldType62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
    }

    @Test
    public void test07940() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07940");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(chronology2);
        int int4 = dateTime3.getYearOfCentury();
        int int5 = dateTime3.getWeekyear();
        org.joda.time.DateTime dateTime6 = dateTime3.withEarlierOffsetAtOverlap();
        java.lang.String str7 = dateTime6.toString();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime(chronology8);
        int int10 = dateTime9.getYearOfCentury();
        int int11 = dateTime9.getWeekyear();
        org.joda.time.DateTime dateTime12 = dateTime9.withEarlierOffsetAtOverlap();
        java.lang.String str13 = dateTime12.toString();
        org.joda.time.MutableDateTime mutableDateTime14 = dateTime12.toMutableDateTime();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.UTC;
        boolean boolean16 = dateTimeZone15.isFixed();
        mutableDateTime14.setZoneRetainFields(dateTimeZone15);
        org.joda.time.DateTime dateTime18 = dateTime6.toDateTime(dateTimeZone15);
        long long20 = dateTimeZone15.nextTransition((long) 21);
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime(3155760000000L, dateTimeZone15);
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.PeriodType periodType25 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod26 = new org.joda.time.MutablePeriod(readableInstant23, readableInstant24, periodType25);
        org.joda.time.LocalDateTime localDateTime27 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime29 = localDateTime27.withHourOfDay(10);
        org.joda.time.LocalDateTime.Property property30 = localDateTime27.hourOfDay();
        org.joda.time.DateTimeField dateTimeField31 = property30.getField();
        boolean boolean32 = mutablePeriod26.equals((java.lang.Object) dateTimeField31);
        java.lang.Object obj34 = null;
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime(obj34);
        org.joda.time.LocalDateTime localDateTime36 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime38 = localDateTime36.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime40 = localDateTime38.withHourOfDay(10);
        org.joda.time.DateTimeField dateTimeField42 = localDateTime40.getField((int) (byte) 0);
        long long44 = dateTimeField42.roundHalfEven((long) 1);
        int int45 = dateTime35.get(dateTimeField42);
        org.joda.time.LocalDateTime localDateTime46 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime48 = localDateTime46.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime50 = localDateTime48.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime52 = localDateTime50.withCenturyOfEra((int) 'a');
        java.util.Locale locale54 = java.util.Locale.GERMAN;
        java.lang.String str55 = locale54.getDisplayName();
        java.lang.String str56 = dateTimeField42.getAsText((org.joda.time.ReadablePartial) localDateTime50, 53, locale54);
        java.lang.String str58 = locale54.getExtension('a');
        java.lang.String str59 = dateTimeField31.getAsText((long) 36950209, locale54);
        java.lang.String str60 = dateTimeZone15.getShortName(4801285114273L, locale54);
        java.lang.String str61 = dateTimeZone15.toString();
        org.joda.time.LocalDateTime localDateTime62 = new org.joda.time.LocalDateTime(1645514346000L, dateTimeZone15);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 22 + "'", int4 == 22);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2022 + "'", int5 == 2022);
        org.junit.Assert.assertNotNull(dateTime6);
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "2022-02-22T07:24:00.720Z" + "'", str7, "2022-02-22T07:24:00.720Z");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 22 + "'", int10 == 22);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2022 + "'", int11 == 2022);
        org.junit.Assert.assertNotNull(dateTime12);
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "2022-02-22T07:24:00.720Z" + "'", str13, "2022-02-22T07:24:00.720Z");
        org.junit.Assert.assertNotNull(mutableDateTime14);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 21L + "'", long20 == 21L);
        org.junit.Assert.assertNotNull(periodType25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 0L + "'", long44 == 0L);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 2022 + "'", int45 == 2022);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "de");
// flaky:         org.junit.Assert.assertEquals("'" + str55 + "' != '" + "\u5fb7\u6587" + "'", str55, "\u5fb7\u6587");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "53" + "'", str56, "53");
        org.junit.Assert.assertNull(str58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "10" + "'", str59, "10");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "+00:00" + "'", str60, "+00:00");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "UTC" + "'", str61, "UTC");
    }

    @Test
    public void test07941() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07941");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 1, chronology1);
        int int3 = dateTime2.getMinuteOfDay();
        org.joda.time.Instant instant4 = dateTime2.toInstant();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime(chronology5);
        int int7 = dateTime6.getYearOfCentury();
        int int8 = dateTime6.getWeekyear();
        org.joda.time.DateTime dateTime9 = dateTime6.withEarlierOffsetAtOverlap();
        java.lang.String str10 = dateTime9.toString();
        org.joda.time.MutableDateTime mutableDateTime11 = dateTime9.toMutableDateTime();
        org.joda.time.Period period12 = new org.joda.time.Period((org.joda.time.ReadableInstant) instant4, (org.joda.time.ReadableInstant) dateTime9);
        org.joda.time.LocalTime localTime13 = dateTime9.toLocalTime();
        org.joda.time.DateTime dateTime15 = dateTime9.plus(825239635056000000L);
        java.lang.Class<?> wildcardClass16 = dateTime15.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(instant4);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 22 + "'", int7 == 22);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2022 + "'", int8 == 2022);
        org.junit.Assert.assertNotNull(dateTime9);
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "2022-02-22T07:24:00.748Z" + "'", str10, "2022-02-22T07:24:00.748Z");
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test07942() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07942");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property1 = mutableDateTime0.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime2 = property1.getMutableDateTime();
        org.joda.time.DateTimeField dateTimeField3 = property1.getField();
        int int4 = property1.getLeapAmount();
        org.joda.time.MutableDateTime mutableDateTime6 = property1.add((int) (byte) 1);
        org.joda.time.MutableDateTime mutableDateTime8 = property1.add((int) (short) 1);
        org.joda.time.MutableDateTime mutableDateTime10 = property1.addWrapField(86399);
        org.joda.time.MutableDateTime mutableDateTime11 = property1.roundCeiling();
        mutableDateTime11.addDays(26500);
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(mutableDateTime2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(mutableDateTime8);
        org.junit.Assert.assertNotNull(mutableDateTime10);
        org.junit.Assert.assertNotNull(mutableDateTime11);
    }

    @Test
    public void test07943() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07943");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone.setDefault(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) 1);
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period6 = duration5.toPeriod();
        org.joda.time.Duration duration9 = duration5.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Period period10 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime3, (org.joda.time.ReadableDuration) duration9);
        org.joda.time.Duration duration12 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration14 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration17 = duration14.withDurationAdded((long) (short) 100, (int) ' ');
        boolean boolean18 = duration12.isLongerThan((org.joda.time.ReadableDuration) duration17);
        org.joda.time.Minutes minutes19 = duration12.toStandardMinutes();
        org.joda.time.Period period20 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime3, (org.joda.time.ReadableDuration) duration12);
        org.joda.time.MutableDateTime mutableDateTime21 = org.joda.time.MutableDateTime.now();
        mutableDateTime21.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime24 = mutableDateTime21.copy();
        org.joda.time.MutableDateTime.Property property25 = mutableDateTime21.weekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime26 = property25.roundHalfFloor();
        org.joda.time.MutableDateTime mutableDateTime28 = property25.add((long) (byte) 10);
        int int29 = mutableDateTime28.getCenturyOfEra();
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.LocalDateTime localDateTime32 = new org.joda.time.LocalDateTime((long) (byte) -1, chronology31);
        org.joda.time.LocalDateTime localDateTime34 = localDateTime32.plusMonths(46);
        org.joda.time.DateTimeFieldType dateTimeFieldType35 = org.joda.time.DateTimeFieldType.minuteOfDay();
        int int36 = localDateTime34.get(dateTimeFieldType35);
        org.joda.time.LocalDateTime localDateTime38 = localDateTime34.plusMinutes(7);
        org.joda.time.PeriodType periodType41 = null;
        org.joda.time.Period period42 = new org.joda.time.Period((long) 100, 1L, periodType41);
        org.joda.time.Period period44 = period42.minusSeconds((-1));
        org.joda.time.Period period46 = period44.multipliedBy((int) '#');
        org.joda.time.LocalDateTime localDateTime47 = localDateTime34.minus((org.joda.time.ReadablePeriod) period46);
        org.joda.time.Period period49 = period46.withWeeks(7);
        org.joda.time.MutablePeriod mutablePeriod58 = new org.joda.time.MutablePeriod(999, 12, 8, (int) (byte) 10, 5, (-292275054), 15, 50);
        org.joda.time.Period period59 = period49.withFields((org.joda.time.ReadablePeriod) mutablePeriod58);
        mutableDateTime28.add((org.joda.time.ReadablePeriod) mutablePeriod58);
        boolean boolean61 = duration12.equals((java.lang.Object) mutablePeriod58);
        org.joda.time.MutableDateTime mutableDateTime62 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property63 = mutableDateTime62.centuryOfEra();
        org.joda.time.MutableDateTime.Property property64 = mutableDateTime62.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime65 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime67 = localDateTime65.withHourOfDay(10);
        org.joda.time.LocalDateTime.Property property68 = localDateTime65.hourOfDay();
        org.joda.time.LocalDateTime localDateTime70 = localDateTime65.plusMillis((int) (byte) 0);
        org.joda.time.PeriodType periodType73 = null;
        org.joda.time.Period period74 = new org.joda.time.Period((long) 100, 1L, periodType73);
        org.joda.time.Period period76 = period74.minusSeconds((-1));
        org.joda.time.LocalDateTime localDateTime77 = localDateTime70.minus((org.joda.time.ReadablePeriod) period74);
        mutableDateTime62.add((org.joda.time.ReadablePeriod) period74, 0);
        org.joda.time.Chronology chronology81 = null;
        org.joda.time.DateTime dateTime82 = new org.joda.time.DateTime((long) 1, chronology81);
        int int83 = dateTime82.getMinuteOfDay();
        mutablePeriod58.setPeriod((org.joda.time.ReadableInstant) mutableDateTime62, (org.joda.time.ReadableInstant) dateTime82);
        org.joda.time.MutablePeriod mutablePeriod85 = new org.joda.time.MutablePeriod((java.lang.Object) mutablePeriod58);
        boolean boolean86 = dateTimeZone0.equals((java.lang.Object) mutablePeriod85);
        java.util.TimeZone timeZone87 = dateTimeZone0.toTimeZone();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(minutes19);
        org.junit.Assert.assertNotNull(mutableDateTime21);
        org.junit.Assert.assertNotNull(mutableDateTime24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(mutableDateTime26);
        org.junit.Assert.assertNotNull(mutableDateTime28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 20 + "'", int29 == 20);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(dateTimeFieldType35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1439 + "'", int36 == 1439);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(period44);
        org.junit.Assert.assertNotNull(period46);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(period49);
        org.junit.Assert.assertNotNull(period59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(mutableDateTime62);
        org.junit.Assert.assertNotNull(property63);
        org.junit.Assert.assertNotNull(property64);
        org.junit.Assert.assertNotNull(localDateTime65);
        org.junit.Assert.assertNotNull(localDateTime67);
        org.junit.Assert.assertNotNull(property68);
        org.junit.Assert.assertNotNull(localDateTime70);
        org.junit.Assert.assertNotNull(period76);
        org.junit.Assert.assertNotNull(localDateTime77);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(timeZone87);
// flaky:         org.junit.Assert.assertEquals(timeZone87.getDisplayName(), "\u534f\u8c03\u4e16\u754c\u65f6\u95f4");
    }

    @Test
    public void test07944() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07944");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardMinutes((long) 36946953);
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardDays((long) (byte) 1);
        java.lang.String str6 = duration5.toString();
        boolean boolean7 = duration3.isShorterThan((org.joda.time.ReadableDuration) duration5);
        org.joda.time.Duration duration9 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period10 = duration9.toPeriod();
        org.joda.time.Duration duration12 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration14 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration17 = duration14.withDurationAdded((long) (short) 100, (int) ' ');
        boolean boolean18 = duration12.isLongerThan((org.joda.time.ReadableDuration) duration17);
        org.joda.time.Duration duration19 = duration9.minus((org.joda.time.ReadableDuration) duration12);
        boolean boolean20 = duration3.isShorterThan((org.joda.time.ReadableDuration) duration19);
        org.joda.time.ReadableDuration readableDuration21 = null;
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.Period period23 = new org.joda.time.Period(readableDuration21, readableInstant22);
        org.joda.time.Period period25 = period23.withDays((int) (byte) 1);
        org.joda.time.Duration duration27 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Hours hours28 = duration27.toStandardHours();
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime(chronology29);
        int int31 = dateTime30.getSecondOfMinute();
        org.joda.time.MutablePeriod mutablePeriod32 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration27, (org.joda.time.ReadableInstant) dateTime30);
        org.joda.time.Duration duration33 = period23.toDurationFrom((org.joda.time.ReadableInstant) dateTime30);
        org.joda.time.Duration duration35 = duration19.withDurationAdded((org.joda.time.ReadableDuration) duration33, (int) ' ');
        int int36 = duration1.compareTo((org.joda.time.ReadableDuration) duration19);
        org.joda.time.Duration duration38 = duration19.plus(232051062L);
        org.joda.time.Duration duration39 = duration38.toDuration();
        org.joda.time.Duration duration42 = duration39.withDurationAdded((long) 26290, 184);
        org.joda.time.Period period44 = org.joda.time.Period.weeks(2021);
        org.joda.time.Period period46 = period44.minusYears(100);
        org.joda.time.Period period48 = period44.plusSeconds(45);
        org.joda.time.Duration duration49 = period48.toStandardDuration();
        int int50 = duration39.compareTo((org.joda.time.ReadableDuration) duration49);
        org.joda.time.Instant instant51 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime52 = instant51.toMutableDateTime();
        org.joda.time.MutableDateTime mutableDateTime53 = instant51.toMutableDateTimeISO();
        org.joda.time.Interval interval54 = duration49.toIntervalFrom((org.joda.time.ReadableInstant) mutableDateTime53);
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "PT86400S" + "'", str6, "PT86400S");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertNotNull(hours28);
// flaky:         org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertNotNull(duration39);
        org.junit.Assert.assertNotNull(duration42);
        org.junit.Assert.assertNotNull(period44);
        org.junit.Assert.assertNotNull(period46);
        org.junit.Assert.assertNotNull(period48);
        org.junit.Assert.assertNotNull(duration49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(mutableDateTime52);
        org.junit.Assert.assertNotNull(mutableDateTime53);
        org.junit.Assert.assertNotNull(interval54);
    }

    @Test
    public void test07945() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07945");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) (byte) -1);
        int int2 = localDate1.getYearOfEra();
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.UTC;
        java.util.TimeZone timeZone4 = dateTimeZone3.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.UTC;
        long long7 = dateTimeZone3.getMillisKeepLocal(dateTimeZone5, (long) 44);
        org.joda.time.DateTime dateTime8 = localDate1.toDateTimeAtMidnight(dateTimeZone3);
        java.util.Locale locale10 = null;
        java.lang.String str11 = dateTimeZone3.getName(946000L, locale10);
        org.joda.time.MutableDateTime mutableDateTime12 = new org.joda.time.MutableDateTime(dateTimeZone3);
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime(dateTimeZone3);
        org.joda.time.ReadableDuration readableDuration14 = null;
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.Period period16 = new org.joda.time.Period(readableDuration14, readableInstant15);
        org.joda.time.PeriodType periodType19 = null;
        org.joda.time.Period period20 = new org.joda.time.Period((long) 100, 1L, periodType19);
        org.joda.time.Period period22 = period20.minusSeconds((-1));
        java.lang.String str23 = period20.toString();
        org.joda.time.Period period24 = period20.toPeriod();
        org.joda.time.PeriodType periodType25 = period20.getPeriodType();
        org.joda.time.Period period26 = period16.normalizedStandard(periodType25);
        org.joda.time.Period period28 = period26.withSeconds(10);
        org.joda.time.Minutes minutes29 = period26.toStandardMinutes();
        org.joda.time.DurationFieldType[] durationFieldTypeArray30 = period26.getFieldTypes();
        org.joda.time.Period period32 = period26.withYears(999);
        org.joda.time.Period period34 = period32.multipliedBy(443);
        org.joda.time.Period period36 = period32.minusMonths(1439);
        org.joda.time.DateTime dateTime37 = dateTime13.plus((org.joda.time.ReadablePeriod) period32);
        org.joda.time.DateTime dateTime39 = dateTime13.minusMinutes(26184);
        org.joda.time.DateTime.Property property40 = dateTime13.weekOfWeekyear();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1969 + "'", int2 == 1969);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(timeZone4);
// flaky:         org.junit.Assert.assertEquals(timeZone4.getDisplayName(), "\u534f\u8c03\u4e16\u754c\u65f6\u95f4");
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 44L + "'", long7 == 44L);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+00:00" + "'", str11, "+00:00");
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "PT0.099S" + "'", str23, "PT0.099S");
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertNotNull(periodType25);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(minutes29);
        org.junit.Assert.assertNotNull(durationFieldTypeArray30);
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertNotNull(period34);
        org.junit.Assert.assertNotNull(period36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(property40);
    }

    @Test
    public void test07946() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07946");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.add((long) 'a');
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime0.yearOfCentury();
        mutableDateTime0.addSeconds(0);
        org.joda.time.Duration duration7 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Hours hours8 = duration7.toStandardHours();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(chronology9);
        int int11 = dateTime10.getSecondOfMinute();
        org.joda.time.MutablePeriod mutablePeriod12 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration7, (org.joda.time.ReadableInstant) dateTime10);
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((long) 1);
        org.joda.time.Instant instant15 = new org.joda.time.Instant();
        org.joda.time.Instant instant17 = instant15.withMillis(0L);
        org.joda.time.DateTime dateTime18 = instant17.toDateTime();
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((long) 1);
        org.joda.time.PeriodType periodType21 = org.joda.time.PeriodType.months();
        org.joda.time.Period period22 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime18, (org.joda.time.ReadableInstant) dateTime20, periodType21);
        org.joda.time.Period period23 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration7, (org.joda.time.ReadableInstant) dateTime14, periodType21);
        org.joda.time.Duration duration24 = new org.joda.time.Duration((org.joda.time.ReadableInstant) mutableDateTime0, (org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime((long) 1);
        org.joda.time.Duration duration28 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period29 = duration28.toPeriod();
        org.joda.time.Duration duration32 = duration28.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Period period33 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime26, (org.joda.time.ReadableDuration) duration32);
        org.joda.time.Instant instant34 = dateTime26.toInstant();
        org.joda.time.DateTime dateTime37 = dateTime26.withDurationAdded((long) 3, 4);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime(chronology38);
        int int40 = dateTime39.getYearOfCentury();
        org.joda.time.DateTime dateTime42 = dateTime39.withSecondOfMinute(53);
        org.joda.time.Duration duration44 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period45 = duration44.toPeriod();
        org.joda.time.Duration duration47 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration50 = duration47.withDurationAdded((long) (short) 100, (int) ' ');
        org.joda.time.Duration duration51 = duration44.minus((org.joda.time.ReadableDuration) duration50);
        org.joda.time.ReadableInstant readableInstant52 = null;
        org.joda.time.ReadableInstant readableInstant53 = null;
        org.joda.time.PeriodType periodType54 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod55 = new org.joda.time.MutablePeriod(readableInstant52, readableInstant53, periodType54);
        org.joda.time.DurationFieldType durationFieldType57 = periodType54.getFieldType((int) (short) 0);
        java.lang.String str58 = periodType54.toString();
        org.joda.time.Period period59 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime39, (org.joda.time.ReadableDuration) duration44, periodType54);
        org.joda.time.Period period60 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime0, (org.joda.time.ReadableInstant) dateTime37, periodType54);
        java.lang.String str61 = periodType54.getName();
        org.joda.time.PeriodType periodType62 = periodType54.withMillisRemoved();
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(hours8);
// flaky:         org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(instant17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(periodType21);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertNotNull(instant34);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 22 + "'", int40 == 22);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(duration44);
        org.junit.Assert.assertNotNull(period45);
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertNotNull(duration50);
        org.junit.Assert.assertNotNull(duration51);
        org.junit.Assert.assertNotNull(periodType54);
        org.junit.Assert.assertNotNull(durationFieldType57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "PeriodType[YearDayTime]" + "'", str58, "PeriodType[YearDayTime]");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "YearDayTime" + "'", str61, "YearDayTime");
        org.junit.Assert.assertNotNull(periodType62);
    }

    @Test
    public void test07947() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07947");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime(dateTimeZone0);
        org.joda.time.LocalTime localTime3 = localTime1.minusHours((int) (byte) 100);
        org.joda.time.LocalTime localTime5 = localTime3.withHourOfDay(0);
        org.joda.time.LocalTime localTime7 = localTime5.withMillisOfSecond(44);
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.Period period10 = new org.joda.time.Period(readableDuration8, readableInstant9);
        org.joda.time.Period period12 = period10.withDays((int) (byte) 1);
        org.joda.time.Period period14 = period10.withMonths(26148);
        org.joda.time.MutablePeriod mutablePeriod15 = period10.toMutablePeriod();
        org.joda.time.LocalTime localTime16 = localTime5.minus((org.joda.time.ReadablePeriod) mutablePeriod15);
        org.joda.time.LocalTime localTime18 = localTime16.plusMinutes((int) (short) 10);
        int int19 = localTime16.getSecondOfMinute();
        int int20 = localTime16.getMinuteOfHour();
        org.joda.time.MutableDateTime mutableDateTime21 = org.joda.time.MutableDateTime.now();
        java.lang.Object obj22 = mutableDateTime21.clone();
        org.joda.time.MutableDateTime.Property property23 = mutableDateTime21.millisOfDay();
        boolean boolean24 = localTime16.equals((java.lang.Object) mutableDateTime21);
        int int25 = mutableDateTime21.getWeekyear();
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.UTC;
        java.util.Locale locale29 = java.util.Locale.GERMAN;
        java.lang.String str30 = locale29.getDisplayName();
        java.lang.String str31 = dateTimeZone27.getName(100L, locale29);
        org.joda.time.MutableDateTime mutableDateTime32 = new org.joda.time.MutableDateTime(948227L, dateTimeZone27);
        org.joda.time.MutableDateTime mutableDateTime33 = mutableDateTime21.toMutableDateTime(dateTimeZone27);
        mutableDateTime21.setDate(1107514L);
        org.joda.time.MutableDateTime.Property property36 = mutableDateTime21.year();
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(mutablePeriod15);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertNotNull(localTime18);
// flaky:         org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + int20 + "' != '" + 24 + "'", int20 == 24);
        org.junit.Assert.assertNotNull(mutableDateTime21);
        org.junit.Assert.assertNotNull(obj22);
// flaky:         org.junit.Assert.assertEquals(obj22.toString(), "2022-02-22T07:24:00.893Z");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj22), "2022-02-22T07:24:00.893Z");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj22), "2022-02-22T07:24:00.893Z");
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2022 + "'", int25 == 2022);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "de");
// flaky:         org.junit.Assert.assertEquals("'" + str30 + "' != '" + "\u5fb7\u6587" + "'", str30, "\u5fb7\u6587");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "+00:00" + "'", str31, "+00:00");
        org.junit.Assert.assertNotNull(mutableDateTime33);
        org.junit.Assert.assertNotNull(property36);
    }

    @Test
    public void test07948() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07948");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.withHourOfDay(10);
        org.joda.time.DateTimeField dateTimeField6 = localDateTime4.getField((int) (byte) 0);
        java.lang.String str7 = dateTimeField6.toString();
        org.joda.time.DurationField durationField8 = dateTimeField6.getDurationField();
        boolean boolean9 = durationField8.isPrecise();
        long long11 = durationField8.getMillis(26565879L);
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "DateTimeField[year]" + "'", str7, "DateTimeField[year]");
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 838338168440808000L + "'", long11 == 838338168440808000L);
    }

    @Test
    public void test07949() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07949");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) 1);
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period4 = duration3.toPeriod();
        org.joda.time.Duration duration7 = duration3.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Period period8 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime1, (org.joda.time.ReadableDuration) duration7);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(chronology9);
        int int11 = dateTime10.getSecondOfMinute();
        org.joda.time.Interval interval12 = duration7.toIntervalTo((org.joda.time.ReadableInstant) dateTime10);
        org.joda.time.Duration duration13 = duration7.toDuration();
        org.joda.time.ReadableDuration readableDuration14 = null;
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.Period period16 = new org.joda.time.Period(readableDuration14, readableInstant15);
        org.joda.time.PeriodType periodType19 = null;
        org.joda.time.Period period20 = new org.joda.time.Period((long) 100, 1L, periodType19);
        org.joda.time.Period period22 = period20.minusSeconds((-1));
        java.lang.String str23 = period20.toString();
        org.joda.time.Period period24 = period20.toPeriod();
        org.joda.time.PeriodType periodType25 = period20.getPeriodType();
        org.joda.time.Period period26 = period16.normalizedStandard(periodType25);
        java.lang.String str27 = periodType25.getName();
        java.lang.String str28 = periodType25.toString();
        org.joda.time.PeriodType periodType29 = periodType25.withDaysRemoved();
        org.joda.time.MutablePeriod mutablePeriod30 = new org.joda.time.MutablePeriod((java.lang.Object) duration13, periodType29);
        java.lang.String str31 = duration13.toString();
        org.joda.time.Instant instant32 = new org.joda.time.Instant();
        org.joda.time.Instant instant34 = instant32.withMillis(0L);
        org.joda.time.DateTime dateTime35 = instant34.toDateTime();
        org.joda.time.Duration duration37 = org.joda.time.Duration.standardMinutes((long) (byte) -1);
        org.joda.time.Instant instant39 = instant34.withDurationAdded((org.joda.time.ReadableDuration) duration37, 0);
        org.joda.time.Instant instant42 = instant39.withDurationAdded(25L, 26158);
        org.joda.time.Interval interval43 = duration13.toIntervalTo((org.joda.time.ReadableInstant) instant39);
        org.joda.time.MutableDateTime mutableDateTime44 = instant39.toMutableDateTime();
        mutableDateTime44.addWeeks((int) ' ');
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(duration7);
// flaky:         org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "PT0.099S" + "'", str23, "PT0.099S");
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertNotNull(periodType25);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "Standard" + "'", str27, "Standard");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "PeriodType[Standard]" + "'", str28, "PeriodType[Standard]");
        org.junit.Assert.assertNotNull(periodType29);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "PT86400S" + "'", str31, "PT86400S");
        org.junit.Assert.assertNotNull(instant34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertNotNull(instant39);
        org.junit.Assert.assertNotNull(instant42);
        org.junit.Assert.assertNotNull(interval43);
        org.junit.Assert.assertNotNull(mutableDateTime44);
    }

    @Test
    public void test07950() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07950");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime(chronology3);
        org.joda.time.DateTime dateTime6 = dateTime4.plusMinutes(15);
        org.joda.time.Chronology chronology7 = dateTime4.getChronology();
        java.lang.String str8 = chronology7.toString();
        org.joda.time.LocalTime localTime9 = org.joda.time.LocalTime.fromMillisOfDay((long) (short) -1, chronology7);
        org.joda.time.DurationField durationField10 = chronology7.minutes();
        org.joda.time.MutablePeriod mutablePeriod11 = new org.joda.time.MutablePeriod(0L, chronology7);
        org.joda.time.MutableDateTime mutableDateTime12 = new org.joda.time.MutableDateTime((java.lang.Object) "2022-02-22T10:17:19.125", chronology7);
        org.joda.time.DateTimeField dateTimeField13 = chronology7.yearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.Instant instant16 = new org.joda.time.Instant();
        org.joda.time.Instant instant18 = instant16.withMillis(0L);
        org.joda.time.Chronology chronology19 = instant18.getChronology();
        org.joda.time.DurationField durationField20 = chronology19.eras();
        org.joda.time.LocalTime localTime21 = org.joda.time.LocalTime.now(chronology19);
        org.joda.time.DurationField durationField22 = chronology19.eras();
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime((long) 44, chronology19);
        org.joda.time.DateTimeField dateTimeField24 = dateTimeFieldType14.getField(chronology19);
        org.joda.time.PeriodType periodType27 = null;
        org.joda.time.Period period28 = new org.joda.time.Period((long) 100, 1L, periodType27);
        org.joda.time.Period period30 = period28.minusSeconds((-1));
        java.lang.String str31 = period28.toString();
        long long34 = chronology19.add((org.joda.time.ReadablePeriod) period28, (long) ' ', (int) 'a');
        org.joda.time.Period period36 = period28.minusHours((-292275054));
        org.joda.time.Period period38 = period36.minusHours(2000);
        int int39 = period36.getMinutes();
        org.joda.time.Period period40 = period36.toPeriod();
        org.joda.time.Period period42 = period36.withYears(54);
        org.joda.time.ReadableDuration readableDuration43 = null;
        org.joda.time.ReadableInstant readableInstant44 = null;
        org.joda.time.Period period45 = new org.joda.time.Period(readableDuration43, readableInstant44);
        org.joda.time.PeriodType periodType48 = null;
        org.joda.time.Period period49 = new org.joda.time.Period((long) 100, 1L, periodType48);
        org.joda.time.Period period51 = period49.minusSeconds((-1));
        java.lang.String str52 = period49.toString();
        org.joda.time.Period period53 = period49.toPeriod();
        org.joda.time.PeriodType periodType54 = period49.getPeriodType();
        org.joda.time.Period period55 = period45.normalizedStandard(periodType54);
        org.joda.time.Period period57 = period55.withSeconds(10);
        org.joda.time.PeriodType periodType58 = period57.getPeriodType();
        org.joda.time.Period period59 = period36.normalizedStandard(periodType58);
        org.joda.time.Period period61 = period59.plusMinutes(26170959);
        org.joda.time.Period period63 = period59.withSeconds(26450965);
        // The following exception was thrown during execution in test generation
        try {
            long long66 = chronology7.add((org.joda.time.ReadablePeriod) period63, 12084054L, 37154493);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Multiplication overflows a long: 64638860415876 * 604800000");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "ISOChronology[UTC]" + "'", str8, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertNotNull(instant18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(localTime21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "PT0.099S" + "'", str31, "PT0.099S");
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + (-9571L) + "'", long34 == (-9571L));
        org.junit.Assert.assertNotNull(period36);
        org.junit.Assert.assertNotNull(period38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(period40);
        org.junit.Assert.assertNotNull(period42);
        org.junit.Assert.assertNotNull(period51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "PT0.099S" + "'", str52, "PT0.099S");
        org.junit.Assert.assertNotNull(period53);
        org.junit.Assert.assertNotNull(periodType54);
        org.junit.Assert.assertNotNull(period55);
        org.junit.Assert.assertNotNull(period57);
        org.junit.Assert.assertNotNull(periodType58);
        org.junit.Assert.assertNotNull(period59);
        org.junit.Assert.assertNotNull(period61);
        org.junit.Assert.assertNotNull(period63);
    }

    @Test
    public void test07951() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07951");
        org.joda.time.format.DateTimePrinter dateTimePrinter1 = null;
        org.joda.time.format.DateTimeParser dateTimeParser2 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter1, dateTimeParser2);
        org.joda.time.Instant instant4 = new org.joda.time.Instant();
        org.joda.time.Instant instant6 = instant4.withMillis(0L);
        org.joda.time.Chronology chronology7 = instant6.getChronology();
        org.joda.time.DurationField durationField8 = chronology7.eras();
        long long12 = chronology7.add(0L, (long) 2022, (int) '4');
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = dateTimeFormatter3.withChronology(chronology7);
        org.joda.time.Chronology chronology14 = dateTimeFormatter3.getChronolgy();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter16 = dateTimeFormatter3.withDefaultYear(999);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter18 = dateTimeFormatter3.withDefaultYear((int) ' ');
        org.joda.time.format.DateTimeFormatter dateTimeFormatter20 = dateTimeFormatter3.withPivotYear(56);
        org.joda.time.format.DateTimePrinter dateTimePrinter21 = dateTimeFormatter20.getPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter23 = dateTimeFormatter20.withDefaultYear((int) (short) 1);
        org.joda.time.Chronology chronology24 = dateTimeFormatter23.getChronolgy();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime25 = org.joda.time.MutableDateTime.parse("28", dateTimeFormatter23);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(instant6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 105144L + "'", long12 == 105144L);
        org.junit.Assert.assertNotNull(dateTimeFormatter13);
        org.junit.Assert.assertNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeFormatter16);
        org.junit.Assert.assertNotNull(dateTimeFormatter18);
        org.junit.Assert.assertNotNull(dateTimeFormatter20);
        org.junit.Assert.assertNull(dateTimePrinter21);
        org.junit.Assert.assertNotNull(dateTimeFormatter23);
        org.junit.Assert.assertNull(chronology24);
    }

    @Test
    public void test07952() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07952");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) (short) -1);
        mutableDateTime1.setSecondOfMinute(53);
        mutableDateTime1.addMonths(0);
        mutableDateTime1.setYear(26310348);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime1.setDayOfWeek(33650);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 33650 for dayOfWeek must be in the range [1,7]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test07953() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07953");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        int int2 = dateTime1.getYearOfCentury();
        int int3 = dateTime1.getWeekyear();
        org.joda.time.DateTime dateTime5 = dateTime1.plus((long) 15);
        org.joda.time.DateTime.Property property6 = dateTime1.year();
        org.joda.time.DateTime dateTime7 = property6.roundHalfFloorCopy();
        org.joda.time.DateTime.Property property8 = dateTime7.millisOfSecond();
        org.joda.time.MutableDateTime mutableDateTime9 = dateTime7.toMutableDateTime();
        int int10 = dateTime7.getMillisOfSecond();
        org.joda.time.DateTime dateTime11 = dateTime7.withLaterOffsetAtOverlap();
        java.lang.String str12 = dateTime11.toString();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 22 + "'", int2 == 22);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2022 + "'", int3 == 2022);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "2022-01-01T00:00:00.000Z" + "'", str12, "2022-01-01T00:00:00.000Z");
    }

    @Test
    public void test07954() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07954");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.monthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.minuteOfDay();
        boolean boolean3 = localDate0.isSupported(dateTimeFieldType2);
        org.joda.time.LocalDate.Property property4 = localDate0.dayOfWeek();
        org.joda.time.MutableDateTime mutableDateTime5 = org.joda.time.MutableDateTime.now();
        mutableDateTime5.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime8 = mutableDateTime5.copy();
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime5.weekOfWeekyear();
        org.joda.time.MutableDateTime.Property property10 = mutableDateTime5.dayOfYear();
        org.joda.time.MutableDateTime mutableDateTime11 = org.joda.time.MutableDateTime.now();
        mutableDateTime11.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime14 = mutableDateTime11.copy();
        mutableDateTime11.setDate((long) '#');
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property18 = localDate17.monthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = org.joda.time.DateTimeFieldType.minuteOfDay();
        boolean boolean20 = localDate17.isSupported(dateTimeFieldType19);
        int int21 = localDate17.getDayOfYear();
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateMidnight dateMidnight23 = localDate17.toDateMidnight(dateTimeZone22);
        org.joda.time.DateTime dateTime24 = mutableDateTime11.toDateTime(dateTimeZone22);
        org.joda.time.LocalDate localDate25 = org.joda.time.LocalDate.now(dateTimeZone22);
        org.joda.time.PeriodType periodType28 = null;
        org.joda.time.Period period29 = new org.joda.time.Period((long) 100, 1L, periodType28);
        org.joda.time.PeriodType periodType30 = period29.getPeriodType();
        boolean boolean31 = dateTimeZone22.equals((java.lang.Object) periodType30);
        mutableDateTime5.setZoneRetainFields(dateTimeZone22);
        org.joda.time.LocalDate localDate33 = new org.joda.time.LocalDate(dateTimeZone22);
        org.joda.time.DateTime dateTime34 = localDate0.toDateTimeAtStartOfDay(dateTimeZone22);
        org.joda.time.DateMidnight dateMidnight35 = localDate0.toDateMidnight();
        org.joda.time.LocalDate localDate37 = localDate0.plusYears(4);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(mutableDateTime5);
        org.junit.Assert.assertNotNull(mutableDateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertNotNull(mutableDateTime14);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 53 + "'", int21 == 53);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(dateMidnight23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertNotNull(periodType30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateMidnight35);
        org.junit.Assert.assertNotNull(localDate37);
    }

    @Test
    public void test07955() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07955");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime3 = dateTime1.withZoneRetainFields(dateTimeZone2);
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property5 = localDate4.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.UTC;
        java.util.TimeZone timeZone7 = dateTimeZone6.toTimeZone();
        org.joda.time.DateTime dateTime8 = localDate4.toDateTimeAtCurrentTime(dateTimeZone6);
        int int9 = dateTime3.compareTo((org.joda.time.ReadableInstant) dateTime8);
        org.joda.time.DateTime dateTime11 = dateTime8.withDayOfMonth(20);
        org.joda.time.DateTime.Property property12 = dateTime11.hourOfDay();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.UTC;
        java.util.Locale locale16 = java.util.Locale.GERMAN;
        java.lang.String str17 = locale16.getDisplayName();
        java.lang.String str18 = dateTimeZone14.getName(100L, locale16);
        org.joda.time.MutableDateTime mutableDateTime19 = new org.joda.time.MutableDateTime(948227L, dateTimeZone14);
        org.joda.time.MutableDateTime.Property property20 = mutableDateTime19.year();
        mutableDateTime19.addHours(16);
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.ReadableInstant readableInstant27 = null;
        org.joda.time.PeriodType periodType28 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod29 = new org.joda.time.MutablePeriod(readableInstant26, readableInstant27, periodType28);
        org.joda.time.DurationFieldType durationFieldType31 = periodType28.getFieldType((int) (short) 0);
        java.lang.String str32 = periodType28.toString();
        org.joda.time.Instant instant33 = new org.joda.time.Instant();
        org.joda.time.Instant instant35 = instant33.withMillis(0L);
        org.joda.time.Chronology chronology36 = instant35.getChronology();
        org.joda.time.Period period37 = new org.joda.time.Period((long) 53, (long) (-1), periodType28, chronology36);
        org.joda.time.DateTimeField dateTimeField38 = dateTimeFieldType23.getField(chronology36);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime(chronology39);
        org.joda.time.DateTime dateTime42 = dateTime40.plusMinutes(15);
        org.joda.time.Chronology chronology43 = dateTime40.getChronology();
        java.lang.String str44 = chronology43.toString();
        org.joda.time.DateTimeField dateTimeField45 = dateTimeFieldType23.getField(chronology43);
        org.joda.time.DurationField durationField46 = chronology43.centuries();
        org.joda.time.DateTimeField dateTimeField47 = chronology43.millisOfDay();
        mutableDateTime19.setChronology(chronology43);
        org.joda.time.MutableDateTime mutableDateTime49 = dateTime11.toMutableDateTime(chronology43);
        org.joda.time.MutableDateTime.Property property50 = mutableDateTime49.secondOfMinute();
        mutableDateTime49.addWeekyears(26207584);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime49.setDate(15610648, 26452, 26290);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26452 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(timeZone7);
// flaky:         org.junit.Assert.assertEquals(timeZone7.getDisplayName(), "\u534f\u8c03\u4e16\u754c\u65f6\u95f4");
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "de");
// flaky:         org.junit.Assert.assertEquals("'" + str17 + "' != '" + "\u5fb7\u6587" + "'", str17, "\u5fb7\u6587");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "+00:00" + "'", str18, "+00:00");
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertNotNull(periodType28);
        org.junit.Assert.assertNotNull(durationFieldType31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "PeriodType[YearDayTime]" + "'", str32, "PeriodType[YearDayTime]");
        org.junit.Assert.assertNotNull(instant35);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "ISOChronology[UTC]" + "'", str44, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(durationField46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(mutableDateTime49);
        org.junit.Assert.assertNotNull(property50);
    }

    @Test
    public void test07956() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07956");
        org.joda.time.ReadableDuration readableDuration2 = null;
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.Period period4 = new org.joda.time.Period(readableDuration2, readableInstant3);
        org.joda.time.PeriodType periodType7 = null;
        org.joda.time.Period period8 = new org.joda.time.Period((long) 100, 1L, periodType7);
        org.joda.time.Period period10 = period8.minusSeconds((-1));
        java.lang.String str11 = period8.toString();
        org.joda.time.Period period12 = period8.toPeriod();
        org.joda.time.PeriodType periodType13 = period8.getPeriodType();
        org.joda.time.Period period14 = period4.normalizedStandard(periodType13);
        org.joda.time.DurationFieldType durationFieldType15 = null;
        int int16 = periodType13.indexOf(durationFieldType15);
        org.joda.time.Instant instant17 = new org.joda.time.Instant();
        org.joda.time.Instant instant19 = instant17.withMillis(0L);
        org.joda.time.Chronology chronology20 = instant19.getChronology();
        org.joda.time.DurationField durationField21 = chronology20.eras();
        org.joda.time.LocalTime localTime22 = org.joda.time.LocalTime.now(chronology20);
        org.joda.time.DurationField durationField23 = chronology20.eras();
        org.joda.time.DateTimeField dateTimeField24 = chronology20.hourOfDay();
        org.joda.time.MutablePeriod mutablePeriod25 = new org.joda.time.MutablePeriod((long) 12, (long) 292278993, periodType13, chronology20);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.LocalTime localTime27 = new org.joda.time.LocalTime(dateTimeZone26);
        org.joda.time.LocalTime localTime29 = localTime27.minusHours((int) (byte) 100);
        org.joda.time.LocalTime localTime31 = localTime29.withHourOfDay(0);
        org.joda.time.LocalTime localTime33 = localTime31.withMillisOfSecond(44);
        org.joda.time.LocalTime localTime35 = localTime33.plusSeconds(0);
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime37 = localTime33.toDateTimeToday(dateTimeZone36);
        org.joda.time.LocalTime localTime38 = org.joda.time.LocalTime.now(dateTimeZone36);
        org.joda.time.MutableDateTime mutableDateTime39 = org.joda.time.MutableDateTime.now();
        mutableDateTime39.add((long) 'a');
        org.joda.time.Duration duration43 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration45 = org.joda.time.Duration.standardDays((long) (byte) 1);
        java.lang.String str46 = duration45.toString();
        boolean boolean47 = duration43.isShorterThan((org.joda.time.ReadableDuration) duration45);
        org.joda.time.Hours hours48 = duration43.toStandardHours();
        mutableDateTime39.add((org.joda.time.ReadableDuration) duration43, 20);
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.DateTime dateTime52 = new org.joda.time.DateTime(chronology51);
        int int53 = dateTime52.getYearOfCentury();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter54 = null;
        java.lang.String str55 = dateTime52.toString(dateTimeFormatter54);
        org.joda.time.DateTime dateTime57 = dateTime52.minusMonths(22);
        org.joda.time.Instant instant58 = new org.joda.time.Instant();
        org.joda.time.Instant instant60 = instant58.withMillis(0L);
        org.joda.time.Chronology chronology61 = instant60.getChronology();
        org.joda.time.DurationField durationField62 = chronology61.eras();
        org.joda.time.DateTime dateTime63 = dateTime52.withChronology(chronology61);
        org.joda.time.Period period64 = duration43.toPeriod(chronology61);
        org.joda.time.ReadableDuration readableDuration67 = null;
        org.joda.time.ReadableInstant readableInstant68 = null;
        org.joda.time.Period period69 = new org.joda.time.Period(readableDuration67, readableInstant68);
        org.joda.time.PeriodType periodType72 = null;
        org.joda.time.Period period73 = new org.joda.time.Period((long) 100, 1L, periodType72);
        org.joda.time.Period period75 = period73.minusSeconds((-1));
        java.lang.String str76 = period73.toString();
        org.joda.time.Period period77 = period73.toPeriod();
        org.joda.time.PeriodType periodType78 = period73.getPeriodType();
        org.joda.time.Period period79 = period69.normalizedStandard(periodType78);
        java.lang.String str80 = periodType78.getName();
        java.lang.String str81 = periodType78.toString();
        org.joda.time.PeriodType periodType82 = periodType78.withDaysRemoved();
        org.joda.time.PeriodType periodType83 = periodType82.withWeeksRemoved();
        org.joda.time.MutablePeriod mutablePeriod84 = new org.joda.time.MutablePeriod((long) 45, 1L, periodType83);
        int[] intArray86 = chronology61.get((org.joda.time.ReadablePeriod) mutablePeriod84, 1L);
        chronology20.validate((org.joda.time.ReadablePartial) localTime38, intArray86);
        int int88 = localTime38.size();
        int int89 = localTime38.getHourOfDay();
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "PT0.099S" + "'", str11, "PT0.099S");
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(periodType13);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNotNull(instant19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(localTime22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(localTime29);
        org.junit.Assert.assertNotNull(localTime31);
        org.junit.Assert.assertNotNull(localTime33);
        org.junit.Assert.assertNotNull(localTime35);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(localTime38);
        org.junit.Assert.assertNotNull(mutableDateTime39);
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertNotNull(duration45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "PT86400S" + "'", str46, "PT86400S");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(hours48);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 22 + "'", int53 == 22);
// flaky:         org.junit.Assert.assertEquals("'" + str55 + "' != '" + "2022-02-22T07:24:01.046Z" + "'", str55, "2022-02-22T07:24:01.046Z");
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(instant60);
        org.junit.Assert.assertNotNull(chronology61);
        org.junit.Assert.assertNotNull(durationField62);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(period64);
        org.junit.Assert.assertNotNull(period75);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "PT0.099S" + "'", str76, "PT0.099S");
        org.junit.Assert.assertNotNull(period77);
        org.junit.Assert.assertNotNull(periodType78);
        org.junit.Assert.assertNotNull(period79);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "Standard" + "'", str80, "Standard");
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "PeriodType[Standard]" + "'", str81, "PeriodType[Standard]");
        org.junit.Assert.assertNotNull(periodType82);
        org.junit.Assert.assertNotNull(periodType83);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 4 + "'", int88 == 4);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 7 + "'", int89 == 7);
    }

    @Test
    public void test07957() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07957");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.Instant instant2 = instant0.withMillis(0L);
        org.joda.time.DateTime dateTime3 = instant2.toDateTime();
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardMinutes((long) (byte) -1);
        org.joda.time.Instant instant7 = instant2.withDurationAdded((org.joda.time.ReadableDuration) duration5, 0);
        org.joda.time.MutableDateTime mutableDateTime8 = instant2.toMutableDateTime();
        org.joda.time.LocalDateTime localDateTime9 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.withHourOfDay(10);
        org.joda.time.DateTimeField dateTimeField15 = localDateTime13.getField((int) (byte) 0);
        org.joda.time.DateTimeField[] dateTimeFieldArray16 = localDateTime13.getFields();
        org.joda.time.DateTime dateTime17 = localDateTime13.toDateTime();
        org.joda.time.Period period18 = new org.joda.time.Period((org.joda.time.ReadableInstant) instant2, (org.joda.time.ReadableInstant) dateTime17);
        int int19 = dateTime17.getWeekyear();
        org.junit.Assert.assertNotNull(instant2);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(instant7);
        org.junit.Assert.assertNotNull(mutableDateTime8);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeFieldArray16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2022 + "'", int19 == 2022);
    }

    @Test
    public void test07958() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07958");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        org.joda.time.DateTime dateTime3 = dateTime1.plusMinutes(15);
        org.joda.time.Chronology chronology4 = dateTime1.getChronology();
        org.joda.time.Instant instant5 = new org.joda.time.Instant();
        org.joda.time.Instant instant7 = instant5.withMillis(0L);
        org.joda.time.Chronology chronology8 = instant7.getChronology();
        org.joda.time.DurationField durationField9 = chronology8.eras();
        org.joda.time.LocalTime localTime10 = org.joda.time.LocalTime.now(chronology8);
        org.joda.time.DurationField durationField11 = chronology8.eras();
        org.joda.time.DateTimeField dateTimeField12 = chronology8.hourOfDay();
        org.joda.time.DateTime dateTime13 = dateTime1.withChronology(chronology8);
        org.joda.time.MutableDateTime mutableDateTime14 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property15 = mutableDateTime14.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime16 = property15.getMutableDateTime();
        boolean boolean17 = dateTime13.isBefore((org.joda.time.ReadableInstant) mutableDateTime16);
        org.joda.time.Instant instant18 = new org.joda.time.Instant();
        org.joda.time.Instant instant20 = instant18.withMillis(0L);
        org.joda.time.Chronology chronology21 = instant20.getChronology();
        org.joda.time.DurationField durationField22 = chronology21.eras();
        long long26 = chronology21.add(0L, (long) 2022, (int) '4');
        org.joda.time.DateTimeField dateTimeField27 = chronology21.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField28 = chronology21.minuteOfDay();
        mutableDateTime16.setChronology(chronology21);
        mutableDateTime16.setMillisOfSecond((int) '4');
        org.joda.time.ReadableInstant readableInstant32 = null;
        org.joda.time.ReadableInstant readableInstant33 = null;
        org.joda.time.PeriodType periodType34 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod35 = new org.joda.time.MutablePeriod(readableInstant32, readableInstant33, periodType34);
        mutablePeriod35.addDays((int) '4');
        org.joda.time.MutablePeriod mutablePeriod38 = mutablePeriod35.toMutablePeriod();
        mutableDateTime16.add((org.joda.time.ReadablePeriod) mutablePeriod38, 1439);
        mutableDateTime16.setSecondOfDay(100);
        int int43 = mutableDateTime16.getYear();
        org.joda.time.MutableDateTime.Property property44 = mutableDateTime16.millisOfSecond();
        org.joda.time.MutableDateTime.Property property45 = mutableDateTime16.dayOfMonth();
        mutableDateTime16.setMillisOfDay(26305161);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(instant7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(mutableDateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(mutableDateTime16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(instant20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 105144L + "'", long26 == 105144L);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(periodType34);
        org.junit.Assert.assertNotNull(mutablePeriod38);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2227 + "'", int43 == 2227);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(property45);
    }

    @Test
    public void test07959() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07959");
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.now();
        mutableDateTime1.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime4 = mutableDateTime1.copy();
        org.joda.time.MutableDateTime.Property property5 = mutableDateTime1.weekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime6 = property5.roundHalfFloor();
        org.joda.time.MutableDateTime mutableDateTime7 = property5.roundHalfCeiling();
        org.joda.time.MutableDateTime mutableDateTime9 = property5.set(1);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime(chronology10);
        int int12 = dateTime11.getYearOfCentury();
        int int13 = dateTime11.getWeekyear();
        org.joda.time.DateTime dateTime14 = dateTime11.withEarlierOffsetAtOverlap();
        java.lang.String str15 = dateTime14.toString();
        org.joda.time.MutableDateTime mutableDateTime16 = dateTime14.toMutableDateTime();
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.UTC;
        boolean boolean18 = dateTimeZone17.isFixed();
        mutableDateTime16.setZoneRetainFields(dateTimeZone17);
        org.joda.time.MutableDateTime mutableDateTime20 = mutableDateTime9.toMutableDateTime(dateTimeZone17);
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime((-62135596800000L), dateTimeZone17);
        long long23 = dateTimeZone17.previousTransition(1645488000000L);
        org.joda.time.MutableDateTime mutableDateTime24 = new org.joda.time.MutableDateTime(dateTimeZone17);
        int int26 = dateTimeZone17.getStandardOffset(1645514419356L);
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(mutableDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(mutableDateTime7);
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 22 + "'", int12 == 22);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2022 + "'", int13 == 2022);
        org.junit.Assert.assertNotNull(dateTime14);
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "2022-02-22T07:24:01.137Z" + "'", str15, "2022-02-22T07:24:01.137Z");
        org.junit.Assert.assertNotNull(mutableDateTime16);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(mutableDateTime20);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 1645488000000L + "'", long23 == 1645488000000L);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
    }

    @Test
    public void test07960() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07960");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) (short) -1);
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardDays((long) (byte) 1);
        java.lang.String str4 = duration3.toString();
        mutableDateTime1.add((org.joda.time.ReadableDuration) duration3, 8);
        mutableDateTime1.setSecondOfMinute((int) (short) 0);
        mutableDateTime1.addMonths(36956320);
        mutableDateTime1.setDayOfYear(49);
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime16 = dateTime14.withZoneRetainFields(dateTimeZone15);
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property18 = localDate17.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.UTC;
        java.util.TimeZone timeZone20 = dateTimeZone19.toTimeZone();
        org.joda.time.DateTime dateTime21 = localDate17.toDateTimeAtCurrentTime(dateTimeZone19);
        int int22 = dateTime16.compareTo((org.joda.time.ReadableInstant) dateTime21);
        org.joda.time.DateTime dateTime24 = dateTime21.minusWeeks(44);
        org.joda.time.DateTime dateTime27 = dateTime24.withDurationAdded((-1L), 36946953);
        org.joda.time.YearMonthDay yearMonthDay28 = dateTime27.toYearMonthDay();
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime((long) 1);
        org.joda.time.Duration duration32 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period33 = duration32.toPeriod();
        org.joda.time.Duration duration36 = duration32.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Period period37 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime30, (org.joda.time.ReadableDuration) duration36);
        org.joda.time.Duration duration39 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration41 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration44 = duration41.withDurationAdded((long) (short) 100, (int) ' ');
        boolean boolean45 = duration39.isLongerThan((org.joda.time.ReadableDuration) duration44);
        org.joda.time.Minutes minutes46 = duration39.toStandardMinutes();
        org.joda.time.Period period47 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime30, (org.joda.time.ReadableDuration) duration39);
        org.joda.time.Duration duration49 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period50 = duration49.toPeriod();
        org.joda.time.PeriodType periodType51 = period50.getPeriodType();
        org.joda.time.Period period52 = period47.withPeriodType(periodType51);
        org.joda.time.MutablePeriod mutablePeriod53 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) mutableDateTime1, (org.joda.time.ReadableInstant) dateTime27, periodType51);
        mutableDateTime1.addWeeks(69);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime1.setDayOfWeek(117);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 117 for dayOfWeek must be in the range [1,7]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "PT86400S" + "'", str4, "PT86400S");
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(timeZone20);
// flaky:         org.junit.Assert.assertEquals(timeZone20.getDisplayName(), "\u534f\u8c03\u4e16\u754c\u65f6\u95f4");
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(yearMonthDay28);
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertNotNull(duration39);
        org.junit.Assert.assertNotNull(duration41);
        org.junit.Assert.assertNotNull(duration44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(minutes46);
        org.junit.Assert.assertNotNull(duration49);
        org.junit.Assert.assertNotNull(period50);
        org.junit.Assert.assertNotNull(periodType51);
        org.junit.Assert.assertNotNull(period52);
    }

    @Test
    public void test07961() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07961");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) (byte) -1);
        int int2 = localDate1.getYearOfEra();
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.UTC;
        java.util.TimeZone timeZone4 = dateTimeZone3.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.UTC;
        long long7 = dateTimeZone3.getMillisKeepLocal(dateTimeZone5, (long) 44);
        org.joda.time.DateTime dateTime8 = localDate1.toDateTimeAtMidnight(dateTimeZone3);
        java.util.Locale locale10 = null;
        java.lang.String str11 = dateTimeZone3.getName(946000L, locale10);
        org.joda.time.MutableDateTime mutableDateTime12 = new org.joda.time.MutableDateTime(dateTimeZone3);
        mutableDateTime12.addMillis(62188);
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.UTC;
        java.util.Locale locale18 = java.util.Locale.GERMAN;
        java.lang.String str19 = locale18.getDisplayName();
        java.lang.String str20 = dateTimeZone16.getName(100L, locale18);
        org.joda.time.MutableDateTime mutableDateTime21 = new org.joda.time.MutableDateTime(948227L, dateTimeZone16);
        java.lang.String str23 = dateTimeZone16.getName(950707L);
        org.joda.time.MutableDateTime mutableDateTime24 = mutableDateTime12.toMutableDateTime(dateTimeZone16);
        boolean boolean26 = mutableDateTime24.isBefore(1134931L);
        mutableDateTime24.addMillis(26266184);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1969 + "'", int2 == 1969);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(timeZone4);
// flaky:         org.junit.Assert.assertEquals(timeZone4.getDisplayName(), "\u534f\u8c03\u4e16\u754c\u65f6\u95f4");
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 44L + "'", long7 == 44L);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+00:00" + "'", str11, "+00:00");
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "de");
// flaky:         org.junit.Assert.assertEquals("'" + str19 + "' != '" + "\u5fb7\u6587" + "'", str19, "\u5fb7\u6587");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "+00:00" + "'", str20, "+00:00");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "+00:00" + "'", str23, "+00:00");
        org.junit.Assert.assertNotNull(mutableDateTime24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test07962() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07962");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        java.lang.Object obj1 = mutableDateTime0.clone();
        mutableDateTime0.setTime((long) 46);
        org.joda.time.MutableDateTime.Property property4 = mutableDateTime0.dayOfWeek();
        org.joda.time.MutableDateTime mutableDateTime6 = property4.add(1L);
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.UTC;
        java.util.TimeZone timeZone8 = dateTimeZone7.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        long long11 = dateTimeZone7.getMillisKeepLocal(dateTimeZone9, (long) 44);
        org.joda.time.DateTime dateTime12 = org.joda.time.DateTime.now(dateTimeZone7);
        mutableDateTime6.setZoneRetainFields(dateTimeZone7);
        java.util.Locale.Builder builder15 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder16 = builder15.clear();
        java.util.Locale locale17 = builder16.build();
        java.lang.String str18 = dateTimeZone7.getName(555370422L, locale17);
        java.util.Locale.Builder builder19 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder20 = builder19.clear();
        java.util.Locale locale21 = builder20.build();
        java.util.Set<java.lang.String> strSet22 = locale21.getUnicodeLocaleKeys();
        java.lang.String str23 = locale17.getDisplayName(locale21);
        java.lang.String str24 = locale17.getDisplayLanguage();
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(obj1);
// flaky:         org.junit.Assert.assertEquals(obj1.toString(), "2022-02-22T07:24:01.179Z");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj1), "2022-02-22T07:24:01.179Z");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj1), "2022-02-22T07:24:01.179Z");
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(timeZone8);
// flaky:         org.junit.Assert.assertEquals(timeZone8.getDisplayName(), "\u534f\u8c03\u4e16\u754c\u65f6\u95f4");
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 44L + "'", long11 == 44L);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "+00:00" + "'", str18, "+00:00");
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "");
        org.junit.Assert.assertNotNull(strSet22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
    }

    @Test
    public void test07963() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07963");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (byte) -1, chronology1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.plusMonths(46);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.minuteOfDay();
        int int6 = localDateTime4.get(dateTimeFieldType5);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime4.plusMinutes(7);
        org.joda.time.PeriodType periodType11 = null;
        org.joda.time.Period period12 = new org.joda.time.Period((long) 100, 1L, periodType11);
        org.joda.time.Period period14 = period12.minusSeconds((-1));
        org.joda.time.Period period16 = period14.multipliedBy((int) '#');
        org.joda.time.LocalDateTime localDateTime17 = localDateTime4.minus((org.joda.time.ReadablePeriod) period16);
        int int18 = period16.getYears();
        org.joda.time.Period period20 = period16.withHours(47831274);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime((long) 1, chronology22);
        int int24 = dateTime23.getMinuteOfDay();
        org.joda.time.Instant instant25 = dateTime23.toInstant();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime(chronology26);
        int int28 = dateTime27.getYearOfCentury();
        int int29 = dateTime27.getWeekyear();
        org.joda.time.DateTime dateTime30 = dateTime27.withEarlierOffsetAtOverlap();
        java.lang.String str31 = dateTime30.toString();
        org.joda.time.MutableDateTime mutableDateTime32 = dateTime30.toMutableDateTime();
        org.joda.time.Period period33 = new org.joda.time.Period((org.joda.time.ReadableInstant) instant25, (org.joda.time.ReadableInstant) dateTime30);
        org.joda.time.Period period34 = period16.plus((org.joda.time.ReadablePeriod) period33);
        org.joda.time.Period period36 = period34.minusWeeks(26263180);
        org.joda.time.Period period38 = period36.plusMonths(481);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1439 + "'", int6 == 1439);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(instant25);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 22 + "'", int28 == 22);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2022 + "'", int29 == 2022);
        org.junit.Assert.assertNotNull(dateTime30);
// flaky:         org.junit.Assert.assertEquals("'" + str31 + "' != '" + "2022-02-22T07:24:01.192Z" + "'", str31, "2022-02-22T07:24:01.192Z");
        org.junit.Assert.assertNotNull(mutableDateTime32);
        org.junit.Assert.assertNotNull(period34);
        org.junit.Assert.assertNotNull(period36);
        org.junit.Assert.assertNotNull(period38);
    }

    @Test
    public void test07964() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07964");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) (short) -1);
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardDays((long) (byte) 1);
        java.lang.String str4 = duration3.toString();
        mutableDateTime1.add((org.joda.time.ReadableDuration) duration3, 8);
        mutableDateTime1.setSecondOfMinute((int) (short) 0);
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime1.weekyear();
        mutableDateTime1.addDays(0);
        org.joda.time.DateTimeZone dateTimeZone12 = mutableDateTime1.getZone();
        mutableDateTime1.setYear(99);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.LocalTime localTime17 = new org.joda.time.LocalTime((long) (short) 100, chronology16);
        int int18 = localTime17.getMillisOfDay();
        org.joda.time.LocalTime.Property property19 = localTime17.millisOfSecond();
        org.joda.time.DurationField durationField20 = property19.getLeapDurationField();
        java.lang.String str21 = property19.getName();
        org.joda.time.LocalTime localTime23 = property19.addWrapFieldToCopy(0);
        org.joda.time.LocalTime localTime24 = property19.roundFloorCopy();
        org.joda.time.LocalTime localTime25 = property19.withMinimumValue();
        org.joda.time.LocalTime localTime26 = property19.roundHalfCeilingCopy();
        org.joda.time.LocalTime localTime27 = property19.roundHalfEvenCopy();
        org.joda.time.LocalTime localTime28 = org.joda.time.LocalTime.MIDNIGHT;
        org.joda.time.LocalTime localTime30 = localTime28.withMillisOfDay((int) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.LocalTime localTime32 = new org.joda.time.LocalTime(dateTimeZone31);
        org.joda.time.LocalTime localTime34 = localTime32.minusHours((int) (byte) 100);
        org.joda.time.LocalTime localTime36 = localTime34.withHourOfDay(0);
        org.joda.time.DateTimeFieldType dateTimeFieldType37 = org.joda.time.DateTimeFieldType.secondOfMinute();
        int int38 = localTime34.get(dateTimeFieldType37);
        boolean boolean39 = localTime30.isSupported(dateTimeFieldType37);
        java.lang.String str40 = dateTimeFieldType37.getName();
        org.joda.time.DateTimeZone dateTimeZone43 = null;
        org.joda.time.LocalTime localTime44 = new org.joda.time.LocalTime(dateTimeZone43);
        org.joda.time.LocalTime localTime46 = localTime44.minusHours((int) (byte) 100);
        org.joda.time.Chronology chronology47 = localTime46.getChronology();
        org.joda.time.MutablePeriod mutablePeriod48 = new org.joda.time.MutablePeriod((long) 45, 949680L, chronology47);
        org.joda.time.DateTimeField dateTimeField49 = chronology47.millisOfDay();
        org.joda.time.DurationField durationField50 = chronology47.weeks();
        org.joda.time.DateTimeField dateTimeField51 = dateTimeFieldType37.getField(chronology47);
        java.lang.String str52 = dateTimeFieldType37.getName();
        boolean boolean53 = localTime27.isSupported(dateTimeFieldType37);
        org.joda.time.MutableDateTime.Property property54 = mutableDateTime1.property(dateTimeFieldType37);
        mutableDateTime1.addMillis(2241);
        java.lang.String str57 = mutableDateTime1.toString();
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "PT86400S" + "'", str4, "PT86400S");
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 100 + "'", int18 == 100);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNull(durationField20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "millisOfSecond" + "'", str21, "millisOfSecond");
        org.junit.Assert.assertNotNull(localTime23);
        org.junit.Assert.assertNotNull(localTime24);
        org.junit.Assert.assertNotNull(localTime25);
        org.junit.Assert.assertNotNull(localTime26);
        org.junit.Assert.assertNotNull(localTime27);
        org.junit.Assert.assertNotNull(localTime28);
        org.junit.Assert.assertNotNull(localTime30);
        org.junit.Assert.assertNotNull(localTime34);
        org.junit.Assert.assertNotNull(localTime36);
        org.junit.Assert.assertNotNull(dateTimeFieldType37);
// flaky:         org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "secondOfMinute" + "'", str40, "secondOfMinute");
        org.junit.Assert.assertNotNull(localTime46);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(durationField50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "secondOfMinute" + "'", str52, "secondOfMinute");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "0099-01-08T23:59:03.240Z" + "'", str57, "0099-01-08T23:59:03.240Z");
    }

    @Test
    public void test07965() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07965");
        org.joda.time.PeriodType periodType1 = org.joda.time.PeriodType.yearWeekDay();
        org.joda.time.PeriodType periodType2 = periodType1.withDaysRemoved();
        org.joda.time.PeriodType periodType3 = periodType2.withWeeksRemoved();
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod((-1051L), periodType2);
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod((long) (short) -1, 3155695200000L);
        mutablePeriod9.clear();
        org.joda.time.Duration duration12 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period13 = duration12.toPeriod();
        org.joda.time.Duration duration16 = duration12.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime(chronology17);
        org.joda.time.DateTime dateTime20 = dateTime18.plusMinutes(15);
        org.joda.time.Interval interval21 = duration16.toIntervalTo((org.joda.time.ReadableInstant) dateTime20);
        mutablePeriod9.setPeriod((org.joda.time.ReadableInterval) interval21);
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.PeriodType periodType25 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod26 = new org.joda.time.MutablePeriod(readableInstant23, readableInstant24, periodType25);
        org.joda.time.DurationFieldType durationFieldType28 = periodType25.getFieldType((int) (short) 0);
        int int29 = mutablePeriod9.get(durationFieldType28);
        org.joda.time.Duration duration31 = org.joda.time.Duration.standardHours((long) 52);
        org.joda.time.MutableDateTime mutableDateTime32 = org.joda.time.MutableDateTime.now();
        mutableDateTime32.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime35 = mutableDateTime32.copy();
        org.joda.time.MutableDateTime.Property property36 = mutableDateTime32.yearOfEra();
        org.joda.time.MutablePeriod mutablePeriod37 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration31, (org.joda.time.ReadableInstant) mutableDateTime32);
        org.joda.time.Instant instant38 = new org.joda.time.Instant();
        org.joda.time.Instant instant40 = instant38.withMillis(0L);
        org.joda.time.Chronology chronology41 = instant40.getChronology();
        org.joda.time.DurationField durationField42 = chronology41.eras();
        org.joda.time.LocalTime localTime43 = org.joda.time.LocalTime.now(chronology41);
        org.joda.time.DurationField durationField44 = chronology41.eras();
        mutablePeriod9.setPeriod((org.joda.time.ReadableDuration) duration31, chronology41);
        org.joda.time.DateTimeField dateTimeField46 = chronology41.dayOfMonth();
        org.joda.time.MutablePeriod mutablePeriod47 = new org.joda.time.MutablePeriod(555370422L, 1645514161062L, chronology41);
        org.joda.time.DurationFieldType durationFieldType48 = org.joda.time.DurationFieldType.minutes();
        mutablePeriod47.set(durationFieldType48, 26175498);
        // The following exception was thrown during execution in test generation
        try {
            mutablePeriod4.set(durationFieldType48, 62317);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Period does not support field 'minutes'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType1);
        org.junit.Assert.assertNotNull(periodType2);
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertNotNull(periodType25);
        org.junit.Assert.assertNotNull(durationFieldType28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertNotNull(mutableDateTime32);
        org.junit.Assert.assertNotNull(mutableDateTime35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(instant40);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(durationField42);
        org.junit.Assert.assertNotNull(localTime43);
        org.junit.Assert.assertNotNull(durationField44);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(durationFieldType48);
    }

    @Test
    public void test07966() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07966");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) (short) -1);
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardDays((long) (byte) 1);
        java.lang.String str4 = duration3.toString();
        mutableDateTime1.add((org.joda.time.ReadableDuration) duration3, 8);
        mutableDateTime1.setSecondOfMinute((int) (short) 0);
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime1.millisOfSecond();
        org.joda.time.MutableDateTime mutableDateTime11 = property9.add((long) (-1));
        org.joda.time.MutableDateTime mutableDateTime12 = property9.roundHalfCeiling();
        java.lang.Object obj13 = mutableDateTime12.clone();
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "PT86400S" + "'", str4, "PT86400S");
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertNotNull(mutableDateTime12);
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertEquals(obj13.toString(), "1970-01-08T23:59:00.998Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj13), "1970-01-08T23:59:00.998Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj13), "1970-01-08T23:59:00.998Z");
    }

    @Test
    public void test07967() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07967");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardDays((long) (byte) 1);
        java.lang.String str2 = duration1.toString();
        org.joda.time.Duration duration4 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Hours hours5 = duration4.toStandardHours();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime(chronology6);
        int int8 = dateTime7.getSecondOfMinute();
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration4, (org.joda.time.ReadableInstant) dateTime7);
        org.joda.time.Duration duration10 = duration1.plus((org.joda.time.ReadableDuration) duration4);
        org.joda.time.Duration duration11 = duration1.toDuration();
        org.joda.time.Period period12 = duration1.toPeriod();
        org.joda.time.Period period14 = period12.plusMonths(62273);
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "PT86400S" + "'", str2, "PT86400S");
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertNotNull(hours5);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(period14);
    }

    @Test
    public void test07968() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07968");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.add((long) 'a');
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime0.yearOfCentury();
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period6 = duration5.toPeriod();
        org.joda.time.Duration duration8 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration11 = duration8.withDurationAdded((long) (short) 100, (int) ' ');
        org.joda.time.Duration duration12 = duration5.minus((org.joda.time.ReadableDuration) duration11);
        mutableDateTime0.add((org.joda.time.ReadableDuration) duration5);
        org.joda.time.MutableDateTime.Property property14 = mutableDateTime0.centuryOfEra();
        mutableDateTime0.addHours((int) (byte) 10);
        mutableDateTime0.addWeeks(20);
        org.joda.time.DateTimeField dateTimeField19 = mutableDateTime0.getRoundingField();
        org.joda.time.MutableDateTime mutableDateTime20 = org.joda.time.MutableDateTime.now();
        java.lang.Object obj21 = mutableDateTime20.clone();
        mutableDateTime20.setTime((long) 46);
        org.joda.time.MutableDateTime.Property property24 = mutableDateTime20.dayOfWeek();
        org.joda.time.MutableDateTime mutableDateTime26 = property24.add(1L);
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.UTC;
        java.util.TimeZone timeZone28 = dateTimeZone27.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.UTC;
        long long31 = dateTimeZone27.getMillisKeepLocal(dateTimeZone29, (long) 44);
        org.joda.time.DateTime dateTime32 = org.joda.time.DateTime.now(dateTimeZone27);
        mutableDateTime26.setZoneRetainFields(dateTimeZone27);
        mutableDateTime26.addSeconds((int) (short) 10);
        java.lang.Object obj36 = mutableDateTime26.clone();
        org.joda.time.MutableDateTime.Property property37 = mutableDateTime26.era();
        boolean boolean38 = mutableDateTime0.isAfter((org.joda.time.ReadableInstant) mutableDateTime26);
        org.joda.time.MutableDateTime.Property property39 = mutableDateTime26.millisOfDay();
        mutableDateTime26.setYear(26318493);
        java.util.Locale locale43 = java.util.Locale.forLanguageTag("Property[monthOfYear]");
        java.lang.String str44 = locale43.getDisplayVariant();
        java.util.Calendar calendar45 = mutableDateTime26.toCalendar(locale43);
        org.joda.time.LocalDate localDate46 = org.joda.time.LocalDate.fromCalendarFields(calendar45);
        org.joda.time.Interval interval47 = localDate46.toInterval();
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNull(dateTimeField19);
        org.junit.Assert.assertNotNull(mutableDateTime20);
        org.junit.Assert.assertNotNull(obj21);
// flaky:         org.junit.Assert.assertEquals(obj21.toString(), "2022-02-22T07:24:01.326Z");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj21), "2022-02-22T07:24:01.326Z");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj21), "2022-02-22T07:24:01.326Z");
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(mutableDateTime26);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertNotNull(timeZone28);
// flaky:         org.junit.Assert.assertEquals(timeZone28.getDisplayName(), "\u534f\u8c03\u4e16\u754c\u65f6\u95f4");
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 44L + "'", long31 == 44L);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(obj36);
        org.junit.Assert.assertEquals(obj36.toString(), "2022-02-23T00:00:10.046Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj36), "2022-02-23T00:00:10.046Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj36), "2022-02-23T00:00:10.046Z");
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertNotNull(calendar45);
        org.junit.Assert.assertEquals(calendar45.toString(), "java.util.GregorianCalendar[time=830469257798410046,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=26318493,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=23,DAY_OF_YEAR=54,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=10,MILLISECOND=46,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDate46);
        org.junit.Assert.assertNotNull(interval47);
    }

    @Test
    public void test07969() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07969");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.add((long) 'a');
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime0.yearOfCentury();
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period6 = duration5.toPeriod();
        org.joda.time.Duration duration8 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration11 = duration8.withDurationAdded((long) (short) 100, (int) ' ');
        org.joda.time.Duration duration12 = duration5.minus((org.joda.time.ReadableDuration) duration11);
        mutableDateTime0.add((org.joda.time.ReadableDuration) duration5);
        org.joda.time.MutableDateTime.Property property14 = mutableDateTime0.centuryOfEra();
        mutableDateTime0.addHours((int) (byte) 10);
        mutableDateTime0.addWeeks(20);
        org.joda.time.DateTimeField dateTimeField19 = mutableDateTime0.getRoundingField();
        org.joda.time.MutableDateTime mutableDateTime20 = org.joda.time.MutableDateTime.now();
        java.lang.Object obj21 = mutableDateTime20.clone();
        mutableDateTime20.setTime((long) 46);
        org.joda.time.MutableDateTime.Property property24 = mutableDateTime20.dayOfWeek();
        org.joda.time.MutableDateTime mutableDateTime26 = property24.add(1L);
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.UTC;
        java.util.TimeZone timeZone28 = dateTimeZone27.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.UTC;
        long long31 = dateTimeZone27.getMillisKeepLocal(dateTimeZone29, (long) 44);
        org.joda.time.DateTime dateTime32 = org.joda.time.DateTime.now(dateTimeZone27);
        mutableDateTime26.setZoneRetainFields(dateTimeZone27);
        mutableDateTime26.addSeconds((int) (short) 10);
        java.lang.Object obj36 = mutableDateTime26.clone();
        org.joda.time.MutableDateTime.Property property37 = mutableDateTime26.era();
        boolean boolean38 = mutableDateTime0.isAfter((org.joda.time.ReadableInstant) mutableDateTime26);
        mutableDateTime26.setYear(2);
        org.joda.time.MutableDateTime.Property property41 = mutableDateTime26.dayOfYear();
        org.joda.time.MutableDateTime mutableDateTime42 = property41.roundHalfCeiling();
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime42.setDateTime(0, 62356, 15704, 53, 261, 316, 42);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 53 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNull(dateTimeField19);
        org.junit.Assert.assertNotNull(mutableDateTime20);
        org.junit.Assert.assertNotNull(obj21);
// flaky:         org.junit.Assert.assertEquals(obj21.toString(), "2022-02-22T07:24:01.346Z");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj21), "2022-02-22T07:24:01.346Z");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj21), "2022-02-22T07:24:01.346Z");
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(mutableDateTime26);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertNotNull(timeZone28);
// flaky:         org.junit.Assert.assertEquals(timeZone28.getDisplayName(), "\u534f\u8c03\u4e16\u754c\u65f6\u95f4");
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 44L + "'", long31 == 44L);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(obj36);
        org.junit.Assert.assertEquals(obj36.toString(), "2022-02-23T00:00:10.046Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj36), "2022-02-23T00:00:10.046Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj36), "2022-02-23T00:00:10.046Z");
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(mutableDateTime42);
    }

    @Test
    public void test07970() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07970");
        org.joda.time.PeriodType periodType2 = null;
        org.joda.time.Period period3 = new org.joda.time.Period((long) 100, 1L, periodType2);
        org.joda.time.Period period5 = period3.minusSeconds((-1));
        java.lang.String str6 = period3.toString();
        org.joda.time.Duration duration7 = period3.toStandardDuration();
        org.joda.time.Period period9 = period3.plusHours(616);
        org.joda.time.DurationFieldType[] durationFieldTypeArray10 = period3.getFieldTypes();
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.DurationFieldType durationFieldType12 = dateTimeFieldType11.getDurationType();
        org.joda.time.Period period14 = period3.withField(durationFieldType12, 295);
        org.joda.time.Period period16 = period3.multipliedBy(26281);
        java.lang.String str17 = period16.toString();
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "PT0.099S" + "'", str6, "PT0.099S");
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(durationFieldTypeArray10);
        org.junit.Assert.assertNotNull(dateTimeFieldType11);
        org.junit.Assert.assertNotNull(durationFieldType12);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "PT-2601.819S" + "'", str17, "PT-2601.819S");
    }

    @Test
    public void test07971() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07971");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.add((long) 'a');
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime0.yearOfCentury();
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period6 = duration5.toPeriod();
        org.joda.time.Duration duration8 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration11 = duration8.withDurationAdded((long) (short) 100, (int) ' ');
        org.joda.time.Duration duration12 = duration5.minus((org.joda.time.ReadableDuration) duration11);
        mutableDateTime0.add((org.joda.time.ReadableDuration) duration5);
        org.joda.time.MutableDateTime.Property property14 = mutableDateTime0.centuryOfEra();
        mutableDateTime0.addHours((int) (byte) 10);
        mutableDateTime0.addWeeks(20);
        org.joda.time.DateTimeField dateTimeField19 = mutableDateTime0.getRoundingField();
        org.joda.time.ReadableDuration readableDuration20 = null;
        org.joda.time.ReadableInstant readableInstant21 = null;
        org.joda.time.Period period22 = new org.joda.time.Period(readableDuration20, readableInstant21);
        org.joda.time.Period period24 = period22.withDays((int) (byte) 1);
        org.joda.time.Period period26 = period24.minusWeeks(100);
        org.joda.time.Period period28 = period24.plusWeeks((int) (short) -1);
        mutableDateTime0.add((org.joda.time.ReadablePeriod) period28, 62166);
        org.joda.time.Instant instant33 = new org.joda.time.Instant();
        org.joda.time.DateTime dateTime34 = instant33.toDateTime();
        org.joda.time.Instant instant35 = instant33.toInstant();
        org.joda.time.Chronology chronology36 = instant35.getChronology();
        org.joda.time.MutablePeriod mutablePeriod37 = new org.joda.time.MutablePeriod(964100L, (long) 26172069, chronology36);
        mutableDateTime0.add((org.joda.time.ReadablePeriod) mutablePeriod37, 0);
        mutableDateTime0.setDate((long) 20);
        mutableDateTime0.addMillis(19);
        int int44 = mutableDateTime0.getDayOfYear();
        int int45 = mutableDateTime0.getRoundingMode();
        mutableDateTime0.setMillis((-6369858L));
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNull(dateTimeField19);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(instant35);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
    }

    @Test
    public void test07972() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07972");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.add((long) 'a');
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime0.yearOfCentury();
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period6 = duration5.toPeriod();
        org.joda.time.Duration duration8 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration11 = duration8.withDurationAdded((long) (short) 100, (int) ' ');
        org.joda.time.Duration duration12 = duration5.minus((org.joda.time.ReadableDuration) duration11);
        mutableDateTime0.add((org.joda.time.ReadableDuration) duration5);
        org.joda.time.MutableDateTime mutableDateTime15 = org.joda.time.MutableDateTime.now();
        mutableDateTime15.add((long) 'a');
        org.joda.time.MutableDateTime.Property property18 = mutableDateTime15.yearOfCentury();
        mutableDateTime15.addSeconds(0);
        org.joda.time.ReadableDuration readableDuration23 = null;
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.Period period25 = new org.joda.time.Period(readableDuration23, readableInstant24);
        org.joda.time.PeriodType periodType28 = null;
        org.joda.time.Period period29 = new org.joda.time.Period((long) 100, 1L, periodType28);
        org.joda.time.Period period31 = period29.minusSeconds((-1));
        java.lang.String str32 = period29.toString();
        org.joda.time.Period period33 = period29.toPeriod();
        org.joda.time.PeriodType periodType34 = period29.getPeriodType();
        org.joda.time.Period period35 = period25.normalizedStandard(periodType34);
        org.joda.time.DurationFieldType durationFieldType36 = null;
        int int37 = periodType34.indexOf(durationFieldType36);
        org.joda.time.Instant instant38 = new org.joda.time.Instant();
        org.joda.time.Instant instant40 = instant38.withMillis(0L);
        org.joda.time.Chronology chronology41 = instant40.getChronology();
        org.joda.time.DurationField durationField42 = chronology41.eras();
        org.joda.time.LocalTime localTime43 = org.joda.time.LocalTime.now(chronology41);
        org.joda.time.DurationField durationField44 = chronology41.eras();
        org.joda.time.DateTimeField dateTimeField45 = chronology41.hourOfDay();
        org.joda.time.MutablePeriod mutablePeriod46 = new org.joda.time.MutablePeriod((long) 12, (long) 292278993, periodType34, chronology41);
        org.joda.time.MutableDateTime mutableDateTime47 = mutableDateTime15.toMutableDateTime(chronology41);
        org.joda.time.DateTimeField dateTimeField48 = chronology41.clockhourOfHalfday();
        org.joda.time.DateTime dateTime49 = new org.joda.time.DateTime((long) (short) 0, chronology41);
        mutableDateTime0.setChronology(chronology41);
        int int51 = mutableDateTime0.getMinuteOfHour();
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(mutableDateTime15);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "PT0.099S" + "'", str32, "PT0.099S");
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertNotNull(periodType34);
        org.junit.Assert.assertNotNull(period35);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertNotNull(instant40);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(durationField42);
        org.junit.Assert.assertNotNull(localTime43);
        org.junit.Assert.assertNotNull(durationField44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(mutableDateTime47);
        org.junit.Assert.assertNotNull(dateTimeField48);
// flaky:         org.junit.Assert.assertTrue("'" + int51 + "' != '" + 24 + "'", int51 == 24);
    }

    @Test
    public void test07973() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07973");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        java.lang.Object obj1 = mutableDateTime0.clone();
        mutableDateTime0.setTime((long) 46);
        org.joda.time.MutableDateTime.Property property4 = mutableDateTime0.dayOfWeek();
        int int5 = mutableDateTime0.getMinuteOfDay();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime(chronology6);
        org.joda.time.DateTime dateTime9 = dateTime7.plusMinutes(15);
        org.joda.time.Chronology chronology10 = dateTime7.getChronology();
        org.joda.time.Instant instant11 = new org.joda.time.Instant();
        org.joda.time.Instant instant13 = instant11.withMillis(0L);
        org.joda.time.Chronology chronology14 = instant13.getChronology();
        org.joda.time.DurationField durationField15 = chronology14.eras();
        org.joda.time.LocalTime localTime16 = org.joda.time.LocalTime.now(chronology14);
        org.joda.time.DurationField durationField17 = chronology14.eras();
        org.joda.time.DateTimeField dateTimeField18 = chronology14.hourOfDay();
        org.joda.time.DateTime dateTime19 = dateTime7.withChronology(chronology14);
        long long20 = dateTime19.getMillis();
        org.joda.time.DateTime dateTime21 = dateTime19.toDateTimeISO();
        org.joda.time.DateTime dateTime22 = dateTime19.toDateTime();
        org.joda.time.DateTime.Property property23 = dateTime19.secondOfDay();
        mutableDateTime0.setMillis((org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.MutableDateTime.Property property25 = mutableDateTime0.millisOfDay();
        org.joda.time.MutableDateTime.Property property26 = mutableDateTime0.secondOfMinute();
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(obj1);
// flaky:         org.junit.Assert.assertEquals(obj1.toString(), "2022-02-22T07:24:01.469Z");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj1), "2022-02-22T07:24:01.469Z");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj1), "2022-02-22T07:24:01.469Z");
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(instant13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTime19);
// flaky:         org.junit.Assert.assertTrue("'" + long20 + "' != '" + 1645514641469L + "'", long20 == 1645514641469L);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(property26);
    }

    @Test
    public void test07974() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07974");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (byte) -1, chronology1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.plusMonths(46);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.minuteOfDay();
        int int6 = localDateTime4.get(dateTimeFieldType5);
        org.joda.time.LocalDateTime.Property property7 = localDateTime4.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime4.withYearOfEra(70);
        org.joda.time.LocalDateTime.Property property10 = localDateTime9.secondOfMinute();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((long) 1, chronology13);
        int int15 = dateTime14.getHourOfDay();
        java.util.Locale locale17 = java.util.Locale.getDefault();
        org.joda.time.LocalDateTime localDateTime18 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime20.withHourOfDay(10);
        org.joda.time.DateTimeField dateTimeField24 = localDateTime22.getField((int) (byte) 0);
        java.util.Locale locale26 = java.util.Locale.CANADA;
        java.lang.String str27 = dateTimeField24.getAsShortText((long) '4', locale26);
        java.lang.String str28 = locale26.getVariant();
        java.lang.String str29 = locale17.getDisplayScript(locale26);
        java.lang.String str30 = dateTime14.toString("2020-05-01", locale26);
        org.joda.time.LocalDateTime localDateTime31 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime33 = localDateTime31.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime35 = localDateTime33.withHourOfDay(10);
        org.joda.time.DateTimeField dateTimeField37 = localDateTime35.getField((int) (byte) 0);
        java.util.Locale locale39 = java.util.Locale.CANADA;
        java.lang.String str40 = dateTimeField37.getAsShortText((long) '4', locale39);
        boolean boolean41 = locale39.hasExtensions();
        java.lang.String str42 = locale26.getDisplayLanguage(locale39);
        java.lang.String str43 = locale39.getDisplayVariant();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str44 = localDateTime9.toString("2022-02-22T07:17:16.902Z", locale39);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: T");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1439 + "'", int6 == 1439);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "1970" + "'", str27, "1970");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "2020-05-01" + "'", str30, "2020-05-01");
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "1970" + "'", str40, "1970");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "English" + "'", str42, "English");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
    }

    @Test
    public void test07975() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07975");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.PeriodType periodType5 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod6 = new org.joda.time.MutablePeriod(readableInstant3, readableInstant4, periodType5);
        org.joda.time.DurationFieldType durationFieldType8 = periodType5.getFieldType((int) (short) 0);
        java.lang.String str9 = periodType5.toString();
        org.joda.time.Instant instant10 = new org.joda.time.Instant();
        org.joda.time.Instant instant12 = instant10.withMillis(0L);
        org.joda.time.Chronology chronology13 = instant12.getChronology();
        org.joda.time.Period period14 = new org.joda.time.Period((long) 53, (long) (-1), periodType5, chronology13);
        org.joda.time.DateTimeField dateTimeField15 = dateTimeFieldType0.getField(chronology13);
        org.joda.time.DateTimeField dateTimeField16 = chronology13.millisOfSecond();
        org.joda.time.MutableDateTime mutableDateTime17 = new org.joda.time.MutableDateTime(chronology13);
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetMillis(776);
        org.joda.time.MutableDateTime mutableDateTime20 = mutableDateTime17.toMutableDateTime(dateTimeZone19);
        mutableDateTime20.addDays(4);
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(periodType5);
        org.junit.Assert.assertNotNull(durationFieldType8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "PeriodType[YearDayTime]" + "'", str9, "PeriodType[YearDayTime]");
        org.junit.Assert.assertNotNull(instant12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(mutableDateTime20);
    }

    @Test
    public void test07976() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07976");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.add((long) 'a');
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime0.yearOfCentury();
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period6 = duration5.toPeriod();
        org.joda.time.Duration duration8 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration11 = duration8.withDurationAdded((long) (short) 100, (int) ' ');
        org.joda.time.Duration duration12 = duration5.minus((org.joda.time.ReadableDuration) duration11);
        mutableDateTime0.add((org.joda.time.ReadableDuration) duration5);
        org.joda.time.MutableDateTime.Property property14 = mutableDateTime0.centuryOfEra();
        mutableDateTime0.addMonths(0);
        mutableDateTime0.addHours(45);
        mutableDateTime0.setDate(876L);
        mutableDateTime0.addWeekyears(955);
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(property14);
    }

    @Test
    public void test07977() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07977");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        org.joda.time.DateTime dateTime3 = dateTime1.plusMinutes(15);
        org.joda.time.Chronology chronology4 = dateTime1.getChronology();
        org.joda.time.Instant instant5 = new org.joda.time.Instant();
        org.joda.time.Instant instant7 = instant5.withMillis(0L);
        org.joda.time.Chronology chronology8 = instant7.getChronology();
        org.joda.time.DurationField durationField9 = chronology8.eras();
        org.joda.time.LocalTime localTime10 = org.joda.time.LocalTime.now(chronology8);
        org.joda.time.DurationField durationField11 = chronology8.eras();
        org.joda.time.DateTimeField dateTimeField12 = chronology8.hourOfDay();
        org.joda.time.DateTime dateTime13 = dateTime1.withChronology(chronology8);
        org.joda.time.MutableDateTime mutableDateTime14 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property15 = mutableDateTime14.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime16 = property15.getMutableDateTime();
        boolean boolean17 = dateTime13.isBefore((org.joda.time.ReadableInstant) mutableDateTime16);
        mutableDateTime16.addWeekyears((-1));
        mutableDateTime16.addHours(26150565);
        org.joda.time.Instant instant22 = new org.joda.time.Instant();
        org.joda.time.Instant instant24 = instant22.withMillis(0L);
        org.joda.time.Chronology chronology25 = instant24.getChronology();
        org.joda.time.DurationField durationField26 = chronology25.eras();
        org.joda.time.LocalTime localTime27 = org.joda.time.LocalTime.now(chronology25);
        org.joda.time.DurationField durationField28 = chronology25.eras();
        org.joda.time.DateTimeField dateTimeField29 = chronology25.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField30 = chronology25.secondOfMinute();
        mutableDateTime16.setRounding(dateTimeField30);
        int int32 = mutableDateTime16.getMinuteOfDay();
        org.joda.time.LocalDate localDate33 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property34 = localDate33.monthOfYear();
        org.joda.time.DateTimeField dateTimeField35 = property34.getField();
        org.joda.time.LocalDate localDate36 = property34.withMaximumValue();
        java.util.Date date37 = localDate36.toDate();
        org.joda.time.LocalDate localDate39 = localDate36.minusMonths((int) ' ');
        org.joda.time.LocalDate localDate41 = localDate39.withYear(1973);
        org.joda.time.LocalDate localDate42 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property43 = localDate42.monthOfYear();
        org.joda.time.DateTimeField dateTimeField44 = property43.getField();
        org.joda.time.LocalDate localDate45 = property43.roundCeilingCopy();
        org.joda.time.LocalDate localDate47 = localDate45.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDate localDate49 = localDate45.withWeekOfWeekyear(46);
        org.joda.time.ReadableDuration readableDuration51 = null;
        org.joda.time.ReadableInstant readableInstant52 = null;
        org.joda.time.Period period53 = new org.joda.time.Period(readableDuration51, readableInstant52);
        org.joda.time.PeriodType periodType56 = null;
        org.joda.time.Period period57 = new org.joda.time.Period((long) 100, 1L, periodType56);
        org.joda.time.Period period59 = period57.minusSeconds((-1));
        java.lang.String str60 = period57.toString();
        org.joda.time.Period period61 = period57.toPeriod();
        org.joda.time.PeriodType periodType62 = period57.getPeriodType();
        org.joda.time.Period period63 = period53.normalizedStandard(periodType62);
        org.joda.time.Instant instant64 = new org.joda.time.Instant();
        org.joda.time.Instant instant66 = instant64.withMillis(0L);
        org.joda.time.Chronology chronology67 = instant66.getChronology();
        org.joda.time.DurationField durationField68 = chronology67.eras();
        long long72 = chronology67.add(0L, (long) 2022, (int) '4');
        org.joda.time.DateTimeField dateTimeField73 = chronology67.secondOfMinute();
        org.joda.time.MutablePeriod mutablePeriod74 = new org.joda.time.MutablePeriod(44L, periodType62, chronology67);
        org.joda.time.LocalDate localDate76 = localDate49.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod74, (int) (byte) 1);
        int int77 = localDate76.getDayOfWeek();
        org.joda.time.Chronology chronology78 = null;
        org.joda.time.DateTime dateTime79 = new org.joda.time.DateTime(chronology78);
        int int80 = dateTime79.getYearOfCentury();
        int int81 = dateTime79.getWeekyear();
        org.joda.time.DateTime dateTime82 = dateTime79.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime.Property property83 = dateTime79.yearOfEra();
        org.joda.time.DateTime dateTime84 = property83.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime86 = property83.setCopy(1424);
        org.joda.time.DateTimeZone dateTimeZone87 = dateTime86.getZone();
        org.joda.time.DateTime dateTime88 = localDate76.toDateTimeAtCurrentTime(dateTimeZone87);
        org.joda.time.DateTime dateTime89 = localDate41.toDateTimeAtCurrentTime(dateTimeZone87);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime90 = new org.joda.time.LocalDateTime((java.lang.Object) int32, dateTimeZone87);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: java.lang.Integer");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(instant7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(mutableDateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(mutableDateTime16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(instant24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertNotNull(localTime27);
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
// flaky:         org.junit.Assert.assertTrue("'" + int32 + "' != '" + 264 + "'", int32 == 264);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(localDate36);
        org.junit.Assert.assertNotNull(date37);
        org.junit.Assert.assertEquals(date37.toString(), "Thu Dec 22 00:00:00 GMT 2022");
        org.junit.Assert.assertNotNull(localDate39);
        org.junit.Assert.assertNotNull(localDate41);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(localDate45);
        org.junit.Assert.assertNotNull(localDate47);
        org.junit.Assert.assertNotNull(localDate49);
        org.junit.Assert.assertNotNull(period59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "PT0.099S" + "'", str60, "PT0.099S");
        org.junit.Assert.assertNotNull(period61);
        org.junit.Assert.assertNotNull(periodType62);
        org.junit.Assert.assertNotNull(period63);
        org.junit.Assert.assertNotNull(instant66);
        org.junit.Assert.assertNotNull(chronology67);
        org.junit.Assert.assertNotNull(durationField68);
        org.junit.Assert.assertTrue("'" + long72 + "' != '" + 105144L + "'", long72 == 105144L);
        org.junit.Assert.assertNotNull(dateTimeField73);
        org.junit.Assert.assertNotNull(localDate76);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 2 + "'", int77 == 2);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 22 + "'", int80 == 22);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 2022 + "'", int81 == 2022);
        org.junit.Assert.assertNotNull(dateTime82);
        org.junit.Assert.assertNotNull(property83);
        org.junit.Assert.assertNotNull(dateTime84);
        org.junit.Assert.assertNotNull(dateTime86);
        org.junit.Assert.assertNotNull(dateTimeZone87);
        org.junit.Assert.assertNotNull(dateTime88);
        org.junit.Assert.assertNotNull(dateTime89);
    }

    @Test
    public void test07978() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07978");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) (byte) -1);
        int int2 = localDate1.getYearOfEra();
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.UTC;
        java.util.TimeZone timeZone4 = dateTimeZone3.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.UTC;
        long long7 = dateTimeZone3.getMillisKeepLocal(dateTimeZone5, (long) 44);
        org.joda.time.DateTime dateTime8 = localDate1.toDateTimeAtMidnight(dateTimeZone3);
        org.joda.time.DateTime dateTime9 = localDate1.toDateTimeAtCurrentTime();
        org.joda.time.MutableDateTime mutableDateTime10 = org.joda.time.MutableDateTime.now();
        mutableDateTime10.add((long) 'a');
        org.joda.time.MutableDateTime.Property property13 = mutableDateTime10.yearOfCentury();
        mutableDateTime10.addWeekyears((int) (byte) 1);
        int int16 = dateTime9.compareTo((org.joda.time.ReadableInstant) mutableDateTime10);
        org.joda.time.MutableDateTime.Property property17 = mutableDateTime10.centuryOfEra();
        org.joda.time.Duration duration19 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration21 = org.joda.time.Duration.standardDays((long) (byte) 1);
        java.lang.String str22 = duration21.toString();
        boolean boolean23 = duration19.isShorterThan((org.joda.time.ReadableDuration) duration21);
        long long24 = duration19.getStandardMinutes();
        long long25 = duration19.getStandardMinutes();
        mutableDateTime10.add((org.joda.time.ReadableDuration) duration19, 26150565);
        org.joda.time.Period period28 = duration19.toPeriod();
        org.joda.time.Period period30 = period28.withSeconds(26494006);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1969 + "'", int2 == 1969);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(timeZone4);
// flaky:         org.junit.Assert.assertEquals(timeZone4.getDisplayName(), "\u534f\u8c03\u4e16\u754c\u65f6\u95f4");
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 44L + "'", long7 == 44L);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(mutableDateTime10);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "PT86400S" + "'", str22, "PT86400S");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 1440L + "'", long24 == 1440L);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 1440L + "'", long25 == 1440L);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(period30);
    }

    @Test
    public void test07979() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07979");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.add((long) 'a');
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime0.yearOfCentury();
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period6 = duration5.toPeriod();
        org.joda.time.Duration duration8 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration11 = duration8.withDurationAdded((long) (short) 100, (int) ' ');
        org.joda.time.Duration duration12 = duration5.minus((org.joda.time.ReadableDuration) duration11);
        mutableDateTime0.add((org.joda.time.ReadableDuration) duration5);
        org.joda.time.MutableDateTime.Property property14 = mutableDateTime0.centuryOfEra();
        mutableDateTime0.addHours((int) (byte) 10);
        mutableDateTime0.addWeeks(20);
        org.joda.time.DateTimeField dateTimeField19 = mutableDateTime0.getRoundingField();
        int int20 = mutableDateTime0.getMillisOfSecond();
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime0.setDate(62613, 52681, 22774098);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 52681 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNull(dateTimeField19);
// flaky:         org.junit.Assert.assertTrue("'" + int20 + "' != '" + 780 + "'", int20 == 780);
    }

    @Test
    public void test07980() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07980");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) (short) -1);
        mutableDateTime1.setSecondOfMinute(53);
        org.joda.time.MutableDateTime mutableDateTime4 = mutableDateTime1.copy();
        org.joda.time.MutableDateTime.Property property5 = mutableDateTime1.minuteOfHour();
        mutableDateTime1.addDays(3021);
        org.junit.Assert.assertNotNull(mutableDateTime4);
        org.junit.Assert.assertNotNull(property5);
    }

    @Test
    public void test07981() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07981");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property1 = mutableDateTime0.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime3 = property1.set(45);
        org.joda.time.MutableDateTime mutableDateTime4 = property1.roundFloor();
        org.joda.time.MutableDateTime mutableDateTime6 = property1.add(45);
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.UTC;
        java.util.TimeZone timeZone8 = dateTimeZone7.toTimeZone();
        long long10 = dateTimeZone7.previousTransition(100L);
        int int12 = dateTimeZone7.getStandardOffset(86403200L);
        org.joda.time.DateTime dateTime13 = mutableDateTime6.toDateTime(dateTimeZone7);
        org.joda.time.ReadableDuration readableDuration14 = null;
        org.joda.time.DateTime dateTime16 = dateTime13.withDurationAdded(readableDuration14, (int) (byte) -1);
        org.joda.time.DateTime dateTime18 = dateTime13.plusMonths(36981644);
        int int19 = dateTime13.getYear();
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(mutableDateTime3);
        org.junit.Assert.assertNotNull(mutableDateTime4);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(timeZone8);
// flaky:         org.junit.Assert.assertEquals(timeZone8.getDisplayName(), "\u534f\u8c03\u4e16\u754c\u65f6\u95f4");
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 100L + "'", long10 == 100L);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 9000 + "'", int19 == 9000);
    }

    @Test
    public void test07982() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07982");
        org.joda.time.MutableDateTime mutableDateTime6 = org.joda.time.MutableDateTime.now();
        mutableDateTime6.add((long) 'a');
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime6.yearOfCentury();
        org.joda.time.Duration duration11 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period12 = duration11.toPeriod();
        org.joda.time.Duration duration14 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration17 = duration14.withDurationAdded((long) (short) 100, (int) ' ');
        org.joda.time.Duration duration18 = duration11.minus((org.joda.time.ReadableDuration) duration17);
        mutableDateTime6.add((org.joda.time.ReadableDuration) duration11);
        org.joda.time.MutableDateTime.Property property20 = mutableDateTime6.centuryOfEra();
        mutableDateTime6.addHours((int) (byte) 10);
        mutableDateTime6.addWeeks(100);
        org.joda.time.ReadableInstant readableInstant27 = null;
        org.joda.time.ReadableInstant readableInstant28 = null;
        org.joda.time.PeriodType periodType29 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod30 = new org.joda.time.MutablePeriod(readableInstant27, readableInstant28, periodType29);
        org.joda.time.DurationFieldType durationFieldType32 = periodType29.getFieldType((int) (short) 0);
        java.lang.String str33 = periodType29.toString();
        org.joda.time.Instant instant34 = new org.joda.time.Instant();
        org.joda.time.Instant instant36 = instant34.withMillis(0L);
        org.joda.time.Chronology chronology37 = instant36.getChronology();
        org.joda.time.Period period38 = new org.joda.time.Period((long) 53, (long) (-1), periodType29, chronology37);
        org.joda.time.LocalDate localDate39 = org.joda.time.LocalDate.now(chronology37);
        org.joda.time.DateTimeField dateTimeField40 = chronology37.dayOfWeek();
        mutableDateTime6.setChronology(chronology37);
        org.joda.time.Period period43 = org.joda.time.Period.hours((int) (short) 10);
        org.joda.time.LocalDate localDate44 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property45 = localDate44.monthOfYear();
        org.joda.time.LocalDate localDate46 = property45.roundFloorCopy();
        org.joda.time.DateTime dateTime47 = localDate46.toDateTimeAtMidnight();
        boolean boolean48 = period43.equals((java.lang.Object) localDate46);
        org.joda.time.DateTime dateTime49 = localDate46.toDateTimeAtMidnight();
        org.joda.time.LocalDate localDate50 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property51 = localDate50.monthOfYear();
        org.joda.time.LocalDate.Property property52 = localDate50.dayOfMonth();
        org.joda.time.LocalDate localDate54 = localDate50.withEra((int) (short) 0);
        int[] intArray55 = localDate54.getValues();
        chronology37.validate((org.joda.time.ReadablePartial) localDate46, intArray55);
        org.joda.time.LocalDate localDate57 = new org.joda.time.LocalDate(chronology37);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime58 = new org.joda.time.DateTime(26177, 263973, 64173, 33744, 936, 26623, chronology37);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 33744 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(periodType29);
        org.junit.Assert.assertNotNull(durationFieldType32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "PeriodType[YearDayTime]" + "'", str33, "PeriodType[YearDayTime]");
        org.junit.Assert.assertNotNull(instant36);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(localDate39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(period43);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(localDate46);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertNotNull(localDate54);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-2022, 2, 22]");
    }

    @Test
    public void test07983() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07983");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime3 = mutableDateTime0.copy();
        org.joda.time.MutableDateTime.Property property4 = mutableDateTime0.yearOfEra();
        org.joda.time.MutableDateTime mutableDateTime6 = property4.addWrapField(62151);
        org.joda.time.MutableDateTime mutableDateTime8 = property4.addWrapField(26150);
        org.joda.time.Duration duration10 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration12 = org.joda.time.Duration.standardDays((long) (byte) 1);
        java.lang.String str13 = duration12.toString();
        boolean boolean14 = duration10.isShorterThan((org.joda.time.ReadableDuration) duration12);
        java.lang.String str15 = duration10.toString();
        java.lang.Object obj16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime(obj16);
        org.joda.time.DateTime.Property property18 = dateTime17.weekyear();
        org.joda.time.DateTime dateTime19 = property18.roundCeilingCopy();
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.PeriodType periodType25 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod26 = new org.joda.time.MutablePeriod(readableInstant23, readableInstant24, periodType25);
        org.joda.time.DurationFieldType durationFieldType28 = periodType25.getFieldType((int) (short) 0);
        java.lang.String str29 = periodType25.toString();
        org.joda.time.Instant instant30 = new org.joda.time.Instant();
        org.joda.time.Instant instant32 = instant30.withMillis(0L);
        org.joda.time.Chronology chronology33 = instant32.getChronology();
        org.joda.time.Period period34 = new org.joda.time.Period((long) 53, (long) (-1), periodType25, chronology33);
        org.joda.time.ReadableInstant readableInstant37 = null;
        org.joda.time.ReadableInstant readableInstant38 = null;
        org.joda.time.PeriodType periodType39 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod40 = new org.joda.time.MutablePeriod(readableInstant37, readableInstant38, periodType39);
        org.joda.time.DurationFieldType durationFieldType42 = periodType39.getFieldType((int) (short) 0);
        java.lang.String str43 = periodType39.toString();
        org.joda.time.Instant instant44 = new org.joda.time.Instant();
        org.joda.time.Instant instant46 = instant44.withMillis(0L);
        org.joda.time.Chronology chronology47 = instant46.getChronology();
        org.joda.time.Period period48 = new org.joda.time.Period((long) 53, (long) (-1), periodType39, chronology47);
        org.joda.time.MutablePeriod mutablePeriod49 = new org.joda.time.MutablePeriod((long) (short) 10, periodType25, chronology47);
        org.joda.time.PeriodType periodType50 = periodType25.withHoursRemoved();
        org.joda.time.Period period51 = duration10.toPeriodFrom((org.joda.time.ReadableInstant) dateTime19, periodType50);
        org.joda.time.DateTime dateTime52 = dateTime19.toDateTimeISO();
        org.joda.time.Duration duration54 = org.joda.time.Duration.millis(1143849662172L);
        org.joda.time.MutablePeriod mutablePeriod55 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime52, (org.joda.time.ReadableDuration) duration54);
        boolean boolean56 = mutableDateTime8.equals((java.lang.Object) mutablePeriod55);
        mutablePeriod55.setWeeks(26266);
        mutablePeriod55.setHours(863);
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(mutableDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(mutableDateTime8);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "PT86400S" + "'", str13, "PT86400S");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "PT86400S" + "'", str15, "PT86400S");
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(periodType25);
        org.junit.Assert.assertNotNull(durationFieldType28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "PeriodType[YearDayTime]" + "'", str29, "PeriodType[YearDayTime]");
        org.junit.Assert.assertNotNull(instant32);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(periodType39);
        org.junit.Assert.assertNotNull(durationFieldType42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "PeriodType[YearDayTime]" + "'", str43, "PeriodType[YearDayTime]");
        org.junit.Assert.assertNotNull(instant46);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertNotNull(periodType50);
        org.junit.Assert.assertNotNull(period51);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(duration54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
    }

    @Test
    public void test07984() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07984");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime3 = dateTime1.withZoneRetainFields(dateTimeZone2);
        boolean boolean5 = dateTime3.equals((java.lang.Object) (-1L));
        org.joda.time.Chronology chronology6 = dateTime3.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.era();
        org.joda.time.DateTime dateTime8 = org.joda.time.DateTime.now(chronology6);
        org.joda.time.DateTimeField dateTimeField9 = chronology6.centuryOfEra();
        org.joda.time.Instant instant13 = new org.joda.time.Instant();
        org.joda.time.Instant instant15 = instant13.withMillis(0L);
        org.joda.time.Duration duration17 = org.joda.time.Duration.standardDays((long) (byte) 1);
        java.lang.String str18 = duration17.toString();
        org.joda.time.Instant instant19 = instant13.minus((org.joda.time.ReadableDuration) duration17);
        org.joda.time.Instant instant21 = instant13.minus(950105L);
        org.joda.time.Chronology chronology22 = instant21.getChronology();
        org.joda.time.DateTimeField dateTimeField23 = chronology22.millisOfSecond();
        org.joda.time.MutableDateTime mutableDateTime25 = new org.joda.time.MutableDateTime((long) (short) -1);
        org.joda.time.MutableDateTime mutableDateTime26 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property27 = mutableDateTime26.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime29 = property27.set(45);
        org.joda.time.MutableDateTime mutableDateTime30 = property27.roundFloor();
        org.joda.time.MutableDateTime mutableDateTime32 = property27.add(45);
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.UTC;
        java.util.TimeZone timeZone34 = dateTimeZone33.toTimeZone();
        long long36 = dateTimeZone33.previousTransition(100L);
        int int38 = dateTimeZone33.getStandardOffset(86403200L);
        org.joda.time.DateTime dateTime39 = mutableDateTime32.toDateTime(dateTimeZone33);
        mutableDateTime25.setZoneRetainFields(dateTimeZone33);
        org.joda.time.LocalDateTime localDateTime41 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime43 = localDateTime41.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime45 = localDateTime43.withHourOfDay(10);
        org.joda.time.LocalDateTime.Property property46 = localDateTime45.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField47 = property46.getField();
        mutableDateTime25.setRounding(dateTimeField47);
        org.joda.time.Instant instant49 = new org.joda.time.Instant();
        org.joda.time.Instant instant51 = instant49.withMillis(0L);
        org.joda.time.Chronology chronology52 = instant51.getChronology();
        org.joda.time.DurationField durationField53 = chronology52.eras();
        long long57 = chronology52.add(0L, (long) 2022, (int) '4');
        org.joda.time.DateTimeField dateTimeField58 = chronology52.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime59 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime61 = localDateTime59.withHourOfDay(10);
        org.joda.time.LocalDateTime.Property property62 = localDateTime59.hourOfDay();
        org.joda.time.DateTimeField dateTimeField63 = property62.getField();
        java.lang.String str64 = property62.toString();
        org.joda.time.LocalDateTime localDateTime66 = property62.addToCopy(100L);
        org.joda.time.LocalDateTime localDateTime68 = localDateTime66.minusMinutes(46);
        org.joda.time.DateTimeFieldType dateTimeFieldType69 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.DurationFieldType durationFieldType70 = dateTimeFieldType69.getDurationType();
        org.joda.time.LocalDateTime.Property property71 = localDateTime68.property(dateTimeFieldType69);
        java.util.Locale.Category category72 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale73 = java.util.Locale.getDefault(category72);
        java.util.Locale locale74 = java.util.Locale.getDefault(category72);
        java.util.Locale locale75 = java.util.Locale.KOREAN;
        java.lang.String str76 = locale74.getDisplayScript(locale75);
        int int77 = property71.getMaximumShortTextLength(locale74);
        int int78 = dateTimeField58.getMaximumTextLength(locale74);
        int int79 = dateTimeField47.getMaximumShortTextLength(locale74);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket81 = new org.joda.time.format.DateTimeParserBucket((long) 62194, chronology22, locale74, (java.lang.Integer) 62277);
        java.util.Set<java.lang.String> strSet82 = locale74.getUnicodeLocaleAttributes();
        // The following exception was thrown during execution in test generation
        try {
            long long83 = dateTimeField9.set(4492800000L, "1970-01-01T07:21:57.546Z", locale74);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"1970-01-01T07:21:57.546Z\" for centuryOfEra is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(instant15);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "PT86400S" + "'", str18, "PT86400S");
        org.junit.Assert.assertNotNull(instant19);
        org.junit.Assert.assertNotNull(instant21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(mutableDateTime26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(mutableDateTime29);
        org.junit.Assert.assertNotNull(mutableDateTime30);
        org.junit.Assert.assertNotNull(mutableDateTime32);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertNotNull(timeZone34);
// flaky:         org.junit.Assert.assertEquals(timeZone34.getDisplayName(), "\u534f\u8c03\u4e16\u754c\u65f6\u95f4");
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 100L + "'", long36 == 100L);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(instant51);
        org.junit.Assert.assertNotNull(chronology52);
        org.junit.Assert.assertNotNull(durationField53);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 105144L + "'", long57 == 105144L);
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertNotNull(localDateTime59);
        org.junit.Assert.assertNotNull(localDateTime61);
        org.junit.Assert.assertNotNull(property62);
        org.junit.Assert.assertNotNull(dateTimeField63);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "Property[hourOfDay]" + "'", str64, "Property[hourOfDay]");
        org.junit.Assert.assertNotNull(localDateTime66);
        org.junit.Assert.assertNotNull(localDateTime68);
        org.junit.Assert.assertNotNull(dateTimeFieldType69);
        org.junit.Assert.assertNotNull(durationFieldType70);
        org.junit.Assert.assertNotNull(property71);
        org.junit.Assert.assertTrue("'" + category72 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category72.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale73);
// flaky:         org.junit.Assert.assertEquals(locale73.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale74);
// flaky:         org.junit.Assert.assertEquals(locale74.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale75);
        org.junit.Assert.assertEquals(locale75.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "" + "'", str76, "");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 2 + "'", int77 == 2);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 2 + "'", int78 == 2);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 2 + "'", int79 == 2);
        org.junit.Assert.assertNotNull(strSet82);
    }

    @Test
    public void test07985() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07985");
        org.joda.time.Chronology chronology2 = null;
        java.util.Locale locale3 = java.util.Locale.GERMAN;
        java.util.Locale locale4 = java.util.Locale.CANADA;
        java.lang.String str5 = locale3.getDisplayVariant(locale4);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket6 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology2, locale4);
        java.lang.Object obj7 = dateTimeParserBucket6.saveState();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.LocalTime localTime10 = new org.joda.time.LocalTime((long) (short) 100, chronology9);
        org.joda.time.DurationFieldType durationFieldType11 = org.joda.time.DurationFieldType.weeks();
        java.lang.String str12 = durationFieldType11.getName();
        boolean boolean13 = localTime10.isSupported(durationFieldType11);
        boolean boolean14 = dateTimeParserBucket6.restoreState((java.lang.Object) boolean13);
        org.joda.time.Chronology chronology15 = dateTimeParserBucket6.getChronology();
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime19 = dateTime17.withZoneRetainFields(dateTimeZone18);
        dateTimeParserBucket6.setZone(dateTimeZone18);
        org.joda.time.LocalTime localTime21 = new org.joda.time.LocalTime((long) 435, dateTimeZone18);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime(chronology22);
        int int24 = dateTime23.getYearOfCentury();
        int int25 = dateTime23.getWeekyear();
        org.joda.time.DateTime dateTime26 = dateTime23.withEarlierOffsetAtOverlap();
        java.lang.String str27 = dateTime26.toString();
        org.joda.time.MutableDateTime mutableDateTime28 = dateTime26.toMutableDateTime();
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.UTC;
        boolean boolean30 = dateTimeZone29.isFixed();
        mutableDateTime28.setZoneRetainFields(dateTimeZone29);
        org.joda.time.DateTime dateTime32 = localTime21.toDateTimeToday(dateTimeZone29);
        org.joda.time.MutableDateTime mutableDateTime33 = org.joda.time.MutableDateTime.now();
        java.lang.Object obj34 = mutableDateTime33.clone();
        mutableDateTime33.setTime((long) 46);
        org.joda.time.MutableDateTime.Property property37 = mutableDateTime33.dayOfWeek();
        int int38 = mutableDateTime33.getMinuteOfDay();
        boolean boolean39 = dateTime32.isEqual((org.joda.time.ReadableInstant) mutableDateTime33);
        long long40 = mutableDateTime33.getMillis();
        int int41 = mutableDateTime33.getDayOfMonth();
        mutableDateTime33.setTime(27425239604L);
        mutableDateTime33.setSecondOfDay(52681);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "de");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertNotNull(durationFieldType11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "weeks" + "'", str12, "weeks");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 22 + "'", int24 == 22);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2022 + "'", int25 == 2022);
        org.junit.Assert.assertNotNull(dateTime26);
// flaky:         org.junit.Assert.assertEquals("'" + str27 + "' != '" + "2022-02-22T07:24:01.773Z" + "'", str27, "2022-02-22T07:24:01.773Z");
        org.junit.Assert.assertNotNull(mutableDateTime28);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(mutableDateTime33);
        org.junit.Assert.assertNotNull(obj34);
// flaky:         org.junit.Assert.assertEquals(obj34.toString(), "2022-02-22T07:24:01.773Z");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj34), "2022-02-22T07:24:01.773Z");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj34), "2022-02-22T07:24:01.773Z");
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 1645488000046L + "'", long40 == 1645488000046L);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 22 + "'", int41 == 22);
    }

    @Test
    public void test07986() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07986");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (byte) -1, chronology1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.plusMonths(46);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.millisOfSecond();
        int int6 = localDateTime4.get(dateTimeFieldType5);
        org.joda.time.LocalDateTime localDateTime7 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.withHourOfDay(10);
        org.joda.time.DateTimeField dateTimeField13 = localDateTime11.getField((int) (byte) 0);
        org.joda.time.DateTimeField[] dateTimeFieldArray14 = localDateTime11.getFields();
        org.joda.time.LocalDateTime localDateTime16 = localDateTime11.withDayOfWeek(1);
        boolean boolean17 = localDateTime4.isEqual((org.joda.time.ReadablePartial) localDateTime11);
        org.joda.time.ReadablePeriod readablePeriod18 = null;
        org.joda.time.LocalDateTime localDateTime19 = localDateTime11.plus(readablePeriod18);
        int int20 = localDateTime11.getDayOfMonth();
        org.joda.time.LocalDateTime localDateTime21 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.withHourOfDay(10);
        org.joda.time.LocalDateTime.Property property24 = localDateTime21.hourOfDay();
        org.joda.time.DateTimeField dateTimeField25 = property24.getField();
        boolean boolean27 = property24.equals((java.lang.Object) 10L);
        long long28 = property24.remainder();
        java.lang.String str29 = property24.getAsText();
        java.util.Locale locale33 = new java.util.Locale("2022-02-22T10:15:47.721", "53", "2022-02-22T07:15:46.416Z");
        int int34 = property24.getMaximumShortTextLength(locale33);
        org.joda.time.LocalDateTime localDateTime35 = property24.roundFloorCopy();
        org.joda.time.PeriodType periodType36 = null;
        org.joda.time.Period period37 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDateTime11, (org.joda.time.ReadablePartial) localDateTime35, periodType36);
        org.joda.time.Duration duration39 = new org.joda.time.Duration(995259L);
        org.joda.time.LocalDateTime localDateTime41 = localDateTime35.withDurationAdded((org.joda.time.ReadableDuration) duration39, 442);
        org.joda.time.LocalDateTime localDateTime43 = localDateTime35.minusWeeks(26436);
        org.joda.time.LocalDateTime.Property property44 = localDateTime43.hourOfDay();
        org.joda.time.LocalDateTime.Property property45 = localDateTime43.hourOfDay();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 999 + "'", int6 == 999);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeFieldArray14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 22 + "'", int20 == 22);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long28 + "' != '" + 1441809L + "'", long28 == 1441809L);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "7" + "'", str29, "7");
        org.junit.Assert.assertEquals(locale33.toString(), "2022-02-22t10:15:47.721_53_2022-02-22T07:15:46.416Z");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 2 + "'", int34 == 2);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(property45);
    }

    @Test
    public void test07987() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07987");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration2 = duration1.toDuration();
        org.joda.time.Instant instant3 = new org.joda.time.Instant();
        org.joda.time.DateTime dateTime4 = instant3.toDateTime();
        org.joda.time.Instant instant5 = instant3.toInstant();
        long long6 = instant5.getMillis();
        org.joda.time.LocalDateTime localDateTime7 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.plusYears((int) (short) 100);
        org.joda.time.Duration duration15 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period16 = duration15.toPeriod();
        org.joda.time.Duration duration18 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration21 = duration18.withDurationAdded((long) (short) 100, (int) ' ');
        org.joda.time.Duration duration22 = duration15.minus((org.joda.time.ReadableDuration) duration21);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime13.plus((org.joda.time.ReadableDuration) duration15);
        org.joda.time.Instant instant25 = instant5.withDurationAdded((org.joda.time.ReadableDuration) duration15, (int) (byte) -1);
        org.joda.time.Duration duration26 = duration1.minus((org.joda.time.ReadableDuration) duration15);
        org.joda.time.MutableDateTime mutableDateTime27 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property28 = mutableDateTime27.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime30 = property28.set(45);
        org.joda.time.MutableDateTime mutableDateTime31 = property28.roundFloor();
        org.joda.time.LocalDateTime localDateTime32 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime34 = localDateTime32.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime36 = localDateTime34.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime38 = localDateTime36.withCenturyOfEra((int) 'a');
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime(chronology39);
        org.joda.time.DateTime dateTime42 = dateTime40.plusMinutes(15);
        org.joda.time.DateTime dateTime43 = localDateTime36.toDateTime((org.joda.time.ReadableInstant) dateTime40);
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime45 = localDateTime36.toDateTime(dateTimeZone44);
        org.joda.time.DateTime.Property property46 = dateTime45.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField47 = property46.getField();
        mutableDateTime31.setRounding(dateTimeField47);
        java.lang.Object obj49 = mutableDateTime31.clone();
        java.lang.String str50 = mutableDateTime31.toString();
        org.joda.time.Duration duration52 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration55 = duration52.withDurationAdded((long) (short) 100, (int) ' ');
        long long56 = duration55.getMillis();
        org.joda.time.Instant instant57 = new org.joda.time.Instant();
        org.joda.time.Instant instant59 = instant57.withMillis(0L);
        org.joda.time.DateTime dateTime60 = instant59.toDateTime();
        org.joda.time.Instant instant61 = new org.joda.time.Instant();
        org.joda.time.Instant instant63 = instant61.withMillis(0L);
        org.joda.time.DateTime dateTime64 = instant63.toDateTime();
        org.joda.time.DateTime dateTime66 = new org.joda.time.DateTime((long) 1);
        org.joda.time.PeriodType periodType67 = org.joda.time.PeriodType.months();
        org.joda.time.Period period68 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime64, (org.joda.time.ReadableInstant) dateTime66, periodType67);
        boolean boolean69 = dateTime60.isBefore((org.joda.time.ReadableInstant) dateTime64);
        int int70 = dateTime64.getDayOfMonth();
        org.joda.time.ReadableInstant readableInstant71 = null;
        org.joda.time.ReadableInstant readableInstant72 = null;
        org.joda.time.PeriodType periodType73 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod74 = new org.joda.time.MutablePeriod(readableInstant71, readableInstant72, periodType73);
        org.joda.time.PeriodType periodType75 = periodType73.withHoursRemoved();
        org.joda.time.MutablePeriod mutablePeriod76 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration55, (org.joda.time.ReadableInstant) dateTime64, periodType73);
        org.joda.time.MutablePeriod mutablePeriod77 = new org.joda.time.MutablePeriod(periodType73);
        org.joda.time.MutablePeriod mutablePeriod78 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration15, (org.joda.time.ReadableInstant) mutableDateTime31, periodType73);
        org.joda.time.MutableDateTime.Property property79 = mutableDateTime31.yearOfEra();
        org.joda.time.MutableDateTime mutableDateTime80 = property79.roundHalfCeiling();
        long long81 = mutableDateTime80.getMillis();
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(instant5);
// flaky:         org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1645514641833L + "'", long6 == 1645514641833L);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(instant25);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertNotNull(mutableDateTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(mutableDateTime30);
        org.junit.Assert.assertNotNull(mutableDateTime31);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(obj49);
        org.junit.Assert.assertEquals(obj49.toString(), "4500-01-01T00:00:00.000Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj49), "4500-01-01T00:00:00.000Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj49), "4500-01-01T00:00:00.000Z");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "4500-01-01T00:00:00.000Z" + "'", str50, "4500-01-01T00:00:00.000Z");
        org.junit.Assert.assertNotNull(duration52);
        org.junit.Assert.assertNotNull(duration55);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 86403200L + "'", long56 == 86403200L);
        org.junit.Assert.assertNotNull(instant59);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(instant63);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(periodType67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 1 + "'", int70 == 1);
        org.junit.Assert.assertNotNull(periodType73);
        org.junit.Assert.assertNotNull(periodType75);
        org.junit.Assert.assertNotNull(property79);
        org.junit.Assert.assertNotNull(mutableDateTime80);
        org.junit.Assert.assertTrue("'" + long81 + "' != '" + 79839129600000L + "'", long81 == 79839129600000L);
    }

    @Test
    public void test07988() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07988");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.PeriodType periodType5 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod6 = new org.joda.time.MutablePeriod(readableInstant3, readableInstant4, periodType5);
        org.joda.time.DurationFieldType durationFieldType8 = periodType5.getFieldType((int) (short) 0);
        java.lang.String str9 = periodType5.toString();
        org.joda.time.Instant instant10 = new org.joda.time.Instant();
        org.joda.time.Instant instant12 = instant10.withMillis(0L);
        org.joda.time.Chronology chronology13 = instant12.getChronology();
        org.joda.time.Period period14 = new org.joda.time.Period((long) 53, (long) (-1), periodType5, chronology13);
        org.joda.time.DateTimeField dateTimeField15 = dateTimeFieldType0.getField(chronology13);
        org.joda.time.DateTimeField dateTimeField16 = chronology13.millisOfDay();
        long long19 = dateTimeField16.set((long) 5, (int) (short) 1);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.LocalTime localTime22 = new org.joda.time.LocalTime((long) (short) 100, chronology21);
        int int23 = localTime22.getMillisOfDay();
        org.joda.time.LocalTime.Property property24 = localTime22.millisOfSecond();
        org.joda.time.LocalTime localTime26 = property24.addCopy(947880L);
        int int27 = dateTimeField16.getMinimumValue((org.joda.time.ReadablePartial) localTime26);
        org.joda.time.LocalTime.Property property28 = localTime26.minuteOfHour();
        org.joda.time.LocalTime.Property property29 = localTime26.hourOfDay();
        org.joda.time.LocalTime.Property property30 = localTime26.millisOfSecond();
        org.joda.time.LocalTime.Property property31 = localTime26.hourOfDay();
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(periodType5);
        org.junit.Assert.assertNotNull(durationFieldType8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "PeriodType[YearDayTime]" + "'", str9, "PeriodType[YearDayTime]");
        org.junit.Assert.assertNotNull(instant12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 1L + "'", long19 == 1L);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 100 + "'", int23 == 100);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(localTime26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(property31);
    }

    @Test
    public void test07989() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07989");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.UTC;
        java.util.Locale locale3 = java.util.Locale.GERMAN;
        java.lang.String str4 = locale3.getDisplayName();
        java.lang.String str5 = dateTimeZone1.getName(100L, locale3);
        org.joda.time.MutableDateTime mutableDateTime6 = new org.joda.time.MutableDateTime(948227L, dateTimeZone1);
        long long7 = mutableDateTime6.getMillis();
        mutableDateTime6.setWeekyear(1439);
        org.joda.time.DateTime dateTime10 = mutableDateTime6.toDateTime();
        org.joda.time.DateTime dateTime12 = dateTime10.withWeekyear(152);
        int int13 = dateTime12.getMinuteOfHour();
        boolean boolean14 = dateTime12.isBeforeNow();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "de");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u5fb7\u6587" + "'", str4, "\u5fb7\u6587");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "+00:00" + "'", str5, "+00:00");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 948227L + "'", long7 == 948227L);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 15 + "'", int13 == 15);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
    }

    @Test
    public void test07990() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07990");
        org.joda.time.LocalTime localTime1 = org.joda.time.LocalTime.fromMillisOfDay((long) 2922737);
        org.joda.time.Instant instant2 = new org.joda.time.Instant();
        org.joda.time.Instant instant4 = instant2.withMillis(0L);
        org.joda.time.Duration duration6 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period7 = duration6.toPeriod();
        org.joda.time.Duration duration10 = duration6.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Instant instant11 = instant4.plus((org.joda.time.ReadableDuration) duration10);
        long long12 = instant11.getMillis();
        org.joda.time.Chronology chronology13 = instant11.getChronology();
        org.joda.time.MutableDateTime mutableDateTime14 = org.joda.time.MutableDateTime.now();
        mutableDateTime14.add((long) 'a');
        org.joda.time.Duration duration18 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration20 = org.joda.time.Duration.standardDays((long) (byte) 1);
        java.lang.String str21 = duration20.toString();
        boolean boolean22 = duration18.isShorterThan((org.joda.time.ReadableDuration) duration20);
        org.joda.time.Hours hours23 = duration18.toStandardHours();
        mutableDateTime14.add((org.joda.time.ReadableDuration) duration18, 20);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime(chronology26);
        int int28 = dateTime27.getYearOfCentury();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter29 = null;
        java.lang.String str30 = dateTime27.toString(dateTimeFormatter29);
        org.joda.time.DateTime dateTime32 = dateTime27.minusMonths(22);
        org.joda.time.Instant instant33 = new org.joda.time.Instant();
        org.joda.time.Instant instant35 = instant33.withMillis(0L);
        org.joda.time.Chronology chronology36 = instant35.getChronology();
        org.joda.time.DurationField durationField37 = chronology36.eras();
        org.joda.time.DateTime dateTime38 = dateTime27.withChronology(chronology36);
        org.joda.time.Period period39 = duration18.toPeriod(chronology36);
        org.joda.time.Instant instant41 = instant11.withDurationAdded((org.joda.time.ReadableDuration) duration18, 16);
        org.joda.time.DateTimeFieldType dateTimeFieldType42 = org.joda.time.DateTimeFieldType.dayOfYear();
        boolean boolean43 = instant41.isSupported(dateTimeFieldType42);
        java.lang.String str44 = dateTimeFieldType42.getName();
        boolean boolean45 = localTime1.isSupported(dateTimeFieldType42);
        java.lang.String str46 = dateTimeFieldType42.toString();
        org.junit.Assert.assertNotNull(localTime1);
        org.junit.Assert.assertNotNull(instant4);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(instant11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 86400000L + "'", long12 == 86400000L);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(mutableDateTime14);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "PT86400S" + "'", str21, "PT86400S");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(hours23);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 22 + "'", int28 == 22);
// flaky:         org.junit.Assert.assertEquals("'" + str30 + "' != '" + "2022-02-22T07:24:01.915Z" + "'", str30, "2022-02-22T07:24:01.915Z");
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(instant35);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(durationField37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(period39);
        org.junit.Assert.assertNotNull(instant41);
        org.junit.Assert.assertNotNull(dateTimeFieldType42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "dayOfYear" + "'", str44, "dayOfYear");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "dayOfYear" + "'", str46, "dayOfYear");
    }

    @Test
    public void test07991() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07991");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime3 = mutableDateTime0.copy();
        org.joda.time.MutableDateTime.Property property4 = mutableDateTime0.weekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime6 = property4.add(0L);
        org.joda.time.MutableDateTime.Property property7 = mutableDateTime6.yearOfEra();
        java.util.Locale locale9 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime10 = property7.set("2022-02-22T07:19:26.441Z", locale9);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"2022-02-22T07:19:26.441Z\" for yearOfEra is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(mutableDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(property7);
    }

    @Test
    public void test07992() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07992");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.Instant instant3 = new org.joda.time.Instant();
        org.joda.time.Instant instant5 = instant3.withMillis(0L);
        org.joda.time.Chronology chronology6 = instant5.getChronology();
        org.joda.time.DurationField durationField7 = chronology6.eras();
        long long11 = chronology6.add(0L, (long) 2022, (int) '4');
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = dateTimeFormatter2.withChronology(chronology6);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = dateTimeFormatter12.withOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter14 = dateTimeFormatter13.withZoneUTC();
        java.lang.StringBuffer stringBuffer15 = null;
        org.joda.time.MutableDateTime mutableDateTime16 = org.joda.time.MutableDateTime.now();
        mutableDateTime16.add((long) 'a');
        org.joda.time.MutableDateTime.Property property19 = mutableDateTime16.yearOfCentury();
        org.joda.time.Duration duration21 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period22 = duration21.toPeriod();
        org.joda.time.Duration duration24 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration27 = duration24.withDurationAdded((long) (short) 100, (int) ' ');
        org.joda.time.Duration duration28 = duration21.minus((org.joda.time.ReadableDuration) duration27);
        mutableDateTime16.add((org.joda.time.ReadableDuration) duration21);
        org.joda.time.MutableDateTime.Property property30 = mutableDateTime16.centuryOfEra();
        mutableDateTime16.addHours((int) (byte) 10);
        mutableDateTime16.addWeeks(20);
        int int35 = mutableDateTime16.getYearOfCentury();
        org.joda.time.MutableDateTime.Property property36 = mutableDateTime16.dayOfYear();
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter14.printTo(stringBuffer15, (org.joda.time.ReadableInstant) mutableDateTime16);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(instant5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 105144L + "'", long11 == 105144L);
        org.junit.Assert.assertNotNull(dateTimeFormatter12);
        org.junit.Assert.assertNotNull(dateTimeFormatter13);
        org.junit.Assert.assertNotNull(dateTimeFormatter14);
        org.junit.Assert.assertNotNull(mutableDateTime16);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 22 + "'", int35 == 22);
        org.junit.Assert.assertNotNull(property36);
    }

    @Test
    public void test07993() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07993");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime3 = mutableDateTime0.copy();
        org.joda.time.MutableDateTime.Property property4 = mutableDateTime0.yearOfEra();
        org.joda.time.MutableDateTime mutableDateTime6 = property4.addWrapField(62151);
        org.joda.time.MutableDateTime mutableDateTime7 = mutableDateTime6.toMutableDateTime();
        int int8 = mutableDateTime7.getSecondOfDay();
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime7.millisOfSecond();
        org.joda.time.Duration duration11 = org.joda.time.Duration.standardDays((-9571L));
        org.joda.time.Period period12 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime7, (org.joda.time.ReadableDuration) duration11);
        org.joda.time.MutableDateTime.Property property13 = mutableDateTime7.era();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime15 = property13.add(0L);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: eras field is unsupported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(mutableDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(mutableDateTime7);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 26642 + "'", int8 == 26642);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(property13);
    }

    @Test
    public void test07994() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07994");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property1 = mutableDateTime0.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime2 = property1.getMutableDateTime();
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime((long) 1);
        org.joda.time.Duration duration6 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period7 = duration6.toPeriod();
        org.joda.time.Duration duration10 = duration6.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Period period11 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime4, (org.joda.time.ReadableDuration) duration10);
        org.joda.time.Instant instant12 = dateTime4.toInstant();
        org.joda.time.DateTime dateTime15 = dateTime4.withDurationAdded((long) 3, 4);
        org.joda.time.MutableDateTime mutableDateTime16 = org.joda.time.MutableDateTime.now();
        mutableDateTime16.add((long) 'a');
        org.joda.time.MutableDateTime.Property property19 = mutableDateTime16.yearOfCentury();
        mutableDateTime16.addSeconds(0);
        org.joda.time.ReadableDuration readableDuration24 = null;
        org.joda.time.ReadableInstant readableInstant25 = null;
        org.joda.time.Period period26 = new org.joda.time.Period(readableDuration24, readableInstant25);
        org.joda.time.PeriodType periodType29 = null;
        org.joda.time.Period period30 = new org.joda.time.Period((long) 100, 1L, periodType29);
        org.joda.time.Period period32 = period30.minusSeconds((-1));
        java.lang.String str33 = period30.toString();
        org.joda.time.Period period34 = period30.toPeriod();
        org.joda.time.PeriodType periodType35 = period30.getPeriodType();
        org.joda.time.Period period36 = period26.normalizedStandard(periodType35);
        org.joda.time.DurationFieldType durationFieldType37 = null;
        int int38 = periodType35.indexOf(durationFieldType37);
        org.joda.time.Instant instant39 = new org.joda.time.Instant();
        org.joda.time.Instant instant41 = instant39.withMillis(0L);
        org.joda.time.Chronology chronology42 = instant41.getChronology();
        org.joda.time.DurationField durationField43 = chronology42.eras();
        org.joda.time.LocalTime localTime44 = org.joda.time.LocalTime.now(chronology42);
        org.joda.time.DurationField durationField45 = chronology42.eras();
        org.joda.time.DateTimeField dateTimeField46 = chronology42.hourOfDay();
        org.joda.time.MutablePeriod mutablePeriod47 = new org.joda.time.MutablePeriod((long) 12, (long) 292278993, periodType35, chronology42);
        org.joda.time.MutableDateTime mutableDateTime48 = mutableDateTime16.toMutableDateTime(chronology42);
        mutableDateTime16.setDayOfYear(44);
        int int51 = mutableDateTime16.getHourOfDay();
        org.joda.time.MutablePeriod mutablePeriod52 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime15, (org.joda.time.ReadableInstant) mutableDateTime16);
        mutableDateTime16.addMillis(365);
        mutableDateTime2.setTime((org.joda.time.ReadableInstant) mutableDateTime16);
        org.joda.time.DateTime dateTime56 = mutableDateTime2.toDateTime();
        org.joda.time.DateTime.Property property57 = dateTime56.minuteOfDay();
        org.joda.time.DateTime dateTime58 = property57.roundCeilingCopy();
        org.joda.time.DateTime dateTime59 = dateTime58.withLaterOffsetAtOverlap();
        org.joda.time.MutableDateTime mutableDateTime61 = org.joda.time.MutableDateTime.parse("2022-02-22T07:16:08.639Z");
        org.joda.time.DateTimeZone dateTimeZone63 = org.joda.time.DateTimeZone.forOffsetMillis(442);
        mutableDateTime61.setZone(dateTimeZone63);
        int int66 = dateTimeZone63.getOffsetFromLocal(1292773L);
        int int68 = dateTimeZone63.getOffsetFromLocal(1087979L);
        org.joda.time.DateTime dateTime69 = dateTime59.toDateTime(dateTimeZone63);
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(mutableDateTime2);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(instant12);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(mutableDateTime16);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "PT0.099S" + "'", str33, "PT0.099S");
        org.junit.Assert.assertNotNull(period34);
        org.junit.Assert.assertNotNull(periodType35);
        org.junit.Assert.assertNotNull(period36);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertNotNull(instant41);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(durationField43);
        org.junit.Assert.assertNotNull(localTime44);
        org.junit.Assert.assertNotNull(durationField45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(mutableDateTime48);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 7 + "'", int51 == 7);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(mutableDateTime61);
        org.junit.Assert.assertNotNull(dateTimeZone63);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 442 + "'", int66 == 442);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 442 + "'", int68 == 442);
        org.junit.Assert.assertNotNull(dateTime69);
    }

    @Test
    public void test07995() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07995");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.add((long) 'a');
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime0.yearOfCentury();
        mutableDateTime0.addSeconds(0);
        org.joda.time.Duration duration7 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Hours hours8 = duration7.toStandardHours();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(chronology9);
        int int11 = dateTime10.getSecondOfMinute();
        org.joda.time.MutablePeriod mutablePeriod12 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration7, (org.joda.time.ReadableInstant) dateTime10);
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((long) 1);
        org.joda.time.Instant instant15 = new org.joda.time.Instant();
        org.joda.time.Instant instant17 = instant15.withMillis(0L);
        org.joda.time.DateTime dateTime18 = instant17.toDateTime();
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((long) 1);
        org.joda.time.PeriodType periodType21 = org.joda.time.PeriodType.months();
        org.joda.time.Period period22 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime18, (org.joda.time.ReadableInstant) dateTime20, periodType21);
        org.joda.time.Period period23 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration7, (org.joda.time.ReadableInstant) dateTime14, periodType21);
        org.joda.time.Duration duration24 = new org.joda.time.Duration((org.joda.time.ReadableInstant) mutableDateTime0, (org.joda.time.ReadableInstant) dateTime14);
        mutableDateTime0.addMinutes(28);
        mutableDateTime0.addWeekyears(26263);
        org.joda.time.DateTime dateTime29 = mutableDateTime0.toDateTimeISO();
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(hours8);
// flaky:         org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertNotNull(instant17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(periodType21);
        org.junit.Assert.assertNotNull(dateTime29);
    }

    @Test
    public void test07996() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07996");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str2 = dateTimeZone1.toString();
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime(1327295L, dateTimeZone1);
        mutableDateTime3.addWeekyears(26441);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "UTC" + "'", str2, "UTC");
    }

    @Test
    public void test07997() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07997");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        java.lang.Object obj1 = mutableDateTime0.clone();
        mutableDateTime0.setTime((long) 46);
        org.joda.time.MutableDateTime.Property property4 = mutableDateTime0.dayOfWeek();
        mutableDateTime0.setMillisOfDay(2);
        org.joda.time.MutableDateTime.Property property7 = mutableDateTime0.yearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime8 = property7.roundCeiling();
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime8.minuteOfDay();
        org.joda.time.MutableDateTime mutableDateTime11 = property9.add((-268));
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property13 = localDate12.monthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.minuteOfDay();
        boolean boolean15 = localDate12.isSupported(dateTimeFieldType14);
        int int16 = localDate12.getDayOfYear();
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateMidnight dateMidnight18 = localDate12.toDateMidnight(dateTimeZone17);
        org.joda.time.LocalDate.Property property19 = localDate12.year();
        org.joda.time.LocalDate localDate21 = localDate12.withYearOfCentury(51);
        org.joda.time.MutableDateTime mutableDateTime22 = org.joda.time.MutableDateTime.now();
        mutableDateTime22.add((long) 'a');
        org.joda.time.MutableDateTime.Property property25 = mutableDateTime22.yearOfCentury();
        org.joda.time.Duration duration27 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period28 = duration27.toPeriod();
        org.joda.time.Duration duration30 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration33 = duration30.withDurationAdded((long) (short) 100, (int) ' ');
        org.joda.time.Duration duration34 = duration27.minus((org.joda.time.ReadableDuration) duration33);
        mutableDateTime22.add((org.joda.time.ReadableDuration) duration27);
        org.joda.time.MutableDateTime.Property property36 = mutableDateTime22.centuryOfEra();
        mutableDateTime22.addHours((int) (byte) 10);
        mutableDateTime22.addWeeks(20);
        org.joda.time.DateTimeField dateTimeField41 = mutableDateTime22.getRoundingField();
        int int42 = mutableDateTime22.getWeekyear();
        org.joda.time.LocalDate localDate43 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property44 = localDate43.monthOfYear();
        org.joda.time.DateTimeField dateTimeField45 = property44.getField();
        org.joda.time.LocalDate localDate46 = property44.roundCeilingCopy();
        org.joda.time.LocalDate localDate48 = localDate46.withCenturyOfEra((int) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone49 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone.setDefault(dateTimeZone49);
        org.joda.time.DateMidnight dateMidnight51 = localDate48.toDateMidnight(dateTimeZone49);
        mutableDateTime22.setZoneRetainFields(dateTimeZone49);
        org.joda.time.Interval interval53 = localDate21.toInterval(dateTimeZone49);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime54 = new org.joda.time.LocalTime((java.lang.Object) property9, dateTimeZone49);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: org.joda.time.MutableDateTime$Property");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(obj1);
// flaky:         org.junit.Assert.assertEquals(obj1.toString(), "2022-02-22T07:24:02.216Z");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj1), "2022-02-22T07:24:02.216Z");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj1), "2022-02-22T07:24:02.216Z");
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(mutableDateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 53 + "'", int16 == 53);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(dateMidnight18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(mutableDateTime22);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNull(dateTimeField41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 2022 + "'", int42 == 2022);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(localDate46);
        org.junit.Assert.assertNotNull(localDate48);
        org.junit.Assert.assertNotNull(dateTimeZone49);
        org.junit.Assert.assertNotNull(dateMidnight51);
        org.junit.Assert.assertNotNull(interval53);
    }

    @Test
    public void test07998() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07998");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.withHourOfDay(10);
        org.joda.time.LocalDateTime.Property property5 = localDateTime4.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime7 = property5.addWrapFieldToCopy(8);
        int int8 = localDateTime7.size();
        java.util.Date date9 = localDateTime7.toDate();
        org.joda.time.LocalDateTime.Property property10 = localDateTime7.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime7.plusHours(78);
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 4 + "'", int8 == 4);
        org.junit.Assert.assertNotNull(date9);
// flaky:         org.junit.Assert.assertEquals(date9.toString(), "Wed Feb 02 10:24:02 GMT 2022");
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localDateTime12);
    }

    @Test
    public void test07999() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07999");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime3 = mutableDateTime0.copy();
        org.joda.time.MutableDateTime.Property property4 = mutableDateTime0.yearOfEra();
        org.joda.time.MutableDateTime mutableDateTime6 = property4.addWrapField(62151);
        org.joda.time.MutableDateTime mutableDateTime8 = property4.addWrapField(26150);
        org.joda.time.DateTimeZone dateTimeZone9 = mutableDateTime8.getZone();
        org.joda.time.MutableDateTime.Property property10 = mutableDateTime8.yearOfCentury();
        boolean boolean12 = mutableDateTime8.isBefore(68991376564766L);
        org.joda.time.Duration duration15 = new org.joda.time.Duration(960000L, 3155760000000L);
        long long16 = duration15.getStandardHours();
        org.joda.time.Duration duration18 = duration15.minus((long) 180000000);
        mutableDateTime8.add((org.joda.time.ReadableDuration) duration18, 48);
        org.joda.time.MutablePeriod mutablePeriod23 = new org.joda.time.MutablePeriod((long) (short) -1, 3155695200000L);
        mutablePeriod23.clear();
        org.joda.time.Duration duration26 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period27 = duration26.toPeriod();
        org.joda.time.Duration duration30 = duration26.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime(chronology31);
        org.joda.time.DateTime dateTime34 = dateTime32.plusMinutes(15);
        org.joda.time.Interval interval35 = duration30.toIntervalTo((org.joda.time.ReadableInstant) dateTime34);
        mutablePeriod23.setPeriod((org.joda.time.ReadableInterval) interval35);
        org.joda.time.ReadableInstant readableInstant37 = null;
        org.joda.time.ReadableInstant readableInstant38 = null;
        org.joda.time.PeriodType periodType39 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod40 = new org.joda.time.MutablePeriod(readableInstant37, readableInstant38, periodType39);
        org.joda.time.DurationFieldType durationFieldType42 = periodType39.getFieldType((int) (short) 0);
        int int43 = mutablePeriod23.get(durationFieldType42);
        mutableDateTime8.add((org.joda.time.ReadablePeriod) mutablePeriod23);
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(mutableDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(mutableDateTime8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 876599L + "'", long16 == 876599L);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(interval35);
        org.junit.Assert.assertNotNull(periodType39);
        org.junit.Assert.assertNotNull(durationFieldType42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
    }

    @Test
    public void test08000() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test08000");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.add((long) 'a');
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime0.yearOfCentury();
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period6 = duration5.toPeriod();
        org.joda.time.Duration duration8 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration11 = duration8.withDurationAdded((long) (short) 100, (int) ' ');
        org.joda.time.Duration duration12 = duration5.minus((org.joda.time.ReadableDuration) duration11);
        mutableDateTime0.add((org.joda.time.ReadableDuration) duration5);
        org.joda.time.MutableDateTime.Property property14 = mutableDateTime0.centuryOfEra();
        mutableDateTime0.addHours((int) (byte) 10);
        mutableDateTime0.addYears(12);
        org.joda.time.Instant instant19 = new org.joda.time.Instant();
        org.joda.time.DateTime dateTime20 = instant19.toDateTime();
        org.joda.time.LocalDateTime localDateTime21 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime23.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime25.withCenturyOfEra((int) 'a');
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime(chronology28);
        org.joda.time.DateTime dateTime31 = dateTime29.plusMinutes(15);
        org.joda.time.DateTime dateTime32 = localDateTime25.toDateTime((org.joda.time.ReadableInstant) dateTime29);
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime34 = localDateTime25.toDateTime(dateTimeZone33);
        org.joda.time.DateTime dateTime35 = dateTime20.withZoneRetainFields(dateTimeZone33);
        java.lang.String str36 = dateTimeZone33.toString();
        java.lang.String str37 = dateTimeZone33.getID();
        org.joda.time.MutableDateTime mutableDateTime38 = new org.joda.time.MutableDateTime(dateTimeZone33);
        mutableDateTime0.setDate((org.joda.time.ReadableInstant) mutableDateTime38);
        mutableDateTime38.setWeekOfWeekyear(31);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime38.setDate(26369, 62176, 443);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 62176 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "UTC" + "'", str36, "UTC");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "UTC" + "'", str37, "UTC");
    }
}
